/*
* This file was generated by:
* /data/cross/panda3d/build/panda3d-3.8.0b4-x86_64-linux-gnu/bin/interrogate -promiscuous -string -fnames -assert -c -v -S /data/cross/panda3d/build/panda3d-3.8.0b4-x86_64-linux-gnu/include -S /data/cross/panda3d/build/panda3d-3.8.0b4-x86_64-linux-gnu/include/parser-inc -S /usr/include -S /usr/include/x86_64-linux-gnu --oc ./build/interrogate_temp.cpp -srcdir ./lib -nomangle -od ./build/interrogate.in -module  -library  -DINTERROGATE -DCPPPARSER -D__STDC__=1 -D__cplusplus=201103L -D__attribute__\(x\)= -D__x86_64__ -D_LP64 lib.cxx em.h lib.h
*
*/

#include "dtoolbase.h"
#include "interrogate_request.h"
#include "dconfig.h"
#include "pnotify.h"
#include <sstream>

#include <dlfcn.h>
#include "em.h"
#include "geomTriangles.h"
#include "geomVertexWriter.h"
#include "internalNameCollection.h"
#include <iostream>
#include "lib.h"
#include "materialCollection.h"
#include "nodePath.h"
#include "nodePathCollection.h"
#include "pandaFramework.h"
#include "pandaSystem.h"
#include "pandabase.h"
#include <set>
#include "threadPriority.h"


#if __GNUC__ >= 4
#define EXPORT_FUNC extern "C" __attribute__((used, visibility("default")))
#else
#define EXPORT_FUNC extern "C"
#endif


// 



// CachedTypedWritableReferenceCount

EXPORT_FUNC int CachedTypedWritableReferenceCount_C_get_cache_ref_count_i_p(CachedTypedWritableReferenceCount const *param0);
EXPORT_FUNC void CachedTypedWritableReferenceCount_C_cache_ref_v_p(CachedTypedWritableReferenceCount const *param0);
EXPORT_FUNC bool CachedTypedWritableReferenceCount_C_cache_unref_B_p(CachedTypedWritableReferenceCount const *param0);
EXPORT_FUNC bool CachedTypedWritableReferenceCount_C_test_ref_count_integrity_B_p(CachedTypedWritableReferenceCount const *param0);
EXPORT_FUNC void CachedTypedWritableReferenceCount_C_cache_ref_only_v_p(CachedTypedWritableReferenceCount const *param0);
EXPORT_FUNC int CachedTypedWritableReferenceCount_C_get_class_type_i_v();
EXPORT_FUNC void CachedTypedWritableReferenceCount_C_init_type_v_v();


// Camera

EXPORT_FUNC Camera * Camera_C_ctor_p_p(Camera const *param0);
EXPORT_FUNC Camera * Camera_C_ctor_p_sp(char const *param0, Lens *param1);
EXPORT_FUNC Camera * Camera_C_ctor_p_s(char const *param0);
EXPORT_FUNC PandaNode * Camera_C_make_copy_p_p(Camera const *param0);
EXPORT_FUNC bool Camera_C_safe_to_flatten_B_p(Camera const *param0);
EXPORT_FUNC bool Camera_C_safe_to_transform_B_p(Camera const *param0);
EXPORT_FUNC void Camera_C_set_active_v_pB(Camera *param0, bool param1);
EXPORT_FUNC bool Camera_C_is_active_B_p(Camera const *param0);
EXPORT_FUNC void Camera_C_set_scene_v_pp(Camera *param0, NodePath const *param1);
EXPORT_FUNC NodePath const * Camera_C_get_scene_p_p(Camera const *param0);
EXPORT_FUNC std::size_t Camera_C_get_num_display_regions_p_p(Camera const *param0);
EXPORT_FUNC DisplayRegion * Camera_C_get_display_region_p_pp(Camera const *param0, std::size_t param1);
EXPORT_FUNC void Camera_C_set_camera_mask_v_pp(Camera *param0, DrawMask *param1);
EXPORT_FUNC DrawMask * Camera_C_get_camera_mask_p_p(Camera const *param0);
EXPORT_FUNC void Camera_C_set_cull_center_v_pp(Camera *param0, NodePath const *param1);
EXPORT_FUNC NodePath const * Camera_C_get_cull_center_p_p(Camera const *param0);
EXPORT_FUNC void Camera_C_set_cull_bounds_v_pp(Camera *param0, BoundingVolume *param1);
EXPORT_FUNC BoundingVolume * Camera_C_get_cull_bounds_p_p(Camera const *param0);
EXPORT_FUNC void Camera_C_set_lod_center_v_pp(Camera *param0, NodePath const *param1);
EXPORT_FUNC NodePath const * Camera_C_get_lod_center_p_p(Camera const *param0);
EXPORT_FUNC void Camera_C_set_initial_state_v_pp(Camera *param0, RenderState const *param1);
EXPORT_FUNC ConstPointerTo< RenderState > * Camera_C_get_initial_state_p_p(Camera const *param0);
EXPORT_FUNC void Camera_C_set_tag_state_key_v_ps(Camera *param0, char const *param1);
EXPORT_FUNC char const * Camera_C_get_tag_state_key_s_p(Camera const *param0);
EXPORT_FUNC void Camera_C_set_lod_scale_v_pf(Camera *param0, PN_stdfloat param1);
EXPORT_FUNC PN_stdfloat Camera_C_get_lod_scale_f_p(Camera const *param0);
EXPORT_FUNC void Camera_C_set_tag_state_v_psp(Camera *param0, char const *param1, RenderState const *param2);
EXPORT_FUNC void Camera_C_clear_tag_state_v_ps(Camera *param0, char const *param1);
EXPORT_FUNC void Camera_C_clear_tag_states_v_p(Camera *param0);
EXPORT_FUNC bool Camera_C_has_tag_state_B_ps(Camera const *param0, char const *param1);
EXPORT_FUNC ConstPointerTo< RenderState > * Camera_C_get_tag_state_p_ps(Camera const *param0, char const *param1);
EXPORT_FUNC void Camera_C_set_aux_scene_data_v_ppp(Camera *param0, NodePath const *param1, AuxSceneData *param2);
EXPORT_FUNC bool Camera_C_clear_aux_scene_data_B_pp(Camera *param0, NodePath const *param1);
EXPORT_FUNC AuxSceneData * Camera_C_get_aux_scene_data_p_pp(Camera const *param0, NodePath const *param1);
EXPORT_FUNC void Camera_C_list_aux_scene_data_v_pp(Camera const *param0, std::ostream *param1);
EXPORT_FUNC int Camera_C_cleanup_aux_scene_data_i_pp(Camera *param0, Thread *param1);
EXPORT_FUNC int Camera_C_cleanup_aux_scene_data_i_p(Camera *param0);
EXPORT_FUNC void Camera_C_register_with_read_factory_v_v();
EXPORT_FUNC void Camera_C_write_datagram_v_ppp(Camera *param0, BamWriter *param1, Datagram *param2);
EXPORT_FUNC int Camera_C_get_class_type_i_v();
EXPORT_FUNC void Camera_C_init_type_v_v();
EXPORT_FUNC int Camera_C_get_type_i_p(Camera const *param0);
EXPORT_FUNC int Camera_C_force_init_type_i_p(Camera *param0);


// ConfigPage

EXPORT_FUNC ConfigPage * ConfigPage_C_get_default_page_p_v();
EXPORT_FUNC ConfigPage * ConfigPage_C_get_local_page_p_v();
EXPORT_FUNC char const * ConfigPage_C_get_name_s_p(ConfigPage const *param0);
EXPORT_FUNC bool ConfigPage_C_is_special_B_p(ConfigPage const *param0);
EXPORT_FUNC bool ConfigPage_C_is_implicit_B_p(ConfigPage const *param0);
EXPORT_FUNC void ConfigPage_C_set_sort_v_pi(ConfigPage *param0, int param1);
EXPORT_FUNC int ConfigPage_C_get_sort_i_p(ConfigPage const *param0);
EXPORT_FUNC int ConfigPage_C_get_page_seq_i_p(ConfigPage const *param0);
EXPORT_FUNC int ConfigPage_C_get_trust_level_i_p(ConfigPage const *param0);
EXPORT_FUNC void ConfigPage_C_set_trust_level_v_pi(ConfigPage *param0, int param1);
EXPORT_FUNC char const * ConfigPage_C_get_signature_s_p(ConfigPage const *param0);
EXPORT_FUNC void ConfigPage_C_clear_v_p(ConfigPage *param0);
EXPORT_FUNC bool ConfigPage_C_read_prc_B_pp(ConfigPage *param0, std::istream *param1);
EXPORT_FUNC bool ConfigPage_C_read_encrypted_prc_B_pps(ConfigPage *param0, std::istream *param1, char const *param2);
EXPORT_FUNC ConfigDeclaration * ConfigPage_C_make_declaration_p_pps(ConfigPage *param0, ConfigVariableCore *param1, char const *param2);
EXPORT_FUNC ConfigDeclaration * ConfigPage_C_make_declaration_p_pss(ConfigPage *param0, char const *param1, char const *param2);
EXPORT_FUNC bool ConfigPage_C_delete_declaration_B_pp(ConfigPage *param0, ConfigDeclaration *param1);
EXPORT_FUNC std::size_t ConfigPage_C_get_num_declarations_p_p(ConfigPage const *param0);
EXPORT_FUNC ConfigDeclaration const * ConfigPage_C_get_declaration_p_pp(ConfigPage const *param0, std::size_t param1);
EXPORT_FUNC ConfigDeclaration * ConfigPage_C_modify_declaration_p_pp(ConfigPage *param0, std::size_t param1);
EXPORT_FUNC char const * ConfigPage_C_get_variable_name_s_pp(ConfigPage const *param0, std::size_t param1);
EXPORT_FUNC char const * ConfigPage_C_get_string_value_s_pp(ConfigPage const *param0, std::size_t param1);
EXPORT_FUNC bool ConfigPage_C_is_variable_used_B_pp(ConfigPage const *param0, std::size_t param1);
EXPORT_FUNC void ConfigPage_C_output_v_pp(ConfigPage const *param0, std::ostream *param1);
EXPORT_FUNC void ConfigPage_C_output_brief_signature_v_pp(ConfigPage const *param0, std::ostream *param1);
EXPORT_FUNC void ConfigPage_C_write_v_pp(ConfigPage const *param0, std::ostream *param1);


// CopyOnWriteObject

EXPORT_FUNC Geom * CopyOnWriteObject_C_downcast_to_Geom_p_p(CopyOnWriteObject *param0);
EXPORT_FUNC GeomPrimitive * CopyOnWriteObject_C_downcast_to_GeomPrimitive_p_p(CopyOnWriteObject *param0);
EXPORT_FUNC GeomVertexData * CopyOnWriteObject_C_downcast_to_GeomVertexData_p_p(CopyOnWriteObject *param0);


// DrawableRegion

EXPORT_FUNC DrawableRegion * DrawableRegion_C_ctor_p_v();
EXPORT_FUNC DrawableRegion * DrawableRegion_C_ctor_p_p(DrawableRegion const *param0);
EXPORT_FUNC void DrawableRegion_C_copy_clear_settings_v_pp(DrawableRegion *param0, DrawableRegion const *param1);
EXPORT_FUNC void DrawableRegion_C_set_clear_color_active_v_pB(DrawableRegion *param0, bool param1);
EXPORT_FUNC bool DrawableRegion_C_get_clear_color_active_B_p(DrawableRegion const *param0);
EXPORT_FUNC void DrawableRegion_C_set_clear_depth_active_v_pB(DrawableRegion *param0, bool param1);
EXPORT_FUNC bool DrawableRegion_C_get_clear_depth_active_B_p(DrawableRegion const *param0);
EXPORT_FUNC void DrawableRegion_C_set_clear_stencil_active_v_pB(DrawableRegion *param0, bool param1);
EXPORT_FUNC bool DrawableRegion_C_get_clear_stencil_active_B_p(DrawableRegion const *param0);
EXPORT_FUNC void DrawableRegion_C_set_clear_color_v_pp(DrawableRegion *param0, LColor const *param1);
EXPORT_FUNC LColor const * DrawableRegion_C_get_clear_color_p_p(DrawableRegion const *param0);
EXPORT_FUNC void DrawableRegion_C_set_clear_depth_v_pf(DrawableRegion *param0, PN_stdfloat param1);
EXPORT_FUNC PN_stdfloat DrawableRegion_C_get_clear_depth_f_p(DrawableRegion const *param0);
EXPORT_FUNC void DrawableRegion_C_set_clear_stencil_v_pI(DrawableRegion *param0, unsigned int param1);
EXPORT_FUNC unsigned int DrawableRegion_C_get_clear_stencil_I_p(DrawableRegion const *param0);
EXPORT_FUNC void DrawableRegion_C_set_clear_active_v_piB(DrawableRegion *param0, int param1, bool param2);
EXPORT_FUNC bool DrawableRegion_C_get_clear_active_B_pi(DrawableRegion const *param0, int param1);
EXPORT_FUNC void DrawableRegion_C_set_clear_value_v_pip(DrawableRegion *param0, int param1, LColor const *param2);
EXPORT_FUNC LColor const * DrawableRegion_C_get_clear_value_p_pi(DrawableRegion const *param0, int param1);
EXPORT_FUNC void DrawableRegion_C_disable_clears_v_p(DrawableRegion *param0);
EXPORT_FUNC bool DrawableRegion_C_is_any_clear_active_B_p(DrawableRegion const *param0);
EXPORT_FUNC void DrawableRegion_C_set_pixel_zoom_v_pf(DrawableRegion *param0, PN_stdfloat param1);
EXPORT_FUNC PN_stdfloat DrawableRegion_C_get_pixel_zoom_f_p(DrawableRegion const *param0);
EXPORT_FUNC PN_stdfloat DrawableRegion_C_get_pixel_factor_f_p(DrawableRegion const *param0);
EXPORT_FUNC bool DrawableRegion_C_supports_pixel_zoom_B_p(DrawableRegion const *param0);
EXPORT_FUNC int DrawableRegion_C_get_renderbuffer_type_i_i(int param0);
EXPORT_FUNC int DrawableRegion_C_get_screenshot_buffer_type_i_p(DrawableRegion const *param0);
EXPORT_FUNC int DrawableRegion_C_get_draw_buffer_type_i_p(DrawableRegion const *param0);
EXPORT_FUNC GraphicsOutput * DrawableRegion_C_downcast_to_GraphicsOutput_p_p(DrawableRegion *param0);


// Engine

EXPORT_FUNC Engine * Engine_C_ctor_p_v();
EXPORT_FUNC Engine * Engine_C_ctor_p_p(Engine const *param0);
EXPORT_FUNC void Engine_C_dtor_v_p(Engine *param0);
EXPORT_FUNC void Engine_C_stop_v_v();
EXPORT_FUNC int Engine_C_is_alive_i_v();
EXPORT_FUNC int Engine_C_HelloEngine_i_p(Engine *param0);
EXPORT_FUNC int Engine_C_casetest_i_pisB(Engine *param0, int param1, char const *param2, bool param3);
EXPORT_FUNC NodePath * Engine_C_load_model_p_ps(Engine *param0, char const *param1);
EXPORT_FUNC GeomVertexWriter * Engine_C_new_GeomVertexWriter_p_pps(Engine *param0, GeomVertexData *param1, char const *param2);
EXPORT_FUNC void Engine_C_add_primitive_v_ppp(Engine *param0, Geom *param1, GeomTriangles *param2);
EXPORT_FUNC void Engine_C_close_primitive_v_pp(Engine *param0, GeomTriangles *param1);
EXPORT_FUNC PointerTo< GeomTriangles > * Engine_C_new_GeomTriangles_p_p(Engine *param0);
EXPORT_FUNC NodePath * Engine_C_new_Cube_p_pfss(Engine *param0, float param1, char const *param2, char const *param3);
EXPORT_FUNC void Engine_C_attach_v_pp(Engine *param0, NodePath *param1);
EXPORT_FUNC int Engine_C_inc_ref_i_p(ReferenceCount *param0);
EXPORT_FUNC int Engine_C_dec_ref_i_p(ReferenceCount *param0);
EXPORT_FUNC void Engine_C_prc_v_p(Filename const *param0);
EXPORT_FUNC void Engine_C_prc_v_ss(char const *param0, char const *param1);
EXPORT_FUNC void Engine_C_build_v_p(Engine *param0);
EXPORT_FUNC void Engine_C_step_v_p(Engine *param0);
EXPORT_FUNC char const * Engine_C_get_version_string_s_v();
EXPORT_FUNC WindowFramework * Engine_C_get_wframe_p_p(Engine const *param0);
EXPORT_FUNC void Engine_C_set_wframe_v_pp(Engine *param0, WindowFramework *param1);
EXPORT_FUNC PandaFramework * Engine_C_get_framework_p_p(Engine const *param0);
EXPORT_FUNC void Engine_C_set_framework_v_pp(Engine *param0, PandaFramework *param1);


// Filename

EXPORT_FUNC Filename * Filename_C_ctor_p_v();
EXPORT_FUNC Filename * Filename_C_ctor_p_p(Filename *param0);
EXPORT_FUNC Filename * Filename_C_ctor_p_p_1_p_p(Filename const *param0);
EXPORT_FUNC Filename * Filename_C_ctor_p_pp(Filename const *param0, Filename const *param1);
EXPORT_FUNC Filename * Filename_C_ctor_p_s(char const *param0);
EXPORT_FUNC Filename * Filename_C_ctor_p_s_1_p_s(char const *param0);
EXPORT_FUNC Filename * Filename_C_ctor_p_p_1_p_p_2_p_p(wchar_t const *param0);
EXPORT_FUNC Filename * Filename_C_text_filename_p_p(Filename const *param0);
EXPORT_FUNC Filename * Filename_C_text_filename_p_s(char const *param0);
EXPORT_FUNC Filename * Filename_C_binary_filename_p_p(Filename const *param0);
EXPORT_FUNC Filename * Filename_C_binary_filename_p_s(char const *param0);
EXPORT_FUNC Filename * Filename_C_dso_filename_p_s(char const *param0);
EXPORT_FUNC Filename * Filename_C_executable_filename_p_s(char const *param0);
EXPORT_FUNC Filename * Filename_C_pattern_filename_p_s(char const *param0);
EXPORT_FUNC Filename * Filename_C_from_os_specific_p_sp(char const *param0, Filename::Type param1);
EXPORT_FUNC Filename * Filename_C_from_os_specific_p_s(char const *param0);
EXPORT_FUNC Filename * Filename_C_from_os_specific_w_p_pp(wchar_t const *param0, Filename::Type param1);
EXPORT_FUNC Filename * Filename_C_from_os_specific_w_p_p(wchar_t const *param0);
EXPORT_FUNC Filename * Filename_C_expand_from_p_sp(char const *param0, Filename::Type param1);
EXPORT_FUNC Filename * Filename_C_expand_from_p_s(char const *param0);
EXPORT_FUNC Filename * Filename_C_temporary_p_sssp(char const *param0, char const *param1, char const *param2, Filename::Type param3);
EXPORT_FUNC Filename * Filename_C_temporary_p_sss(char const *param0, char const *param1, char const *param2);
EXPORT_FUNC Filename * Filename_C_temporary_p_ss(char const *param0, char const *param1);
EXPORT_FUNC Filename const * Filename_C_get_home_directory_p_v();
EXPORT_FUNC Filename const * Filename_C_get_temp_directory_p_v();
EXPORT_FUNC Filename const * Filename_C_get_user_appdata_directory_p_v();
EXPORT_FUNC Filename const * Filename_C_get_common_appdata_directory_p_v();
EXPORT_FUNC char const * Filename_C_c_str_s_p(Filename const *param0);
EXPORT_FUNC bool Filename_C_empty_B_p(Filename const *param0);
EXPORT_FUNC std::size_t Filename_C_length_p_p(Filename const *param0);
EXPORT_FUNC char const * Filename_C_substr_s_pp(Filename const *param0, std::size_t param1);
EXPORT_FUNC char const * Filename_C_substr_s_ppp(Filename const *param0, std::size_t param1, std::size_t param2);
EXPORT_FUNC char const * Filename_C_get_fullpath_s_p(Filename const *param0);
EXPORT_FUNC wchar_t const * Filename_C_get_fullpath_w_p_p(Filename const *param0);
EXPORT_FUNC char const * Filename_C_get_dirname_s_p(Filename const *param0);
EXPORT_FUNC char const * Filename_C_get_basename_s_p(Filename const *param0);
EXPORT_FUNC char const * Filename_C_get_fullpath_wo_extension_s_p(Filename const *param0);
EXPORT_FUNC char const * Filename_C_get_basename_wo_extension_s_p(Filename const *param0);
EXPORT_FUNC char const * Filename_C_get_extension_s_p(Filename const *param0);
EXPORT_FUNC void Filename_C_set_fullpath_v_ps(Filename *param0, char const *param1);
EXPORT_FUNC void Filename_C_set_dirname_v_ps(Filename *param0, char const *param1);
EXPORT_FUNC void Filename_C_set_basename_v_ps(Filename *param0, char const *param1);
EXPORT_FUNC void Filename_C_set_fullpath_wo_extension_v_ps(Filename *param0, char const *param1);
EXPORT_FUNC void Filename_C_set_basename_wo_extension_v_ps(Filename *param0, char const *param1);
EXPORT_FUNC void Filename_C_set_extension_v_ps(Filename *param0, char const *param1);
EXPORT_FUNC void Filename_C_set_binary_v_p(Filename *param0);
EXPORT_FUNC void Filename_C_set_text_v_p(Filename *param0);
EXPORT_FUNC bool Filename_C_is_binary_B_p(Filename const *param0);
EXPORT_FUNC bool Filename_C_is_text_B_p(Filename const *param0);
EXPORT_FUNC bool Filename_C_is_binary_or_text_B_p(Filename const *param0);
EXPORT_FUNC void Filename_C_set_type_v_pp(Filename *param0, Filename::Type param1);
EXPORT_FUNC Filename::Type Filename_C_get_type_p_p(Filename const *param0);
EXPORT_FUNC void Filename_C_set_pattern_v_pB(Filename *param0, bool param1);
EXPORT_FUNC bool Filename_C_get_pattern_B_p(Filename const *param0);
EXPORT_FUNC bool Filename_C_has_hash_B_p(Filename const *param0);
EXPORT_FUNC Filename * Filename_C_get_filename_index_p_pi(Filename const *param0, int param1);
EXPORT_FUNC char const * Filename_C_get_hash_to_end_s_p(Filename const *param0);
EXPORT_FUNC void Filename_C_set_hash_to_end_v_ps(Filename *param0, char const *param1);
EXPORT_FUNC void Filename_C_extract_components_v_pp(Filename const *param0, vector_string *param1);
EXPORT_FUNC void Filename_C_standardize_v_p(Filename *param0);
EXPORT_FUNC bool Filename_C_is_local_B_p(Filename const *param0);
EXPORT_FUNC bool Filename_C_is_fully_qualified_B_p(Filename const *param0);
EXPORT_FUNC void Filename_C_make_absolute_v_p(Filename *param0);
EXPORT_FUNC void Filename_C_make_absolute_v_pp(Filename *param0, Filename const *param1);
EXPORT_FUNC bool Filename_C_make_canonical_B_p(Filename *param0);
EXPORT_FUNC bool Filename_C_make_true_case_B_p(Filename *param0);
EXPORT_FUNC char const * Filename_C_to_os_specific_s_p(Filename const *param0);
EXPORT_FUNC wchar_t const * Filename_C_to_os_specific_w_p_p(Filename const *param0);
EXPORT_FUNC char const * Filename_C_to_os_generic_s_p(Filename const *param0);
EXPORT_FUNC char const * Filename_C_to_os_short_name_s_p(Filename const *param0);
EXPORT_FUNC char const * Filename_C_to_os_long_name_s_p(Filename const *param0);
EXPORT_FUNC bool Filename_C_exists_B_p(Filename const *param0);
EXPORT_FUNC bool Filename_C_is_regular_file_B_p(Filename const *param0);
EXPORT_FUNC bool Filename_C_is_writable_B_p(Filename const *param0);
EXPORT_FUNC bool Filename_C_is_directory_B_p(Filename const *param0);
EXPORT_FUNC bool Filename_C_is_executable_B_p(Filename const *param0);
EXPORT_FUNC int Filename_C_compare_timestamps_i_ppBB(Filename const *param0, Filename const *param1, bool param2, bool param3);
EXPORT_FUNC int Filename_C_compare_timestamps_i_ppB(Filename const *param0, Filename const *param1, bool param2);
EXPORT_FUNC int Filename_C_compare_timestamps_i_pp(Filename const *param0, Filename const *param1);
EXPORT_FUNC time_t Filename_C_get_timestamp_p_p(Filename const *param0);
EXPORT_FUNC time_t Filename_C_get_access_timestamp_p_p(Filename const *param0);
EXPORT_FUNC std::streamsize Filename_C_get_file_size_p_p(Filename const *param0);
EXPORT_FUNC bool Filename_C_resolve_filename_B_pps(Filename *param0, DSearchPath const *param1, char const *param2);
EXPORT_FUNC bool Filename_C_resolve_filename_B_pp(Filename *param0, DSearchPath const *param1);
EXPORT_FUNC bool Filename_C_make_relative_to_B_ppB(Filename *param0, Filename *param1, bool param2);
EXPORT_FUNC bool Filename_C_make_relative_to_B_pp(Filename *param0, Filename *param1);
EXPORT_FUNC int Filename_C_find_on_searchpath_i_pp(Filename *param0, DSearchPath const *param1);
EXPORT_FUNC bool Filename_C_scan_directory_B_pp(Filename const *param0, vector_string *param1);
EXPORT_FUNC bool Filename_C_open_read_B_pp(Filename const *param0, pifstream *param1);
EXPORT_FUNC bool Filename_C_open_read_B_pp_1_B_pp(Filename const *param0, std::ifstream *param1);
EXPORT_FUNC bool Filename_C_open_write_B_ppB(Filename const *param0, pofstream *param1, bool param2);
EXPORT_FUNC bool Filename_C_open_write_B_pp(Filename const *param0, pofstream *param1);
EXPORT_FUNC bool Filename_C_open_write_B_ppB_1_B_ppB(Filename const *param0, std::ofstream *param1, bool param2);
EXPORT_FUNC bool Filename_C_open_write_B_pp_1_B_pp(Filename const *param0, std::ofstream *param1);
EXPORT_FUNC bool Filename_C_open_append_B_pp(Filename const *param0, pofstream *param1);
EXPORT_FUNC bool Filename_C_open_append_B_pp_1_B_pp(Filename const *param0, std::ofstream *param1);
EXPORT_FUNC bool Filename_C_open_read_write_B_ppB(Filename const *param0, pfstream *param1, bool param2);
EXPORT_FUNC bool Filename_C_open_read_write_B_pp(Filename const *param0, pfstream *param1);
EXPORT_FUNC bool Filename_C_open_read_write_B_ppB_1_B_ppB(Filename const *param0, std::fstream *param1, bool param2);
EXPORT_FUNC bool Filename_C_open_read_write_B_pp_1_B_pp(Filename const *param0, std::fstream *param1);
EXPORT_FUNC bool Filename_C_open_read_append_B_pp(Filename const *param0, pfstream *param1);
EXPORT_FUNC bool Filename_C_open_read_append_B_pp_1_B_pp(Filename const *param0, std::fstream *param1);
EXPORT_FUNC bool Filename_C_chdir_B_p(Filename const *param0);
EXPORT_FUNC bool Filename_C_touch_B_p(Filename const *param0);
EXPORT_FUNC bool Filename_C_unlink_B_p(Filename const *param0);
EXPORT_FUNC bool Filename_C_rename_to_B_pp(Filename const *param0, Filename const *param1);
EXPORT_FUNC bool Filename_C_copy_to_B_pp(Filename const *param0, Filename const *param1);
EXPORT_FUNC bool Filename_C_make_dir_B_p(Filename const *param0);
EXPORT_FUNC bool Filename_C_mkdir_B_p(Filename const *param0);
EXPORT_FUNC bool Filename_C_rmdir_B_p(Filename const *param0);
EXPORT_FUNC int Filename_C_compare_to_i_pp(Filename const *param0, Filename const *param1);
EXPORT_FUNC bool Filename_C___nonzero___B_p(Filename const *param0);
EXPORT_FUNC int Filename_C_get_hash_i_p(Filename const *param0);
EXPORT_FUNC void Filename_C_output_v_pp(Filename const *param0, std::ostream *param1);
EXPORT_FUNC void Filename_C_set_filesystem_encoding_v_p(TextEncoder::Encoding param0);
EXPORT_FUNC TextEncoder::Encoding Filename_C_get_filesystem_encoding_p_v();
EXPORT_FUNC int Filename_C_get_class_type_i_v();
EXPORT_FUNC void Filename_C_init_type_v_v();


// Geom

EXPORT_FUNC CopyOnWriteObject * Geom_C_upcast_to_CopyOnWriteObject_p_p(Geom *param0);
EXPORT_FUNC GeomEnums * Geom_C_upcast_to_GeomEnums_p_p(Geom *param0);
EXPORT_FUNC Geom * Geom_C_ctor_p_p(GeomVertexData const *param0);
EXPORT_FUNC Geom * Geom_C_make_copy_p_p(Geom const *param0);
EXPORT_FUNC GeomEnums::PrimitiveType Geom_C_get_primitive_type_p_p(Geom const *param0);
EXPORT_FUNC GeomEnums::ShadeModel Geom_C_get_shade_model_p_p(Geom const *param0);
EXPORT_FUNC int Geom_C_get_geom_rendering_i_p(Geom const *param0);
EXPORT_FUNC GeomEnums::UsageHint Geom_C_get_usage_hint_p_p(Geom const *param0);
EXPORT_FUNC void Geom_C_set_usage_hint_v_pp(Geom *param0, GeomEnums::UsageHint param1);
EXPORT_FUNC ConstPointerTo< GeomVertexData > * Geom_C_get_vertex_data_p_pp(Geom const *param0, Thread *param1);
EXPORT_FUNC ConstPointerTo< GeomVertexData > * Geom_C_get_vertex_data_p_p(Geom const *param0);
EXPORT_FUNC PointerTo< GeomVertexData > * Geom_C_modify_vertex_data_p_p(Geom *param0);
EXPORT_FUNC void Geom_C_set_vertex_data_v_pp(Geom *param0, GeomVertexData const *param1);
EXPORT_FUNC void Geom_C_offset_vertices_v_ppi(Geom *param0, GeomVertexData const *param1, int param2);
EXPORT_FUNC int Geom_C_make_nonindexed_i_pB(Geom *param0, bool param1);
EXPORT_FUNC ConstPointerTo< GeomVertexData > * Geom_C_get_animated_vertex_data_p_pBp(Geom const *param0, bool param1, Thread *param2);
EXPORT_FUNC ConstPointerTo< GeomVertexData > * Geom_C_get_animated_vertex_data_p_pB(Geom const *param0, bool param1);
EXPORT_FUNC bool Geom_C_is_empty_B_p(Geom const *param0);
EXPORT_FUNC std::size_t Geom_C_get_num_primitives_p_p(Geom const *param0);
EXPORT_FUNC ConstPointerTo< GeomPrimitive > * Geom_C_get_primitive_p_pp(Geom const *param0, std::size_t param1);
EXPORT_FUNC PointerTo< GeomPrimitive > * Geom_C_modify_primitive_p_pp(Geom *param0, std::size_t param1);
EXPORT_FUNC void Geom_C_set_primitive_v_ppp(Geom *param0, std::size_t param1, GeomPrimitive const *param2);
EXPORT_FUNC void Geom_C_insert_primitive_v_ppp(Geom *param0, std::size_t param1, GeomPrimitive const *param2);
EXPORT_FUNC void Geom_C_add_primitive_v_pp(Geom *param0, GeomPrimitive const *param1);
EXPORT_FUNC void Geom_C_remove_primitive_v_pp(Geom *param0, std::size_t param1);
EXPORT_FUNC void Geom_C_clear_primitives_v_p(Geom *param0);
EXPORT_FUNC PointerTo< Geom > * Geom_C_decompose_p_p(Geom const *param0);
EXPORT_FUNC PointerTo< Geom > * Geom_C_doubleside_p_p(Geom const *param0);
EXPORT_FUNC PointerTo< Geom > * Geom_C_reverse_p_p(Geom const *param0);
EXPORT_FUNC PointerTo< Geom > * Geom_C_rotate_p_p(Geom const *param0);
EXPORT_FUNC PointerTo< Geom > * Geom_C_unify_p_piB(Geom const *param0, int param1, bool param2);
EXPORT_FUNC PointerTo< Geom > * Geom_C_make_points_p_p(Geom const *param0);
EXPORT_FUNC PointerTo< Geom > * Geom_C_make_lines_p_p(Geom const *param0);
EXPORT_FUNC PointerTo< Geom > * Geom_C_make_patches_p_p(Geom const *param0);
EXPORT_FUNC PointerTo< Geom > * Geom_C_make_adjacency_p_p(Geom const *param0);
EXPORT_FUNC void Geom_C_decompose_in_place_v_p(Geom *param0);
EXPORT_FUNC void Geom_C_doubleside_in_place_v_p(Geom *param0);
EXPORT_FUNC void Geom_C_reverse_in_place_v_p(Geom *param0);
EXPORT_FUNC void Geom_C_rotate_in_place_v_p(Geom *param0);
EXPORT_FUNC void Geom_C_unify_in_place_v_piB(Geom *param0, int param1, bool param2);
EXPORT_FUNC void Geom_C_make_points_in_place_v_p(Geom *param0);
EXPORT_FUNC void Geom_C_make_lines_in_place_v_p(Geom *param0);
EXPORT_FUNC void Geom_C_make_patches_in_place_v_p(Geom *param0);
EXPORT_FUNC void Geom_C_make_adjacency_in_place_v_p(Geom *param0);
EXPORT_FUNC bool Geom_C_copy_primitives_from_B_pp(Geom *param0, Geom const *param1);
EXPORT_FUNC int Geom_C_get_num_bytes_i_p(Geom const *param0);
EXPORT_FUNC UpdateSeq * Geom_C_get_modified_p_pp(Geom const *param0, Thread *param1);
EXPORT_FUNC UpdateSeq * Geom_C_get_modified_p_p(Geom const *param0);
EXPORT_FUNC bool Geom_C_request_resident_B_p(Geom const *param0);
EXPORT_FUNC void Geom_C_transform_vertices_v_pp(Geom *param0, LMatrix4 const *param1);
EXPORT_FUNC bool Geom_C_check_valid_B_p(Geom const *param0);
EXPORT_FUNC bool Geom_C_check_valid_B_pp(Geom const *param0, GeomVertexData const *param1);
EXPORT_FUNC ConstPointerTo< BoundingVolume > * Geom_C_get_bounds_p_pp(Geom const *param0, Thread *param1);
EXPORT_FUNC ConstPointerTo< BoundingVolume > * Geom_C_get_bounds_p_p(Geom const *param0);
EXPORT_FUNC int Geom_C_get_nested_vertices_i_pp(Geom const *param0, Thread *param1);
EXPORT_FUNC int Geom_C_get_nested_vertices_i_p(Geom const *param0);
EXPORT_FUNC void Geom_C_mark_bounds_stale_v_p(Geom const *param0);
EXPORT_FUNC void Geom_C_set_bounds_type_v_pp(Geom *param0, BoundingVolume::BoundsType param1);
EXPORT_FUNC BoundingVolume::BoundsType Geom_C_get_bounds_type_p_p(Geom const *param0);
EXPORT_FUNC void Geom_C_set_bounds_v_pp(Geom *param0, BoundingVolume const *param1);
EXPORT_FUNC void Geom_C_clear_bounds_v_p(Geom *param0);
EXPORT_FUNC void Geom_C_output_v_pp(Geom const *param0, std::ostream *param1);
EXPORT_FUNC void Geom_C_write_v_ppi(Geom const *param0, std::ostream *param1, int param2);
EXPORT_FUNC void Geom_C_write_v_pp(Geom const *param0, std::ostream *param1);
EXPORT_FUNC void Geom_C_clear_cache_v_p(Geom *param0);
EXPORT_FUNC void Geom_C_clear_cache_stage_v_pp(Geom *param0, Thread *param1);
EXPORT_FUNC void Geom_C_prepare_v_pp(Geom *param0, PreparedGraphicsObjects *param1);
EXPORT_FUNC bool Geom_C_is_prepared_B_pp(Geom const *param0, PreparedGraphicsObjects *param1);
EXPORT_FUNC bool Geom_C_release_B_pp(Geom *param0, PreparedGraphicsObjects *param1);
EXPORT_FUNC int Geom_C_release_all_i_p(Geom *param0);
EXPORT_FUNC GeomContext * Geom_C_prepare_now_p_ppp(Geom *param0, PreparedGraphicsObjects *param1, GraphicsStateGuardianBase *param2);
EXPORT_FUNC bool Geom_C_draw_B_pppBp(Geom const *param0, GraphicsStateGuardianBase *param1, GeomVertexData const *param2, bool param3, Thread *param4);
EXPORT_FUNC UpdateSeq * Geom_C_get_next_modified_p_v();
EXPORT_FUNC void Geom_C_register_with_read_factory_v_v();
EXPORT_FUNC void Geom_C_write_datagram_v_ppp(Geom *param0, BamWriter *param1, Datagram *param2);
EXPORT_FUNC void Geom_C_finalize_v_pp(Geom *param0, BamReader *param1);
EXPORT_FUNC int Geom_C_get_class_type_i_v();
EXPORT_FUNC void Geom_C_init_type_v_v();
EXPORT_FUNC int Geom_C_get_type_i_p(Geom const *param0);
EXPORT_FUNC int Geom_C_force_init_type_i_p(Geom *param0);


// GeomEnums

EXPORT_FUNC GeomEnums * GeomEnums_C_ctor_p_v();
EXPORT_FUNC GeomEnums * GeomEnums_C_ctor_p_p(GeomEnums const *param0);
EXPORT_FUNC Geom * GeomEnums_C_downcast_to_Geom_p_p(GeomEnums *param0);
EXPORT_FUNC GeomPrimitive * GeomEnums_C_downcast_to_GeomPrimitive_p_p(GeomEnums *param0);
EXPORT_FUNC GeomVertexData * GeomEnums_C_downcast_to_GeomVertexData_p_p(GeomEnums *param0);
EXPORT_FUNC GeomVertexFormat * GeomEnums_C_downcast_to_GeomVertexFormat_p_p(GeomEnums *param0);


// GeomNode

EXPORT_FUNC GeomNode * GeomNode_C_ctor_p_s(char const *param0);
EXPORT_FUNC void GeomNode_C_apply_attribs_to_vertices_v_ppip(GeomNode *param0, AccumulatedAttribs const *param1, int param2, GeomTransformer *param3);
EXPORT_FUNC void GeomNode_C_xform_v_pp(GeomNode *param0, LMatrix4 const *param1);
EXPORT_FUNC bool GeomNode_C_is_renderable_B_p(GeomNode const *param0);
EXPORT_FUNC void GeomNode_C_add_for_draw_v_ppp(GeomNode *param0, CullTraverser *param1, CullTraverserData *param2);
EXPORT_FUNC bool GeomNode_C_safe_to_flatten_B_p(GeomNode const *param0);
EXPORT_FUNC bool GeomNode_C_safe_to_combine_B_p(GeomNode const *param0);
EXPORT_FUNC void GeomNode_C_r_prepare_scene_v_ppppp(GeomNode *param0, GraphicsStateGuardianBase *param1, RenderState const *param2, GeomTransformer *param3, Thread *param4);
EXPORT_FUNC void GeomNode_C_set_preserved_v_pB(GeomNode *param0, bool param1);
EXPORT_FUNC bool GeomNode_C_get_preserved_B_p(GeomNode const *param0);
EXPORT_FUNC int GeomNode_C_get_num_geoms_i_p(GeomNode const *param0);
EXPORT_FUNC ConstPointerTo< Geom > * GeomNode_C_get_geom_p_pi(GeomNode const *param0, int param1);
EXPORT_FUNC PointerTo< Geom > * GeomNode_C_modify_geom_p_pi(GeomNode *param0, int param1);
EXPORT_FUNC RenderState const * GeomNode_C_get_geom_state_p_pi(GeomNode const *param0, int param1);
EXPORT_FUNC void GeomNode_C_set_geom_state_v_pip(GeomNode *param0, int param1, RenderState const *param2);
EXPORT_FUNC void GeomNode_C_add_geom_v_ppp(GeomNode *param0, Geom *param1, RenderState const *param2);
EXPORT_FUNC void GeomNode_C_add_geom_v_pp(GeomNode *param0, Geom *param1);
EXPORT_FUNC void GeomNode_C_add_geoms_from_v_pp(GeomNode *param0, GeomNode const *param1);
EXPORT_FUNC void GeomNode_C_set_geom_v_pip(GeomNode *param0, int param1, Geom *param2);
EXPORT_FUNC void GeomNode_C_remove_geom_v_pi(GeomNode *param0, int param1);
EXPORT_FUNC void GeomNode_C_remove_all_geoms_v_p(GeomNode *param0);
EXPORT_FUNC bool GeomNode_C_check_valid_B_p(GeomNode const *param0);
EXPORT_FUNC void GeomNode_C_decompose_v_p(GeomNode *param0);
EXPORT_FUNC void GeomNode_C_unify_v_piB(GeomNode *param0, int param1, bool param2);
EXPORT_FUNC void GeomNode_C_write_geoms_v_ppi(GeomNode const *param0, std::ostream *param1, int param2);
EXPORT_FUNC void GeomNode_C_write_verbose_v_ppi(GeomNode const *param0, std::ostream *param1, int param2);
EXPORT_FUNC CollideMask * GeomNode_C_get_default_collide_mask_p_v();
EXPORT_FUNC void GeomNode_C_do_premunge_v_pppp(GeomNode *param0, GraphicsStateGuardianBase *param1, RenderState const *param2, GeomTransformer *param3);
EXPORT_FUNC GeomNode::Geoms * GeomNode_C_get_geoms_p_pp(GeomNode const *param0, Thread *param1);
EXPORT_FUNC GeomNode::Geoms * GeomNode_C_get_geoms_p_p(GeomNode const *param0);
EXPORT_FUNC void GeomNode_C_register_with_read_factory_v_v();
EXPORT_FUNC void GeomNode_C_write_datagram_v_ppp(GeomNode *param0, BamWriter *param1, Datagram *param2);
EXPORT_FUNC void GeomNode_C_finalize_v_pp(GeomNode *param0, BamReader *param1);
EXPORT_FUNC int GeomNode_C_get_class_type_i_v();
EXPORT_FUNC void GeomNode_C_init_type_v_v();
EXPORT_FUNC int GeomNode_C_get_type_i_p(GeomNode const *param0);
EXPORT_FUNC int GeomNode_C_force_init_type_i_p(GeomNode *param0);


// GeomPrimitive

EXPORT_FUNC CopyOnWriteObject * GeomPrimitive_C_upcast_to_CopyOnWriteObject_p_p(GeomPrimitive *param0);
EXPORT_FUNC GeomEnums * GeomPrimitive_C_upcast_to_GeomEnums_p_p(GeomPrimitive *param0);
EXPORT_FUNC PointerTo< GeomPrimitive > * GeomPrimitive_C_make_copy_p_p(GeomPrimitive const *param0);
EXPORT_FUNC GeomEnums::PrimitiveType GeomPrimitive_C_get_primitive_type_p_p(GeomPrimitive const *param0);
EXPORT_FUNC int GeomPrimitive_C_get_geom_rendering_i_p(GeomPrimitive const *param0);
EXPORT_FUNC GeomEnums::ShadeModel GeomPrimitive_C_get_shade_model_p_p(GeomPrimitive const *param0);
EXPORT_FUNC void GeomPrimitive_C_set_shade_model_v_pp(GeomPrimitive *param0, GeomEnums::ShadeModel param1);
EXPORT_FUNC GeomEnums::UsageHint GeomPrimitive_C_get_usage_hint_p_p(GeomPrimitive const *param0);
EXPORT_FUNC void GeomPrimitive_C_set_usage_hint_v_pp(GeomPrimitive *param0, GeomEnums::UsageHint param1);
EXPORT_FUNC GeomEnums::NumericType GeomPrimitive_C_get_index_type_p_p(GeomPrimitive const *param0);
EXPORT_FUNC void GeomPrimitive_C_set_index_type_v_pp(GeomPrimitive *param0, GeomEnums::NumericType param1);
EXPORT_FUNC bool GeomPrimitive_C_is_composite_B_p(GeomPrimitive const *param0);
EXPORT_FUNC bool GeomPrimitive_C_is_indexed_B_p(GeomPrimitive const *param0);
EXPORT_FUNC int GeomPrimitive_C_get_first_vertex_i_p(GeomPrimitive const *param0);
EXPORT_FUNC int GeomPrimitive_C_get_num_vertices_i_p(GeomPrimitive const *param0);
EXPORT_FUNC int GeomPrimitive_C_get_vertex_i_pi(GeomPrimitive const *param0, int param1);
EXPORT_FUNC void GeomPrimitive_C_add_vertex_v_pi(GeomPrimitive *param0, int param1);
EXPORT_FUNC void GeomPrimitive_C_add_vertices_v_pii(GeomPrimitive *param0, int param1, int param2);
EXPORT_FUNC void GeomPrimitive_C_add_vertices_v_piii(GeomPrimitive *param0, int param1, int param2, int param3);
EXPORT_FUNC void GeomPrimitive_C_add_vertices_v_piiii(GeomPrimitive *param0, int param1, int param2, int param3, int param4);
EXPORT_FUNC void GeomPrimitive_C_add_consecutive_vertices_v_pii(GeomPrimitive *param0, int param1, int param2);
EXPORT_FUNC void GeomPrimitive_C_add_next_vertices_v_pi(GeomPrimitive *param0, int param1);
EXPORT_FUNC void GeomPrimitive_C_reserve_num_vertices_v_pi(GeomPrimitive *param0, int param1);
EXPORT_FUNC bool GeomPrimitive_C_close_primitive_B_p(GeomPrimitive *param0);
EXPORT_FUNC void GeomPrimitive_C_clear_vertices_v_p(GeomPrimitive *param0);
EXPORT_FUNC void GeomPrimitive_C_offset_vertices_v_pi(GeomPrimitive *param0, int param1);
EXPORT_FUNC void GeomPrimitive_C_offset_vertices_v_piii(GeomPrimitive *param0, int param1, int param2, int param3);
EXPORT_FUNC void GeomPrimitive_C_make_nonindexed_v_ppp(GeomPrimitive *param0, GeomVertexData *param1, GeomVertexData const *param2);
EXPORT_FUNC void GeomPrimitive_C_pack_vertices_v_ppp(GeomPrimitive *param0, GeomVertexData *param1, GeomVertexData const *param2);
EXPORT_FUNC void GeomPrimitive_C_make_indexed_v_p(GeomPrimitive *param0);
EXPORT_FUNC int GeomPrimitive_C_get_num_primitives_i_p(GeomPrimitive const *param0);
EXPORT_FUNC int GeomPrimitive_C_get_primitive_start_i_pi(GeomPrimitive const *param0, int param1);
EXPORT_FUNC int GeomPrimitive_C_get_primitive_end_i_pi(GeomPrimitive const *param0, int param1);
EXPORT_FUNC int GeomPrimitive_C_get_primitive_num_vertices_i_pi(GeomPrimitive const *param0, int param1);
EXPORT_FUNC int GeomPrimitive_C_get_num_used_vertices_i_p(GeomPrimitive const *param0);
EXPORT_FUNC int GeomPrimitive_C_get_num_faces_i_p(GeomPrimitive const *param0);
EXPORT_FUNC int GeomPrimitive_C_get_primitive_num_faces_i_pi(GeomPrimitive const *param0, int param1);
EXPORT_FUNC int GeomPrimitive_C_get_min_vertex_i_p(GeomPrimitive const *param0);
EXPORT_FUNC int GeomPrimitive_C_get_primitive_min_vertex_i_pi(GeomPrimitive const *param0, int param1);
EXPORT_FUNC int GeomPrimitive_C_get_max_vertex_i_p(GeomPrimitive const *param0);
EXPORT_FUNC int GeomPrimitive_C_get_primitive_max_vertex_i_pi(GeomPrimitive const *param0, int param1);
EXPORT_FUNC ConstPointerTo< GeomPrimitive > * GeomPrimitive_C_decompose_p_p(GeomPrimitive const *param0);
EXPORT_FUNC ConstPointerTo< GeomPrimitive > * GeomPrimitive_C_rotate_p_p(GeomPrimitive const *param0);
EXPORT_FUNC ConstPointerTo< GeomPrimitive > * GeomPrimitive_C_doubleside_p_p(GeomPrimitive const *param0);
EXPORT_FUNC ConstPointerTo< GeomPrimitive > * GeomPrimitive_C_reverse_p_p(GeomPrimitive const *param0);
EXPORT_FUNC ConstPointerTo< GeomPrimitive > * GeomPrimitive_C_match_shade_model_p_pp(GeomPrimitive const *param0, GeomEnums::ShadeModel param1);
EXPORT_FUNC ConstPointerTo< GeomPrimitive > * GeomPrimitive_C_make_points_p_p(GeomPrimitive const *param0);
EXPORT_FUNC ConstPointerTo< GeomPrimitive > * GeomPrimitive_C_make_lines_p_p(GeomPrimitive const *param0);
EXPORT_FUNC ConstPointerTo< GeomPrimitive > * GeomPrimitive_C_make_patches_p_p(GeomPrimitive const *param0);
EXPORT_FUNC ConstPointerTo< GeomPrimitive > * GeomPrimitive_C_make_adjacency_p_p(GeomPrimitive const *param0);
EXPORT_FUNC int GeomPrimitive_C_get_num_bytes_i_p(GeomPrimitive const *param0);
EXPORT_FUNC int GeomPrimitive_C_get_data_size_bytes_i_p(GeomPrimitive const *param0);
EXPORT_FUNC UpdateSeq * GeomPrimitive_C_get_modified_p_p(GeomPrimitive const *param0);
EXPORT_FUNC bool GeomPrimitive_C_request_resident_B_pp(GeomPrimitive const *param0, Thread *param1);
EXPORT_FUNC bool GeomPrimitive_C_request_resident_B_p(GeomPrimitive const *param0);
EXPORT_FUNC bool GeomPrimitive_C_check_valid_B_pp(GeomPrimitive const *param0, GeomVertexData const *param1);
EXPORT_FUNC bool GeomPrimitive_C_check_valid_B_pp_1_B_pp(GeomPrimitive const *param0, GeomVertexDataPipelineReader const *param1);
EXPORT_FUNC void GeomPrimitive_C_output_v_pp(GeomPrimitive const *param0, std::ostream *param1);
EXPORT_FUNC void GeomPrimitive_C_write_v_ppi(GeomPrimitive const *param0, std::ostream *param1, int param2);
EXPORT_FUNC ConstPointerTo< GeomVertexArrayData > * GeomPrimitive_C_get_vertices_p_p(GeomPrimitive const *param0);
EXPORT_FUNC ConstPointerTo< GeomVertexArrayDataHandle > * GeomPrimitive_C_get_vertices_handle_p_pp(GeomPrimitive const *param0, Thread *param1);
EXPORT_FUNC PointerTo< GeomVertexArrayData > * GeomPrimitive_C_modify_vertices_p_pi(GeomPrimitive *param0, int param1);
EXPORT_FUNC PointerTo< GeomVertexArrayData > * GeomPrimitive_C_modify_vertices_p_p(GeomPrimitive *param0);
EXPORT_FUNC PointerTo< GeomVertexArrayDataHandle > * GeomPrimitive_C_modify_vertices_handle_p_pp(GeomPrimitive *param0, Thread *param1);
EXPORT_FUNC void GeomPrimitive_C_set_vertices_v_ppi(GeomPrimitive *param0, GeomVertexArrayData const *param1, int param2);
EXPORT_FUNC void GeomPrimitive_C_set_vertices_v_pp(GeomPrimitive *param0, GeomVertexArrayData const *param1);
EXPORT_FUNC void GeomPrimitive_C_set_nonindexed_vertices_v_pii(GeomPrimitive *param0, int param1, int param2);
EXPORT_FUNC int GeomPrimitive_C_get_index_stride_i_p(GeomPrimitive const *param0);
EXPORT_FUNC int GeomPrimitive_C_get_strip_cut_index_i_p(GeomPrimitive const *param0);
EXPORT_FUNC CPTA_int * GeomPrimitive_C_get_ends_p_p(GeomPrimitive const *param0);
EXPORT_FUNC PTA_int * GeomPrimitive_C_modify_ends_p_p(GeomPrimitive *param0);
EXPORT_FUNC void GeomPrimitive_C_set_ends_v_pp(GeomPrimitive *param0, PTA_int *param1);
EXPORT_FUNC ConstPointerTo< GeomVertexArrayData > * GeomPrimitive_C_get_mins_p_p(GeomPrimitive const *param0);
EXPORT_FUNC ConstPointerTo< GeomVertexArrayData > * GeomPrimitive_C_get_maxs_p_p(GeomPrimitive const *param0);
EXPORT_FUNC void GeomPrimitive_C_set_minmax_v_piipp(GeomPrimitive *param0, int param1, int param2, GeomVertexArrayData *param3, GeomVertexArrayData *param4);
EXPORT_FUNC void GeomPrimitive_C_clear_minmax_v_p(GeomPrimitive *param0);
EXPORT_FUNC int GeomPrimitive_C_get_num_vertices_per_primitive_i_p(GeomPrimitive const *param0);
EXPORT_FUNC int GeomPrimitive_C_get_min_num_vertices_per_primitive_i_p(GeomPrimitive const *param0);
EXPORT_FUNC int GeomPrimitive_C_get_num_unused_vertices_per_primitive_i_p(GeomPrimitive const *param0);
EXPORT_FUNC void GeomPrimitive_C_prepare_v_pp(GeomPrimitive *param0, PreparedGraphicsObjects *param1);
EXPORT_FUNC bool GeomPrimitive_C_is_prepared_B_pp(GeomPrimitive const *param0, PreparedGraphicsObjects *param1);
EXPORT_FUNC IndexBufferContext * GeomPrimitive_C_prepare_now_p_ppp(GeomPrimitive *param0, PreparedGraphicsObjects *param1, GraphicsStateGuardianBase *param2);
EXPORT_FUNC bool GeomPrimitive_C_release_B_pp(GeomPrimitive *param0, PreparedGraphicsObjects *param1);
EXPORT_FUNC int GeomPrimitive_C_release_all_i_p(GeomPrimitive *param0);
EXPORT_FUNC GeomVertexArrayFormat const * GeomPrimitive_C_get_index_format_p_p(GeomPrimitive const *param0);
EXPORT_FUNC GeomVertexArrayFormat const * GeomPrimitive_C_get_index_format_p_p_1_p_p(GeomEnums::NumericType param0);
EXPORT_FUNC PointerTo< GeomVertexArrayData > * GeomPrimitive_C_make_index_data_p_p(GeomPrimitive const *param0);
EXPORT_FUNC bool GeomPrimitive_C_draw_B_pppB(GeomPrimitive const *param0, GraphicsStateGuardianBase *param1, GeomPrimitivePipelineReader const *param2, bool param3);
EXPORT_FUNC void GeomPrimitive_C_write_datagram_v_ppp(GeomPrimitive *param0, BamWriter *param1, Datagram *param2);
EXPORT_FUNC void GeomPrimitive_C_finalize_v_pp(GeomPrimitive *param0, BamReader *param1);
EXPORT_FUNC int GeomPrimitive_C_get_class_type_i_v();
EXPORT_FUNC void GeomPrimitive_C_init_type_v_v();
EXPORT_FUNC int GeomPrimitive_C_get_type_i_p(GeomPrimitive const *param0);
EXPORT_FUNC int GeomPrimitive_C_force_init_type_i_p(GeomPrimitive *param0);


// GeomTriangles

EXPORT_FUNC GeomTriangles * GeomTriangles_C_ctor_p_p(GeomEnums::UsageHint param0);
EXPORT_FUNC GeomTriangles * GeomTriangles_C_ctor_p_p_1_p_p(GeomTriangles const *param0);
EXPORT_FUNC bool GeomTriangles_C_draw_B_pppB(GeomTriangles const *param0, GraphicsStateGuardianBase *param1, GeomPrimitivePipelineReader const *param2, bool param3);
EXPORT_FUNC void GeomTriangles_C_register_with_read_factory_v_v();
EXPORT_FUNC int GeomTriangles_C_get_class_type_i_v();
EXPORT_FUNC void GeomTriangles_C_init_type_v_v();
EXPORT_FUNC int GeomTriangles_C_get_type_i_p(GeomTriangles const *param0);
EXPORT_FUNC int GeomTriangles_C_force_init_type_i_p(GeomTriangles *param0);


// GeomVertexData

EXPORT_FUNC CopyOnWriteObject * GeomVertexData_C_upcast_to_CopyOnWriteObject_p_p(GeomVertexData *param0);
EXPORT_FUNC GeomEnums * GeomVertexData_C_upcast_to_GeomEnums_p_p(GeomVertexData *param0);
EXPORT_FUNC GeomVertexData * GeomVertexData_C_ctor_p_p(GeomVertexData const *param0);
EXPORT_FUNC GeomVertexData * GeomVertexData_C_ctor_p_pp(GeomVertexData const *param0, GeomVertexFormat const *param1);
EXPORT_FUNC GeomVertexData * GeomVertexData_C_ctor_p_spp(char const *param0, GeomVertexFormat const *param1, GeomEnums::UsageHint param2);
EXPORT_FUNC int GeomVertexData_C_compare_to_i_pp(GeomVertexData const *param0, GeomVertexData const *param1);
EXPORT_FUNC char const * GeomVertexData_C_get_name_s_p(GeomVertexData const *param0);
EXPORT_FUNC void GeomVertexData_C_set_name_v_ps(GeomVertexData *param0, char const *param1);
EXPORT_FUNC GeomEnums::UsageHint GeomVertexData_C_get_usage_hint_p_p(GeomVertexData const *param0);
EXPORT_FUNC void GeomVertexData_C_set_usage_hint_v_pp(GeomVertexData *param0, GeomEnums::UsageHint param1);
EXPORT_FUNC GeomVertexFormat const * GeomVertexData_C_get_format_p_p(GeomVertexData const *param0);
EXPORT_FUNC void GeomVertexData_C_set_format_v_pp(GeomVertexData *param0, GeomVertexFormat const *param1);
EXPORT_FUNC void GeomVertexData_C_unclean_set_format_v_pp(GeomVertexData *param0, GeomVertexFormat const *param1);
EXPORT_FUNC bool GeomVertexData_C_has_column_B_ps(GeomVertexData const *param0, InternalName const *param1);
EXPORT_FUNC int GeomVertexData_C_get_num_rows_i_p(GeomVertexData const *param0);
EXPORT_FUNC bool GeomVertexData_C_set_num_rows_B_pi(GeomVertexData *param0, int param1);
EXPORT_FUNC bool GeomVertexData_C_unclean_set_num_rows_B_pi(GeomVertexData *param0, int param1);
EXPORT_FUNC bool GeomVertexData_C_reserve_num_rows_B_pi(GeomVertexData *param0, int param1);
EXPORT_FUNC void GeomVertexData_C_clear_rows_v_p(GeomVertexData *param0);
EXPORT_FUNC std::size_t GeomVertexData_C_get_num_arrays_p_p(GeomVertexData const *param0);
EXPORT_FUNC ConstPointerTo< GeomVertexArrayData > * GeomVertexData_C_get_array_p_pp(GeomVertexData const *param0, std::size_t param1);
EXPORT_FUNC ConstPointerTo< GeomVertexArrayDataHandle > * GeomVertexData_C_get_array_handle_p_pp(GeomVertexData const *param0, std::size_t param1);
EXPORT_FUNC PointerTo< GeomVertexArrayData > * GeomVertexData_C_modify_array_p_pp(GeomVertexData *param0, std::size_t param1);
EXPORT_FUNC PointerTo< GeomVertexArrayDataHandle > * GeomVertexData_C_modify_array_handle_p_pp(GeomVertexData *param0, std::size_t param1);
EXPORT_FUNC void GeomVertexData_C_set_array_v_ppp(GeomVertexData *param0, std::size_t param1, GeomVertexArrayData const *param2);
EXPORT_FUNC TransformTable const * GeomVertexData_C_get_transform_table_p_p(GeomVertexData const *param0);
EXPORT_FUNC void GeomVertexData_C_set_transform_table_v_pp(GeomVertexData *param0, TransformTable const *param1);
EXPORT_FUNC void GeomVertexData_C_clear_transform_table_v_p(GeomVertexData *param0);
EXPORT_FUNC ConstPointerTo< TransformBlendTable > * GeomVertexData_C_get_transform_blend_table_p_p(GeomVertexData const *param0);
EXPORT_FUNC PointerTo< TransformBlendTable > * GeomVertexData_C_modify_transform_blend_table_p_p(GeomVertexData *param0);
EXPORT_FUNC void GeomVertexData_C_set_transform_blend_table_v_pp(GeomVertexData *param0, TransformBlendTable const *param1);
EXPORT_FUNC void GeomVertexData_C_clear_transform_blend_table_v_p(GeomVertexData *param0);
EXPORT_FUNC SliderTable const * GeomVertexData_C_get_slider_table_p_p(GeomVertexData const *param0);
EXPORT_FUNC void GeomVertexData_C_set_slider_table_v_pp(GeomVertexData *param0, SliderTable const *param1);
EXPORT_FUNC void GeomVertexData_C_clear_slider_table_v_p(GeomVertexData *param0);
EXPORT_FUNC int GeomVertexData_C_get_num_bytes_i_p(GeomVertexData const *param0);
EXPORT_FUNC UpdateSeq * GeomVertexData_C_get_modified_p_pp(GeomVertexData const *param0, Thread *param1);
EXPORT_FUNC UpdateSeq * GeomVertexData_C_get_modified_p_p(GeomVertexData const *param0);
EXPORT_FUNC bool GeomVertexData_C_request_resident_B_p(GeomVertexData const *param0);
EXPORT_FUNC void GeomVertexData_C_copy_from_v_ppBp(GeomVertexData *param0, GeomVertexData const *param1, bool param2, Thread *param3);
EXPORT_FUNC void GeomVertexData_C_copy_from_v_ppB(GeomVertexData *param0, GeomVertexData const *param1, bool param2);
EXPORT_FUNC void GeomVertexData_C_copy_row_from_v_pipip(GeomVertexData *param0, int param1, GeomVertexData const *param2, int param3, Thread *param4);
EXPORT_FUNC ConstPointerTo< GeomVertexData > * GeomVertexData_C_convert_to_p_pp(GeomVertexData const *param0, GeomVertexFormat const *param1);
EXPORT_FUNC ConstPointerTo< GeomVertexData > * GeomVertexData_C_scale_color_p_pp(GeomVertexData const *param0, LVecBase4 const *param1);
EXPORT_FUNC ConstPointerTo< GeomVertexData > * GeomVertexData_C_scale_color_p_ppipp(GeomVertexData const *param0, LVecBase4 const *param1, int param2, GeomEnums::NumericType param3, GeomEnums::Contents param4);
EXPORT_FUNC ConstPointerTo< GeomVertexData > * GeomVertexData_C_set_color_p_pp(GeomVertexData const *param0, LColor const *param1);
EXPORT_FUNC ConstPointerTo< GeomVertexData > * GeomVertexData_C_set_color_p_ppipp(GeomVertexData const *param0, LColor const *param1, int param2, GeomEnums::NumericType param3, GeomEnums::Contents param4);
EXPORT_FUNC ConstPointerTo< GeomVertexData > * GeomVertexData_C_reverse_normals_p_p(GeomVertexData const *param0);
EXPORT_FUNC ConstPointerTo< GeomVertexData > * GeomVertexData_C_animate_vertices_p_pBp(GeomVertexData const *param0, bool param1, Thread *param2);
EXPORT_FUNC void GeomVertexData_C_clear_animated_vertices_v_p(GeomVertexData *param0);
EXPORT_FUNC void GeomVertexData_C_transform_vertices_v_pp(GeomVertexData *param0, LMatrix4 const *param1);
EXPORT_FUNC void GeomVertexData_C_transform_vertices_v_ppp(GeomVertexData *param0, LMatrix4 const *param1, SparseArray const *param2);
EXPORT_FUNC void GeomVertexData_C_transform_vertices_v_ppii(GeomVertexData *param0, LMatrix4 const *param1, int param2, int param3);
EXPORT_FUNC PointerTo< GeomVertexData > * GeomVertexData_C_replace_column_p_ppipp(GeomVertexData const *param0, InternalName *param1, int param2, GeomEnums::NumericType param3, GeomEnums::Contents param4);
EXPORT_FUNC void GeomVertexData_C_output_v_pp(GeomVertexData const *param0, std::ostream *param1);
EXPORT_FUNC void GeomVertexData_C_write_v_ppi(GeomVertexData const *param0, std::ostream *param1, int param2);
EXPORT_FUNC void GeomVertexData_C_write_v_pp(GeomVertexData const *param0, std::ostream *param1);
EXPORT_FUNC void GeomVertexData_C_describe_vertex_v_ppi(GeomVertexData const *param0, std::ostream *param1, int param2);
EXPORT_FUNC void GeomVertexData_C_clear_cache_v_p(GeomVertexData *param0);
EXPORT_FUNC void GeomVertexData_C_clear_cache_stage_v_p(GeomVertexData *param0);
EXPORT_FUNC uint32_t GeomVertexData_C_pack_abcd_I_IIII(unsigned int param0, unsigned int param1, unsigned int param2, unsigned int param3);
EXPORT_FUNC unsigned int GeomVertexData_C_unpack_abcd_a_I_I(uint32_t param0);
EXPORT_FUNC unsigned int GeomVertexData_C_unpack_abcd_b_I_I(uint32_t param0);
EXPORT_FUNC unsigned int GeomVertexData_C_unpack_abcd_c_I_I(uint32_t param0);
EXPORT_FUNC unsigned int GeomVertexData_C_unpack_abcd_d_I_I(uint32_t param0);
EXPORT_FUNC uint32_t GeomVertexData_C_pack_ufloat_I_fff(float param0, float param1, float param2);
EXPORT_FUNC float GeomVertexData_C_unpack_ufloat_a_f_I(uint32_t param0);
EXPORT_FUNC float GeomVertexData_C_unpack_ufloat_b_f_I(uint32_t param0);
EXPORT_FUNC float GeomVertexData_C_unpack_ufloat_c_f_I(uint32_t param0);
EXPORT_FUNC void GeomVertexData_C_register_with_read_factory_v_v();
EXPORT_FUNC void GeomVertexData_C_write_datagram_v_ppp(GeomVertexData *param0, BamWriter *param1, Datagram *param2);
EXPORT_FUNC bool GeomVertexData_C_require_fully_complete_B_p(GeomVertexData const *param0);
EXPORT_FUNC void GeomVertexData_C_finalize_v_pp(GeomVertexData *param0, BamReader *param1);
EXPORT_FUNC int GeomVertexData_C_get_class_type_i_v();
EXPORT_FUNC void GeomVertexData_C_init_type_v_v();
EXPORT_FUNC int GeomVertexData_C_get_type_i_p(GeomVertexData const *param0);
EXPORT_FUNC int GeomVertexData_C_force_init_type_i_p(GeomVertexData *param0);


// GeomVertexFormat

EXPORT_FUNC TypedWritableReferenceCount * GeomVertexFormat_C_upcast_to_TypedWritableReferenceCount_p_p(GeomVertexFormat *param0);
EXPORT_FUNC GeomEnums * GeomVertexFormat_C_upcast_to_GeomEnums_p_p(GeomVertexFormat *param0);
EXPORT_FUNC GeomVertexFormat * GeomVertexFormat_C_ctor_p_v();
EXPORT_FUNC GeomVertexFormat * GeomVertexFormat_C_ctor_p_p(GeomVertexArrayFormat const *param0);
EXPORT_FUNC GeomVertexFormat * GeomVertexFormat_C_ctor_p_p_1_p_p(GeomVertexFormat const *param0);
EXPORT_FUNC bool GeomVertexFormat_C_unref_B_p(GeomVertexFormat const *param0);
EXPORT_FUNC bool GeomVertexFormat_C_is_registered_B_p(GeomVertexFormat const *param0);
EXPORT_FUNC ConstPointerTo< GeomVertexFormat > * GeomVertexFormat_C_register_format_p_p(GeomVertexArrayFormat const *param0);
EXPORT_FUNC ConstPointerTo< GeomVertexFormat > * GeomVertexFormat_C_register_format_p_p_1_p_p(GeomVertexFormat const *param0);
EXPORT_FUNC GeomVertexAnimationSpec const * GeomVertexFormat_C_get_animation_p_p(GeomVertexFormat const *param0);
EXPORT_FUNC void GeomVertexFormat_C_set_animation_v_pp(GeomVertexFormat *param0, GeomVertexAnimationSpec const *param1);
EXPORT_FUNC ConstPointerTo< GeomVertexFormat > * GeomVertexFormat_C_get_post_animated_format_p_p(GeomVertexFormat const *param0);
EXPORT_FUNC ConstPointerTo< GeomVertexFormat > * GeomVertexFormat_C_get_union_format_p_pp(GeomVertexFormat const *param0, GeomVertexFormat const *param1);
EXPORT_FUNC std::size_t GeomVertexFormat_C_get_num_arrays_p_p(GeomVertexFormat const *param0);
EXPORT_FUNC GeomVertexArrayFormat const * GeomVertexFormat_C_get_array_p_pp(GeomVertexFormat const *param0, std::size_t param1);
EXPORT_FUNC GeomVertexArrayFormat * GeomVertexFormat_C_modify_array_p_pp(GeomVertexFormat *param0, std::size_t param1);
EXPORT_FUNC void GeomVertexFormat_C_set_array_v_ppp(GeomVertexFormat *param0, std::size_t param1, GeomVertexArrayFormat const *param2);
EXPORT_FUNC void GeomVertexFormat_C_remove_array_v_pp(GeomVertexFormat *param0, std::size_t param1);
EXPORT_FUNC std::size_t GeomVertexFormat_C_add_array_p_pp(GeomVertexFormat *param0, GeomVertexArrayFormat const *param1);
EXPORT_FUNC void GeomVertexFormat_C_insert_array_v_ppp(GeomVertexFormat *param0, std::size_t param1, GeomVertexArrayFormat const *param2);
EXPORT_FUNC void GeomVertexFormat_C_clear_arrays_v_p(GeomVertexFormat *param0);
EXPORT_FUNC void GeomVertexFormat_C_remove_empty_arrays_v_p(GeomVertexFormat *param0);
EXPORT_FUNC std::size_t GeomVertexFormat_C_get_num_columns_p_p(GeomVertexFormat const *param0);
EXPORT_FUNC int GeomVertexFormat_C_get_array_with_i_ps(GeomVertexFormat const *param0, InternalName const *param1);
EXPORT_FUNC int GeomVertexFormat_C_get_array_with_i_pp(GeomVertexFormat const *param0, std::size_t param1);
EXPORT_FUNC GeomVertexColumn const * GeomVertexFormat_C_get_column_p_ps(GeomVertexFormat const *param0, InternalName const *param1);
EXPORT_FUNC GeomVertexColumn const * GeomVertexFormat_C_get_column_p_pp(GeomVertexFormat const *param0, std::size_t param1);
EXPORT_FUNC bool GeomVertexFormat_C_has_column_B_ps(GeomVertexFormat const *param0, InternalName const *param1);
EXPORT_FUNC InternalName const * GeomVertexFormat_C_get_column_name_s_pp(GeomVertexFormat const *param0, std::size_t param1);
EXPORT_FUNC void GeomVertexFormat_C_remove_column_v_psB(GeomVertexFormat *param0, InternalName const *param1, bool param2);
EXPORT_FUNC void GeomVertexFormat_C_remove_column_v_ps(GeomVertexFormat *param0, InternalName const *param1);
EXPORT_FUNC void GeomVertexFormat_C_pack_columns_v_p(GeomVertexFormat *param0);
EXPORT_FUNC void GeomVertexFormat_C_align_columns_for_animation_v_p(GeomVertexFormat *param0);
EXPORT_FUNC void GeomVertexFormat_C_maybe_align_columns_for_animation_v_p(GeomVertexFormat *param0);
EXPORT_FUNC std::size_t GeomVertexFormat_C_get_num_points_p_p(GeomVertexFormat const *param0);
EXPORT_FUNC InternalName const * GeomVertexFormat_C_get_point_s_pp(GeomVertexFormat const *param0, std::size_t param1);
EXPORT_FUNC std::size_t GeomVertexFormat_C_get_num_vectors_p_p(GeomVertexFormat const *param0);
EXPORT_FUNC InternalName const * GeomVertexFormat_C_get_vector_s_pp(GeomVertexFormat const *param0, std::size_t param1);
EXPORT_FUNC std::size_t GeomVertexFormat_C_get_num_texcoords_p_p(GeomVertexFormat const *param0);
EXPORT_FUNC InternalName const * GeomVertexFormat_C_get_texcoord_s_pp(GeomVertexFormat const *param0, std::size_t param1);
EXPORT_FUNC std::size_t GeomVertexFormat_C_get_num_morphs_p_p(GeomVertexFormat const *param0);
EXPORT_FUNC InternalName const * GeomVertexFormat_C_get_morph_slider_s_pp(GeomVertexFormat const *param0, std::size_t param1);
EXPORT_FUNC InternalName const * GeomVertexFormat_C_get_morph_base_s_pp(GeomVertexFormat const *param0, std::size_t param1);
EXPORT_FUNC InternalName const * GeomVertexFormat_C_get_morph_delta_s_pp(GeomVertexFormat const *param0, std::size_t param1);
EXPORT_FUNC void GeomVertexFormat_C_output_v_pp(GeomVertexFormat const *param0, std::ostream *param1);
EXPORT_FUNC void GeomVertexFormat_C_write_v_ppi(GeomVertexFormat const *param0, std::ostream *param1, int param2);
EXPORT_FUNC void GeomVertexFormat_C_write_v_pp(GeomVertexFormat const *param0, std::ostream *param1);
EXPORT_FUNC void GeomVertexFormat_C_write_with_data_v_ppip(GeomVertexFormat const *param0, std::ostream *param1, int param2, GeomVertexData const *param3);
EXPORT_FUNC GeomVertexFormat const * GeomVertexFormat_C_get_empty_p_v();
EXPORT_FUNC GeomVertexFormat const * GeomVertexFormat_C_get_v3_p_v();
EXPORT_FUNC GeomVertexFormat const * GeomVertexFormat_C_get_v3n3_p_v();
EXPORT_FUNC GeomVertexFormat const * GeomVertexFormat_C_get_v3t2_p_v();
EXPORT_FUNC GeomVertexFormat const * GeomVertexFormat_C_get_v3n3t2_p_v();
EXPORT_FUNC GeomVertexFormat const * GeomVertexFormat_C_get_v3cp_p_v();
EXPORT_FUNC GeomVertexFormat const * GeomVertexFormat_C_get_v3cpt2_p_v();
EXPORT_FUNC GeomVertexFormat const * GeomVertexFormat_C_get_v3n3cp_p_v();
EXPORT_FUNC GeomVertexFormat const * GeomVertexFormat_C_get_v3n3cpt2_p_v();
EXPORT_FUNC GeomVertexFormat const * GeomVertexFormat_C_get_v3c4_p_v();
EXPORT_FUNC GeomVertexFormat const * GeomVertexFormat_C_get_v3c4t2_p_v();
EXPORT_FUNC GeomVertexFormat const * GeomVertexFormat_C_get_v3n3c4_p_v();
EXPORT_FUNC GeomVertexFormat const * GeomVertexFormat_C_get_v3n3c4t2_p_v();
EXPORT_FUNC int GeomVertexFormat_C_get_vertex_array_index_i_p(GeomVertexFormat const *param0);
EXPORT_FUNC GeomVertexColumn const * GeomVertexFormat_C_get_vertex_column_p_p(GeomVertexFormat const *param0);
EXPORT_FUNC int GeomVertexFormat_C_get_normal_array_index_i_p(GeomVertexFormat const *param0);
EXPORT_FUNC GeomVertexColumn const * GeomVertexFormat_C_get_normal_column_p_p(GeomVertexFormat const *param0);
EXPORT_FUNC int GeomVertexFormat_C_get_color_array_index_i_p(GeomVertexFormat const *param0);
EXPORT_FUNC GeomVertexColumn const * GeomVertexFormat_C_get_color_column_p_p(GeomVertexFormat const *param0);
EXPORT_FUNC int GeomVertexFormat_C_compare_to_i_pp(GeomVertexFormat const *param0, GeomVertexFormat const *param1);
EXPORT_FUNC void GeomVertexFormat_C_register_with_read_factory_v_v();
EXPORT_FUNC void GeomVertexFormat_C_write_datagram_v_ppp(GeomVertexFormat *param0, BamWriter *param1, Datagram *param2);
EXPORT_FUNC int GeomVertexFormat_C_get_class_type_i_v();
EXPORT_FUNC void GeomVertexFormat_C_init_type_v_v();
EXPORT_FUNC int GeomVertexFormat_C_get_type_i_p(GeomVertexFormat const *param0);
EXPORT_FUNC int GeomVertexFormat_C_force_init_type_i_p(GeomVertexFormat *param0);


// GeomVertexWriter

EXPORT_FUNC GeomVertexWriter * GeomVertexWriter_C_ctor_p_pp(GeomVertexArrayData *param0, Thread *param1);
EXPORT_FUNC GeomVertexWriter * GeomVertexWriter_C_ctor_p_p(GeomVertexArrayData *param0);
EXPORT_FUNC GeomVertexWriter * GeomVertexWriter_C_ctor_p_pip(GeomVertexArrayData *param0, int param1, Thread *param2);
EXPORT_FUNC GeomVertexWriter * GeomVertexWriter_C_ctor_p_pi(GeomVertexArrayData *param0, int param1);
EXPORT_FUNC GeomVertexWriter * GeomVertexWriter_C_ctor_p_psp(GeomVertexData *param0, CPT_InternalName *param1, Thread *param2);
EXPORT_FUNC GeomVertexWriter * GeomVertexWriter_C_ctor_p_ps(GeomVertexData *param0, CPT_InternalName *param1);
EXPORT_FUNC GeomVertexWriter * GeomVertexWriter_C_ctor_p_pp_1_p_pp(GeomVertexData *param0, Thread *param1);
EXPORT_FUNC GeomVertexWriter * GeomVertexWriter_C_ctor_p_p_1_p_p(GeomVertexData *param0);
EXPORT_FUNC GeomVertexWriter * GeomVertexWriter_C_ctor_p_ps_1_p_ps(GeomVertexDataPipelineWriter *param0, InternalName const *param1);
EXPORT_FUNC GeomVertexWriter * GeomVertexWriter_C_ctor_p_p_1_p_p_2_p_p(GeomVertexWriter const *param0);
EXPORT_FUNC GeomVertexWriter * GeomVertexWriter_C_ctor_p_p_1_p_p_2_p_p_3_p_p(Thread *param0);
EXPORT_FUNC GeomVertexWriter * GeomVertexWriter_C_ctor_p_v();
EXPORT_FUNC GeomVertexData * GeomVertexWriter_C_get_vertex_data_p_p(GeomVertexWriter const *param0);
EXPORT_FUNC GeomVertexArrayData * GeomVertexWriter_C_get_array_data_p_p(GeomVertexWriter const *param0);
EXPORT_FUNC GeomVertexArrayDataHandle * GeomVertexWriter_C_get_array_handle_p_p(GeomVertexWriter const *param0);
EXPORT_FUNC std::size_t GeomVertexWriter_C_get_stride_p_p(GeomVertexWriter const *param0);
EXPORT_FUNC Thread * GeomVertexWriter_C_get_current_thread_p_p(GeomVertexWriter const *param0);
EXPORT_FUNC bool GeomVertexWriter_C_set_column_B_ps(GeomVertexWriter *param0, CPT_InternalName *param1);
EXPORT_FUNC bool GeomVertexWriter_C_set_column_B_pi(GeomVertexWriter *param0, int param1);
EXPORT_FUNC bool GeomVertexWriter_C_set_column_B_pip(GeomVertexWriter *param0, int param1, GeomVertexColumn const *param2);
EXPORT_FUNC void GeomVertexWriter_C_clear_v_p(GeomVertexWriter *param0);
EXPORT_FUNC bool GeomVertexWriter_C_reserve_num_rows_B_pi(GeomVertexWriter *param0, int param1);
EXPORT_FUNC bool GeomVertexWriter_C_has_column_B_p(GeomVertexWriter const *param0);
EXPORT_FUNC int GeomVertexWriter_C_get_array_i_p(GeomVertexWriter const *param0);
EXPORT_FUNC GeomVertexColumn const * GeomVertexWriter_C_get_column_p_p(GeomVertexWriter const *param0);
EXPORT_FUNC void GeomVertexWriter_C_set_row_unsafe_v_pi(GeomVertexWriter *param0, int param1);
EXPORT_FUNC void GeomVertexWriter_C_set_row_v_pi(GeomVertexWriter *param0, int param1);
EXPORT_FUNC int GeomVertexWriter_C_get_start_row_i_p(GeomVertexWriter const *param0);
EXPORT_FUNC int GeomVertexWriter_C_get_write_row_i_p(GeomVertexWriter const *param0);
EXPORT_FUNC bool GeomVertexWriter_C_is_at_end_B_p(GeomVertexWriter const *param0);
EXPORT_FUNC void GeomVertexWriter_C_set_data1f_v_pf(GeomVertexWriter *param0, float param1);
EXPORT_FUNC void GeomVertexWriter_C_set_data2f_v_pp(GeomVertexWriter *param0, LVecBase2f const *param1);
EXPORT_FUNC void GeomVertexWriter_C_set_data2f_v_pff(GeomVertexWriter *param0, float param1, float param2);
EXPORT_FUNC void GeomVertexWriter_C_set_data3f_v_pp(GeomVertexWriter *param0, LVecBase3f const *param1);
EXPORT_FUNC void GeomVertexWriter_C_set_data3f_v_pfff(GeomVertexWriter *param0, float param1, float param2, float param3);
EXPORT_FUNC void GeomVertexWriter_C_set_data4f_v_pp(GeomVertexWriter *param0, LVecBase4f const *param1);
EXPORT_FUNC void GeomVertexWriter_C_set_data4f_v_pffff(GeomVertexWriter *param0, float param1, float param2, float param3, float param4);
EXPORT_FUNC void GeomVertexWriter_C_set_matrix3f_v_pp(GeomVertexWriter *param0, LMatrix3f const *param1);
EXPORT_FUNC void GeomVertexWriter_C_set_matrix4f_v_pp(GeomVertexWriter *param0, LMatrix4f const *param1);
EXPORT_FUNC void GeomVertexWriter_C_set_data1d_v_pd(GeomVertexWriter *param0, double param1);
EXPORT_FUNC void GeomVertexWriter_C_set_data2d_v_pp(GeomVertexWriter *param0, LVecBase2d const *param1);
EXPORT_FUNC void GeomVertexWriter_C_set_data2d_v_pdd(GeomVertexWriter *param0, double param1, double param2);
EXPORT_FUNC void GeomVertexWriter_C_set_data3d_v_pp(GeomVertexWriter *param0, LVecBase3d const *param1);
EXPORT_FUNC void GeomVertexWriter_C_set_data3d_v_pddd(GeomVertexWriter *param0, double param1, double param2, double param3);
EXPORT_FUNC void GeomVertexWriter_C_set_data4d_v_pp(GeomVertexWriter *param0, LVecBase4d const *param1);
EXPORT_FUNC void GeomVertexWriter_C_set_data4d_v_pdddd(GeomVertexWriter *param0, double param1, double param2, double param3, double param4);
EXPORT_FUNC void GeomVertexWriter_C_set_matrix3d_v_pp(GeomVertexWriter *param0, LMatrix3d const *param1);
EXPORT_FUNC void GeomVertexWriter_C_set_matrix4d_v_pp(GeomVertexWriter *param0, LMatrix4d const *param1);
EXPORT_FUNC void GeomVertexWriter_C_set_data1_v_pf(GeomVertexWriter *param0, PN_stdfloat param1);
EXPORT_FUNC void GeomVertexWriter_C_set_data2_v_pp(GeomVertexWriter *param0, LVecBase2 const *param1);
EXPORT_FUNC void GeomVertexWriter_C_set_data2_v_pff(GeomVertexWriter *param0, PN_stdfloat param1, PN_stdfloat param2);
EXPORT_FUNC void GeomVertexWriter_C_set_data3_v_pp(GeomVertexWriter *param0, LVecBase3 const *param1);
EXPORT_FUNC void GeomVertexWriter_C_set_data3_v_pfff(GeomVertexWriter *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3);
EXPORT_FUNC void GeomVertexWriter_C_set_data4_v_pp(GeomVertexWriter *param0, LVecBase4 const *param1);
EXPORT_FUNC void GeomVertexWriter_C_set_data4_v_pffff(GeomVertexWriter *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC void GeomVertexWriter_C_set_matrix3_v_pp(GeomVertexWriter *param0, LMatrix3 const *param1);
EXPORT_FUNC void GeomVertexWriter_C_set_matrix4_v_pp(GeomVertexWriter *param0, LMatrix4 const *param1);
EXPORT_FUNC void GeomVertexWriter_C_set_data1i_v_pi(GeomVertexWriter *param0, int param1);
EXPORT_FUNC void GeomVertexWriter_C_set_data2i_v_pp(GeomVertexWriter *param0, LVecBase2i const *param1);
EXPORT_FUNC void GeomVertexWriter_C_set_data2i_v_pii(GeomVertexWriter *param0, int param1, int param2);
EXPORT_FUNC void GeomVertexWriter_C_set_data3i_v_pp(GeomVertexWriter *param0, LVecBase3i const *param1);
EXPORT_FUNC void GeomVertexWriter_C_set_data3i_v_piii(GeomVertexWriter *param0, int param1, int param2, int param3);
EXPORT_FUNC void GeomVertexWriter_C_set_data4i_v_pp(GeomVertexWriter *param0, LVecBase4i const *param1);
EXPORT_FUNC void GeomVertexWriter_C_set_data4i_v_piiii(GeomVertexWriter *param0, int param1, int param2, int param3, int param4);
EXPORT_FUNC void GeomVertexWriter_C_add_data1f_v_pf(GeomVertexWriter *param0, float param1);
EXPORT_FUNC void GeomVertexWriter_C_add_data2f_v_pp(GeomVertexWriter *param0, LVecBase2f const *param1);
EXPORT_FUNC void GeomVertexWriter_C_add_data2f_v_pff(GeomVertexWriter *param0, float param1, float param2);
EXPORT_FUNC void GeomVertexWriter_C_add_data3f_v_pp(GeomVertexWriter *param0, LVecBase3f const *param1);
EXPORT_FUNC void GeomVertexWriter_C_add_data3f_v_pfff(GeomVertexWriter *param0, float param1, float param2, float param3);
EXPORT_FUNC void GeomVertexWriter_C_add_data4f_v_pp(GeomVertexWriter *param0, LVecBase4f const *param1);
EXPORT_FUNC void GeomVertexWriter_C_add_data4f_v_pffff(GeomVertexWriter *param0, float param1, float param2, float param3, float param4);
EXPORT_FUNC void GeomVertexWriter_C_add_matrix3f_v_pp(GeomVertexWriter *param0, LMatrix3f const *param1);
EXPORT_FUNC void GeomVertexWriter_C_add_matrix4f_v_pp(GeomVertexWriter *param0, LMatrix4f const *param1);
EXPORT_FUNC void GeomVertexWriter_C_add_data1d_v_pd(GeomVertexWriter *param0, double param1);
EXPORT_FUNC void GeomVertexWriter_C_add_data2d_v_pp(GeomVertexWriter *param0, LVecBase2d const *param1);
EXPORT_FUNC void GeomVertexWriter_C_add_data2d_v_pdd(GeomVertexWriter *param0, double param1, double param2);
EXPORT_FUNC void GeomVertexWriter_C_add_data3d_v_pp(GeomVertexWriter *param0, LVecBase3d const *param1);
EXPORT_FUNC void GeomVertexWriter_C_add_data3d_v_pddd(GeomVertexWriter *param0, double param1, double param2, double param3);
EXPORT_FUNC void GeomVertexWriter_C_add_data4d_v_pp(GeomVertexWriter *param0, LVecBase4d const *param1);
EXPORT_FUNC void GeomVertexWriter_C_add_data4d_v_pdddd(GeomVertexWriter *param0, double param1, double param2, double param3, double param4);
EXPORT_FUNC void GeomVertexWriter_C_add_matrix3d_v_pp(GeomVertexWriter *param0, LMatrix3d const *param1);
EXPORT_FUNC void GeomVertexWriter_C_add_matrix4d_v_pp(GeomVertexWriter *param0, LMatrix4d const *param1);
EXPORT_FUNC void GeomVertexWriter_C_add_data1_v_pf(GeomVertexWriter *param0, PN_stdfloat param1);
EXPORT_FUNC void GeomVertexWriter_C_add_data2_v_pp(GeomVertexWriter *param0, LVecBase2 const *param1);
EXPORT_FUNC void GeomVertexWriter_C_add_data2_v_pff(GeomVertexWriter *param0, PN_stdfloat param1, PN_stdfloat param2);
EXPORT_FUNC void GeomVertexWriter_C_add_data3_v_pp(GeomVertexWriter *param0, LVecBase3 const *param1);
EXPORT_FUNC void GeomVertexWriter_C_add_data3_v_pfff(GeomVertexWriter *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3);
EXPORT_FUNC void GeomVertexWriter_C_add_data4_v_pp(GeomVertexWriter *param0, LVecBase4 const *param1);
EXPORT_FUNC void GeomVertexWriter_C_add_data4_v_pffff(GeomVertexWriter *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC void GeomVertexWriter_C_add_matrix3_v_pp(GeomVertexWriter *param0, LMatrix3 const *param1);
EXPORT_FUNC void GeomVertexWriter_C_add_matrix4_v_pp(GeomVertexWriter *param0, LMatrix4 const *param1);
EXPORT_FUNC void GeomVertexWriter_C_add_data1i_v_pi(GeomVertexWriter *param0, int param1);
EXPORT_FUNC void GeomVertexWriter_C_add_data2i_v_pp(GeomVertexWriter *param0, LVecBase2i const *param1);
EXPORT_FUNC void GeomVertexWriter_C_add_data2i_v_pii(GeomVertexWriter *param0, int param1, int param2);
EXPORT_FUNC void GeomVertexWriter_C_add_data3i_v_pp(GeomVertexWriter *param0, LVecBase3i const *param1);
EXPORT_FUNC void GeomVertexWriter_C_add_data3i_v_piii(GeomVertexWriter *param0, int param1, int param2, int param3);
EXPORT_FUNC void GeomVertexWriter_C_add_data4i_v_pp(GeomVertexWriter *param0, LVecBase4i const *param1);
EXPORT_FUNC void GeomVertexWriter_C_add_data4i_v_piiii(GeomVertexWriter *param0, int param1, int param2, int param3, int param4);
EXPORT_FUNC void GeomVertexWriter_C_output_v_pp(GeomVertexWriter const *param0, std::ostream *param1);


// GraphicsOutput

EXPORT_FUNC GraphicsOutputBase * GraphicsOutput_C_upcast_to_GraphicsOutputBase_p_p(GraphicsOutput *param0);
EXPORT_FUNC DrawableRegion * GraphicsOutput_C_upcast_to_DrawableRegion_p_p(GraphicsOutput *param0);
EXPORT_FUNC GraphicsStateGuardian * GraphicsOutput_C_get_gsg_p_p(GraphicsOutput const *param0);
EXPORT_FUNC GraphicsPipe * GraphicsOutput_C_get_pipe_p_p(GraphicsOutput const *param0);
EXPORT_FUNC GraphicsEngine * GraphicsOutput_C_get_engine_p_p(GraphicsOutput const *param0);
EXPORT_FUNC char const * GraphicsOutput_C_get_name_s_p(GraphicsOutput const *param0);
EXPORT_FUNC int GraphicsOutput_C_count_textures_i_p(GraphicsOutput const *param0);
EXPORT_FUNC bool GraphicsOutput_C_has_texture_B_p(GraphicsOutput const *param0);
EXPORT_FUNC Texture * GraphicsOutput_C_get_texture_p_pi(GraphicsOutput const *param0, int param1);
EXPORT_FUNC Texture * GraphicsOutput_C_get_texture_p_p(GraphicsOutput const *param0);
EXPORT_FUNC DrawableRegion::RenderTexturePlane GraphicsOutput_C_get_texture_plane_p_pi(GraphicsOutput const *param0, int param1);
EXPORT_FUNC DrawableRegion::RenderTexturePlane GraphicsOutput_C_get_texture_plane_p_p(GraphicsOutput const *param0);
EXPORT_FUNC GraphicsOutput::RenderTextureMode GraphicsOutput_C_get_rtm_mode_p_pi(GraphicsOutput const *param0, int param1);
EXPORT_FUNC GraphicsOutput::RenderTextureMode GraphicsOutput_C_get_rtm_mode_p_p(GraphicsOutput const *param0);
EXPORT_FUNC void GraphicsOutput_C_clear_render_textures_v_p(GraphicsOutput *param0);
EXPORT_FUNC void GraphicsOutput_C_add_render_texture_v_pppp(GraphicsOutput *param0, Texture *param1, GraphicsOutput::RenderTextureMode param2, DrawableRegion::RenderTexturePlane param3);
EXPORT_FUNC void GraphicsOutput_C_add_render_texture_v_ppp(GraphicsOutput *param0, Texture *param1, GraphicsOutput::RenderTextureMode param2);
EXPORT_FUNC void GraphicsOutput_C_setup_render_texture_v_ppBB(GraphicsOutput *param0, Texture *param1, bool param2, bool param3);
EXPORT_FUNC LVecBase2i const * GraphicsOutput_C_get_size_p_p(GraphicsOutput const *param0);
EXPORT_FUNC int GraphicsOutput_C_get_x_size_i_p(GraphicsOutput const *param0);
EXPORT_FUNC int GraphicsOutput_C_get_y_size_i_p(GraphicsOutput const *param0);
EXPORT_FUNC LVecBase2i * GraphicsOutput_C_get_fb_size_p_p(GraphicsOutput const *param0);
EXPORT_FUNC int GraphicsOutput_C_get_fb_x_size_i_p(GraphicsOutput const *param0);
EXPORT_FUNC int GraphicsOutput_C_get_fb_y_size_i_p(GraphicsOutput const *param0);
EXPORT_FUNC LVecBase2i * GraphicsOutput_C_get_sbs_left_size_p_p(GraphicsOutput const *param0);
EXPORT_FUNC int GraphicsOutput_C_get_sbs_left_x_size_i_p(GraphicsOutput const *param0);
EXPORT_FUNC int GraphicsOutput_C_get_sbs_left_y_size_i_p(GraphicsOutput const *param0);
EXPORT_FUNC LVecBase2i * GraphicsOutput_C_get_sbs_right_size_p_p(GraphicsOutput const *param0);
EXPORT_FUNC int GraphicsOutput_C_get_sbs_right_x_size_i_p(GraphicsOutput const *param0);
EXPORT_FUNC int GraphicsOutput_C_get_sbs_right_y_size_i_p(GraphicsOutput const *param0);
EXPORT_FUNC bool GraphicsOutput_C_has_size_B_p(GraphicsOutput const *param0);
EXPORT_FUNC bool GraphicsOutput_C_is_valid_B_p(GraphicsOutput const *param0);
EXPORT_FUNC bool GraphicsOutput_C_is_nonzero_size_B_p(GraphicsOutput const *param0);
EXPORT_FUNC void GraphicsOutput_C_set_active_v_pB(GraphicsOutput *param0, bool param1);
EXPORT_FUNC bool GraphicsOutput_C_is_active_B_p(GraphicsOutput const *param0);
EXPORT_FUNC void GraphicsOutput_C_set_one_shot_v_pB(GraphicsOutput *param0, bool param1);
EXPORT_FUNC bool GraphicsOutput_C_get_one_shot_B_p(GraphicsOutput const *param0);
EXPORT_FUNC void GraphicsOutput_C_set_inverted_v_pB(GraphicsOutput *param0, bool param1);
EXPORT_FUNC bool GraphicsOutput_C_get_inverted_B_p(GraphicsOutput const *param0);
EXPORT_FUNC void GraphicsOutput_C_set_swap_eyes_v_pB(GraphicsOutput *param0, bool param1);
EXPORT_FUNC bool GraphicsOutput_C_get_swap_eyes_B_p(GraphicsOutput const *param0);
EXPORT_FUNC void GraphicsOutput_C_set_red_blue_stereo_v_pBII(GraphicsOutput *param0, bool param1, unsigned int param2, unsigned int param3);
EXPORT_FUNC bool GraphicsOutput_C_get_red_blue_stereo_B_p(GraphicsOutput const *param0);
EXPORT_FUNC unsigned int GraphicsOutput_C_get_left_eye_color_mask_I_p(GraphicsOutput const *param0);
EXPORT_FUNC unsigned int GraphicsOutput_C_get_right_eye_color_mask_I_p(GraphicsOutput const *param0);
EXPORT_FUNC void GraphicsOutput_C_set_side_by_side_stereo_v_pB(GraphicsOutput *param0, bool param1);
EXPORT_FUNC void GraphicsOutput_C_set_side_by_side_stereo_v_pBpp(GraphicsOutput *param0, bool param1, LVecBase4 const *param2, LVecBase4 const *param3);
EXPORT_FUNC bool GraphicsOutput_C_get_side_by_side_stereo_B_p(GraphicsOutput const *param0);
EXPORT_FUNC LVecBase4 const * GraphicsOutput_C_get_sbs_left_dimensions_p_p(GraphicsOutput const *param0);
EXPORT_FUNC LVecBase4 const * GraphicsOutput_C_get_sbs_right_dimensions_p_p(GraphicsOutput const *param0);
EXPORT_FUNC FrameBufferProperties const * GraphicsOutput_C_get_fb_properties_p_p(GraphicsOutput const *param0);
EXPORT_FUNC bool GraphicsOutput_C_is_stereo_B_p(GraphicsOutput const *param0);
EXPORT_FUNC void GraphicsOutput_C_clear_delete_flag_v_p(GraphicsOutput *param0);
EXPORT_FUNC bool GraphicsOutput_C_get_delete_flag_B_p(GraphicsOutput const *param0);
EXPORT_FUNC void GraphicsOutput_C_set_sort_v_pi(GraphicsOutput *param0, int param1);
EXPORT_FUNC int GraphicsOutput_C_get_sort_i_p(GraphicsOutput const *param0);
EXPORT_FUNC void GraphicsOutput_C_set_child_sort_v_pi(GraphicsOutput *param0, int param1);
EXPORT_FUNC void GraphicsOutput_C_clear_child_sort_v_p(GraphicsOutput *param0);
EXPORT_FUNC int GraphicsOutput_C_get_child_sort_i_p(GraphicsOutput const *param0);
EXPORT_FUNC AsyncFuture * GraphicsOutput_C_trigger_copy_p_p(GraphicsOutput *param0);
EXPORT_FUNC DisplayRegion * GraphicsOutput_C_make_display_region_p_p(GraphicsOutput *param0);
EXPORT_FUNC DisplayRegion * GraphicsOutput_C_make_display_region_p_pp(GraphicsOutput *param0, LVecBase4 const *param1);
EXPORT_FUNC DisplayRegion * GraphicsOutput_C_make_display_region_p_pffff(GraphicsOutput *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC DisplayRegion * GraphicsOutput_C_make_mono_display_region_p_p(GraphicsOutput *param0);
EXPORT_FUNC DisplayRegion * GraphicsOutput_C_make_mono_display_region_p_pp(GraphicsOutput *param0, LVecBase4 const *param1);
EXPORT_FUNC DisplayRegion * GraphicsOutput_C_make_mono_display_region_p_pffff(GraphicsOutput *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC StereoDisplayRegion * GraphicsOutput_C_make_stereo_display_region_p_p(GraphicsOutput *param0);
EXPORT_FUNC StereoDisplayRegion * GraphicsOutput_C_make_stereo_display_region_p_pp(GraphicsOutput *param0, LVecBase4 const *param1);
EXPORT_FUNC StereoDisplayRegion * GraphicsOutput_C_make_stereo_display_region_p_pffff(GraphicsOutput *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC bool GraphicsOutput_C_remove_display_region_B_pp(GraphicsOutput *param0, DisplayRegion *param1);
EXPORT_FUNC void GraphicsOutput_C_remove_all_display_regions_v_p(GraphicsOutput *param0);
EXPORT_FUNC DisplayRegion * GraphicsOutput_C_get_overlay_display_region_p_p(GraphicsOutput const *param0);
EXPORT_FUNC void GraphicsOutput_C_set_overlay_display_region_v_pp(GraphicsOutput *param0, DisplayRegion *param1);
EXPORT_FUNC int GraphicsOutput_C_get_num_display_regions_i_p(GraphicsOutput const *param0);
EXPORT_FUNC PointerTo< DisplayRegion > * GraphicsOutput_C_get_display_region_p_pi(GraphicsOutput const *param0, int param1);
EXPORT_FUNC int GraphicsOutput_C_get_num_active_display_regions_i_p(GraphicsOutput const *param0);
EXPORT_FUNC PointerTo< DisplayRegion > * GraphicsOutput_C_get_active_display_region_p_pi(GraphicsOutput const *param0, int param1);
EXPORT_FUNC GraphicsOutput * GraphicsOutput_C_make_texture_buffer_p_psiipBp(GraphicsOutput *param0, char const *param1, int param2, int param3, Texture *param4, bool param5, FrameBufferProperties *param6);
EXPORT_FUNC GraphicsOutput * GraphicsOutput_C_make_texture_buffer_p_psiipB(GraphicsOutput *param0, char const *param1, int param2, int param3, Texture *param4, bool param5);
EXPORT_FUNC GraphicsOutput * GraphicsOutput_C_make_texture_buffer_p_psiip(GraphicsOutput *param0, char const *param1, int param2, int param3, Texture *param4);
EXPORT_FUNC GraphicsOutput * GraphicsOutput_C_make_texture_buffer_p_psii(GraphicsOutput *param0, char const *param1, int param2, int param3);
EXPORT_FUNC GraphicsOutput * GraphicsOutput_C_make_cube_map_p_psippBp(GraphicsOutput *param0, char const *param1, int param2, NodePath *param3, DrawMask *param4, bool param5, FrameBufferProperties *param6);
EXPORT_FUNC GraphicsOutput * GraphicsOutput_C_make_cube_map_p_psippB(GraphicsOutput *param0, char const *param1, int param2, NodePath *param3, DrawMask *param4, bool param5);
EXPORT_FUNC GraphicsOutput * GraphicsOutput_C_make_cube_map_p_psipp(GraphicsOutput *param0, char const *param1, int param2, NodePath *param3, DrawMask *param4);
EXPORT_FUNC GraphicsOutput * GraphicsOutput_C_make_cube_map_p_psip(GraphicsOutput *param0, char const *param1, int param2, NodePath *param3);
EXPORT_FUNC Filename * GraphicsOutput_C_make_screenshot_filename_p_s(char const *param0);
EXPORT_FUNC Filename * GraphicsOutput_C_make_screenshot_filename_p_v();
EXPORT_FUNC Filename * GraphicsOutput_C_save_screenshot_default_p_ps(GraphicsOutput *param0, char const *param1);
EXPORT_FUNC Filename * GraphicsOutput_C_save_screenshot_default_p_p(GraphicsOutput *param0);
EXPORT_FUNC bool GraphicsOutput_C_save_screenshot_B_pps(GraphicsOutput *param0, Filename const *param1, char const *param2);
EXPORT_FUNC bool GraphicsOutput_C_save_screenshot_B_pp(GraphicsOutput *param0, Filename const *param1);
EXPORT_FUNC PointerTo< Texture > * GraphicsOutput_C_get_screenshot_p_p(GraphicsOutput *param0);
EXPORT_FUNC bool GraphicsOutput_C_get_screenshot_B_pp(GraphicsOutput *param0, PNMImage *param1);
EXPORT_FUNC NodePath * GraphicsOutput_C_get_texture_card_p_p(GraphicsOutput *param0);
EXPORT_FUNC bool GraphicsOutput_C_share_depth_buffer_B_pp(GraphicsOutput *param0, GraphicsOutput *param1);
EXPORT_FUNC void GraphicsOutput_C_unshare_depth_buffer_v_p(GraphicsOutput *param0);
EXPORT_FUNC bool GraphicsOutput_C_get_supports_render_texture_B_p(GraphicsOutput const *param0);
EXPORT_FUNC bool GraphicsOutput_C_flip_ready_B_p(GraphicsOutput const *param0);
EXPORT_FUNC GraphicsOutput * GraphicsOutput_C_get_host_p_p(GraphicsOutput *param0);
EXPORT_FUNC void GraphicsOutput_C_request_open_v_p(GraphicsOutput *param0);
EXPORT_FUNC void GraphicsOutput_C_request_close_v_p(GraphicsOutput *param0);
EXPORT_FUNC void GraphicsOutput_C_set_close_now_v_p(GraphicsOutput *param0);
EXPORT_FUNC void GraphicsOutput_C_reset_window_v_pB(GraphicsOutput *param0, bool param1);
EXPORT_FUNC void GraphicsOutput_C_clear_pipe_v_p(GraphicsOutput *param0);
EXPORT_FUNC void GraphicsOutput_C_set_size_and_recalc_v_pii(GraphicsOutput *param0, int param1, int param2);
EXPORT_FUNC void GraphicsOutput_C_clear_v_pp(GraphicsOutput *param0, Thread *param1);
EXPORT_FUNC bool GraphicsOutput_C_begin_frame_B_ppp(GraphicsOutput *param0, GraphicsOutput::FrameMode param1, Thread *param2);
EXPORT_FUNC void GraphicsOutput_C_end_frame_v_ppp(GraphicsOutput *param0, GraphicsOutput::FrameMode param1, Thread *param2);
EXPORT_FUNC void GraphicsOutput_C_change_scenes_v_pp(GraphicsOutput *param0, DisplayRegionPipelineReader *param1);
EXPORT_FUNC void GraphicsOutput_C_select_target_tex_page_v_pi(GraphicsOutput *param0, int param1);
EXPORT_FUNC void GraphicsOutput_C_begin_flip_v_p(GraphicsOutput *param0);
EXPORT_FUNC void GraphicsOutput_C_ready_flip_v_p(GraphicsOutput *param0);
EXPORT_FUNC void GraphicsOutput_C_end_flip_v_p(GraphicsOutput *param0);
EXPORT_FUNC void GraphicsOutput_C_process_events_v_p(GraphicsOutput *param0);
EXPORT_FUNC PStatCollector * GraphicsOutput_C_get_cull_window_pcollector_p_p(GraphicsOutput *param0);
EXPORT_FUNC PStatCollector * GraphicsOutput_C_get_draw_window_pcollector_p_p(GraphicsOutput *param0);
EXPORT_FUNC PStatCollector * GraphicsOutput_C_get_clear_window_pcollector_p_p(GraphicsOutput *param0);
EXPORT_FUNC int GraphicsOutput_C_get_class_type_i_v();
EXPORT_FUNC void GraphicsOutput_C_init_type_v_v();
EXPORT_FUNC int GraphicsOutput_C_get_type_i_p(GraphicsOutput const *param0);
EXPORT_FUNC int GraphicsOutput_C_force_init_type_i_p(GraphicsOutput *param0);


// GraphicsOutputBase

EXPORT_FUNC GraphicsOutput * GraphicsOutputBase_C_downcast_to_GraphicsOutput_p_p(GraphicsOutputBase *param0);


// GraphicsWindow

EXPORT_FUNC WindowProperties const * GraphicsWindow_C_get_properties_p_p(GraphicsWindow const *param0);
EXPORT_FUNC WindowProperties const * GraphicsWindow_C_get_requested_properties_p_p(GraphicsWindow const *param0);
EXPORT_FUNC void GraphicsWindow_C_clear_rejected_properties_v_p(GraphicsWindow *param0);
EXPORT_FUNC WindowProperties * GraphicsWindow_C_get_rejected_properties_p_p(GraphicsWindow const *param0);
EXPORT_FUNC void GraphicsWindow_C_request_properties_v_pp(GraphicsWindow *param0, WindowProperties const *param1);
EXPORT_FUNC bool GraphicsWindow_C_is_closed_B_p(GraphicsWindow const *param0);
EXPORT_FUNC bool GraphicsWindow_C_is_fullscreen_B_p(GraphicsWindow const *param0);
EXPORT_FUNC void GraphicsWindow_C_set_window_event_v_ps(GraphicsWindow *param0, char const *param1);
EXPORT_FUNC char const * GraphicsWindow_C_get_window_event_s_p(GraphicsWindow const *param0);
EXPORT_FUNC void GraphicsWindow_C_set_close_request_event_v_ps(GraphicsWindow *param0, char const *param1);
EXPORT_FUNC char const * GraphicsWindow_C_get_close_request_event_s_p(GraphicsWindow const *param0);
EXPORT_FUNC void GraphicsWindow_C_set_unexposed_draw_v_pB(GraphicsWindow *param0, bool param1);
EXPORT_FUNC bool GraphicsWindow_C_get_unexposed_draw_B_p(GraphicsWindow const *param0);
EXPORT_FUNC WindowHandle * GraphicsWindow_C_get_window_handle_p_p(GraphicsWindow const *param0);
EXPORT_FUNC int GraphicsWindow_C_get_num_input_devices_i_p(GraphicsWindow const *param0);
EXPORT_FUNC InputDevice * GraphicsWindow_C_get_input_device_p_pi(GraphicsWindow const *param0, int param1);
EXPORT_FUNC char const * GraphicsWindow_C_get_input_device_name_s_pi(GraphicsWindow const *param0, int param1);
EXPORT_FUNC bool GraphicsWindow_C_has_pointer_B_pi(GraphicsWindow const *param0, int param1);
EXPORT_FUNC bool GraphicsWindow_C_has_keyboard_B_pi(GraphicsWindow const *param0, int param1);
EXPORT_FUNC ButtonMap * GraphicsWindow_C_get_keyboard_map_p_p(GraphicsWindow const *param0);
EXPORT_FUNC void GraphicsWindow_C_enable_pointer_events_v_pi(GraphicsWindow *param0, int param1);
EXPORT_FUNC void GraphicsWindow_C_disable_pointer_events_v_pi(GraphicsWindow *param0, int param1);
EXPORT_FUNC MouseData * GraphicsWindow_C_get_pointer_p_pi(GraphicsWindow const *param0, int param1);
EXPORT_FUNC bool GraphicsWindow_C_move_pointer_B_piii(GraphicsWindow *param0, int param1, int param2, int param3);
EXPORT_FUNC void GraphicsWindow_C_close_ime_v_p(GraphicsWindow *param0);
EXPORT_FUNC void GraphicsWindow_C_add_window_proc_v_pp(GraphicsWindow *param0, GraphicsWindowProc const *param1);
EXPORT_FUNC void GraphicsWindow_C_remove_window_proc_v_pp(GraphicsWindow *param0, GraphicsWindowProc const *param1);
EXPORT_FUNC void GraphicsWindow_C_clear_window_procs_v_p(GraphicsWindow *param0);
EXPORT_FUNC bool GraphicsWindow_C_supports_window_procs_B_p(GraphicsWindow const *param0);
EXPORT_FUNC bool GraphicsWindow_C_is_touch_event_B_pp(GraphicsWindow *param0, GraphicsWindowProcCallbackData *param1);
EXPORT_FUNC int GraphicsWindow_C_get_num_touches_i_p(GraphicsWindow *param0);
EXPORT_FUNC TouchInfo * GraphicsWindow_C_get_touch_info_p_pi(GraphicsWindow *param0, int param1);
EXPORT_FUNC void GraphicsWindow_C_request_open_v_p(GraphicsWindow *param0);
EXPORT_FUNC void GraphicsWindow_C_request_close_v_p(GraphicsWindow *param0);
EXPORT_FUNC void GraphicsWindow_C_set_close_now_v_p(GraphicsWindow *param0);
EXPORT_FUNC void GraphicsWindow_C_process_events_v_p(GraphicsWindow *param0);
EXPORT_FUNC void GraphicsWindow_C_set_properties_now_v_pp(GraphicsWindow *param0, WindowProperties *param1);
EXPORT_FUNC int GraphicsWindow_C_get_class_type_i_v();
EXPORT_FUNC void GraphicsWindow_C_init_type_v_v();
EXPORT_FUNC int GraphicsWindow_C_get_type_i_p(GraphicsWindow const *param0);
EXPORT_FUNC int GraphicsWindow_C_force_init_type_i_p(GraphicsWindow *param0);


// InternalName

EXPORT_FUNC PointerTo< InternalName > * InternalName_C_make_p_s(char const *param0);
EXPORT_FUNC PointerTo< InternalName > * InternalName_C_make_p_si(char const *param0, int param1);
EXPORT_FUNC PointerTo< InternalName > * InternalName_C_append_p_ps(InternalName *param0, char const *param1);
EXPORT_FUNC InternalName * InternalName_C_get_parent_p_p(InternalName const *param0);
EXPORT_FUNC char const * InternalName_C_get_name_s_p(InternalName const *param0);
EXPORT_FUNC char const * InternalName_C_join_s_ss(InternalName const *param0, char const *param1);
EXPORT_FUNC char const * InternalName_C_get_basename_s_p(InternalName const *param0);
EXPORT_FUNC int InternalName_C_find_ancestor_i_ss(InternalName const *param0, char const *param1);
EXPORT_FUNC InternalName const * InternalName_C_get_ancestor_s_si(InternalName const *param0, int param1);
EXPORT_FUNC InternalName const * InternalName_C_get_top_s_p(InternalName const *param0);
EXPORT_FUNC char const * InternalName_C_get_net_basename_s_si(InternalName const *param0, int param1);
EXPORT_FUNC void InternalName_C_output_v_sp(InternalName const *param0, std::ostream *param1);
EXPORT_FUNC PointerTo< InternalName > * InternalName_C_get_root_p_v();
EXPORT_FUNC PointerTo< InternalName > * InternalName_C_get_error_p_v();
EXPORT_FUNC PointerTo< InternalName > * InternalName_C_get_vertex_p_v();
EXPORT_FUNC PointerTo< InternalName > * InternalName_C_get_normal_p_v();
EXPORT_FUNC PointerTo< InternalName > * InternalName_C_get_tangent_p_v();
EXPORT_FUNC PointerTo< InternalName > * InternalName_C_get_tangent_name_p_s(char const *param0);
EXPORT_FUNC PointerTo< InternalName > * InternalName_C_get_binormal_p_v();
EXPORT_FUNC PointerTo< InternalName > * InternalName_C_get_binormal_name_p_s(char const *param0);
EXPORT_FUNC PointerTo< InternalName > * InternalName_C_get_texcoord_p_v();
EXPORT_FUNC PointerTo< InternalName > * InternalName_C_get_texcoord_name_p_s(char const *param0);
EXPORT_FUNC PointerTo< InternalName > * InternalName_C_get_color_p_v();
EXPORT_FUNC PointerTo< InternalName > * InternalName_C_get_rotate_p_v();
EXPORT_FUNC PointerTo< InternalName > * InternalName_C_get_size_p_v();
EXPORT_FUNC PointerTo< InternalName > * InternalName_C_get_aspect_ratio_p_v();
EXPORT_FUNC PointerTo< InternalName > * InternalName_C_get_transform_blend_p_v();
EXPORT_FUNC PointerTo< InternalName > * InternalName_C_get_transform_weight_p_v();
EXPORT_FUNC PointerTo< InternalName > * InternalName_C_get_transform_index_p_v();
EXPORT_FUNC PointerTo< InternalName > * InternalName_C_get_morph_p_ps(InternalName *param0, char const *param1);
EXPORT_FUNC PointerTo< InternalName > * InternalName_C_get_index_p_v();
EXPORT_FUNC PointerTo< InternalName > * InternalName_C_get_world_p_v();
EXPORT_FUNC PointerTo< InternalName > * InternalName_C_get_camera_p_v();
EXPORT_FUNC PointerTo< InternalName > * InternalName_C_get_model_p_v();
EXPORT_FUNC PointerTo< InternalName > * InternalName_C_get_view_p_v();
EXPORT_FUNC void InternalName_C_register_with_read_factory_v_v();
EXPORT_FUNC void InternalName_C_write_datagram_v_ppp(InternalName *param0, BamWriter *param1, Datagram *param2);
EXPORT_FUNC void InternalName_C_finalize_v_pp(InternalName *param0, BamReader *param1);
EXPORT_FUNC int InternalName_C_get_class_type_i_v();
EXPORT_FUNC void InternalName_C_init_type_v_v();
EXPORT_FUNC int InternalName_C_get_type_i_p(InternalName const *param0);
EXPORT_FUNC int InternalName_C_force_init_type_i_p(InternalName *param0);


// LVecBase3f

EXPORT_FUNC LVecBase3f * LVecBase3f_C_ctor_p_v();
EXPORT_FUNC LVecBase3f * LVecBase3f_C_ctor_p_pf(LVecBase2f const *param0, float param1);
EXPORT_FUNC LVecBase3f * LVecBase3f_C_ctor_p_p(LVecBase3f const *param0);
EXPORT_FUNC LVecBase3f * LVecBase3f_C_ctor_p_p_1_p_p(LVecBase3f::EVector3 const *param0);
EXPORT_FUNC LVecBase3f * LVecBase3f_C_ctor_p_f(float param0);
EXPORT_FUNC LVecBase3f * LVecBase3f_C_ctor_p_fff(float param0, float param1, float param2);
EXPORT_FUNC LVecBase3f const * LVecBase3f_C_zero_p_v();
EXPORT_FUNC LVecBase3f const * LVecBase3f_C_unit_x_p_v();
EXPORT_FUNC LVecBase3f const * LVecBase3f_C_unit_y_p_v();
EXPORT_FUNC LVecBase3f const * LVecBase3f_C_unit_z_p_v();
EXPORT_FUNC int LVecBase3f_C_size_i_v();
EXPORT_FUNC bool LVecBase3f_C_is_nan_B_p(LVecBase3f const *param0);
EXPORT_FUNC float LVecBase3f_C_get_cell_f_pi(LVecBase3f const *param0, int param1);
EXPORT_FUNC float LVecBase3f_C_get_x_f_p(LVecBase3f const *param0);
EXPORT_FUNC float LVecBase3f_C_get_y_f_p(LVecBase3f const *param0);
EXPORT_FUNC float LVecBase3f_C_get_z_f_p(LVecBase3f const *param0);
EXPORT_FUNC void LVecBase3f_C_set_cell_v_pif(LVecBase3f *param0, int param1, float param2);
EXPORT_FUNC void LVecBase3f_C_set_x_v_pf(LVecBase3f *param0, float param1);
EXPORT_FUNC void LVecBase3f_C_set_y_v_pf(LVecBase3f *param0, float param1);
EXPORT_FUNC void LVecBase3f_C_set_z_v_pf(LVecBase3f *param0, float param1);
EXPORT_FUNC LVecBase2f * LVecBase3f_C_get_xy_p_p(LVecBase3f const *param0);
EXPORT_FUNC LVecBase2f * LVecBase3f_C_get_xz_p_p(LVecBase3f const *param0);
EXPORT_FUNC LVecBase2f * LVecBase3f_C_get_yz_p_p(LVecBase3f const *param0);
EXPORT_FUNC void LVecBase3f_C_add_to_cell_v_pif(LVecBase3f *param0, int param1, float param2);
EXPORT_FUNC void LVecBase3f_C_add_x_v_pf(LVecBase3f *param0, float param1);
EXPORT_FUNC void LVecBase3f_C_add_y_v_pf(LVecBase3f *param0, float param1);
EXPORT_FUNC void LVecBase3f_C_add_z_v_pf(LVecBase3f *param0, float param1);
EXPORT_FUNC void LVecBase3f_C_get_data_v_p(LVecBase3f const *param0);
EXPORT_FUNC int LVecBase3f_C_get_num_components_i_v();
EXPORT_FUNC void LVecBase3f_C_begin_v_p(LVecBase3f *param0);
EXPORT_FUNC void LVecBase3f_C_begin_v_p_1_v_p(LVecBase3f const *param0);
EXPORT_FUNC void LVecBase3f_C_end_v_p(LVecBase3f *param0);
EXPORT_FUNC void LVecBase3f_C_end_v_p_1_v_p(LVecBase3f const *param0);
EXPORT_FUNC void LVecBase3f_C_fill_v_pf(LVecBase3f *param0, float param1);
EXPORT_FUNC void LVecBase3f_C_set_v_pfff(LVecBase3f *param0, float param1, float param2, float param3);
EXPORT_FUNC float LVecBase3f_C_dot_f_pp(LVecBase3f const *param0, LVecBase3f const *param1);
EXPORT_FUNC float LVecBase3f_C_length_squared_f_p(LVecBase3f const *param0);
EXPORT_FUNC float LVecBase3f_C_length_f_p(LVecBase3f const *param0);
EXPORT_FUNC bool LVecBase3f_C_normalize_B_p(LVecBase3f *param0);
EXPORT_FUNC LVecBase3f * LVecBase3f_C_normalized_p_p(LVecBase3f const *param0);
EXPORT_FUNC LVecBase3f * LVecBase3f_C_project_p_pp(LVecBase3f const *param0, LVecBase3f const *param1);
EXPORT_FUNC LVecBase3f * LVecBase3f_C_cross_p_pp(LVecBase3f const *param0, LVecBase3f const *param1);
EXPORT_FUNC LVecBase3f * LVecBase3f_C_get_standardized_hpr_p_p(LVecBase3f const *param0);
EXPORT_FUNC int LVecBase3f_C_compare_to_i_pp(LVecBase3f const *param0, LVecBase3f const *param1);
EXPORT_FUNC int LVecBase3f_C_compare_to_i_ppf(LVecBase3f const *param0, LVecBase3f const *param1, float param2);
EXPORT_FUNC std::size_t LVecBase3f_C_get_hash_p_p(LVecBase3f const *param0);
EXPORT_FUNC std::size_t LVecBase3f_C_get_hash_p_pf(LVecBase3f const *param0, float param1);
EXPORT_FUNC std::size_t LVecBase3f_C_add_hash_p_pp(LVecBase3f const *param0, std::size_t param1);
EXPORT_FUNC std::size_t LVecBase3f_C_add_hash_p_ppf(LVecBase3f const *param0, std::size_t param1, float param2);
EXPORT_FUNC void LVecBase3f_C_generate_hash_v_pp(LVecBase3f const *param0, ChecksumHashGenerator *param1);
EXPORT_FUNC void LVecBase3f_C_generate_hash_v_ppf(LVecBase3f const *param0, ChecksumHashGenerator *param1, float param2);
EXPORT_FUNC void LVecBase3f_C_componentwise_mult_v_pp(LVecBase3f *param0, LVecBase3f const *param1);
EXPORT_FUNC LVecBase3f * LVecBase3f_C_fmax_p_pp(LVecBase3f const *param0, LVecBase3f const *param1);
EXPORT_FUNC LVecBase3f * LVecBase3f_C_fmin_p_pp(LVecBase3f const *param0, LVecBase3f const *param1);
EXPORT_FUNC void LVecBase3f_C_cross_into_v_pp(LVecBase3f *param0, LVecBase3f const *param1);
EXPORT_FUNC bool LVecBase3f_C_almost_equal_B_pp(LVecBase3f const *param0, LVecBase3f const *param1);
EXPORT_FUNC bool LVecBase3f_C_almost_equal_B_ppf(LVecBase3f const *param0, LVecBase3f const *param1, float param2);
EXPORT_FUNC void LVecBase3f_C_output_v_pp(LVecBase3f const *param0, std::ostream *param1);
EXPORT_FUNC void LVecBase3f_C_write_datagram_fixed_v_pp(LVecBase3f const *param0, Datagram *param1);
EXPORT_FUNC void LVecBase3f_C_read_datagram_fixed_v_pp(LVecBase3f *param0, DatagramIterator *param1);
EXPORT_FUNC void LVecBase3f_C_write_datagram_v_pp(LVecBase3f const *param0, Datagram *param1);
EXPORT_FUNC void LVecBase3f_C_read_datagram_v_pp(LVecBase3f *param0, DatagramIterator *param1);
EXPORT_FUNC LVecBase3f::EVector3 * LVecBase3f_C_get_v_p_p(LVecBase3f const *param0);
EXPORT_FUNC int LVecBase3f_C_get_class_type_i_v();
EXPORT_FUNC void LVecBase3f_C_init_type_v_v();


// LVecBase3i

EXPORT_FUNC LVecBase3i * LVecBase3i_C_ctor_p_v();
EXPORT_FUNC LVecBase3i * LVecBase3i_C_ctor_p_pi(LVecBase2i const *param0, int param1);
EXPORT_FUNC LVecBase3i * LVecBase3i_C_ctor_p_p(LVecBase3i const *param0);
EXPORT_FUNC LVecBase3i * LVecBase3i_C_ctor_p_p_1_p_p(LVecBase3i::EVector3 const *param0);
EXPORT_FUNC LVecBase3i * LVecBase3i_C_ctor_p_i(int param0);
EXPORT_FUNC LVecBase3i * LVecBase3i_C_ctor_p_iii(int param0, int param1, int param2);
EXPORT_FUNC LVecBase3i const * LVecBase3i_C_zero_p_v();
EXPORT_FUNC LVecBase3i const * LVecBase3i_C_unit_x_p_v();
EXPORT_FUNC LVecBase3i const * LVecBase3i_C_unit_y_p_v();
EXPORT_FUNC LVecBase3i const * LVecBase3i_C_unit_z_p_v();
EXPORT_FUNC int LVecBase3i_C_size_i_v();
EXPORT_FUNC bool LVecBase3i_C_is_nan_B_p(LVecBase3i const *param0);
EXPORT_FUNC int LVecBase3i_C_get_cell_i_pi(LVecBase3i const *param0, int param1);
EXPORT_FUNC int LVecBase3i_C_get_x_i_p(LVecBase3i const *param0);
EXPORT_FUNC int LVecBase3i_C_get_y_i_p(LVecBase3i const *param0);
EXPORT_FUNC int LVecBase3i_C_get_z_i_p(LVecBase3i const *param0);
EXPORT_FUNC void LVecBase3i_C_set_cell_v_pii(LVecBase3i *param0, int param1, int param2);
EXPORT_FUNC void LVecBase3i_C_set_x_v_pi(LVecBase3i *param0, int param1);
EXPORT_FUNC void LVecBase3i_C_set_y_v_pi(LVecBase3i *param0, int param1);
EXPORT_FUNC void LVecBase3i_C_set_z_v_pi(LVecBase3i *param0, int param1);
EXPORT_FUNC LVecBase2i * LVecBase3i_C_get_xy_p_p(LVecBase3i const *param0);
EXPORT_FUNC LVecBase2i * LVecBase3i_C_get_xz_p_p(LVecBase3i const *param0);
EXPORT_FUNC LVecBase2i * LVecBase3i_C_get_yz_p_p(LVecBase3i const *param0);
EXPORT_FUNC void LVecBase3i_C_add_to_cell_v_pii(LVecBase3i *param0, int param1, int param2);
EXPORT_FUNC void LVecBase3i_C_add_x_v_pi(LVecBase3i *param0, int param1);
EXPORT_FUNC void LVecBase3i_C_add_y_v_pi(LVecBase3i *param0, int param1);
EXPORT_FUNC void LVecBase3i_C_add_z_v_pi(LVecBase3i *param0, int param1);
EXPORT_FUNC void LVecBase3i_C_get_data_v_p(LVecBase3i const *param0);
EXPORT_FUNC int LVecBase3i_C_get_num_components_i_v();
EXPORT_FUNC void LVecBase3i_C_begin_v_p(LVecBase3i *param0);
EXPORT_FUNC void LVecBase3i_C_begin_v_p_1_v_p(LVecBase3i const *param0);
EXPORT_FUNC void LVecBase3i_C_end_v_p(LVecBase3i *param0);
EXPORT_FUNC void LVecBase3i_C_end_v_p_1_v_p(LVecBase3i const *param0);
EXPORT_FUNC void LVecBase3i_C_fill_v_pi(LVecBase3i *param0, int param1);
EXPORT_FUNC void LVecBase3i_C_set_v_piii(LVecBase3i *param0, int param1, int param2, int param3);
EXPORT_FUNC int LVecBase3i_C_dot_i_pp(LVecBase3i const *param0, LVecBase3i const *param1);
EXPORT_FUNC int LVecBase3i_C_length_squared_i_p(LVecBase3i const *param0);
EXPORT_FUNC LVecBase3i * LVecBase3i_C_cross_p_pp(LVecBase3i const *param0, LVecBase3i const *param1);
EXPORT_FUNC int LVecBase3i_C_compare_to_i_pp(LVecBase3i const *param0, LVecBase3i const *param1);
EXPORT_FUNC std::size_t LVecBase3i_C_get_hash_p_p(LVecBase3i const *param0);
EXPORT_FUNC std::size_t LVecBase3i_C_add_hash_p_pp(LVecBase3i const *param0, std::size_t param1);
EXPORT_FUNC void LVecBase3i_C_generate_hash_v_pp(LVecBase3i const *param0, ChecksumHashGenerator *param1);
EXPORT_FUNC void LVecBase3i_C_componentwise_mult_v_pp(LVecBase3i *param0, LVecBase3i const *param1);
EXPORT_FUNC LVecBase3i * LVecBase3i_C_fmax_p_pp(LVecBase3i const *param0, LVecBase3i const *param1);
EXPORT_FUNC LVecBase3i * LVecBase3i_C_fmin_p_pp(LVecBase3i const *param0, LVecBase3i const *param1);
EXPORT_FUNC void LVecBase3i_C_cross_into_v_pp(LVecBase3i *param0, LVecBase3i const *param1);
EXPORT_FUNC bool LVecBase3i_C_almost_equal_B_pp(LVecBase3i const *param0, LVecBase3i const *param1);
EXPORT_FUNC bool LVecBase3i_C_almost_equal_B_ppi(LVecBase3i const *param0, LVecBase3i const *param1, int param2);
EXPORT_FUNC void LVecBase3i_C_output_v_pp(LVecBase3i const *param0, std::ostream *param1);
EXPORT_FUNC void LVecBase3i_C_write_datagram_fixed_v_pp(LVecBase3i const *param0, Datagram *param1);
EXPORT_FUNC void LVecBase3i_C_read_datagram_fixed_v_pp(LVecBase3i *param0, DatagramIterator *param1);
EXPORT_FUNC void LVecBase3i_C_write_datagram_v_pp(LVecBase3i const *param0, Datagram *param1);
EXPORT_FUNC void LVecBase3i_C_read_datagram_v_pp(LVecBase3i *param0, DatagramIterator *param1);
EXPORT_FUNC LVecBase3i::EVector3 * LVecBase3i_C_get_v_p_p(LVecBase3i const *param0);
EXPORT_FUNC int LVecBase3i_C_get_class_type_i_v();
EXPORT_FUNC void LVecBase3i_C_init_type_v_v();


// LVecBase4f

EXPORT_FUNC LVecBase4f * LVecBase4f_C_ctor_p_v();
EXPORT_FUNC LVecBase4f * LVecBase4f_C_ctor_p_p(LPoint3f const *param0);
EXPORT_FUNC LVecBase4f * LVecBase4f_C_ctor_p_pf(LVecBase3f const *param0, float param1);
EXPORT_FUNC LVecBase4f * LVecBase4f_C_ctor_p_p_1_p_p(LVecBase4f const *param0);
EXPORT_FUNC LVecBase4f * LVecBase4f_C_ctor_p_p_1_p_p_2_p_p(LVecBase4f::EVector4 const *param0);
EXPORT_FUNC LVecBase4f * LVecBase4f_C_ctor_p_p_1_p_p_2_p_p_3_p_p(LVector3f const *param0);
EXPORT_FUNC LVecBase4f * LVecBase4f_C_ctor_p_p_1_p_p_2_p_p_3_p_p_4_p_p(UnalignedLVecBase4f const *param0);
EXPORT_FUNC LVecBase4f * LVecBase4f_C_ctor_p_f(float param0);
EXPORT_FUNC LVecBase4f * LVecBase4f_C_ctor_p_ffff(float param0, float param1, float param2, float param3);
EXPORT_FUNC LVecBase4f const * LVecBase4f_C_zero_p_v();
EXPORT_FUNC LVecBase4f const * LVecBase4f_C_unit_x_p_v();
EXPORT_FUNC LVecBase4f const * LVecBase4f_C_unit_y_p_v();
EXPORT_FUNC LVecBase4f const * LVecBase4f_C_unit_z_p_v();
EXPORT_FUNC LVecBase4f const * LVecBase4f_C_unit_w_p_v();
EXPORT_FUNC int LVecBase4f_C_size_i_v();
EXPORT_FUNC bool LVecBase4f_C_is_nan_B_p(LVecBase4f const *param0);
EXPORT_FUNC float LVecBase4f_C_get_cell_f_pi(LVecBase4f const *param0, int param1);
EXPORT_FUNC void LVecBase4f_C_set_cell_v_pif(LVecBase4f *param0, int param1, float param2);
EXPORT_FUNC float LVecBase4f_C_get_x_f_p(LVecBase4f const *param0);
EXPORT_FUNC float LVecBase4f_C_get_y_f_p(LVecBase4f const *param0);
EXPORT_FUNC float LVecBase4f_C_get_z_f_p(LVecBase4f const *param0);
EXPORT_FUNC float LVecBase4f_C_get_w_f_p(LVecBase4f const *param0);
EXPORT_FUNC LVecBase3f * LVecBase4f_C_get_xyz_p_p(LVecBase4f const *param0);
EXPORT_FUNC LVecBase2f * LVecBase4f_C_get_xy_p_p(LVecBase4f const *param0);
EXPORT_FUNC void LVecBase4f_C_set_x_v_pf(LVecBase4f *param0, float param1);
EXPORT_FUNC void LVecBase4f_C_set_y_v_pf(LVecBase4f *param0, float param1);
EXPORT_FUNC void LVecBase4f_C_set_z_v_pf(LVecBase4f *param0, float param1);
EXPORT_FUNC void LVecBase4f_C_set_w_v_pf(LVecBase4f *param0, float param1);
EXPORT_FUNC void LVecBase4f_C_add_to_cell_v_pif(LVecBase4f *param0, int param1, float param2);
EXPORT_FUNC void LVecBase4f_C_add_x_v_pf(LVecBase4f *param0, float param1);
EXPORT_FUNC void LVecBase4f_C_add_y_v_pf(LVecBase4f *param0, float param1);
EXPORT_FUNC void LVecBase4f_C_add_z_v_pf(LVecBase4f *param0, float param1);
EXPORT_FUNC void LVecBase4f_C_add_w_v_pf(LVecBase4f *param0, float param1);
EXPORT_FUNC void LVecBase4f_C_get_data_v_p(LVecBase4f const *param0);
EXPORT_FUNC int LVecBase4f_C_get_num_components_i_v();
EXPORT_FUNC void LVecBase4f_C_begin_v_p(LVecBase4f *param0);
EXPORT_FUNC void LVecBase4f_C_begin_v_p_1_v_p(LVecBase4f const *param0);
EXPORT_FUNC void LVecBase4f_C_end_v_p(LVecBase4f *param0);
EXPORT_FUNC void LVecBase4f_C_end_v_p_1_v_p(LVecBase4f const *param0);
EXPORT_FUNC void LVecBase4f_C_fill_v_pf(LVecBase4f *param0, float param1);
EXPORT_FUNC void LVecBase4f_C_set_v_pffff(LVecBase4f *param0, float param1, float param2, float param3, float param4);
EXPORT_FUNC float LVecBase4f_C_dot_f_pp(LVecBase4f const *param0, LVecBase4f const *param1);
EXPORT_FUNC float LVecBase4f_C_length_squared_f_p(LVecBase4f const *param0);
EXPORT_FUNC float LVecBase4f_C_length_f_p(LVecBase4f const *param0);
EXPORT_FUNC bool LVecBase4f_C_normalize_B_p(LVecBase4f *param0);
EXPORT_FUNC LVecBase4f * LVecBase4f_C_normalized_p_p(LVecBase4f const *param0);
EXPORT_FUNC LVecBase4f * LVecBase4f_C_project_p_pp(LVecBase4f const *param0, LVecBase4f const *param1);
EXPORT_FUNC int LVecBase4f_C_compare_to_i_pp(LVecBase4f const *param0, LVecBase4f const *param1);
EXPORT_FUNC int LVecBase4f_C_compare_to_i_ppf(LVecBase4f const *param0, LVecBase4f const *param1, float param2);
EXPORT_FUNC std::size_t LVecBase4f_C_get_hash_p_p(LVecBase4f const *param0);
EXPORT_FUNC std::size_t LVecBase4f_C_get_hash_p_pf(LVecBase4f const *param0, float param1);
EXPORT_FUNC std::size_t LVecBase4f_C_add_hash_p_pp(LVecBase4f const *param0, std::size_t param1);
EXPORT_FUNC std::size_t LVecBase4f_C_add_hash_p_ppf(LVecBase4f const *param0, std::size_t param1, float param2);
EXPORT_FUNC void LVecBase4f_C_generate_hash_v_pp(LVecBase4f const *param0, ChecksumHashGenerator *param1);
EXPORT_FUNC void LVecBase4f_C_generate_hash_v_ppf(LVecBase4f const *param0, ChecksumHashGenerator *param1, float param2);
EXPORT_FUNC void LVecBase4f_C_componentwise_mult_v_pp(LVecBase4f *param0, LVecBase4f const *param1);
EXPORT_FUNC LVecBase4f * LVecBase4f_C_fmax_p_pp(LVecBase4f const *param0, LVecBase4f const *param1);
EXPORT_FUNC LVecBase4f * LVecBase4f_C_fmin_p_pp(LVecBase4f const *param0, LVecBase4f const *param1);
EXPORT_FUNC bool LVecBase4f_C_almost_equal_B_pp(LVecBase4f const *param0, LVecBase4f const *param1);
EXPORT_FUNC bool LVecBase4f_C_almost_equal_B_ppf(LVecBase4f const *param0, LVecBase4f const *param1, float param2);
EXPORT_FUNC void LVecBase4f_C_output_v_pp(LVecBase4f const *param0, std::ostream *param1);
EXPORT_FUNC void LVecBase4f_C_write_datagram_fixed_v_pp(LVecBase4f const *param0, Datagram *param1);
EXPORT_FUNC void LVecBase4f_C_read_datagram_fixed_v_pp(LVecBase4f *param0, DatagramIterator *param1);
EXPORT_FUNC void LVecBase4f_C_write_datagram_v_pp(LVecBase4f const *param0, Datagram *param1);
EXPORT_FUNC void LVecBase4f_C_read_datagram_v_pp(LVecBase4f *param0, DatagramIterator *param1);
EXPORT_FUNC LVecBase4f::EVector4 * LVecBase4f_C_get_v_p_p(LVecBase4f const *param0);
EXPORT_FUNC int LVecBase4f_C_get_class_type_i_v();
EXPORT_FUNC void LVecBase4f_C_init_type_v_v();


// LVecBase4i

EXPORT_FUNC LVecBase4i * LVecBase4i_C_ctor_p_v();
EXPORT_FUNC LVecBase4i * LVecBase4i_C_ctor_p_p(LPoint3i const *param0);
EXPORT_FUNC LVecBase4i * LVecBase4i_C_ctor_p_pi(LVecBase3i const *param0, int param1);
EXPORT_FUNC LVecBase4i * LVecBase4i_C_ctor_p_p_1_p_p(LVecBase4i const *param0);
EXPORT_FUNC LVecBase4i * LVecBase4i_C_ctor_p_p_1_p_p_2_p_p(LVecBase4i::EVector4 const *param0);
EXPORT_FUNC LVecBase4i * LVecBase4i_C_ctor_p_p_1_p_p_2_p_p_3_p_p(LVector3i const *param0);
EXPORT_FUNC LVecBase4i * LVecBase4i_C_ctor_p_p_1_p_p_2_p_p_3_p_p_4_p_p(UnalignedLVecBase4i const *param0);
EXPORT_FUNC LVecBase4i * LVecBase4i_C_ctor_p_i(int param0);
EXPORT_FUNC LVecBase4i * LVecBase4i_C_ctor_p_iiii(int param0, int param1, int param2, int param3);
EXPORT_FUNC LVecBase4i const * LVecBase4i_C_zero_p_v();
EXPORT_FUNC LVecBase4i const * LVecBase4i_C_unit_x_p_v();
EXPORT_FUNC LVecBase4i const * LVecBase4i_C_unit_y_p_v();
EXPORT_FUNC LVecBase4i const * LVecBase4i_C_unit_z_p_v();
EXPORT_FUNC LVecBase4i const * LVecBase4i_C_unit_w_p_v();
EXPORT_FUNC int LVecBase4i_C_size_i_v();
EXPORT_FUNC bool LVecBase4i_C_is_nan_B_p(LVecBase4i const *param0);
EXPORT_FUNC int LVecBase4i_C_get_cell_i_pi(LVecBase4i const *param0, int param1);
EXPORT_FUNC void LVecBase4i_C_set_cell_v_pii(LVecBase4i *param0, int param1, int param2);
EXPORT_FUNC int LVecBase4i_C_get_x_i_p(LVecBase4i const *param0);
EXPORT_FUNC int LVecBase4i_C_get_y_i_p(LVecBase4i const *param0);
EXPORT_FUNC int LVecBase4i_C_get_z_i_p(LVecBase4i const *param0);
EXPORT_FUNC int LVecBase4i_C_get_w_i_p(LVecBase4i const *param0);
EXPORT_FUNC LVecBase3i * LVecBase4i_C_get_xyz_p_p(LVecBase4i const *param0);
EXPORT_FUNC LVecBase2i * LVecBase4i_C_get_xy_p_p(LVecBase4i const *param0);
EXPORT_FUNC void LVecBase4i_C_set_x_v_pi(LVecBase4i *param0, int param1);
EXPORT_FUNC void LVecBase4i_C_set_y_v_pi(LVecBase4i *param0, int param1);
EXPORT_FUNC void LVecBase4i_C_set_z_v_pi(LVecBase4i *param0, int param1);
EXPORT_FUNC void LVecBase4i_C_set_w_v_pi(LVecBase4i *param0, int param1);
EXPORT_FUNC void LVecBase4i_C_add_to_cell_v_pii(LVecBase4i *param0, int param1, int param2);
EXPORT_FUNC void LVecBase4i_C_add_x_v_pi(LVecBase4i *param0, int param1);
EXPORT_FUNC void LVecBase4i_C_add_y_v_pi(LVecBase4i *param0, int param1);
EXPORT_FUNC void LVecBase4i_C_add_z_v_pi(LVecBase4i *param0, int param1);
EXPORT_FUNC void LVecBase4i_C_add_w_v_pi(LVecBase4i *param0, int param1);
EXPORT_FUNC void LVecBase4i_C_get_data_v_p(LVecBase4i const *param0);
EXPORT_FUNC int LVecBase4i_C_get_num_components_i_v();
EXPORT_FUNC void LVecBase4i_C_begin_v_p(LVecBase4i *param0);
EXPORT_FUNC void LVecBase4i_C_begin_v_p_1_v_p(LVecBase4i const *param0);
EXPORT_FUNC void LVecBase4i_C_end_v_p(LVecBase4i *param0);
EXPORT_FUNC void LVecBase4i_C_end_v_p_1_v_p(LVecBase4i const *param0);
EXPORT_FUNC void LVecBase4i_C_fill_v_pi(LVecBase4i *param0, int param1);
EXPORT_FUNC void LVecBase4i_C_set_v_piiii(LVecBase4i *param0, int param1, int param2, int param3, int param4);
EXPORT_FUNC int LVecBase4i_C_dot_i_pp(LVecBase4i const *param0, LVecBase4i const *param1);
EXPORT_FUNC int LVecBase4i_C_length_squared_i_p(LVecBase4i const *param0);
EXPORT_FUNC int LVecBase4i_C_compare_to_i_pp(LVecBase4i const *param0, LVecBase4i const *param1);
EXPORT_FUNC std::size_t LVecBase4i_C_get_hash_p_p(LVecBase4i const *param0);
EXPORT_FUNC std::size_t LVecBase4i_C_add_hash_p_pp(LVecBase4i const *param0, std::size_t param1);
EXPORT_FUNC void LVecBase4i_C_generate_hash_v_pp(LVecBase4i const *param0, ChecksumHashGenerator *param1);
EXPORT_FUNC void LVecBase4i_C_componentwise_mult_v_pp(LVecBase4i *param0, LVecBase4i const *param1);
EXPORT_FUNC LVecBase4i * LVecBase4i_C_fmax_p_pp(LVecBase4i const *param0, LVecBase4i const *param1);
EXPORT_FUNC LVecBase4i * LVecBase4i_C_fmin_p_pp(LVecBase4i const *param0, LVecBase4i const *param1);
EXPORT_FUNC bool LVecBase4i_C_almost_equal_B_pp(LVecBase4i const *param0, LVecBase4i const *param1);
EXPORT_FUNC bool LVecBase4i_C_almost_equal_B_ppi(LVecBase4i const *param0, LVecBase4i const *param1, int param2);
EXPORT_FUNC void LVecBase4i_C_output_v_pp(LVecBase4i const *param0, std::ostream *param1);
EXPORT_FUNC void LVecBase4i_C_write_datagram_fixed_v_pp(LVecBase4i const *param0, Datagram *param1);
EXPORT_FUNC void LVecBase4i_C_read_datagram_fixed_v_pp(LVecBase4i *param0, DatagramIterator *param1);
EXPORT_FUNC void LVecBase4i_C_write_datagram_v_pp(LVecBase4i const *param0, Datagram *param1);
EXPORT_FUNC void LVecBase4i_C_read_datagram_v_pp(LVecBase4i *param0, DatagramIterator *param1);
EXPORT_FUNC LVecBase4i::EVector4 * LVecBase4i_C_get_v_p_p(LVecBase4i const *param0);
EXPORT_FUNC int LVecBase4i_C_get_class_type_i_v();
EXPORT_FUNC void LVecBase4i_C_init_type_v_v();


// LensNode

EXPORT_FUNC LensNode * LensNode_C_ctor_p_sp(char const *param0, Lens *param1);
EXPORT_FUNC LensNode * LensNode_C_ctor_p_s(char const *param0);
EXPORT_FUNC void LensNode_C_xform_v_pp(LensNode *param0, LMatrix4 const *param1);
EXPORT_FUNC void LensNode_C_copy_lens_v_pp(LensNode *param0, Lens const *param1);
EXPORT_FUNC void LensNode_C_copy_lens_v_pip(LensNode *param0, int param1, Lens const *param2);
EXPORT_FUNC void LensNode_C_set_lens_v_pp(LensNode *param0, Lens *param1);
EXPORT_FUNC void LensNode_C_set_lens_v_pip(LensNode *param0, int param1, Lens *param2);
EXPORT_FUNC Lens * LensNode_C_get_lens_p_pi(LensNode const *param0, int param1);
EXPORT_FUNC Lens * LensNode_C_get_lens_p_p(LensNode const *param0);
EXPORT_FUNC bool LensNode_C_set_lens_active_B_piB(LensNode *param0, int param1, bool param2);
EXPORT_FUNC bool LensNode_C_get_lens_active_B_pi(LensNode const *param0, int param1);
EXPORT_FUNC bool LensNode_C_activate_lens_B_pi(LensNode *param0, int param1);
EXPORT_FUNC bool LensNode_C_deactivate_lens_B_pi(LensNode *param0, int param1);
EXPORT_FUNC bool LensNode_C_is_in_view_B_pp(LensNode *param0, LPoint3 const *param1);
EXPORT_FUNC bool LensNode_C_is_in_view_B_pip(LensNode *param0, int param1, LPoint3 const *param2);
EXPORT_FUNC void LensNode_C_show_frustum_v_p(LensNode *param0);
EXPORT_FUNC void LensNode_C_hide_frustum_v_p(LensNode *param0);
EXPORT_FUNC void LensNode_C_register_with_read_factory_v_v();
EXPORT_FUNC void LensNode_C_write_datagram_v_ppp(LensNode *param0, BamWriter *param1, Datagram *param2);
EXPORT_FUNC int LensNode_C_get_class_type_i_v();
EXPORT_FUNC void LensNode_C_init_type_v_v();
EXPORT_FUNC int LensNode_C_get_type_i_p(LensNode const *param0);
EXPORT_FUNC int LensNode_C_force_init_type_i_p(LensNode *param0);


// LinkedListNode

EXPORT_FUNC PandaNode * LinkedListNode_C_downcast_to_PandaNode_p_p(LinkedListNode *param0);


// MemoryBase

EXPORT_FUNC MemoryBase * MemoryBase_C_ctor_p_v();
EXPORT_FUNC MemoryBase * MemoryBase_C_ctor_p_p(MemoryBase const *param0);
EXPORT_FUNC ReferenceCount * MemoryBase_C_downcast_to_ReferenceCount_p_p(MemoryBase *param0);
EXPORT_FUNC TypedObject * MemoryBase_C_downcast_to_TypedObject_p_p(MemoryBase *param0);


// Namable

EXPORT_FUNC PandaNode * Namable_C_downcast_to_PandaNode_p_p(Namable *param0);
EXPORT_FUNC Thread * Namable_C_downcast_to_Thread_p_p(Namable *param0);


// NodePath

EXPORT_FUNC NodePath * NodePath_C_ctor_p_v();
EXPORT_FUNC NodePath * NodePath_C_ctor_p_p(NodePath *param0);
EXPORT_FUNC NodePath * NodePath_C_ctor_p_p_1_p_p(NodePath const *param0);
EXPORT_FUNC NodePath * NodePath_C_ctor_p_ppp(NodePath const *param0, PandaNode *param1, Thread *param2);
EXPORT_FUNC NodePath * NodePath_C_ctor_p_pp(NodePath const *param0, PandaNode *param1);
EXPORT_FUNC NodePath * NodePath_C_ctor_p_pp_1_p_pp(PandaNode *param0, Thread *param1);
EXPORT_FUNC NodePath * NodePath_C_ctor_p_p_1_p_p_2_p_p(PandaNode *param0);
EXPORT_FUNC NodePath * NodePath_C_ctor_p_sp(char const *param0, Thread *param1);
EXPORT_FUNC NodePath * NodePath_C_ctor_p_s(char const *param0);
EXPORT_FUNC NodePath * NodePath_C_any_path_p_pp(PandaNode *param0, Thread *param1);
EXPORT_FUNC NodePath * NodePath_C_any_path_p_p(PandaNode *param0);
EXPORT_FUNC void NodePath_C_clear_v_p(NodePath *param0);
EXPORT_FUNC NodePath * NodePath_C_not_found_p_v();
EXPORT_FUNC NodePath * NodePath_C_removed_p_v();
EXPORT_FUNC NodePath * NodePath_C_fail_p_v();
EXPORT_FUNC void NodePath_C_set_max_search_depth_v_i(int param0);
EXPORT_FUNC int NodePath_C_get_max_search_depth_i_v();
EXPORT_FUNC bool NodePath_C_is_empty_B_p(NodePath const *param0);
EXPORT_FUNC bool NodePath_C_is_singleton_B_pp(NodePath const *param0, Thread *param1);
EXPORT_FUNC bool NodePath_C_is_singleton_B_p(NodePath const *param0);
EXPORT_FUNC int NodePath_C_get_num_nodes_i_pp(NodePath const *param0, Thread *param1);
EXPORT_FUNC int NodePath_C_get_num_nodes_i_p(NodePath const *param0);
EXPORT_FUNC PandaNode * NodePath_C_get_node_p_pip(NodePath const *param0, int param1, Thread *param2);
EXPORT_FUNC PandaNode * NodePath_C_get_node_p_pi(NodePath const *param0, int param1);
EXPORT_FUNC NodePath * NodePath_C_get_ancestor_p_pip(NodePath const *param0, int param1, Thread *param2);
EXPORT_FUNC NodePath * NodePath_C_get_ancestor_p_pi(NodePath const *param0, int param1);
EXPORT_FUNC NodePath::ErrorType NodePath_C_get_error_type_p_p(NodePath const *param0);
EXPORT_FUNC PandaNode * NodePath_C_get_top_node_p_pp(NodePath const *param0, Thread *param1);
EXPORT_FUNC PandaNode * NodePath_C_get_top_node_p_p(NodePath const *param0);
EXPORT_FUNC NodePath * NodePath_C_get_top_p_pp(NodePath const *param0, Thread *param1);
EXPORT_FUNC NodePath * NodePath_C_get_top_p_p(NodePath const *param0);
EXPORT_FUNC PandaNode * NodePath_C_node_p_p(NodePath const *param0);
EXPORT_FUNC int NodePath_C_get_key_i_p(NodePath const *param0);
EXPORT_FUNC std::size_t NodePath_C_add_hash_p_pp(NodePath const *param0, std::size_t param1);
EXPORT_FUNC bool NodePath_C_is_same_graph_B_ppp(NodePath const *param0, NodePath const *param1, Thread *param2);
EXPORT_FUNC bool NodePath_C_is_same_graph_B_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC bool NodePath_C_is_ancestor_of_B_ppp(NodePath const *param0, NodePath const *param1, Thread *param2);
EXPORT_FUNC bool NodePath_C_is_ancestor_of_B_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC NodePath * NodePath_C_get_common_ancestor_p_ppp(NodePath const *param0, NodePath const *param1, Thread *param2);
EXPORT_FUNC NodePath * NodePath_C_get_common_ancestor_p_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC NodePathCollection * NodePath_C_get_children_p_pp(NodePath const *param0, Thread *param1);
EXPORT_FUNC NodePathCollection * NodePath_C_get_children_p_p(NodePath const *param0);
EXPORT_FUNC int NodePath_C_get_num_children_i_pp(NodePath const *param0, Thread *param1);
EXPORT_FUNC int NodePath_C_get_num_children_i_p(NodePath const *param0);
EXPORT_FUNC NodePath * NodePath_C_get_child_p_pip(NodePath const *param0, int param1, Thread *param2);
EXPORT_FUNC NodePath * NodePath_C_get_child_p_pi(NodePath const *param0, int param1);
EXPORT_FUNC NodePathCollection * NodePath_C_get_stashed_children_p_pp(NodePath const *param0, Thread *param1);
EXPORT_FUNC NodePathCollection * NodePath_C_get_stashed_children_p_p(NodePath const *param0);
EXPORT_FUNC int NodePath_C_count_num_descendants_i_p(NodePath const *param0);
EXPORT_FUNC bool NodePath_C_has_parent_B_pp(NodePath const *param0, Thread *param1);
EXPORT_FUNC bool NodePath_C_has_parent_B_p(NodePath const *param0);
EXPORT_FUNC NodePath * NodePath_C_get_parent_p_pp(NodePath const *param0, Thread *param1);
EXPORT_FUNC NodePath * NodePath_C_get_parent_p_p(NodePath const *param0);
EXPORT_FUNC int NodePath_C_get_sort_i_pp(NodePath const *param0, Thread *param1);
EXPORT_FUNC int NodePath_C_get_sort_i_p(NodePath const *param0);
EXPORT_FUNC NodePath * NodePath_C_find_p_ps(NodePath const *param0, char const *param1);
EXPORT_FUNC NodePath * NodePath_C_find_path_to_p_pp(NodePath const *param0, PandaNode *param1);
EXPORT_FUNC NodePathCollection * NodePath_C_find_all_matches_p_ps(NodePath const *param0, char const *param1);
EXPORT_FUNC NodePathCollection * NodePath_C_find_all_paths_to_p_pp(NodePath const *param0, PandaNode *param1);
EXPORT_FUNC void NodePath_C_reparent_to_v_ppip(NodePath *param0, NodePath const *param1, int param2, Thread *param3);
EXPORT_FUNC void NodePath_C_reparent_to_v_ppi(NodePath *param0, NodePath const *param1, int param2);
EXPORT_FUNC void NodePath_C_reparent_to_v_pp(NodePath *param0, NodePath const *param1);
EXPORT_FUNC void NodePath_C_stash_to_v_ppip(NodePath *param0, NodePath const *param1, int param2, Thread *param3);
EXPORT_FUNC void NodePath_C_stash_to_v_ppi(NodePath *param0, NodePath const *param1, int param2);
EXPORT_FUNC void NodePath_C_stash_to_v_pp(NodePath *param0, NodePath const *param1);
EXPORT_FUNC void NodePath_C_wrt_reparent_to_v_ppip(NodePath *param0, NodePath const *param1, int param2, Thread *param3);
EXPORT_FUNC void NodePath_C_wrt_reparent_to_v_ppi(NodePath *param0, NodePath const *param1, int param2);
EXPORT_FUNC void NodePath_C_wrt_reparent_to_v_pp(NodePath *param0, NodePath const *param1);
EXPORT_FUNC NodePath * NodePath_C_instance_to_p_ppip(NodePath const *param0, NodePath const *param1, int param2, Thread *param3);
EXPORT_FUNC NodePath * NodePath_C_instance_to_p_ppi(NodePath const *param0, NodePath const *param1, int param2);
EXPORT_FUNC NodePath * NodePath_C_instance_to_p_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC NodePath * NodePath_C_instance_under_node_p_ppsip(NodePath const *param0, NodePath const *param1, char const *param2, int param3, Thread *param4);
EXPORT_FUNC NodePath * NodePath_C_instance_under_node_p_ppsi(NodePath const *param0, NodePath const *param1, char const *param2, int param3);
EXPORT_FUNC NodePath * NodePath_C_instance_under_node_p_pps(NodePath const *param0, NodePath const *param1, char const *param2);
EXPORT_FUNC NodePath * NodePath_C_copy_to_p_ppip(NodePath const *param0, NodePath const *param1, int param2, Thread *param3);
EXPORT_FUNC NodePath * NodePath_C_copy_to_p_ppi(NodePath const *param0, NodePath const *param1, int param2);
EXPORT_FUNC NodePath * NodePath_C_copy_to_p_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC NodePath * NodePath_C_attach_new_node_p_ppip(NodePath const *param0, PandaNode *param1, int param2, Thread *param3);
EXPORT_FUNC NodePath * NodePath_C_attach_new_node_p_ppi(NodePath const *param0, PandaNode *param1, int param2);
EXPORT_FUNC NodePath * NodePath_C_attach_new_node_p_pp(NodePath const *param0, PandaNode *param1);
EXPORT_FUNC NodePath * NodePath_C_attach_new_node_p_psip(NodePath const *param0, char const *param1, int param2, Thread *param3);
EXPORT_FUNC NodePath * NodePath_C_attach_new_node_p_psi(NodePath const *param0, char const *param1, int param2);
EXPORT_FUNC NodePath * NodePath_C_attach_new_node_p_ps(NodePath const *param0, char const *param1);
EXPORT_FUNC void NodePath_C_remove_node_v_pp(NodePath *param0, Thread *param1);
EXPORT_FUNC void NodePath_C_remove_node_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_detach_node_v_pp(NodePath *param0, Thread *param1);
EXPORT_FUNC void NodePath_C_detach_node_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_output_v_pp(NodePath const *param0, std::ostream *param1);
EXPORT_FUNC void NodePath_C_ls_v_p(NodePath const *param0);
EXPORT_FUNC void NodePath_C_ls_v_ppi(NodePath const *param0, std::ostream *param1, int param2);
EXPORT_FUNC void NodePath_C_ls_v_pp(NodePath const *param0, std::ostream *param1);
EXPORT_FUNC void NodePath_C_reverse_ls_v_p(NodePath const *param0);
EXPORT_FUNC int NodePath_C_reverse_ls_i_ppi(NodePath const *param0, std::ostream *param1, int param2);
EXPORT_FUNC int NodePath_C_reverse_ls_i_pp(NodePath const *param0, std::ostream *param1);
EXPORT_FUNC ConstPointerTo< RenderState > * NodePath_C_get_state_p_ppp(NodePath const *param0, NodePath const *param1, Thread *param2);
EXPORT_FUNC ConstPointerTo< RenderState > * NodePath_C_get_state_p_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC RenderState const * NodePath_C_get_state_p_pp_1_p_pp(NodePath const *param0, Thread *param1);
EXPORT_FUNC RenderState const * NodePath_C_get_state_p_p(NodePath const *param0);
EXPORT_FUNC void NodePath_C_set_state_v_pppp(NodePath *param0, NodePath const *param1, RenderState const *param2, Thread *param3);
EXPORT_FUNC void NodePath_C_set_state_v_ppp(NodePath *param0, NodePath const *param1, RenderState const *param2);
EXPORT_FUNC void NodePath_C_set_state_v_ppp_1_v_ppp(NodePath *param0, RenderState const *param1, Thread *param2);
EXPORT_FUNC void NodePath_C_set_state_v_pp(NodePath *param0, RenderState const *param1);
EXPORT_FUNC ConstPointerTo< RenderState > * NodePath_C_get_net_state_p_pp(NodePath const *param0, Thread *param1);
EXPORT_FUNC ConstPointerTo< RenderState > * NodePath_C_get_net_state_p_p(NodePath const *param0);
EXPORT_FUNC void NodePath_C_set_attrib_v_ppi(NodePath *param0, RenderAttrib const *param1, int param2);
EXPORT_FUNC void NodePath_C_set_attrib_v_pp(NodePath *param0, RenderAttrib const *param1);
EXPORT_FUNC RenderAttrib const * NodePath_C_get_attrib_p_pi(NodePath const *param0, int param1);
EXPORT_FUNC bool NodePath_C_has_attrib_B_pi(NodePath const *param0, int param1);
EXPORT_FUNC void NodePath_C_clear_attrib_v_pi(NodePath *param0, int param1);
EXPORT_FUNC void NodePath_C_set_effect_v_pp(NodePath *param0, RenderEffect const *param1);
EXPORT_FUNC RenderEffect const * NodePath_C_get_effect_p_pi(NodePath const *param0, int param1);
EXPORT_FUNC bool NodePath_C_has_effect_B_pi(NodePath const *param0, int param1);
EXPORT_FUNC void NodePath_C_clear_effect_v_pi(NodePath *param0, int param1);
EXPORT_FUNC void NodePath_C_set_effects_v_pp(NodePath *param0, RenderEffects const *param1);
EXPORT_FUNC RenderEffects const * NodePath_C_get_effects_p_p(NodePath const *param0);
EXPORT_FUNC void NodePath_C_clear_effects_v_p(NodePath *param0);
EXPORT_FUNC ConstPointerTo< TransformState > * NodePath_C_get_transform_p_ppp(NodePath const *param0, NodePath const *param1, Thread *param2);
EXPORT_FUNC ConstPointerTo< TransformState > * NodePath_C_get_transform_p_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC TransformState const * NodePath_C_get_transform_p_pp_1_p_pp(NodePath const *param0, Thread *param1);
EXPORT_FUNC TransformState const * NodePath_C_get_transform_p_p(NodePath const *param0);
EXPORT_FUNC void NodePath_C_clear_transform_v_ppp(NodePath *param0, NodePath const *param1, Thread *param2);
EXPORT_FUNC void NodePath_C_clear_transform_v_pp(NodePath *param0, NodePath const *param1);
EXPORT_FUNC void NodePath_C_clear_transform_v_pp_1_v_pp(NodePath *param0, Thread *param1);
EXPORT_FUNC void NodePath_C_clear_transform_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_set_transform_v_pppp(NodePath *param0, NodePath const *param1, TransformState const *param2, Thread *param3);
EXPORT_FUNC void NodePath_C_set_transform_v_ppp(NodePath *param0, NodePath const *param1, TransformState const *param2);
EXPORT_FUNC void NodePath_C_set_transform_v_ppp_1_v_ppp(NodePath *param0, TransformState const *param1, Thread *param2);
EXPORT_FUNC void NodePath_C_set_transform_v_pp(NodePath *param0, TransformState const *param1);
EXPORT_FUNC ConstPointerTo< TransformState > * NodePath_C_get_net_transform_p_pp(NodePath const *param0, Thread *param1);
EXPORT_FUNC ConstPointerTo< TransformState > * NodePath_C_get_net_transform_p_p(NodePath const *param0);
EXPORT_FUNC ConstPointerTo< TransformState > * NodePath_C_get_prev_transform_p_ppp(NodePath const *param0, NodePath const *param1, Thread *param2);
EXPORT_FUNC ConstPointerTo< TransformState > * NodePath_C_get_prev_transform_p_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC TransformState const * NodePath_C_get_prev_transform_p_pp_1_p_pp(NodePath const *param0, Thread *param1);
EXPORT_FUNC TransformState const * NodePath_C_get_prev_transform_p_p(NodePath const *param0);
EXPORT_FUNC void NodePath_C_set_prev_transform_v_pppp(NodePath *param0, NodePath const *param1, TransformState const *param2, Thread *param3);
EXPORT_FUNC void NodePath_C_set_prev_transform_v_ppp(NodePath *param0, NodePath const *param1, TransformState const *param2);
EXPORT_FUNC void NodePath_C_set_prev_transform_v_ppp_1_v_ppp(NodePath *param0, TransformState const *param1, Thread *param2);
EXPORT_FUNC void NodePath_C_set_prev_transform_v_pp(NodePath *param0, TransformState const *param1);
EXPORT_FUNC ConstPointerTo< TransformState > * NodePath_C_get_net_prev_transform_p_pp(NodePath const *param0, Thread *param1);
EXPORT_FUNC ConstPointerTo< TransformState > * NodePath_C_get_net_prev_transform_p_p(NodePath const *param0);
EXPORT_FUNC void NodePath_C_set_pos_v_pp(NodePath *param0, LVecBase3 const *param1);
EXPORT_FUNC void NodePath_C_set_pos_v_ppp(NodePath *param0, NodePath const *param1, LVecBase3 const *param2);
EXPORT_FUNC void NodePath_C_set_pos_v_ppfff(NodePath *param0, NodePath const *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC void NodePath_C_set_pos_v_pfff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3);
EXPORT_FUNC void NodePath_C_set_x_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2);
EXPORT_FUNC void NodePath_C_set_x_v_pf(NodePath *param0, PN_stdfloat param1);
EXPORT_FUNC void NodePath_C_set_y_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2);
EXPORT_FUNC void NodePath_C_set_y_v_pf(NodePath *param0, PN_stdfloat param1);
EXPORT_FUNC void NodePath_C_set_z_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2);
EXPORT_FUNC void NodePath_C_set_z_v_pf(NodePath *param0, PN_stdfloat param1);
EXPORT_FUNC void NodePath_C_set_fluid_pos_v_pp(NodePath *param0, LVecBase3 const *param1);
EXPORT_FUNC void NodePath_C_set_fluid_pos_v_ppp(NodePath *param0, NodePath const *param1, LVecBase3 const *param2);
EXPORT_FUNC void NodePath_C_set_fluid_pos_v_ppfff(NodePath *param0, NodePath const *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC void NodePath_C_set_fluid_pos_v_pfff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3);
EXPORT_FUNC void NodePath_C_set_fluid_x_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2);
EXPORT_FUNC void NodePath_C_set_fluid_x_v_pf(NodePath *param0, PN_stdfloat param1);
EXPORT_FUNC void NodePath_C_set_fluid_y_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2);
EXPORT_FUNC void NodePath_C_set_fluid_y_v_pf(NodePath *param0, PN_stdfloat param1);
EXPORT_FUNC void NodePath_C_set_fluid_z_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2);
EXPORT_FUNC void NodePath_C_set_fluid_z_v_pf(NodePath *param0, PN_stdfloat param1);
EXPORT_FUNC LPoint3 * NodePath_C_get_pos_p_p(NodePath const *param0);
EXPORT_FUNC LPoint3 * NodePath_C_get_pos_p_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC PN_stdfloat NodePath_C_get_x_f_p(NodePath const *param0);
EXPORT_FUNC PN_stdfloat NodePath_C_get_x_f_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC PN_stdfloat NodePath_C_get_y_f_p(NodePath const *param0);
EXPORT_FUNC PN_stdfloat NodePath_C_get_y_f_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC PN_stdfloat NodePath_C_get_z_f_p(NodePath const *param0);
EXPORT_FUNC PN_stdfloat NodePath_C_get_z_f_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC LVector3 * NodePath_C_get_pos_delta_p_p(NodePath const *param0);
EXPORT_FUNC LVector3 * NodePath_C_get_pos_delta_p_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC void NodePath_C_set_hpr_v_pp(NodePath *param0, LVecBase3 const *param1);
EXPORT_FUNC void NodePath_C_set_hpr_v_ppp(NodePath *param0, NodePath const *param1, LVecBase3 const *param2);
EXPORT_FUNC void NodePath_C_set_hpr_v_ppfff(NodePath *param0, NodePath const *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC void NodePath_C_set_hpr_v_pfff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3);
EXPORT_FUNC void NodePath_C_set_h_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2);
EXPORT_FUNC void NodePath_C_set_h_v_pf(NodePath *param0, PN_stdfloat param1);
EXPORT_FUNC void NodePath_C_set_p_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2);
EXPORT_FUNC void NodePath_C_set_p_v_pf(NodePath *param0, PN_stdfloat param1);
EXPORT_FUNC void NodePath_C_set_r_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2);
EXPORT_FUNC void NodePath_C_set_r_v_pf(NodePath *param0, PN_stdfloat param1);
EXPORT_FUNC LVecBase3 * NodePath_C_get_hpr_p_p(NodePath const *param0);
EXPORT_FUNC LVecBase3 * NodePath_C_get_hpr_p_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC PN_stdfloat NodePath_C_get_h_f_p(NodePath const *param0);
EXPORT_FUNC PN_stdfloat NodePath_C_get_h_f_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC PN_stdfloat NodePath_C_get_p_f_p(NodePath const *param0);
EXPORT_FUNC PN_stdfloat NodePath_C_get_p_f_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC PN_stdfloat NodePath_C_get_r_f_p(NodePath const *param0);
EXPORT_FUNC PN_stdfloat NodePath_C_get_r_f_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC void NodePath_C_set_quat_v_pp(NodePath *param0, LQuaternion const *param1);
EXPORT_FUNC void NodePath_C_set_quat_v_ppp(NodePath *param0, NodePath const *param1, LQuaternion const *param2);
EXPORT_FUNC LQuaternion * NodePath_C_get_quat_p_p(NodePath const *param0);
EXPORT_FUNC LQuaternion * NodePath_C_get_quat_p_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC void NodePath_C_set_scale_v_pp(NodePath *param0, LVecBase3 const *param1);
EXPORT_FUNC void NodePath_C_set_scale_v_ppp(NodePath *param0, NodePath const *param1, LVecBase3 const *param2);
EXPORT_FUNC void NodePath_C_set_scale_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2);
EXPORT_FUNC void NodePath_C_set_scale_v_ppfff(NodePath *param0, NodePath const *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC void NodePath_C_set_scale_v_pf(NodePath *param0, PN_stdfloat param1);
EXPORT_FUNC void NodePath_C_set_scale_v_pfff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3);
EXPORT_FUNC void NodePath_C_set_sx_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2);
EXPORT_FUNC void NodePath_C_set_sx_v_pf(NodePath *param0, PN_stdfloat param1);
EXPORT_FUNC void NodePath_C_set_sy_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2);
EXPORT_FUNC void NodePath_C_set_sy_v_pf(NodePath *param0, PN_stdfloat param1);
EXPORT_FUNC void NodePath_C_set_sz_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2);
EXPORT_FUNC void NodePath_C_set_sz_v_pf(NodePath *param0, PN_stdfloat param1);
EXPORT_FUNC LVecBase3 * NodePath_C_get_scale_p_p(NodePath const *param0);
EXPORT_FUNC LVecBase3 * NodePath_C_get_scale_p_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC PN_stdfloat NodePath_C_get_sx_f_p(NodePath const *param0);
EXPORT_FUNC PN_stdfloat NodePath_C_get_sx_f_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC PN_stdfloat NodePath_C_get_sy_f_p(NodePath const *param0);
EXPORT_FUNC PN_stdfloat NodePath_C_get_sy_f_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC PN_stdfloat NodePath_C_get_sz_f_p(NodePath const *param0);
EXPORT_FUNC PN_stdfloat NodePath_C_get_sz_f_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC void NodePath_C_set_shear_v_pp(NodePath *param0, LVecBase3 const *param1);
EXPORT_FUNC void NodePath_C_set_shear_v_ppp(NodePath *param0, NodePath const *param1, LVecBase3 const *param2);
EXPORT_FUNC void NodePath_C_set_shear_v_ppfff(NodePath *param0, NodePath const *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC void NodePath_C_set_shear_v_pfff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3);
EXPORT_FUNC void NodePath_C_set_shxy_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2);
EXPORT_FUNC void NodePath_C_set_shxy_v_pf(NodePath *param0, PN_stdfloat param1);
EXPORT_FUNC void NodePath_C_set_shxz_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2);
EXPORT_FUNC void NodePath_C_set_shxz_v_pf(NodePath *param0, PN_stdfloat param1);
EXPORT_FUNC void NodePath_C_set_shyz_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2);
EXPORT_FUNC void NodePath_C_set_shyz_v_pf(NodePath *param0, PN_stdfloat param1);
EXPORT_FUNC LVecBase3 * NodePath_C_get_shear_p_p(NodePath const *param0);
EXPORT_FUNC LVecBase3 * NodePath_C_get_shear_p_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC PN_stdfloat NodePath_C_get_shxy_f_p(NodePath const *param0);
EXPORT_FUNC PN_stdfloat NodePath_C_get_shxy_f_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC PN_stdfloat NodePath_C_get_shxz_f_p(NodePath const *param0);
EXPORT_FUNC PN_stdfloat NodePath_C_get_shxz_f_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC PN_stdfloat NodePath_C_get_shyz_f_p(NodePath const *param0);
EXPORT_FUNC PN_stdfloat NodePath_C_get_shyz_f_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC void NodePath_C_set_pos_hpr_v_ppp(NodePath *param0, LVecBase3 const *param1, LVecBase3 const *param2);
EXPORT_FUNC void NodePath_C_set_pos_hpr_v_pppp(NodePath *param0, NodePath const *param1, LVecBase3 const *param2, LVecBase3 const *param3);
EXPORT_FUNC void NodePath_C_set_pos_hpr_v_ppffffff(NodePath *param0, NodePath const *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5, PN_stdfloat param6, PN_stdfloat param7);
EXPORT_FUNC void NodePath_C_set_pos_hpr_v_pffffff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5, PN_stdfloat param6);
EXPORT_FUNC void NodePath_C_set_pos_quat_v_ppp(NodePath *param0, LVecBase3 const *param1, LQuaternion const *param2);
EXPORT_FUNC void NodePath_C_set_pos_quat_v_pppp(NodePath *param0, NodePath const *param1, LVecBase3 const *param2, LQuaternion const *param3);
EXPORT_FUNC void NodePath_C_set_hpr_scale_v_ppp(NodePath *param0, LVecBase3 const *param1, LVecBase3 const *param2);
EXPORT_FUNC void NodePath_C_set_hpr_scale_v_pppp(NodePath *param0, NodePath const *param1, LVecBase3 const *param2, LVecBase3 const *param3);
EXPORT_FUNC void NodePath_C_set_hpr_scale_v_ppffffff(NodePath *param0, NodePath const *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5, PN_stdfloat param6, PN_stdfloat param7);
EXPORT_FUNC void NodePath_C_set_hpr_scale_v_pffffff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5, PN_stdfloat param6);
EXPORT_FUNC void NodePath_C_set_quat_scale_v_ppp(NodePath *param0, LQuaternion const *param1, LVecBase3 const *param2);
EXPORT_FUNC void NodePath_C_set_quat_scale_v_pppp(NodePath *param0, NodePath const *param1, LQuaternion const *param2, LVecBase3 const *param3);
EXPORT_FUNC void NodePath_C_set_pos_hpr_scale_v_pppp(NodePath *param0, LVecBase3 const *param1, LVecBase3 const *param2, LVecBase3 const *param3);
EXPORT_FUNC void NodePath_C_set_pos_hpr_scale_v_ppppp(NodePath *param0, NodePath const *param1, LVecBase3 const *param2, LVecBase3 const *param3, LVecBase3 const *param4);
EXPORT_FUNC void NodePath_C_set_pos_hpr_scale_v_ppfffffffff(NodePath *param0, NodePath const *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5, PN_stdfloat param6, PN_stdfloat param7, PN_stdfloat param8, PN_stdfloat param9, PN_stdfloat param10);
EXPORT_FUNC void NodePath_C_set_pos_hpr_scale_v_pfffffffff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5, PN_stdfloat param6, PN_stdfloat param7, PN_stdfloat param8, PN_stdfloat param9);
EXPORT_FUNC void NodePath_C_set_pos_quat_scale_v_pppp(NodePath *param0, LVecBase3 const *param1, LQuaternion const *param2, LVecBase3 const *param3);
EXPORT_FUNC void NodePath_C_set_pos_quat_scale_v_ppppp(NodePath *param0, NodePath const *param1, LVecBase3 const *param2, LQuaternion const *param3, LVecBase3 const *param4);
EXPORT_FUNC void NodePath_C_set_pos_hpr_scale_shear_v_ppppp(NodePath *param0, LVecBase3 const *param1, LVecBase3 const *param2, LVecBase3 const *param3, LVecBase3 const *param4);
EXPORT_FUNC void NodePath_C_set_pos_hpr_scale_shear_v_pppppp(NodePath *param0, NodePath const *param1, LVecBase3 const *param2, LVecBase3 const *param3, LVecBase3 const *param4, LVecBase3 const *param5);
EXPORT_FUNC void NodePath_C_set_pos_quat_scale_shear_v_ppppp(NodePath *param0, LVecBase3 const *param1, LQuaternion const *param2, LVecBase3 const *param3, LVecBase3 const *param4);
EXPORT_FUNC void NodePath_C_set_pos_quat_scale_shear_v_pppppp(NodePath *param0, NodePath const *param1, LVecBase3 const *param2, LQuaternion const *param3, LVecBase3 const *param4, LVecBase3 const *param5);
EXPORT_FUNC void NodePath_C_set_mat_v_pp(NodePath *param0, LMatrix4 const *param1);
EXPORT_FUNC void NodePath_C_set_mat_v_ppp(NodePath *param0, NodePath const *param1, LMatrix4 const *param2);
EXPORT_FUNC void NodePath_C_clear_mat_v_p(NodePath *param0);
EXPORT_FUNC bool NodePath_C_has_mat_B_p(NodePath const *param0);
EXPORT_FUNC LMatrix4 const * NodePath_C_get_mat_p_p(NodePath const *param0);
EXPORT_FUNC LMatrix4 * NodePath_C_get_mat_p_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC void NodePath_C_look_at_v_ppp(NodePath *param0, LPoint3 const *param1, LVector3 const *param2);
EXPORT_FUNC void NodePath_C_look_at_v_pp(NodePath *param0, LPoint3 const *param1);
EXPORT_FUNC void NodePath_C_look_at_v_pppp(NodePath *param0, NodePath const *param1, LPoint3 const *param2, LVector3 const *param3);
EXPORT_FUNC void NodePath_C_look_at_v_ppp_1_v_ppp(NodePath *param0, NodePath const *param1, LPoint3 const *param2);
EXPORT_FUNC void NodePath_C_look_at_v_pp_1_v_pp(NodePath *param0, NodePath const *param1);
EXPORT_FUNC void NodePath_C_look_at_v_ppfff(NodePath *param0, NodePath const *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC void NodePath_C_look_at_v_pfff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3);
EXPORT_FUNC void NodePath_C_heads_up_v_ppp(NodePath *param0, LPoint3 const *param1, LVector3 const *param2);
EXPORT_FUNC void NodePath_C_heads_up_v_pp(NodePath *param0, LPoint3 const *param1);
EXPORT_FUNC void NodePath_C_heads_up_v_pppp(NodePath *param0, NodePath const *param1, LPoint3 const *param2, LVector3 const *param3);
EXPORT_FUNC void NodePath_C_heads_up_v_ppp_1_v_ppp(NodePath *param0, NodePath const *param1, LPoint3 const *param2);
EXPORT_FUNC void NodePath_C_heads_up_v_pp_1_v_pp(NodePath *param0, NodePath const *param1);
EXPORT_FUNC void NodePath_C_heads_up_v_ppfff(NodePath *param0, NodePath const *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC void NodePath_C_heads_up_v_pfff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3);
EXPORT_FUNC LPoint3 * NodePath_C_get_relative_point_p_ppp(NodePath const *param0, NodePath const *param1, LVecBase3 const *param2);
EXPORT_FUNC LVector3 * NodePath_C_get_relative_vector_p_ppp(NodePath const *param0, NodePath const *param1, LVecBase3 const *param2);
EXPORT_FUNC PN_stdfloat NodePath_C_get_distance_f_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC void NodePath_C_set_color_v_ppi(NodePath *param0, LColor const *param1, int param2);
EXPORT_FUNC void NodePath_C_set_color_v_pp(NodePath *param0, LColor const *param1);
EXPORT_FUNC void NodePath_C_set_color_v_pffffi(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, int param5);
EXPORT_FUNC void NodePath_C_set_color_v_pffff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC void NodePath_C_set_color_v_pfff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3);
EXPORT_FUNC void NodePath_C_set_color_off_v_pi(NodePath *param0, int param1);
EXPORT_FUNC void NodePath_C_set_color_off_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_clear_color_v_p(NodePath *param0);
EXPORT_FUNC bool NodePath_C_has_color_B_p(NodePath const *param0);
EXPORT_FUNC LColor * NodePath_C_get_color_p_p(NodePath const *param0);
EXPORT_FUNC bool NodePath_C_has_color_scale_B_p(NodePath const *param0);
EXPORT_FUNC void NodePath_C_clear_color_scale_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_set_color_scale_v_ppi(NodePath *param0, LVecBase4 const *param1, int param2);
EXPORT_FUNC void NodePath_C_set_color_scale_v_pp(NodePath *param0, LVecBase4 const *param1);
EXPORT_FUNC void NodePath_C_set_color_scale_v_pffffi(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, int param5);
EXPORT_FUNC void NodePath_C_set_color_scale_v_pffff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC void NodePath_C_compose_color_scale_v_ppi(NodePath *param0, LVecBase4 const *param1, int param2);
EXPORT_FUNC void NodePath_C_compose_color_scale_v_pp(NodePath *param0, LVecBase4 const *param1);
EXPORT_FUNC void NodePath_C_compose_color_scale_v_pffffi(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, int param5);
EXPORT_FUNC void NodePath_C_compose_color_scale_v_pffff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC void NodePath_C_set_color_scale_off_v_pi(NodePath *param0, int param1);
EXPORT_FUNC void NodePath_C_set_color_scale_off_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_set_alpha_scale_v_pfi(NodePath *param0, PN_stdfloat param1, int param2);
EXPORT_FUNC void NodePath_C_set_alpha_scale_v_pf(NodePath *param0, PN_stdfloat param1);
EXPORT_FUNC void NodePath_C_set_all_color_scale_v_pfi(NodePath *param0, PN_stdfloat param1, int param2);
EXPORT_FUNC void NodePath_C_set_all_color_scale_v_pf(NodePath *param0, PN_stdfloat param1);
EXPORT_FUNC void NodePath_C_set_sr_v_pf(NodePath *param0, PN_stdfloat param1);
EXPORT_FUNC void NodePath_C_set_sg_v_pf(NodePath *param0, PN_stdfloat param1);
EXPORT_FUNC void NodePath_C_set_sb_v_pf(NodePath *param0, PN_stdfloat param1);
EXPORT_FUNC void NodePath_C_set_sa_v_pf(NodePath *param0, PN_stdfloat param1);
EXPORT_FUNC LVecBase4 const * NodePath_C_get_color_scale_p_p(NodePath const *param0);
EXPORT_FUNC PN_stdfloat NodePath_C_get_sr_f_p(NodePath const *param0);
EXPORT_FUNC PN_stdfloat NodePath_C_get_sg_f_p(NodePath const *param0);
EXPORT_FUNC PN_stdfloat NodePath_C_get_sb_f_p(NodePath const *param0);
EXPORT_FUNC PN_stdfloat NodePath_C_get_sa_f_p(NodePath const *param0);
EXPORT_FUNC void NodePath_C_set_light_v_ppi(NodePath *param0, NodePath const *param1, int param2);
EXPORT_FUNC void NodePath_C_set_light_v_pp(NodePath *param0, NodePath const *param1);
EXPORT_FUNC void NodePath_C_set_light_off_v_ppi(NodePath *param0, NodePath const *param1, int param2);
EXPORT_FUNC void NodePath_C_set_light_off_v_pp(NodePath *param0, NodePath const *param1);
EXPORT_FUNC void NodePath_C_set_light_off_v_pi(NodePath *param0, int param1);
EXPORT_FUNC void NodePath_C_set_light_off_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_clear_light_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_clear_light_v_pp(NodePath *param0, NodePath const *param1);
EXPORT_FUNC bool NodePath_C_has_light_B_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC bool NodePath_C_has_light_off_B_p(NodePath const *param0);
EXPORT_FUNC bool NodePath_C_has_light_off_B_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC void NodePath_C_set_clip_plane_v_ppi(NodePath *param0, NodePath const *param1, int param2);
EXPORT_FUNC void NodePath_C_set_clip_plane_v_pp(NodePath *param0, NodePath const *param1);
EXPORT_FUNC void NodePath_C_set_clip_plane_off_v_ppi(NodePath *param0, NodePath const *param1, int param2);
EXPORT_FUNC void NodePath_C_set_clip_plane_off_v_pp(NodePath *param0, NodePath const *param1);
EXPORT_FUNC void NodePath_C_set_clip_plane_off_v_pi(NodePath *param0, int param1);
EXPORT_FUNC void NodePath_C_set_clip_plane_off_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_clear_clip_plane_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_clear_clip_plane_v_pp(NodePath *param0, NodePath const *param1);
EXPORT_FUNC bool NodePath_C_has_clip_plane_B_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC bool NodePath_C_has_clip_plane_off_B_p(NodePath const *param0);
EXPORT_FUNC bool NodePath_C_has_clip_plane_off_B_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC void NodePath_C_set_scissor_v_ppp(NodePath *param0, LPoint3 const *param1, LPoint3 const *param2);
EXPORT_FUNC void NodePath_C_set_scissor_v_ppppp(NodePath *param0, LPoint3 const *param1, LPoint3 const *param2, LPoint3 const *param3, LPoint3 const *param4);
EXPORT_FUNC void NodePath_C_set_scissor_v_pppp(NodePath *param0, NodePath const *param1, LPoint3 const *param2, LPoint3 const *param3);
EXPORT_FUNC void NodePath_C_set_scissor_v_pppppp(NodePath *param0, NodePath const *param1, LPoint3 const *param2, LPoint3 const *param3, LPoint3 const *param4, LPoint3 const *param5);
EXPORT_FUNC void NodePath_C_set_scissor_v_pffff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC void NodePath_C_clear_scissor_v_p(NodePath *param0);
EXPORT_FUNC bool NodePath_C_has_scissor_B_p(NodePath const *param0);
EXPORT_FUNC void NodePath_C_set_occluder_v_pp(NodePath *param0, NodePath const *param1);
EXPORT_FUNC void NodePath_C_clear_occluder_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_clear_occluder_v_pp(NodePath *param0, NodePath const *param1);
EXPORT_FUNC bool NodePath_C_has_occluder_B_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC void NodePath_C_set_bin_v_psii(NodePath *param0, char const *param1, int param2, int param3);
EXPORT_FUNC void NodePath_C_set_bin_v_psi(NodePath *param0, char const *param1, int param2);
EXPORT_FUNC void NodePath_C_clear_bin_v_p(NodePath *param0);
EXPORT_FUNC bool NodePath_C_has_bin_B_p(NodePath const *param0);
EXPORT_FUNC char const * NodePath_C_get_bin_name_s_p(NodePath const *param0);
EXPORT_FUNC int NodePath_C_get_bin_draw_order_i_p(NodePath const *param0);
EXPORT_FUNC void NodePath_C_set_texture_v_pppi(NodePath *param0, Texture *param1, SamplerState const *param2, int param3);
EXPORT_FUNC void NodePath_C_set_texture_v_ppp(NodePath *param0, Texture *param1, SamplerState const *param2);
EXPORT_FUNC void NodePath_C_set_texture_v_ppi(NodePath *param0, Texture *param1, int param2);
EXPORT_FUNC void NodePath_C_set_texture_v_pp(NodePath *param0, Texture *param1);
EXPORT_FUNC void NodePath_C_set_texture_v_ppppi(NodePath *param0, TextureStage *param1, Texture *param2, SamplerState const *param3, int param4);
EXPORT_FUNC void NodePath_C_set_texture_v_pppp(NodePath *param0, TextureStage *param1, Texture *param2, SamplerState const *param3);
EXPORT_FUNC void NodePath_C_set_texture_v_pppi_1_v_pppi(NodePath *param0, TextureStage *param1, Texture *param2, int param3);
EXPORT_FUNC void NodePath_C_set_texture_v_ppp_1_v_ppp(NodePath *param0, TextureStage *param1, Texture *param2);
EXPORT_FUNC void NodePath_C_set_texture_off_v_ppi(NodePath *param0, TextureStage *param1, int param2);
EXPORT_FUNC void NodePath_C_set_texture_off_v_pp(NodePath *param0, TextureStage *param1);
EXPORT_FUNC void NodePath_C_set_texture_off_v_pi(NodePath *param0, int param1);
EXPORT_FUNC void NodePath_C_set_texture_off_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_clear_texture_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_clear_texture_v_pp(NodePath *param0, TextureStage *param1);
EXPORT_FUNC bool NodePath_C_has_texture_B_p(NodePath const *param0);
EXPORT_FUNC bool NodePath_C_has_texture_B_pp(NodePath const *param0, TextureStage *param1);
EXPORT_FUNC bool NodePath_C_has_texture_off_B_p(NodePath const *param0);
EXPORT_FUNC bool NodePath_C_has_texture_off_B_pp(NodePath const *param0, TextureStage *param1);
EXPORT_FUNC Texture * NodePath_C_get_texture_p_p(NodePath const *param0);
EXPORT_FUNC Texture * NodePath_C_get_texture_p_pp(NodePath const *param0, TextureStage *param1);
EXPORT_FUNC void NodePath_C_replace_texture_v_ppp(NodePath *param0, Texture *param1, Texture *param2);
EXPORT_FUNC SamplerState const * NodePath_C_get_texture_sampler_p_p(NodePath const *param0);
EXPORT_FUNC SamplerState const * NodePath_C_get_texture_sampler_p_pp(NodePath const *param0, TextureStage *param1);
EXPORT_FUNC void NodePath_C_set_shader_v_ppi(NodePath *param0, Shader const *param1, int param2);
EXPORT_FUNC void NodePath_C_set_shader_v_pp(NodePath *param0, Shader const *param1);
EXPORT_FUNC void NodePath_C_set_shader_off_v_pi(NodePath *param0, int param1);
EXPORT_FUNC void NodePath_C_set_shader_off_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_set_shader_auto_v_ppi(NodePath *param0, BitMask32 *param1, int param2);
EXPORT_FUNC void NodePath_C_set_shader_auto_v_pp(NodePath *param0, BitMask32 *param1);
EXPORT_FUNC void NodePath_C_set_shader_auto_v_pi(NodePath *param0, int param1);
EXPORT_FUNC void NodePath_C_set_shader_auto_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_clear_shader_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_set_shader_input_v_pspi(NodePath *param0, CPT_InternalName *param1, LMatrix3 const *param2, int param3);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psp(NodePath *param0, CPT_InternalName *param1, LMatrix3 const *param2);
EXPORT_FUNC void NodePath_C_set_shader_input_v_pspi_1_v_pspi(NodePath *param0, CPT_InternalName *param1, LMatrix4 const *param2, int param3);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psp_1_v_psp(NodePath *param0, CPT_InternalName *param1, LMatrix4 const *param2);
EXPORT_FUNC void NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi(NodePath *param0, CPT_InternalName *param1, LVecBase2 const *param2, int param3);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp(NodePath *param0, CPT_InternalName *param1, LVecBase2 const *param2);
EXPORT_FUNC void NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi(NodePath *param0, CPT_InternalName *param1, LVecBase2i const *param2, int param3);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp(NodePath *param0, CPT_InternalName *param1, LVecBase2i const *param2);
EXPORT_FUNC void NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi(NodePath *param0, CPT_InternalName *param1, LVecBase3 const *param2, int param3);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp(NodePath *param0, CPT_InternalName *param1, LVecBase3 const *param2);
EXPORT_FUNC void NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi(NodePath *param0, CPT_InternalName *param1, LVecBase3i const *param2, int param3);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp(NodePath *param0, CPT_InternalName *param1, LVecBase3i const *param2);
EXPORT_FUNC void NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi(NodePath *param0, CPT_InternalName *param1, LVecBase4 const *param2, int param3);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp(NodePath *param0, CPT_InternalName *param1, LVecBase4 const *param2);
EXPORT_FUNC void NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi_7_v_pspi(NodePath *param0, CPT_InternalName *param1, LVecBase4i const *param2, int param3);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp_7_v_psp(NodePath *param0, CPT_InternalName *param1, LVecBase4i const *param2);
EXPORT_FUNC void NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi_7_v_pspi_8_v_pspi(NodePath *param0, CPT_InternalName *param1, NodePath const *param2, int param3);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp_7_v_psp_8_v_psp(NodePath *param0, CPT_InternalName *param1, NodePath const *param2);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psffffi(NodePath *param0, CPT_InternalName *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5, int param6);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psffff(NodePath *param0, CPT_InternalName *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psfff(NodePath *param0, CPT_InternalName *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psff(NodePath *param0, CPT_InternalName *param1, PN_stdfloat param2, PN_stdfloat param3);
EXPORT_FUNC void NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi_7_v_pspi_8_v_pspi_9_v_pspi(NodePath *param0, CPT_InternalName *param1, PTA_LMatrix3 const *param2, int param3);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp_7_v_psp_8_v_psp_9_v_psp(NodePath *param0, CPT_InternalName *param1, PTA_LMatrix3 const *param2);
EXPORT_FUNC void NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi_7_v_pspi_8_v_pspi_9_v_pspi_10_v_pspi(NodePath *param0, CPT_InternalName *param1, PTA_LMatrix4 const *param2, int param3);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp_7_v_psp_8_v_psp_9_v_psp_10_v_psp(NodePath *param0, CPT_InternalName *param1, PTA_LMatrix4 const *param2);
EXPORT_FUNC void NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi_7_v_pspi_8_v_pspi_9_v_pspi_10_v_pspi_11_v_pspi(NodePath *param0, CPT_InternalName *param1, PTA_LVecBase2 const *param2, int param3);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp_7_v_psp_8_v_psp_9_v_psp_10_v_psp_11_v_psp(NodePath *param0, CPT_InternalName *param1, PTA_LVecBase2 const *param2);
EXPORT_FUNC void NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi_7_v_pspi_8_v_pspi_9_v_pspi_10_v_pspi_11_v_pspi_12_v_pspi(NodePath *param0, CPT_InternalName *param1, PTA_LVecBase2i const *param2, int param3);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp_7_v_psp_8_v_psp_9_v_psp_10_v_psp_11_v_psp_12_v_psp(NodePath *param0, CPT_InternalName *param1, PTA_LVecBase2i const *param2);
EXPORT_FUNC void NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi_7_v_pspi_8_v_pspi_9_v_pspi_10_v_pspi_11_v_pspi_12_v_pspi_13_v_pspi(NodePath *param0, CPT_InternalName *param1, PTA_LVecBase3 const *param2, int param3);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp_7_v_psp_8_v_psp_9_v_psp_10_v_psp_11_v_psp_12_v_psp_13_v_psp(NodePath *param0, CPT_InternalName *param1, PTA_LVecBase3 const *param2);
EXPORT_FUNC void NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi_7_v_pspi_8_v_pspi_9_v_pspi_10_v_pspi_11_v_pspi_12_v_pspi_13_v_pspi_14_v_pspi(NodePath *param0, CPT_InternalName *param1, PTA_LVecBase3i const *param2, int param3);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp_7_v_psp_8_v_psp_9_v_psp_10_v_psp_11_v_psp_12_v_psp_13_v_psp_14_v_psp(NodePath *param0, CPT_InternalName *param1, PTA_LVecBase3i const *param2);
EXPORT_FUNC void NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi_7_v_pspi_8_v_pspi_9_v_pspi_10_v_pspi_11_v_pspi_12_v_pspi_13_v_pspi_14_v_pspi_15_v_pspi(NodePath *param0, CPT_InternalName *param1, PTA_LVecBase4 const *param2, int param3);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp_7_v_psp_8_v_psp_9_v_psp_10_v_psp_11_v_psp_12_v_psp_13_v_psp_14_v_psp_15_v_psp(NodePath *param0, CPT_InternalName *param1, PTA_LVecBase4 const *param2);
EXPORT_FUNC void NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi_7_v_pspi_8_v_pspi_9_v_pspi_10_v_pspi_11_v_pspi_12_v_pspi_13_v_pspi_14_v_pspi_15_v_pspi_16_v_pspi(NodePath *param0, CPT_InternalName *param1, PTA_LVecBase4i const *param2, int param3);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp_7_v_psp_8_v_psp_9_v_psp_10_v_psp_11_v_psp_12_v_psp_13_v_psp_14_v_psp_15_v_psp_16_v_psp(NodePath *param0, CPT_InternalName *param1, PTA_LVecBase4i const *param2);
EXPORT_FUNC void NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi_7_v_pspi_8_v_pspi_9_v_pspi_10_v_pspi_11_v_pspi_12_v_pspi_13_v_pspi_14_v_pspi_15_v_pspi_16_v_pspi_17_v_pspi(NodePath *param0, CPT_InternalName *param1, PTA_double const *param2, int param3);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp_7_v_psp_8_v_psp_9_v_psp_10_v_psp_11_v_psp_12_v_psp_13_v_psp_14_v_psp_15_v_psp_16_v_psp_17_v_psp(NodePath *param0, CPT_InternalName *param1, PTA_double const *param2);
EXPORT_FUNC void NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi_7_v_pspi_8_v_pspi_9_v_pspi_10_v_pspi_11_v_pspi_12_v_pspi_13_v_pspi_14_v_pspi_15_v_pspi_16_v_pspi_17_v_pspi_18_v_pspi(NodePath *param0, CPT_InternalName *param1, PTA_float const *param2, int param3);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp_7_v_psp_8_v_psp_9_v_psp_10_v_psp_11_v_psp_12_v_psp_13_v_psp_14_v_psp_15_v_psp_16_v_psp_17_v_psp_18_v_psp(NodePath *param0, CPT_InternalName *param1, PTA_float const *param2);
EXPORT_FUNC void NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi_7_v_pspi_8_v_pspi_9_v_pspi_10_v_pspi_11_v_pspi_12_v_pspi_13_v_pspi_14_v_pspi_15_v_pspi_16_v_pspi_17_v_pspi_18_v_pspi_19_v_pspi(NodePath *param0, CPT_InternalName *param1, PTA_int const *param2, int param3);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp_7_v_psp_8_v_psp_9_v_psp_10_v_psp_11_v_psp_12_v_psp_13_v_psp_14_v_psp_15_v_psp_16_v_psp_17_v_psp_18_v_psp_19_v_psp(NodePath *param0, CPT_InternalName *param1, PTA_int const *param2);
EXPORT_FUNC void NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi_7_v_pspi_8_v_pspi_9_v_pspi_10_v_pspi_11_v_pspi_12_v_pspi_13_v_pspi_14_v_pspi_15_v_pspi_16_v_pspi_17_v_pspi_18_v_pspi_19_v_pspi_20_v_pspi(NodePath *param0, CPT_InternalName *param1, ShaderBuffer *param2, int param3);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp_7_v_psp_8_v_psp_9_v_psp_10_v_psp_11_v_psp_12_v_psp_13_v_psp_14_v_psp_15_v_psp_16_v_psp_17_v_psp_18_v_psp_19_v_psp_20_v_psp(NodePath *param0, CPT_InternalName *param1, ShaderBuffer *param2);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psppi(NodePath *param0, CPT_InternalName *param1, Texture *param2, SamplerState const *param3, int param4);
EXPORT_FUNC void NodePath_C_set_shader_input_v_pspp(NodePath *param0, CPT_InternalName *param1, Texture *param2, SamplerState const *param3);
EXPORT_FUNC void NodePath_C_set_shader_input_v_pspBBiii(NodePath *param0, CPT_InternalName *param1, Texture *param2, bool param3, bool param4, int param5, int param6, int param7);
EXPORT_FUNC void NodePath_C_set_shader_input_v_pspBBii(NodePath *param0, CPT_InternalName *param1, Texture *param2, bool param3, bool param4, int param5, int param6);
EXPORT_FUNC void NodePath_C_set_shader_input_v_pspBBi(NodePath *param0, CPT_InternalName *param1, Texture *param2, bool param3, bool param4, int param5);
EXPORT_FUNC void NodePath_C_set_shader_input_v_pspBB(NodePath *param0, CPT_InternalName *param1, Texture *param2, bool param3, bool param4);
EXPORT_FUNC void NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi_7_v_pspi_8_v_pspi_9_v_pspi_10_v_pspi_11_v_pspi_12_v_pspi_13_v_pspi_14_v_pspi_15_v_pspi_16_v_pspi_17_v_pspi_18_v_pspi_19_v_pspi_20_v_pspi_21_v_pspi(NodePath *param0, CPT_InternalName *param1, Texture *param2, int param3);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp_7_v_psp_8_v_psp_9_v_psp_10_v_psp_11_v_psp_12_v_psp_13_v_psp_14_v_psp_15_v_psp_16_v_psp_17_v_psp_18_v_psp_19_v_psp_20_v_psp_21_v_psp(NodePath *param0, CPT_InternalName *param1, Texture *param2);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psiiiii(NodePath *param0, CPT_InternalName *param1, int param2, int param3, int param4, int param5, int param6);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psiiii(NodePath *param0, CPT_InternalName *param1, int param2, int param3, int param4, int param5);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psiii(NodePath *param0, CPT_InternalName *param1, int param2, int param3, int param4);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psii(NodePath *param0, CPT_InternalName *param1, int param2, int param3);
EXPORT_FUNC void NodePath_C_set_shader_input_v_pp(NodePath *param0, ShaderInput *param1);
EXPORT_FUNC void NodePath_C_set_shader_input_v_pp_1_v_pp(NodePath *param0, ShaderInput const *param1);
EXPORT_FUNC void NodePath_C_clear_shader_input_v_ps(NodePath *param0, CPT_InternalName *param1);
EXPORT_FUNC void NodePath_C_set_instance_count_v_pi(NodePath *param0, int param1);
EXPORT_FUNC Shader const * NodePath_C_get_shader_p_p(NodePath const *param0);
EXPORT_FUNC ShaderInput * NodePath_C_get_shader_input_p_ps(NodePath const *param0, CPT_InternalName *param1);
EXPORT_FUNC int NodePath_C_get_instance_count_i_p(NodePath const *param0);
EXPORT_FUNC void NodePath_C_set_tex_transform_v_pppp(NodePath *param0, NodePath const *param1, TextureStage *param2, TransformState const *param3);
EXPORT_FUNC void NodePath_C_set_tex_transform_v_ppp(NodePath *param0, TextureStage *param1, TransformState const *param2);
EXPORT_FUNC void NodePath_C_clear_tex_transform_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_clear_tex_transform_v_pp(NodePath *param0, TextureStage *param1);
EXPORT_FUNC bool NodePath_C_has_tex_transform_B_pp(NodePath const *param0, TextureStage *param1);
EXPORT_FUNC ConstPointerTo< TransformState > * NodePath_C_get_tex_transform_p_ppp(NodePath const *param0, NodePath const *param1, TextureStage *param2);
EXPORT_FUNC ConstPointerTo< TransformState > * NodePath_C_get_tex_transform_p_pp(NodePath const *param0, TextureStage *param1);
EXPORT_FUNC void NodePath_C_set_tex_offset_v_pppp(NodePath *param0, NodePath const *param1, TextureStage *param2, LVecBase2 const *param3);
EXPORT_FUNC void NodePath_C_set_tex_offset_v_pppff(NodePath *param0, NodePath const *param1, TextureStage *param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC void NodePath_C_set_tex_offset_v_ppp(NodePath *param0, TextureStage *param1, LVecBase2 const *param2);
EXPORT_FUNC void NodePath_C_set_tex_offset_v_ppff(NodePath *param0, TextureStage *param1, PN_stdfloat param2, PN_stdfloat param3);
EXPORT_FUNC void NodePath_C_set_tex_rotate_v_pppf(NodePath *param0, NodePath const *param1, TextureStage *param2, PN_stdfloat param3);
EXPORT_FUNC void NodePath_C_set_tex_rotate_v_ppf(NodePath *param0, TextureStage *param1, PN_stdfloat param2);
EXPORT_FUNC void NodePath_C_set_tex_scale_v_pppp(NodePath *param0, NodePath const *param1, TextureStage *param2, LVecBase2 const *param3);
EXPORT_FUNC void NodePath_C_set_tex_scale_v_pppp_1_v_pppp(NodePath *param0, NodePath const *param1, TextureStage *param2, LVecBase3 const *param3);
EXPORT_FUNC void NodePath_C_set_tex_scale_v_pppf(NodePath *param0, NodePath const *param1, TextureStage *param2, PN_stdfloat param3);
EXPORT_FUNC void NodePath_C_set_tex_scale_v_pppff(NodePath *param0, NodePath const *param1, TextureStage *param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC void NodePath_C_set_tex_scale_v_pppfff(NodePath *param0, NodePath const *param1, TextureStage *param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5);
EXPORT_FUNC void NodePath_C_set_tex_scale_v_ppp(NodePath *param0, TextureStage *param1, LVecBase2 const *param2);
EXPORT_FUNC void NodePath_C_set_tex_scale_v_ppp_1_v_ppp(NodePath *param0, TextureStage *param1, LVecBase3 const *param2);
EXPORT_FUNC void NodePath_C_set_tex_scale_v_ppf(NodePath *param0, TextureStage *param1, PN_stdfloat param2);
EXPORT_FUNC void NodePath_C_set_tex_scale_v_ppff(NodePath *param0, TextureStage *param1, PN_stdfloat param2, PN_stdfloat param3);
EXPORT_FUNC void NodePath_C_set_tex_scale_v_ppfff(NodePath *param0, TextureStage *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC LVecBase2 * NodePath_C_get_tex_offset_p_ppp(NodePath const *param0, NodePath const *param1, TextureStage *param2);
EXPORT_FUNC LVecBase2 * NodePath_C_get_tex_offset_p_pp(NodePath const *param0, TextureStage *param1);
EXPORT_FUNC PN_stdfloat NodePath_C_get_tex_rotate_f_ppp(NodePath const *param0, NodePath const *param1, TextureStage *param2);
EXPORT_FUNC PN_stdfloat NodePath_C_get_tex_rotate_f_pp(NodePath const *param0, TextureStage *param1);
EXPORT_FUNC LVecBase2 * NodePath_C_get_tex_scale_p_ppp(NodePath const *param0, NodePath const *param1, TextureStage *param2);
EXPORT_FUNC LVecBase2 * NodePath_C_get_tex_scale_p_pp(NodePath const *param0, TextureStage *param1);
EXPORT_FUNC void NodePath_C_set_tex_pos_v_pppp(NodePath *param0, NodePath const *param1, TextureStage *param2, LVecBase3 const *param3);
EXPORT_FUNC void NodePath_C_set_tex_pos_v_pppfff(NodePath *param0, NodePath const *param1, TextureStage *param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5);
EXPORT_FUNC void NodePath_C_set_tex_pos_v_ppp(NodePath *param0, TextureStage *param1, LVecBase3 const *param2);
EXPORT_FUNC void NodePath_C_set_tex_pos_v_ppfff(NodePath *param0, TextureStage *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC void NodePath_C_set_tex_hpr_v_pppp(NodePath *param0, NodePath const *param1, TextureStage *param2, LVecBase3 const *param3);
EXPORT_FUNC void NodePath_C_set_tex_hpr_v_pppfff(NodePath *param0, NodePath const *param1, TextureStage *param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5);
EXPORT_FUNC void NodePath_C_set_tex_hpr_v_ppp(NodePath *param0, TextureStage *param1, LVecBase3 const *param2);
EXPORT_FUNC void NodePath_C_set_tex_hpr_v_ppfff(NodePath *param0, TextureStage *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC LVecBase3 * NodePath_C_get_tex_pos_p_ppp(NodePath const *param0, NodePath const *param1, TextureStage *param2);
EXPORT_FUNC LVecBase3 * NodePath_C_get_tex_pos_p_pp(NodePath const *param0, TextureStage *param1);
EXPORT_FUNC LVecBase3 * NodePath_C_get_tex_hpr_p_ppp(NodePath const *param0, NodePath const *param1, TextureStage *param2);
EXPORT_FUNC LVecBase3 * NodePath_C_get_tex_hpr_p_pp(NodePath const *param0, TextureStage *param1);
EXPORT_FUNC LVecBase3 * NodePath_C_get_tex_scale_3d_p_ppp(NodePath const *param0, NodePath const *param1, TextureStage *param2);
EXPORT_FUNC LVecBase3 * NodePath_C_get_tex_scale_3d_p_pp(NodePath const *param0, TextureStage *param1);
EXPORT_FUNC void NodePath_C_set_tex_gen_v_ppppi(NodePath *param0, TextureStage *param1, RenderAttrib::TexGenMode param2, LTexCoord3 const *param3, int param4);
EXPORT_FUNC void NodePath_C_set_tex_gen_v_pppp(NodePath *param0, TextureStage *param1, RenderAttrib::TexGenMode param2, LTexCoord3 const *param3);
EXPORT_FUNC void NodePath_C_set_tex_gen_v_pppi(NodePath *param0, TextureStage *param1, RenderAttrib::TexGenMode param2, int param3);
EXPORT_FUNC void NodePath_C_set_tex_gen_v_ppp(NodePath *param0, TextureStage *param1, RenderAttrib::TexGenMode param2);
EXPORT_FUNC void NodePath_C_clear_tex_gen_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_clear_tex_gen_v_pp(NodePath *param0, TextureStage *param1);
EXPORT_FUNC bool NodePath_C_has_tex_gen_B_pp(NodePath const *param0, TextureStage *param1);
EXPORT_FUNC RenderAttrib::TexGenMode NodePath_C_get_tex_gen_p_pp(NodePath const *param0, TextureStage *param1);
EXPORT_FUNC void NodePath_C_set_tex_projector_v_ppppi(NodePath *param0, TextureStage *param1, NodePath const *param2, NodePath const *param3, int param4);
EXPORT_FUNC void NodePath_C_set_tex_projector_v_pppp(NodePath *param0, TextureStage *param1, NodePath const *param2, NodePath const *param3);
EXPORT_FUNC void NodePath_C_clear_tex_projector_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_clear_tex_projector_v_pp(NodePath *param0, TextureStage *param1);
EXPORT_FUNC bool NodePath_C_has_tex_projector_B_pp(NodePath const *param0, TextureStage *param1);
EXPORT_FUNC NodePath * NodePath_C_get_tex_projector_from_p_pp(NodePath const *param0, TextureStage *param1);
EXPORT_FUNC NodePath * NodePath_C_get_tex_projector_to_p_pp(NodePath const *param0, TextureStage *param1);
EXPORT_FUNC void NodePath_C_project_texture_v_pppp(NodePath *param0, TextureStage *param1, Texture *param2, NodePath const *param3);
EXPORT_FUNC void NodePath_C_clear_project_texture_v_pp(NodePath *param0, TextureStage *param1);
EXPORT_FUNC bool NodePath_C_has_texcoord_B_ps(NodePath const *param0, char const *param1);
EXPORT_FUNC bool NodePath_C_has_vertex_column_B_ps(NodePath const *param0, InternalName const *param1);
EXPORT_FUNC InternalNameCollection * NodePath_C_find_all_vertex_columns_p_p(NodePath const *param0);
EXPORT_FUNC InternalNameCollection * NodePath_C_find_all_vertex_columns_p_ps(NodePath const *param0, char const *param1);
EXPORT_FUNC InternalNameCollection * NodePath_C_find_all_texcoords_p_p(NodePath const *param0);
EXPORT_FUNC InternalNameCollection * NodePath_C_find_all_texcoords_p_ps(NodePath const *param0, char const *param1);
EXPORT_FUNC Texture * NodePath_C_find_texture_p_pp(NodePath const *param0, TextureStage *param1);
EXPORT_FUNC Texture * NodePath_C_find_texture_p_ps(NodePath const *param0, char const *param1);
EXPORT_FUNC TextureCollection * NodePath_C_find_all_textures_p_p(NodePath const *param0);
EXPORT_FUNC TextureCollection * NodePath_C_find_all_textures_p_pp(NodePath const *param0, TextureStage *param1);
EXPORT_FUNC TextureCollection * NodePath_C_find_all_textures_p_ps(NodePath const *param0, char const *param1);
EXPORT_FUNC TextureStage * NodePath_C_find_texture_stage_p_ps(NodePath const *param0, char const *param1);
EXPORT_FUNC TextureStageCollection * NodePath_C_find_all_texture_stages_p_p(NodePath const *param0);
EXPORT_FUNC TextureStageCollection * NodePath_C_find_all_texture_stages_p_ps(NodePath const *param0, char const *param1);
EXPORT_FUNC void NodePath_C_unify_texture_stages_v_pp(NodePath *param0, TextureStage *param1);
EXPORT_FUNC Material * NodePath_C_find_material_p_ps(NodePath const *param0, char const *param1);
EXPORT_FUNC MaterialCollection * NodePath_C_find_all_materials_p_p(NodePath const *param0);
EXPORT_FUNC MaterialCollection * NodePath_C_find_all_materials_p_ps(NodePath const *param0, char const *param1);
EXPORT_FUNC void NodePath_C_set_material_v_ppi(NodePath *param0, Material *param1, int param2);
EXPORT_FUNC void NodePath_C_set_material_v_pp(NodePath *param0, Material *param1);
EXPORT_FUNC void NodePath_C_set_material_off_v_pi(NodePath *param0, int param1);
EXPORT_FUNC void NodePath_C_set_material_off_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_clear_material_v_p(NodePath *param0);
EXPORT_FUNC bool NodePath_C_has_material_B_p(NodePath const *param0);
EXPORT_FUNC PointerTo< Material > * NodePath_C_get_material_p_p(NodePath const *param0);
EXPORT_FUNC void NodePath_C_replace_material_v_ppp(NodePath *param0, Material *param1, Material *param2);
EXPORT_FUNC void NodePath_C_set_fog_v_ppi(NodePath *param0, Fog *param1, int param2);
EXPORT_FUNC void NodePath_C_set_fog_v_pp(NodePath *param0, Fog *param1);
EXPORT_FUNC void NodePath_C_set_fog_off_v_pi(NodePath *param0, int param1);
EXPORT_FUNC void NodePath_C_set_fog_off_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_clear_fog_v_p(NodePath *param0);
EXPORT_FUNC bool NodePath_C_has_fog_B_p(NodePath const *param0);
EXPORT_FUNC bool NodePath_C_has_fog_off_B_p(NodePath const *param0);
EXPORT_FUNC Fog * NodePath_C_get_fog_p_p(NodePath const *param0);
EXPORT_FUNC void NodePath_C_set_render_mode_wireframe_v_pi(NodePath *param0, int param1);
EXPORT_FUNC void NodePath_C_set_render_mode_wireframe_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_set_render_mode_filled_v_pi(NodePath *param0, int param1);
EXPORT_FUNC void NodePath_C_set_render_mode_filled_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_set_render_mode_filled_wireframe_v_ppi(NodePath *param0, LColor const *param1, int param2);
EXPORT_FUNC void NodePath_C_set_render_mode_filled_wireframe_v_pp(NodePath *param0, LColor const *param1);
EXPORT_FUNC void NodePath_C_set_render_mode_thickness_v_pfi(NodePath *param0, PN_stdfloat param1, int param2);
EXPORT_FUNC void NodePath_C_set_render_mode_thickness_v_pf(NodePath *param0, PN_stdfloat param1);
EXPORT_FUNC void NodePath_C_set_render_mode_perspective_v_pBi(NodePath *param0, bool param1, int param2);
EXPORT_FUNC void NodePath_C_set_render_mode_perspective_v_pB(NodePath *param0, bool param1);
EXPORT_FUNC void NodePath_C_set_render_mode_v_ppfi(NodePath *param0, RenderModeAttrib::Mode param1, PN_stdfloat param2, int param3);
EXPORT_FUNC void NodePath_C_set_render_mode_v_ppf(NodePath *param0, RenderModeAttrib::Mode param1, PN_stdfloat param2);
EXPORT_FUNC void NodePath_C_clear_render_mode_v_p(NodePath *param0);
EXPORT_FUNC bool NodePath_C_has_render_mode_B_p(NodePath const *param0);
EXPORT_FUNC RenderModeAttrib::Mode NodePath_C_get_render_mode_p_p(NodePath const *param0);
EXPORT_FUNC PN_stdfloat NodePath_C_get_render_mode_thickness_f_p(NodePath const *param0);
EXPORT_FUNC bool NodePath_C_get_render_mode_perspective_B_p(NodePath const *param0);
EXPORT_FUNC void NodePath_C_set_two_sided_v_pBi(NodePath *param0, bool param1, int param2);
EXPORT_FUNC void NodePath_C_set_two_sided_v_pB(NodePath *param0, bool param1);
EXPORT_FUNC void NodePath_C_clear_two_sided_v_p(NodePath *param0);
EXPORT_FUNC bool NodePath_C_has_two_sided_B_p(NodePath const *param0);
EXPORT_FUNC bool NodePath_C_get_two_sided_B_p(NodePath const *param0);
EXPORT_FUNC void NodePath_C_set_depth_test_v_pBi(NodePath *param0, bool param1, int param2);
EXPORT_FUNC void NodePath_C_set_depth_test_v_pB(NodePath *param0, bool param1);
EXPORT_FUNC void NodePath_C_clear_depth_test_v_p(NodePath *param0);
EXPORT_FUNC bool NodePath_C_has_depth_test_B_p(NodePath const *param0);
EXPORT_FUNC bool NodePath_C_get_depth_test_B_p(NodePath const *param0);
EXPORT_FUNC void NodePath_C_set_depth_write_v_pBi(NodePath *param0, bool param1, int param2);
EXPORT_FUNC void NodePath_C_set_depth_write_v_pB(NodePath *param0, bool param1);
EXPORT_FUNC void NodePath_C_clear_depth_write_v_p(NodePath *param0);
EXPORT_FUNC bool NodePath_C_has_depth_write_B_p(NodePath const *param0);
EXPORT_FUNC bool NodePath_C_get_depth_write_B_p(NodePath const *param0);
EXPORT_FUNC void NodePath_C_set_depth_offset_v_pii(NodePath *param0, int param1, int param2);
EXPORT_FUNC void NodePath_C_set_depth_offset_v_pi(NodePath *param0, int param1);
EXPORT_FUNC void NodePath_C_clear_depth_offset_v_p(NodePath *param0);
EXPORT_FUNC bool NodePath_C_has_depth_offset_B_p(NodePath const *param0);
EXPORT_FUNC int NodePath_C_get_depth_offset_i_p(NodePath const *param0);
EXPORT_FUNC void NodePath_C_do_billboard_axis_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2);
EXPORT_FUNC void NodePath_C_do_billboard_point_eye_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2);
EXPORT_FUNC void NodePath_C_do_billboard_point_world_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2);
EXPORT_FUNC void NodePath_C_set_billboard_axis_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2);
EXPORT_FUNC void NodePath_C_set_billboard_axis_v_pf(NodePath *param0, PN_stdfloat param1);
EXPORT_FUNC void NodePath_C_set_billboard_axis_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_set_billboard_point_eye_v_ppfB(NodePath *param0, NodePath const *param1, PN_stdfloat param2, bool param3);
EXPORT_FUNC void NodePath_C_set_billboard_point_eye_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2);
EXPORT_FUNC void NodePath_C_set_billboard_point_eye_v_pfB(NodePath *param0, PN_stdfloat param1, bool param2);
EXPORT_FUNC void NodePath_C_set_billboard_point_eye_v_pf(NodePath *param0, PN_stdfloat param1);
EXPORT_FUNC void NodePath_C_set_billboard_point_eye_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_set_billboard_point_world_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2);
EXPORT_FUNC void NodePath_C_set_billboard_point_world_v_pf(NodePath *param0, PN_stdfloat param1);
EXPORT_FUNC void NodePath_C_set_billboard_point_world_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_clear_billboard_v_p(NodePath *param0);
EXPORT_FUNC bool NodePath_C_has_billboard_B_p(NodePath const *param0);
EXPORT_FUNC void NodePath_C_set_compass_v_pp(NodePath *param0, NodePath const *param1);
EXPORT_FUNC void NodePath_C_set_compass_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_clear_compass_v_p(NodePath *param0);
EXPORT_FUNC bool NodePath_C_has_compass_B_p(NodePath const *param0);
EXPORT_FUNC void NodePath_C_set_transparency_v_ppi(NodePath *param0, TransparencyAttrib::Mode param1, int param2);
EXPORT_FUNC void NodePath_C_set_transparency_v_pp(NodePath *param0, TransparencyAttrib::Mode param1);
EXPORT_FUNC void NodePath_C_clear_transparency_v_p(NodePath *param0);
EXPORT_FUNC bool NodePath_C_has_transparency_B_p(NodePath const *param0);
EXPORT_FUNC TransparencyAttrib::Mode NodePath_C_get_transparency_p_p(NodePath const *param0);
EXPORT_FUNC void NodePath_C_set_logic_op_v_ppi(NodePath *param0, LogicOpAttrib::Operation param1, int param2);
EXPORT_FUNC void NodePath_C_set_logic_op_v_pp(NodePath *param0, LogicOpAttrib::Operation param1);
EXPORT_FUNC void NodePath_C_clear_logic_op_v_p(NodePath *param0);
EXPORT_FUNC bool NodePath_C_has_logic_op_B_p(NodePath const *param0);
EXPORT_FUNC LogicOpAttrib::Operation NodePath_C_get_logic_op_p_p(NodePath const *param0);
EXPORT_FUNC void NodePath_C_set_antialias_v_ppi(NodePath *param0, unsigned short int param1, int param2);
EXPORT_FUNC void NodePath_C_set_antialias_v_pp(NodePath *param0, unsigned short int param1);
EXPORT_FUNC void NodePath_C_clear_antialias_v_p(NodePath *param0);
EXPORT_FUNC bool NodePath_C_has_antialias_B_p(NodePath const *param0);
EXPORT_FUNC unsigned short int NodePath_C_get_antialias_p_p(NodePath const *param0);
EXPORT_FUNC bool NodePath_C_has_audio_volume_B_p(NodePath const *param0);
EXPORT_FUNC void NodePath_C_clear_audio_volume_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_set_audio_volume_v_pfi(NodePath *param0, PN_stdfloat param1, int param2);
EXPORT_FUNC void NodePath_C_set_audio_volume_v_pf(NodePath *param0, PN_stdfloat param1);
EXPORT_FUNC void NodePath_C_set_audio_volume_off_v_pi(NodePath *param0, int param1);
EXPORT_FUNC void NodePath_C_set_audio_volume_off_v_p(NodePath *param0);
EXPORT_FUNC PN_stdfloat NodePath_C_get_audio_volume_f_p(NodePath const *param0);
EXPORT_FUNC PN_stdfloat NodePath_C_get_net_audio_volume_f_p(NodePath const *param0);
EXPORT_FUNC void NodePath_C_adjust_all_priorities_v_pi(NodePath *param0, int param1);
EXPORT_FUNC void NodePath_C_show_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_show_v_pp(NodePath *param0, DrawMask *param1);
EXPORT_FUNC void NodePath_C_show_through_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_show_through_v_pp(NodePath *param0, DrawMask *param1);
EXPORT_FUNC void NodePath_C_hide_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_hide_v_pp(NodePath *param0, DrawMask *param1);
EXPORT_FUNC bool NodePath_C_is_hidden_B_pp(NodePath const *param0, DrawMask *param1);
EXPORT_FUNC bool NodePath_C_is_hidden_B_p(NodePath const *param0);
EXPORT_FUNC NodePath * NodePath_C_get_hidden_ancestor_p_ppp(NodePath const *param0, DrawMask *param1, Thread *param2);
EXPORT_FUNC NodePath * NodePath_C_get_hidden_ancestor_p_pp(NodePath const *param0, DrawMask *param1);
EXPORT_FUNC NodePath * NodePath_C_get_hidden_ancestor_p_p(NodePath const *param0);
EXPORT_FUNC void NodePath_C_stash_v_pip(NodePath *param0, int param1, Thread *param2);
EXPORT_FUNC void NodePath_C_stash_v_pi(NodePath *param0, int param1);
EXPORT_FUNC void NodePath_C_stash_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_unstash_v_pip(NodePath *param0, int param1, Thread *param2);
EXPORT_FUNC void NodePath_C_unstash_v_pi(NodePath *param0, int param1);
EXPORT_FUNC void NodePath_C_unstash_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_unstash_all_v_pp(NodePath *param0, Thread *param1);
EXPORT_FUNC void NodePath_C_unstash_all_v_p(NodePath *param0);
EXPORT_FUNC bool NodePath_C_is_stashed_B_p(NodePath const *param0);
EXPORT_FUNC NodePath * NodePath_C_get_stashed_ancestor_p_pp(NodePath const *param0, Thread *param1);
EXPORT_FUNC NodePath * NodePath_C_get_stashed_ancestor_p_p(NodePath const *param0);
EXPORT_FUNC CollideMask * NodePath_C_get_collide_mask_p_p(NodePath const *param0);
EXPORT_FUNC void NodePath_C_set_collide_mask_v_pppi(NodePath *param0, CollideMask *param1, CollideMask *param2, int param3);
EXPORT_FUNC void NodePath_C_set_collide_mask_v_ppp(NodePath *param0, CollideMask *param1, CollideMask *param2);
EXPORT_FUNC void NodePath_C_set_collide_mask_v_pp(NodePath *param0, CollideMask *param1);
EXPORT_FUNC int NodePath_C_compare_to_i_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC int NodePath_C_compare_to_i_pp_1_i_pp(NodePath const *param0, WeakNodePath const *param1);
EXPORT_FUNC bool NodePath_C_verify_complete_B_pp(NodePath const *param0, Thread *param1);
EXPORT_FUNC bool NodePath_C_verify_complete_B_p(NodePath const *param0);
EXPORT_FUNC void NodePath_C_premunge_scene_v_pp(NodePath *param0, GraphicsStateGuardianBase *param1);
EXPORT_FUNC void NodePath_C_premunge_scene_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_prepare_scene_v_pp(NodePath *param0, GraphicsStateGuardianBase *param1);
EXPORT_FUNC void NodePath_C_show_bounds_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_show_tight_bounds_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_hide_bounds_v_p(NodePath *param0);
EXPORT_FUNC PointerTo< BoundingVolume > * NodePath_C_get_bounds_p_pp(NodePath const *param0, Thread *param1);
EXPORT_FUNC PointerTo< BoundingVolume > * NodePath_C_get_bounds_p_p(NodePath const *param0);
EXPORT_FUNC void NodePath_C_force_recompute_bounds_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_write_bounds_v_pp(NodePath const *param0, std::ostream *param1);
EXPORT_FUNC bool NodePath_C_calc_tight_bounds_B_ppppp(NodePath const *param0, LPoint3 *param1, LPoint3 *param2, NodePath const *param3, Thread *param4);
EXPORT_FUNC bool NodePath_C_calc_tight_bounds_B_pppp(NodePath const *param0, LPoint3 *param1, LPoint3 *param2, NodePath const *param3);
EXPORT_FUNC bool NodePath_C_calc_tight_bounds_B_ppp(NodePath const *param0, LPoint3 *param1, LPoint3 *param2);
EXPORT_FUNC int NodePath_C_flatten_light_i_p(NodePath *param0);
EXPORT_FUNC int NodePath_C_flatten_medium_i_p(NodePath *param0);
EXPORT_FUNC int NodePath_C_flatten_strong_i_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_apply_texture_colors_v_p(NodePath *param0);
EXPORT_FUNC int NodePath_C_clear_model_nodes_i_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_set_tag_v_pss(NodePath *param0, char const *param1, char const *param2);
EXPORT_FUNC char const * NodePath_C_get_tag_s_ps(NodePath const *param0, char const *param1);
EXPORT_FUNC void NodePath_C_get_tag_keys_v_pp(NodePath const *param0, vector_string *param1);
EXPORT_FUNC bool NodePath_C_has_tag_B_ps(NodePath const *param0, char const *param1);
EXPORT_FUNC void NodePath_C_clear_tag_v_ps(NodePath *param0, char const *param1);
EXPORT_FUNC char const * NodePath_C_get_net_tag_s_ps(NodePath const *param0, char const *param1);
EXPORT_FUNC bool NodePath_C_has_net_tag_B_ps(NodePath const *param0, char const *param1);
EXPORT_FUNC NodePath * NodePath_C_find_net_tag_p_ps(NodePath const *param0, char const *param1);
EXPORT_FUNC void NodePath_C_list_tags_v_p(NodePath const *param0);
EXPORT_FUNC void NodePath_C_set_name_v_ps(NodePath *param0, char const *param1);
EXPORT_FUNC char const * NodePath_C_get_name_s_p(NodePath const *param0);
EXPORT_FUNC bool NodePath_C_write_bam_file_B_pp(NodePath const *param0, Filename const *param1);
EXPORT_FUNC bool NodePath_C_write_bam_stream_B_pp(NodePath const *param0, std::ostream *param1);
EXPORT_FUNC vector_uchar NodePath_C_encode_to_bam_stream_p_p(NodePath const *param0);
EXPORT_FUNC bool NodePath_C_encode_to_bam_stream_B_ppp(NodePath const *param0, vector_uchar *param1, BamWriter *param2);
EXPORT_FUNC bool NodePath_C_encode_to_bam_stream_B_pp(NodePath const *param0, vector_uchar *param1);
EXPORT_FUNC NodePath * NodePath_C_decode_from_bam_stream_p_pp(vector_uchar param0, BamReader *param1);
EXPORT_FUNC NodePath * NodePath_C_decode_from_bam_stream_p_p(vector_uchar param0);
EXPORT_FUNC void NodePath_C_write_datagram_v_ppp(NodePath const *param0, BamWriter *param1, Datagram *param2);
EXPORT_FUNC void NodePath_C_fillin_v_ppp(NodePath *param0, DatagramIterator *param1, BamReader *param2);
EXPORT_FUNC int NodePath_C_get_class_type_i_v();
EXPORT_FUNC void NodePath_C_init_type_v_v();


// NodePathCollection

EXPORT_FUNC NodePathCollection * NodePathCollection_C_ctor_p_v();
EXPORT_FUNC NodePathCollection * NodePathCollection_C_ctor_p_p(NodePathCollection const *param0);
EXPORT_FUNC void NodePathCollection_C_add_path_v_pp(NodePathCollection *param0, NodePath const *param1);
EXPORT_FUNC bool NodePathCollection_C_remove_path_B_pp(NodePathCollection *param0, NodePath const *param1);
EXPORT_FUNC void NodePathCollection_C_add_paths_from_v_pp(NodePathCollection *param0, NodePathCollection const *param1);
EXPORT_FUNC void NodePathCollection_C_remove_paths_from_v_pp(NodePathCollection *param0, NodePathCollection const *param1);
EXPORT_FUNC void NodePathCollection_C_remove_duplicate_paths_v_p(NodePathCollection *param0);
EXPORT_FUNC bool NodePathCollection_C_has_path_B_pp(NodePathCollection const *param0, NodePath const *param1);
EXPORT_FUNC void NodePathCollection_C_clear_v_p(NodePathCollection *param0);
EXPORT_FUNC void NodePathCollection_C_reserve_v_pp(NodePathCollection *param0, std::size_t param1);
EXPORT_FUNC bool NodePathCollection_C_is_empty_B_p(NodePathCollection const *param0);
EXPORT_FUNC int NodePathCollection_C_get_num_paths_i_p(NodePathCollection const *param0);
EXPORT_FUNC NodePath * NodePathCollection_C_get_path_p_pi(NodePathCollection const *param0, int param1);
EXPORT_FUNC std::size_t NodePathCollection_C_size_p_p(NodePathCollection const *param0);
EXPORT_FUNC void NodePathCollection_C_append_v_pp(NodePathCollection *param0, NodePath const *param1);
EXPORT_FUNC void NodePathCollection_C_extend_v_pp(NodePathCollection *param0, NodePathCollection const *param1);
EXPORT_FUNC void NodePathCollection_C_ls_v_p(NodePathCollection const *param0);
EXPORT_FUNC void NodePathCollection_C_ls_v_ppi(NodePathCollection const *param0, std::ostream *param1, int param2);
EXPORT_FUNC void NodePathCollection_C_ls_v_pp(NodePathCollection const *param0, std::ostream *param1);
EXPORT_FUNC NodePathCollection * NodePathCollection_C_find_all_matches_p_ps(NodePathCollection const *param0, char const *param1);
EXPORT_FUNC void NodePathCollection_C_reparent_to_v_pp(NodePathCollection *param0, NodePath const *param1);
EXPORT_FUNC void NodePathCollection_C_wrt_reparent_to_v_pp(NodePathCollection *param0, NodePath const *param1);
EXPORT_FUNC void NodePathCollection_C_show_v_p(NodePathCollection *param0);
EXPORT_FUNC void NodePathCollection_C_hide_v_p(NodePathCollection *param0);
EXPORT_FUNC void NodePathCollection_C_stash_v_p(NodePathCollection *param0);
EXPORT_FUNC void NodePathCollection_C_unstash_v_p(NodePathCollection *param0);
EXPORT_FUNC void NodePathCollection_C_detach_v_p(NodePathCollection *param0);
EXPORT_FUNC CollideMask * NodePathCollection_C_get_collide_mask_p_p(NodePathCollection const *param0);
EXPORT_FUNC void NodePathCollection_C_set_collide_mask_v_pppi(NodePathCollection *param0, CollideMask *param1, CollideMask *param2, int param3);
EXPORT_FUNC void NodePathCollection_C_set_collide_mask_v_ppp(NodePathCollection *param0, CollideMask *param1, CollideMask *param2);
EXPORT_FUNC void NodePathCollection_C_set_collide_mask_v_pp(NodePathCollection *param0, CollideMask *param1);
EXPORT_FUNC bool NodePathCollection_C_calc_tight_bounds_B_ppp(NodePathCollection const *param0, LPoint3 *param1, LPoint3 *param2);
EXPORT_FUNC void NodePathCollection_C_set_texture_v_ppi(NodePathCollection *param0, Texture *param1, int param2);
EXPORT_FUNC void NodePathCollection_C_set_texture_v_pp(NodePathCollection *param0, Texture *param1);
EXPORT_FUNC void NodePathCollection_C_set_texture_v_pppi(NodePathCollection *param0, TextureStage *param1, Texture *param2, int param3);
EXPORT_FUNC void NodePathCollection_C_set_texture_v_ppp(NodePathCollection *param0, TextureStage *param1, Texture *param2);
EXPORT_FUNC void NodePathCollection_C_set_texture_off_v_ppi(NodePathCollection *param0, TextureStage *param1, int param2);
EXPORT_FUNC void NodePathCollection_C_set_texture_off_v_pp(NodePathCollection *param0, TextureStage *param1);
EXPORT_FUNC void NodePathCollection_C_set_texture_off_v_pi(NodePathCollection *param0, int param1);
EXPORT_FUNC void NodePathCollection_C_set_texture_off_v_p(NodePathCollection *param0);
EXPORT_FUNC void NodePathCollection_C_set_color_v_ppi(NodePathCollection *param0, LColor const *param1, int param2);
EXPORT_FUNC void NodePathCollection_C_set_color_v_pp(NodePathCollection *param0, LColor const *param1);
EXPORT_FUNC void NodePathCollection_C_set_color_v_pffffi(NodePathCollection *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, int param5);
EXPORT_FUNC void NodePathCollection_C_set_color_v_pffff(NodePathCollection *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC void NodePathCollection_C_set_color_v_pfff(NodePathCollection *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3);
EXPORT_FUNC void NodePathCollection_C_set_color_scale_v_ppi(NodePathCollection *param0, LVecBase4 const *param1, int param2);
EXPORT_FUNC void NodePathCollection_C_set_color_scale_v_pp(NodePathCollection *param0, LVecBase4 const *param1);
EXPORT_FUNC void NodePathCollection_C_set_color_scale_v_pffffi(NodePathCollection *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, int param5);
EXPORT_FUNC void NodePathCollection_C_set_color_scale_v_pffff(NodePathCollection *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC void NodePathCollection_C_set_color_scale_v_pfff(NodePathCollection *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3);
EXPORT_FUNC void NodePathCollection_C_compose_color_scale_v_ppi(NodePathCollection *param0, LVecBase4 const *param1, int param2);
EXPORT_FUNC void NodePathCollection_C_compose_color_scale_v_pp(NodePathCollection *param0, LVecBase4 const *param1);
EXPORT_FUNC void NodePathCollection_C_compose_color_scale_v_pffffi(NodePathCollection *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, int param5);
EXPORT_FUNC void NodePathCollection_C_compose_color_scale_v_pffff(NodePathCollection *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC void NodePathCollection_C_compose_color_scale_v_pfff(NodePathCollection *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3);
EXPORT_FUNC void NodePathCollection_C_set_attrib_v_ppi(NodePathCollection *param0, RenderAttrib const *param1, int param2);
EXPORT_FUNC void NodePathCollection_C_set_attrib_v_pp(NodePathCollection *param0, RenderAttrib const *param1);
EXPORT_FUNC void NodePathCollection_C_output_v_pp(NodePathCollection const *param0, std::ostream *param1);
EXPORT_FUNC void NodePathCollection_C_write_v_ppi(NodePathCollection const *param0, std::ostream *param1, int param2);
EXPORT_FUNC void NodePathCollection_C_write_v_pp(NodePathCollection const *param0, std::ostream *param1);


// PandaFramework

EXPORT_FUNC PandaFramework * PandaFramework_C_ctor_p_v();
EXPORT_FUNC PandaFramework * PandaFramework_C_ctor_p_p(PandaFramework const *param0);
EXPORT_FUNC void PandaFramework_C_open_framework_v_p(PandaFramework *param0);
EXPORT_FUNC void PandaFramework_C_close_framework_v_p(PandaFramework *param0);
EXPORT_FUNC GraphicsPipe * PandaFramework_C_get_default_pipe_p_p(PandaFramework *param0);
EXPORT_FUNC GraphicsEngine * PandaFramework_C_get_graphics_engine_p_p(PandaFramework *param0);
EXPORT_FUNC NodePath const * PandaFramework_C_get_data_root_p_p(PandaFramework const *param0);
EXPORT_FUNC EventHandler * PandaFramework_C_get_event_handler_p_p(PandaFramework *param0);
EXPORT_FUNC AsyncTaskManager * PandaFramework_C_get_task_mgr_p_p(PandaFramework *param0);
EXPORT_FUNC NodePath * PandaFramework_C_get_mouse_p_pp(PandaFramework *param0, GraphicsOutput *param1);
EXPORT_FUNC void PandaFramework_C_remove_mouse_v_pp(PandaFramework *param0, GraphicsOutput const *param1);
EXPORT_FUNC void PandaFramework_C_set_window_title_v_ps(PandaFramework *param0, char const *param1);
EXPORT_FUNC void PandaFramework_C_get_default_window_props_v_pp(PandaFramework *param0, WindowProperties *param1);
EXPORT_FUNC WindowFramework * PandaFramework_C_open_window_p_p(PandaFramework *param0);
EXPORT_FUNC WindowFramework * PandaFramework_C_open_window_p_ppp(PandaFramework *param0, GraphicsPipe *param1, GraphicsStateGuardian *param2);
EXPORT_FUNC WindowFramework * PandaFramework_C_open_window_p_pp(PandaFramework *param0, GraphicsPipe *param1);
EXPORT_FUNC WindowFramework * PandaFramework_C_open_window_p_ppipp(PandaFramework *param0, WindowProperties const *param1, int param2, GraphicsPipe *param3, GraphicsStateGuardian *param4);
EXPORT_FUNC WindowFramework * PandaFramework_C_open_window_p_ppip(PandaFramework *param0, WindowProperties const *param1, int param2, GraphicsPipe *param3);
EXPORT_FUNC WindowFramework * PandaFramework_C_open_window_p_ppi(PandaFramework *param0, WindowProperties const *param1, int param2);
EXPORT_FUNC int PandaFramework_C_get_num_windows_i_p(PandaFramework const *param0);
EXPORT_FUNC WindowFramework * PandaFramework_C_get_window_p_pi(PandaFramework const *param0, int param1);
EXPORT_FUNC int PandaFramework_C_find_window_i_pp(PandaFramework const *param0, GraphicsOutput const *param1);
EXPORT_FUNC int PandaFramework_C_find_window_i_pp_1_i_pp(PandaFramework const *param0, WindowFramework const *param1);
EXPORT_FUNC void PandaFramework_C_close_window_v_pp(PandaFramework *param0, WindowFramework *param1);
EXPORT_FUNC void PandaFramework_C_close_window_v_pi(PandaFramework *param0, int param1);
EXPORT_FUNC void PandaFramework_C_close_all_windows_v_p(PandaFramework *param0);
EXPORT_FUNC bool PandaFramework_C_all_windows_closed_B_p(PandaFramework const *param0);
EXPORT_FUNC NodePath * PandaFramework_C_get_models_p_p(PandaFramework *param0);
EXPORT_FUNC void PandaFramework_C_report_frame_rate_v_pp(PandaFramework const *param0, std::ostream *param1);
EXPORT_FUNC void PandaFramework_C_reset_frame_rate_v_p(PandaFramework *param0);
EXPORT_FUNC void PandaFramework_C_set_wireframe_v_pB(PandaFramework *param0, bool param1);
EXPORT_FUNC void PandaFramework_C_set_texture_v_pB(PandaFramework *param0, bool param1);
EXPORT_FUNC void PandaFramework_C_set_two_sided_v_pB(PandaFramework *param0, bool param1);
EXPORT_FUNC void PandaFramework_C_set_lighting_v_pB(PandaFramework *param0, bool param1);
EXPORT_FUNC void PandaFramework_C_set_perpixel_v_pB(PandaFramework *param0, bool param1);
EXPORT_FUNC void PandaFramework_C_set_background_type_v_pp(PandaFramework *param0, WindowFramework::BackgroundType param1);
EXPORT_FUNC bool PandaFramework_C_get_wireframe_B_p(PandaFramework const *param0);
EXPORT_FUNC bool PandaFramework_C_get_texture_B_p(PandaFramework const *param0);
EXPORT_FUNC bool PandaFramework_C_get_two_sided_B_p(PandaFramework const *param0);
EXPORT_FUNC bool PandaFramework_C_get_lighting_B_p(PandaFramework const *param0);
EXPORT_FUNC bool PandaFramework_C_get_perpixel_B_p(PandaFramework const *param0);
EXPORT_FUNC WindowFramework::BackgroundType PandaFramework_C_get_background_type_p_p(PandaFramework const *param0);
EXPORT_FUNC int PandaFramework_C_hide_collision_solids_i_p(NodePath *param0);
EXPORT_FUNC int PandaFramework_C_show_collision_solids_i_p(NodePath *param0);
EXPORT_FUNC void PandaFramework_C_set_highlight_v_pp(PandaFramework *param0, NodePath const *param1);
EXPORT_FUNC void PandaFramework_C_clear_highlight_v_p(PandaFramework *param0);
EXPORT_FUNC bool PandaFramework_C_has_highlight_B_p(PandaFramework const *param0);
EXPORT_FUNC NodePath const * PandaFramework_C_get_highlight_p_p(PandaFramework const *param0);
EXPORT_FUNC RecorderController * PandaFramework_C_get_recorder_p_p(PandaFramework const *param0);
EXPORT_FUNC void PandaFramework_C_set_recorder_v_pp(PandaFramework *param0, RecorderController *param1);
EXPORT_FUNC void PandaFramework_C_enable_default_keys_v_p(PandaFramework *param0);
EXPORT_FUNC bool PandaFramework_C_do_frame_B_pp(PandaFramework *param0, Thread *param1);
EXPORT_FUNC void PandaFramework_C_main_loop_v_p(PandaFramework *param0);
EXPORT_FUNC void PandaFramework_C_set_exit_flag_v_p(PandaFramework *param0);
EXPORT_FUNC void PandaFramework_C_clear_exit_flag_v_p(PandaFramework *param0);


// PandaNode

EXPORT_FUNC TypedWritableReferenceCount * PandaNode_C_upcast_to_TypedWritableReferenceCount_p_p(PandaNode *param0);
EXPORT_FUNC Namable * PandaNode_C_upcast_to_Namable_p_p(PandaNode *param0);
EXPORT_FUNC LinkedListNode * PandaNode_C_upcast_to_LinkedListNode_p_p(PandaNode *param0);
EXPORT_FUNC PandaNode * PandaNode_C_ctor_p_s(char const *param0);
EXPORT_FUNC PandaNode * PandaNode_C_combine_with_p_pp(PandaNode *param0, PandaNode *param1);
EXPORT_FUNC PandaNode * PandaNode_C_dupe_for_flatten_p_p(PandaNode const *param0);
EXPORT_FUNC bool PandaNode_C_safe_to_flatten_B_p(PandaNode const *param0);
EXPORT_FUNC bool PandaNode_C_safe_to_transform_B_p(PandaNode const *param0);
EXPORT_FUNC bool PandaNode_C_safe_to_modify_transform_B_p(PandaNode const *param0);
EXPORT_FUNC bool PandaNode_C_safe_to_combine_B_p(PandaNode const *param0);
EXPORT_FUNC bool PandaNode_C_safe_to_combine_children_B_p(PandaNode const *param0);
EXPORT_FUNC bool PandaNode_C_safe_to_flatten_below_B_p(PandaNode const *param0);
EXPORT_FUNC bool PandaNode_C_preserve_name_B_p(PandaNode const *param0);
EXPORT_FUNC int PandaNode_C_get_unsafe_to_apply_attribs_i_p(PandaNode const *param0);
EXPORT_FUNC void PandaNode_C_apply_attribs_to_vertices_v_ppip(PandaNode *param0, AccumulatedAttribs const *param1, int param2, GeomTransformer *param3);
EXPORT_FUNC void PandaNode_C_xform_v_pp(PandaNode *param0, LMatrix4 const *param1);
EXPORT_FUNC bool PandaNode_C_cull_callback_B_ppp(PandaNode *param0, CullTraverser *param1, CullTraverserData *param2);
EXPORT_FUNC bool PandaNode_C_has_selective_visibility_B_p(PandaNode const *param0);
EXPORT_FUNC int PandaNode_C_get_first_visible_child_i_p(PandaNode const *param0);
EXPORT_FUNC int PandaNode_C_get_next_visible_child_i_pi(PandaNode const *param0, int param1);
EXPORT_FUNC bool PandaNode_C_has_single_child_visibility_B_p(PandaNode const *param0);
EXPORT_FUNC int PandaNode_C_get_visible_child_i_p(PandaNode const *param0);
EXPORT_FUNC bool PandaNode_C_is_renderable_B_p(PandaNode const *param0);
EXPORT_FUNC void PandaNode_C_add_for_draw_v_ppp(PandaNode *param0, CullTraverser *param1, CullTraverserData *param2);
EXPORT_FUNC PandaNode * PandaNode_C_make_copy_p_p(PandaNode const *param0);
EXPORT_FUNC PointerTo< PandaNode > * PandaNode_C_copy_subgraph_p_pp(PandaNode const *param0, Thread *param1);
EXPORT_FUNC PointerTo< PandaNode > * PandaNode_C_copy_subgraph_p_p(PandaNode const *param0);
EXPORT_FUNC int PandaNode_C_get_num_parents_i_pp(PandaNode const *param0, Thread *param1);
EXPORT_FUNC int PandaNode_C_get_num_parents_i_p(PandaNode const *param0);
EXPORT_FUNC PandaNode * PandaNode_C_get_parent_p_pip(PandaNode const *param0, int param1, Thread *param2);
EXPORT_FUNC PandaNode * PandaNode_C_get_parent_p_pi(PandaNode const *param0, int param1);
EXPORT_FUNC int PandaNode_C_find_parent_i_ppp(PandaNode const *param0, PandaNode *param1, Thread *param2);
EXPORT_FUNC int PandaNode_C_find_parent_i_pp(PandaNode const *param0, PandaNode *param1);
EXPORT_FUNC int PandaNode_C_get_num_children_i_pp(PandaNode const *param0, Thread *param1);
EXPORT_FUNC int PandaNode_C_get_num_children_i_p(PandaNode const *param0);
EXPORT_FUNC PandaNode * PandaNode_C_get_child_p_pip(PandaNode const *param0, int param1, Thread *param2);
EXPORT_FUNC PandaNode * PandaNode_C_get_child_p_pi(PandaNode const *param0, int param1);
EXPORT_FUNC int PandaNode_C_get_child_sort_i_pip(PandaNode const *param0, int param1, Thread *param2);
EXPORT_FUNC int PandaNode_C_get_child_sort_i_pi(PandaNode const *param0, int param1);
EXPORT_FUNC int PandaNode_C_find_child_i_ppp(PandaNode const *param0, PandaNode *param1, Thread *param2);
EXPORT_FUNC int PandaNode_C_find_child_i_pp(PandaNode const *param0, PandaNode *param1);
EXPORT_FUNC int PandaNode_C_count_num_descendants_i_p(PandaNode const *param0);
EXPORT_FUNC void PandaNode_C_add_child_v_ppip(PandaNode *param0, PandaNode *param1, int param2, Thread *param3);
EXPORT_FUNC void PandaNode_C_add_child_v_ppi(PandaNode *param0, PandaNode *param1, int param2);
EXPORT_FUNC void PandaNode_C_add_child_v_pp(PandaNode *param0, PandaNode *param1);
EXPORT_FUNC bool PandaNode_C_remove_child_B_ppp(PandaNode *param0, PandaNode *param1, Thread *param2);
EXPORT_FUNC bool PandaNode_C_remove_child_B_pp(PandaNode *param0, PandaNode *param1);
EXPORT_FUNC void PandaNode_C_remove_child_v_pip(PandaNode *param0, int param1, Thread *param2);
EXPORT_FUNC void PandaNode_C_remove_child_v_pi(PandaNode *param0, int param1);
EXPORT_FUNC bool PandaNode_C_replace_child_B_pppp(PandaNode *param0, PandaNode *param1, PandaNode *param2, Thread *param3);
EXPORT_FUNC bool PandaNode_C_replace_child_B_ppp(PandaNode *param0, PandaNode *param1, PandaNode *param2);
EXPORT_FUNC bool PandaNode_C_stash_child_B_ppp(PandaNode *param0, PandaNode *param1, Thread *param2);
EXPORT_FUNC bool PandaNode_C_stash_child_B_pp(PandaNode *param0, PandaNode *param1);
EXPORT_FUNC void PandaNode_C_stash_child_v_pip(PandaNode *param0, int param1, Thread *param2);
EXPORT_FUNC void PandaNode_C_stash_child_v_pi(PandaNode *param0, int param1);
EXPORT_FUNC bool PandaNode_C_unstash_child_B_ppp(PandaNode *param0, PandaNode *param1, Thread *param2);
EXPORT_FUNC bool PandaNode_C_unstash_child_B_pp(PandaNode *param0, PandaNode *param1);
EXPORT_FUNC void PandaNode_C_unstash_child_v_pip(PandaNode *param0, int param1, Thread *param2);
EXPORT_FUNC void PandaNode_C_unstash_child_v_pi(PandaNode *param0, int param1);
EXPORT_FUNC int PandaNode_C_get_num_stashed_i_pp(PandaNode const *param0, Thread *param1);
EXPORT_FUNC int PandaNode_C_get_num_stashed_i_p(PandaNode const *param0);
EXPORT_FUNC PandaNode::Stashed * PandaNode_C_get_stashed_p_pp(PandaNode const *param0, Thread *param1);
EXPORT_FUNC PandaNode::Stashed * PandaNode_C_get_stashed_p_p(PandaNode const *param0);
EXPORT_FUNC PandaNode * PandaNode_C_get_stashed_p_pip(PandaNode const *param0, int param1, Thread *param2);
EXPORT_FUNC PandaNode * PandaNode_C_get_stashed_p_pi(PandaNode const *param0, int param1);
EXPORT_FUNC int PandaNode_C_get_stashed_sort_i_pip(PandaNode const *param0, int param1, Thread *param2);
EXPORT_FUNC int PandaNode_C_get_stashed_sort_i_pi(PandaNode const *param0, int param1);
EXPORT_FUNC int PandaNode_C_find_stashed_i_ppp(PandaNode const *param0, PandaNode *param1, Thread *param2);
EXPORT_FUNC int PandaNode_C_find_stashed_i_pp(PandaNode const *param0, PandaNode *param1);
EXPORT_FUNC void PandaNode_C_add_stashed_v_ppip(PandaNode *param0, PandaNode *param1, int param2, Thread *param3);
EXPORT_FUNC void PandaNode_C_add_stashed_v_ppi(PandaNode *param0, PandaNode *param1, int param2);
EXPORT_FUNC void PandaNode_C_add_stashed_v_pp(PandaNode *param0, PandaNode *param1);
EXPORT_FUNC void PandaNode_C_remove_stashed_v_pip(PandaNode *param0, int param1, Thread *param2);
EXPORT_FUNC void PandaNode_C_remove_stashed_v_pi(PandaNode *param0, int param1);
EXPORT_FUNC void PandaNode_C_remove_all_children_v_pp(PandaNode *param0, Thread *param1);
EXPORT_FUNC void PandaNode_C_remove_all_children_v_p(PandaNode *param0);
EXPORT_FUNC void PandaNode_C_steal_children_v_ppp(PandaNode *param0, PandaNode *param1, Thread *param2);
EXPORT_FUNC void PandaNode_C_steal_children_v_pp(PandaNode *param0, PandaNode *param1);
EXPORT_FUNC void PandaNode_C_copy_children_v_ppp(PandaNode *param0, PandaNode *param1, Thread *param2);
EXPORT_FUNC void PandaNode_C_copy_children_v_pp(PandaNode *param0, PandaNode *param1);
EXPORT_FUNC void PandaNode_C_set_attrib_v_ppi(PandaNode *param0, RenderAttrib const *param1, int param2);
EXPORT_FUNC void PandaNode_C_set_attrib_v_pp(PandaNode *param0, RenderAttrib const *param1);
EXPORT_FUNC ConstPointerTo< RenderAttrib > * PandaNode_C_get_attrib_p_pi(PandaNode const *param0, int param1);
EXPORT_FUNC ConstPointerTo< RenderAttrib > * PandaNode_C_get_attrib_p_pi_1_p_pi(PandaNode const *param0, int param1);
EXPORT_FUNC bool PandaNode_C_has_attrib_B_pi(PandaNode const *param0, int param1);
EXPORT_FUNC bool PandaNode_C_has_attrib_B_pi_1_B_pi(PandaNode const *param0, int param1);
EXPORT_FUNC void PandaNode_C_clear_attrib_v_pi(PandaNode *param0, int param1);
EXPORT_FUNC void PandaNode_C_clear_attrib_v_pi_1_v_pi(PandaNode *param0, int param1);
EXPORT_FUNC void PandaNode_C_set_effect_v_pp(PandaNode *param0, RenderEffect const *param1);
EXPORT_FUNC ConstPointerTo< RenderEffect > * PandaNode_C_get_effect_p_pi(PandaNode const *param0, int param1);
EXPORT_FUNC bool PandaNode_C_has_effect_B_pi(PandaNode const *param0, int param1);
EXPORT_FUNC void PandaNode_C_clear_effect_v_pi(PandaNode *param0, int param1);
EXPORT_FUNC void PandaNode_C_set_state_v_ppp(PandaNode *param0, RenderState const *param1, Thread *param2);
EXPORT_FUNC void PandaNode_C_set_state_v_pp(PandaNode *param0, RenderState const *param1);
EXPORT_FUNC ConstPointerTo< RenderState > * PandaNode_C_get_state_p_pp(PandaNode const *param0, Thread *param1);
EXPORT_FUNC ConstPointerTo< RenderState > * PandaNode_C_get_state_p_p(PandaNode const *param0);
EXPORT_FUNC void PandaNode_C_clear_state_v_pp(PandaNode *param0, Thread *param1);
EXPORT_FUNC void PandaNode_C_clear_state_v_p(PandaNode *param0);
EXPORT_FUNC void PandaNode_C_set_effects_v_ppp(PandaNode *param0, RenderEffects const *param1, Thread *param2);
EXPORT_FUNC void PandaNode_C_set_effects_v_pp(PandaNode *param0, RenderEffects const *param1);
EXPORT_FUNC ConstPointerTo< RenderEffects > * PandaNode_C_get_effects_p_pp(PandaNode const *param0, Thread *param1);
EXPORT_FUNC ConstPointerTo< RenderEffects > * PandaNode_C_get_effects_p_p(PandaNode const *param0);
EXPORT_FUNC void PandaNode_C_clear_effects_v_pp(PandaNode *param0, Thread *param1);
EXPORT_FUNC void PandaNode_C_clear_effects_v_p(PandaNode *param0);
EXPORT_FUNC void PandaNode_C_set_transform_v_ppp(PandaNode *param0, TransformState const *param1, Thread *param2);
EXPORT_FUNC void PandaNode_C_set_transform_v_pp(PandaNode *param0, TransformState const *param1);
EXPORT_FUNC ConstPointerTo< TransformState > * PandaNode_C_get_transform_p_pp(PandaNode const *param0, Thread *param1);
EXPORT_FUNC ConstPointerTo< TransformState > * PandaNode_C_get_transform_p_p(PandaNode const *param0);
EXPORT_FUNC void PandaNode_C_clear_transform_v_pp(PandaNode *param0, Thread *param1);
EXPORT_FUNC void PandaNode_C_clear_transform_v_p(PandaNode *param0);
EXPORT_FUNC void PandaNode_C_set_prev_transform_v_ppp(PandaNode *param0, TransformState const *param1, Thread *param2);
EXPORT_FUNC void PandaNode_C_set_prev_transform_v_pp(PandaNode *param0, TransformState const *param1);
EXPORT_FUNC ConstPointerTo< TransformState > * PandaNode_C_get_prev_transform_p_pp(PandaNode const *param0, Thread *param1);
EXPORT_FUNC ConstPointerTo< TransformState > * PandaNode_C_get_prev_transform_p_p(PandaNode const *param0);
EXPORT_FUNC void PandaNode_C_reset_prev_transform_v_pp(PandaNode *param0, Thread *param1);
EXPORT_FUNC void PandaNode_C_reset_prev_transform_v_p(PandaNode *param0);
EXPORT_FUNC bool PandaNode_C_has_dirty_prev_transform_B_p(PandaNode const *param0);
EXPORT_FUNC void PandaNode_C_reset_all_prev_transform_v_p(Thread *param0);
EXPORT_FUNC void PandaNode_C_reset_all_prev_transform_v_v();
EXPORT_FUNC void PandaNode_C_set_tag_v_pssp(PandaNode *param0, char const *param1, char const *param2, Thread *param3);
EXPORT_FUNC void PandaNode_C_set_tag_v_pss(PandaNode *param0, char const *param1, char const *param2);
EXPORT_FUNC char const * PandaNode_C_get_tag_s_psp(PandaNode const *param0, char const *param1, Thread *param2);
EXPORT_FUNC char const * PandaNode_C_get_tag_s_ps(PandaNode const *param0, char const *param1);
EXPORT_FUNC bool PandaNode_C_has_tag_B_psp(PandaNode const *param0, char const *param1, Thread *param2);
EXPORT_FUNC bool PandaNode_C_has_tag_B_ps(PandaNode const *param0, char const *param1);
EXPORT_FUNC void PandaNode_C_clear_tag_v_psp(PandaNode *param0, char const *param1, Thread *param2);
EXPORT_FUNC void PandaNode_C_clear_tag_v_ps(PandaNode *param0, char const *param1);
EXPORT_FUNC void PandaNode_C_get_tag_keys_v_pp(PandaNode const *param0, vector_string *param1);
EXPORT_FUNC std::size_t PandaNode_C_get_num_tags_p_p(PandaNode const *param0);
EXPORT_FUNC char const * PandaNode_C_get_tag_key_s_pp(PandaNode const *param0, std::size_t param1);
EXPORT_FUNC bool PandaNode_C_has_tags_B_p(PandaNode const *param0);
EXPORT_FUNC void PandaNode_C_copy_tags_v_pp(PandaNode *param0, PandaNode *param1);
EXPORT_FUNC void PandaNode_C_list_tags_v_pps(PandaNode const *param0, std::ostream *param1, char const *param2);
EXPORT_FUNC void PandaNode_C_list_tags_v_pp(PandaNode const *param0, std::ostream *param1);
EXPORT_FUNC int PandaNode_C_compare_tags_i_pp(PandaNode const *param0, PandaNode const *param1);
EXPORT_FUNC void PandaNode_C_copy_all_properties_v_pp(PandaNode *param0, PandaNode *param1);
EXPORT_FUNC void PandaNode_C_replace_node_v_pp(PandaNode *param0, PandaNode *param1);
EXPORT_FUNC void PandaNode_C_set_unexpected_change_v_pI(PandaNode *param0, unsigned int param1);
EXPORT_FUNC unsigned int PandaNode_C_get_unexpected_change_I_pI(PandaNode const *param0, unsigned int param1);
EXPORT_FUNC void PandaNode_C_clear_unexpected_change_v_pI(PandaNode *param0, unsigned int param1);
EXPORT_FUNC DrawMask * PandaNode_C_get_overall_bit_p_v();
EXPORT_FUNC DrawMask * PandaNode_C_get_all_camera_mask_p_v();
EXPORT_FUNC bool PandaNode_C_is_overall_hidden_B_p(PandaNode const *param0);
EXPORT_FUNC void PandaNode_C_set_overall_hidden_v_pB(PandaNode *param0, bool param1);
EXPORT_FUNC void PandaNode_C_adjust_draw_mask_v_pppp(PandaNode *param0, DrawMask *param1, DrawMask *param2, DrawMask *param3);
EXPORT_FUNC DrawMask * PandaNode_C_get_draw_control_mask_p_p(PandaNode const *param0);
EXPORT_FUNC DrawMask * PandaNode_C_get_draw_show_mask_p_p(PandaNode const *param0);
EXPORT_FUNC DrawMask * PandaNode_C_get_net_draw_control_mask_p_p(PandaNode const *param0);
EXPORT_FUNC DrawMask * PandaNode_C_get_net_draw_show_mask_p_p(PandaNode const *param0);
EXPORT_FUNC void PandaNode_C_set_into_collide_mask_v_pp(PandaNode *param0, CollideMask *param1);
EXPORT_FUNC CollideMask * PandaNode_C_get_into_collide_mask_p_p(PandaNode const *param0);
EXPORT_FUNC CollideMask * PandaNode_C_get_legal_collide_mask_p_p(PandaNode const *param0);
EXPORT_FUNC CollideMask * PandaNode_C_get_net_collide_mask_p_pp(PandaNode const *param0, Thread *param1);
EXPORT_FUNC CollideMask * PandaNode_C_get_net_collide_mask_p_p(PandaNode const *param0);
EXPORT_FUNC ConstPointerTo< RenderAttrib > * PandaNode_C_get_off_clip_planes_p_pp(PandaNode const *param0, Thread *param1);
EXPORT_FUNC ConstPointerTo< RenderAttrib > * PandaNode_C_get_off_clip_planes_p_p(PandaNode const *param0);
EXPORT_FUNC void PandaNode_C_prepare_scene_v_ppp(PandaNode *param0, GraphicsStateGuardianBase *param1, RenderState const *param2);
EXPORT_FUNC bool PandaNode_C_is_scene_root_B_p(PandaNode const *param0);
EXPORT_FUNC bool PandaNode_C_is_under_scene_root_B_p(PandaNode const *param0);
EXPORT_FUNC void PandaNode_C_output_v_pp(PandaNode const *param0, std::ostream *param1);
EXPORT_FUNC void PandaNode_C_write_v_ppi(PandaNode const *param0, std::ostream *param1, int param2);
EXPORT_FUNC void PandaNode_C_ls_v_ppi(PandaNode const *param0, std::ostream *param1, int param2);
EXPORT_FUNC void PandaNode_C_set_bounds_type_v_pp(PandaNode *param0, BoundingVolume::BoundsType param1);
EXPORT_FUNC BoundingVolume::BoundsType PandaNode_C_get_bounds_type_p_p(PandaNode const *param0);
EXPORT_FUNC void PandaNode_C_set_bounds_v_pp(PandaNode *param0, BoundingVolume const *param1);
EXPORT_FUNC void PandaNode_C_set_bound_v_pp(PandaNode *param0, BoundingVolume const *param1);
EXPORT_FUNC void PandaNode_C_clear_bounds_v_p(PandaNode *param0);
EXPORT_FUNC ConstPointerTo< BoundingVolume > * PandaNode_C_get_bounds_p_pp(PandaNode const *param0, Thread *param1);
EXPORT_FUNC ConstPointerTo< BoundingVolume > * PandaNode_C_get_bounds_p_p(PandaNode const *param0);
EXPORT_FUNC ConstPointerTo< BoundingVolume > * PandaNode_C_get_bounds_p_ppp(PandaNode const *param0, UpdateSeq *param1, Thread *param2);
EXPORT_FUNC ConstPointerTo< BoundingVolume > * PandaNode_C_get_bounds_p_pp_1_p_pp(PandaNode const *param0, UpdateSeq *param1);
EXPORT_FUNC int PandaNode_C_get_nested_vertices_i_pp(PandaNode const *param0, Thread *param1);
EXPORT_FUNC int PandaNode_C_get_nested_vertices_i_p(PandaNode const *param0);
EXPORT_FUNC ConstPointerTo< BoundingVolume > * PandaNode_C_get_internal_bounds_p_pp(PandaNode const *param0, Thread *param1);
EXPORT_FUNC ConstPointerTo< BoundingVolume > * PandaNode_C_get_internal_bounds_p_p(PandaNode const *param0);
EXPORT_FUNC int PandaNode_C_get_internal_vertices_i_pp(PandaNode const *param0, Thread *param1);
EXPORT_FUNC int PandaNode_C_get_internal_vertices_i_p(PandaNode const *param0);
EXPORT_FUNC void PandaNode_C_mark_bounds_stale_v_pp(PandaNode const *param0, Thread *param1);
EXPORT_FUNC void PandaNode_C_mark_bounds_stale_v_p(PandaNode const *param0);
EXPORT_FUNC void PandaNode_C_mark_internal_bounds_stale_v_pp(PandaNode *param0, Thread *param1);
EXPORT_FUNC void PandaNode_C_mark_internal_bounds_stale_v_p(PandaNode *param0);
EXPORT_FUNC bool PandaNode_C_is_bounds_stale_B_p(PandaNode const *param0);
EXPORT_FUNC void PandaNode_C_set_final_v_pB(PandaNode *param0, bool param1);
EXPORT_FUNC bool PandaNode_C_is_final_B_pp(PandaNode const *param0, Thread *param1);
EXPORT_FUNC bool PandaNode_C_is_final_B_p(PandaNode const *param0);
EXPORT_FUNC bool PandaNode_C_is_geom_node_B_p(PandaNode const *param0);
EXPORT_FUNC bool PandaNode_C_is_lod_node_B_p(PandaNode const *param0);
EXPORT_FUNC bool PandaNode_C_is_collision_node_B_p(PandaNode const *param0);
EXPORT_FUNC Light * PandaNode_C_as_light_p_p(PandaNode *param0);
EXPORT_FUNC bool PandaNode_C_is_ambient_light_B_p(PandaNode const *param0);
EXPORT_FUNC int PandaNode_C_get_fancy_bits_i_pp(PandaNode const *param0, Thread *param1);
EXPORT_FUNC int PandaNode_C_get_fancy_bits_i_p(PandaNode const *param0);
EXPORT_FUNC PointerTo< PandaNode > * PandaNode_C_decode_from_bam_stream_p_pp(vector_uchar param0, BamReader *param1);
EXPORT_FUNC PointerTo< PandaNode > * PandaNode_C_decode_from_bam_stream_p_p(vector_uchar param0);
EXPORT_FUNC void PandaNode_C_r_prepare_scene_v_ppppp(PandaNode *param0, GraphicsStateGuardianBase *param1, RenderState const *param2, GeomTransformer *param3, Thread *param4);
EXPORT_FUNC PandaNode::Children * PandaNode_C_get_children_p_pp(PandaNode const *param0, Thread *param1);
EXPORT_FUNC PandaNode::Children * PandaNode_C_get_children_p_p(PandaNode const *param0);
EXPORT_FUNC PandaNode::Parents * PandaNode_C_get_parents_p_pp(PandaNode const *param0, Thread *param1);
EXPORT_FUNC PandaNode::Parents * PandaNode_C_get_parents_p_p(PandaNode const *param0);
EXPORT_FUNC void PandaNode_C_register_with_read_factory_v_v();
EXPORT_FUNC void PandaNode_C_write_datagram_v_ppp(PandaNode *param0, BamWriter *param1, Datagram *param2);
EXPORT_FUNC void PandaNode_C_update_bam_nested_v_pp(PandaNode *param0, BamWriter *param1);
EXPORT_FUNC void PandaNode_C_write_recorder_v_ppp(PandaNode *param0, BamWriter *param1, Datagram *param2);
EXPORT_FUNC int PandaNode_C_get_class_type_i_v();
EXPORT_FUNC void PandaNode_C_init_type_v_v();
EXPORT_FUNC int PandaNode_C_get_type_i_p(PandaNode const *param0);
EXPORT_FUNC int PandaNode_C_force_init_type_i_p(PandaNode *param0);
EXPORT_FUNC TextNode * PandaNode_C_downcast_to_TextNode_p_p(PandaNode *param0);


// PandaSystem

EXPORT_FUNC char const * PandaSystem_C_get_version_string_s_v();
EXPORT_FUNC char const * PandaSystem_C_get_package_version_string_s_v();
EXPORT_FUNC char const * PandaSystem_C_get_package_host_url_s_v();
EXPORT_FUNC char const * PandaSystem_C_get_p3d_coreapi_version_string_s_v();
EXPORT_FUNC int PandaSystem_C_get_major_version_i_v();
EXPORT_FUNC int PandaSystem_C_get_minor_version_i_v();
EXPORT_FUNC int PandaSystem_C_get_sequence_version_i_v();
EXPORT_FUNC bool PandaSystem_C_is_official_version_B_v();
EXPORT_FUNC int PandaSystem_C_get_memory_alignment_i_v();
EXPORT_FUNC char const * PandaSystem_C_get_distributor_s_v();
EXPORT_FUNC char const * PandaSystem_C_get_compiler_s_v();
EXPORT_FUNC char const * PandaSystem_C_get_build_date_s_v();
EXPORT_FUNC char const * PandaSystem_C_get_git_commit_s_v();
EXPORT_FUNC char const * PandaSystem_C_get_platform_s_v();
EXPORT_FUNC bool PandaSystem_C_has_system_B_ps(PandaSystem const *param0, char const *param1);
EXPORT_FUNC std::size_t PandaSystem_C_get_num_systems_p_p(PandaSystem const *param0);
EXPORT_FUNC char const * PandaSystem_C_get_system_s_pp(PandaSystem const *param0, std::size_t param1);
EXPORT_FUNC char const * PandaSystem_C_get_system_tag_s_pss(PandaSystem const *param0, char const *param1, char const *param2);
EXPORT_FUNC void PandaSystem_C_add_system_v_ps(PandaSystem *param0, char const *param1);
EXPORT_FUNC void PandaSystem_C_set_system_tag_v_psss(PandaSystem *param0, char const *param1, char const *param2, char const *param3);
EXPORT_FUNC bool PandaSystem_C_heap_trim_B_pp(PandaSystem *param0, std::size_t param1);
EXPORT_FUNC void PandaSystem_C_output_v_pp(PandaSystem const *param0, std::ostream *param1);
EXPORT_FUNC void PandaSystem_C_write_v_pp(PandaSystem const *param0, std::ostream *param1);
EXPORT_FUNC PandaSystem * PandaSystem_C_get_global_ptr_p_v();
EXPORT_FUNC int PandaSystem_C_get_class_type_i_v();
EXPORT_FUNC void PandaSystem_C_init_type_v_v();


// ReferenceCount

EXPORT_FUNC MemoryBase * ReferenceCount_C_upcast_to_MemoryBase_p_p(ReferenceCount *param0);
EXPORT_FUNC int ReferenceCount_C_get_ref_count_i_p(ReferenceCount const *param0);
EXPORT_FUNC void ReferenceCount_C_ref_v_p(ReferenceCount const *param0);
EXPORT_FUNC bool ReferenceCount_C_unref_B_p(ReferenceCount const *param0);
EXPORT_FUNC bool ReferenceCount_C_test_ref_count_integrity_B_p(ReferenceCount const *param0);
EXPORT_FUNC bool ReferenceCount_C_test_ref_count_nonzero_B_p(ReferenceCount const *param0);
EXPORT_FUNC void ReferenceCount_C_local_object_v_p(ReferenceCount *param0);
EXPORT_FUNC bool ReferenceCount_C_has_weak_list_B_p(ReferenceCount const *param0);
EXPORT_FUNC WeakReferenceList * ReferenceCount_C_get_weak_list_p_p(ReferenceCount const *param0);
EXPORT_FUNC WeakReferenceList * ReferenceCount_C_weak_ref_p_p(ReferenceCount *param0);
EXPORT_FUNC void ReferenceCount_C_weak_unref_v_p(ReferenceCount *param0);
EXPORT_FUNC bool ReferenceCount_C_ref_if_nonzero_B_p(ReferenceCount const *param0);
EXPORT_FUNC int ReferenceCount_C_get_class_type_i_v();
EXPORT_FUNC void ReferenceCount_C_init_type_v_v();


// TextEncoder

EXPORT_FUNC TextNode * TextEncoder_C_downcast_to_TextNode_p_p(TextEncoder *param0);


// TextNode

EXPORT_FUNC PandaNode * TextNode_C_upcast_to_PandaNode_p_p(TextNode *param0);
EXPORT_FUNC TextEncoder * TextNode_C_upcast_to_TextEncoder_p_p(TextNode *param0);
EXPORT_FUNC TextProperties * TextNode_C_upcast_to_TextProperties_p_p(TextNode *param0);
EXPORT_FUNC TextNode * TextNode_C_ctor_p_s(char const *param0);
EXPORT_FUNC TextNode * TextNode_C_ctor_p_sp(char const *param0, TextProperties const *param1);
EXPORT_FUNC PN_stdfloat TextNode_C_get_line_height_f_p(TextNode const *param0);
EXPORT_FUNC void TextNode_C_set_max_rows_v_pi(TextNode *param0, int param1);
EXPORT_FUNC void TextNode_C_clear_max_rows_v_p(TextNode *param0);
EXPORT_FUNC bool TextNode_C_has_max_rows_B_p(TextNode const *param0);
EXPORT_FUNC int TextNode_C_get_max_rows_i_p(TextNode const *param0);
EXPORT_FUNC bool TextNode_C_has_overflow_B_p(TextNode const *param0);
EXPORT_FUNC void TextNode_C_set_frame_color_v_pp(TextNode *param0, LColor const *param1);
EXPORT_FUNC void TextNode_C_set_frame_color_v_pffff(TextNode *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC LColor * TextNode_C_get_frame_color_p_p(TextNode const *param0);
EXPORT_FUNC void TextNode_C_set_card_border_v_pff(TextNode *param0, PN_stdfloat param1, PN_stdfloat param2);
EXPORT_FUNC void TextNode_C_clear_card_border_v_p(TextNode *param0);
EXPORT_FUNC PN_stdfloat TextNode_C_get_card_border_size_f_p(TextNode const *param0);
EXPORT_FUNC PN_stdfloat TextNode_C_get_card_border_uv_portion_f_p(TextNode const *param0);
EXPORT_FUNC bool TextNode_C_has_card_border_B_p(TextNode const *param0);
EXPORT_FUNC void TextNode_C_set_card_color_v_pp(TextNode *param0, LColor const *param1);
EXPORT_FUNC void TextNode_C_set_card_color_v_pffff(TextNode *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC LColor * TextNode_C_get_card_color_p_p(TextNode const *param0);
EXPORT_FUNC void TextNode_C_set_card_texture_v_pp(TextNode *param0, Texture *param1);
EXPORT_FUNC void TextNode_C_clear_card_texture_v_p(TextNode *param0);
EXPORT_FUNC bool TextNode_C_has_card_texture_B_p(TextNode const *param0);
EXPORT_FUNC Texture * TextNode_C_get_card_texture_p_p(TextNode const *param0);
EXPORT_FUNC void TextNode_C_set_frame_as_margin_v_pffff(TextNode *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC void TextNode_C_set_frame_actual_v_pffff(TextNode *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC void TextNode_C_clear_frame_v_p(TextNode *param0);
EXPORT_FUNC bool TextNode_C_has_frame_B_p(TextNode const *param0);
EXPORT_FUNC bool TextNode_C_is_frame_as_margin_B_p(TextNode const *param0);
EXPORT_FUNC LVecBase4 * TextNode_C_get_frame_as_set_p_p(TextNode const *param0);
EXPORT_FUNC LVecBase4 * TextNode_C_get_frame_actual_p_p(TextNode const *param0);
EXPORT_FUNC void TextNode_C_set_frame_line_width_v_pf(TextNode *param0, PN_stdfloat param1);
EXPORT_FUNC PN_stdfloat TextNode_C_get_frame_line_width_f_p(TextNode const *param0);
EXPORT_FUNC void TextNode_C_set_frame_corners_v_pB(TextNode *param0, bool param1);
EXPORT_FUNC bool TextNode_C_get_frame_corners_B_p(TextNode const *param0);
EXPORT_FUNC void TextNode_C_set_card_as_margin_v_pffff(TextNode *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC void TextNode_C_set_card_actual_v_pffff(TextNode *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC void TextNode_C_set_card_decal_v_pB(TextNode *param0, bool param1);
EXPORT_FUNC void TextNode_C_clear_card_v_p(TextNode *param0);
EXPORT_FUNC bool TextNode_C_has_card_B_p(TextNode const *param0);
EXPORT_FUNC bool TextNode_C_get_card_decal_B_p(TextNode const *param0);
EXPORT_FUNC bool TextNode_C_is_card_as_margin_B_p(TextNode const *param0);
EXPORT_FUNC LVecBase4 * TextNode_C_get_card_as_set_p_p(TextNode const *param0);
EXPORT_FUNC LVecBase4 * TextNode_C_get_card_actual_p_p(TextNode const *param0);
EXPORT_FUNC LVecBase4 * TextNode_C_get_card_transformed_p_p(TextNode const *param0);
EXPORT_FUNC void TextNode_C_set_transform_v_pp(TextNode *param0, LMatrix4 const *param1);
EXPORT_FUNC LMatrix4 * TextNode_C_get_transform_p_p(TextNode const *param0);
EXPORT_FUNC void TextNode_C_set_coordinate_system_v_pp(TextNode *param0, CoordinateSystem param1);
EXPORT_FUNC CoordinateSystem TextNode_C_get_coordinate_system_p_p(TextNode const *param0);
EXPORT_FUNC void TextNode_C_set_usage_hint_v_pp(TextNode *param0, GeomEnums::UsageHint param1);
EXPORT_FUNC GeomEnums::UsageHint TextNode_C_get_usage_hint_p_p(TextNode const *param0);
EXPORT_FUNC void TextNode_C_set_flatten_flags_v_pi(TextNode *param0, int param1);
EXPORT_FUNC int TextNode_C_get_flatten_flags_i_p(TextNode const *param0);
EXPORT_FUNC void TextNode_C_set_font_v_pp(TextNode *param0, TextFont *param1);
EXPORT_FUNC void TextNode_C_clear_font_v_p(TextNode *param0);
EXPORT_FUNC void TextNode_C_set_small_caps_v_pB(TextNode *param0, bool param1);
EXPORT_FUNC void TextNode_C_clear_small_caps_v_p(TextNode *param0);
EXPORT_FUNC void TextNode_C_set_small_caps_scale_v_pf(TextNode *param0, PN_stdfloat param1);
EXPORT_FUNC void TextNode_C_clear_small_caps_scale_v_p(TextNode *param0);
EXPORT_FUNC void TextNode_C_set_slant_v_pf(TextNode *param0, PN_stdfloat param1);
EXPORT_FUNC void TextNode_C_clear_slant_v_p(TextNode *param0);
EXPORT_FUNC void TextNode_C_set_align_v_pp(TextNode *param0, TextProperties::Alignment param1);
EXPORT_FUNC void TextNode_C_clear_align_v_p(TextNode *param0);
EXPORT_FUNC void TextNode_C_set_indent_v_pf(TextNode *param0, PN_stdfloat param1);
EXPORT_FUNC void TextNode_C_clear_indent_v_p(TextNode *param0);
EXPORT_FUNC void TextNode_C_set_wordwrap_v_pf(TextNode *param0, PN_stdfloat param1);
EXPORT_FUNC void TextNode_C_clear_wordwrap_v_p(TextNode *param0);
EXPORT_FUNC void TextNode_C_set_text_color_v_pp(TextNode *param0, LColor const *param1);
EXPORT_FUNC void TextNode_C_set_text_color_v_pffff(TextNode *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC void TextNode_C_clear_text_color_v_p(TextNode *param0);
EXPORT_FUNC void TextNode_C_set_shadow_color_v_pp(TextNode *param0, LColor const *param1);
EXPORT_FUNC void TextNode_C_set_shadow_color_v_pffff(TextNode *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC void TextNode_C_clear_shadow_color_v_p(TextNode *param0);
EXPORT_FUNC void TextNode_C_set_shadow_v_pp(TextNode *param0, LVecBase2 const *param1);
EXPORT_FUNC void TextNode_C_set_shadow_v_pff(TextNode *param0, PN_stdfloat param1, PN_stdfloat param2);
EXPORT_FUNC void TextNode_C_clear_shadow_v_p(TextNode *param0);
EXPORT_FUNC void TextNode_C_set_bin_v_ps(TextNode *param0, char const *param1);
EXPORT_FUNC void TextNode_C_clear_bin_v_p(TextNode *param0);
EXPORT_FUNC int TextNode_C_set_draw_order_i_pi(TextNode *param0, int param1);
EXPORT_FUNC void TextNode_C_clear_draw_order_v_p(TextNode *param0);
EXPORT_FUNC void TextNode_C_set_tab_width_v_pf(TextNode *param0, PN_stdfloat param1);
EXPORT_FUNC void TextNode_C_clear_tab_width_v_p(TextNode *param0);
EXPORT_FUNC void TextNode_C_set_glyph_scale_v_pf(TextNode *param0, PN_stdfloat param1);
EXPORT_FUNC void TextNode_C_clear_glyph_scale_v_p(TextNode *param0);
EXPORT_FUNC void TextNode_C_set_glyph_shift_v_pf(TextNode *param0, PN_stdfloat param1);
EXPORT_FUNC void TextNode_C_clear_glyph_shift_v_p(TextNode *param0);
EXPORT_FUNC char const * TextNode_C_get_wordwrapped_text_s_p(TextNode const *param0);
EXPORT_FUNC PN_stdfloat TextNode_C_calc_width_f_ps(TextNode const *param0, char const *param1);
EXPORT_FUNC PN_stdfloat TextNode_C_calc_width_f_pp(TextNode const *param0, wchar_t const *param1);
EXPORT_FUNC PN_stdfloat TextNode_C_calc_width_f_pp_1_f_pp(TextNode const *param0, wchar_t param1);
EXPORT_FUNC bool TextNode_C_has_exact_character_B_pp(TextNode const *param0, wchar_t param1);
EXPORT_FUNC bool TextNode_C_has_character_B_pp(TextNode const *param0, wchar_t param1);
EXPORT_FUNC bool TextNode_C_is_whitespace_B_pp(TextNode const *param0, wchar_t param1);
EXPORT_FUNC wchar_t const * TextNode_C_get_wordwrapped_wtext_p_p(TextNode const *param0);
EXPORT_FUNC void TextNode_C_output_v_pp(TextNode const *param0, std::ostream *param1);
EXPORT_FUNC void TextNode_C_write_v_ppi(TextNode const *param0, std::ostream *param1, int param2);
EXPORT_FUNC void TextNode_C_write_v_pp(TextNode const *param0, std::ostream *param1);
EXPORT_FUNC PN_stdfloat TextNode_C_get_left_f_p(TextNode const *param0);
EXPORT_FUNC PN_stdfloat TextNode_C_get_right_f_p(TextNode const *param0);
EXPORT_FUNC PN_stdfloat TextNode_C_get_bottom_f_p(TextNode const *param0);
EXPORT_FUNC PN_stdfloat TextNode_C_get_top_f_p(TextNode const *param0);
EXPORT_FUNC PN_stdfloat TextNode_C_get_height_f_p(TextNode const *param0);
EXPORT_FUNC PN_stdfloat TextNode_C_get_width_f_p(TextNode const *param0);
EXPORT_FUNC LPoint3 * TextNode_C_get_upper_left_3d_p_p(TextNode const *param0);
EXPORT_FUNC LPoint3 * TextNode_C_get_lower_right_3d_p_p(TextNode const *param0);
EXPORT_FUNC int TextNode_C_get_num_rows_i_p(TextNode const *param0);
EXPORT_FUNC PointerTo< PandaNode > * TextNode_C_generate_p_p(TextNode *param0);
EXPORT_FUNC void TextNode_C_update_v_p(TextNode *param0);
EXPORT_FUNC void TextNode_C_force_update_v_p(TextNode *param0);
EXPORT_FUNC PointerTo< PandaNode > * TextNode_C_get_internal_geom_p_p(TextNode const *param0);
EXPORT_FUNC TextFont * TextNode_C_get_font_p_p(TextNode const *param0);
EXPORT_FUNC bool TextNode_C_get_small_caps_B_p(TextNode const *param0);
EXPORT_FUNC PN_stdfloat TextNode_C_get_small_caps_scale_f_p(TextNode const *param0);
EXPORT_FUNC PN_stdfloat TextNode_C_get_slant_f_p(TextNode const *param0);
EXPORT_FUNC bool TextNode_C_get_underscore_B_p(TextNode const *param0);
EXPORT_FUNC void TextNode_C_set_underscore_v_pB(TextNode *param0, bool param1);
EXPORT_FUNC PN_stdfloat TextNode_C_get_underscore_height_f_p(TextNode const *param0);
EXPORT_FUNC void TextNode_C_set_underscore_height_v_pf(TextNode *param0, PN_stdfloat param1);
EXPORT_FUNC TextProperties::Alignment TextNode_C_get_align_p_p(TextNode const *param0);
EXPORT_FUNC PN_stdfloat TextNode_C_get_indent_f_p(TextNode const *param0);
EXPORT_FUNC PN_stdfloat TextNode_C_get_wordwrap_f_p(TextNode const *param0);
EXPORT_FUNC bool TextNode_C_get_preserve_trailing_whitespace_B_p(TextNode const *param0);
EXPORT_FUNC void TextNode_C_set_preserve_trailing_whitespace_v_pB(TextNode *param0, bool param1);
EXPORT_FUNC LColor * TextNode_C_get_text_color_p_p(TextNode const *param0);
EXPORT_FUNC LColor * TextNode_C_get_shadow_color_p_p(TextNode const *param0);
EXPORT_FUNC LVector2 * TextNode_C_get_shadow_p_p(TextNode const *param0);
EXPORT_FUNC char const * TextNode_C_get_bin_s_p(TextNode const *param0);
EXPORT_FUNC int TextNode_C_get_draw_order_i_p(TextNode const *param0);
EXPORT_FUNC PN_stdfloat TextNode_C_get_tab_width_f_p(TextNode const *param0);
EXPORT_FUNC PN_stdfloat TextNode_C_get_glyph_scale_f_p(TextNode const *param0);
EXPORT_FUNC PN_stdfloat TextNode_C_get_glyph_shift_f_p(TextNode const *param0);
EXPORT_FUNC PN_stdfloat TextNode_C_get_text_scale_f_p(TextNode const *param0);
EXPORT_FUNC void TextNode_C_set_text_scale_v_pf(TextNode *param0, PN_stdfloat param1);
EXPORT_FUNC void TextNode_C_text_changed_v_p(TextNode *param0);
EXPORT_FUNC int TextNode_C_get_unsafe_to_apply_attribs_i_p(TextNode const *param0);
EXPORT_FUNC void TextNode_C_apply_attribs_to_vertices_v_ppip(TextNode *param0, AccumulatedAttribs const *param1, int param2, GeomTransformer *param3);
EXPORT_FUNC bool TextNode_C_cull_callback_B_ppp(TextNode *param0, CullTraverser *param1, CullTraverserData *param2);
EXPORT_FUNC bool TextNode_C_is_renderable_B_p(TextNode const *param0);
EXPORT_FUNC void TextNode_C_r_prepare_scene_v_ppppp(TextNode *param0, GraphicsStateGuardianBase *param1, RenderState const *param2, GeomTransformer *param3, Thread *param4);
EXPORT_FUNC int TextNode_C_get_class_type_i_v();
EXPORT_FUNC void TextNode_C_init_type_v_v();
EXPORT_FUNC int TextNode_C_get_type_i_p(TextNode const *param0);
EXPORT_FUNC int TextNode_C_force_init_type_i_p(TextNode *param0);


// TextProperties

EXPORT_FUNC TextNode * TextProperties_C_downcast_to_TextNode_p_p(TextProperties *param0);


// Thread

EXPORT_FUNC TypedReferenceCount * Thread_C_upcast_to_TypedReferenceCount_p_p(Thread *param0);
EXPORT_FUNC Namable * Thread_C_upcast_to_Namable_p_p(Thread *param0);
EXPORT_FUNC PointerTo< Thread > * Thread_C_bind_thread_p_ss(char const *param0, char const *param1);
EXPORT_FUNC char const * Thread_C_get_sync_name_s_p(Thread const *param0);
EXPORT_FUNC int Thread_C_get_pstats_index_i_p(Thread const *param0);
EXPORT_FUNC int Thread_C_get_python_index_i_p(Thread const *param0);
EXPORT_FUNC char const * Thread_C_get_unique_id_s_p(Thread const *param0);
EXPORT_FUNC int Thread_C_get_pipeline_stage_i_p(Thread const *param0);
EXPORT_FUNC void Thread_C_set_pipeline_stage_v_pi(Thread *param0, int param1);
EXPORT_FUNC void Thread_C_set_min_pipeline_stage_v_pi(Thread *param0, int param1);
EXPORT_FUNC Thread * Thread_C_get_main_thread_p_v();
EXPORT_FUNC Thread * Thread_C_get_external_thread_p_v();
EXPORT_FUNC Thread * Thread_C_get_current_thread_p_v();
EXPORT_FUNC int Thread_C_get_current_pipeline_stage_i_v();
EXPORT_FUNC bool Thread_C_is_threading_supported_B_v();
EXPORT_FUNC bool Thread_C_is_true_threads_B_v();
EXPORT_FUNC bool Thread_C_is_simple_threads_B_v();
EXPORT_FUNC void Thread_C_sleep_v_d(double param0);
EXPORT_FUNC void Thread_C_force_yield_v_v();
EXPORT_FUNC void Thread_C_consider_yield_v_v();
EXPORT_FUNC void Thread_C_output_v_pp(Thread const *param0, std::ostream *param1);
EXPORT_FUNC void Thread_C_output_blocker_v_pp(Thread const *param0, std::ostream *param1);
EXPORT_FUNC void Thread_C_write_status_v_p(std::ostream *param0);
EXPORT_FUNC bool Thread_C_is_started_B_p(Thread const *param0);
EXPORT_FUNC bool Thread_C_is_joinable_B_p(Thread const *param0);
EXPORT_FUNC bool Thread_C_start_B_ppB(Thread *param0, ThreadPriority param1, bool param2);
EXPORT_FUNC void Thread_C_join_v_p(Thread *param0);
EXPORT_FUNC void Thread_C_preempt_v_p(Thread *param0);
EXPORT_FUNC TypedReferenceCount * Thread_C_get_current_task_p_p(Thread const *param0);
EXPORT_FUNC void Thread_C_set_python_index_v_pi(Thread *param0, int param1);
EXPORT_FUNC void Thread_C_prepare_for_exit_v_v();
EXPORT_FUNC void Thread_C_set_pstats_index_v_pi(Thread *param0, int param1);
EXPORT_FUNC void Thread_C_set_pstats_callback_v_pp(Thread *param0, Thread::PStatsCallback *param1);
EXPORT_FUNC Thread::PStatsCallback * Thread_C_get_pstats_callback_p_p(Thread const *param0);
EXPORT_FUNC int Thread_C_get_class_type_i_v();
EXPORT_FUNC void Thread_C_init_type_v_v();
EXPORT_FUNC int Thread_C_get_type_i_p(Thread const *param0);
EXPORT_FUNC int Thread_C_force_init_type_i_p(Thread *param0);


// TypedObject

EXPORT_FUNC MemoryBase * TypedObject_C_upcast_to_MemoryBase_p_p(TypedObject *param0);
EXPORT_FUNC int TypedObject_C_get_type_i_p(TypedObject const *param0);
EXPORT_FUNC int TypedObject_C_get_type_index_i_p(TypedObject const *param0);
EXPORT_FUNC bool TypedObject_C_is_of_type_B_pi(TypedObject const *param0, int param1);
EXPORT_FUNC bool TypedObject_C_is_exact_type_B_pi(TypedObject const *param0, int param1);
EXPORT_FUNC int TypedObject_C_get_best_parent_from_Set_i_pp(TypedObject const *param0, std::set< int > const *param1);
EXPORT_FUNC int TypedObject_C_force_init_type_i_p(TypedObject *param0);
EXPORT_FUNC TypedObject * TypedObject_C_as_typed_object_p_p(TypedObject *param0);
EXPORT_FUNC TypedObject const * TypedObject_C_as_typed_object_p_p_1_p_p(TypedObject const *param0);
EXPORT_FUNC int TypedObject_C_get_class_type_i_v();
EXPORT_FUNC void TypedObject_C_init_type_v_v();


// TypedReferenceCount

EXPORT_FUNC Thread * TypedReferenceCount_C_downcast_to_Thread_p_p(TypedReferenceCount *param0);


// TypedWritable

EXPORT_FUNC TypedWritable * TypedWritable_C_ctor_p_v();
EXPORT_FUNC TypedWritable * TypedWritable_C_ctor_p_p(TypedWritable const *param0);
EXPORT_FUNC void TypedWritable_C_write_datagram_v_ppp(TypedWritable *param0, BamWriter *param1, Datagram *param2);
EXPORT_FUNC void TypedWritable_C_update_bam_nested_v_pp(TypedWritable *param0, BamWriter *param1);
EXPORT_FUNC bool TypedWritable_C_require_fully_complete_B_p(TypedWritable const *param0);
EXPORT_FUNC void TypedWritable_C_fillin_v_ppp(TypedWritable *param0, DatagramIterator *param1, BamReader *param2);
EXPORT_FUNC void TypedWritable_C_finalize_v_pp(TypedWritable *param0, BamReader *param1);
EXPORT_FUNC ReferenceCount * TypedWritable_C_as_reference_count_p_p(TypedWritable *param0);
EXPORT_FUNC void TypedWritable_C_mark_bam_modified_v_p(TypedWritable *param0);
EXPORT_FUNC UpdateSeq * TypedWritable_C_get_bam_modified_p_p(TypedWritable const *param0);
EXPORT_FUNC vector_uchar TypedWritable_C_encode_to_bam_stream_p_p(TypedWritable const *param0);
EXPORT_FUNC bool TypedWritable_C_encode_to_bam_stream_B_ppp(TypedWritable const *param0, vector_uchar *param1, BamWriter *param2);
EXPORT_FUNC bool TypedWritable_C_encode_to_bam_stream_B_pp(TypedWritable const *param0, vector_uchar *param1);
EXPORT_FUNC int TypedWritable_C_get_class_type_i_v();
EXPORT_FUNC void TypedWritable_C_init_type_v_v();
EXPORT_FUNC int TypedWritable_C_force_init_type_i_p(TypedWritable *param0);


// TypedWritableReferenceCount

EXPORT_FUNC PandaNode * TypedWritableReferenceCount_C_downcast_to_PandaNode_p_p(TypedWritableReferenceCount *param0);
EXPORT_FUNC GeomVertexFormat * TypedWritableReferenceCount_C_downcast_to_GeomVertexFormat_p_p(TypedWritableReferenceCount *param0);


// WindowFramework

EXPORT_FUNC PandaFramework * WindowFramework_C_get_panda_framework_p_p(WindowFramework const *param0);
EXPORT_FUNC GraphicsWindow * WindowFramework_C_get_graphics_window_p_p(WindowFramework const *param0);
EXPORT_FUNC GraphicsOutput * WindowFramework_C_get_graphics_output_p_p(WindowFramework const *param0);
EXPORT_FUNC NodePath * WindowFramework_C_get_camera_group_p_p(WindowFramework *param0);
EXPORT_FUNC int WindowFramework_C_get_num_cameras_i_p(WindowFramework const *param0);
EXPORT_FUNC Camera * WindowFramework_C_get_camera_p_pi(WindowFramework const *param0, int param1);
EXPORT_FUNC DisplayRegion * WindowFramework_C_get_display_region_2d_p_p(WindowFramework const *param0);
EXPORT_FUNC DisplayRegion * WindowFramework_C_get_display_region_3d_p_p(WindowFramework const *param0);
EXPORT_FUNC NodePath * WindowFramework_C_get_render_p_p(WindowFramework *param0);
EXPORT_FUNC NodePath * WindowFramework_C_get_render_2d_p_p(WindowFramework *param0);
EXPORT_FUNC NodePath * WindowFramework_C_get_aspect_2d_p_p(WindowFramework *param0);
EXPORT_FUNC NodePath * WindowFramework_C_get_pixel_2d_p_p(WindowFramework *param0);
EXPORT_FUNC NodePath * WindowFramework_C_get_mouse_p_p(WindowFramework *param0);
EXPORT_FUNC NodePath * WindowFramework_C_get_button_thrower_p_p(WindowFramework *param0);
EXPORT_FUNC void WindowFramework_C_enable_keyboard_v_p(WindowFramework *param0);
EXPORT_FUNC void WindowFramework_C_setup_trackball_v_p(WindowFramework *param0);
EXPORT_FUNC void WindowFramework_C_center_trackball_v_pp(WindowFramework *param0, NodePath const *param1);
EXPORT_FUNC bool WindowFramework_C_load_models_B_ppp(WindowFramework *param0, NodePath const *param1, pvector< Filename > const *param2);
EXPORT_FUNC NodePath * WindowFramework_C_load_model_p_ppp(WindowFramework *param0, NodePath const *param1, Filename *param2);
EXPORT_FUNC NodePath * WindowFramework_C_load_default_model_p_pp(WindowFramework *param0, NodePath const *param1);
EXPORT_FUNC void WindowFramework_C_loop_animations_v_pi(WindowFramework *param0, int param1);
EXPORT_FUNC void WindowFramework_C_loop_animations_v_p(WindowFramework *param0);
EXPORT_FUNC void WindowFramework_C_stagger_animations_v_p(WindowFramework *param0);
EXPORT_FUNC void WindowFramework_C_next_anim_control_v_p(WindowFramework *param0);
EXPORT_FUNC void WindowFramework_C_set_anim_controls_v_pB(WindowFramework *param0, bool param1);
EXPORT_FUNC bool WindowFramework_C_get_anim_controls_B_p(WindowFramework const *param0);
EXPORT_FUNC void WindowFramework_C_adjust_dimensions_v_p(WindowFramework *param0);
EXPORT_FUNC WindowFramework * WindowFramework_C_split_window_p_pp(WindowFramework *param0, WindowFramework::SplitType param1);
EXPORT_FUNC WindowFramework * WindowFramework_C_split_window_p_p(WindowFramework *param0);
EXPORT_FUNC void WindowFramework_C_set_wireframe_v_pBB(WindowFramework *param0, bool param1, bool param2);
EXPORT_FUNC void WindowFramework_C_set_wireframe_v_pB(WindowFramework *param0, bool param1);
EXPORT_FUNC void WindowFramework_C_set_texture_v_pB(WindowFramework *param0, bool param1);
EXPORT_FUNC void WindowFramework_C_set_two_sided_v_pB(WindowFramework *param0, bool param1);
EXPORT_FUNC void WindowFramework_C_set_one_sided_reverse_v_pB(WindowFramework *param0, bool param1);
EXPORT_FUNC void WindowFramework_C_set_lighting_v_pB(WindowFramework *param0, bool param1);
EXPORT_FUNC void WindowFramework_C_set_perpixel_v_pB(WindowFramework *param0, bool param1);
EXPORT_FUNC void WindowFramework_C_set_background_type_v_pp(WindowFramework *param0, WindowFramework::BackgroundType param1);
EXPORT_FUNC bool WindowFramework_C_get_wireframe_B_p(WindowFramework const *param0);
EXPORT_FUNC bool WindowFramework_C_get_wireframe_filled_B_p(WindowFramework const *param0);
EXPORT_FUNC bool WindowFramework_C_get_texture_B_p(WindowFramework const *param0);
EXPORT_FUNC bool WindowFramework_C_get_two_sided_B_p(WindowFramework const *param0);
EXPORT_FUNC bool WindowFramework_C_get_one_sided_reverse_B_p(WindowFramework const *param0);
EXPORT_FUNC bool WindowFramework_C_get_lighting_B_p(WindowFramework const *param0);
EXPORT_FUNC bool WindowFramework_C_get_perpixel_B_p(WindowFramework const *param0);
EXPORT_FUNC WindowFramework::BackgroundType WindowFramework_C_get_background_type_p_p(WindowFramework const *param0);
EXPORT_FUNC TextFont * WindowFramework_C_get_shuttle_controls_font_p_v();
EXPORT_FUNC NodePath * WindowFramework_C_make_camera_p_p(WindowFramework *param0);
EXPORT_FUNC int WindowFramework_C_get_class_type_i_v();
EXPORT_FUNC void WindowFramework_C_init_type_v_v();
EXPORT_FUNC int WindowFramework_C_get_type_i_p(WindowFramework const *param0);
EXPORT_FUNC int WindowFramework_C_force_init_type_i_p(WindowFramework *param0);
EXPORT_FUNC WindowFramework * WindowFramework_C_ctor_p_p(WindowFramework const *param0);


// 


// CachedTypedWritableReferenceCount


int
CachedTypedWritableReferenceCount_C_get_cache_ref_count_i_p(CachedTypedWritableReferenceCount const *param0) {
    return (*param0).get_cache_ref_count();
}


void
CachedTypedWritableReferenceCount_C_cache_ref_v_p(CachedTypedWritableReferenceCount const *param0) {
    (*param0).cache_ref();
}


bool
CachedTypedWritableReferenceCount_C_cache_unref_B_p(CachedTypedWritableReferenceCount const *param0) {
    return (*param0).cache_unref();
}


bool
CachedTypedWritableReferenceCount_C_test_ref_count_integrity_B_p(CachedTypedWritableReferenceCount const *param0) {
    return (*param0).test_ref_count_integrity();
}


void
CachedTypedWritableReferenceCount_C_cache_ref_only_v_p(CachedTypedWritableReferenceCount const *param0) {
    (*param0).cache_ref_only();
}


int
CachedTypedWritableReferenceCount_C_get_class_type_i_v() {
    return (CachedTypedWritableReferenceCount::get_class_type()).get_index();
}


void
CachedTypedWritableReferenceCount_C_init_type_v_v() {
    CachedTypedWritableReferenceCount::init_type();
}


// Camera


Camera *
Camera_C_ctor_p_p(Camera const *param0) {
    return new Camera(*param0);
}


Camera *
Camera_C_ctor_p_sp(char const *param0, Lens *param1) {
    return new Camera(std::string(param0), param1);
}


Camera *
Camera_C_ctor_p_s(char const *param0) {
    return new Camera(std::string(param0));
}


PandaNode *
Camera_C_make_copy_p_p(Camera const *param0) {
    return (*param0).make_copy();
}


bool
Camera_C_safe_to_flatten_B_p(Camera const *param0) {
    return (*param0).safe_to_flatten();
}


bool
Camera_C_safe_to_transform_B_p(Camera const *param0) {
    return (*param0).safe_to_transform();
}


void
Camera_C_set_active_v_pB(Camera *param0, bool param1) {
    (*param0).set_active(param1);
}


bool
Camera_C_is_active_B_p(Camera const *param0) {
    return (*param0).is_active();
}


void
Camera_C_set_scene_v_pp(Camera *param0, NodePath const *param1) {
    (*param0).set_scene(*param1);
}


NodePath const *
Camera_C_get_scene_p_p(Camera const *param0) {
    return &((*param0).get_scene());
}


std::size_t
Camera_C_get_num_display_regions_p_p(Camera const *param0) {
    return (*param0).get_num_display_regions();
}


DisplayRegion *
Camera_C_get_display_region_p_pp(Camera const *param0, std::size_t param1) {
    return (*param0).get_display_region(param1);
}


void
Camera_C_set_camera_mask_v_pp(Camera *param0, DrawMask *param1) {
    (*param0).set_camera_mask(*param1);
}


DrawMask *
Camera_C_get_camera_mask_p_p(Camera const *param0) {
    return new DrawMask((*param0).get_camera_mask());
}


void
Camera_C_set_cull_center_v_pp(Camera *param0, NodePath const *param1) {
    (*param0).set_cull_center(*param1);
}


NodePath const *
Camera_C_get_cull_center_p_p(Camera const *param0) {
    return &((*param0).get_cull_center());
}


void
Camera_C_set_cull_bounds_v_pp(Camera *param0, BoundingVolume *param1) {
    (*param0).set_cull_bounds(param1);
}


BoundingVolume *
Camera_C_get_cull_bounds_p_p(Camera const *param0) {
    return (*param0).get_cull_bounds();
}


void
Camera_C_set_lod_center_v_pp(Camera *param0, NodePath const *param1) {
    (*param0).set_lod_center(*param1);
}


NodePath const *
Camera_C_get_lod_center_p_p(Camera const *param0) {
    return &((*param0).get_lod_center());
}


void
Camera_C_set_initial_state_v_pp(Camera *param0, RenderState const *param1) {
    (*param0).set_initial_state(param1);
}


ConstPointerTo< RenderState > *
Camera_C_get_initial_state_p_p(Camera const *param0) {
    return new ConstPointerTo< RenderState >((*param0).get_initial_state());
}


void
Camera_C_set_tag_state_key_v_ps(Camera *param0, char const *param1) {
    (*param0).set_tag_state_key(std::string(param1));
}


char const *
Camera_C_get_tag_state_key_s_p(Camera const *param0) {
    return ((*param0).get_tag_state_key()).c_str();
}


void
Camera_C_set_lod_scale_v_pf(Camera *param0, PN_stdfloat param1) {
    (*param0).set_lod_scale(param1);
}


PN_stdfloat
Camera_C_get_lod_scale_f_p(Camera const *param0) {
    return (*param0).get_lod_scale();
}


void
Camera_C_set_tag_state_v_psp(Camera *param0, char const *param1, RenderState const *param2) {
    (*param0).set_tag_state(std::string(param1), param2);
}


void
Camera_C_clear_tag_state_v_ps(Camera *param0, char const *param1) {
    (*param0).clear_tag_state(std::string(param1));
}


void
Camera_C_clear_tag_states_v_p(Camera *param0) {
    (*param0).clear_tag_states();
}


bool
Camera_C_has_tag_state_B_ps(Camera const *param0, char const *param1) {
    return (*param0).has_tag_state(std::string(param1));
}


ConstPointerTo< RenderState > *
Camera_C_get_tag_state_p_ps(Camera const *param0, char const *param1) {
    return new ConstPointerTo< RenderState >((*param0).get_tag_state(std::string(param1)));
}


void
Camera_C_set_aux_scene_data_v_ppp(Camera *param0, NodePath const *param1, AuxSceneData *param2) {
    (*param0).set_aux_scene_data(*param1, param2);
}


bool
Camera_C_clear_aux_scene_data_B_pp(Camera *param0, NodePath const *param1) {
    return (*param0).clear_aux_scene_data(*param1);
}


AuxSceneData *
Camera_C_get_aux_scene_data_p_pp(Camera const *param0, NodePath const *param1) {
    return (*param0).get_aux_scene_data(*param1);
}


void
Camera_C_list_aux_scene_data_v_pp(Camera const *param0, std::ostream *param1) {
    (*param0).list_aux_scene_data(*param1);
}


int
Camera_C_cleanup_aux_scene_data_i_pp(Camera *param0, Thread *param1) {
    return (*param0).cleanup_aux_scene_data(param1);
}


int
Camera_C_cleanup_aux_scene_data_i_p(Camera *param0) {
    return (*param0).cleanup_aux_scene_data();
}


void
Camera_C_register_with_read_factory_v_v() {
    Camera::register_with_read_factory();
}


void
Camera_C_write_datagram_v_ppp(Camera *param0, BamWriter *param1, Datagram *param2) {
    (*param0).write_datagram(param1, *param2);
}


int
Camera_C_get_class_type_i_v() {
    return (Camera::get_class_type()).get_index();
}


void
Camera_C_init_type_v_v() {
    Camera::init_type();
}


int
Camera_C_get_type_i_p(Camera const *param0) {
    return ((*param0).get_type()).get_index();
}


int
Camera_C_force_init_type_i_p(Camera *param0) {
    return ((*param0).force_init_type()).get_index();
}


// ConfigPage


ConfigPage *
ConfigPage_C_get_default_page_p_v() {
    return ConfigPage::get_default_page();
}


ConfigPage *
ConfigPage_C_get_local_page_p_v() {
    return ConfigPage::get_local_page();
}


char const *
ConfigPage_C_get_name_s_p(ConfigPage const *param0) {
    return ((*param0).get_name()).c_str();
}


bool
ConfigPage_C_is_special_B_p(ConfigPage const *param0) {
    return (*param0).is_special();
}


bool
ConfigPage_C_is_implicit_B_p(ConfigPage const *param0) {
    return (*param0).is_implicit();
}


void
ConfigPage_C_set_sort_v_pi(ConfigPage *param0, int param1) {
    (*param0).set_sort(param1);
}


int
ConfigPage_C_get_sort_i_p(ConfigPage const *param0) {
    return (*param0).get_sort();
}


int
ConfigPage_C_get_page_seq_i_p(ConfigPage const *param0) {
    return (*param0).get_page_seq();
}


int
ConfigPage_C_get_trust_level_i_p(ConfigPage const *param0) {
    return (*param0).get_trust_level();
}


void
ConfigPage_C_set_trust_level_v_pi(ConfigPage *param0, int param1) {
    (*param0).set_trust_level(param1);
}


char const *
ConfigPage_C_get_signature_s_p(ConfigPage const *param0) {
    return ((*param0).get_signature()).c_str();
}


void
ConfigPage_C_clear_v_p(ConfigPage *param0) {
    (*param0).clear();
}


bool
ConfigPage_C_read_prc_B_pp(ConfigPage *param0, std::istream *param1) {
    return (*param0).read_prc(*param1);
}


bool
ConfigPage_C_read_encrypted_prc_B_pps(ConfigPage *param0, std::istream *param1, char const *param2) {
    return (*param0).read_encrypted_prc(*param1, std::string(param2));
}


ConfigDeclaration *
ConfigPage_C_make_declaration_p_pps(ConfigPage *param0, ConfigVariableCore *param1, char const *param2) {
    return (*param0).make_declaration(param1, std::string(param2));
}


ConfigDeclaration *
ConfigPage_C_make_declaration_p_pss(ConfigPage *param0, char const *param1, char const *param2) {
    return (*param0).make_declaration(std::string(param1), std::string(param2));
}


bool
ConfigPage_C_delete_declaration_B_pp(ConfigPage *param0, ConfigDeclaration *param1) {
    return (*param0).delete_declaration(param1);
}


std::size_t
ConfigPage_C_get_num_declarations_p_p(ConfigPage const *param0) {
    return (*param0).get_num_declarations();
}


ConfigDeclaration const *
ConfigPage_C_get_declaration_p_pp(ConfigPage const *param0, std::size_t param1) {
    return (*param0).get_declaration(param1);
}


ConfigDeclaration *
ConfigPage_C_modify_declaration_p_pp(ConfigPage *param0, std::size_t param1) {
    return (*param0).modify_declaration(param1);
}


char const *
ConfigPage_C_get_variable_name_s_pp(ConfigPage const *param0, std::size_t param1) {
    static std::string string_holder = (*param0).get_variable_name(param1);
    return string_holder.c_str();
}


char const *
ConfigPage_C_get_string_value_s_pp(ConfigPage const *param0, std::size_t param1) {
    static std::string string_holder = (*param0).get_string_value(param1);
    return string_holder.c_str();
}


bool
ConfigPage_C_is_variable_used_B_pp(ConfigPage const *param0, std::size_t param1) {
    return (*param0).is_variable_used(param1);
}


void
ConfigPage_C_output_v_pp(ConfigPage const *param0, std::ostream *param1) {
    (*param0).output(*param1);
}


void
ConfigPage_C_output_brief_signature_v_pp(ConfigPage const *param0, std::ostream *param1) {
    (*param0).output_brief_signature(*param1);
}


void
ConfigPage_C_write_v_pp(ConfigPage const *param0, std::ostream *param1) {
    (*param0).write(*param1);
}


// CopyOnWriteObject


Geom *
CopyOnWriteObject_C_downcast_to_Geom_p_p(CopyOnWriteObject *param0) {
    return (Geom *)param0;
}


GeomPrimitive *
CopyOnWriteObject_C_downcast_to_GeomPrimitive_p_p(CopyOnWriteObject *param0) {
    return (GeomPrimitive *)param0;
}


GeomVertexData *
CopyOnWriteObject_C_downcast_to_GeomVertexData_p_p(CopyOnWriteObject *param0) {
    return (GeomVertexData *)param0;
}


// DrawableRegion


DrawableRegion *
DrawableRegion_C_ctor_p_v() {
    return new DrawableRegion();
}


DrawableRegion *
DrawableRegion_C_ctor_p_p(DrawableRegion const *param0) {
    return new DrawableRegion(*param0);
}


void
DrawableRegion_C_copy_clear_settings_v_pp(DrawableRegion *param0, DrawableRegion const *param1) {
    (*param0).copy_clear_settings(*param1);
}


void
DrawableRegion_C_set_clear_color_active_v_pB(DrawableRegion *param0, bool param1) {
    (*param0).set_clear_color_active(param1);
}


bool
DrawableRegion_C_get_clear_color_active_B_p(DrawableRegion const *param0) {
    return (*param0).get_clear_color_active();
}


void
DrawableRegion_C_set_clear_depth_active_v_pB(DrawableRegion *param0, bool param1) {
    (*param0).set_clear_depth_active(param1);
}


bool
DrawableRegion_C_get_clear_depth_active_B_p(DrawableRegion const *param0) {
    return (*param0).get_clear_depth_active();
}


void
DrawableRegion_C_set_clear_stencil_active_v_pB(DrawableRegion *param0, bool param1) {
    (*param0).set_clear_stencil_active(param1);
}


bool
DrawableRegion_C_get_clear_stencil_active_B_p(DrawableRegion const *param0) {
    return (*param0).get_clear_stencil_active();
}


void
DrawableRegion_C_set_clear_color_v_pp(DrawableRegion *param0, LColor const *param1) {
    (*param0).set_clear_color(*param1);
}


LColor const *
DrawableRegion_C_get_clear_color_p_p(DrawableRegion const *param0) {
    return &((*param0).get_clear_color());
}


void
DrawableRegion_C_set_clear_depth_v_pf(DrawableRegion *param0, PN_stdfloat param1) {
    (*param0).set_clear_depth(param1);
}


PN_stdfloat
DrawableRegion_C_get_clear_depth_f_p(DrawableRegion const *param0) {
    return (*param0).get_clear_depth();
}


void
DrawableRegion_C_set_clear_stencil_v_pI(DrawableRegion *param0, unsigned int param1) {
    (*param0).set_clear_stencil(param1);
}


unsigned int
DrawableRegion_C_get_clear_stencil_I_p(DrawableRegion const *param0) {
    return (*param0).get_clear_stencil();
}


void
DrawableRegion_C_set_clear_active_v_piB(DrawableRegion *param0, int param1, bool param2) {
    (*param0).set_clear_active(param1, param2);
}


bool
DrawableRegion_C_get_clear_active_B_pi(DrawableRegion const *param0, int param1) {
    return (*param0).get_clear_active(param1);
}


void
DrawableRegion_C_set_clear_value_v_pip(DrawableRegion *param0, int param1, LColor const *param2) {
    (*param0).set_clear_value(param1, *param2);
}


LColor const *
DrawableRegion_C_get_clear_value_p_pi(DrawableRegion const *param0, int param1) {
    return &((*param0).get_clear_value(param1));
}


void
DrawableRegion_C_disable_clears_v_p(DrawableRegion *param0) {
    (*param0).disable_clears();
}


bool
DrawableRegion_C_is_any_clear_active_B_p(DrawableRegion const *param0) {
    return (*param0).is_any_clear_active();
}


void
DrawableRegion_C_set_pixel_zoom_v_pf(DrawableRegion *param0, PN_stdfloat param1) {
    (*param0).set_pixel_zoom(param1);
}


PN_stdfloat
DrawableRegion_C_get_pixel_zoom_f_p(DrawableRegion const *param0) {
    return (*param0).get_pixel_zoom();
}


PN_stdfloat
DrawableRegion_C_get_pixel_factor_f_p(DrawableRegion const *param0) {
    return (*param0).get_pixel_factor();
}


bool
DrawableRegion_C_supports_pixel_zoom_B_p(DrawableRegion const *param0) {
    return (*param0).supports_pixel_zoom();
}


int
DrawableRegion_C_get_renderbuffer_type_i_i(int param0) {
    return DrawableRegion::get_renderbuffer_type(param0);
}


int
DrawableRegion_C_get_screenshot_buffer_type_i_p(DrawableRegion const *param0) {
    return (*param0).get_screenshot_buffer_type();
}


int
DrawableRegion_C_get_draw_buffer_type_i_p(DrawableRegion const *param0) {
    return (*param0).get_draw_buffer_type();
}


GraphicsOutput *
DrawableRegion_C_downcast_to_GraphicsOutput_p_p(DrawableRegion *param0) {
    return (GraphicsOutput *)param0;
}


// Engine


Engine *
Engine_C_ctor_p_v() {
    return new Engine();
}


Engine *
Engine_C_ctor_p_p(Engine const *param0) {
    return new Engine(*param0);
}


void
Engine_C_dtor_v_p(Engine *param0) {
    (*param0).dtor();
}


void
Engine_C_stop_v_v() {
    Engine::stop();
}


int
Engine_C_is_alive_i_v() {
    return Engine::is_alive();
}


int
Engine_C_HelloEngine_i_p(Engine *param0) {
    return (*param0).HelloEngine();
}


int
Engine_C_casetest_i_pisB(Engine *param0, int param1, char const *param2, bool param3) {
    return (*param0).casetest(param1, std::string(param2), param3);
}


NodePath *
Engine_C_load_model_p_ps(Engine *param0, char const *param1) {
    return (*param0).load_model(param1);
}


GeomVertexWriter *
Engine_C_new_GeomVertexWriter_p_pps(Engine *param0, GeomVertexData *param1, char const *param2) {
    return (*param0).new_GeomVertexWriter(param1, param2);
}


void
Engine_C_add_primitive_v_ppp(Engine *param0, Geom *param1, GeomTriangles *param2) {
    (*param0).add_primitive(param1, param2);
}


void
Engine_C_close_primitive_v_pp(Engine *param0, GeomTriangles *param1) {
    (*param0).close_primitive(param1);
}


PointerTo< GeomTriangles > *
Engine_C_new_GeomTriangles_p_p(Engine *param0) {
    return new PointerTo< GeomTriangles >((*param0).new_GeomTriangles());
}


NodePath *
Engine_C_new_Cube_p_pfss(Engine *param0, float param1, char const *param2, char const *param3) {
    return (*param0).new_Cube(param1, param2, param3);
}


void
Engine_C_attach_v_pp(Engine *param0, NodePath *param1) {
    (*param0).attach(param1);
}


int
Engine_C_inc_ref_i_p(ReferenceCount *param0) {
    return Engine::inc_ref(param0);
}


int
Engine_C_dec_ref_i_p(ReferenceCount *param0) {
    return Engine::dec_ref(param0);
}


void
Engine_C_prc_v_p(Filename const *param0) {
    Engine::prc(*param0);
}


void
Engine_C_prc_v_ss(char const *param0, char const *param1) {
    Engine::prc(param0, param1);
}


void
Engine_C_build_v_p(Engine *param0) {
    (*param0).build();
}


void
Engine_C_step_v_p(Engine *param0) {
    (*param0).step();
}


char const *
Engine_C_get_version_string_s_v() {
    static std::string string_holder = Engine::get_version_string();
    return string_holder.c_str();
}


WindowFramework *
Engine_C_get_wframe_p_p(Engine const *param0) {
    return (param0)->wframe;
}


void
Engine_C_set_wframe_v_pp(Engine *param0, WindowFramework *param1) {
    (param0)->wframe = param1;
}


PandaFramework *
Engine_C_get_framework_p_p(Engine const *param0) {
    return (param0)->framework;
}


void
Engine_C_set_framework_v_pp(Engine *param0, PandaFramework *param1) {
    (param0)->framework = param1;
}


// Filename


Filename *
Filename_C_ctor_p_v() {
    return new Filename();
}


Filename *
Filename_C_ctor_p_p(Filename *param0) {
    return new Filename(*param0);
}


Filename *
Filename_C_ctor_p_p_1_p_p(Filename const *param0) {
    return new Filename(*param0);
}


Filename *
Filename_C_ctor_p_pp(Filename const *param0, Filename const *param1) {
    return new Filename(*param0, *param1);
}


Filename *
Filename_C_ctor_p_s(char const *param0) {
    return new Filename(param0);
}


Filename *
Filename_C_ctor_p_s_1_p_s(char const *param0) {
    return new Filename(std::string(param0));
}


Filename *
Filename_C_ctor_p_p_1_p_p_2_p_p(wchar_t const *param0) {
    return new Filename(std::wstring(param0));
}


Filename *
Filename_C_text_filename_p_p(Filename const *param0) {
    return new Filename(Filename::text_filename(*param0));
}


Filename *
Filename_C_text_filename_p_s(char const *param0) {
    return new Filename(Filename::text_filename(std::string(param0)));
}


Filename *
Filename_C_binary_filename_p_p(Filename const *param0) {
    return new Filename(Filename::binary_filename(*param0));
}


Filename *
Filename_C_binary_filename_p_s(char const *param0) {
    return new Filename(Filename::binary_filename(std::string(param0)));
}


Filename *
Filename_C_dso_filename_p_s(char const *param0) {
    return new Filename(Filename::dso_filename(std::string(param0)));
}


Filename *
Filename_C_executable_filename_p_s(char const *param0) {
    return new Filename(Filename::executable_filename(std::string(param0)));
}


Filename *
Filename_C_pattern_filename_p_s(char const *param0) {
    return new Filename(Filename::pattern_filename(std::string(param0)));
}


Filename *
Filename_C_from_os_specific_p_sp(char const *param0, Filename::Type param1) {
    return new Filename(Filename::from_os_specific(std::string(param0), param1));
}


Filename *
Filename_C_from_os_specific_p_s(char const *param0) {
    return new Filename(Filename::from_os_specific(std::string(param0)));
}


Filename *
Filename_C_from_os_specific_w_p_pp(wchar_t const *param0, Filename::Type param1) {
    return new Filename(Filename::from_os_specific_w(std::wstring(param0), param1));
}


Filename *
Filename_C_from_os_specific_w_p_p(wchar_t const *param0) {
    return new Filename(Filename::from_os_specific_w(std::wstring(param0)));
}


Filename *
Filename_C_expand_from_p_sp(char const *param0, Filename::Type param1) {
    return new Filename(Filename::expand_from(std::string(param0), param1));
}


Filename *
Filename_C_expand_from_p_s(char const *param0) {
    return new Filename(Filename::expand_from(std::string(param0)));
}


Filename *
Filename_C_temporary_p_sssp(char const *param0, char const *param1, char const *param2, Filename::Type param3) {
    return new Filename(Filename::temporary(std::string(param0), std::string(param1), std::string(param2), param3));
}


Filename *
Filename_C_temporary_p_sss(char const *param0, char const *param1, char const *param2) {
    return new Filename(Filename::temporary(std::string(param0), std::string(param1), std::string(param2)));
}


Filename *
Filename_C_temporary_p_ss(char const *param0, char const *param1) {
    return new Filename(Filename::temporary(std::string(param0), std::string(param1)));
}


Filename const *
Filename_C_get_home_directory_p_v() {
    return &(Filename::get_home_directory());
}


Filename const *
Filename_C_get_temp_directory_p_v() {
    return &(Filename::get_temp_directory());
}


Filename const *
Filename_C_get_user_appdata_directory_p_v() {
    return &(Filename::get_user_appdata_directory());
}


Filename const *
Filename_C_get_common_appdata_directory_p_v() {
    return &(Filename::get_common_appdata_directory());
}


char const *
Filename_C_c_str_s_p(Filename const *param0) {
    return (*param0).c_str();
}


bool
Filename_C_empty_B_p(Filename const *param0) {
    return (*param0).empty();
}


std::size_t
Filename_C_length_p_p(Filename const *param0) {
    return (*param0).length();
}


char const *
Filename_C_substr_s_pp(Filename const *param0, std::size_t param1) {
    static std::string string_holder = (*param0).substr(param1);
    return string_holder.c_str();
}


char const *
Filename_C_substr_s_ppp(Filename const *param0, std::size_t param1, std::size_t param2) {
    static std::string string_holder = (*param0).substr(param1, param2);
    return string_holder.c_str();
}


char const *
Filename_C_get_fullpath_s_p(Filename const *param0) {
    static std::string string_holder = (*param0).get_fullpath();
    return string_holder.c_str();
}


wchar_t const *
Filename_C_get_fullpath_w_p_p(Filename const *param0) {
    static std::wstring string_holder = (*param0).get_fullpath_w();
    return string_holder.c_str();
}


char const *
Filename_C_get_dirname_s_p(Filename const *param0) {
    static std::string string_holder = (*param0).get_dirname();
    return string_holder.c_str();
}


char const *
Filename_C_get_basename_s_p(Filename const *param0) {
    static std::string string_holder = (*param0).get_basename();
    return string_holder.c_str();
}


char const *
Filename_C_get_fullpath_wo_extension_s_p(Filename const *param0) {
    static std::string string_holder = (*param0).get_fullpath_wo_extension();
    return string_holder.c_str();
}


char const *
Filename_C_get_basename_wo_extension_s_p(Filename const *param0) {
    static std::string string_holder = (*param0).get_basename_wo_extension();
    return string_holder.c_str();
}


char const *
Filename_C_get_extension_s_p(Filename const *param0) {
    static std::string string_holder = (*param0).get_extension();
    return string_holder.c_str();
}


void
Filename_C_set_fullpath_v_ps(Filename *param0, char const *param1) {
    (*param0).set_fullpath(std::string(param1));
}


void
Filename_C_set_dirname_v_ps(Filename *param0, char const *param1) {
    (*param0).set_dirname(std::string(param1));
}


void
Filename_C_set_basename_v_ps(Filename *param0, char const *param1) {
    (*param0).set_basename(std::string(param1));
}


void
Filename_C_set_fullpath_wo_extension_v_ps(Filename *param0, char const *param1) {
    (*param0).set_fullpath_wo_extension(std::string(param1));
}


void
Filename_C_set_basename_wo_extension_v_ps(Filename *param0, char const *param1) {
    (*param0).set_basename_wo_extension(std::string(param1));
}


void
Filename_C_set_extension_v_ps(Filename *param0, char const *param1) {
    (*param0).set_extension(std::string(param1));
}


void
Filename_C_set_binary_v_p(Filename *param0) {
    (*param0).set_binary();
}


void
Filename_C_set_text_v_p(Filename *param0) {
    (*param0).set_text();
}


bool
Filename_C_is_binary_B_p(Filename const *param0) {
    return (*param0).is_binary();
}


bool
Filename_C_is_text_B_p(Filename const *param0) {
    return (*param0).is_text();
}


bool
Filename_C_is_binary_or_text_B_p(Filename const *param0) {
    return (*param0).is_binary_or_text();
}


void
Filename_C_set_type_v_pp(Filename *param0, Filename::Type param1) {
    (*param0).set_type(param1);
}


Filename::Type
Filename_C_get_type_p_p(Filename const *param0) {
    return (*param0).get_type();
}


void
Filename_C_set_pattern_v_pB(Filename *param0, bool param1) {
    (*param0).set_pattern(param1);
}


bool
Filename_C_get_pattern_B_p(Filename const *param0) {
    return (*param0).get_pattern();
}


bool
Filename_C_has_hash_B_p(Filename const *param0) {
    return (*param0).has_hash();
}


Filename *
Filename_C_get_filename_index_p_pi(Filename const *param0, int param1) {
    return new Filename((*param0).get_filename_index(param1));
}


char const *
Filename_C_get_hash_to_end_s_p(Filename const *param0) {
    static std::string string_holder = (*param0).get_hash_to_end();
    return string_holder.c_str();
}


void
Filename_C_set_hash_to_end_v_ps(Filename *param0, char const *param1) {
    (*param0).set_hash_to_end(std::string(param1));
}


void
Filename_C_extract_components_v_pp(Filename const *param0, vector_string *param1) {
    (*param0).extract_components(*param1);
}


void
Filename_C_standardize_v_p(Filename *param0) {
    (*param0).standardize();
}


bool
Filename_C_is_local_B_p(Filename const *param0) {
    return (*param0).is_local();
}


bool
Filename_C_is_fully_qualified_B_p(Filename const *param0) {
    return (*param0).is_fully_qualified();
}


void
Filename_C_make_absolute_v_p(Filename *param0) {
    (*param0).make_absolute();
}


void
Filename_C_make_absolute_v_pp(Filename *param0, Filename const *param1) {
    (*param0).make_absolute(*param1);
}


bool
Filename_C_make_canonical_B_p(Filename *param0) {
    return (*param0).make_canonical();
}


bool
Filename_C_make_true_case_B_p(Filename *param0) {
    return (*param0).make_true_case();
}


char const *
Filename_C_to_os_specific_s_p(Filename const *param0) {
    static std::string string_holder = (*param0).to_os_specific();
    return string_holder.c_str();
}


wchar_t const *
Filename_C_to_os_specific_w_p_p(Filename const *param0) {
    static std::wstring string_holder = (*param0).to_os_specific_w();
    return string_holder.c_str();
}


char const *
Filename_C_to_os_generic_s_p(Filename const *param0) {
    static std::string string_holder = (*param0).to_os_generic();
    return string_holder.c_str();
}


char const *
Filename_C_to_os_short_name_s_p(Filename const *param0) {
    static std::string string_holder = (*param0).to_os_short_name();
    return string_holder.c_str();
}


char const *
Filename_C_to_os_long_name_s_p(Filename const *param0) {
    static std::string string_holder = (*param0).to_os_long_name();
    return string_holder.c_str();
}


bool
Filename_C_exists_B_p(Filename const *param0) {
    return (*param0).exists();
}


bool
Filename_C_is_regular_file_B_p(Filename const *param0) {
    return (*param0).is_regular_file();
}


bool
Filename_C_is_writable_B_p(Filename const *param0) {
    return (*param0).is_writable();
}


bool
Filename_C_is_directory_B_p(Filename const *param0) {
    return (*param0).is_directory();
}


bool
Filename_C_is_executable_B_p(Filename const *param0) {
    return (*param0).is_executable();
}


int
Filename_C_compare_timestamps_i_ppBB(Filename const *param0, Filename const *param1, bool param2, bool param3) {
    return (*param0).compare_timestamps(*param1, param2, param3);
}


int
Filename_C_compare_timestamps_i_ppB(Filename const *param0, Filename const *param1, bool param2) {
    return (*param0).compare_timestamps(*param1, param2);
}


int
Filename_C_compare_timestamps_i_pp(Filename const *param0, Filename const *param1) {
    return (*param0).compare_timestamps(*param1);
}


time_t
Filename_C_get_timestamp_p_p(Filename const *param0) {
    return (*param0).get_timestamp();
}


time_t
Filename_C_get_access_timestamp_p_p(Filename const *param0) {
    return (*param0).get_access_timestamp();
}


std::streamsize
Filename_C_get_file_size_p_p(Filename const *param0) {
    return (*param0).get_file_size();
}


bool
Filename_C_resolve_filename_B_pps(Filename *param0, DSearchPath const *param1, char const *param2) {
    return (*param0).resolve_filename(*param1, std::string(param2));
}


bool
Filename_C_resolve_filename_B_pp(Filename *param0, DSearchPath const *param1) {
    return (*param0).resolve_filename(*param1);
}


bool
Filename_C_make_relative_to_B_ppB(Filename *param0, Filename *param1, bool param2) {
    return (*param0).make_relative_to(*param1, param2);
}


bool
Filename_C_make_relative_to_B_pp(Filename *param0, Filename *param1) {
    return (*param0).make_relative_to(*param1);
}


int
Filename_C_find_on_searchpath_i_pp(Filename *param0, DSearchPath const *param1) {
    return (*param0).find_on_searchpath(*param1);
}


bool
Filename_C_scan_directory_B_pp(Filename const *param0, vector_string *param1) {
    return (*param0).scan_directory(*param1);
}


bool
Filename_C_open_read_B_pp(Filename const *param0, pifstream *param1) {
    return (*param0).open_read(*param1);
}


bool
Filename_C_open_read_B_pp_1_B_pp(Filename const *param0, std::ifstream *param1) {
    return (*param0).open_read(*param1);
}


bool
Filename_C_open_write_B_ppB(Filename const *param0, pofstream *param1, bool param2) {
    return (*param0).open_write(*param1, param2);
}


bool
Filename_C_open_write_B_pp(Filename const *param0, pofstream *param1) {
    return (*param0).open_write(*param1);
}


bool
Filename_C_open_write_B_ppB_1_B_ppB(Filename const *param0, std::ofstream *param1, bool param2) {
    return (*param0).open_write(*param1, param2);
}


bool
Filename_C_open_write_B_pp_1_B_pp(Filename const *param0, std::ofstream *param1) {
    return (*param0).open_write(*param1);
}


bool
Filename_C_open_append_B_pp(Filename const *param0, pofstream *param1) {
    return (*param0).open_append(*param1);
}


bool
Filename_C_open_append_B_pp_1_B_pp(Filename const *param0, std::ofstream *param1) {
    return (*param0).open_append(*param1);
}


bool
Filename_C_open_read_write_B_ppB(Filename const *param0, pfstream *param1, bool param2) {
    return (*param0).open_read_write(*param1, param2);
}


bool
Filename_C_open_read_write_B_pp(Filename const *param0, pfstream *param1) {
    return (*param0).open_read_write(*param1);
}


bool
Filename_C_open_read_write_B_ppB_1_B_ppB(Filename const *param0, std::fstream *param1, bool param2) {
    return (*param0).open_read_write(*param1, param2);
}


bool
Filename_C_open_read_write_B_pp_1_B_pp(Filename const *param0, std::fstream *param1) {
    return (*param0).open_read_write(*param1);
}


bool
Filename_C_open_read_append_B_pp(Filename const *param0, pfstream *param1) {
    return (*param0).open_read_append(*param1);
}


bool
Filename_C_open_read_append_B_pp_1_B_pp(Filename const *param0, std::fstream *param1) {
    return (*param0).open_read_append(*param1);
}


bool
Filename_C_chdir_B_p(Filename const *param0) {
    return (*param0).chdir();
}


bool
Filename_C_touch_B_p(Filename const *param0) {
    return (*param0).touch();
}


bool
Filename_C_unlink_B_p(Filename const *param0) {
    return (*param0).unlink();
}


bool
Filename_C_rename_to_B_pp(Filename const *param0, Filename const *param1) {
    return (*param0).rename_to(*param1);
}


bool
Filename_C_copy_to_B_pp(Filename const *param0, Filename const *param1) {
    return (*param0).copy_to(*param1);
}


bool
Filename_C_make_dir_B_p(Filename const *param0) {
    return (*param0).make_dir();
}


bool
Filename_C_mkdir_B_p(Filename const *param0) {
    return (*param0).mkdir();
}


bool
Filename_C_rmdir_B_p(Filename const *param0) {
    return (*param0).rmdir();
}


int
Filename_C_compare_to_i_pp(Filename const *param0, Filename const *param1) {
    return (*param0).compare_to(*param1);
}


bool
Filename_C___nonzero___B_p(Filename const *param0) {
    return (*param0).__nonzero__();
}


int
Filename_C_get_hash_i_p(Filename const *param0) {
    return (*param0).get_hash();
}


void
Filename_C_output_v_pp(Filename const *param0, std::ostream *param1) {
    (*param0).output(*param1);
}


void
Filename_C_set_filesystem_encoding_v_p(TextEncoder::Encoding param0) {
    Filename::set_filesystem_encoding(param0);
}


TextEncoder::Encoding
Filename_C_get_filesystem_encoding_p_v() {
    return Filename::get_filesystem_encoding();
}


int
Filename_C_get_class_type_i_v() {
    return (Filename::get_class_type()).get_index();
}


void
Filename_C_init_type_v_v() {
    Filename::init_type();
}


// Geom


CopyOnWriteObject *
Geom_C_upcast_to_CopyOnWriteObject_p_p(Geom *param0) {
    return (CopyOnWriteObject *)param0;
}


GeomEnums *
Geom_C_upcast_to_GeomEnums_p_p(Geom *param0) {
    return (GeomEnums *)param0;
}


Geom *
Geom_C_ctor_p_p(GeomVertexData const *param0) {
    return new Geom(param0);
}


Geom *
Geom_C_make_copy_p_p(Geom const *param0) {
    return (*param0).make_copy();
}


GeomEnums::PrimitiveType
Geom_C_get_primitive_type_p_p(Geom const *param0) {
    return (*param0).get_primitive_type();
}


GeomEnums::ShadeModel
Geom_C_get_shade_model_p_p(Geom const *param0) {
    return (*param0).get_shade_model();
}


int
Geom_C_get_geom_rendering_i_p(Geom const *param0) {
    return (*param0).get_geom_rendering();
}


GeomEnums::UsageHint
Geom_C_get_usage_hint_p_p(Geom const *param0) {
    return (*param0).get_usage_hint();
}


void
Geom_C_set_usage_hint_v_pp(Geom *param0, GeomEnums::UsageHint param1) {
    (*param0).set_usage_hint(param1);
}


ConstPointerTo< GeomVertexData > *
Geom_C_get_vertex_data_p_pp(Geom const *param0, Thread *param1) {
    return new ConstPointerTo< GeomVertexData >((*param0).get_vertex_data(param1));
}


ConstPointerTo< GeomVertexData > *
Geom_C_get_vertex_data_p_p(Geom const *param0) {
    return new ConstPointerTo< GeomVertexData >((*param0).get_vertex_data());
}


PointerTo< GeomVertexData > *
Geom_C_modify_vertex_data_p_p(Geom *param0) {
    return new PointerTo< GeomVertexData >((*param0).modify_vertex_data());
}


void
Geom_C_set_vertex_data_v_pp(Geom *param0, GeomVertexData const *param1) {
    (*param0).set_vertex_data(param1);
}


void
Geom_C_offset_vertices_v_ppi(Geom *param0, GeomVertexData const *param1, int param2) {
    (*param0).offset_vertices(param1, param2);
}


int
Geom_C_make_nonindexed_i_pB(Geom *param0, bool param1) {
    return (*param0).make_nonindexed(param1);
}


ConstPointerTo< GeomVertexData > *
Geom_C_get_animated_vertex_data_p_pBp(Geom const *param0, bool param1, Thread *param2) {
    return new ConstPointerTo< GeomVertexData >((*param0).get_animated_vertex_data(param1, param2));
}


ConstPointerTo< GeomVertexData > *
Geom_C_get_animated_vertex_data_p_pB(Geom const *param0, bool param1) {
    return new ConstPointerTo< GeomVertexData >((*param0).get_animated_vertex_data(param1));
}


bool
Geom_C_is_empty_B_p(Geom const *param0) {
    return (*param0).is_empty();
}


std::size_t
Geom_C_get_num_primitives_p_p(Geom const *param0) {
    return (*param0).get_num_primitives();
}


ConstPointerTo< GeomPrimitive > *
Geom_C_get_primitive_p_pp(Geom const *param0, std::size_t param1) {
    return new ConstPointerTo< GeomPrimitive >((*param0).get_primitive(param1));
}


PointerTo< GeomPrimitive > *
Geom_C_modify_primitive_p_pp(Geom *param0, std::size_t param1) {
    return new PointerTo< GeomPrimitive >((*param0).modify_primitive(param1));
}


void
Geom_C_set_primitive_v_ppp(Geom *param0, std::size_t param1, GeomPrimitive const *param2) {
    (*param0).set_primitive(param1, param2);
}


void
Geom_C_insert_primitive_v_ppp(Geom *param0, std::size_t param1, GeomPrimitive const *param2) {
    (*param0).insert_primitive(param1, param2);
}


void
Geom_C_add_primitive_v_pp(Geom *param0, GeomPrimitive const *param1) {
    (*param0).add_primitive(param1);
}


void
Geom_C_remove_primitive_v_pp(Geom *param0, std::size_t param1) {
    (*param0).remove_primitive(param1);
}


void
Geom_C_clear_primitives_v_p(Geom *param0) {
    (*param0).clear_primitives();
}


PointerTo< Geom > *
Geom_C_decompose_p_p(Geom const *param0) {
    return new PointerTo< Geom >((*param0).decompose());
}


PointerTo< Geom > *
Geom_C_doubleside_p_p(Geom const *param0) {
    return new PointerTo< Geom >((*param0).doubleside());
}


PointerTo< Geom > *
Geom_C_reverse_p_p(Geom const *param0) {
    return new PointerTo< Geom >((*param0).reverse());
}


PointerTo< Geom > *
Geom_C_rotate_p_p(Geom const *param0) {
    return new PointerTo< Geom >((*param0).rotate());
}


PointerTo< Geom > *
Geom_C_unify_p_piB(Geom const *param0, int param1, bool param2) {
    return new PointerTo< Geom >((*param0).unify(param1, param2));
}


PointerTo< Geom > *
Geom_C_make_points_p_p(Geom const *param0) {
    return new PointerTo< Geom >((*param0).make_points());
}


PointerTo< Geom > *
Geom_C_make_lines_p_p(Geom const *param0) {
    return new PointerTo< Geom >((*param0).make_lines());
}


PointerTo< Geom > *
Geom_C_make_patches_p_p(Geom const *param0) {
    return new PointerTo< Geom >((*param0).make_patches());
}


PointerTo< Geom > *
Geom_C_make_adjacency_p_p(Geom const *param0) {
    return new PointerTo< Geom >((*param0).make_adjacency());
}


void
Geom_C_decompose_in_place_v_p(Geom *param0) {
    (*param0).decompose_in_place();
}


void
Geom_C_doubleside_in_place_v_p(Geom *param0) {
    (*param0).doubleside_in_place();
}


void
Geom_C_reverse_in_place_v_p(Geom *param0) {
    (*param0).reverse_in_place();
}


void
Geom_C_rotate_in_place_v_p(Geom *param0) {
    (*param0).rotate_in_place();
}


void
Geom_C_unify_in_place_v_piB(Geom *param0, int param1, bool param2) {
    (*param0).unify_in_place(param1, param2);
}


void
Geom_C_make_points_in_place_v_p(Geom *param0) {
    (*param0).make_points_in_place();
}


void
Geom_C_make_lines_in_place_v_p(Geom *param0) {
    (*param0).make_lines_in_place();
}


void
Geom_C_make_patches_in_place_v_p(Geom *param0) {
    (*param0).make_patches_in_place();
}


void
Geom_C_make_adjacency_in_place_v_p(Geom *param0) {
    (*param0).make_adjacency_in_place();
}


bool
Geom_C_copy_primitives_from_B_pp(Geom *param0, Geom const *param1) {
    return (*param0).copy_primitives_from(param1);
}


int
Geom_C_get_num_bytes_i_p(Geom const *param0) {
    return (*param0).get_num_bytes();
}


UpdateSeq *
Geom_C_get_modified_p_pp(Geom const *param0, Thread *param1) {
    return new UpdateSeq((*param0).get_modified(param1));
}


UpdateSeq *
Geom_C_get_modified_p_p(Geom const *param0) {
    return new UpdateSeq((*param0).get_modified());
}


bool
Geom_C_request_resident_B_p(Geom const *param0) {
    return (*param0).request_resident();
}


void
Geom_C_transform_vertices_v_pp(Geom *param0, LMatrix4 const *param1) {
    (*param0).transform_vertices(*param1);
}


bool
Geom_C_check_valid_B_p(Geom const *param0) {
    return (*param0).check_valid();
}


bool
Geom_C_check_valid_B_pp(Geom const *param0, GeomVertexData const *param1) {
    return (*param0).check_valid(param1);
}


ConstPointerTo< BoundingVolume > *
Geom_C_get_bounds_p_pp(Geom const *param0, Thread *param1) {
    return new ConstPointerTo< BoundingVolume >((*param0).get_bounds(param1));
}


ConstPointerTo< BoundingVolume > *
Geom_C_get_bounds_p_p(Geom const *param0) {
    return new ConstPointerTo< BoundingVolume >((*param0).get_bounds());
}


int
Geom_C_get_nested_vertices_i_pp(Geom const *param0, Thread *param1) {
    return (*param0).get_nested_vertices(param1);
}


int
Geom_C_get_nested_vertices_i_p(Geom const *param0) {
    return (*param0).get_nested_vertices();
}


void
Geom_C_mark_bounds_stale_v_p(Geom const *param0) {
    (*param0).mark_bounds_stale();
}


void
Geom_C_set_bounds_type_v_pp(Geom *param0, BoundingVolume::BoundsType param1) {
    (*param0).set_bounds_type(param1);
}


BoundingVolume::BoundsType
Geom_C_get_bounds_type_p_p(Geom const *param0) {
    return (*param0).get_bounds_type();
}


void
Geom_C_set_bounds_v_pp(Geom *param0, BoundingVolume const *param1) {
    (*param0).set_bounds(param1);
}


void
Geom_C_clear_bounds_v_p(Geom *param0) {
    (*param0).clear_bounds();
}


void
Geom_C_output_v_pp(Geom const *param0, std::ostream *param1) {
    (*param0).output(*param1);
}


void
Geom_C_write_v_ppi(Geom const *param0, std::ostream *param1, int param2) {
    (*param0).write(*param1, param2);
}


void
Geom_C_write_v_pp(Geom const *param0, std::ostream *param1) {
    (*param0).write(*param1);
}


void
Geom_C_clear_cache_v_p(Geom *param0) {
    (*param0).clear_cache();
}


void
Geom_C_clear_cache_stage_v_pp(Geom *param0, Thread *param1) {
    (*param0).clear_cache_stage(param1);
}


void
Geom_C_prepare_v_pp(Geom *param0, PreparedGraphicsObjects *param1) {
    (*param0).prepare(param1);
}


bool
Geom_C_is_prepared_B_pp(Geom const *param0, PreparedGraphicsObjects *param1) {
    return (*param0).is_prepared(param1);
}


bool
Geom_C_release_B_pp(Geom *param0, PreparedGraphicsObjects *param1) {
    return (*param0).release(param1);
}


int
Geom_C_release_all_i_p(Geom *param0) {
    return (*param0).release_all();
}


GeomContext *
Geom_C_prepare_now_p_ppp(Geom *param0, PreparedGraphicsObjects *param1, GraphicsStateGuardianBase *param2) {
    return (*param0).prepare_now(param1, param2);
}


bool
Geom_C_draw_B_pppBp(Geom const *param0, GraphicsStateGuardianBase *param1, GeomVertexData const *param2, bool param3, Thread *param4) {
    return (*param0).draw(param1, param2, param3, param4);
}


UpdateSeq *
Geom_C_get_next_modified_p_v() {
    return new UpdateSeq(Geom::get_next_modified());
}


void
Geom_C_register_with_read_factory_v_v() {
    Geom::register_with_read_factory();
}


void
Geom_C_write_datagram_v_ppp(Geom *param0, BamWriter *param1, Datagram *param2) {
    (*param0).write_datagram(param1, *param2);
}


void
Geom_C_finalize_v_pp(Geom *param0, BamReader *param1) {
    (*param0).finalize(param1);
}


int
Geom_C_get_class_type_i_v() {
    return (Geom::get_class_type()).get_index();
}


void
Geom_C_init_type_v_v() {
    Geom::init_type();
}


int
Geom_C_get_type_i_p(Geom const *param0) {
    return ((*param0).get_type()).get_index();
}


int
Geom_C_force_init_type_i_p(Geom *param0) {
    return ((*param0).force_init_type()).get_index();
}


// GeomEnums


GeomEnums *
GeomEnums_C_ctor_p_v() {
    return new GeomEnums();
}


GeomEnums *
GeomEnums_C_ctor_p_p(GeomEnums const *param0) {
    return new GeomEnums(*param0);
}


Geom *
GeomEnums_C_downcast_to_Geom_p_p(GeomEnums *param0) {
    return (Geom *)param0;
}


GeomPrimitive *
GeomEnums_C_downcast_to_GeomPrimitive_p_p(GeomEnums *param0) {
    return (GeomPrimitive *)param0;
}


GeomVertexData *
GeomEnums_C_downcast_to_GeomVertexData_p_p(GeomEnums *param0) {
    return (GeomVertexData *)param0;
}


GeomVertexFormat *
GeomEnums_C_downcast_to_GeomVertexFormat_p_p(GeomEnums *param0) {
    return (GeomVertexFormat *)param0;
}


// GeomNode


GeomNode *
GeomNode_C_ctor_p_s(char const *param0) {
    return new GeomNode(std::string(param0));
}


void
GeomNode_C_apply_attribs_to_vertices_v_ppip(GeomNode *param0, AccumulatedAttribs const *param1, int param2, GeomTransformer *param3) {
    (*param0).apply_attribs_to_vertices(*param1, param2, *param3);
}


void
GeomNode_C_xform_v_pp(GeomNode *param0, LMatrix4 const *param1) {
    (*param0).xform(*param1);
}


bool
GeomNode_C_is_renderable_B_p(GeomNode const *param0) {
    return (*param0).is_renderable();
}


void
GeomNode_C_add_for_draw_v_ppp(GeomNode *param0, CullTraverser *param1, CullTraverserData *param2) {
    (*param0).add_for_draw(param1, *param2);
}


bool
GeomNode_C_safe_to_flatten_B_p(GeomNode const *param0) {
    return (*param0).safe_to_flatten();
}


bool
GeomNode_C_safe_to_combine_B_p(GeomNode const *param0) {
    return (*param0).safe_to_combine();
}


void
GeomNode_C_r_prepare_scene_v_ppppp(GeomNode *param0, GraphicsStateGuardianBase *param1, RenderState const *param2, GeomTransformer *param3, Thread *param4) {
    (*param0).r_prepare_scene(param1, param2, *param3, param4);
}


void
GeomNode_C_set_preserved_v_pB(GeomNode *param0, bool param1) {
    (*param0).set_preserved(param1);
}


bool
GeomNode_C_get_preserved_B_p(GeomNode const *param0) {
    return (*param0).get_preserved();
}


int
GeomNode_C_get_num_geoms_i_p(GeomNode const *param0) {
    return (*param0).get_num_geoms();
}


ConstPointerTo< Geom > *
GeomNode_C_get_geom_p_pi(GeomNode const *param0, int param1) {
    return new ConstPointerTo< Geom >((*param0).get_geom(param1));
}


PointerTo< Geom > *
GeomNode_C_modify_geom_p_pi(GeomNode *param0, int param1) {
    return new PointerTo< Geom >((*param0).modify_geom(param1));
}


RenderState const *
GeomNode_C_get_geom_state_p_pi(GeomNode const *param0, int param1) {
    return (*param0).get_geom_state(param1);
}


void
GeomNode_C_set_geom_state_v_pip(GeomNode *param0, int param1, RenderState const *param2) {
    (*param0).set_geom_state(param1, param2);
}


void
GeomNode_C_add_geom_v_ppp(GeomNode *param0, Geom *param1, RenderState const *param2) {
    (*param0).add_geom(param1, param2);
}


void
GeomNode_C_add_geom_v_pp(GeomNode *param0, Geom *param1) {
    (*param0).add_geom(param1);
}


void
GeomNode_C_add_geoms_from_v_pp(GeomNode *param0, GeomNode const *param1) {
    (*param0).add_geoms_from(param1);
}


void
GeomNode_C_set_geom_v_pip(GeomNode *param0, int param1, Geom *param2) {
    (*param0).set_geom(param1, param2);
}


void
GeomNode_C_remove_geom_v_pi(GeomNode *param0, int param1) {
    (*param0).remove_geom(param1);
}


void
GeomNode_C_remove_all_geoms_v_p(GeomNode *param0) {
    (*param0).remove_all_geoms();
}


bool
GeomNode_C_check_valid_B_p(GeomNode const *param0) {
    return (*param0).check_valid();
}


void
GeomNode_C_decompose_v_p(GeomNode *param0) {
    (*param0).decompose();
}


void
GeomNode_C_unify_v_piB(GeomNode *param0, int param1, bool param2) {
    (*param0).unify(param1, param2);
}


void
GeomNode_C_write_geoms_v_ppi(GeomNode const *param0, std::ostream *param1, int param2) {
    (*param0).write_geoms(*param1, param2);
}


void
GeomNode_C_write_verbose_v_ppi(GeomNode const *param0, std::ostream *param1, int param2) {
    (*param0).write_verbose(*param1, param2);
}


CollideMask *
GeomNode_C_get_default_collide_mask_p_v() {
    return new CollideMask(GeomNode::get_default_collide_mask());
}


void
GeomNode_C_do_premunge_v_pppp(GeomNode *param0, GraphicsStateGuardianBase *param1, RenderState const *param2, GeomTransformer *param3) {
    (*param0).do_premunge(param1, param2, *param3);
}


GeomNode::Geoms *
GeomNode_C_get_geoms_p_pp(GeomNode const *param0, Thread *param1) {
    return new GeomNode::Geoms((*param0).get_geoms(param1));
}


GeomNode::Geoms *
GeomNode_C_get_geoms_p_p(GeomNode const *param0) {
    return new GeomNode::Geoms((*param0).get_geoms());
}


void
GeomNode_C_register_with_read_factory_v_v() {
    GeomNode::register_with_read_factory();
}


void
GeomNode_C_write_datagram_v_ppp(GeomNode *param0, BamWriter *param1, Datagram *param2) {
    (*param0).write_datagram(param1, *param2);
}


void
GeomNode_C_finalize_v_pp(GeomNode *param0, BamReader *param1) {
    (*param0).finalize(param1);
}


int
GeomNode_C_get_class_type_i_v() {
    return (GeomNode::get_class_type()).get_index();
}


void
GeomNode_C_init_type_v_v() {
    GeomNode::init_type();
}


int
GeomNode_C_get_type_i_p(GeomNode const *param0) {
    return ((*param0).get_type()).get_index();
}


int
GeomNode_C_force_init_type_i_p(GeomNode *param0) {
    return ((*param0).force_init_type()).get_index();
}


// GeomPrimitive


CopyOnWriteObject *
GeomPrimitive_C_upcast_to_CopyOnWriteObject_p_p(GeomPrimitive *param0) {
    return (CopyOnWriteObject *)param0;
}


GeomEnums *
GeomPrimitive_C_upcast_to_GeomEnums_p_p(GeomPrimitive *param0) {
    return (GeomEnums *)param0;
}


PointerTo< GeomPrimitive > *
GeomPrimitive_C_make_copy_p_p(GeomPrimitive const *param0) {
    return new PointerTo< GeomPrimitive >((*param0).make_copy());
}


GeomEnums::PrimitiveType
GeomPrimitive_C_get_primitive_type_p_p(GeomPrimitive const *param0) {
    return (*param0).get_primitive_type();
}


int
GeomPrimitive_C_get_geom_rendering_i_p(GeomPrimitive const *param0) {
    return (*param0).get_geom_rendering();
}


GeomEnums::ShadeModel
GeomPrimitive_C_get_shade_model_p_p(GeomPrimitive const *param0) {
    return (*param0).get_shade_model();
}


void
GeomPrimitive_C_set_shade_model_v_pp(GeomPrimitive *param0, GeomEnums::ShadeModel param1) {
    (*param0).set_shade_model(param1);
}


GeomEnums::UsageHint
GeomPrimitive_C_get_usage_hint_p_p(GeomPrimitive const *param0) {
    return (*param0).get_usage_hint();
}


void
GeomPrimitive_C_set_usage_hint_v_pp(GeomPrimitive *param0, GeomEnums::UsageHint param1) {
    (*param0).set_usage_hint(param1);
}


GeomEnums::NumericType
GeomPrimitive_C_get_index_type_p_p(GeomPrimitive const *param0) {
    return (*param0).get_index_type();
}


void
GeomPrimitive_C_set_index_type_v_pp(GeomPrimitive *param0, GeomEnums::NumericType param1) {
    (*param0).set_index_type(param1);
}


bool
GeomPrimitive_C_is_composite_B_p(GeomPrimitive const *param0) {
    return (*param0).is_composite();
}


bool
GeomPrimitive_C_is_indexed_B_p(GeomPrimitive const *param0) {
    return (*param0).is_indexed();
}


int
GeomPrimitive_C_get_first_vertex_i_p(GeomPrimitive const *param0) {
    return (*param0).get_first_vertex();
}


int
GeomPrimitive_C_get_num_vertices_i_p(GeomPrimitive const *param0) {
    return (*param0).get_num_vertices();
}


int
GeomPrimitive_C_get_vertex_i_pi(GeomPrimitive const *param0, int param1) {
    return (*param0).get_vertex(param1);
}


void
GeomPrimitive_C_add_vertex_v_pi(GeomPrimitive *param0, int param1) {
    (*param0).add_vertex(param1);
}


void
GeomPrimitive_C_add_vertices_v_pii(GeomPrimitive *param0, int param1, int param2) {
    (*param0).add_vertices(param1, param2);
}


void
GeomPrimitive_C_add_vertices_v_piii(GeomPrimitive *param0, int param1, int param2, int param3) {
    (*param0).add_vertices(param1, param2, param3);
}


void
GeomPrimitive_C_add_vertices_v_piiii(GeomPrimitive *param0, int param1, int param2, int param3, int param4) {
    (*param0).add_vertices(param1, param2, param3, param4);
}


void
GeomPrimitive_C_add_consecutive_vertices_v_pii(GeomPrimitive *param0, int param1, int param2) {
    (*param0).add_consecutive_vertices(param1, param2);
}


void
GeomPrimitive_C_add_next_vertices_v_pi(GeomPrimitive *param0, int param1) {
    (*param0).add_next_vertices(param1);
}


void
GeomPrimitive_C_reserve_num_vertices_v_pi(GeomPrimitive *param0, int param1) {
    (*param0).reserve_num_vertices(param1);
}


bool
GeomPrimitive_C_close_primitive_B_p(GeomPrimitive *param0) {
    return (*param0).close_primitive();
}


void
GeomPrimitive_C_clear_vertices_v_p(GeomPrimitive *param0) {
    (*param0).clear_vertices();
}


void
GeomPrimitive_C_offset_vertices_v_pi(GeomPrimitive *param0, int param1) {
    (*param0).offset_vertices(param1);
}


void
GeomPrimitive_C_offset_vertices_v_piii(GeomPrimitive *param0, int param1, int param2, int param3) {
    (*param0).offset_vertices(param1, param2, param3);
}


void
GeomPrimitive_C_make_nonindexed_v_ppp(GeomPrimitive *param0, GeomVertexData *param1, GeomVertexData const *param2) {
    (*param0).make_nonindexed(param1, param2);
}


void
GeomPrimitive_C_pack_vertices_v_ppp(GeomPrimitive *param0, GeomVertexData *param1, GeomVertexData const *param2) {
    (*param0).pack_vertices(param1, param2);
}


void
GeomPrimitive_C_make_indexed_v_p(GeomPrimitive *param0) {
    (*param0).make_indexed();
}


int
GeomPrimitive_C_get_num_primitives_i_p(GeomPrimitive const *param0) {
    return (*param0).get_num_primitives();
}


int
GeomPrimitive_C_get_primitive_start_i_pi(GeomPrimitive const *param0, int param1) {
    return (*param0).get_primitive_start(param1);
}


int
GeomPrimitive_C_get_primitive_end_i_pi(GeomPrimitive const *param0, int param1) {
    return (*param0).get_primitive_end(param1);
}


int
GeomPrimitive_C_get_primitive_num_vertices_i_pi(GeomPrimitive const *param0, int param1) {
    return (*param0).get_primitive_num_vertices(param1);
}


int
GeomPrimitive_C_get_num_used_vertices_i_p(GeomPrimitive const *param0) {
    return (*param0).get_num_used_vertices();
}


int
GeomPrimitive_C_get_num_faces_i_p(GeomPrimitive const *param0) {
    return (*param0).get_num_faces();
}


int
GeomPrimitive_C_get_primitive_num_faces_i_pi(GeomPrimitive const *param0, int param1) {
    return (*param0).get_primitive_num_faces(param1);
}


int
GeomPrimitive_C_get_min_vertex_i_p(GeomPrimitive const *param0) {
    return (*param0).get_min_vertex();
}


int
GeomPrimitive_C_get_primitive_min_vertex_i_pi(GeomPrimitive const *param0, int param1) {
    return (*param0).get_primitive_min_vertex(param1);
}


int
GeomPrimitive_C_get_max_vertex_i_p(GeomPrimitive const *param0) {
    return (*param0).get_max_vertex();
}


int
GeomPrimitive_C_get_primitive_max_vertex_i_pi(GeomPrimitive const *param0, int param1) {
    return (*param0).get_primitive_max_vertex(param1);
}


ConstPointerTo< GeomPrimitive > *
GeomPrimitive_C_decompose_p_p(GeomPrimitive const *param0) {
    return new ConstPointerTo< GeomPrimitive >((*param0).decompose());
}


ConstPointerTo< GeomPrimitive > *
GeomPrimitive_C_rotate_p_p(GeomPrimitive const *param0) {
    return new ConstPointerTo< GeomPrimitive >((*param0).rotate());
}


ConstPointerTo< GeomPrimitive > *
GeomPrimitive_C_doubleside_p_p(GeomPrimitive const *param0) {
    return new ConstPointerTo< GeomPrimitive >((*param0).doubleside());
}


ConstPointerTo< GeomPrimitive > *
GeomPrimitive_C_reverse_p_p(GeomPrimitive const *param0) {
    return new ConstPointerTo< GeomPrimitive >((*param0).reverse());
}


ConstPointerTo< GeomPrimitive > *
GeomPrimitive_C_match_shade_model_p_pp(GeomPrimitive const *param0, GeomEnums::ShadeModel param1) {
    return new ConstPointerTo< GeomPrimitive >((*param0).match_shade_model(param1));
}


ConstPointerTo< GeomPrimitive > *
GeomPrimitive_C_make_points_p_p(GeomPrimitive const *param0) {
    return new ConstPointerTo< GeomPrimitive >((*param0).make_points());
}


ConstPointerTo< GeomPrimitive > *
GeomPrimitive_C_make_lines_p_p(GeomPrimitive const *param0) {
    return new ConstPointerTo< GeomPrimitive >((*param0).make_lines());
}


ConstPointerTo< GeomPrimitive > *
GeomPrimitive_C_make_patches_p_p(GeomPrimitive const *param0) {
    return new ConstPointerTo< GeomPrimitive >((*param0).make_patches());
}


ConstPointerTo< GeomPrimitive > *
GeomPrimitive_C_make_adjacency_p_p(GeomPrimitive const *param0) {
    return new ConstPointerTo< GeomPrimitive >((*param0).make_adjacency());
}


int
GeomPrimitive_C_get_num_bytes_i_p(GeomPrimitive const *param0) {
    return (*param0).get_num_bytes();
}


int
GeomPrimitive_C_get_data_size_bytes_i_p(GeomPrimitive const *param0) {
    return (*param0).get_data_size_bytes();
}


UpdateSeq *
GeomPrimitive_C_get_modified_p_p(GeomPrimitive const *param0) {
    return new UpdateSeq((*param0).get_modified());
}


bool
GeomPrimitive_C_request_resident_B_pp(GeomPrimitive const *param0, Thread *param1) {
    return (*param0).request_resident(param1);
}


bool
GeomPrimitive_C_request_resident_B_p(GeomPrimitive const *param0) {
    return (*param0).request_resident();
}


bool
GeomPrimitive_C_check_valid_B_pp(GeomPrimitive const *param0, GeomVertexData const *param1) {
    return (*param0).check_valid(param1);
}


bool
GeomPrimitive_C_check_valid_B_pp_1_B_pp(GeomPrimitive const *param0, GeomVertexDataPipelineReader const *param1) {
    return (*param0).check_valid(param1);
}


void
GeomPrimitive_C_output_v_pp(GeomPrimitive const *param0, std::ostream *param1) {
    (*param0).output(*param1);
}


void
GeomPrimitive_C_write_v_ppi(GeomPrimitive const *param0, std::ostream *param1, int param2) {
    (*param0).write(*param1, param2);
}


ConstPointerTo< GeomVertexArrayData > *
GeomPrimitive_C_get_vertices_p_p(GeomPrimitive const *param0) {
    return new ConstPointerTo< GeomVertexArrayData >((*param0).get_vertices());
}


ConstPointerTo< GeomVertexArrayDataHandle > *
GeomPrimitive_C_get_vertices_handle_p_pp(GeomPrimitive const *param0, Thread *param1) {
    return new ConstPointerTo< GeomVertexArrayDataHandle >((*param0).get_vertices_handle(param1));
}


PointerTo< GeomVertexArrayData > *
GeomPrimitive_C_modify_vertices_p_pi(GeomPrimitive *param0, int param1) {
    return new PointerTo< GeomVertexArrayData >((*param0).modify_vertices(param1));
}


PointerTo< GeomVertexArrayData > *
GeomPrimitive_C_modify_vertices_p_p(GeomPrimitive *param0) {
    return new PointerTo< GeomVertexArrayData >((*param0).modify_vertices());
}


PointerTo< GeomVertexArrayDataHandle > *
GeomPrimitive_C_modify_vertices_handle_p_pp(GeomPrimitive *param0, Thread *param1) {
    return new PointerTo< GeomVertexArrayDataHandle >((*param0).modify_vertices_handle(param1));
}


void
GeomPrimitive_C_set_vertices_v_ppi(GeomPrimitive *param0, GeomVertexArrayData const *param1, int param2) {
    (*param0).set_vertices(param1, param2);
}


void
GeomPrimitive_C_set_vertices_v_pp(GeomPrimitive *param0, GeomVertexArrayData const *param1) {
    (*param0).set_vertices(param1);
}


void
GeomPrimitive_C_set_nonindexed_vertices_v_pii(GeomPrimitive *param0, int param1, int param2) {
    (*param0).set_nonindexed_vertices(param1, param2);
}


int
GeomPrimitive_C_get_index_stride_i_p(GeomPrimitive const *param0) {
    return (*param0).get_index_stride();
}


int
GeomPrimitive_C_get_strip_cut_index_i_p(GeomPrimitive const *param0) {
    return (*param0).get_strip_cut_index();
}


CPTA_int *
GeomPrimitive_C_get_ends_p_p(GeomPrimitive const *param0) {
    return new CPTA_int((*param0).get_ends());
}


PTA_int *
GeomPrimitive_C_modify_ends_p_p(GeomPrimitive *param0) {
    return new PTA_int((*param0).modify_ends());
}


void
GeomPrimitive_C_set_ends_v_pp(GeomPrimitive *param0, PTA_int *param1) {
    (*param0).set_ends(*param1);
}


ConstPointerTo< GeomVertexArrayData > *
GeomPrimitive_C_get_mins_p_p(GeomPrimitive const *param0) {
    return new ConstPointerTo< GeomVertexArrayData >((*param0).get_mins());
}


ConstPointerTo< GeomVertexArrayData > *
GeomPrimitive_C_get_maxs_p_p(GeomPrimitive const *param0) {
    return new ConstPointerTo< GeomVertexArrayData >((*param0).get_maxs());
}


void
GeomPrimitive_C_set_minmax_v_piipp(GeomPrimitive *param0, int param1, int param2, GeomVertexArrayData *param3, GeomVertexArrayData *param4) {
    (*param0).set_minmax(param1, param2, param3, param4);
}


void
GeomPrimitive_C_clear_minmax_v_p(GeomPrimitive *param0) {
    (*param0).clear_minmax();
}


int
GeomPrimitive_C_get_num_vertices_per_primitive_i_p(GeomPrimitive const *param0) {
    return (*param0).get_num_vertices_per_primitive();
}


int
GeomPrimitive_C_get_min_num_vertices_per_primitive_i_p(GeomPrimitive const *param0) {
    return (*param0).get_min_num_vertices_per_primitive();
}


int
GeomPrimitive_C_get_num_unused_vertices_per_primitive_i_p(GeomPrimitive const *param0) {
    return (*param0).get_num_unused_vertices_per_primitive();
}


void
GeomPrimitive_C_prepare_v_pp(GeomPrimitive *param0, PreparedGraphicsObjects *param1) {
    (*param0).prepare(param1);
}


bool
GeomPrimitive_C_is_prepared_B_pp(GeomPrimitive const *param0, PreparedGraphicsObjects *param1) {
    return (*param0).is_prepared(param1);
}


IndexBufferContext *
GeomPrimitive_C_prepare_now_p_ppp(GeomPrimitive *param0, PreparedGraphicsObjects *param1, GraphicsStateGuardianBase *param2) {
    return (*param0).prepare_now(param1, param2);
}


bool
GeomPrimitive_C_release_B_pp(GeomPrimitive *param0, PreparedGraphicsObjects *param1) {
    return (*param0).release(param1);
}


int
GeomPrimitive_C_release_all_i_p(GeomPrimitive *param0) {
    return (*param0).release_all();
}


GeomVertexArrayFormat const *
GeomPrimitive_C_get_index_format_p_p(GeomPrimitive const *param0) {
    return (*param0).get_index_format();
}


GeomVertexArrayFormat const *
GeomPrimitive_C_get_index_format_p_p_1_p_p(GeomEnums::NumericType param0) {
    return GeomPrimitive::get_index_format(param0);
}


PointerTo< GeomVertexArrayData > *
GeomPrimitive_C_make_index_data_p_p(GeomPrimitive const *param0) {
    return new PointerTo< GeomVertexArrayData >((*param0).make_index_data());
}


bool
GeomPrimitive_C_draw_B_pppB(GeomPrimitive const *param0, GraphicsStateGuardianBase *param1, GeomPrimitivePipelineReader const *param2, bool param3) {
    return (*param0).draw(param1, param2, param3);
}


void
GeomPrimitive_C_write_datagram_v_ppp(GeomPrimitive *param0, BamWriter *param1, Datagram *param2) {
    (*param0).write_datagram(param1, *param2);
}


void
GeomPrimitive_C_finalize_v_pp(GeomPrimitive *param0, BamReader *param1) {
    (*param0).finalize(param1);
}


int
GeomPrimitive_C_get_class_type_i_v() {
    return (GeomPrimitive::get_class_type()).get_index();
}


void
GeomPrimitive_C_init_type_v_v() {
    GeomPrimitive::init_type();
}


int
GeomPrimitive_C_get_type_i_p(GeomPrimitive const *param0) {
    return ((*param0).get_type()).get_index();
}


int
GeomPrimitive_C_force_init_type_i_p(GeomPrimitive *param0) {
    return ((*param0).force_init_type()).get_index();
}


// GeomTriangles


GeomTriangles *
GeomTriangles_C_ctor_p_p(GeomEnums::UsageHint param0) {
    return new GeomTriangles(param0);
}


GeomTriangles *
GeomTriangles_C_ctor_p_p_1_p_p(GeomTriangles const *param0) {
    return new GeomTriangles(*param0);
}


bool
GeomTriangles_C_draw_B_pppB(GeomTriangles const *param0, GraphicsStateGuardianBase *param1, GeomPrimitivePipelineReader const *param2, bool param3) {
    return (*param0).draw(param1, param2, param3);
}


void
GeomTriangles_C_register_with_read_factory_v_v() {
    GeomTriangles::register_with_read_factory();
}


int
GeomTriangles_C_get_class_type_i_v() {
    return (GeomTriangles::get_class_type()).get_index();
}


void
GeomTriangles_C_init_type_v_v() {
    GeomTriangles::init_type();
}


int
GeomTriangles_C_get_type_i_p(GeomTriangles const *param0) {
    return ((*param0).get_type()).get_index();
}


int
GeomTriangles_C_force_init_type_i_p(GeomTriangles *param0) {
    return ((*param0).force_init_type()).get_index();
}


// GeomVertexData


CopyOnWriteObject *
GeomVertexData_C_upcast_to_CopyOnWriteObject_p_p(GeomVertexData *param0) {
    return (CopyOnWriteObject *)param0;
}


GeomEnums *
GeomVertexData_C_upcast_to_GeomEnums_p_p(GeomVertexData *param0) {
    return (GeomEnums *)param0;
}


GeomVertexData *
GeomVertexData_C_ctor_p_p(GeomVertexData const *param0) {
    return new GeomVertexData(*param0);
}


GeomVertexData *
GeomVertexData_C_ctor_p_pp(GeomVertexData const *param0, GeomVertexFormat const *param1) {
    return new GeomVertexData(*param0, param1);
}


GeomVertexData *
GeomVertexData_C_ctor_p_spp(char const *param0, GeomVertexFormat const *param1, GeomEnums::UsageHint param2) {
    return new GeomVertexData(std::string(param0), param1, param2);
}


int
GeomVertexData_C_compare_to_i_pp(GeomVertexData const *param0, GeomVertexData const *param1) {
    return (*param0).compare_to(*param1);
}


char const *
GeomVertexData_C_get_name_s_p(GeomVertexData const *param0) {
    return ((*param0).get_name()).c_str();
}


void
GeomVertexData_C_set_name_v_ps(GeomVertexData *param0, char const *param1) {
    (*param0).set_name(std::string(param1));
}


GeomEnums::UsageHint
GeomVertexData_C_get_usage_hint_p_p(GeomVertexData const *param0) {
    return (*param0).get_usage_hint();
}


void
GeomVertexData_C_set_usage_hint_v_pp(GeomVertexData *param0, GeomEnums::UsageHint param1) {
    (*param0).set_usage_hint(param1);
}


GeomVertexFormat const *
GeomVertexData_C_get_format_p_p(GeomVertexData const *param0) {
    return (*param0).get_format();
}


void
GeomVertexData_C_set_format_v_pp(GeomVertexData *param0, GeomVertexFormat const *param1) {
    (*param0).set_format(param1);
}


void
GeomVertexData_C_unclean_set_format_v_pp(GeomVertexData *param0, GeomVertexFormat const *param1) {
    (*param0).unclean_set_format(param1);
}


bool
GeomVertexData_C_has_column_B_ps(GeomVertexData const *param0, InternalName const *param1) {
    return (*param0).has_column(param1);
}


int
GeomVertexData_C_get_num_rows_i_p(GeomVertexData const *param0) {
    return (*param0).get_num_rows();
}


bool
GeomVertexData_C_set_num_rows_B_pi(GeomVertexData *param0, int param1) {
    return (*param0).set_num_rows(param1);
}


bool
GeomVertexData_C_unclean_set_num_rows_B_pi(GeomVertexData *param0, int param1) {
    return (*param0).unclean_set_num_rows(param1);
}


bool
GeomVertexData_C_reserve_num_rows_B_pi(GeomVertexData *param0, int param1) {
    return (*param0).reserve_num_rows(param1);
}


void
GeomVertexData_C_clear_rows_v_p(GeomVertexData *param0) {
    (*param0).clear_rows();
}


std::size_t
GeomVertexData_C_get_num_arrays_p_p(GeomVertexData const *param0) {
    return (*param0).get_num_arrays();
}


ConstPointerTo< GeomVertexArrayData > *
GeomVertexData_C_get_array_p_pp(GeomVertexData const *param0, std::size_t param1) {
    return new ConstPointerTo< GeomVertexArrayData >((*param0).get_array(param1));
}


ConstPointerTo< GeomVertexArrayDataHandle > *
GeomVertexData_C_get_array_handle_p_pp(GeomVertexData const *param0, std::size_t param1) {
    return new ConstPointerTo< GeomVertexArrayDataHandle >((*param0).get_array_handle(param1));
}


PointerTo< GeomVertexArrayData > *
GeomVertexData_C_modify_array_p_pp(GeomVertexData *param0, std::size_t param1) {
    return new PointerTo< GeomVertexArrayData >((*param0).modify_array(param1));
}


PointerTo< GeomVertexArrayDataHandle > *
GeomVertexData_C_modify_array_handle_p_pp(GeomVertexData *param0, std::size_t param1) {
    return new PointerTo< GeomVertexArrayDataHandle >((*param0).modify_array_handle(param1));
}


void
GeomVertexData_C_set_array_v_ppp(GeomVertexData *param0, std::size_t param1, GeomVertexArrayData const *param2) {
    (*param0).set_array(param1, param2);
}


TransformTable const *
GeomVertexData_C_get_transform_table_p_p(GeomVertexData const *param0) {
    return (*param0).get_transform_table();
}


void
GeomVertexData_C_set_transform_table_v_pp(GeomVertexData *param0, TransformTable const *param1) {
    (*param0).set_transform_table(param1);
}


void
GeomVertexData_C_clear_transform_table_v_p(GeomVertexData *param0) {
    (*param0).clear_transform_table();
}


ConstPointerTo< TransformBlendTable > *
GeomVertexData_C_get_transform_blend_table_p_p(GeomVertexData const *param0) {
    return new ConstPointerTo< TransformBlendTable >((*param0).get_transform_blend_table());
}


PointerTo< TransformBlendTable > *
GeomVertexData_C_modify_transform_blend_table_p_p(GeomVertexData *param0) {
    return new PointerTo< TransformBlendTable >((*param0).modify_transform_blend_table());
}


void
GeomVertexData_C_set_transform_blend_table_v_pp(GeomVertexData *param0, TransformBlendTable const *param1) {
    (*param0).set_transform_blend_table(param1);
}


void
GeomVertexData_C_clear_transform_blend_table_v_p(GeomVertexData *param0) {
    (*param0).clear_transform_blend_table();
}


SliderTable const *
GeomVertexData_C_get_slider_table_p_p(GeomVertexData const *param0) {
    return (*param0).get_slider_table();
}


void
GeomVertexData_C_set_slider_table_v_pp(GeomVertexData *param0, SliderTable const *param1) {
    (*param0).set_slider_table(param1);
}


void
GeomVertexData_C_clear_slider_table_v_p(GeomVertexData *param0) {
    (*param0).clear_slider_table();
}


int
GeomVertexData_C_get_num_bytes_i_p(GeomVertexData const *param0) {
    return (*param0).get_num_bytes();
}


UpdateSeq *
GeomVertexData_C_get_modified_p_pp(GeomVertexData const *param0, Thread *param1) {
    return new UpdateSeq((*param0).get_modified(param1));
}


UpdateSeq *
GeomVertexData_C_get_modified_p_p(GeomVertexData const *param0) {
    return new UpdateSeq((*param0).get_modified());
}


bool
GeomVertexData_C_request_resident_B_p(GeomVertexData const *param0) {
    return (*param0).request_resident();
}


void
GeomVertexData_C_copy_from_v_ppBp(GeomVertexData *param0, GeomVertexData const *param1, bool param2, Thread *param3) {
    (*param0).copy_from(param1, param2, param3);
}


void
GeomVertexData_C_copy_from_v_ppB(GeomVertexData *param0, GeomVertexData const *param1, bool param2) {
    (*param0).copy_from(param1, param2);
}


void
GeomVertexData_C_copy_row_from_v_pipip(GeomVertexData *param0, int param1, GeomVertexData const *param2, int param3, Thread *param4) {
    (*param0).copy_row_from(param1, param2, param3, param4);
}


ConstPointerTo< GeomVertexData > *
GeomVertexData_C_convert_to_p_pp(GeomVertexData const *param0, GeomVertexFormat const *param1) {
    return new ConstPointerTo< GeomVertexData >((*param0).convert_to(param1));
}


ConstPointerTo< GeomVertexData > *
GeomVertexData_C_scale_color_p_pp(GeomVertexData const *param0, LVecBase4 const *param1) {
    return new ConstPointerTo< GeomVertexData >((*param0).scale_color(*param1));
}


ConstPointerTo< GeomVertexData > *
GeomVertexData_C_scale_color_p_ppipp(GeomVertexData const *param0, LVecBase4 const *param1, int param2, GeomEnums::NumericType param3, GeomEnums::Contents param4) {
    return new ConstPointerTo< GeomVertexData >((*param0).scale_color(*param1, param2, param3, param4));
}


ConstPointerTo< GeomVertexData > *
GeomVertexData_C_set_color_p_pp(GeomVertexData const *param0, LColor const *param1) {
    return new ConstPointerTo< GeomVertexData >((*param0).set_color(*param1));
}


ConstPointerTo< GeomVertexData > *
GeomVertexData_C_set_color_p_ppipp(GeomVertexData const *param0, LColor const *param1, int param2, GeomEnums::NumericType param3, GeomEnums::Contents param4) {
    return new ConstPointerTo< GeomVertexData >((*param0).set_color(*param1, param2, param3, param4));
}


ConstPointerTo< GeomVertexData > *
GeomVertexData_C_reverse_normals_p_p(GeomVertexData const *param0) {
    return new ConstPointerTo< GeomVertexData >((*param0).reverse_normals());
}


ConstPointerTo< GeomVertexData > *
GeomVertexData_C_animate_vertices_p_pBp(GeomVertexData const *param0, bool param1, Thread *param2) {
    return new ConstPointerTo< GeomVertexData >((*param0).animate_vertices(param1, param2));
}


void
GeomVertexData_C_clear_animated_vertices_v_p(GeomVertexData *param0) {
    (*param0).clear_animated_vertices();
}


void
GeomVertexData_C_transform_vertices_v_pp(GeomVertexData *param0, LMatrix4 const *param1) {
    (*param0).transform_vertices(*param1);
}


void
GeomVertexData_C_transform_vertices_v_ppp(GeomVertexData *param0, LMatrix4 const *param1, SparseArray const *param2) {
    (*param0).transform_vertices(*param1, *param2);
}


void
GeomVertexData_C_transform_vertices_v_ppii(GeomVertexData *param0, LMatrix4 const *param1, int param2, int param3) {
    (*param0).transform_vertices(*param1, param2, param3);
}


PointerTo< GeomVertexData > *
GeomVertexData_C_replace_column_p_ppipp(GeomVertexData const *param0, InternalName *param1, int param2, GeomEnums::NumericType param3, GeomEnums::Contents param4) {
    return new PointerTo< GeomVertexData >((*param0).replace_column(param1, param2, param3, param4));
}


void
GeomVertexData_C_output_v_pp(GeomVertexData const *param0, std::ostream *param1) {
    (*param0).output(*param1);
}


void
GeomVertexData_C_write_v_ppi(GeomVertexData const *param0, std::ostream *param1, int param2) {
    (*param0).write(*param1, param2);
}


void
GeomVertexData_C_write_v_pp(GeomVertexData const *param0, std::ostream *param1) {
    (*param0).write(*param1);
}


void
GeomVertexData_C_describe_vertex_v_ppi(GeomVertexData const *param0, std::ostream *param1, int param2) {
    (*param0).describe_vertex(*param1, param2);
}


void
GeomVertexData_C_clear_cache_v_p(GeomVertexData *param0) {
    (*param0).clear_cache();
}


void
GeomVertexData_C_clear_cache_stage_v_p(GeomVertexData *param0) {
    (*param0).clear_cache_stage();
}


uint32_t
GeomVertexData_C_pack_abcd_I_IIII(unsigned int param0, unsigned int param1, unsigned int param2, unsigned int param3) {
    return GeomVertexData::pack_abcd(param0, param1, param2, param3);
}


unsigned int
GeomVertexData_C_unpack_abcd_a_I_I(uint32_t param0) {
    return GeomVertexData::unpack_abcd_a(param0);
}


unsigned int
GeomVertexData_C_unpack_abcd_b_I_I(uint32_t param0) {
    return GeomVertexData::unpack_abcd_b(param0);
}


unsigned int
GeomVertexData_C_unpack_abcd_c_I_I(uint32_t param0) {
    return GeomVertexData::unpack_abcd_c(param0);
}


unsigned int
GeomVertexData_C_unpack_abcd_d_I_I(uint32_t param0) {
    return GeomVertexData::unpack_abcd_d(param0);
}


uint32_t
GeomVertexData_C_pack_ufloat_I_fff(float param0, float param1, float param2) {
    return GeomVertexData::pack_ufloat(param0, param1, param2);
}


float
GeomVertexData_C_unpack_ufloat_a_f_I(uint32_t param0) {
    return GeomVertexData::unpack_ufloat_a(param0);
}


float
GeomVertexData_C_unpack_ufloat_b_f_I(uint32_t param0) {
    return GeomVertexData::unpack_ufloat_b(param0);
}


float
GeomVertexData_C_unpack_ufloat_c_f_I(uint32_t param0) {
    return GeomVertexData::unpack_ufloat_c(param0);
}


void
GeomVertexData_C_register_with_read_factory_v_v() {
    GeomVertexData::register_with_read_factory();
}


void
GeomVertexData_C_write_datagram_v_ppp(GeomVertexData *param0, BamWriter *param1, Datagram *param2) {
    (*param0).write_datagram(param1, *param2);
}


bool
GeomVertexData_C_require_fully_complete_B_p(GeomVertexData const *param0) {
    return (*param0).require_fully_complete();
}


void
GeomVertexData_C_finalize_v_pp(GeomVertexData *param0, BamReader *param1) {
    (*param0).finalize(param1);
}


int
GeomVertexData_C_get_class_type_i_v() {
    return (GeomVertexData::get_class_type()).get_index();
}


void
GeomVertexData_C_init_type_v_v() {
    GeomVertexData::init_type();
}


int
GeomVertexData_C_get_type_i_p(GeomVertexData const *param0) {
    return ((*param0).get_type()).get_index();
}


int
GeomVertexData_C_force_init_type_i_p(GeomVertexData *param0) {
    return ((*param0).force_init_type()).get_index();
}


// GeomVertexFormat


TypedWritableReferenceCount *
GeomVertexFormat_C_upcast_to_TypedWritableReferenceCount_p_p(GeomVertexFormat *param0) {
    return (TypedWritableReferenceCount *)param0;
}


GeomEnums *
GeomVertexFormat_C_upcast_to_GeomEnums_p_p(GeomVertexFormat *param0) {
    return (GeomEnums *)param0;
}


GeomVertexFormat *
GeomVertexFormat_C_ctor_p_v() {
    return new GeomVertexFormat();
}


GeomVertexFormat *
GeomVertexFormat_C_ctor_p_p(GeomVertexArrayFormat const *param0) {
    return new GeomVertexFormat(param0);
}


GeomVertexFormat *
GeomVertexFormat_C_ctor_p_p_1_p_p(GeomVertexFormat const *param0) {
    return new GeomVertexFormat(*param0);
}


bool
GeomVertexFormat_C_unref_B_p(GeomVertexFormat const *param0) {
    return (*param0).unref();
}


bool
GeomVertexFormat_C_is_registered_B_p(GeomVertexFormat const *param0) {
    return (*param0).is_registered();
}


ConstPointerTo< GeomVertexFormat > *
GeomVertexFormat_C_register_format_p_p(GeomVertexArrayFormat const *param0) {
    return new ConstPointerTo< GeomVertexFormat >(GeomVertexFormat::register_format(param0));
}


ConstPointerTo< GeomVertexFormat > *
GeomVertexFormat_C_register_format_p_p_1_p_p(GeomVertexFormat const *param0) {
    return new ConstPointerTo< GeomVertexFormat >(GeomVertexFormat::register_format(param0));
}


GeomVertexAnimationSpec const *
GeomVertexFormat_C_get_animation_p_p(GeomVertexFormat const *param0) {
    return &((*param0).get_animation());
}


void
GeomVertexFormat_C_set_animation_v_pp(GeomVertexFormat *param0, GeomVertexAnimationSpec const *param1) {
    (*param0).set_animation(*param1);
}


ConstPointerTo< GeomVertexFormat > *
GeomVertexFormat_C_get_post_animated_format_p_p(GeomVertexFormat const *param0) {
    return new ConstPointerTo< GeomVertexFormat >((*param0).get_post_animated_format());
}


ConstPointerTo< GeomVertexFormat > *
GeomVertexFormat_C_get_union_format_p_pp(GeomVertexFormat const *param0, GeomVertexFormat const *param1) {
    return new ConstPointerTo< GeomVertexFormat >((*param0).get_union_format(param1));
}


std::size_t
GeomVertexFormat_C_get_num_arrays_p_p(GeomVertexFormat const *param0) {
    return (*param0).get_num_arrays();
}


GeomVertexArrayFormat const *
GeomVertexFormat_C_get_array_p_pp(GeomVertexFormat const *param0, std::size_t param1) {
    return (*param0).get_array(param1);
}


GeomVertexArrayFormat *
GeomVertexFormat_C_modify_array_p_pp(GeomVertexFormat *param0, std::size_t param1) {
    return (*param0).modify_array(param1);
}


void
GeomVertexFormat_C_set_array_v_ppp(GeomVertexFormat *param0, std::size_t param1, GeomVertexArrayFormat const *param2) {
    (*param0).set_array(param1, param2);
}


void
GeomVertexFormat_C_remove_array_v_pp(GeomVertexFormat *param0, std::size_t param1) {
    (*param0).remove_array(param1);
}


std::size_t
GeomVertexFormat_C_add_array_p_pp(GeomVertexFormat *param0, GeomVertexArrayFormat const *param1) {
    return (*param0).add_array(param1);
}


void
GeomVertexFormat_C_insert_array_v_ppp(GeomVertexFormat *param0, std::size_t param1, GeomVertexArrayFormat const *param2) {
    (*param0).insert_array(param1, param2);
}


void
GeomVertexFormat_C_clear_arrays_v_p(GeomVertexFormat *param0) {
    (*param0).clear_arrays();
}


void
GeomVertexFormat_C_remove_empty_arrays_v_p(GeomVertexFormat *param0) {
    (*param0).remove_empty_arrays();
}


std::size_t
GeomVertexFormat_C_get_num_columns_p_p(GeomVertexFormat const *param0) {
    return (*param0).get_num_columns();
}


int
GeomVertexFormat_C_get_array_with_i_ps(GeomVertexFormat const *param0, InternalName const *param1) {
    return (*param0).get_array_with(param1);
}


int
GeomVertexFormat_C_get_array_with_i_pp(GeomVertexFormat const *param0, std::size_t param1) {
    return (*param0).get_array_with(param1);
}


GeomVertexColumn const *
GeomVertexFormat_C_get_column_p_ps(GeomVertexFormat const *param0, InternalName const *param1) {
    return (*param0).get_column(param1);
}


GeomVertexColumn const *
GeomVertexFormat_C_get_column_p_pp(GeomVertexFormat const *param0, std::size_t param1) {
    return (*param0).get_column(param1);
}


bool
GeomVertexFormat_C_has_column_B_ps(GeomVertexFormat const *param0, InternalName const *param1) {
    return (*param0).has_column(param1);
}


InternalName const *
GeomVertexFormat_C_get_column_name_s_pp(GeomVertexFormat const *param0, std::size_t param1) {
    return (*param0).get_column_name(param1);
}


void
GeomVertexFormat_C_remove_column_v_psB(GeomVertexFormat *param0, InternalName const *param1, bool param2) {
    (*param0).remove_column(param1, param2);
}


void
GeomVertexFormat_C_remove_column_v_ps(GeomVertexFormat *param0, InternalName const *param1) {
    (*param0).remove_column(param1);
}


void
GeomVertexFormat_C_pack_columns_v_p(GeomVertexFormat *param0) {
    (*param0).pack_columns();
}


void
GeomVertexFormat_C_align_columns_for_animation_v_p(GeomVertexFormat *param0) {
    (*param0).align_columns_for_animation();
}


void
GeomVertexFormat_C_maybe_align_columns_for_animation_v_p(GeomVertexFormat *param0) {
    (*param0).maybe_align_columns_for_animation();
}


std::size_t
GeomVertexFormat_C_get_num_points_p_p(GeomVertexFormat const *param0) {
    return (*param0).get_num_points();
}


InternalName const *
GeomVertexFormat_C_get_point_s_pp(GeomVertexFormat const *param0, std::size_t param1) {
    return (*param0).get_point(param1);
}


std::size_t
GeomVertexFormat_C_get_num_vectors_p_p(GeomVertexFormat const *param0) {
    return (*param0).get_num_vectors();
}


InternalName const *
GeomVertexFormat_C_get_vector_s_pp(GeomVertexFormat const *param0, std::size_t param1) {
    return (*param0).get_vector(param1);
}


std::size_t
GeomVertexFormat_C_get_num_texcoords_p_p(GeomVertexFormat const *param0) {
    return (*param0).get_num_texcoords();
}


InternalName const *
GeomVertexFormat_C_get_texcoord_s_pp(GeomVertexFormat const *param0, std::size_t param1) {
    return (*param0).get_texcoord(param1);
}


std::size_t
GeomVertexFormat_C_get_num_morphs_p_p(GeomVertexFormat const *param0) {
    return (*param0).get_num_morphs();
}


InternalName const *
GeomVertexFormat_C_get_morph_slider_s_pp(GeomVertexFormat const *param0, std::size_t param1) {
    return (*param0).get_morph_slider(param1);
}


InternalName const *
GeomVertexFormat_C_get_morph_base_s_pp(GeomVertexFormat const *param0, std::size_t param1) {
    return (*param0).get_morph_base(param1);
}


InternalName const *
GeomVertexFormat_C_get_morph_delta_s_pp(GeomVertexFormat const *param0, std::size_t param1) {
    return (*param0).get_morph_delta(param1);
}


void
GeomVertexFormat_C_output_v_pp(GeomVertexFormat const *param0, std::ostream *param1) {
    (*param0).output(*param1);
}


void
GeomVertexFormat_C_write_v_ppi(GeomVertexFormat const *param0, std::ostream *param1, int param2) {
    (*param0).write(*param1, param2);
}


void
GeomVertexFormat_C_write_v_pp(GeomVertexFormat const *param0, std::ostream *param1) {
    (*param0).write(*param1);
}


void
GeomVertexFormat_C_write_with_data_v_ppip(GeomVertexFormat const *param0, std::ostream *param1, int param2, GeomVertexData const *param3) {
    (*param0).write_with_data(*param1, param2, param3);
}


GeomVertexFormat const *
GeomVertexFormat_C_get_empty_p_v() {
    return GeomVertexFormat::get_empty();
}


GeomVertexFormat const *
GeomVertexFormat_C_get_v3_p_v() {
    return GeomVertexFormat::get_v3();
}


GeomVertexFormat const *
GeomVertexFormat_C_get_v3n3_p_v() {
    return GeomVertexFormat::get_v3n3();
}


GeomVertexFormat const *
GeomVertexFormat_C_get_v3t2_p_v() {
    return GeomVertexFormat::get_v3t2();
}


GeomVertexFormat const *
GeomVertexFormat_C_get_v3n3t2_p_v() {
    return GeomVertexFormat::get_v3n3t2();
}


GeomVertexFormat const *
GeomVertexFormat_C_get_v3cp_p_v() {
    return GeomVertexFormat::get_v3cp();
}


GeomVertexFormat const *
GeomVertexFormat_C_get_v3cpt2_p_v() {
    return GeomVertexFormat::get_v3cpt2();
}


GeomVertexFormat const *
GeomVertexFormat_C_get_v3n3cp_p_v() {
    return GeomVertexFormat::get_v3n3cp();
}


GeomVertexFormat const *
GeomVertexFormat_C_get_v3n3cpt2_p_v() {
    return GeomVertexFormat::get_v3n3cpt2();
}


GeomVertexFormat const *
GeomVertexFormat_C_get_v3c4_p_v() {
    return GeomVertexFormat::get_v3c4();
}


GeomVertexFormat const *
GeomVertexFormat_C_get_v3c4t2_p_v() {
    return GeomVertexFormat::get_v3c4t2();
}


GeomVertexFormat const *
GeomVertexFormat_C_get_v3n3c4_p_v() {
    return GeomVertexFormat::get_v3n3c4();
}


GeomVertexFormat const *
GeomVertexFormat_C_get_v3n3c4t2_p_v() {
    return GeomVertexFormat::get_v3n3c4t2();
}


int
GeomVertexFormat_C_get_vertex_array_index_i_p(GeomVertexFormat const *param0) {
    return (*param0).get_vertex_array_index();
}


GeomVertexColumn const *
GeomVertexFormat_C_get_vertex_column_p_p(GeomVertexFormat const *param0) {
    return (*param0).get_vertex_column();
}


int
GeomVertexFormat_C_get_normal_array_index_i_p(GeomVertexFormat const *param0) {
    return (*param0).get_normal_array_index();
}


GeomVertexColumn const *
GeomVertexFormat_C_get_normal_column_p_p(GeomVertexFormat const *param0) {
    return (*param0).get_normal_column();
}


int
GeomVertexFormat_C_get_color_array_index_i_p(GeomVertexFormat const *param0) {
    return (*param0).get_color_array_index();
}


GeomVertexColumn const *
GeomVertexFormat_C_get_color_column_p_p(GeomVertexFormat const *param0) {
    return (*param0).get_color_column();
}


int
GeomVertexFormat_C_compare_to_i_pp(GeomVertexFormat const *param0, GeomVertexFormat const *param1) {
    return (*param0).compare_to(*param1);
}


void
GeomVertexFormat_C_register_with_read_factory_v_v() {
    GeomVertexFormat::register_with_read_factory();
}


void
GeomVertexFormat_C_write_datagram_v_ppp(GeomVertexFormat *param0, BamWriter *param1, Datagram *param2) {
    (*param0).write_datagram(param1, *param2);
}


int
GeomVertexFormat_C_get_class_type_i_v() {
    return (GeomVertexFormat::get_class_type()).get_index();
}


void
GeomVertexFormat_C_init_type_v_v() {
    GeomVertexFormat::init_type();
}


int
GeomVertexFormat_C_get_type_i_p(GeomVertexFormat const *param0) {
    return ((*param0).get_type()).get_index();
}


int
GeomVertexFormat_C_force_init_type_i_p(GeomVertexFormat *param0) {
    return ((*param0).force_init_type()).get_index();
}


// GeomVertexWriter


GeomVertexWriter *
GeomVertexWriter_C_ctor_p_pp(GeomVertexArrayData *param0, Thread *param1) {
    return new GeomVertexWriter(param0, param1);
}


GeomVertexWriter *
GeomVertexWriter_C_ctor_p_p(GeomVertexArrayData *param0) {
    return new GeomVertexWriter(param0);
}


GeomVertexWriter *
GeomVertexWriter_C_ctor_p_pip(GeomVertexArrayData *param0, int param1, Thread *param2) {
    return new GeomVertexWriter(param0, param1, param2);
}


GeomVertexWriter *
GeomVertexWriter_C_ctor_p_pi(GeomVertexArrayData *param0, int param1) {
    return new GeomVertexWriter(param0, param1);
}


GeomVertexWriter *
GeomVertexWriter_C_ctor_p_psp(GeomVertexData *param0, CPT_InternalName *param1, Thread *param2) {
    return new GeomVertexWriter(param0, *param1, param2);
}


GeomVertexWriter *
GeomVertexWriter_C_ctor_p_ps(GeomVertexData *param0, CPT_InternalName *param1) {
    return new GeomVertexWriter(param0, *param1);
}


GeomVertexWriter *
GeomVertexWriter_C_ctor_p_pp_1_p_pp(GeomVertexData *param0, Thread *param1) {
    return new GeomVertexWriter(param0, param1);
}


GeomVertexWriter *
GeomVertexWriter_C_ctor_p_p_1_p_p(GeomVertexData *param0) {
    return new GeomVertexWriter(param0);
}


GeomVertexWriter *
GeomVertexWriter_C_ctor_p_ps_1_p_ps(GeomVertexDataPipelineWriter *param0, InternalName const *param1) {
    return new GeomVertexWriter(param0, param1);
}


GeomVertexWriter *
GeomVertexWriter_C_ctor_p_p_1_p_p_2_p_p(GeomVertexWriter const *param0) {
    return new GeomVertexWriter(*param0);
}


GeomVertexWriter *
GeomVertexWriter_C_ctor_p_p_1_p_p_2_p_p_3_p_p(Thread *param0) {
    return new GeomVertexWriter(param0);
}


GeomVertexWriter *
GeomVertexWriter_C_ctor_p_v() {
    return new GeomVertexWriter();
}


GeomVertexData *
GeomVertexWriter_C_get_vertex_data_p_p(GeomVertexWriter const *param0) {
    return (*param0).get_vertex_data();
}


GeomVertexArrayData *
GeomVertexWriter_C_get_array_data_p_p(GeomVertexWriter const *param0) {
    return (*param0).get_array_data();
}


GeomVertexArrayDataHandle *
GeomVertexWriter_C_get_array_handle_p_p(GeomVertexWriter const *param0) {
    return (*param0).get_array_handle();
}


std::size_t
GeomVertexWriter_C_get_stride_p_p(GeomVertexWriter const *param0) {
    return (*param0).get_stride();
}


Thread *
GeomVertexWriter_C_get_current_thread_p_p(GeomVertexWriter const *param0) {
    return (*param0).get_current_thread();
}


bool
GeomVertexWriter_C_set_column_B_ps(GeomVertexWriter *param0, CPT_InternalName *param1) {
    return (*param0).set_column(*param1);
}


bool
GeomVertexWriter_C_set_column_B_pi(GeomVertexWriter *param0, int param1) {
    return (*param0).set_column(param1);
}


bool
GeomVertexWriter_C_set_column_B_pip(GeomVertexWriter *param0, int param1, GeomVertexColumn const *param2) {
    return (*param0).set_column(param1, param2);
}


void
GeomVertexWriter_C_clear_v_p(GeomVertexWriter *param0) {
    (*param0).clear();
}


bool
GeomVertexWriter_C_reserve_num_rows_B_pi(GeomVertexWriter *param0, int param1) {
    return (*param0).reserve_num_rows(param1);
}


bool
GeomVertexWriter_C_has_column_B_p(GeomVertexWriter const *param0) {
    return (*param0).has_column();
}


int
GeomVertexWriter_C_get_array_i_p(GeomVertexWriter const *param0) {
    return (*param0).get_array();
}


GeomVertexColumn const *
GeomVertexWriter_C_get_column_p_p(GeomVertexWriter const *param0) {
    return (*param0).get_column();
}


void
GeomVertexWriter_C_set_row_unsafe_v_pi(GeomVertexWriter *param0, int param1) {
    (*param0).set_row_unsafe(param1);
}


void
GeomVertexWriter_C_set_row_v_pi(GeomVertexWriter *param0, int param1) {
    (*param0).set_row(param1);
}


int
GeomVertexWriter_C_get_start_row_i_p(GeomVertexWriter const *param0) {
    return (*param0).get_start_row();
}


int
GeomVertexWriter_C_get_write_row_i_p(GeomVertexWriter const *param0) {
    return (*param0).get_write_row();
}


bool
GeomVertexWriter_C_is_at_end_B_p(GeomVertexWriter const *param0) {
    return (*param0).is_at_end();
}


void
GeomVertexWriter_C_set_data1f_v_pf(GeomVertexWriter *param0, float param1) {
    (*param0).set_data1f(param1);
}


void
GeomVertexWriter_C_set_data2f_v_pp(GeomVertexWriter *param0, LVecBase2f const *param1) {
    (*param0).set_data2f(*param1);
}


void
GeomVertexWriter_C_set_data2f_v_pff(GeomVertexWriter *param0, float param1, float param2) {
    (*param0).set_data2f(param1, param2);
}


void
GeomVertexWriter_C_set_data3f_v_pp(GeomVertexWriter *param0, LVecBase3f const *param1) {
    (*param0).set_data3f(*param1);
}


void
GeomVertexWriter_C_set_data3f_v_pfff(GeomVertexWriter *param0, float param1, float param2, float param3) {
    (*param0).set_data3f(param1, param2, param3);
}


void
GeomVertexWriter_C_set_data4f_v_pp(GeomVertexWriter *param0, LVecBase4f const *param1) {
    (*param0).set_data4f(*param1);
}


void
GeomVertexWriter_C_set_data4f_v_pffff(GeomVertexWriter *param0, float param1, float param2, float param3, float param4) {
    (*param0).set_data4f(param1, param2, param3, param4);
}


void
GeomVertexWriter_C_set_matrix3f_v_pp(GeomVertexWriter *param0, LMatrix3f const *param1) {
    (*param0).set_matrix3f(*param1);
}


void
GeomVertexWriter_C_set_matrix4f_v_pp(GeomVertexWriter *param0, LMatrix4f const *param1) {
    (*param0).set_matrix4f(*param1);
}


void
GeomVertexWriter_C_set_data1d_v_pd(GeomVertexWriter *param0, double param1) {
    (*param0).set_data1d(param1);
}


void
GeomVertexWriter_C_set_data2d_v_pp(GeomVertexWriter *param0, LVecBase2d const *param1) {
    (*param0).set_data2d(*param1);
}


void
GeomVertexWriter_C_set_data2d_v_pdd(GeomVertexWriter *param0, double param1, double param2) {
    (*param0).set_data2d(param1, param2);
}


void
GeomVertexWriter_C_set_data3d_v_pp(GeomVertexWriter *param0, LVecBase3d const *param1) {
    (*param0).set_data3d(*param1);
}


void
GeomVertexWriter_C_set_data3d_v_pddd(GeomVertexWriter *param0, double param1, double param2, double param3) {
    (*param0).set_data3d(param1, param2, param3);
}


void
GeomVertexWriter_C_set_data4d_v_pp(GeomVertexWriter *param0, LVecBase4d const *param1) {
    (*param0).set_data4d(*param1);
}


void
GeomVertexWriter_C_set_data4d_v_pdddd(GeomVertexWriter *param0, double param1, double param2, double param3, double param4) {
    (*param0).set_data4d(param1, param2, param3, param4);
}


void
GeomVertexWriter_C_set_matrix3d_v_pp(GeomVertexWriter *param0, LMatrix3d const *param1) {
    (*param0).set_matrix3d(*param1);
}


void
GeomVertexWriter_C_set_matrix4d_v_pp(GeomVertexWriter *param0, LMatrix4d const *param1) {
    (*param0).set_matrix4d(*param1);
}


void
GeomVertexWriter_C_set_data1_v_pf(GeomVertexWriter *param0, PN_stdfloat param1) {
    (*param0).set_data1(param1);
}


void
GeomVertexWriter_C_set_data2_v_pp(GeomVertexWriter *param0, LVecBase2 const *param1) {
    (*param0).set_data2(*param1);
}


void
GeomVertexWriter_C_set_data2_v_pff(GeomVertexWriter *param0, PN_stdfloat param1, PN_stdfloat param2) {
    (*param0).set_data2(param1, param2);
}


void
GeomVertexWriter_C_set_data3_v_pp(GeomVertexWriter *param0, LVecBase3 const *param1) {
    (*param0).set_data3(*param1);
}


void
GeomVertexWriter_C_set_data3_v_pfff(GeomVertexWriter *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3) {
    (*param0).set_data3(param1, param2, param3);
}


void
GeomVertexWriter_C_set_data4_v_pp(GeomVertexWriter *param0, LVecBase4 const *param1) {
    (*param0).set_data4(*param1);
}


void
GeomVertexWriter_C_set_data4_v_pffff(GeomVertexWriter *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    (*param0).set_data4(param1, param2, param3, param4);
}


void
GeomVertexWriter_C_set_matrix3_v_pp(GeomVertexWriter *param0, LMatrix3 const *param1) {
    (*param0).set_matrix3(*param1);
}


void
GeomVertexWriter_C_set_matrix4_v_pp(GeomVertexWriter *param0, LMatrix4 const *param1) {
    (*param0).set_matrix4(*param1);
}


void
GeomVertexWriter_C_set_data1i_v_pi(GeomVertexWriter *param0, int param1) {
    (*param0).set_data1i(param1);
}


void
GeomVertexWriter_C_set_data2i_v_pp(GeomVertexWriter *param0, LVecBase2i const *param1) {
    (*param0).set_data2i(*param1);
}


void
GeomVertexWriter_C_set_data2i_v_pii(GeomVertexWriter *param0, int param1, int param2) {
    (*param0).set_data2i(param1, param2);
}


void
GeomVertexWriter_C_set_data3i_v_pp(GeomVertexWriter *param0, LVecBase3i const *param1) {
    (*param0).set_data3i(*param1);
}


void
GeomVertexWriter_C_set_data3i_v_piii(GeomVertexWriter *param0, int param1, int param2, int param3) {
    (*param0).set_data3i(param1, param2, param3);
}


void
GeomVertexWriter_C_set_data4i_v_pp(GeomVertexWriter *param0, LVecBase4i const *param1) {
    (*param0).set_data4i(*param1);
}


void
GeomVertexWriter_C_set_data4i_v_piiii(GeomVertexWriter *param0, int param1, int param2, int param3, int param4) {
    (*param0).set_data4i(param1, param2, param3, param4);
}


void
GeomVertexWriter_C_add_data1f_v_pf(GeomVertexWriter *param0, float param1) {
    (*param0).add_data1f(param1);
}


void
GeomVertexWriter_C_add_data2f_v_pp(GeomVertexWriter *param0, LVecBase2f const *param1) {
    (*param0).add_data2f(*param1);
}


void
GeomVertexWriter_C_add_data2f_v_pff(GeomVertexWriter *param0, float param1, float param2) {
    (*param0).add_data2f(param1, param2);
}


void
GeomVertexWriter_C_add_data3f_v_pp(GeomVertexWriter *param0, LVecBase3f const *param1) {
    (*param0).add_data3f(*param1);
}


void
GeomVertexWriter_C_add_data3f_v_pfff(GeomVertexWriter *param0, float param1, float param2, float param3) {
    (*param0).add_data3f(param1, param2, param3);
}


void
GeomVertexWriter_C_add_data4f_v_pp(GeomVertexWriter *param0, LVecBase4f const *param1) {
    (*param0).add_data4f(*param1);
}


void
GeomVertexWriter_C_add_data4f_v_pffff(GeomVertexWriter *param0, float param1, float param2, float param3, float param4) {
    (*param0).add_data4f(param1, param2, param3, param4);
}


void
GeomVertexWriter_C_add_matrix3f_v_pp(GeomVertexWriter *param0, LMatrix3f const *param1) {
    (*param0).add_matrix3f(*param1);
}


void
GeomVertexWriter_C_add_matrix4f_v_pp(GeomVertexWriter *param0, LMatrix4f const *param1) {
    (*param0).add_matrix4f(*param1);
}


void
GeomVertexWriter_C_add_data1d_v_pd(GeomVertexWriter *param0, double param1) {
    (*param0).add_data1d(param1);
}


void
GeomVertexWriter_C_add_data2d_v_pp(GeomVertexWriter *param0, LVecBase2d const *param1) {
    (*param0).add_data2d(*param1);
}


void
GeomVertexWriter_C_add_data2d_v_pdd(GeomVertexWriter *param0, double param1, double param2) {
    (*param0).add_data2d(param1, param2);
}


void
GeomVertexWriter_C_add_data3d_v_pp(GeomVertexWriter *param0, LVecBase3d const *param1) {
    (*param0).add_data3d(*param1);
}


void
GeomVertexWriter_C_add_data3d_v_pddd(GeomVertexWriter *param0, double param1, double param2, double param3) {
    (*param0).add_data3d(param1, param2, param3);
}


void
GeomVertexWriter_C_add_data4d_v_pp(GeomVertexWriter *param0, LVecBase4d const *param1) {
    (*param0).add_data4d(*param1);
}


void
GeomVertexWriter_C_add_data4d_v_pdddd(GeomVertexWriter *param0, double param1, double param2, double param3, double param4) {
    (*param0).add_data4d(param1, param2, param3, param4);
}


void
GeomVertexWriter_C_add_matrix3d_v_pp(GeomVertexWriter *param0, LMatrix3d const *param1) {
    (*param0).add_matrix3d(*param1);
}


void
GeomVertexWriter_C_add_matrix4d_v_pp(GeomVertexWriter *param0, LMatrix4d const *param1) {
    (*param0).add_matrix4d(*param1);
}


void
GeomVertexWriter_C_add_data1_v_pf(GeomVertexWriter *param0, PN_stdfloat param1) {
    (*param0).add_data1(param1);
}


void
GeomVertexWriter_C_add_data2_v_pp(GeomVertexWriter *param0, LVecBase2 const *param1) {
    (*param0).add_data2(*param1);
}


void
GeomVertexWriter_C_add_data2_v_pff(GeomVertexWriter *param0, PN_stdfloat param1, PN_stdfloat param2) {
    (*param0).add_data2(param1, param2);
}


void
GeomVertexWriter_C_add_data3_v_pp(GeomVertexWriter *param0, LVecBase3 const *param1) {
    (*param0).add_data3(*param1);
}


void
GeomVertexWriter_C_add_data3_v_pfff(GeomVertexWriter *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3) {
    (*param0).add_data3(param1, param2, param3);
}


void
GeomVertexWriter_C_add_data4_v_pp(GeomVertexWriter *param0, LVecBase4 const *param1) {
    (*param0).add_data4(*param1);
}


void
GeomVertexWriter_C_add_data4_v_pffff(GeomVertexWriter *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    (*param0).add_data4(param1, param2, param3, param4);
}


void
GeomVertexWriter_C_add_matrix3_v_pp(GeomVertexWriter *param0, LMatrix3 const *param1) {
    (*param0).add_matrix3(*param1);
}


void
GeomVertexWriter_C_add_matrix4_v_pp(GeomVertexWriter *param0, LMatrix4 const *param1) {
    (*param0).add_matrix4(*param1);
}


void
GeomVertexWriter_C_add_data1i_v_pi(GeomVertexWriter *param0, int param1) {
    (*param0).add_data1i(param1);
}


void
GeomVertexWriter_C_add_data2i_v_pp(GeomVertexWriter *param0, LVecBase2i const *param1) {
    (*param0).add_data2i(*param1);
}


void
GeomVertexWriter_C_add_data2i_v_pii(GeomVertexWriter *param0, int param1, int param2) {
    (*param0).add_data2i(param1, param2);
}


void
GeomVertexWriter_C_add_data3i_v_pp(GeomVertexWriter *param0, LVecBase3i const *param1) {
    (*param0).add_data3i(*param1);
}


void
GeomVertexWriter_C_add_data3i_v_piii(GeomVertexWriter *param0, int param1, int param2, int param3) {
    (*param0).add_data3i(param1, param2, param3);
}


void
GeomVertexWriter_C_add_data4i_v_pp(GeomVertexWriter *param0, LVecBase4i const *param1) {
    (*param0).add_data4i(*param1);
}


void
GeomVertexWriter_C_add_data4i_v_piiii(GeomVertexWriter *param0, int param1, int param2, int param3, int param4) {
    (*param0).add_data4i(param1, param2, param3, param4);
}


void
GeomVertexWriter_C_output_v_pp(GeomVertexWriter const *param0, std::ostream *param1) {
    (*param0).output(*param1);
}


// GraphicsOutput


GraphicsOutputBase *
GraphicsOutput_C_upcast_to_GraphicsOutputBase_p_p(GraphicsOutput *param0) {
    return (GraphicsOutputBase *)param0;
}


DrawableRegion *
GraphicsOutput_C_upcast_to_DrawableRegion_p_p(GraphicsOutput *param0) {
    return (DrawableRegion *)param0;
}


GraphicsStateGuardian *
GraphicsOutput_C_get_gsg_p_p(GraphicsOutput const *param0) {
    return (*param0).get_gsg();
}


GraphicsPipe *
GraphicsOutput_C_get_pipe_p_p(GraphicsOutput const *param0) {
    return (*param0).get_pipe();
}


GraphicsEngine *
GraphicsOutput_C_get_engine_p_p(GraphicsOutput const *param0) {
    return (*param0).get_engine();
}


char const *
GraphicsOutput_C_get_name_s_p(GraphicsOutput const *param0) {
    return ((*param0).get_name()).c_str();
}


int
GraphicsOutput_C_count_textures_i_p(GraphicsOutput const *param0) {
    return (*param0).count_textures();
}


bool
GraphicsOutput_C_has_texture_B_p(GraphicsOutput const *param0) {
    return (*param0).has_texture();
}


Texture *
GraphicsOutput_C_get_texture_p_pi(GraphicsOutput const *param0, int param1) {
    return (*param0).get_texture(param1);
}


Texture *
GraphicsOutput_C_get_texture_p_p(GraphicsOutput const *param0) {
    return (*param0).get_texture();
}


DrawableRegion::RenderTexturePlane
GraphicsOutput_C_get_texture_plane_p_pi(GraphicsOutput const *param0, int param1) {
    return (*param0).get_texture_plane(param1);
}


DrawableRegion::RenderTexturePlane
GraphicsOutput_C_get_texture_plane_p_p(GraphicsOutput const *param0) {
    return (*param0).get_texture_plane();
}


GraphicsOutput::RenderTextureMode
GraphicsOutput_C_get_rtm_mode_p_pi(GraphicsOutput const *param0, int param1) {
    return (*param0).get_rtm_mode(param1);
}


GraphicsOutput::RenderTextureMode
GraphicsOutput_C_get_rtm_mode_p_p(GraphicsOutput const *param0) {
    return (*param0).get_rtm_mode();
}


void
GraphicsOutput_C_clear_render_textures_v_p(GraphicsOutput *param0) {
    (*param0).clear_render_textures();
}


void
GraphicsOutput_C_add_render_texture_v_pppp(GraphicsOutput *param0, Texture *param1, GraphicsOutput::RenderTextureMode param2, DrawableRegion::RenderTexturePlane param3) {
    (*param0).add_render_texture(param1, param2, param3);
}


void
GraphicsOutput_C_add_render_texture_v_ppp(GraphicsOutput *param0, Texture *param1, GraphicsOutput::RenderTextureMode param2) {
    (*param0).add_render_texture(param1, param2);
}


void
GraphicsOutput_C_setup_render_texture_v_ppBB(GraphicsOutput *param0, Texture *param1, bool param2, bool param3) {
    (*param0).setup_render_texture(param1, param2, param3);
}


LVecBase2i const *
GraphicsOutput_C_get_size_p_p(GraphicsOutput const *param0) {
    return &((*param0).get_size());
}


int
GraphicsOutput_C_get_x_size_i_p(GraphicsOutput const *param0) {
    return (*param0).get_x_size();
}


int
GraphicsOutput_C_get_y_size_i_p(GraphicsOutput const *param0) {
    return (*param0).get_y_size();
}


LVecBase2i *
GraphicsOutput_C_get_fb_size_p_p(GraphicsOutput const *param0) {
    return new LVecBase2i((*param0).get_fb_size());
}


int
GraphicsOutput_C_get_fb_x_size_i_p(GraphicsOutput const *param0) {
    return (*param0).get_fb_x_size();
}


int
GraphicsOutput_C_get_fb_y_size_i_p(GraphicsOutput const *param0) {
    return (*param0).get_fb_y_size();
}


LVecBase2i *
GraphicsOutput_C_get_sbs_left_size_p_p(GraphicsOutput const *param0) {
    return new LVecBase2i((*param0).get_sbs_left_size());
}


int
GraphicsOutput_C_get_sbs_left_x_size_i_p(GraphicsOutput const *param0) {
    return (*param0).get_sbs_left_x_size();
}


int
GraphicsOutput_C_get_sbs_left_y_size_i_p(GraphicsOutput const *param0) {
    return (*param0).get_sbs_left_y_size();
}


LVecBase2i *
GraphicsOutput_C_get_sbs_right_size_p_p(GraphicsOutput const *param0) {
    return new LVecBase2i((*param0).get_sbs_right_size());
}


int
GraphicsOutput_C_get_sbs_right_x_size_i_p(GraphicsOutput const *param0) {
    return (*param0).get_sbs_right_x_size();
}


int
GraphicsOutput_C_get_sbs_right_y_size_i_p(GraphicsOutput const *param0) {
    return (*param0).get_sbs_right_y_size();
}


bool
GraphicsOutput_C_has_size_B_p(GraphicsOutput const *param0) {
    return (*param0).has_size();
}


bool
GraphicsOutput_C_is_valid_B_p(GraphicsOutput const *param0) {
    return (*param0).is_valid();
}


bool
GraphicsOutput_C_is_nonzero_size_B_p(GraphicsOutput const *param0) {
    return (*param0).is_nonzero_size();
}


void
GraphicsOutput_C_set_active_v_pB(GraphicsOutput *param0, bool param1) {
    (*param0).set_active(param1);
}


bool
GraphicsOutput_C_is_active_B_p(GraphicsOutput const *param0) {
    return (*param0).is_active();
}


void
GraphicsOutput_C_set_one_shot_v_pB(GraphicsOutput *param0, bool param1) {
    (*param0).set_one_shot(param1);
}


bool
GraphicsOutput_C_get_one_shot_B_p(GraphicsOutput const *param0) {
    return (*param0).get_one_shot();
}


void
GraphicsOutput_C_set_inverted_v_pB(GraphicsOutput *param0, bool param1) {
    (*param0).set_inverted(param1);
}


bool
GraphicsOutput_C_get_inverted_B_p(GraphicsOutput const *param0) {
    return (*param0).get_inverted();
}


void
GraphicsOutput_C_set_swap_eyes_v_pB(GraphicsOutput *param0, bool param1) {
    (*param0).set_swap_eyes(param1);
}


bool
GraphicsOutput_C_get_swap_eyes_B_p(GraphicsOutput const *param0) {
    return (*param0).get_swap_eyes();
}


void
GraphicsOutput_C_set_red_blue_stereo_v_pBII(GraphicsOutput *param0, bool param1, unsigned int param2, unsigned int param3) {
    (*param0).set_red_blue_stereo(param1, param2, param3);
}


bool
GraphicsOutput_C_get_red_blue_stereo_B_p(GraphicsOutput const *param0) {
    return (*param0).get_red_blue_stereo();
}


unsigned int
GraphicsOutput_C_get_left_eye_color_mask_I_p(GraphicsOutput const *param0) {
    return (*param0).get_left_eye_color_mask();
}


unsigned int
GraphicsOutput_C_get_right_eye_color_mask_I_p(GraphicsOutput const *param0) {
    return (*param0).get_right_eye_color_mask();
}


void
GraphicsOutput_C_set_side_by_side_stereo_v_pB(GraphicsOutput *param0, bool param1) {
    (*param0).set_side_by_side_stereo(param1);
}


void
GraphicsOutput_C_set_side_by_side_stereo_v_pBpp(GraphicsOutput *param0, bool param1, LVecBase4 const *param2, LVecBase4 const *param3) {
    (*param0).set_side_by_side_stereo(param1, *param2, *param3);
}


bool
GraphicsOutput_C_get_side_by_side_stereo_B_p(GraphicsOutput const *param0) {
    return (*param0).get_side_by_side_stereo();
}


LVecBase4 const *
GraphicsOutput_C_get_sbs_left_dimensions_p_p(GraphicsOutput const *param0) {
    return &((*param0).get_sbs_left_dimensions());
}


LVecBase4 const *
GraphicsOutput_C_get_sbs_right_dimensions_p_p(GraphicsOutput const *param0) {
    return &((*param0).get_sbs_right_dimensions());
}


FrameBufferProperties const *
GraphicsOutput_C_get_fb_properties_p_p(GraphicsOutput const *param0) {
    return &((*param0).get_fb_properties());
}


bool
GraphicsOutput_C_is_stereo_B_p(GraphicsOutput const *param0) {
    return (*param0).is_stereo();
}


void
GraphicsOutput_C_clear_delete_flag_v_p(GraphicsOutput *param0) {
    (*param0).clear_delete_flag();
}


bool
GraphicsOutput_C_get_delete_flag_B_p(GraphicsOutput const *param0) {
    return (*param0).get_delete_flag();
}


void
GraphicsOutput_C_set_sort_v_pi(GraphicsOutput *param0, int param1) {
    (*param0).set_sort(param1);
}


int
GraphicsOutput_C_get_sort_i_p(GraphicsOutput const *param0) {
    return (*param0).get_sort();
}


void
GraphicsOutput_C_set_child_sort_v_pi(GraphicsOutput *param0, int param1) {
    (*param0).set_child_sort(param1);
}


void
GraphicsOutput_C_clear_child_sort_v_p(GraphicsOutput *param0) {
    (*param0).clear_child_sort();
}


int
GraphicsOutput_C_get_child_sort_i_p(GraphicsOutput const *param0) {
    return (*param0).get_child_sort();
}


AsyncFuture *
GraphicsOutput_C_trigger_copy_p_p(GraphicsOutput *param0) {
    return (*param0).trigger_copy();
}


DisplayRegion *
GraphicsOutput_C_make_display_region_p_p(GraphicsOutput *param0) {
    return (*param0).make_display_region();
}


DisplayRegion *
GraphicsOutput_C_make_display_region_p_pp(GraphicsOutput *param0, LVecBase4 const *param1) {
    return (*param0).make_display_region(*param1);
}


DisplayRegion *
GraphicsOutput_C_make_display_region_p_pffff(GraphicsOutput *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    return (*param0).make_display_region(param1, param2, param3, param4);
}


DisplayRegion *
GraphicsOutput_C_make_mono_display_region_p_p(GraphicsOutput *param0) {
    return (*param0).make_mono_display_region();
}


DisplayRegion *
GraphicsOutput_C_make_mono_display_region_p_pp(GraphicsOutput *param0, LVecBase4 const *param1) {
    return (*param0).make_mono_display_region(*param1);
}


DisplayRegion *
GraphicsOutput_C_make_mono_display_region_p_pffff(GraphicsOutput *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    return (*param0).make_mono_display_region(param1, param2, param3, param4);
}


StereoDisplayRegion *
GraphicsOutput_C_make_stereo_display_region_p_p(GraphicsOutput *param0) {
    return (*param0).make_stereo_display_region();
}


StereoDisplayRegion *
GraphicsOutput_C_make_stereo_display_region_p_pp(GraphicsOutput *param0, LVecBase4 const *param1) {
    return (*param0).make_stereo_display_region(*param1);
}


StereoDisplayRegion *
GraphicsOutput_C_make_stereo_display_region_p_pffff(GraphicsOutput *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    return (*param0).make_stereo_display_region(param1, param2, param3, param4);
}


bool
GraphicsOutput_C_remove_display_region_B_pp(GraphicsOutput *param0, DisplayRegion *param1) {
    return (*param0).remove_display_region(param1);
}


void
GraphicsOutput_C_remove_all_display_regions_v_p(GraphicsOutput *param0) {
    (*param0).remove_all_display_regions();
}


DisplayRegion *
GraphicsOutput_C_get_overlay_display_region_p_p(GraphicsOutput const *param0) {
    return (*param0).get_overlay_display_region();
}


void
GraphicsOutput_C_set_overlay_display_region_v_pp(GraphicsOutput *param0, DisplayRegion *param1) {
    (*param0).set_overlay_display_region(param1);
}


int
GraphicsOutput_C_get_num_display_regions_i_p(GraphicsOutput const *param0) {
    return (*param0).get_num_display_regions();
}


PointerTo< DisplayRegion > *
GraphicsOutput_C_get_display_region_p_pi(GraphicsOutput const *param0, int param1) {
    return new PointerTo< DisplayRegion >((*param0).get_display_region(param1));
}


int
GraphicsOutput_C_get_num_active_display_regions_i_p(GraphicsOutput const *param0) {
    return (*param0).get_num_active_display_regions();
}


PointerTo< DisplayRegion > *
GraphicsOutput_C_get_active_display_region_p_pi(GraphicsOutput const *param0, int param1) {
    return new PointerTo< DisplayRegion >((*param0).get_active_display_region(param1));
}


GraphicsOutput *
GraphicsOutput_C_make_texture_buffer_p_psiipBp(GraphicsOutput *param0, char const *param1, int param2, int param3, Texture *param4, bool param5, FrameBufferProperties *param6) {
    return (*param0).make_texture_buffer(std::string(param1), param2, param3, param4, param5, param6);
}


GraphicsOutput *
GraphicsOutput_C_make_texture_buffer_p_psiipB(GraphicsOutput *param0, char const *param1, int param2, int param3, Texture *param4, bool param5) {
    return (*param0).make_texture_buffer(std::string(param1), param2, param3, param4, param5);
}


GraphicsOutput *
GraphicsOutput_C_make_texture_buffer_p_psiip(GraphicsOutput *param0, char const *param1, int param2, int param3, Texture *param4) {
    return (*param0).make_texture_buffer(std::string(param1), param2, param3, param4);
}


GraphicsOutput *
GraphicsOutput_C_make_texture_buffer_p_psii(GraphicsOutput *param0, char const *param1, int param2, int param3) {
    return (*param0).make_texture_buffer(std::string(param1), param2, param3);
}


GraphicsOutput *
GraphicsOutput_C_make_cube_map_p_psippBp(GraphicsOutput *param0, char const *param1, int param2, NodePath *param3, DrawMask *param4, bool param5, FrameBufferProperties *param6) {
    return (*param0).make_cube_map(std::string(param1), param2, *param3, *param4, param5, param6);
}


GraphicsOutput *
GraphicsOutput_C_make_cube_map_p_psippB(GraphicsOutput *param0, char const *param1, int param2, NodePath *param3, DrawMask *param4, bool param5) {
    return (*param0).make_cube_map(std::string(param1), param2, *param3, *param4, param5);
}


GraphicsOutput *
GraphicsOutput_C_make_cube_map_p_psipp(GraphicsOutput *param0, char const *param1, int param2, NodePath *param3, DrawMask *param4) {
    return (*param0).make_cube_map(std::string(param1), param2, *param3, *param4);
}


GraphicsOutput *
GraphicsOutput_C_make_cube_map_p_psip(GraphicsOutput *param0, char const *param1, int param2, NodePath *param3) {
    return (*param0).make_cube_map(std::string(param1), param2, *param3);
}


Filename *
GraphicsOutput_C_make_screenshot_filename_p_s(char const *param0) {
    return new Filename(GraphicsOutput::make_screenshot_filename(std::string(param0)));
}


Filename *
GraphicsOutput_C_make_screenshot_filename_p_v() {
    return new Filename(GraphicsOutput::make_screenshot_filename());
}


Filename *
GraphicsOutput_C_save_screenshot_default_p_ps(GraphicsOutput *param0, char const *param1) {
    return new Filename((*param0).save_screenshot_default(std::string(param1)));
}


Filename *
GraphicsOutput_C_save_screenshot_default_p_p(GraphicsOutput *param0) {
    return new Filename((*param0).save_screenshot_default());
}


bool
GraphicsOutput_C_save_screenshot_B_pps(GraphicsOutput *param0, Filename const *param1, char const *param2) {
    return (*param0).save_screenshot(*param1, std::string(param2));
}


bool
GraphicsOutput_C_save_screenshot_B_pp(GraphicsOutput *param0, Filename const *param1) {
    return (*param0).save_screenshot(*param1);
}


PointerTo< Texture > *
GraphicsOutput_C_get_screenshot_p_p(GraphicsOutput *param0) {
    return new PointerTo< Texture >((*param0).get_screenshot());
}


bool
GraphicsOutput_C_get_screenshot_B_pp(GraphicsOutput *param0, PNMImage *param1) {
    return (*param0).get_screenshot(*param1);
}


NodePath *
GraphicsOutput_C_get_texture_card_p_p(GraphicsOutput *param0) {
    return new NodePath((*param0).get_texture_card());
}


bool
GraphicsOutput_C_share_depth_buffer_B_pp(GraphicsOutput *param0, GraphicsOutput *param1) {
    return (*param0).share_depth_buffer(param1);
}


void
GraphicsOutput_C_unshare_depth_buffer_v_p(GraphicsOutput *param0) {
    (*param0).unshare_depth_buffer();
}


bool
GraphicsOutput_C_get_supports_render_texture_B_p(GraphicsOutput const *param0) {
    return (*param0).get_supports_render_texture();
}


bool
GraphicsOutput_C_flip_ready_B_p(GraphicsOutput const *param0) {
    return (*param0).flip_ready();
}


GraphicsOutput *
GraphicsOutput_C_get_host_p_p(GraphicsOutput *param0) {
    return (*param0).get_host();
}


void
GraphicsOutput_C_request_open_v_p(GraphicsOutput *param0) {
    (*param0).request_open();
}


void
GraphicsOutput_C_request_close_v_p(GraphicsOutput *param0) {
    (*param0).request_close();
}


void
GraphicsOutput_C_set_close_now_v_p(GraphicsOutput *param0) {
    (*param0).set_close_now();
}


void
GraphicsOutput_C_reset_window_v_pB(GraphicsOutput *param0, bool param1) {
    (*param0).reset_window(param1);
}


void
GraphicsOutput_C_clear_pipe_v_p(GraphicsOutput *param0) {
    (*param0).clear_pipe();
}


void
GraphicsOutput_C_set_size_and_recalc_v_pii(GraphicsOutput *param0, int param1, int param2) {
    (*param0).set_size_and_recalc(param1, param2);
}


void
GraphicsOutput_C_clear_v_pp(GraphicsOutput *param0, Thread *param1) {
    (*param0).clear(param1);
}


bool
GraphicsOutput_C_begin_frame_B_ppp(GraphicsOutput *param0, GraphicsOutput::FrameMode param1, Thread *param2) {
    return (*param0).begin_frame(param1, param2);
}


void
GraphicsOutput_C_end_frame_v_ppp(GraphicsOutput *param0, GraphicsOutput::FrameMode param1, Thread *param2) {
    (*param0).end_frame(param1, param2);
}


void
GraphicsOutput_C_change_scenes_v_pp(GraphicsOutput *param0, DisplayRegionPipelineReader *param1) {
    (*param0).change_scenes(param1);
}


void
GraphicsOutput_C_select_target_tex_page_v_pi(GraphicsOutput *param0, int param1) {
    (*param0).select_target_tex_page(param1);
}


void
GraphicsOutput_C_begin_flip_v_p(GraphicsOutput *param0) {
    (*param0).begin_flip();
}


void
GraphicsOutput_C_ready_flip_v_p(GraphicsOutput *param0) {
    (*param0).ready_flip();
}


void
GraphicsOutput_C_end_flip_v_p(GraphicsOutput *param0) {
    (*param0).end_flip();
}


void
GraphicsOutput_C_process_events_v_p(GraphicsOutput *param0) {
    (*param0).process_events();
}


PStatCollector *
GraphicsOutput_C_get_cull_window_pcollector_p_p(GraphicsOutput *param0) {
    return &((*param0).get_cull_window_pcollector());
}


PStatCollector *
GraphicsOutput_C_get_draw_window_pcollector_p_p(GraphicsOutput *param0) {
    return &((*param0).get_draw_window_pcollector());
}


PStatCollector *
GraphicsOutput_C_get_clear_window_pcollector_p_p(GraphicsOutput *param0) {
    return &((*param0).get_clear_window_pcollector());
}


int
GraphicsOutput_C_get_class_type_i_v() {
    return (GraphicsOutput::get_class_type()).get_index();
}


void
GraphicsOutput_C_init_type_v_v() {
    GraphicsOutput::init_type();
}


int
GraphicsOutput_C_get_type_i_p(GraphicsOutput const *param0) {
    return ((*param0).get_type()).get_index();
}


int
GraphicsOutput_C_force_init_type_i_p(GraphicsOutput *param0) {
    return ((*param0).force_init_type()).get_index();
}


// GraphicsOutputBase


GraphicsOutput *
GraphicsOutputBase_C_downcast_to_GraphicsOutput_p_p(GraphicsOutputBase *param0) {
    return (GraphicsOutput *)param0;
}


// GraphicsWindow


WindowProperties const *
GraphicsWindow_C_get_properties_p_p(GraphicsWindow const *param0) {
    return new WindowProperties const((*param0).get_properties());
}


WindowProperties const *
GraphicsWindow_C_get_requested_properties_p_p(GraphicsWindow const *param0) {
    return new WindowProperties const((*param0).get_requested_properties());
}


void
GraphicsWindow_C_clear_rejected_properties_v_p(GraphicsWindow *param0) {
    (*param0).clear_rejected_properties();
}


WindowProperties *
GraphicsWindow_C_get_rejected_properties_p_p(GraphicsWindow const *param0) {
    return new WindowProperties((*param0).get_rejected_properties());
}


void
GraphicsWindow_C_request_properties_v_pp(GraphicsWindow *param0, WindowProperties const *param1) {
    (*param0).request_properties(*param1);
}


bool
GraphicsWindow_C_is_closed_B_p(GraphicsWindow const *param0) {
    return (*param0).is_closed();
}


bool
GraphicsWindow_C_is_fullscreen_B_p(GraphicsWindow const *param0) {
    return (*param0).is_fullscreen();
}


void
GraphicsWindow_C_set_window_event_v_ps(GraphicsWindow *param0, char const *param1) {
    (*param0).set_window_event(std::string(param1));
}


char const *
GraphicsWindow_C_get_window_event_s_p(GraphicsWindow const *param0) {
    static std::string string_holder = (*param0).get_window_event();
    return string_holder.c_str();
}


void
GraphicsWindow_C_set_close_request_event_v_ps(GraphicsWindow *param0, char const *param1) {
    (*param0).set_close_request_event(std::string(param1));
}


char const *
GraphicsWindow_C_get_close_request_event_s_p(GraphicsWindow const *param0) {
    static std::string string_holder = (*param0).get_close_request_event();
    return string_holder.c_str();
}


void
GraphicsWindow_C_set_unexposed_draw_v_pB(GraphicsWindow *param0, bool param1) {
    (*param0).set_unexposed_draw(param1);
}


bool
GraphicsWindow_C_get_unexposed_draw_B_p(GraphicsWindow const *param0) {
    return (*param0).get_unexposed_draw();
}


WindowHandle *
GraphicsWindow_C_get_window_handle_p_p(GraphicsWindow const *param0) {
    return (*param0).get_window_handle();
}


int
GraphicsWindow_C_get_num_input_devices_i_p(GraphicsWindow const *param0) {
    return (*param0).get_num_input_devices();
}


InputDevice *
GraphicsWindow_C_get_input_device_p_pi(GraphicsWindow const *param0, int param1) {
    return (*param0).get_input_device(param1);
}


char const *
GraphicsWindow_C_get_input_device_name_s_pi(GraphicsWindow const *param0, int param1) {
    static std::string string_holder = (*param0).get_input_device_name(param1);
    return string_holder.c_str();
}


bool
GraphicsWindow_C_has_pointer_B_pi(GraphicsWindow const *param0, int param1) {
    return (*param0).has_pointer(param1);
}


bool
GraphicsWindow_C_has_keyboard_B_pi(GraphicsWindow const *param0, int param1) {
    return (*param0).has_keyboard(param1);
}


ButtonMap *
GraphicsWindow_C_get_keyboard_map_p_p(GraphicsWindow const *param0) {
    return (*param0).get_keyboard_map();
}


void
GraphicsWindow_C_enable_pointer_events_v_pi(GraphicsWindow *param0, int param1) {
    (*param0).enable_pointer_events(param1);
}


void
GraphicsWindow_C_disable_pointer_events_v_pi(GraphicsWindow *param0, int param1) {
    (*param0).disable_pointer_events(param1);
}


MouseData *
GraphicsWindow_C_get_pointer_p_pi(GraphicsWindow const *param0, int param1) {
    return new MouseData((*param0).get_pointer(param1));
}


bool
GraphicsWindow_C_move_pointer_B_piii(GraphicsWindow *param0, int param1, int param2, int param3) {
    return (*param0).move_pointer(param1, param2, param3);
}


void
GraphicsWindow_C_close_ime_v_p(GraphicsWindow *param0) {
    (*param0).close_ime();
}


void
GraphicsWindow_C_add_window_proc_v_pp(GraphicsWindow *param0, GraphicsWindowProc const *param1) {
    (*param0).add_window_proc(param1);
}


void
GraphicsWindow_C_remove_window_proc_v_pp(GraphicsWindow *param0, GraphicsWindowProc const *param1) {
    (*param0).remove_window_proc(param1);
}


void
GraphicsWindow_C_clear_window_procs_v_p(GraphicsWindow *param0) {
    (*param0).clear_window_procs();
}


bool
GraphicsWindow_C_supports_window_procs_B_p(GraphicsWindow const *param0) {
    return (*param0).supports_window_procs();
}


bool
GraphicsWindow_C_is_touch_event_B_pp(GraphicsWindow *param0, GraphicsWindowProcCallbackData *param1) {
    return (*param0).is_touch_event(param1);
}


int
GraphicsWindow_C_get_num_touches_i_p(GraphicsWindow *param0) {
    return (*param0).get_num_touches();
}


TouchInfo *
GraphicsWindow_C_get_touch_info_p_pi(GraphicsWindow *param0, int param1) {
    return new TouchInfo((*param0).get_touch_info(param1));
}


void
GraphicsWindow_C_request_open_v_p(GraphicsWindow *param0) {
    (*param0).request_open();
}


void
GraphicsWindow_C_request_close_v_p(GraphicsWindow *param0) {
    (*param0).request_close();
}


void
GraphicsWindow_C_set_close_now_v_p(GraphicsWindow *param0) {
    (*param0).set_close_now();
}


void
GraphicsWindow_C_process_events_v_p(GraphicsWindow *param0) {
    (*param0).process_events();
}


void
GraphicsWindow_C_set_properties_now_v_pp(GraphicsWindow *param0, WindowProperties *param1) {
    (*param0).set_properties_now(*param1);
}


int
GraphicsWindow_C_get_class_type_i_v() {
    return (GraphicsWindow::get_class_type()).get_index();
}


void
GraphicsWindow_C_init_type_v_v() {
    GraphicsWindow::init_type();
}


int
GraphicsWindow_C_get_type_i_p(GraphicsWindow const *param0) {
    return ((*param0).get_type()).get_index();
}


int
GraphicsWindow_C_force_init_type_i_p(GraphicsWindow *param0) {
    return ((*param0).force_init_type()).get_index();
}


// InternalName


PointerTo< InternalName > *
InternalName_C_make_p_s(char const *param0) {
    return new PointerTo< InternalName >(InternalName::make(std::string(param0)));
}


PointerTo< InternalName > *
InternalName_C_make_p_si(char const *param0, int param1) {
    return new PointerTo< InternalName >(InternalName::make(std::string(param0), param1));
}


PointerTo< InternalName > *
InternalName_C_append_p_ps(InternalName *param0, char const *param1) {
    return new PointerTo< InternalName >((*param0).append(std::string(param1)));
}


InternalName *
InternalName_C_get_parent_p_p(InternalName const *param0) {
    return (*param0).get_parent();
}


char const *
InternalName_C_get_name_s_p(InternalName const *param0) {
    static std::string string_holder = (*param0).get_name();
    return string_holder.c_str();
}


char const *
InternalName_C_join_s_ss(InternalName const *param0, char const *param1) {
    static std::string string_holder = (*param0).join(std::string(param1));
    return string_holder.c_str();
}


char const *
InternalName_C_get_basename_s_p(InternalName const *param0) {
    return ((*param0).get_basename()).c_str();
}


int
InternalName_C_find_ancestor_i_ss(InternalName const *param0, char const *param1) {
    return (*param0).find_ancestor(std::string(param1));
}


InternalName const *
InternalName_C_get_ancestor_s_si(InternalName const *param0, int param1) {
    return (*param0).get_ancestor(param1);
}


InternalName const *
InternalName_C_get_top_s_p(InternalName const *param0) {
    return (*param0).get_top();
}


char const *
InternalName_C_get_net_basename_s_si(InternalName const *param0, int param1) {
    static std::string string_holder = (*param0).get_net_basename(param1);
    return string_holder.c_str();
}


void
InternalName_C_output_v_sp(InternalName const *param0, std::ostream *param1) {
    (*param0).output(*param1);
}


PointerTo< InternalName > *
InternalName_C_get_root_p_v() {
    return new PointerTo< InternalName >(InternalName::get_root());
}


PointerTo< InternalName > *
InternalName_C_get_error_p_v() {
    return new PointerTo< InternalName >(InternalName::get_error());
}


PointerTo< InternalName > *
InternalName_C_get_vertex_p_v() {
    return new PointerTo< InternalName >(InternalName::get_vertex());
}


PointerTo< InternalName > *
InternalName_C_get_normal_p_v() {
    return new PointerTo< InternalName >(InternalName::get_normal());
}


PointerTo< InternalName > *
InternalName_C_get_tangent_p_v() {
    return new PointerTo< InternalName >(InternalName::get_tangent());
}


PointerTo< InternalName > *
InternalName_C_get_tangent_name_p_s(char const *param0) {
    return new PointerTo< InternalName >(InternalName::get_tangent_name(std::string(param0)));
}


PointerTo< InternalName > *
InternalName_C_get_binormal_p_v() {
    return new PointerTo< InternalName >(InternalName::get_binormal());
}


PointerTo< InternalName > *
InternalName_C_get_binormal_name_p_s(char const *param0) {
    return new PointerTo< InternalName >(InternalName::get_binormal_name(std::string(param0)));
}


PointerTo< InternalName > *
InternalName_C_get_texcoord_p_v() {
    return new PointerTo< InternalName >(InternalName::get_texcoord());
}


PointerTo< InternalName > *
InternalName_C_get_texcoord_name_p_s(char const *param0) {
    return new PointerTo< InternalName >(InternalName::get_texcoord_name(std::string(param0)));
}


PointerTo< InternalName > *
InternalName_C_get_color_p_v() {
    return new PointerTo< InternalName >(InternalName::get_color());
}


PointerTo< InternalName > *
InternalName_C_get_rotate_p_v() {
    return new PointerTo< InternalName >(InternalName::get_rotate());
}


PointerTo< InternalName > *
InternalName_C_get_size_p_v() {
    return new PointerTo< InternalName >(InternalName::get_size());
}


PointerTo< InternalName > *
InternalName_C_get_aspect_ratio_p_v() {
    return new PointerTo< InternalName >(InternalName::get_aspect_ratio());
}


PointerTo< InternalName > *
InternalName_C_get_transform_blend_p_v() {
    return new PointerTo< InternalName >(InternalName::get_transform_blend());
}


PointerTo< InternalName > *
InternalName_C_get_transform_weight_p_v() {
    return new PointerTo< InternalName >(InternalName::get_transform_weight());
}


PointerTo< InternalName > *
InternalName_C_get_transform_index_p_v() {
    return new PointerTo< InternalName >(InternalName::get_transform_index());
}


PointerTo< InternalName > *
InternalName_C_get_morph_p_ps(InternalName *param0, char const *param1) {
    return new PointerTo< InternalName >(InternalName::get_morph(param0, std::string(param1)));
}


PointerTo< InternalName > *
InternalName_C_get_index_p_v() {
    return new PointerTo< InternalName >(InternalName::get_index());
}


PointerTo< InternalName > *
InternalName_C_get_world_p_v() {
    return new PointerTo< InternalName >(InternalName::get_world());
}


PointerTo< InternalName > *
InternalName_C_get_camera_p_v() {
    return new PointerTo< InternalName >(InternalName::get_camera());
}


PointerTo< InternalName > *
InternalName_C_get_model_p_v() {
    return new PointerTo< InternalName >(InternalName::get_model());
}


PointerTo< InternalName > *
InternalName_C_get_view_p_v() {
    return new PointerTo< InternalName >(InternalName::get_view());
}


void
InternalName_C_register_with_read_factory_v_v() {
    InternalName::register_with_read_factory();
}


void
InternalName_C_write_datagram_v_ppp(InternalName *param0, BamWriter *param1, Datagram *param2) {
    (*param0).write_datagram(param1, *param2);
}


void
InternalName_C_finalize_v_pp(InternalName *param0, BamReader *param1) {
    (*param0).finalize(param1);
}


int
InternalName_C_get_class_type_i_v() {
    return (InternalName::get_class_type()).get_index();
}


void
InternalName_C_init_type_v_v() {
    InternalName::init_type();
}


int
InternalName_C_get_type_i_p(InternalName const *param0) {
    return ((*param0).get_type()).get_index();
}


int
InternalName_C_force_init_type_i_p(InternalName *param0) {
    return ((*param0).force_init_type()).get_index();
}


// LVecBase3f


LVecBase3f *
LVecBase3f_C_ctor_p_v() {
    return new LVecBase3f();
}


LVecBase3f *
LVecBase3f_C_ctor_p_pf(LVecBase2f const *param0, float param1) {
    return new LVecBase3f(*param0, param1);
}


LVecBase3f *
LVecBase3f_C_ctor_p_p(LVecBase3f const *param0) {
    return new LVecBase3f(*param0);
}


LVecBase3f *
LVecBase3f_C_ctor_p_p_1_p_p(LVecBase3f::EVector3 const *param0) {
    return new LVecBase3f(*param0);
}


LVecBase3f *
LVecBase3f_C_ctor_p_f(float param0) {
    return new LVecBase3f(param0);
}


LVecBase3f *
LVecBase3f_C_ctor_p_fff(float param0, float param1, float param2) {
    return new LVecBase3f(param0, param1, param2);
}


LVecBase3f const *
LVecBase3f_C_zero_p_v() {
    return &(LVecBase3f::zero());
}


LVecBase3f const *
LVecBase3f_C_unit_x_p_v() {
    return &(LVecBase3f::unit_x());
}


LVecBase3f const *
LVecBase3f_C_unit_y_p_v() {
    return &(LVecBase3f::unit_y());
}


LVecBase3f const *
LVecBase3f_C_unit_z_p_v() {
    return &(LVecBase3f::unit_z());
}


int
LVecBase3f_C_size_i_v() {
    return LVecBase3f::size();
}


bool
LVecBase3f_C_is_nan_B_p(LVecBase3f const *param0) {
    return (*param0).is_nan();
}


float
LVecBase3f_C_get_cell_f_pi(LVecBase3f const *param0, int param1) {
    return (*param0).get_cell(param1);
}


float
LVecBase3f_C_get_x_f_p(LVecBase3f const *param0) {
    return (*param0).get_x();
}


float
LVecBase3f_C_get_y_f_p(LVecBase3f const *param0) {
    return (*param0).get_y();
}


float
LVecBase3f_C_get_z_f_p(LVecBase3f const *param0) {
    return (*param0).get_z();
}


void
LVecBase3f_C_set_cell_v_pif(LVecBase3f *param0, int param1, float param2) {
    (*param0).set_cell(param1, param2);
}


void
LVecBase3f_C_set_x_v_pf(LVecBase3f *param0, float param1) {
    (*param0).set_x(param1);
}


void
LVecBase3f_C_set_y_v_pf(LVecBase3f *param0, float param1) {
    (*param0).set_y(param1);
}


void
LVecBase3f_C_set_z_v_pf(LVecBase3f *param0, float param1) {
    (*param0).set_z(param1);
}


LVecBase2f *
LVecBase3f_C_get_xy_p_p(LVecBase3f const *param0) {
    return new LVecBase2f((*param0).get_xy());
}


LVecBase2f *
LVecBase3f_C_get_xz_p_p(LVecBase3f const *param0) {
    return new LVecBase2f((*param0).get_xz());
}


LVecBase2f *
LVecBase3f_C_get_yz_p_p(LVecBase3f const *param0) {
    return new LVecBase2f((*param0).get_yz());
}


void
LVecBase3f_C_add_to_cell_v_pif(LVecBase3f *param0, int param1, float param2) {
    (*param0).add_to_cell(param1, param2);
}


void
LVecBase3f_C_add_x_v_pf(LVecBase3f *param0, float param1) {
    (*param0).add_x(param1);
}


void
LVecBase3f_C_add_y_v_pf(LVecBase3f *param0, float param1) {
    (*param0).add_y(param1);
}


void
LVecBase3f_C_add_z_v_pf(LVecBase3f *param0, float param1) {
    (*param0).add_z(param1);
}


void
LVecBase3f_C_get_data_v_p(LVecBase3f const *param0) {
    (*param0).get_data();
}


int
LVecBase3f_C_get_num_components_i_v() {
    return LVecBase3f::get_num_components();
}


void
LVecBase3f_C_begin_v_p(LVecBase3f *param0) {
    (*param0).begin();
}


void
LVecBase3f_C_begin_v_p_1_v_p(LVecBase3f const *param0) {
    (*param0).begin();
}


void
LVecBase3f_C_end_v_p(LVecBase3f *param0) {
    (*param0).end();
}


void
LVecBase3f_C_end_v_p_1_v_p(LVecBase3f const *param0) {
    (*param0).end();
}


void
LVecBase3f_C_fill_v_pf(LVecBase3f *param0, float param1) {
    (*param0).fill(param1);
}


void
LVecBase3f_C_set_v_pfff(LVecBase3f *param0, float param1, float param2, float param3) {
    (*param0).set(param1, param2, param3);
}


float
LVecBase3f_C_dot_f_pp(LVecBase3f const *param0, LVecBase3f const *param1) {
    return (*param0).dot(*param1);
}


float
LVecBase3f_C_length_squared_f_p(LVecBase3f const *param0) {
    return (*param0).length_squared();
}


float
LVecBase3f_C_length_f_p(LVecBase3f const *param0) {
    return (*param0).length();
}


bool
LVecBase3f_C_normalize_B_p(LVecBase3f *param0) {
    return (*param0).normalize();
}


LVecBase3f *
LVecBase3f_C_normalized_p_p(LVecBase3f const *param0) {
    return new LVecBase3f((*param0).normalized());
}


LVecBase3f *
LVecBase3f_C_project_p_pp(LVecBase3f const *param0, LVecBase3f const *param1) {
    return new LVecBase3f((*param0).project(*param1));
}


LVecBase3f *
LVecBase3f_C_cross_p_pp(LVecBase3f const *param0, LVecBase3f const *param1) {
    return new LVecBase3f((*param0).cross(*param1));
}


LVecBase3f *
LVecBase3f_C_get_standardized_hpr_p_p(LVecBase3f const *param0) {
    return new LVecBase3f((*param0).get_standardized_hpr());
}


int
LVecBase3f_C_compare_to_i_pp(LVecBase3f const *param0, LVecBase3f const *param1) {
    return (*param0).compare_to(*param1);
}


int
LVecBase3f_C_compare_to_i_ppf(LVecBase3f const *param0, LVecBase3f const *param1, float param2) {
    return (*param0).compare_to(*param1, param2);
}


std::size_t
LVecBase3f_C_get_hash_p_p(LVecBase3f const *param0) {
    return (*param0).get_hash();
}


std::size_t
LVecBase3f_C_get_hash_p_pf(LVecBase3f const *param0, float param1) {
    return (*param0).get_hash(param1);
}


std::size_t
LVecBase3f_C_add_hash_p_pp(LVecBase3f const *param0, std::size_t param1) {
    return (*param0).add_hash(param1);
}


std::size_t
LVecBase3f_C_add_hash_p_ppf(LVecBase3f const *param0, std::size_t param1, float param2) {
    return (*param0).add_hash(param1, param2);
}


void
LVecBase3f_C_generate_hash_v_pp(LVecBase3f const *param0, ChecksumHashGenerator *param1) {
    (*param0).generate_hash(*param1);
}


void
LVecBase3f_C_generate_hash_v_ppf(LVecBase3f const *param0, ChecksumHashGenerator *param1, float param2) {
    (*param0).generate_hash(*param1, param2);
}


void
LVecBase3f_C_componentwise_mult_v_pp(LVecBase3f *param0, LVecBase3f const *param1) {
    (*param0).componentwise_mult(*param1);
}


LVecBase3f *
LVecBase3f_C_fmax_p_pp(LVecBase3f const *param0, LVecBase3f const *param1) {
    return new LVecBase3f((*param0).fmax(*param1));
}


LVecBase3f *
LVecBase3f_C_fmin_p_pp(LVecBase3f const *param0, LVecBase3f const *param1) {
    return new LVecBase3f((*param0).fmin(*param1));
}


void
LVecBase3f_C_cross_into_v_pp(LVecBase3f *param0, LVecBase3f const *param1) {
    (*param0).cross_into(*param1);
}


bool
LVecBase3f_C_almost_equal_B_pp(LVecBase3f const *param0, LVecBase3f const *param1) {
    return (*param0).almost_equal(*param1);
}


bool
LVecBase3f_C_almost_equal_B_ppf(LVecBase3f const *param0, LVecBase3f const *param1, float param2) {
    return (*param0).almost_equal(*param1, param2);
}


void
LVecBase3f_C_output_v_pp(LVecBase3f const *param0, std::ostream *param1) {
    (*param0).output(*param1);
}


void
LVecBase3f_C_write_datagram_fixed_v_pp(LVecBase3f const *param0, Datagram *param1) {
    (*param0).write_datagram_fixed(*param1);
}


void
LVecBase3f_C_read_datagram_fixed_v_pp(LVecBase3f *param0, DatagramIterator *param1) {
    (*param0).read_datagram_fixed(*param1);
}


void
LVecBase3f_C_write_datagram_v_pp(LVecBase3f const *param0, Datagram *param1) {
    (*param0).write_datagram(*param1);
}


void
LVecBase3f_C_read_datagram_v_pp(LVecBase3f *param0, DatagramIterator *param1) {
    (*param0).read_datagram(*param1);
}


LVecBase3f::EVector3 *
LVecBase3f_C_get_v_p_p(LVecBase3f const *param0) {
    return new LVecBase3f::EVector3((param0)->_v);
}


int
LVecBase3f_C_get_class_type_i_v() {
    return (LVecBase3f::get_class_type()).get_index();
}


void
LVecBase3f_C_init_type_v_v() {
    LVecBase3f::init_type();
}


// LVecBase3i


LVecBase3i *
LVecBase3i_C_ctor_p_v() {
    return new LVecBase3i();
}


LVecBase3i *
LVecBase3i_C_ctor_p_pi(LVecBase2i const *param0, int param1) {
    return new LVecBase3i(*param0, param1);
}


LVecBase3i *
LVecBase3i_C_ctor_p_p(LVecBase3i const *param0) {
    return new LVecBase3i(*param0);
}


LVecBase3i *
LVecBase3i_C_ctor_p_p_1_p_p(LVecBase3i::EVector3 const *param0) {
    return new LVecBase3i(*param0);
}


LVecBase3i *
LVecBase3i_C_ctor_p_i(int param0) {
    return new LVecBase3i(param0);
}


LVecBase3i *
LVecBase3i_C_ctor_p_iii(int param0, int param1, int param2) {
    return new LVecBase3i(param0, param1, param2);
}


LVecBase3i const *
LVecBase3i_C_zero_p_v() {
    return &(LVecBase3i::zero());
}


LVecBase3i const *
LVecBase3i_C_unit_x_p_v() {
    return &(LVecBase3i::unit_x());
}


LVecBase3i const *
LVecBase3i_C_unit_y_p_v() {
    return &(LVecBase3i::unit_y());
}


LVecBase3i const *
LVecBase3i_C_unit_z_p_v() {
    return &(LVecBase3i::unit_z());
}


int
LVecBase3i_C_size_i_v() {
    return LVecBase3i::size();
}


bool
LVecBase3i_C_is_nan_B_p(LVecBase3i const *param0) {
    return (*param0).is_nan();
}


int
LVecBase3i_C_get_cell_i_pi(LVecBase3i const *param0, int param1) {
    return (*param0).get_cell(param1);
}


int
LVecBase3i_C_get_x_i_p(LVecBase3i const *param0) {
    return (*param0).get_x();
}


int
LVecBase3i_C_get_y_i_p(LVecBase3i const *param0) {
    return (*param0).get_y();
}


int
LVecBase3i_C_get_z_i_p(LVecBase3i const *param0) {
    return (*param0).get_z();
}


void
LVecBase3i_C_set_cell_v_pii(LVecBase3i *param0, int param1, int param2) {
    (*param0).set_cell(param1, param2);
}


void
LVecBase3i_C_set_x_v_pi(LVecBase3i *param0, int param1) {
    (*param0).set_x(param1);
}


void
LVecBase3i_C_set_y_v_pi(LVecBase3i *param0, int param1) {
    (*param0).set_y(param1);
}


void
LVecBase3i_C_set_z_v_pi(LVecBase3i *param0, int param1) {
    (*param0).set_z(param1);
}


LVecBase2i *
LVecBase3i_C_get_xy_p_p(LVecBase3i const *param0) {
    return new LVecBase2i((*param0).get_xy());
}


LVecBase2i *
LVecBase3i_C_get_xz_p_p(LVecBase3i const *param0) {
    return new LVecBase2i((*param0).get_xz());
}


LVecBase2i *
LVecBase3i_C_get_yz_p_p(LVecBase3i const *param0) {
    return new LVecBase2i((*param0).get_yz());
}


void
LVecBase3i_C_add_to_cell_v_pii(LVecBase3i *param0, int param1, int param2) {
    (*param0).add_to_cell(param1, param2);
}


void
LVecBase3i_C_add_x_v_pi(LVecBase3i *param0, int param1) {
    (*param0).add_x(param1);
}


void
LVecBase3i_C_add_y_v_pi(LVecBase3i *param0, int param1) {
    (*param0).add_y(param1);
}


void
LVecBase3i_C_add_z_v_pi(LVecBase3i *param0, int param1) {
    (*param0).add_z(param1);
}


void
LVecBase3i_C_get_data_v_p(LVecBase3i const *param0) {
    (*param0).get_data();
}


int
LVecBase3i_C_get_num_components_i_v() {
    return LVecBase3i::get_num_components();
}


void
LVecBase3i_C_begin_v_p(LVecBase3i *param0) {
    (*param0).begin();
}


void
LVecBase3i_C_begin_v_p_1_v_p(LVecBase3i const *param0) {
    (*param0).begin();
}


void
LVecBase3i_C_end_v_p(LVecBase3i *param0) {
    (*param0).end();
}


void
LVecBase3i_C_end_v_p_1_v_p(LVecBase3i const *param0) {
    (*param0).end();
}


void
LVecBase3i_C_fill_v_pi(LVecBase3i *param0, int param1) {
    (*param0).fill(param1);
}


void
LVecBase3i_C_set_v_piii(LVecBase3i *param0, int param1, int param2, int param3) {
    (*param0).set(param1, param2, param3);
}


int
LVecBase3i_C_dot_i_pp(LVecBase3i const *param0, LVecBase3i const *param1) {
    return (*param0).dot(*param1);
}


int
LVecBase3i_C_length_squared_i_p(LVecBase3i const *param0) {
    return (*param0).length_squared();
}


LVecBase3i *
LVecBase3i_C_cross_p_pp(LVecBase3i const *param0, LVecBase3i const *param1) {
    return new LVecBase3i((*param0).cross(*param1));
}


int
LVecBase3i_C_compare_to_i_pp(LVecBase3i const *param0, LVecBase3i const *param1) {
    return (*param0).compare_to(*param1);
}


std::size_t
LVecBase3i_C_get_hash_p_p(LVecBase3i const *param0) {
    return (*param0).get_hash();
}


std::size_t
LVecBase3i_C_add_hash_p_pp(LVecBase3i const *param0, std::size_t param1) {
    return (*param0).add_hash(param1);
}


void
LVecBase3i_C_generate_hash_v_pp(LVecBase3i const *param0, ChecksumHashGenerator *param1) {
    (*param0).generate_hash(*param1);
}


void
LVecBase3i_C_componentwise_mult_v_pp(LVecBase3i *param0, LVecBase3i const *param1) {
    (*param0).componentwise_mult(*param1);
}


LVecBase3i *
LVecBase3i_C_fmax_p_pp(LVecBase3i const *param0, LVecBase3i const *param1) {
    return new LVecBase3i((*param0).fmax(*param1));
}


LVecBase3i *
LVecBase3i_C_fmin_p_pp(LVecBase3i const *param0, LVecBase3i const *param1) {
    return new LVecBase3i((*param0).fmin(*param1));
}


void
LVecBase3i_C_cross_into_v_pp(LVecBase3i *param0, LVecBase3i const *param1) {
    (*param0).cross_into(*param1);
}


bool
LVecBase3i_C_almost_equal_B_pp(LVecBase3i const *param0, LVecBase3i const *param1) {
    return (*param0).almost_equal(*param1);
}


bool
LVecBase3i_C_almost_equal_B_ppi(LVecBase3i const *param0, LVecBase3i const *param1, int param2) {
    return (*param0).almost_equal(*param1, param2);
}


void
LVecBase3i_C_output_v_pp(LVecBase3i const *param0, std::ostream *param1) {
    (*param0).output(*param1);
}


void
LVecBase3i_C_write_datagram_fixed_v_pp(LVecBase3i const *param0, Datagram *param1) {
    (*param0).write_datagram_fixed(*param1);
}


void
LVecBase3i_C_read_datagram_fixed_v_pp(LVecBase3i *param0, DatagramIterator *param1) {
    (*param0).read_datagram_fixed(*param1);
}


void
LVecBase3i_C_write_datagram_v_pp(LVecBase3i const *param0, Datagram *param1) {
    (*param0).write_datagram(*param1);
}


void
LVecBase3i_C_read_datagram_v_pp(LVecBase3i *param0, DatagramIterator *param1) {
    (*param0).read_datagram(*param1);
}


LVecBase3i::EVector3 *
LVecBase3i_C_get_v_p_p(LVecBase3i const *param0) {
    return new LVecBase3i::EVector3((param0)->_v);
}


int
LVecBase3i_C_get_class_type_i_v() {
    return (LVecBase3i::get_class_type()).get_index();
}


void
LVecBase3i_C_init_type_v_v() {
    LVecBase3i::init_type();
}


// LVecBase4f


LVecBase4f *
LVecBase4f_C_ctor_p_v() {
    return new LVecBase4f();
}


LVecBase4f *
LVecBase4f_C_ctor_p_p(LPoint3f const *param0) {
    return new LVecBase4f(*param0);
}


LVecBase4f *
LVecBase4f_C_ctor_p_pf(LVecBase3f const *param0, float param1) {
    return new LVecBase4f(*param0, param1);
}


LVecBase4f *
LVecBase4f_C_ctor_p_p_1_p_p(LVecBase4f const *param0) {
    return new LVecBase4f(*param0);
}


LVecBase4f *
LVecBase4f_C_ctor_p_p_1_p_p_2_p_p(LVecBase4f::EVector4 const *param0) {
    return new LVecBase4f(*param0);
}


LVecBase4f *
LVecBase4f_C_ctor_p_p_1_p_p_2_p_p_3_p_p(LVector3f const *param0) {
    return new LVecBase4f(*param0);
}


LVecBase4f *
LVecBase4f_C_ctor_p_p_1_p_p_2_p_p_3_p_p_4_p_p(UnalignedLVecBase4f const *param0) {
    return new LVecBase4f(*param0);
}


LVecBase4f *
LVecBase4f_C_ctor_p_f(float param0) {
    return new LVecBase4f(param0);
}


LVecBase4f *
LVecBase4f_C_ctor_p_ffff(float param0, float param1, float param2, float param3) {
    return new LVecBase4f(param0, param1, param2, param3);
}


LVecBase4f const *
LVecBase4f_C_zero_p_v() {
    return &(LVecBase4f::zero());
}


LVecBase4f const *
LVecBase4f_C_unit_x_p_v() {
    return &(LVecBase4f::unit_x());
}


LVecBase4f const *
LVecBase4f_C_unit_y_p_v() {
    return &(LVecBase4f::unit_y());
}


LVecBase4f const *
LVecBase4f_C_unit_z_p_v() {
    return &(LVecBase4f::unit_z());
}


LVecBase4f const *
LVecBase4f_C_unit_w_p_v() {
    return &(LVecBase4f::unit_w());
}


int
LVecBase4f_C_size_i_v() {
    return LVecBase4f::size();
}


bool
LVecBase4f_C_is_nan_B_p(LVecBase4f const *param0) {
    return (*param0).is_nan();
}


float
LVecBase4f_C_get_cell_f_pi(LVecBase4f const *param0, int param1) {
    return (*param0).get_cell(param1);
}


void
LVecBase4f_C_set_cell_v_pif(LVecBase4f *param0, int param1, float param2) {
    (*param0).set_cell(param1, param2);
}


float
LVecBase4f_C_get_x_f_p(LVecBase4f const *param0) {
    return (*param0).get_x();
}


float
LVecBase4f_C_get_y_f_p(LVecBase4f const *param0) {
    return (*param0).get_y();
}


float
LVecBase4f_C_get_z_f_p(LVecBase4f const *param0) {
    return (*param0).get_z();
}


float
LVecBase4f_C_get_w_f_p(LVecBase4f const *param0) {
    return (*param0).get_w();
}


LVecBase3f *
LVecBase4f_C_get_xyz_p_p(LVecBase4f const *param0) {
    return new LVecBase3f((*param0).get_xyz());
}


LVecBase2f *
LVecBase4f_C_get_xy_p_p(LVecBase4f const *param0) {
    return new LVecBase2f((*param0).get_xy());
}


void
LVecBase4f_C_set_x_v_pf(LVecBase4f *param0, float param1) {
    (*param0).set_x(param1);
}


void
LVecBase4f_C_set_y_v_pf(LVecBase4f *param0, float param1) {
    (*param0).set_y(param1);
}


void
LVecBase4f_C_set_z_v_pf(LVecBase4f *param0, float param1) {
    (*param0).set_z(param1);
}


void
LVecBase4f_C_set_w_v_pf(LVecBase4f *param0, float param1) {
    (*param0).set_w(param1);
}


void
LVecBase4f_C_add_to_cell_v_pif(LVecBase4f *param0, int param1, float param2) {
    (*param0).add_to_cell(param1, param2);
}


void
LVecBase4f_C_add_x_v_pf(LVecBase4f *param0, float param1) {
    (*param0).add_x(param1);
}


void
LVecBase4f_C_add_y_v_pf(LVecBase4f *param0, float param1) {
    (*param0).add_y(param1);
}


void
LVecBase4f_C_add_z_v_pf(LVecBase4f *param0, float param1) {
    (*param0).add_z(param1);
}


void
LVecBase4f_C_add_w_v_pf(LVecBase4f *param0, float param1) {
    (*param0).add_w(param1);
}


void
LVecBase4f_C_get_data_v_p(LVecBase4f const *param0) {
    (*param0).get_data();
}


int
LVecBase4f_C_get_num_components_i_v() {
    return LVecBase4f::get_num_components();
}


void
LVecBase4f_C_begin_v_p(LVecBase4f *param0) {
    (*param0).begin();
}


void
LVecBase4f_C_begin_v_p_1_v_p(LVecBase4f const *param0) {
    (*param0).begin();
}


void
LVecBase4f_C_end_v_p(LVecBase4f *param0) {
    (*param0).end();
}


void
LVecBase4f_C_end_v_p_1_v_p(LVecBase4f const *param0) {
    (*param0).end();
}


void
LVecBase4f_C_fill_v_pf(LVecBase4f *param0, float param1) {
    (*param0).fill(param1);
}


void
LVecBase4f_C_set_v_pffff(LVecBase4f *param0, float param1, float param2, float param3, float param4) {
    (*param0).set(param1, param2, param3, param4);
}


float
LVecBase4f_C_dot_f_pp(LVecBase4f const *param0, LVecBase4f const *param1) {
    return (*param0).dot(*param1);
}


float
LVecBase4f_C_length_squared_f_p(LVecBase4f const *param0) {
    return (*param0).length_squared();
}


float
LVecBase4f_C_length_f_p(LVecBase4f const *param0) {
    return (*param0).length();
}


bool
LVecBase4f_C_normalize_B_p(LVecBase4f *param0) {
    return (*param0).normalize();
}


LVecBase4f *
LVecBase4f_C_normalized_p_p(LVecBase4f const *param0) {
    return new LVecBase4f((*param0).normalized());
}


LVecBase4f *
LVecBase4f_C_project_p_pp(LVecBase4f const *param0, LVecBase4f const *param1) {
    return new LVecBase4f((*param0).project(*param1));
}


int
LVecBase4f_C_compare_to_i_pp(LVecBase4f const *param0, LVecBase4f const *param1) {
    return (*param0).compare_to(*param1);
}


int
LVecBase4f_C_compare_to_i_ppf(LVecBase4f const *param0, LVecBase4f const *param1, float param2) {
    return (*param0).compare_to(*param1, param2);
}


std::size_t
LVecBase4f_C_get_hash_p_p(LVecBase4f const *param0) {
    return (*param0).get_hash();
}


std::size_t
LVecBase4f_C_get_hash_p_pf(LVecBase4f const *param0, float param1) {
    return (*param0).get_hash(param1);
}


std::size_t
LVecBase4f_C_add_hash_p_pp(LVecBase4f const *param0, std::size_t param1) {
    return (*param0).add_hash(param1);
}


std::size_t
LVecBase4f_C_add_hash_p_ppf(LVecBase4f const *param0, std::size_t param1, float param2) {
    return (*param0).add_hash(param1, param2);
}


void
LVecBase4f_C_generate_hash_v_pp(LVecBase4f const *param0, ChecksumHashGenerator *param1) {
    (*param0).generate_hash(*param1);
}


void
LVecBase4f_C_generate_hash_v_ppf(LVecBase4f const *param0, ChecksumHashGenerator *param1, float param2) {
    (*param0).generate_hash(*param1, param2);
}


void
LVecBase4f_C_componentwise_mult_v_pp(LVecBase4f *param0, LVecBase4f const *param1) {
    (*param0).componentwise_mult(*param1);
}


LVecBase4f *
LVecBase4f_C_fmax_p_pp(LVecBase4f const *param0, LVecBase4f const *param1) {
    return new LVecBase4f((*param0).fmax(*param1));
}


LVecBase4f *
LVecBase4f_C_fmin_p_pp(LVecBase4f const *param0, LVecBase4f const *param1) {
    return new LVecBase4f((*param0).fmin(*param1));
}


bool
LVecBase4f_C_almost_equal_B_pp(LVecBase4f const *param0, LVecBase4f const *param1) {
    return (*param0).almost_equal(*param1);
}


bool
LVecBase4f_C_almost_equal_B_ppf(LVecBase4f const *param0, LVecBase4f const *param1, float param2) {
    return (*param0).almost_equal(*param1, param2);
}


void
LVecBase4f_C_output_v_pp(LVecBase4f const *param0, std::ostream *param1) {
    (*param0).output(*param1);
}


void
LVecBase4f_C_write_datagram_fixed_v_pp(LVecBase4f const *param0, Datagram *param1) {
    (*param0).write_datagram_fixed(*param1);
}


void
LVecBase4f_C_read_datagram_fixed_v_pp(LVecBase4f *param0, DatagramIterator *param1) {
    (*param0).read_datagram_fixed(*param1);
}


void
LVecBase4f_C_write_datagram_v_pp(LVecBase4f const *param0, Datagram *param1) {
    (*param0).write_datagram(*param1);
}


void
LVecBase4f_C_read_datagram_v_pp(LVecBase4f *param0, DatagramIterator *param1) {
    (*param0).read_datagram(*param1);
}


LVecBase4f::EVector4 *
LVecBase4f_C_get_v_p_p(LVecBase4f const *param0) {
    return new LVecBase4f::EVector4((param0)->_v);
}


int
LVecBase4f_C_get_class_type_i_v() {
    return (LVecBase4f::get_class_type()).get_index();
}


void
LVecBase4f_C_init_type_v_v() {
    LVecBase4f::init_type();
}


// LVecBase4i


LVecBase4i *
LVecBase4i_C_ctor_p_v() {
    return new LVecBase4i();
}


LVecBase4i *
LVecBase4i_C_ctor_p_p(LPoint3i const *param0) {
    return new LVecBase4i(*param0);
}


LVecBase4i *
LVecBase4i_C_ctor_p_pi(LVecBase3i const *param0, int param1) {
    return new LVecBase4i(*param0, param1);
}


LVecBase4i *
LVecBase4i_C_ctor_p_p_1_p_p(LVecBase4i const *param0) {
    return new LVecBase4i(*param0);
}


LVecBase4i *
LVecBase4i_C_ctor_p_p_1_p_p_2_p_p(LVecBase4i::EVector4 const *param0) {
    return new LVecBase4i(*param0);
}


LVecBase4i *
LVecBase4i_C_ctor_p_p_1_p_p_2_p_p_3_p_p(LVector3i const *param0) {
    return new LVecBase4i(*param0);
}


LVecBase4i *
LVecBase4i_C_ctor_p_p_1_p_p_2_p_p_3_p_p_4_p_p(UnalignedLVecBase4i const *param0) {
    return new LVecBase4i(*param0);
}


LVecBase4i *
LVecBase4i_C_ctor_p_i(int param0) {
    return new LVecBase4i(param0);
}


LVecBase4i *
LVecBase4i_C_ctor_p_iiii(int param0, int param1, int param2, int param3) {
    return new LVecBase4i(param0, param1, param2, param3);
}


LVecBase4i const *
LVecBase4i_C_zero_p_v() {
    return &(LVecBase4i::zero());
}


LVecBase4i const *
LVecBase4i_C_unit_x_p_v() {
    return &(LVecBase4i::unit_x());
}


LVecBase4i const *
LVecBase4i_C_unit_y_p_v() {
    return &(LVecBase4i::unit_y());
}


LVecBase4i const *
LVecBase4i_C_unit_z_p_v() {
    return &(LVecBase4i::unit_z());
}


LVecBase4i const *
LVecBase4i_C_unit_w_p_v() {
    return &(LVecBase4i::unit_w());
}


int
LVecBase4i_C_size_i_v() {
    return LVecBase4i::size();
}


bool
LVecBase4i_C_is_nan_B_p(LVecBase4i const *param0) {
    return (*param0).is_nan();
}


int
LVecBase4i_C_get_cell_i_pi(LVecBase4i const *param0, int param1) {
    return (*param0).get_cell(param1);
}


void
LVecBase4i_C_set_cell_v_pii(LVecBase4i *param0, int param1, int param2) {
    (*param0).set_cell(param1, param2);
}


int
LVecBase4i_C_get_x_i_p(LVecBase4i const *param0) {
    return (*param0).get_x();
}


int
LVecBase4i_C_get_y_i_p(LVecBase4i const *param0) {
    return (*param0).get_y();
}


int
LVecBase4i_C_get_z_i_p(LVecBase4i const *param0) {
    return (*param0).get_z();
}


int
LVecBase4i_C_get_w_i_p(LVecBase4i const *param0) {
    return (*param0).get_w();
}


LVecBase3i *
LVecBase4i_C_get_xyz_p_p(LVecBase4i const *param0) {
    return new LVecBase3i((*param0).get_xyz());
}


LVecBase2i *
LVecBase4i_C_get_xy_p_p(LVecBase4i const *param0) {
    return new LVecBase2i((*param0).get_xy());
}


void
LVecBase4i_C_set_x_v_pi(LVecBase4i *param0, int param1) {
    (*param0).set_x(param1);
}


void
LVecBase4i_C_set_y_v_pi(LVecBase4i *param0, int param1) {
    (*param0).set_y(param1);
}


void
LVecBase4i_C_set_z_v_pi(LVecBase4i *param0, int param1) {
    (*param0).set_z(param1);
}


void
LVecBase4i_C_set_w_v_pi(LVecBase4i *param0, int param1) {
    (*param0).set_w(param1);
}


void
LVecBase4i_C_add_to_cell_v_pii(LVecBase4i *param0, int param1, int param2) {
    (*param0).add_to_cell(param1, param2);
}


void
LVecBase4i_C_add_x_v_pi(LVecBase4i *param0, int param1) {
    (*param0).add_x(param1);
}


void
LVecBase4i_C_add_y_v_pi(LVecBase4i *param0, int param1) {
    (*param0).add_y(param1);
}


void
LVecBase4i_C_add_z_v_pi(LVecBase4i *param0, int param1) {
    (*param0).add_z(param1);
}


void
LVecBase4i_C_add_w_v_pi(LVecBase4i *param0, int param1) {
    (*param0).add_w(param1);
}


void
LVecBase4i_C_get_data_v_p(LVecBase4i const *param0) {
    (*param0).get_data();
}


int
LVecBase4i_C_get_num_components_i_v() {
    return LVecBase4i::get_num_components();
}


void
LVecBase4i_C_begin_v_p(LVecBase4i *param0) {
    (*param0).begin();
}


void
LVecBase4i_C_begin_v_p_1_v_p(LVecBase4i const *param0) {
    (*param0).begin();
}


void
LVecBase4i_C_end_v_p(LVecBase4i *param0) {
    (*param0).end();
}


void
LVecBase4i_C_end_v_p_1_v_p(LVecBase4i const *param0) {
    (*param0).end();
}


void
LVecBase4i_C_fill_v_pi(LVecBase4i *param0, int param1) {
    (*param0).fill(param1);
}


void
LVecBase4i_C_set_v_piiii(LVecBase4i *param0, int param1, int param2, int param3, int param4) {
    (*param0).set(param1, param2, param3, param4);
}


int
LVecBase4i_C_dot_i_pp(LVecBase4i const *param0, LVecBase4i const *param1) {
    return (*param0).dot(*param1);
}


int
LVecBase4i_C_length_squared_i_p(LVecBase4i const *param0) {
    return (*param0).length_squared();
}


int
LVecBase4i_C_compare_to_i_pp(LVecBase4i const *param0, LVecBase4i const *param1) {
    return (*param0).compare_to(*param1);
}


std::size_t
LVecBase4i_C_get_hash_p_p(LVecBase4i const *param0) {
    return (*param0).get_hash();
}


std::size_t
LVecBase4i_C_add_hash_p_pp(LVecBase4i const *param0, std::size_t param1) {
    return (*param0).add_hash(param1);
}


void
LVecBase4i_C_generate_hash_v_pp(LVecBase4i const *param0, ChecksumHashGenerator *param1) {
    (*param0).generate_hash(*param1);
}


void
LVecBase4i_C_componentwise_mult_v_pp(LVecBase4i *param0, LVecBase4i const *param1) {
    (*param0).componentwise_mult(*param1);
}


LVecBase4i *
LVecBase4i_C_fmax_p_pp(LVecBase4i const *param0, LVecBase4i const *param1) {
    return new LVecBase4i((*param0).fmax(*param1));
}


LVecBase4i *
LVecBase4i_C_fmin_p_pp(LVecBase4i const *param0, LVecBase4i const *param1) {
    return new LVecBase4i((*param0).fmin(*param1));
}


bool
LVecBase4i_C_almost_equal_B_pp(LVecBase4i const *param0, LVecBase4i const *param1) {
    return (*param0).almost_equal(*param1);
}


bool
LVecBase4i_C_almost_equal_B_ppi(LVecBase4i const *param0, LVecBase4i const *param1, int param2) {
    return (*param0).almost_equal(*param1, param2);
}


void
LVecBase4i_C_output_v_pp(LVecBase4i const *param0, std::ostream *param1) {
    (*param0).output(*param1);
}


void
LVecBase4i_C_write_datagram_fixed_v_pp(LVecBase4i const *param0, Datagram *param1) {
    (*param0).write_datagram_fixed(*param1);
}


void
LVecBase4i_C_read_datagram_fixed_v_pp(LVecBase4i *param0, DatagramIterator *param1) {
    (*param0).read_datagram_fixed(*param1);
}


void
LVecBase4i_C_write_datagram_v_pp(LVecBase4i const *param0, Datagram *param1) {
    (*param0).write_datagram(*param1);
}


void
LVecBase4i_C_read_datagram_v_pp(LVecBase4i *param0, DatagramIterator *param1) {
    (*param0).read_datagram(*param1);
}


LVecBase4i::EVector4 *
LVecBase4i_C_get_v_p_p(LVecBase4i const *param0) {
    return new LVecBase4i::EVector4((param0)->_v);
}


int
LVecBase4i_C_get_class_type_i_v() {
    return (LVecBase4i::get_class_type()).get_index();
}


void
LVecBase4i_C_init_type_v_v() {
    LVecBase4i::init_type();
}


// LensNode


LensNode *
LensNode_C_ctor_p_sp(char const *param0, Lens *param1) {
    return new LensNode(std::string(param0), param1);
}


LensNode *
LensNode_C_ctor_p_s(char const *param0) {
    return new LensNode(std::string(param0));
}


void
LensNode_C_xform_v_pp(LensNode *param0, LMatrix4 const *param1) {
    (*param0).xform(*param1);
}


void
LensNode_C_copy_lens_v_pp(LensNode *param0, Lens const *param1) {
    (*param0).copy_lens(*param1);
}


void
LensNode_C_copy_lens_v_pip(LensNode *param0, int param1, Lens const *param2) {
    (*param0).copy_lens(param1, *param2);
}


void
LensNode_C_set_lens_v_pp(LensNode *param0, Lens *param1) {
    (*param0).set_lens(param1);
}


void
LensNode_C_set_lens_v_pip(LensNode *param0, int param1, Lens *param2) {
    (*param0).set_lens(param1, param2);
}


Lens *
LensNode_C_get_lens_p_pi(LensNode const *param0, int param1) {
    return (*param0).get_lens(param1);
}


Lens *
LensNode_C_get_lens_p_p(LensNode const *param0) {
    return (*param0).get_lens();
}


bool
LensNode_C_set_lens_active_B_piB(LensNode *param0, int param1, bool param2) {
    return (*param0).set_lens_active(param1, param2);
}


bool
LensNode_C_get_lens_active_B_pi(LensNode const *param0, int param1) {
    return (*param0).get_lens_active(param1);
}


bool
LensNode_C_activate_lens_B_pi(LensNode *param0, int param1) {
    return (*param0).activate_lens(param1);
}


bool
LensNode_C_deactivate_lens_B_pi(LensNode *param0, int param1) {
    return (*param0).deactivate_lens(param1);
}


bool
LensNode_C_is_in_view_B_pp(LensNode *param0, LPoint3 const *param1) {
    return (*param0).is_in_view(*param1);
}


bool
LensNode_C_is_in_view_B_pip(LensNode *param0, int param1, LPoint3 const *param2) {
    return (*param0).is_in_view(param1, *param2);
}


void
LensNode_C_show_frustum_v_p(LensNode *param0) {
    (*param0).show_frustum();
}


void
LensNode_C_hide_frustum_v_p(LensNode *param0) {
    (*param0).hide_frustum();
}


void
LensNode_C_register_with_read_factory_v_v() {
    LensNode::register_with_read_factory();
}


void
LensNode_C_write_datagram_v_ppp(LensNode *param0, BamWriter *param1, Datagram *param2) {
    (*param0).write_datagram(param1, *param2);
}


int
LensNode_C_get_class_type_i_v() {
    return (LensNode::get_class_type()).get_index();
}


void
LensNode_C_init_type_v_v() {
    LensNode::init_type();
}


int
LensNode_C_get_type_i_p(LensNode const *param0) {
    return ((*param0).get_type()).get_index();
}


int
LensNode_C_force_init_type_i_p(LensNode *param0) {
    return ((*param0).force_init_type()).get_index();
}


// LinkedListNode


PandaNode *
LinkedListNode_C_downcast_to_PandaNode_p_p(LinkedListNode *param0) {
    return (PandaNode *)param0;
}


// MemoryBase


MemoryBase *
MemoryBase_C_ctor_p_v() {
    return new MemoryBase();
}


MemoryBase *
MemoryBase_C_ctor_p_p(MemoryBase const *param0) {
    return new MemoryBase(*param0);
}


ReferenceCount *
MemoryBase_C_downcast_to_ReferenceCount_p_p(MemoryBase *param0) {
    return (ReferenceCount *)param0;
}


TypedObject *
MemoryBase_C_downcast_to_TypedObject_p_p(MemoryBase *param0) {
    return (TypedObject *)param0;
}


// Namable


PandaNode *
Namable_C_downcast_to_PandaNode_p_p(Namable *param0) {
    return (PandaNode *)param0;
}


Thread *
Namable_C_downcast_to_Thread_p_p(Namable *param0) {
    return (Thread *)param0;
}


// NodePath


NodePath *
NodePath_C_ctor_p_v() {
    return new NodePath();
}


NodePath *
NodePath_C_ctor_p_p(NodePath *param0) {
    return new NodePath(*param0);
}


NodePath *
NodePath_C_ctor_p_p_1_p_p(NodePath const *param0) {
    return new NodePath(*param0);
}


NodePath *
NodePath_C_ctor_p_ppp(NodePath const *param0, PandaNode *param1, Thread *param2) {
    return new NodePath(*param0, param1, param2);
}


NodePath *
NodePath_C_ctor_p_pp(NodePath const *param0, PandaNode *param1) {
    return new NodePath(*param0, param1);
}


NodePath *
NodePath_C_ctor_p_pp_1_p_pp(PandaNode *param0, Thread *param1) {
    return new NodePath(param0, param1);
}


NodePath *
NodePath_C_ctor_p_p_1_p_p_2_p_p(PandaNode *param0) {
    return new NodePath(param0);
}


NodePath *
NodePath_C_ctor_p_sp(char const *param0, Thread *param1) {
    return new NodePath(std::string(param0), param1);
}


NodePath *
NodePath_C_ctor_p_s(char const *param0) {
    return new NodePath(std::string(param0));
}


NodePath *
NodePath_C_any_path_p_pp(PandaNode *param0, Thread *param1) {
    return new NodePath(NodePath::any_path(param0, param1));
}


NodePath *
NodePath_C_any_path_p_p(PandaNode *param0) {
    return new NodePath(NodePath::any_path(param0));
}


void
NodePath_C_clear_v_p(NodePath *param0) {
    (*param0).clear();
}


NodePath *
NodePath_C_not_found_p_v() {
    return new NodePath(NodePath::not_found());
}


NodePath *
NodePath_C_removed_p_v() {
    return new NodePath(NodePath::removed());
}


NodePath *
NodePath_C_fail_p_v() {
    return new NodePath(NodePath::fail());
}


void
NodePath_C_set_max_search_depth_v_i(int param0) {
    NodePath::set_max_search_depth(param0);
}


int
NodePath_C_get_max_search_depth_i_v() {
    return NodePath::get_max_search_depth();
}


bool
NodePath_C_is_empty_B_p(NodePath const *param0) {
    return (*param0).is_empty();
}


bool
NodePath_C_is_singleton_B_pp(NodePath const *param0, Thread *param1) {
    return (*param0).is_singleton(param1);
}


bool
NodePath_C_is_singleton_B_p(NodePath const *param0) {
    return (*param0).is_singleton();
}


int
NodePath_C_get_num_nodes_i_pp(NodePath const *param0, Thread *param1) {
    return (*param0).get_num_nodes(param1);
}


int
NodePath_C_get_num_nodes_i_p(NodePath const *param0) {
    return (*param0).get_num_nodes();
}


PandaNode *
NodePath_C_get_node_p_pip(NodePath const *param0, int param1, Thread *param2) {
    return (*param0).get_node(param1, param2);
}


PandaNode *
NodePath_C_get_node_p_pi(NodePath const *param0, int param1) {
    return (*param0).get_node(param1);
}


NodePath *
NodePath_C_get_ancestor_p_pip(NodePath const *param0, int param1, Thread *param2) {
    return new NodePath((*param0).get_ancestor(param1, param2));
}


NodePath *
NodePath_C_get_ancestor_p_pi(NodePath const *param0, int param1) {
    return new NodePath((*param0).get_ancestor(param1));
}


NodePath::ErrorType
NodePath_C_get_error_type_p_p(NodePath const *param0) {
    return (*param0).get_error_type();
}


PandaNode *
NodePath_C_get_top_node_p_pp(NodePath const *param0, Thread *param1) {
    return (*param0).get_top_node(param1);
}


PandaNode *
NodePath_C_get_top_node_p_p(NodePath const *param0) {
    return (*param0).get_top_node();
}


NodePath *
NodePath_C_get_top_p_pp(NodePath const *param0, Thread *param1) {
    return new NodePath((*param0).get_top(param1));
}


NodePath *
NodePath_C_get_top_p_p(NodePath const *param0) {
    return new NodePath((*param0).get_top());
}


PandaNode *
NodePath_C_node_p_p(NodePath const *param0) {
    return (*param0).node();
}


int
NodePath_C_get_key_i_p(NodePath const *param0) {
    return (*param0).get_key();
}


std::size_t
NodePath_C_add_hash_p_pp(NodePath const *param0, std::size_t param1) {
    return (*param0).add_hash(param1);
}


bool
NodePath_C_is_same_graph_B_ppp(NodePath const *param0, NodePath const *param1, Thread *param2) {
    return (*param0).is_same_graph(*param1, param2);
}


bool
NodePath_C_is_same_graph_B_pp(NodePath const *param0, NodePath const *param1) {
    return (*param0).is_same_graph(*param1);
}


bool
NodePath_C_is_ancestor_of_B_ppp(NodePath const *param0, NodePath const *param1, Thread *param2) {
    return (*param0).is_ancestor_of(*param1, param2);
}


bool
NodePath_C_is_ancestor_of_B_pp(NodePath const *param0, NodePath const *param1) {
    return (*param0).is_ancestor_of(*param1);
}


NodePath *
NodePath_C_get_common_ancestor_p_ppp(NodePath const *param0, NodePath const *param1, Thread *param2) {
    return new NodePath((*param0).get_common_ancestor(*param1, param2));
}


NodePath *
NodePath_C_get_common_ancestor_p_pp(NodePath const *param0, NodePath const *param1) {
    return new NodePath((*param0).get_common_ancestor(*param1));
}


NodePathCollection *
NodePath_C_get_children_p_pp(NodePath const *param0, Thread *param1) {
    return new NodePathCollection((*param0).get_children(param1));
}


NodePathCollection *
NodePath_C_get_children_p_p(NodePath const *param0) {
    return new NodePathCollection((*param0).get_children());
}


int
NodePath_C_get_num_children_i_pp(NodePath const *param0, Thread *param1) {
    return (*param0).get_num_children(param1);
}


int
NodePath_C_get_num_children_i_p(NodePath const *param0) {
    return (*param0).get_num_children();
}


NodePath *
NodePath_C_get_child_p_pip(NodePath const *param0, int param1, Thread *param2) {
    return new NodePath((*param0).get_child(param1, param2));
}


NodePath *
NodePath_C_get_child_p_pi(NodePath const *param0, int param1) {
    return new NodePath((*param0).get_child(param1));
}


NodePathCollection *
NodePath_C_get_stashed_children_p_pp(NodePath const *param0, Thread *param1) {
    return new NodePathCollection((*param0).get_stashed_children(param1));
}


NodePathCollection *
NodePath_C_get_stashed_children_p_p(NodePath const *param0) {
    return new NodePathCollection((*param0).get_stashed_children());
}


int
NodePath_C_count_num_descendants_i_p(NodePath const *param0) {
    return (*param0).count_num_descendants();
}


bool
NodePath_C_has_parent_B_pp(NodePath const *param0, Thread *param1) {
    return (*param0).has_parent(param1);
}


bool
NodePath_C_has_parent_B_p(NodePath const *param0) {
    return (*param0).has_parent();
}


NodePath *
NodePath_C_get_parent_p_pp(NodePath const *param0, Thread *param1) {
    return new NodePath((*param0).get_parent(param1));
}


NodePath *
NodePath_C_get_parent_p_p(NodePath const *param0) {
    return new NodePath((*param0).get_parent());
}


int
NodePath_C_get_sort_i_pp(NodePath const *param0, Thread *param1) {
    return (*param0).get_sort(param1);
}


int
NodePath_C_get_sort_i_p(NodePath const *param0) {
    return (*param0).get_sort();
}


NodePath *
NodePath_C_find_p_ps(NodePath const *param0, char const *param1) {
    return new NodePath((*param0).find(std::string(param1)));
}


NodePath *
NodePath_C_find_path_to_p_pp(NodePath const *param0, PandaNode *param1) {
    return new NodePath((*param0).find_path_to(param1));
}


NodePathCollection *
NodePath_C_find_all_matches_p_ps(NodePath const *param0, char const *param1) {
    return new NodePathCollection((*param0).find_all_matches(std::string(param1)));
}


NodePathCollection *
NodePath_C_find_all_paths_to_p_pp(NodePath const *param0, PandaNode *param1) {
    return new NodePathCollection((*param0).find_all_paths_to(param1));
}


void
NodePath_C_reparent_to_v_ppip(NodePath *param0, NodePath const *param1, int param2, Thread *param3) {
    (*param0).reparent_to(*param1, param2, param3);
}


void
NodePath_C_reparent_to_v_ppi(NodePath *param0, NodePath const *param1, int param2) {
    (*param0).reparent_to(*param1, param2);
}


void
NodePath_C_reparent_to_v_pp(NodePath *param0, NodePath const *param1) {
    (*param0).reparent_to(*param1);
}


void
NodePath_C_stash_to_v_ppip(NodePath *param0, NodePath const *param1, int param2, Thread *param3) {
    (*param0).stash_to(*param1, param2, param3);
}


void
NodePath_C_stash_to_v_ppi(NodePath *param0, NodePath const *param1, int param2) {
    (*param0).stash_to(*param1, param2);
}


void
NodePath_C_stash_to_v_pp(NodePath *param0, NodePath const *param1) {
    (*param0).stash_to(*param1);
}


void
NodePath_C_wrt_reparent_to_v_ppip(NodePath *param0, NodePath const *param1, int param2, Thread *param3) {
    (*param0).wrt_reparent_to(*param1, param2, param3);
}


void
NodePath_C_wrt_reparent_to_v_ppi(NodePath *param0, NodePath const *param1, int param2) {
    (*param0).wrt_reparent_to(*param1, param2);
}


void
NodePath_C_wrt_reparent_to_v_pp(NodePath *param0, NodePath const *param1) {
    (*param0).wrt_reparent_to(*param1);
}


NodePath *
NodePath_C_instance_to_p_ppip(NodePath const *param0, NodePath const *param1, int param2, Thread *param3) {
    return new NodePath((*param0).instance_to(*param1, param2, param3));
}


NodePath *
NodePath_C_instance_to_p_ppi(NodePath const *param0, NodePath const *param1, int param2) {
    return new NodePath((*param0).instance_to(*param1, param2));
}


NodePath *
NodePath_C_instance_to_p_pp(NodePath const *param0, NodePath const *param1) {
    return new NodePath((*param0).instance_to(*param1));
}


NodePath *
NodePath_C_instance_under_node_p_ppsip(NodePath const *param0, NodePath const *param1, char const *param2, int param3, Thread *param4) {
    return new NodePath((*param0).instance_under_node(*param1, std::string(param2), param3, param4));
}


NodePath *
NodePath_C_instance_under_node_p_ppsi(NodePath const *param0, NodePath const *param1, char const *param2, int param3) {
    return new NodePath((*param0).instance_under_node(*param1, std::string(param2), param3));
}


NodePath *
NodePath_C_instance_under_node_p_pps(NodePath const *param0, NodePath const *param1, char const *param2) {
    return new NodePath((*param0).instance_under_node(*param1, std::string(param2)));
}


NodePath *
NodePath_C_copy_to_p_ppip(NodePath const *param0, NodePath const *param1, int param2, Thread *param3) {
    return new NodePath((*param0).copy_to(*param1, param2, param3));
}


NodePath *
NodePath_C_copy_to_p_ppi(NodePath const *param0, NodePath const *param1, int param2) {
    return new NodePath((*param0).copy_to(*param1, param2));
}


NodePath *
NodePath_C_copy_to_p_pp(NodePath const *param0, NodePath const *param1) {
    return new NodePath((*param0).copy_to(*param1));
}


NodePath *
NodePath_C_attach_new_node_p_ppip(NodePath const *param0, PandaNode *param1, int param2, Thread *param3) {
    return new NodePath((*param0).attach_new_node(param1, param2, param3));
}


NodePath *
NodePath_C_attach_new_node_p_ppi(NodePath const *param0, PandaNode *param1, int param2) {
    return new NodePath((*param0).attach_new_node(param1, param2));
}


NodePath *
NodePath_C_attach_new_node_p_pp(NodePath const *param0, PandaNode *param1) {
    return new NodePath((*param0).attach_new_node(param1));
}


NodePath *
NodePath_C_attach_new_node_p_psip(NodePath const *param0, char const *param1, int param2, Thread *param3) {
    return new NodePath((*param0).attach_new_node(std::string(param1), param2, param3));
}


NodePath *
NodePath_C_attach_new_node_p_psi(NodePath const *param0, char const *param1, int param2) {
    return new NodePath((*param0).attach_new_node(std::string(param1), param2));
}


NodePath *
NodePath_C_attach_new_node_p_ps(NodePath const *param0, char const *param1) {
    return new NodePath((*param0).attach_new_node(std::string(param1)));
}


void
NodePath_C_remove_node_v_pp(NodePath *param0, Thread *param1) {
    (*param0).remove_node(param1);
}


void
NodePath_C_remove_node_v_p(NodePath *param0) {
    (*param0).remove_node();
}


void
NodePath_C_detach_node_v_pp(NodePath *param0, Thread *param1) {
    (*param0).detach_node(param1);
}


void
NodePath_C_detach_node_v_p(NodePath *param0) {
    (*param0).detach_node();
}


void
NodePath_C_output_v_pp(NodePath const *param0, std::ostream *param1) {
    (*param0).output(*param1);
}


void
NodePath_C_ls_v_p(NodePath const *param0) {
    (*param0).ls();
}


void
NodePath_C_ls_v_ppi(NodePath const *param0, std::ostream *param1, int param2) {
    (*param0).ls(*param1, param2);
}


void
NodePath_C_ls_v_pp(NodePath const *param0, std::ostream *param1) {
    (*param0).ls(*param1);
}


void
NodePath_C_reverse_ls_v_p(NodePath const *param0) {
    (*param0).reverse_ls();
}


int
NodePath_C_reverse_ls_i_ppi(NodePath const *param0, std::ostream *param1, int param2) {
    return (*param0).reverse_ls(*param1, param2);
}


int
NodePath_C_reverse_ls_i_pp(NodePath const *param0, std::ostream *param1) {
    return (*param0).reverse_ls(*param1);
}


ConstPointerTo< RenderState > *
NodePath_C_get_state_p_ppp(NodePath const *param0, NodePath const *param1, Thread *param2) {
    return new ConstPointerTo< RenderState >((*param0).get_state(*param1, param2));
}


ConstPointerTo< RenderState > *
NodePath_C_get_state_p_pp(NodePath const *param0, NodePath const *param1) {
    return new ConstPointerTo< RenderState >((*param0).get_state(*param1));
}


RenderState const *
NodePath_C_get_state_p_pp_1_p_pp(NodePath const *param0, Thread *param1) {
    return (*param0).get_state(param1);
}


RenderState const *
NodePath_C_get_state_p_p(NodePath const *param0) {
    return (*param0).get_state();
}


void
NodePath_C_set_state_v_pppp(NodePath *param0, NodePath const *param1, RenderState const *param2, Thread *param3) {
    (*param0).set_state(*param1, param2, param3);
}


void
NodePath_C_set_state_v_ppp(NodePath *param0, NodePath const *param1, RenderState const *param2) {
    (*param0).set_state(*param1, param2);
}


void
NodePath_C_set_state_v_ppp_1_v_ppp(NodePath *param0, RenderState const *param1, Thread *param2) {
    (*param0).set_state(param1, param2);
}


void
NodePath_C_set_state_v_pp(NodePath *param0, RenderState const *param1) {
    (*param0).set_state(param1);
}


ConstPointerTo< RenderState > *
NodePath_C_get_net_state_p_pp(NodePath const *param0, Thread *param1) {
    return new ConstPointerTo< RenderState >((*param0).get_net_state(param1));
}


ConstPointerTo< RenderState > *
NodePath_C_get_net_state_p_p(NodePath const *param0) {
    return new ConstPointerTo< RenderState >((*param0).get_net_state());
}


void
NodePath_C_set_attrib_v_ppi(NodePath *param0, RenderAttrib const *param1, int param2) {
    (*param0).set_attrib(param1, param2);
}


void
NodePath_C_set_attrib_v_pp(NodePath *param0, RenderAttrib const *param1) {
    (*param0).set_attrib(param1);
}


RenderAttrib const *
NodePath_C_get_attrib_p_pi(NodePath const *param0, int param1) {
    return (*param0).get_attrib(TypeHandle::from_index(param1));
}


bool
NodePath_C_has_attrib_B_pi(NodePath const *param0, int param1) {
    return (*param0).has_attrib(TypeHandle::from_index(param1));
}


void
NodePath_C_clear_attrib_v_pi(NodePath *param0, int param1) {
    (*param0).clear_attrib(TypeHandle::from_index(param1));
}


void
NodePath_C_set_effect_v_pp(NodePath *param0, RenderEffect const *param1) {
    (*param0).set_effect(param1);
}


RenderEffect const *
NodePath_C_get_effect_p_pi(NodePath const *param0, int param1) {
    return (*param0).get_effect(TypeHandle::from_index(param1));
}


bool
NodePath_C_has_effect_B_pi(NodePath const *param0, int param1) {
    return (*param0).has_effect(TypeHandle::from_index(param1));
}


void
NodePath_C_clear_effect_v_pi(NodePath *param0, int param1) {
    (*param0).clear_effect(TypeHandle::from_index(param1));
}


void
NodePath_C_set_effects_v_pp(NodePath *param0, RenderEffects const *param1) {
    (*param0).set_effects(param1);
}


RenderEffects const *
NodePath_C_get_effects_p_p(NodePath const *param0) {
    return (*param0).get_effects();
}


void
NodePath_C_clear_effects_v_p(NodePath *param0) {
    (*param0).clear_effects();
}


ConstPointerTo< TransformState > *
NodePath_C_get_transform_p_ppp(NodePath const *param0, NodePath const *param1, Thread *param2) {
    return new ConstPointerTo< TransformState >((*param0).get_transform(*param1, param2));
}


ConstPointerTo< TransformState > *
NodePath_C_get_transform_p_pp(NodePath const *param0, NodePath const *param1) {
    return new ConstPointerTo< TransformState >((*param0).get_transform(*param1));
}


TransformState const *
NodePath_C_get_transform_p_pp_1_p_pp(NodePath const *param0, Thread *param1) {
    return (*param0).get_transform(param1);
}


TransformState const *
NodePath_C_get_transform_p_p(NodePath const *param0) {
    return (*param0).get_transform();
}


void
NodePath_C_clear_transform_v_ppp(NodePath *param0, NodePath const *param1, Thread *param2) {
    (*param0).clear_transform(*param1, param2);
}


void
NodePath_C_clear_transform_v_pp(NodePath *param0, NodePath const *param1) {
    (*param0).clear_transform(*param1);
}


void
NodePath_C_clear_transform_v_pp_1_v_pp(NodePath *param0, Thread *param1) {
    (*param0).clear_transform(param1);
}


void
NodePath_C_clear_transform_v_p(NodePath *param0) {
    (*param0).clear_transform();
}


void
NodePath_C_set_transform_v_pppp(NodePath *param0, NodePath const *param1, TransformState const *param2, Thread *param3) {
    (*param0).set_transform(*param1, param2, param3);
}


void
NodePath_C_set_transform_v_ppp(NodePath *param0, NodePath const *param1, TransformState const *param2) {
    (*param0).set_transform(*param1, param2);
}


void
NodePath_C_set_transform_v_ppp_1_v_ppp(NodePath *param0, TransformState const *param1, Thread *param2) {
    (*param0).set_transform(param1, param2);
}


void
NodePath_C_set_transform_v_pp(NodePath *param0, TransformState const *param1) {
    (*param0).set_transform(param1);
}


ConstPointerTo< TransformState > *
NodePath_C_get_net_transform_p_pp(NodePath const *param0, Thread *param1) {
    return new ConstPointerTo< TransformState >((*param0).get_net_transform(param1));
}


ConstPointerTo< TransformState > *
NodePath_C_get_net_transform_p_p(NodePath const *param0) {
    return new ConstPointerTo< TransformState >((*param0).get_net_transform());
}


ConstPointerTo< TransformState > *
NodePath_C_get_prev_transform_p_ppp(NodePath const *param0, NodePath const *param1, Thread *param2) {
    return new ConstPointerTo< TransformState >((*param0).get_prev_transform(*param1, param2));
}


ConstPointerTo< TransformState > *
NodePath_C_get_prev_transform_p_pp(NodePath const *param0, NodePath const *param1) {
    return new ConstPointerTo< TransformState >((*param0).get_prev_transform(*param1));
}


TransformState const *
NodePath_C_get_prev_transform_p_pp_1_p_pp(NodePath const *param0, Thread *param1) {
    return (*param0).get_prev_transform(param1);
}


TransformState const *
NodePath_C_get_prev_transform_p_p(NodePath const *param0) {
    return (*param0).get_prev_transform();
}


void
NodePath_C_set_prev_transform_v_pppp(NodePath *param0, NodePath const *param1, TransformState const *param2, Thread *param3) {
    (*param0).set_prev_transform(*param1, param2, param3);
}


void
NodePath_C_set_prev_transform_v_ppp(NodePath *param0, NodePath const *param1, TransformState const *param2) {
    (*param0).set_prev_transform(*param1, param2);
}


void
NodePath_C_set_prev_transform_v_ppp_1_v_ppp(NodePath *param0, TransformState const *param1, Thread *param2) {
    (*param0).set_prev_transform(param1, param2);
}


void
NodePath_C_set_prev_transform_v_pp(NodePath *param0, TransformState const *param1) {
    (*param0).set_prev_transform(param1);
}


ConstPointerTo< TransformState > *
NodePath_C_get_net_prev_transform_p_pp(NodePath const *param0, Thread *param1) {
    return new ConstPointerTo< TransformState >((*param0).get_net_prev_transform(param1));
}


ConstPointerTo< TransformState > *
NodePath_C_get_net_prev_transform_p_p(NodePath const *param0) {
    return new ConstPointerTo< TransformState >((*param0).get_net_prev_transform());
}


void
NodePath_C_set_pos_v_pp(NodePath *param0, LVecBase3 const *param1) {
    (*param0).set_pos(*param1);
}


void
NodePath_C_set_pos_v_ppp(NodePath *param0, NodePath const *param1, LVecBase3 const *param2) {
    (*param0).set_pos(*param1, *param2);
}


void
NodePath_C_set_pos_v_ppfff(NodePath *param0, NodePath const *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    (*param0).set_pos(*param1, param2, param3, param4);
}


void
NodePath_C_set_pos_v_pfff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3) {
    (*param0).set_pos(param1, param2, param3);
}


void
NodePath_C_set_x_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2) {
    (*param0).set_x(*param1, param2);
}


void
NodePath_C_set_x_v_pf(NodePath *param0, PN_stdfloat param1) {
    (*param0).set_x(param1);
}


void
NodePath_C_set_y_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2) {
    (*param0).set_y(*param1, param2);
}


void
NodePath_C_set_y_v_pf(NodePath *param0, PN_stdfloat param1) {
    (*param0).set_y(param1);
}


void
NodePath_C_set_z_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2) {
    (*param0).set_z(*param1, param2);
}


void
NodePath_C_set_z_v_pf(NodePath *param0, PN_stdfloat param1) {
    (*param0).set_z(param1);
}


void
NodePath_C_set_fluid_pos_v_pp(NodePath *param0, LVecBase3 const *param1) {
    (*param0).set_fluid_pos(*param1);
}


void
NodePath_C_set_fluid_pos_v_ppp(NodePath *param0, NodePath const *param1, LVecBase3 const *param2) {
    (*param0).set_fluid_pos(*param1, *param2);
}


void
NodePath_C_set_fluid_pos_v_ppfff(NodePath *param0, NodePath const *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    (*param0).set_fluid_pos(*param1, param2, param3, param4);
}


void
NodePath_C_set_fluid_pos_v_pfff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3) {
    (*param0).set_fluid_pos(param1, param2, param3);
}


void
NodePath_C_set_fluid_x_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2) {
    (*param0).set_fluid_x(*param1, param2);
}


void
NodePath_C_set_fluid_x_v_pf(NodePath *param0, PN_stdfloat param1) {
    (*param0).set_fluid_x(param1);
}


void
NodePath_C_set_fluid_y_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2) {
    (*param0).set_fluid_y(*param1, param2);
}


void
NodePath_C_set_fluid_y_v_pf(NodePath *param0, PN_stdfloat param1) {
    (*param0).set_fluid_y(param1);
}


void
NodePath_C_set_fluid_z_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2) {
    (*param0).set_fluid_z(*param1, param2);
}


void
NodePath_C_set_fluid_z_v_pf(NodePath *param0, PN_stdfloat param1) {
    (*param0).set_fluid_z(param1);
}


LPoint3 *
NodePath_C_get_pos_p_p(NodePath const *param0) {
    return new LPoint3((*param0).get_pos());
}


LPoint3 *
NodePath_C_get_pos_p_pp(NodePath const *param0, NodePath const *param1) {
    return new LPoint3((*param0).get_pos(*param1));
}


PN_stdfloat
NodePath_C_get_x_f_p(NodePath const *param0) {
    return (*param0).get_x();
}


PN_stdfloat
NodePath_C_get_x_f_pp(NodePath const *param0, NodePath const *param1) {
    return (*param0).get_x(*param1);
}


PN_stdfloat
NodePath_C_get_y_f_p(NodePath const *param0) {
    return (*param0).get_y();
}


PN_stdfloat
NodePath_C_get_y_f_pp(NodePath const *param0, NodePath const *param1) {
    return (*param0).get_y(*param1);
}


PN_stdfloat
NodePath_C_get_z_f_p(NodePath const *param0) {
    return (*param0).get_z();
}


PN_stdfloat
NodePath_C_get_z_f_pp(NodePath const *param0, NodePath const *param1) {
    return (*param0).get_z(*param1);
}


LVector3 *
NodePath_C_get_pos_delta_p_p(NodePath const *param0) {
    return new LVector3((*param0).get_pos_delta());
}


LVector3 *
NodePath_C_get_pos_delta_p_pp(NodePath const *param0, NodePath const *param1) {
    return new LVector3((*param0).get_pos_delta(*param1));
}


void
NodePath_C_set_hpr_v_pp(NodePath *param0, LVecBase3 const *param1) {
    (*param0).set_hpr(*param1);
}


void
NodePath_C_set_hpr_v_ppp(NodePath *param0, NodePath const *param1, LVecBase3 const *param2) {
    (*param0).set_hpr(*param1, *param2);
}


void
NodePath_C_set_hpr_v_ppfff(NodePath *param0, NodePath const *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    (*param0).set_hpr(*param1, param2, param3, param4);
}


void
NodePath_C_set_hpr_v_pfff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3) {
    (*param0).set_hpr(param1, param2, param3);
}


void
NodePath_C_set_h_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2) {
    (*param0).set_h(*param1, param2);
}


void
NodePath_C_set_h_v_pf(NodePath *param0, PN_stdfloat param1) {
    (*param0).set_h(param1);
}


void
NodePath_C_set_p_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2) {
    (*param0).set_p(*param1, param2);
}


void
NodePath_C_set_p_v_pf(NodePath *param0, PN_stdfloat param1) {
    (*param0).set_p(param1);
}


void
NodePath_C_set_r_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2) {
    (*param0).set_r(*param1, param2);
}


void
NodePath_C_set_r_v_pf(NodePath *param0, PN_stdfloat param1) {
    (*param0).set_r(param1);
}


LVecBase3 *
NodePath_C_get_hpr_p_p(NodePath const *param0) {
    return new LVecBase3((*param0).get_hpr());
}


LVecBase3 *
NodePath_C_get_hpr_p_pp(NodePath const *param0, NodePath const *param1) {
    return new LVecBase3((*param0).get_hpr(*param1));
}


PN_stdfloat
NodePath_C_get_h_f_p(NodePath const *param0) {
    return (*param0).get_h();
}


PN_stdfloat
NodePath_C_get_h_f_pp(NodePath const *param0, NodePath const *param1) {
    return (*param0).get_h(*param1);
}


PN_stdfloat
NodePath_C_get_p_f_p(NodePath const *param0) {
    return (*param0).get_p();
}


PN_stdfloat
NodePath_C_get_p_f_pp(NodePath const *param0, NodePath const *param1) {
    return (*param0).get_p(*param1);
}


PN_stdfloat
NodePath_C_get_r_f_p(NodePath const *param0) {
    return (*param0).get_r();
}


PN_stdfloat
NodePath_C_get_r_f_pp(NodePath const *param0, NodePath const *param1) {
    return (*param0).get_r(*param1);
}


void
NodePath_C_set_quat_v_pp(NodePath *param0, LQuaternion const *param1) {
    (*param0).set_quat(*param1);
}


void
NodePath_C_set_quat_v_ppp(NodePath *param0, NodePath const *param1, LQuaternion const *param2) {
    (*param0).set_quat(*param1, *param2);
}


LQuaternion *
NodePath_C_get_quat_p_p(NodePath const *param0) {
    return new LQuaternion((*param0).get_quat());
}


LQuaternion *
NodePath_C_get_quat_p_pp(NodePath const *param0, NodePath const *param1) {
    return new LQuaternion((*param0).get_quat(*param1));
}


void
NodePath_C_set_scale_v_pp(NodePath *param0, LVecBase3 const *param1) {
    (*param0).set_scale(*param1);
}


void
NodePath_C_set_scale_v_ppp(NodePath *param0, NodePath const *param1, LVecBase3 const *param2) {
    (*param0).set_scale(*param1, *param2);
}


void
NodePath_C_set_scale_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2) {
    (*param0).set_scale(*param1, param2);
}


void
NodePath_C_set_scale_v_ppfff(NodePath *param0, NodePath const *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    (*param0).set_scale(*param1, param2, param3, param4);
}


void
NodePath_C_set_scale_v_pf(NodePath *param0, PN_stdfloat param1) {
    (*param0).set_scale(param1);
}


void
NodePath_C_set_scale_v_pfff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3) {
    (*param0).set_scale(param1, param2, param3);
}


void
NodePath_C_set_sx_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2) {
    (*param0).set_sx(*param1, param2);
}


void
NodePath_C_set_sx_v_pf(NodePath *param0, PN_stdfloat param1) {
    (*param0).set_sx(param1);
}


void
NodePath_C_set_sy_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2) {
    (*param0).set_sy(*param1, param2);
}


void
NodePath_C_set_sy_v_pf(NodePath *param0, PN_stdfloat param1) {
    (*param0).set_sy(param1);
}


void
NodePath_C_set_sz_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2) {
    (*param0).set_sz(*param1, param2);
}


void
NodePath_C_set_sz_v_pf(NodePath *param0, PN_stdfloat param1) {
    (*param0).set_sz(param1);
}


LVecBase3 *
NodePath_C_get_scale_p_p(NodePath const *param0) {
    return new LVecBase3((*param0).get_scale());
}


LVecBase3 *
NodePath_C_get_scale_p_pp(NodePath const *param0, NodePath const *param1) {
    return new LVecBase3((*param0).get_scale(*param1));
}


PN_stdfloat
NodePath_C_get_sx_f_p(NodePath const *param0) {
    return (*param0).get_sx();
}


PN_stdfloat
NodePath_C_get_sx_f_pp(NodePath const *param0, NodePath const *param1) {
    return (*param0).get_sx(*param1);
}


PN_stdfloat
NodePath_C_get_sy_f_p(NodePath const *param0) {
    return (*param0).get_sy();
}


PN_stdfloat
NodePath_C_get_sy_f_pp(NodePath const *param0, NodePath const *param1) {
    return (*param0).get_sy(*param1);
}


PN_stdfloat
NodePath_C_get_sz_f_p(NodePath const *param0) {
    return (*param0).get_sz();
}


PN_stdfloat
NodePath_C_get_sz_f_pp(NodePath const *param0, NodePath const *param1) {
    return (*param0).get_sz(*param1);
}


void
NodePath_C_set_shear_v_pp(NodePath *param0, LVecBase3 const *param1) {
    (*param0).set_shear(*param1);
}


void
NodePath_C_set_shear_v_ppp(NodePath *param0, NodePath const *param1, LVecBase3 const *param2) {
    (*param0).set_shear(*param1, *param2);
}


void
NodePath_C_set_shear_v_ppfff(NodePath *param0, NodePath const *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    (*param0).set_shear(*param1, param2, param3, param4);
}


void
NodePath_C_set_shear_v_pfff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3) {
    (*param0).set_shear(param1, param2, param3);
}


void
NodePath_C_set_shxy_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2) {
    (*param0).set_shxy(*param1, param2);
}


void
NodePath_C_set_shxy_v_pf(NodePath *param0, PN_stdfloat param1) {
    (*param0).set_shxy(param1);
}


void
NodePath_C_set_shxz_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2) {
    (*param0).set_shxz(*param1, param2);
}


void
NodePath_C_set_shxz_v_pf(NodePath *param0, PN_stdfloat param1) {
    (*param0).set_shxz(param1);
}


void
NodePath_C_set_shyz_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2) {
    (*param0).set_shyz(*param1, param2);
}


void
NodePath_C_set_shyz_v_pf(NodePath *param0, PN_stdfloat param1) {
    (*param0).set_shyz(param1);
}


LVecBase3 *
NodePath_C_get_shear_p_p(NodePath const *param0) {
    return new LVecBase3((*param0).get_shear());
}


LVecBase3 *
NodePath_C_get_shear_p_pp(NodePath const *param0, NodePath const *param1) {
    return new LVecBase3((*param0).get_shear(*param1));
}


PN_stdfloat
NodePath_C_get_shxy_f_p(NodePath const *param0) {
    return (*param0).get_shxy();
}


PN_stdfloat
NodePath_C_get_shxy_f_pp(NodePath const *param0, NodePath const *param1) {
    return (*param0).get_shxy(*param1);
}


PN_stdfloat
NodePath_C_get_shxz_f_p(NodePath const *param0) {
    return (*param0).get_shxz();
}


PN_stdfloat
NodePath_C_get_shxz_f_pp(NodePath const *param0, NodePath const *param1) {
    return (*param0).get_shxz(*param1);
}


PN_stdfloat
NodePath_C_get_shyz_f_p(NodePath const *param0) {
    return (*param0).get_shyz();
}


PN_stdfloat
NodePath_C_get_shyz_f_pp(NodePath const *param0, NodePath const *param1) {
    return (*param0).get_shyz(*param1);
}


void
NodePath_C_set_pos_hpr_v_ppp(NodePath *param0, LVecBase3 const *param1, LVecBase3 const *param2) {
    (*param0).set_pos_hpr(*param1, *param2);
}


void
NodePath_C_set_pos_hpr_v_pppp(NodePath *param0, NodePath const *param1, LVecBase3 const *param2, LVecBase3 const *param3) {
    (*param0).set_pos_hpr(*param1, *param2, *param3);
}


void
NodePath_C_set_pos_hpr_v_ppffffff(NodePath *param0, NodePath const *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5, PN_stdfloat param6, PN_stdfloat param7) {
    (*param0).set_pos_hpr(*param1, param2, param3, param4, param5, param6, param7);
}


void
NodePath_C_set_pos_hpr_v_pffffff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5, PN_stdfloat param6) {
    (*param0).set_pos_hpr(param1, param2, param3, param4, param5, param6);
}


void
NodePath_C_set_pos_quat_v_ppp(NodePath *param0, LVecBase3 const *param1, LQuaternion const *param2) {
    (*param0).set_pos_quat(*param1, *param2);
}


void
NodePath_C_set_pos_quat_v_pppp(NodePath *param0, NodePath const *param1, LVecBase3 const *param2, LQuaternion const *param3) {
    (*param0).set_pos_quat(*param1, *param2, *param3);
}


void
NodePath_C_set_hpr_scale_v_ppp(NodePath *param0, LVecBase3 const *param1, LVecBase3 const *param2) {
    (*param0).set_hpr_scale(*param1, *param2);
}


void
NodePath_C_set_hpr_scale_v_pppp(NodePath *param0, NodePath const *param1, LVecBase3 const *param2, LVecBase3 const *param3) {
    (*param0).set_hpr_scale(*param1, *param2, *param3);
}


void
NodePath_C_set_hpr_scale_v_ppffffff(NodePath *param0, NodePath const *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5, PN_stdfloat param6, PN_stdfloat param7) {
    (*param0).set_hpr_scale(*param1, param2, param3, param4, param5, param6, param7);
}


void
NodePath_C_set_hpr_scale_v_pffffff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5, PN_stdfloat param6) {
    (*param0).set_hpr_scale(param1, param2, param3, param4, param5, param6);
}


void
NodePath_C_set_quat_scale_v_ppp(NodePath *param0, LQuaternion const *param1, LVecBase3 const *param2) {
    (*param0).set_quat_scale(*param1, *param2);
}


void
NodePath_C_set_quat_scale_v_pppp(NodePath *param0, NodePath const *param1, LQuaternion const *param2, LVecBase3 const *param3) {
    (*param0).set_quat_scale(*param1, *param2, *param3);
}


void
NodePath_C_set_pos_hpr_scale_v_pppp(NodePath *param0, LVecBase3 const *param1, LVecBase3 const *param2, LVecBase3 const *param3) {
    (*param0).set_pos_hpr_scale(*param1, *param2, *param3);
}


void
NodePath_C_set_pos_hpr_scale_v_ppppp(NodePath *param0, NodePath const *param1, LVecBase3 const *param2, LVecBase3 const *param3, LVecBase3 const *param4) {
    (*param0).set_pos_hpr_scale(*param1, *param2, *param3, *param4);
}


void
NodePath_C_set_pos_hpr_scale_v_ppfffffffff(NodePath *param0, NodePath const *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5, PN_stdfloat param6, PN_stdfloat param7, PN_stdfloat param8, PN_stdfloat param9, PN_stdfloat param10) {
    (*param0).set_pos_hpr_scale(*param1, param2, param3, param4, param5, param6, param7, param8, param9, param10);
}


void
NodePath_C_set_pos_hpr_scale_v_pfffffffff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5, PN_stdfloat param6, PN_stdfloat param7, PN_stdfloat param8, PN_stdfloat param9) {
    (*param0).set_pos_hpr_scale(param1, param2, param3, param4, param5, param6, param7, param8, param9);
}


void
NodePath_C_set_pos_quat_scale_v_pppp(NodePath *param0, LVecBase3 const *param1, LQuaternion const *param2, LVecBase3 const *param3) {
    (*param0).set_pos_quat_scale(*param1, *param2, *param3);
}


void
NodePath_C_set_pos_quat_scale_v_ppppp(NodePath *param0, NodePath const *param1, LVecBase3 const *param2, LQuaternion const *param3, LVecBase3 const *param4) {
    (*param0).set_pos_quat_scale(*param1, *param2, *param3, *param4);
}


void
NodePath_C_set_pos_hpr_scale_shear_v_ppppp(NodePath *param0, LVecBase3 const *param1, LVecBase3 const *param2, LVecBase3 const *param3, LVecBase3 const *param4) {
    (*param0).set_pos_hpr_scale_shear(*param1, *param2, *param3, *param4);
}


void
NodePath_C_set_pos_hpr_scale_shear_v_pppppp(NodePath *param0, NodePath const *param1, LVecBase3 const *param2, LVecBase3 const *param3, LVecBase3 const *param4, LVecBase3 const *param5) {
    (*param0).set_pos_hpr_scale_shear(*param1, *param2, *param3, *param4, *param5);
}


void
NodePath_C_set_pos_quat_scale_shear_v_ppppp(NodePath *param0, LVecBase3 const *param1, LQuaternion const *param2, LVecBase3 const *param3, LVecBase3 const *param4) {
    (*param0).set_pos_quat_scale_shear(*param1, *param2, *param3, *param4);
}


void
NodePath_C_set_pos_quat_scale_shear_v_pppppp(NodePath *param0, NodePath const *param1, LVecBase3 const *param2, LQuaternion const *param3, LVecBase3 const *param4, LVecBase3 const *param5) {
    (*param0).set_pos_quat_scale_shear(*param1, *param2, *param3, *param4, *param5);
}


void
NodePath_C_set_mat_v_pp(NodePath *param0, LMatrix4 const *param1) {
    (*param0).set_mat(*param1);
}


void
NodePath_C_set_mat_v_ppp(NodePath *param0, NodePath const *param1, LMatrix4 const *param2) {
    (*param0).set_mat(*param1, *param2);
}


void
NodePath_C_clear_mat_v_p(NodePath *param0) {
    (*param0).clear_mat();
}


bool
NodePath_C_has_mat_B_p(NodePath const *param0) {
    return (*param0).has_mat();
}


LMatrix4 const *
NodePath_C_get_mat_p_p(NodePath const *param0) {
    return &((*param0).get_mat());
}


LMatrix4 *
NodePath_C_get_mat_p_pp(NodePath const *param0, NodePath const *param1) {
    return new LMatrix4((*param0).get_mat(*param1));
}


void
NodePath_C_look_at_v_ppp(NodePath *param0, LPoint3 const *param1, LVector3 const *param2) {
    (*param0).look_at(*param1, *param2);
}


void
NodePath_C_look_at_v_pp(NodePath *param0, LPoint3 const *param1) {
    (*param0).look_at(*param1);
}


void
NodePath_C_look_at_v_pppp(NodePath *param0, NodePath const *param1, LPoint3 const *param2, LVector3 const *param3) {
    (*param0).look_at(*param1, *param2, *param3);
}


void
NodePath_C_look_at_v_ppp_1_v_ppp(NodePath *param0, NodePath const *param1, LPoint3 const *param2) {
    (*param0).look_at(*param1, *param2);
}


void
NodePath_C_look_at_v_pp_1_v_pp(NodePath *param0, NodePath const *param1) {
    (*param0).look_at(*param1);
}


void
NodePath_C_look_at_v_ppfff(NodePath *param0, NodePath const *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    (*param0).look_at(*param1, param2, param3, param4);
}


void
NodePath_C_look_at_v_pfff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3) {
    (*param0).look_at(param1, param2, param3);
}


void
NodePath_C_heads_up_v_ppp(NodePath *param0, LPoint3 const *param1, LVector3 const *param2) {
    (*param0).heads_up(*param1, *param2);
}


void
NodePath_C_heads_up_v_pp(NodePath *param0, LPoint3 const *param1) {
    (*param0).heads_up(*param1);
}


void
NodePath_C_heads_up_v_pppp(NodePath *param0, NodePath const *param1, LPoint3 const *param2, LVector3 const *param3) {
    (*param0).heads_up(*param1, *param2, *param3);
}


void
NodePath_C_heads_up_v_ppp_1_v_ppp(NodePath *param0, NodePath const *param1, LPoint3 const *param2) {
    (*param0).heads_up(*param1, *param2);
}


void
NodePath_C_heads_up_v_pp_1_v_pp(NodePath *param0, NodePath const *param1) {
    (*param0).heads_up(*param1);
}


void
NodePath_C_heads_up_v_ppfff(NodePath *param0, NodePath const *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    (*param0).heads_up(*param1, param2, param3, param4);
}


void
NodePath_C_heads_up_v_pfff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3) {
    (*param0).heads_up(param1, param2, param3);
}


LPoint3 *
NodePath_C_get_relative_point_p_ppp(NodePath const *param0, NodePath const *param1, LVecBase3 const *param2) {
    return new LPoint3((*param0).get_relative_point(*param1, *param2));
}


LVector3 *
NodePath_C_get_relative_vector_p_ppp(NodePath const *param0, NodePath const *param1, LVecBase3 const *param2) {
    return new LVector3((*param0).get_relative_vector(*param1, *param2));
}


PN_stdfloat
NodePath_C_get_distance_f_pp(NodePath const *param0, NodePath const *param1) {
    return (*param0).get_distance(*param1);
}


void
NodePath_C_set_color_v_ppi(NodePath *param0, LColor const *param1, int param2) {
    (*param0).set_color(*param1, param2);
}


void
NodePath_C_set_color_v_pp(NodePath *param0, LColor const *param1) {
    (*param0).set_color(*param1);
}


void
NodePath_C_set_color_v_pffffi(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, int param5) {
    (*param0).set_color(param1, param2, param3, param4, param5);
}


void
NodePath_C_set_color_v_pffff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    (*param0).set_color(param1, param2, param3, param4);
}


void
NodePath_C_set_color_v_pfff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3) {
    (*param0).set_color(param1, param2, param3);
}


void
NodePath_C_set_color_off_v_pi(NodePath *param0, int param1) {
    (*param0).set_color_off(param1);
}


void
NodePath_C_set_color_off_v_p(NodePath *param0) {
    (*param0).set_color_off();
}


void
NodePath_C_clear_color_v_p(NodePath *param0) {
    (*param0).clear_color();
}


bool
NodePath_C_has_color_B_p(NodePath const *param0) {
    return (*param0).has_color();
}


LColor *
NodePath_C_get_color_p_p(NodePath const *param0) {
    return new LColor((*param0).get_color());
}


bool
NodePath_C_has_color_scale_B_p(NodePath const *param0) {
    return (*param0).has_color_scale();
}


void
NodePath_C_clear_color_scale_v_p(NodePath *param0) {
    (*param0).clear_color_scale();
}


void
NodePath_C_set_color_scale_v_ppi(NodePath *param0, LVecBase4 const *param1, int param2) {
    (*param0).set_color_scale(*param1, param2);
}


void
NodePath_C_set_color_scale_v_pp(NodePath *param0, LVecBase4 const *param1) {
    (*param0).set_color_scale(*param1);
}


void
NodePath_C_set_color_scale_v_pffffi(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, int param5) {
    (*param0).set_color_scale(param1, param2, param3, param4, param5);
}


void
NodePath_C_set_color_scale_v_pffff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    (*param0).set_color_scale(param1, param2, param3, param4);
}


void
NodePath_C_compose_color_scale_v_ppi(NodePath *param0, LVecBase4 const *param1, int param2) {
    (*param0).compose_color_scale(*param1, param2);
}


void
NodePath_C_compose_color_scale_v_pp(NodePath *param0, LVecBase4 const *param1) {
    (*param0).compose_color_scale(*param1);
}


void
NodePath_C_compose_color_scale_v_pffffi(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, int param5) {
    (*param0).compose_color_scale(param1, param2, param3, param4, param5);
}


void
NodePath_C_compose_color_scale_v_pffff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    (*param0).compose_color_scale(param1, param2, param3, param4);
}


void
NodePath_C_set_color_scale_off_v_pi(NodePath *param0, int param1) {
    (*param0).set_color_scale_off(param1);
}


void
NodePath_C_set_color_scale_off_v_p(NodePath *param0) {
    (*param0).set_color_scale_off();
}


void
NodePath_C_set_alpha_scale_v_pfi(NodePath *param0, PN_stdfloat param1, int param2) {
    (*param0).set_alpha_scale(param1, param2);
}


void
NodePath_C_set_alpha_scale_v_pf(NodePath *param0, PN_stdfloat param1) {
    (*param0).set_alpha_scale(param1);
}


void
NodePath_C_set_all_color_scale_v_pfi(NodePath *param0, PN_stdfloat param1, int param2) {
    (*param0).set_all_color_scale(param1, param2);
}


void
NodePath_C_set_all_color_scale_v_pf(NodePath *param0, PN_stdfloat param1) {
    (*param0).set_all_color_scale(param1);
}


void
NodePath_C_set_sr_v_pf(NodePath *param0, PN_stdfloat param1) {
    (*param0).set_sr(param1);
}


void
NodePath_C_set_sg_v_pf(NodePath *param0, PN_stdfloat param1) {
    (*param0).set_sg(param1);
}


void
NodePath_C_set_sb_v_pf(NodePath *param0, PN_stdfloat param1) {
    (*param0).set_sb(param1);
}


void
NodePath_C_set_sa_v_pf(NodePath *param0, PN_stdfloat param1) {
    (*param0).set_sa(param1);
}


LVecBase4 const *
NodePath_C_get_color_scale_p_p(NodePath const *param0) {
    return &((*param0).get_color_scale());
}


PN_stdfloat
NodePath_C_get_sr_f_p(NodePath const *param0) {
    return (*param0).get_sr();
}


PN_stdfloat
NodePath_C_get_sg_f_p(NodePath const *param0) {
    return (*param0).get_sg();
}


PN_stdfloat
NodePath_C_get_sb_f_p(NodePath const *param0) {
    return (*param0).get_sb();
}


PN_stdfloat
NodePath_C_get_sa_f_p(NodePath const *param0) {
    return (*param0).get_sa();
}


void
NodePath_C_set_light_v_ppi(NodePath *param0, NodePath const *param1, int param2) {
    (*param0).set_light(*param1, param2);
}


void
NodePath_C_set_light_v_pp(NodePath *param0, NodePath const *param1) {
    (*param0).set_light(*param1);
}


void
NodePath_C_set_light_off_v_ppi(NodePath *param0, NodePath const *param1, int param2) {
    (*param0).set_light_off(*param1, param2);
}


void
NodePath_C_set_light_off_v_pp(NodePath *param0, NodePath const *param1) {
    (*param0).set_light_off(*param1);
}


void
NodePath_C_set_light_off_v_pi(NodePath *param0, int param1) {
    (*param0).set_light_off(param1);
}


void
NodePath_C_set_light_off_v_p(NodePath *param0) {
    (*param0).set_light_off();
}


void
NodePath_C_clear_light_v_p(NodePath *param0) {
    (*param0).clear_light();
}


void
NodePath_C_clear_light_v_pp(NodePath *param0, NodePath const *param1) {
    (*param0).clear_light(*param1);
}


bool
NodePath_C_has_light_B_pp(NodePath const *param0, NodePath const *param1) {
    return (*param0).has_light(*param1);
}


bool
NodePath_C_has_light_off_B_p(NodePath const *param0) {
    return (*param0).has_light_off();
}


bool
NodePath_C_has_light_off_B_pp(NodePath const *param0, NodePath const *param1) {
    return (*param0).has_light_off(*param1);
}


void
NodePath_C_set_clip_plane_v_ppi(NodePath *param0, NodePath const *param1, int param2) {
    (*param0).set_clip_plane(*param1, param2);
}


void
NodePath_C_set_clip_plane_v_pp(NodePath *param0, NodePath const *param1) {
    (*param0).set_clip_plane(*param1);
}


void
NodePath_C_set_clip_plane_off_v_ppi(NodePath *param0, NodePath const *param1, int param2) {
    (*param0).set_clip_plane_off(*param1, param2);
}


void
NodePath_C_set_clip_plane_off_v_pp(NodePath *param0, NodePath const *param1) {
    (*param0).set_clip_plane_off(*param1);
}


void
NodePath_C_set_clip_plane_off_v_pi(NodePath *param0, int param1) {
    (*param0).set_clip_plane_off(param1);
}


void
NodePath_C_set_clip_plane_off_v_p(NodePath *param0) {
    (*param0).set_clip_plane_off();
}


void
NodePath_C_clear_clip_plane_v_p(NodePath *param0) {
    (*param0).clear_clip_plane();
}


void
NodePath_C_clear_clip_plane_v_pp(NodePath *param0, NodePath const *param1) {
    (*param0).clear_clip_plane(*param1);
}


bool
NodePath_C_has_clip_plane_B_pp(NodePath const *param0, NodePath const *param1) {
    return (*param0).has_clip_plane(*param1);
}


bool
NodePath_C_has_clip_plane_off_B_p(NodePath const *param0) {
    return (*param0).has_clip_plane_off();
}


bool
NodePath_C_has_clip_plane_off_B_pp(NodePath const *param0, NodePath const *param1) {
    return (*param0).has_clip_plane_off(*param1);
}


void
NodePath_C_set_scissor_v_ppp(NodePath *param0, LPoint3 const *param1, LPoint3 const *param2) {
    (*param0).set_scissor(*param1, *param2);
}


void
NodePath_C_set_scissor_v_ppppp(NodePath *param0, LPoint3 const *param1, LPoint3 const *param2, LPoint3 const *param3, LPoint3 const *param4) {
    (*param0).set_scissor(*param1, *param2, *param3, *param4);
}


void
NodePath_C_set_scissor_v_pppp(NodePath *param0, NodePath const *param1, LPoint3 const *param2, LPoint3 const *param3) {
    (*param0).set_scissor(*param1, *param2, *param3);
}


void
NodePath_C_set_scissor_v_pppppp(NodePath *param0, NodePath const *param1, LPoint3 const *param2, LPoint3 const *param3, LPoint3 const *param4, LPoint3 const *param5) {
    (*param0).set_scissor(*param1, *param2, *param3, *param4, *param5);
}


void
NodePath_C_set_scissor_v_pffff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    (*param0).set_scissor(param1, param2, param3, param4);
}


void
NodePath_C_clear_scissor_v_p(NodePath *param0) {
    (*param0).clear_scissor();
}


bool
NodePath_C_has_scissor_B_p(NodePath const *param0) {
    return (*param0).has_scissor();
}


void
NodePath_C_set_occluder_v_pp(NodePath *param0, NodePath const *param1) {
    (*param0).set_occluder(*param1);
}


void
NodePath_C_clear_occluder_v_p(NodePath *param0) {
    (*param0).clear_occluder();
}


void
NodePath_C_clear_occluder_v_pp(NodePath *param0, NodePath const *param1) {
    (*param0).clear_occluder(*param1);
}


bool
NodePath_C_has_occluder_B_pp(NodePath const *param0, NodePath const *param1) {
    return (*param0).has_occluder(*param1);
}


void
NodePath_C_set_bin_v_psii(NodePath *param0, char const *param1, int param2, int param3) {
    (*param0).set_bin(std::string(param1), param2, param3);
}


void
NodePath_C_set_bin_v_psi(NodePath *param0, char const *param1, int param2) {
    (*param0).set_bin(std::string(param1), param2);
}


void
NodePath_C_clear_bin_v_p(NodePath *param0) {
    (*param0).clear_bin();
}


bool
NodePath_C_has_bin_B_p(NodePath const *param0) {
    return (*param0).has_bin();
}


char const *
NodePath_C_get_bin_name_s_p(NodePath const *param0) {
    static std::string string_holder = (*param0).get_bin_name();
    return string_holder.c_str();
}


int
NodePath_C_get_bin_draw_order_i_p(NodePath const *param0) {
    return (*param0).get_bin_draw_order();
}


void
NodePath_C_set_texture_v_pppi(NodePath *param0, Texture *param1, SamplerState const *param2, int param3) {
    (*param0).set_texture(param1, *param2, param3);
}


void
NodePath_C_set_texture_v_ppp(NodePath *param0, Texture *param1, SamplerState const *param2) {
    (*param0).set_texture(param1, *param2);
}


void
NodePath_C_set_texture_v_ppi(NodePath *param0, Texture *param1, int param2) {
    (*param0).set_texture(param1, param2);
}


void
NodePath_C_set_texture_v_pp(NodePath *param0, Texture *param1) {
    (*param0).set_texture(param1);
}


void
NodePath_C_set_texture_v_ppppi(NodePath *param0, TextureStage *param1, Texture *param2, SamplerState const *param3, int param4) {
    (*param0).set_texture(param1, param2, *param3, param4);
}


void
NodePath_C_set_texture_v_pppp(NodePath *param0, TextureStage *param1, Texture *param2, SamplerState const *param3) {
    (*param0).set_texture(param1, param2, *param3);
}


void
NodePath_C_set_texture_v_pppi_1_v_pppi(NodePath *param0, TextureStage *param1, Texture *param2, int param3) {
    (*param0).set_texture(param1, param2, param3);
}


void
NodePath_C_set_texture_v_ppp_1_v_ppp(NodePath *param0, TextureStage *param1, Texture *param2) {
    (*param0).set_texture(param1, param2);
}


void
NodePath_C_set_texture_off_v_ppi(NodePath *param0, TextureStage *param1, int param2) {
    (*param0).set_texture_off(param1, param2);
}


void
NodePath_C_set_texture_off_v_pp(NodePath *param0, TextureStage *param1) {
    (*param0).set_texture_off(param1);
}


void
NodePath_C_set_texture_off_v_pi(NodePath *param0, int param1) {
    (*param0).set_texture_off(param1);
}


void
NodePath_C_set_texture_off_v_p(NodePath *param0) {
    (*param0).set_texture_off();
}


void
NodePath_C_clear_texture_v_p(NodePath *param0) {
    (*param0).clear_texture();
}


void
NodePath_C_clear_texture_v_pp(NodePath *param0, TextureStage *param1) {
    (*param0).clear_texture(param1);
}


bool
NodePath_C_has_texture_B_p(NodePath const *param0) {
    return (*param0).has_texture();
}


bool
NodePath_C_has_texture_B_pp(NodePath const *param0, TextureStage *param1) {
    return (*param0).has_texture(param1);
}


bool
NodePath_C_has_texture_off_B_p(NodePath const *param0) {
    return (*param0).has_texture_off();
}


bool
NodePath_C_has_texture_off_B_pp(NodePath const *param0, TextureStage *param1) {
    return (*param0).has_texture_off(param1);
}


Texture *
NodePath_C_get_texture_p_p(NodePath const *param0) {
    return (*param0).get_texture();
}


Texture *
NodePath_C_get_texture_p_pp(NodePath const *param0, TextureStage *param1) {
    return (*param0).get_texture(param1);
}


void
NodePath_C_replace_texture_v_ppp(NodePath *param0, Texture *param1, Texture *param2) {
    (*param0).replace_texture(param1, param2);
}


SamplerState const *
NodePath_C_get_texture_sampler_p_p(NodePath const *param0) {
    return &((*param0).get_texture_sampler());
}


SamplerState const *
NodePath_C_get_texture_sampler_p_pp(NodePath const *param0, TextureStage *param1) {
    return &((*param0).get_texture_sampler(param1));
}


void
NodePath_C_set_shader_v_ppi(NodePath *param0, Shader const *param1, int param2) {
    (*param0).set_shader(param1, param2);
}


void
NodePath_C_set_shader_v_pp(NodePath *param0, Shader const *param1) {
    (*param0).set_shader(param1);
}


void
NodePath_C_set_shader_off_v_pi(NodePath *param0, int param1) {
    (*param0).set_shader_off(param1);
}


void
NodePath_C_set_shader_off_v_p(NodePath *param0) {
    (*param0).set_shader_off();
}


void
NodePath_C_set_shader_auto_v_ppi(NodePath *param0, BitMask32 *param1, int param2) {
    (*param0).set_shader_auto(*param1, param2);
}


void
NodePath_C_set_shader_auto_v_pp(NodePath *param0, BitMask32 *param1) {
    (*param0).set_shader_auto(*param1);
}


void
NodePath_C_set_shader_auto_v_pi(NodePath *param0, int param1) {
    (*param0).set_shader_auto(param1);
}


void
NodePath_C_set_shader_auto_v_p(NodePath *param0) {
    (*param0).set_shader_auto();
}


void
NodePath_C_clear_shader_v_p(NodePath *param0) {
    (*param0).clear_shader();
}


void
NodePath_C_set_shader_input_v_pspi(NodePath *param0, CPT_InternalName *param1, LMatrix3 const *param2, int param3) {
    (*param0).set_shader_input(*param1, *param2, param3);
}


void
NodePath_C_set_shader_input_v_psp(NodePath *param0, CPT_InternalName *param1, LMatrix3 const *param2) {
    (*param0).set_shader_input(*param1, *param2);
}


void
NodePath_C_set_shader_input_v_pspi_1_v_pspi(NodePath *param0, CPT_InternalName *param1, LMatrix4 const *param2, int param3) {
    (*param0).set_shader_input(*param1, *param2, param3);
}


void
NodePath_C_set_shader_input_v_psp_1_v_psp(NodePath *param0, CPT_InternalName *param1, LMatrix4 const *param2) {
    (*param0).set_shader_input(*param1, *param2);
}


void
NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi(NodePath *param0, CPT_InternalName *param1, LVecBase2 const *param2, int param3) {
    (*param0).set_shader_input(*param1, *param2, param3);
}


void
NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp(NodePath *param0, CPT_InternalName *param1, LVecBase2 const *param2) {
    (*param0).set_shader_input(*param1, *param2);
}


void
NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi(NodePath *param0, CPT_InternalName *param1, LVecBase2i const *param2, int param3) {
    (*param0).set_shader_input(*param1, *param2, param3);
}


void
NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp(NodePath *param0, CPT_InternalName *param1, LVecBase2i const *param2) {
    (*param0).set_shader_input(*param1, *param2);
}


void
NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi(NodePath *param0, CPT_InternalName *param1, LVecBase3 const *param2, int param3) {
    (*param0).set_shader_input(*param1, *param2, param3);
}


void
NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp(NodePath *param0, CPT_InternalName *param1, LVecBase3 const *param2) {
    (*param0).set_shader_input(*param1, *param2);
}


void
NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi(NodePath *param0, CPT_InternalName *param1, LVecBase3i const *param2, int param3) {
    (*param0).set_shader_input(*param1, *param2, param3);
}


void
NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp(NodePath *param0, CPT_InternalName *param1, LVecBase3i const *param2) {
    (*param0).set_shader_input(*param1, *param2);
}


void
NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi(NodePath *param0, CPT_InternalName *param1, LVecBase4 const *param2, int param3) {
    (*param0).set_shader_input(*param1, *param2, param3);
}


void
NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp(NodePath *param0, CPT_InternalName *param1, LVecBase4 const *param2) {
    (*param0).set_shader_input(*param1, *param2);
}


void
NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi_7_v_pspi(NodePath *param0, CPT_InternalName *param1, LVecBase4i const *param2, int param3) {
    (*param0).set_shader_input(*param1, *param2, param3);
}


void
NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp_7_v_psp(NodePath *param0, CPT_InternalName *param1, LVecBase4i const *param2) {
    (*param0).set_shader_input(*param1, *param2);
}


void
NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi_7_v_pspi_8_v_pspi(NodePath *param0, CPT_InternalName *param1, NodePath const *param2, int param3) {
    (*param0).set_shader_input(*param1, *param2, param3);
}


void
NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp_7_v_psp_8_v_psp(NodePath *param0, CPT_InternalName *param1, NodePath const *param2) {
    (*param0).set_shader_input(*param1, *param2);
}


void
NodePath_C_set_shader_input_v_psffffi(NodePath *param0, CPT_InternalName *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5, int param6) {
    (*param0).set_shader_input(*param1, param2, param3, param4, param5, param6);
}


void
NodePath_C_set_shader_input_v_psffff(NodePath *param0, CPT_InternalName *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5) {
    (*param0).set_shader_input(*param1, param2, param3, param4, param5);
}


void
NodePath_C_set_shader_input_v_psfff(NodePath *param0, CPT_InternalName *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    (*param0).set_shader_input(*param1, param2, param3, param4);
}


void
NodePath_C_set_shader_input_v_psff(NodePath *param0, CPT_InternalName *param1, PN_stdfloat param2, PN_stdfloat param3) {
    (*param0).set_shader_input(*param1, param2, param3);
}


void
NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi_7_v_pspi_8_v_pspi_9_v_pspi(NodePath *param0, CPT_InternalName *param1, PTA_LMatrix3 const *param2, int param3) {
    (*param0).set_shader_input(*param1, *param2, param3);
}


void
NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp_7_v_psp_8_v_psp_9_v_psp(NodePath *param0, CPT_InternalName *param1, PTA_LMatrix3 const *param2) {
    (*param0).set_shader_input(*param1, *param2);
}


void
NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi_7_v_pspi_8_v_pspi_9_v_pspi_10_v_pspi(NodePath *param0, CPT_InternalName *param1, PTA_LMatrix4 const *param2, int param3) {
    (*param0).set_shader_input(*param1, *param2, param3);
}


void
NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp_7_v_psp_8_v_psp_9_v_psp_10_v_psp(NodePath *param0, CPT_InternalName *param1, PTA_LMatrix4 const *param2) {
    (*param0).set_shader_input(*param1, *param2);
}


void
NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi_7_v_pspi_8_v_pspi_9_v_pspi_10_v_pspi_11_v_pspi(NodePath *param0, CPT_InternalName *param1, PTA_LVecBase2 const *param2, int param3) {
    (*param0).set_shader_input(*param1, *param2, param3);
}


void
NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp_7_v_psp_8_v_psp_9_v_psp_10_v_psp_11_v_psp(NodePath *param0, CPT_InternalName *param1, PTA_LVecBase2 const *param2) {
    (*param0).set_shader_input(*param1, *param2);
}


void
NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi_7_v_pspi_8_v_pspi_9_v_pspi_10_v_pspi_11_v_pspi_12_v_pspi(NodePath *param0, CPT_InternalName *param1, PTA_LVecBase2i const *param2, int param3) {
    (*param0).set_shader_input(*param1, *param2, param3);
}


void
NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp_7_v_psp_8_v_psp_9_v_psp_10_v_psp_11_v_psp_12_v_psp(NodePath *param0, CPT_InternalName *param1, PTA_LVecBase2i const *param2) {
    (*param0).set_shader_input(*param1, *param2);
}


void
NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi_7_v_pspi_8_v_pspi_9_v_pspi_10_v_pspi_11_v_pspi_12_v_pspi_13_v_pspi(NodePath *param0, CPT_InternalName *param1, PTA_LVecBase3 const *param2, int param3) {
    (*param0).set_shader_input(*param1, *param2, param3);
}


void
NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp_7_v_psp_8_v_psp_9_v_psp_10_v_psp_11_v_psp_12_v_psp_13_v_psp(NodePath *param0, CPT_InternalName *param1, PTA_LVecBase3 const *param2) {
    (*param0).set_shader_input(*param1, *param2);
}


void
NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi_7_v_pspi_8_v_pspi_9_v_pspi_10_v_pspi_11_v_pspi_12_v_pspi_13_v_pspi_14_v_pspi(NodePath *param0, CPT_InternalName *param1, PTA_LVecBase3i const *param2, int param3) {
    (*param0).set_shader_input(*param1, *param2, param3);
}


void
NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp_7_v_psp_8_v_psp_9_v_psp_10_v_psp_11_v_psp_12_v_psp_13_v_psp_14_v_psp(NodePath *param0, CPT_InternalName *param1, PTA_LVecBase3i const *param2) {
    (*param0).set_shader_input(*param1, *param2);
}


void
NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi_7_v_pspi_8_v_pspi_9_v_pspi_10_v_pspi_11_v_pspi_12_v_pspi_13_v_pspi_14_v_pspi_15_v_pspi(NodePath *param0, CPT_InternalName *param1, PTA_LVecBase4 const *param2, int param3) {
    (*param0).set_shader_input(*param1, *param2, param3);
}


void
NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp_7_v_psp_8_v_psp_9_v_psp_10_v_psp_11_v_psp_12_v_psp_13_v_psp_14_v_psp_15_v_psp(NodePath *param0, CPT_InternalName *param1, PTA_LVecBase4 const *param2) {
    (*param0).set_shader_input(*param1, *param2);
}


void
NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi_7_v_pspi_8_v_pspi_9_v_pspi_10_v_pspi_11_v_pspi_12_v_pspi_13_v_pspi_14_v_pspi_15_v_pspi_16_v_pspi(NodePath *param0, CPT_InternalName *param1, PTA_LVecBase4i const *param2, int param3) {
    (*param0).set_shader_input(*param1, *param2, param3);
}


void
NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp_7_v_psp_8_v_psp_9_v_psp_10_v_psp_11_v_psp_12_v_psp_13_v_psp_14_v_psp_15_v_psp_16_v_psp(NodePath *param0, CPT_InternalName *param1, PTA_LVecBase4i const *param2) {
    (*param0).set_shader_input(*param1, *param2);
}


void
NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi_7_v_pspi_8_v_pspi_9_v_pspi_10_v_pspi_11_v_pspi_12_v_pspi_13_v_pspi_14_v_pspi_15_v_pspi_16_v_pspi_17_v_pspi(NodePath *param0, CPT_InternalName *param1, PTA_double const *param2, int param3) {
    (*param0).set_shader_input(*param1, *param2, param3);
}


void
NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp_7_v_psp_8_v_psp_9_v_psp_10_v_psp_11_v_psp_12_v_psp_13_v_psp_14_v_psp_15_v_psp_16_v_psp_17_v_psp(NodePath *param0, CPT_InternalName *param1, PTA_double const *param2) {
    (*param0).set_shader_input(*param1, *param2);
}


void
NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi_7_v_pspi_8_v_pspi_9_v_pspi_10_v_pspi_11_v_pspi_12_v_pspi_13_v_pspi_14_v_pspi_15_v_pspi_16_v_pspi_17_v_pspi_18_v_pspi(NodePath *param0, CPT_InternalName *param1, PTA_float const *param2, int param3) {
    (*param0).set_shader_input(*param1, *param2, param3);
}


void
NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp_7_v_psp_8_v_psp_9_v_psp_10_v_psp_11_v_psp_12_v_psp_13_v_psp_14_v_psp_15_v_psp_16_v_psp_17_v_psp_18_v_psp(NodePath *param0, CPT_InternalName *param1, PTA_float const *param2) {
    (*param0).set_shader_input(*param1, *param2);
}


void
NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi_7_v_pspi_8_v_pspi_9_v_pspi_10_v_pspi_11_v_pspi_12_v_pspi_13_v_pspi_14_v_pspi_15_v_pspi_16_v_pspi_17_v_pspi_18_v_pspi_19_v_pspi(NodePath *param0, CPT_InternalName *param1, PTA_int const *param2, int param3) {
    (*param0).set_shader_input(*param1, *param2, param3);
}


void
NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp_7_v_psp_8_v_psp_9_v_psp_10_v_psp_11_v_psp_12_v_psp_13_v_psp_14_v_psp_15_v_psp_16_v_psp_17_v_psp_18_v_psp_19_v_psp(NodePath *param0, CPT_InternalName *param1, PTA_int const *param2) {
    (*param0).set_shader_input(*param1, *param2);
}


void
NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi_7_v_pspi_8_v_pspi_9_v_pspi_10_v_pspi_11_v_pspi_12_v_pspi_13_v_pspi_14_v_pspi_15_v_pspi_16_v_pspi_17_v_pspi_18_v_pspi_19_v_pspi_20_v_pspi(NodePath *param0, CPT_InternalName *param1, ShaderBuffer *param2, int param3) {
    (*param0).set_shader_input(*param1, param2, param3);
}


void
NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp_7_v_psp_8_v_psp_9_v_psp_10_v_psp_11_v_psp_12_v_psp_13_v_psp_14_v_psp_15_v_psp_16_v_psp_17_v_psp_18_v_psp_19_v_psp_20_v_psp(NodePath *param0, CPT_InternalName *param1, ShaderBuffer *param2) {
    (*param0).set_shader_input(*param1, param2);
}


void
NodePath_C_set_shader_input_v_psppi(NodePath *param0, CPT_InternalName *param1, Texture *param2, SamplerState const *param3, int param4) {
    (*param0).set_shader_input(*param1, param2, *param3, param4);
}


void
NodePath_C_set_shader_input_v_pspp(NodePath *param0, CPT_InternalName *param1, Texture *param2, SamplerState const *param3) {
    (*param0).set_shader_input(*param1, param2, *param3);
}


void
NodePath_C_set_shader_input_v_pspBBiii(NodePath *param0, CPT_InternalName *param1, Texture *param2, bool param3, bool param4, int param5, int param6, int param7) {
    (*param0).set_shader_input(*param1, param2, param3, param4, param5, param6, param7);
}


void
NodePath_C_set_shader_input_v_pspBBii(NodePath *param0, CPT_InternalName *param1, Texture *param2, bool param3, bool param4, int param5, int param6) {
    (*param0).set_shader_input(*param1, param2, param3, param4, param5, param6);
}


void
NodePath_C_set_shader_input_v_pspBBi(NodePath *param0, CPT_InternalName *param1, Texture *param2, bool param3, bool param4, int param5) {
    (*param0).set_shader_input(*param1, param2, param3, param4, param5);
}


void
NodePath_C_set_shader_input_v_pspBB(NodePath *param0, CPT_InternalName *param1, Texture *param2, bool param3, bool param4) {
    (*param0).set_shader_input(*param1, param2, param3, param4);
}


void
NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi_7_v_pspi_8_v_pspi_9_v_pspi_10_v_pspi_11_v_pspi_12_v_pspi_13_v_pspi_14_v_pspi_15_v_pspi_16_v_pspi_17_v_pspi_18_v_pspi_19_v_pspi_20_v_pspi_21_v_pspi(NodePath *param0, CPT_InternalName *param1, Texture *param2, int param3) {
    (*param0).set_shader_input(*param1, param2, param3);
}


void
NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp_7_v_psp_8_v_psp_9_v_psp_10_v_psp_11_v_psp_12_v_psp_13_v_psp_14_v_psp_15_v_psp_16_v_psp_17_v_psp_18_v_psp_19_v_psp_20_v_psp_21_v_psp(NodePath *param0, CPT_InternalName *param1, Texture *param2) {
    (*param0).set_shader_input(*param1, param2);
}


void
NodePath_C_set_shader_input_v_psiiiii(NodePath *param0, CPT_InternalName *param1, int param2, int param3, int param4, int param5, int param6) {
    (*param0).set_shader_input(*param1, param2, param3, param4, param5, param6);
}


void
NodePath_C_set_shader_input_v_psiiii(NodePath *param0, CPT_InternalName *param1, int param2, int param3, int param4, int param5) {
    (*param0).set_shader_input(*param1, param2, param3, param4, param5);
}


void
NodePath_C_set_shader_input_v_psiii(NodePath *param0, CPT_InternalName *param1, int param2, int param3, int param4) {
    (*param0).set_shader_input(*param1, param2, param3, param4);
}


void
NodePath_C_set_shader_input_v_psii(NodePath *param0, CPT_InternalName *param1, int param2, int param3) {
    (*param0).set_shader_input(*param1, param2, param3);
}


void
NodePath_C_set_shader_input_v_pp(NodePath *param0, ShaderInput *param1) {
    (*param0).set_shader_input(*param1);
}


void
NodePath_C_set_shader_input_v_pp_1_v_pp(NodePath *param0, ShaderInput const *param1) {
    (*param0).set_shader_input(*param1);
}


void
NodePath_C_clear_shader_input_v_ps(NodePath *param0, CPT_InternalName *param1) {
    (*param0).clear_shader_input(*param1);
}


void
NodePath_C_set_instance_count_v_pi(NodePath *param0, int param1) {
    (*param0).set_instance_count(param1);
}


Shader const *
NodePath_C_get_shader_p_p(NodePath const *param0) {
    return (*param0).get_shader();
}


ShaderInput *
NodePath_C_get_shader_input_p_ps(NodePath const *param0, CPT_InternalName *param1) {
    return new ShaderInput((*param0).get_shader_input(*param1));
}


int
NodePath_C_get_instance_count_i_p(NodePath const *param0) {
    return (*param0).get_instance_count();
}


void
NodePath_C_set_tex_transform_v_pppp(NodePath *param0, NodePath const *param1, TextureStage *param2, TransformState const *param3) {
    (*param0).set_tex_transform(*param1, param2, param3);
}


void
NodePath_C_set_tex_transform_v_ppp(NodePath *param0, TextureStage *param1, TransformState const *param2) {
    (*param0).set_tex_transform(param1, param2);
}


void
NodePath_C_clear_tex_transform_v_p(NodePath *param0) {
    (*param0).clear_tex_transform();
}


void
NodePath_C_clear_tex_transform_v_pp(NodePath *param0, TextureStage *param1) {
    (*param0).clear_tex_transform(param1);
}


bool
NodePath_C_has_tex_transform_B_pp(NodePath const *param0, TextureStage *param1) {
    return (*param0).has_tex_transform(param1);
}


ConstPointerTo< TransformState > *
NodePath_C_get_tex_transform_p_ppp(NodePath const *param0, NodePath const *param1, TextureStage *param2) {
    return new ConstPointerTo< TransformState >((*param0).get_tex_transform(*param1, param2));
}


ConstPointerTo< TransformState > *
NodePath_C_get_tex_transform_p_pp(NodePath const *param0, TextureStage *param1) {
    return new ConstPointerTo< TransformState >((*param0).get_tex_transform(param1));
}


void
NodePath_C_set_tex_offset_v_pppp(NodePath *param0, NodePath const *param1, TextureStage *param2, LVecBase2 const *param3) {
    (*param0).set_tex_offset(*param1, param2, *param3);
}


void
NodePath_C_set_tex_offset_v_pppff(NodePath *param0, NodePath const *param1, TextureStage *param2, PN_stdfloat param3, PN_stdfloat param4) {
    (*param0).set_tex_offset(*param1, param2, param3, param4);
}


void
NodePath_C_set_tex_offset_v_ppp(NodePath *param0, TextureStage *param1, LVecBase2 const *param2) {
    (*param0).set_tex_offset(param1, *param2);
}


void
NodePath_C_set_tex_offset_v_ppff(NodePath *param0, TextureStage *param1, PN_stdfloat param2, PN_stdfloat param3) {
    (*param0).set_tex_offset(param1, param2, param3);
}


void
NodePath_C_set_tex_rotate_v_pppf(NodePath *param0, NodePath const *param1, TextureStage *param2, PN_stdfloat param3) {
    (*param0).set_tex_rotate(*param1, param2, param3);
}


void
NodePath_C_set_tex_rotate_v_ppf(NodePath *param0, TextureStage *param1, PN_stdfloat param2) {
    (*param0).set_tex_rotate(param1, param2);
}


void
NodePath_C_set_tex_scale_v_pppp(NodePath *param0, NodePath const *param1, TextureStage *param2, LVecBase2 const *param3) {
    (*param0).set_tex_scale(*param1, param2, *param3);
}


void
NodePath_C_set_tex_scale_v_pppp_1_v_pppp(NodePath *param0, NodePath const *param1, TextureStage *param2, LVecBase3 const *param3) {
    (*param0).set_tex_scale(*param1, param2, *param3);
}


void
NodePath_C_set_tex_scale_v_pppf(NodePath *param0, NodePath const *param1, TextureStage *param2, PN_stdfloat param3) {
    (*param0).set_tex_scale(*param1, param2, param3);
}


void
NodePath_C_set_tex_scale_v_pppff(NodePath *param0, NodePath const *param1, TextureStage *param2, PN_stdfloat param3, PN_stdfloat param4) {
    (*param0).set_tex_scale(*param1, param2, param3, param4);
}


void
NodePath_C_set_tex_scale_v_pppfff(NodePath *param0, NodePath const *param1, TextureStage *param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5) {
    (*param0).set_tex_scale(*param1, param2, param3, param4, param5);
}


void
NodePath_C_set_tex_scale_v_ppp(NodePath *param0, TextureStage *param1, LVecBase2 const *param2) {
    (*param0).set_tex_scale(param1, *param2);
}


void
NodePath_C_set_tex_scale_v_ppp_1_v_ppp(NodePath *param0, TextureStage *param1, LVecBase3 const *param2) {
    (*param0).set_tex_scale(param1, *param2);
}


void
NodePath_C_set_tex_scale_v_ppf(NodePath *param0, TextureStage *param1, PN_stdfloat param2) {
    (*param0).set_tex_scale(param1, param2);
}


void
NodePath_C_set_tex_scale_v_ppff(NodePath *param0, TextureStage *param1, PN_stdfloat param2, PN_stdfloat param3) {
    (*param0).set_tex_scale(param1, param2, param3);
}


void
NodePath_C_set_tex_scale_v_ppfff(NodePath *param0, TextureStage *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    (*param0).set_tex_scale(param1, param2, param3, param4);
}


LVecBase2 *
NodePath_C_get_tex_offset_p_ppp(NodePath const *param0, NodePath const *param1, TextureStage *param2) {
    return new LVecBase2((*param0).get_tex_offset(*param1, param2));
}


LVecBase2 *
NodePath_C_get_tex_offset_p_pp(NodePath const *param0, TextureStage *param1) {
    return new LVecBase2((*param0).get_tex_offset(param1));
}


PN_stdfloat
NodePath_C_get_tex_rotate_f_ppp(NodePath const *param0, NodePath const *param1, TextureStage *param2) {
    return (*param0).get_tex_rotate(*param1, param2);
}


PN_stdfloat
NodePath_C_get_tex_rotate_f_pp(NodePath const *param0, TextureStage *param1) {
    return (*param0).get_tex_rotate(param1);
}


LVecBase2 *
NodePath_C_get_tex_scale_p_ppp(NodePath const *param0, NodePath const *param1, TextureStage *param2) {
    return new LVecBase2((*param0).get_tex_scale(*param1, param2));
}


LVecBase2 *
NodePath_C_get_tex_scale_p_pp(NodePath const *param0, TextureStage *param1) {
    return new LVecBase2((*param0).get_tex_scale(param1));
}


void
NodePath_C_set_tex_pos_v_pppp(NodePath *param0, NodePath const *param1, TextureStage *param2, LVecBase3 const *param3) {
    (*param0).set_tex_pos(*param1, param2, *param3);
}


void
NodePath_C_set_tex_pos_v_pppfff(NodePath *param0, NodePath const *param1, TextureStage *param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5) {
    (*param0).set_tex_pos(*param1, param2, param3, param4, param5);
}


void
NodePath_C_set_tex_pos_v_ppp(NodePath *param0, TextureStage *param1, LVecBase3 const *param2) {
    (*param0).set_tex_pos(param1, *param2);
}


void
NodePath_C_set_tex_pos_v_ppfff(NodePath *param0, TextureStage *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    (*param0).set_tex_pos(param1, param2, param3, param4);
}


void
NodePath_C_set_tex_hpr_v_pppp(NodePath *param0, NodePath const *param1, TextureStage *param2, LVecBase3 const *param3) {
    (*param0).set_tex_hpr(*param1, param2, *param3);
}


void
NodePath_C_set_tex_hpr_v_pppfff(NodePath *param0, NodePath const *param1, TextureStage *param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5) {
    (*param0).set_tex_hpr(*param1, param2, param3, param4, param5);
}


void
NodePath_C_set_tex_hpr_v_ppp(NodePath *param0, TextureStage *param1, LVecBase3 const *param2) {
    (*param0).set_tex_hpr(param1, *param2);
}


void
NodePath_C_set_tex_hpr_v_ppfff(NodePath *param0, TextureStage *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    (*param0).set_tex_hpr(param1, param2, param3, param4);
}


LVecBase3 *
NodePath_C_get_tex_pos_p_ppp(NodePath const *param0, NodePath const *param1, TextureStage *param2) {
    return new LVecBase3((*param0).get_tex_pos(*param1, param2));
}


LVecBase3 *
NodePath_C_get_tex_pos_p_pp(NodePath const *param0, TextureStage *param1) {
    return new LVecBase3((*param0).get_tex_pos(param1));
}


LVecBase3 *
NodePath_C_get_tex_hpr_p_ppp(NodePath const *param0, NodePath const *param1, TextureStage *param2) {
    return new LVecBase3((*param0).get_tex_hpr(*param1, param2));
}


LVecBase3 *
NodePath_C_get_tex_hpr_p_pp(NodePath const *param0, TextureStage *param1) {
    return new LVecBase3((*param0).get_tex_hpr(param1));
}


LVecBase3 *
NodePath_C_get_tex_scale_3d_p_ppp(NodePath const *param0, NodePath const *param1, TextureStage *param2) {
    return new LVecBase3((*param0).get_tex_scale_3d(*param1, param2));
}


LVecBase3 *
NodePath_C_get_tex_scale_3d_p_pp(NodePath const *param0, TextureStage *param1) {
    return new LVecBase3((*param0).get_tex_scale_3d(param1));
}


void
NodePath_C_set_tex_gen_v_ppppi(NodePath *param0, TextureStage *param1, RenderAttrib::TexGenMode param2, LTexCoord3 const *param3, int param4) {
    (*param0).set_tex_gen(param1, param2, *param3, param4);
}


void
NodePath_C_set_tex_gen_v_pppp(NodePath *param0, TextureStage *param1, RenderAttrib::TexGenMode param2, LTexCoord3 const *param3) {
    (*param0).set_tex_gen(param1, param2, *param3);
}


void
NodePath_C_set_tex_gen_v_pppi(NodePath *param0, TextureStage *param1, RenderAttrib::TexGenMode param2, int param3) {
    (*param0).set_tex_gen(param1, param2, param3);
}


void
NodePath_C_set_tex_gen_v_ppp(NodePath *param0, TextureStage *param1, RenderAttrib::TexGenMode param2) {
    (*param0).set_tex_gen(param1, param2);
}


void
NodePath_C_clear_tex_gen_v_p(NodePath *param0) {
    (*param0).clear_tex_gen();
}


void
NodePath_C_clear_tex_gen_v_pp(NodePath *param0, TextureStage *param1) {
    (*param0).clear_tex_gen(param1);
}


bool
NodePath_C_has_tex_gen_B_pp(NodePath const *param0, TextureStage *param1) {
    return (*param0).has_tex_gen(param1);
}


RenderAttrib::TexGenMode
NodePath_C_get_tex_gen_p_pp(NodePath const *param0, TextureStage *param1) {
    return (*param0).get_tex_gen(param1);
}


void
NodePath_C_set_tex_projector_v_ppppi(NodePath *param0, TextureStage *param1, NodePath const *param2, NodePath const *param3, int param4) {
    (*param0).set_tex_projector(param1, *param2, *param3, param4);
}


void
NodePath_C_set_tex_projector_v_pppp(NodePath *param0, TextureStage *param1, NodePath const *param2, NodePath const *param3) {
    (*param0).set_tex_projector(param1, *param2, *param3);
}


void
NodePath_C_clear_tex_projector_v_p(NodePath *param0) {
    (*param0).clear_tex_projector();
}


void
NodePath_C_clear_tex_projector_v_pp(NodePath *param0, TextureStage *param1) {
    (*param0).clear_tex_projector(param1);
}


bool
NodePath_C_has_tex_projector_B_pp(NodePath const *param0, TextureStage *param1) {
    return (*param0).has_tex_projector(param1);
}


NodePath *
NodePath_C_get_tex_projector_from_p_pp(NodePath const *param0, TextureStage *param1) {
    return new NodePath((*param0).get_tex_projector_from(param1));
}


NodePath *
NodePath_C_get_tex_projector_to_p_pp(NodePath const *param0, TextureStage *param1) {
    return new NodePath((*param0).get_tex_projector_to(param1));
}


void
NodePath_C_project_texture_v_pppp(NodePath *param0, TextureStage *param1, Texture *param2, NodePath const *param3) {
    (*param0).project_texture(param1, param2, *param3);
}


void
NodePath_C_clear_project_texture_v_pp(NodePath *param0, TextureStage *param1) {
    (*param0).clear_project_texture(param1);
}


bool
NodePath_C_has_texcoord_B_ps(NodePath const *param0, char const *param1) {
    return (*param0).has_texcoord(std::string(param1));
}


bool
NodePath_C_has_vertex_column_B_ps(NodePath const *param0, InternalName const *param1) {
    return (*param0).has_vertex_column(param1);
}


InternalNameCollection *
NodePath_C_find_all_vertex_columns_p_p(NodePath const *param0) {
    return new InternalNameCollection((*param0).find_all_vertex_columns());
}


InternalNameCollection *
NodePath_C_find_all_vertex_columns_p_ps(NodePath const *param0, char const *param1) {
    return new InternalNameCollection((*param0).find_all_vertex_columns(std::string(param1)));
}


InternalNameCollection *
NodePath_C_find_all_texcoords_p_p(NodePath const *param0) {
    return new InternalNameCollection((*param0).find_all_texcoords());
}


InternalNameCollection *
NodePath_C_find_all_texcoords_p_ps(NodePath const *param0, char const *param1) {
    return new InternalNameCollection((*param0).find_all_texcoords(std::string(param1)));
}


Texture *
NodePath_C_find_texture_p_pp(NodePath const *param0, TextureStage *param1) {
    return (*param0).find_texture(param1);
}


Texture *
NodePath_C_find_texture_p_ps(NodePath const *param0, char const *param1) {
    return (*param0).find_texture(std::string(param1));
}


TextureCollection *
NodePath_C_find_all_textures_p_p(NodePath const *param0) {
    return new TextureCollection((*param0).find_all_textures());
}


TextureCollection *
NodePath_C_find_all_textures_p_pp(NodePath const *param0, TextureStage *param1) {
    return new TextureCollection((*param0).find_all_textures(param1));
}


TextureCollection *
NodePath_C_find_all_textures_p_ps(NodePath const *param0, char const *param1) {
    return new TextureCollection((*param0).find_all_textures(std::string(param1)));
}


TextureStage *
NodePath_C_find_texture_stage_p_ps(NodePath const *param0, char const *param1) {
    return (*param0).find_texture_stage(std::string(param1));
}


TextureStageCollection *
NodePath_C_find_all_texture_stages_p_p(NodePath const *param0) {
    return new TextureStageCollection((*param0).find_all_texture_stages());
}


TextureStageCollection *
NodePath_C_find_all_texture_stages_p_ps(NodePath const *param0, char const *param1) {
    return new TextureStageCollection((*param0).find_all_texture_stages(std::string(param1)));
}


void
NodePath_C_unify_texture_stages_v_pp(NodePath *param0, TextureStage *param1) {
    (*param0).unify_texture_stages(param1);
}


Material *
NodePath_C_find_material_p_ps(NodePath const *param0, char const *param1) {
    return (*param0).find_material(std::string(param1));
}


MaterialCollection *
NodePath_C_find_all_materials_p_p(NodePath const *param0) {
    return new MaterialCollection((*param0).find_all_materials());
}


MaterialCollection *
NodePath_C_find_all_materials_p_ps(NodePath const *param0, char const *param1) {
    return new MaterialCollection((*param0).find_all_materials(std::string(param1)));
}


void
NodePath_C_set_material_v_ppi(NodePath *param0, Material *param1, int param2) {
    (*param0).set_material(param1, param2);
}


void
NodePath_C_set_material_v_pp(NodePath *param0, Material *param1) {
    (*param0).set_material(param1);
}


void
NodePath_C_set_material_off_v_pi(NodePath *param0, int param1) {
    (*param0).set_material_off(param1);
}


void
NodePath_C_set_material_off_v_p(NodePath *param0) {
    (*param0).set_material_off();
}


void
NodePath_C_clear_material_v_p(NodePath *param0) {
    (*param0).clear_material();
}


bool
NodePath_C_has_material_B_p(NodePath const *param0) {
    return (*param0).has_material();
}


PointerTo< Material > *
NodePath_C_get_material_p_p(NodePath const *param0) {
    return new PointerTo< Material >((*param0).get_material());
}


void
NodePath_C_replace_material_v_ppp(NodePath *param0, Material *param1, Material *param2) {
    (*param0).replace_material(param1, param2);
}


void
NodePath_C_set_fog_v_ppi(NodePath *param0, Fog *param1, int param2) {
    (*param0).set_fog(param1, param2);
}


void
NodePath_C_set_fog_v_pp(NodePath *param0, Fog *param1) {
    (*param0).set_fog(param1);
}


void
NodePath_C_set_fog_off_v_pi(NodePath *param0, int param1) {
    (*param0).set_fog_off(param1);
}


void
NodePath_C_set_fog_off_v_p(NodePath *param0) {
    (*param0).set_fog_off();
}


void
NodePath_C_clear_fog_v_p(NodePath *param0) {
    (*param0).clear_fog();
}


bool
NodePath_C_has_fog_B_p(NodePath const *param0) {
    return (*param0).has_fog();
}


bool
NodePath_C_has_fog_off_B_p(NodePath const *param0) {
    return (*param0).has_fog_off();
}


Fog *
NodePath_C_get_fog_p_p(NodePath const *param0) {
    return (*param0).get_fog();
}


void
NodePath_C_set_render_mode_wireframe_v_pi(NodePath *param0, int param1) {
    (*param0).set_render_mode_wireframe(param1);
}


void
NodePath_C_set_render_mode_wireframe_v_p(NodePath *param0) {
    (*param0).set_render_mode_wireframe();
}


void
NodePath_C_set_render_mode_filled_v_pi(NodePath *param0, int param1) {
    (*param0).set_render_mode_filled(param1);
}


void
NodePath_C_set_render_mode_filled_v_p(NodePath *param0) {
    (*param0).set_render_mode_filled();
}


void
NodePath_C_set_render_mode_filled_wireframe_v_ppi(NodePath *param0, LColor const *param1, int param2) {
    (*param0).set_render_mode_filled_wireframe(*param1, param2);
}


void
NodePath_C_set_render_mode_filled_wireframe_v_pp(NodePath *param0, LColor const *param1) {
    (*param0).set_render_mode_filled_wireframe(*param1);
}


void
NodePath_C_set_render_mode_thickness_v_pfi(NodePath *param0, PN_stdfloat param1, int param2) {
    (*param0).set_render_mode_thickness(param1, param2);
}


void
NodePath_C_set_render_mode_thickness_v_pf(NodePath *param0, PN_stdfloat param1) {
    (*param0).set_render_mode_thickness(param1);
}


void
NodePath_C_set_render_mode_perspective_v_pBi(NodePath *param0, bool param1, int param2) {
    (*param0).set_render_mode_perspective(param1, param2);
}


void
NodePath_C_set_render_mode_perspective_v_pB(NodePath *param0, bool param1) {
    (*param0).set_render_mode_perspective(param1);
}


void
NodePath_C_set_render_mode_v_ppfi(NodePath *param0, RenderModeAttrib::Mode param1, PN_stdfloat param2, int param3) {
    (*param0).set_render_mode(param1, param2, param3);
}


void
NodePath_C_set_render_mode_v_ppf(NodePath *param0, RenderModeAttrib::Mode param1, PN_stdfloat param2) {
    (*param0).set_render_mode(param1, param2);
}


void
NodePath_C_clear_render_mode_v_p(NodePath *param0) {
    (*param0).clear_render_mode();
}


bool
NodePath_C_has_render_mode_B_p(NodePath const *param0) {
    return (*param0).has_render_mode();
}


RenderModeAttrib::Mode
NodePath_C_get_render_mode_p_p(NodePath const *param0) {
    return (*param0).get_render_mode();
}


PN_stdfloat
NodePath_C_get_render_mode_thickness_f_p(NodePath const *param0) {
    return (*param0).get_render_mode_thickness();
}


bool
NodePath_C_get_render_mode_perspective_B_p(NodePath const *param0) {
    return (*param0).get_render_mode_perspective();
}


void
NodePath_C_set_two_sided_v_pBi(NodePath *param0, bool param1, int param2) {
    (*param0).set_two_sided(param1, param2);
}


void
NodePath_C_set_two_sided_v_pB(NodePath *param0, bool param1) {
    (*param0).set_two_sided(param1);
}


void
NodePath_C_clear_two_sided_v_p(NodePath *param0) {
    (*param0).clear_two_sided();
}


bool
NodePath_C_has_two_sided_B_p(NodePath const *param0) {
    return (*param0).has_two_sided();
}


bool
NodePath_C_get_two_sided_B_p(NodePath const *param0) {
    return (*param0).get_two_sided();
}


void
NodePath_C_set_depth_test_v_pBi(NodePath *param0, bool param1, int param2) {
    (*param0).set_depth_test(param1, param2);
}


void
NodePath_C_set_depth_test_v_pB(NodePath *param0, bool param1) {
    (*param0).set_depth_test(param1);
}


void
NodePath_C_clear_depth_test_v_p(NodePath *param0) {
    (*param0).clear_depth_test();
}


bool
NodePath_C_has_depth_test_B_p(NodePath const *param0) {
    return (*param0).has_depth_test();
}


bool
NodePath_C_get_depth_test_B_p(NodePath const *param0) {
    return (*param0).get_depth_test();
}


void
NodePath_C_set_depth_write_v_pBi(NodePath *param0, bool param1, int param2) {
    (*param0).set_depth_write(param1, param2);
}


void
NodePath_C_set_depth_write_v_pB(NodePath *param0, bool param1) {
    (*param0).set_depth_write(param1);
}


void
NodePath_C_clear_depth_write_v_p(NodePath *param0) {
    (*param0).clear_depth_write();
}


bool
NodePath_C_has_depth_write_B_p(NodePath const *param0) {
    return (*param0).has_depth_write();
}


bool
NodePath_C_get_depth_write_B_p(NodePath const *param0) {
    return (*param0).get_depth_write();
}


void
NodePath_C_set_depth_offset_v_pii(NodePath *param0, int param1, int param2) {
    (*param0).set_depth_offset(param1, param2);
}


void
NodePath_C_set_depth_offset_v_pi(NodePath *param0, int param1) {
    (*param0).set_depth_offset(param1);
}


void
NodePath_C_clear_depth_offset_v_p(NodePath *param0) {
    (*param0).clear_depth_offset();
}


bool
NodePath_C_has_depth_offset_B_p(NodePath const *param0) {
    return (*param0).has_depth_offset();
}


int
NodePath_C_get_depth_offset_i_p(NodePath const *param0) {
    return (*param0).get_depth_offset();
}


void
NodePath_C_do_billboard_axis_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2) {
    (*param0).do_billboard_axis(*param1, param2);
}


void
NodePath_C_do_billboard_point_eye_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2) {
    (*param0).do_billboard_point_eye(*param1, param2);
}


void
NodePath_C_do_billboard_point_world_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2) {
    (*param0).do_billboard_point_world(*param1, param2);
}


void
NodePath_C_set_billboard_axis_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2) {
    (*param0).set_billboard_axis(*param1, param2);
}


void
NodePath_C_set_billboard_axis_v_pf(NodePath *param0, PN_stdfloat param1) {
    (*param0).set_billboard_axis(param1);
}


void
NodePath_C_set_billboard_axis_v_p(NodePath *param0) {
    (*param0).set_billboard_axis();
}


void
NodePath_C_set_billboard_point_eye_v_ppfB(NodePath *param0, NodePath const *param1, PN_stdfloat param2, bool param3) {
    (*param0).set_billboard_point_eye(*param1, param2, param3);
}


void
NodePath_C_set_billboard_point_eye_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2) {
    (*param0).set_billboard_point_eye(*param1, param2);
}


void
NodePath_C_set_billboard_point_eye_v_pfB(NodePath *param0, PN_stdfloat param1, bool param2) {
    (*param0).set_billboard_point_eye(param1, param2);
}


void
NodePath_C_set_billboard_point_eye_v_pf(NodePath *param0, PN_stdfloat param1) {
    (*param0).set_billboard_point_eye(param1);
}


void
NodePath_C_set_billboard_point_eye_v_p(NodePath *param0) {
    (*param0).set_billboard_point_eye();
}


void
NodePath_C_set_billboard_point_world_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2) {
    (*param0).set_billboard_point_world(*param1, param2);
}


void
NodePath_C_set_billboard_point_world_v_pf(NodePath *param0, PN_stdfloat param1) {
    (*param0).set_billboard_point_world(param1);
}


void
NodePath_C_set_billboard_point_world_v_p(NodePath *param0) {
    (*param0).set_billboard_point_world();
}


void
NodePath_C_clear_billboard_v_p(NodePath *param0) {
    (*param0).clear_billboard();
}


bool
NodePath_C_has_billboard_B_p(NodePath const *param0) {
    return (*param0).has_billboard();
}


void
NodePath_C_set_compass_v_pp(NodePath *param0, NodePath const *param1) {
    (*param0).set_compass(*param1);
}


void
NodePath_C_set_compass_v_p(NodePath *param0) {
    (*param0).set_compass();
}


void
NodePath_C_clear_compass_v_p(NodePath *param0) {
    (*param0).clear_compass();
}


bool
NodePath_C_has_compass_B_p(NodePath const *param0) {
    return (*param0).has_compass();
}


void
NodePath_C_set_transparency_v_ppi(NodePath *param0, TransparencyAttrib::Mode param1, int param2) {
    (*param0).set_transparency(param1, param2);
}


void
NodePath_C_set_transparency_v_pp(NodePath *param0, TransparencyAttrib::Mode param1) {
    (*param0).set_transparency(param1);
}


void
NodePath_C_clear_transparency_v_p(NodePath *param0) {
    (*param0).clear_transparency();
}


bool
NodePath_C_has_transparency_B_p(NodePath const *param0) {
    return (*param0).has_transparency();
}


TransparencyAttrib::Mode
NodePath_C_get_transparency_p_p(NodePath const *param0) {
    return (*param0).get_transparency();
}


void
NodePath_C_set_logic_op_v_ppi(NodePath *param0, LogicOpAttrib::Operation param1, int param2) {
    (*param0).set_logic_op(param1, param2);
}


void
NodePath_C_set_logic_op_v_pp(NodePath *param0, LogicOpAttrib::Operation param1) {
    (*param0).set_logic_op(param1);
}


void
NodePath_C_clear_logic_op_v_p(NodePath *param0) {
    (*param0).clear_logic_op();
}


bool
NodePath_C_has_logic_op_B_p(NodePath const *param0) {
    return (*param0).has_logic_op();
}


LogicOpAttrib::Operation
NodePath_C_get_logic_op_p_p(NodePath const *param0) {
    return (*param0).get_logic_op();
}


void
NodePath_C_set_antialias_v_ppi(NodePath *param0, unsigned short int param1, int param2) {
    (*param0).set_antialias(param1, param2);
}


void
NodePath_C_set_antialias_v_pp(NodePath *param0, unsigned short int param1) {
    (*param0).set_antialias(param1);
}


void
NodePath_C_clear_antialias_v_p(NodePath *param0) {
    (*param0).clear_antialias();
}


bool
NodePath_C_has_antialias_B_p(NodePath const *param0) {
    return (*param0).has_antialias();
}


unsigned short int
NodePath_C_get_antialias_p_p(NodePath const *param0) {
    return (*param0).get_antialias();
}


bool
NodePath_C_has_audio_volume_B_p(NodePath const *param0) {
    return (*param0).has_audio_volume();
}


void
NodePath_C_clear_audio_volume_v_p(NodePath *param0) {
    (*param0).clear_audio_volume();
}


void
NodePath_C_set_audio_volume_v_pfi(NodePath *param0, PN_stdfloat param1, int param2) {
    (*param0).set_audio_volume(param1, param2);
}


void
NodePath_C_set_audio_volume_v_pf(NodePath *param0, PN_stdfloat param1) {
    (*param0).set_audio_volume(param1);
}


void
NodePath_C_set_audio_volume_off_v_pi(NodePath *param0, int param1) {
    (*param0).set_audio_volume_off(param1);
}


void
NodePath_C_set_audio_volume_off_v_p(NodePath *param0) {
    (*param0).set_audio_volume_off();
}


PN_stdfloat
NodePath_C_get_audio_volume_f_p(NodePath const *param0) {
    return (*param0).get_audio_volume();
}


PN_stdfloat
NodePath_C_get_net_audio_volume_f_p(NodePath const *param0) {
    return (*param0).get_net_audio_volume();
}


void
NodePath_C_adjust_all_priorities_v_pi(NodePath *param0, int param1) {
    (*param0).adjust_all_priorities(param1);
}


void
NodePath_C_show_v_p(NodePath *param0) {
    (*param0).show();
}


void
NodePath_C_show_v_pp(NodePath *param0, DrawMask *param1) {
    (*param0).show(*param1);
}


void
NodePath_C_show_through_v_p(NodePath *param0) {
    (*param0).show_through();
}


void
NodePath_C_show_through_v_pp(NodePath *param0, DrawMask *param1) {
    (*param0).show_through(*param1);
}


void
NodePath_C_hide_v_p(NodePath *param0) {
    (*param0).hide();
}


void
NodePath_C_hide_v_pp(NodePath *param0, DrawMask *param1) {
    (*param0).hide(*param1);
}


bool
NodePath_C_is_hidden_B_pp(NodePath const *param0, DrawMask *param1) {
    return (*param0).is_hidden(*param1);
}


bool
NodePath_C_is_hidden_B_p(NodePath const *param0) {
    return (*param0).is_hidden();
}


NodePath *
NodePath_C_get_hidden_ancestor_p_ppp(NodePath const *param0, DrawMask *param1, Thread *param2) {
    return new NodePath((*param0).get_hidden_ancestor(*param1, param2));
}


NodePath *
NodePath_C_get_hidden_ancestor_p_pp(NodePath const *param0, DrawMask *param1) {
    return new NodePath((*param0).get_hidden_ancestor(*param1));
}


NodePath *
NodePath_C_get_hidden_ancestor_p_p(NodePath const *param0) {
    return new NodePath((*param0).get_hidden_ancestor());
}


void
NodePath_C_stash_v_pip(NodePath *param0, int param1, Thread *param2) {
    (*param0).stash(param1, param2);
}


void
NodePath_C_stash_v_pi(NodePath *param0, int param1) {
    (*param0).stash(param1);
}


void
NodePath_C_stash_v_p(NodePath *param0) {
    (*param0).stash();
}


void
NodePath_C_unstash_v_pip(NodePath *param0, int param1, Thread *param2) {
    (*param0).unstash(param1, param2);
}


void
NodePath_C_unstash_v_pi(NodePath *param0, int param1) {
    (*param0).unstash(param1);
}


void
NodePath_C_unstash_v_p(NodePath *param0) {
    (*param0).unstash();
}


void
NodePath_C_unstash_all_v_pp(NodePath *param0, Thread *param1) {
    (*param0).unstash_all(param1);
}


void
NodePath_C_unstash_all_v_p(NodePath *param0) {
    (*param0).unstash_all();
}


bool
NodePath_C_is_stashed_B_p(NodePath const *param0) {
    return (*param0).is_stashed();
}


NodePath *
NodePath_C_get_stashed_ancestor_p_pp(NodePath const *param0, Thread *param1) {
    return new NodePath((*param0).get_stashed_ancestor(param1));
}


NodePath *
NodePath_C_get_stashed_ancestor_p_p(NodePath const *param0) {
    return new NodePath((*param0).get_stashed_ancestor());
}


CollideMask *
NodePath_C_get_collide_mask_p_p(NodePath const *param0) {
    return new CollideMask((*param0).get_collide_mask());
}


void
NodePath_C_set_collide_mask_v_pppi(NodePath *param0, CollideMask *param1, CollideMask *param2, int param3) {
    (*param0).set_collide_mask(*param1, *param2, TypeHandle::from_index(param3));
}


void
NodePath_C_set_collide_mask_v_ppp(NodePath *param0, CollideMask *param1, CollideMask *param2) {
    (*param0).set_collide_mask(*param1, *param2);
}


void
NodePath_C_set_collide_mask_v_pp(NodePath *param0, CollideMask *param1) {
    (*param0).set_collide_mask(*param1);
}


int
NodePath_C_compare_to_i_pp(NodePath const *param0, NodePath const *param1) {
    return (*param0).compare_to(*param1);
}


int
NodePath_C_compare_to_i_pp_1_i_pp(NodePath const *param0, WeakNodePath const *param1) {
    return (*param0).compare_to(*param1);
}


bool
NodePath_C_verify_complete_B_pp(NodePath const *param0, Thread *param1) {
    return (*param0).verify_complete(param1);
}


bool
NodePath_C_verify_complete_B_p(NodePath const *param0) {
    return (*param0).verify_complete();
}


void
NodePath_C_premunge_scene_v_pp(NodePath *param0, GraphicsStateGuardianBase *param1) {
    (*param0).premunge_scene(param1);
}


void
NodePath_C_premunge_scene_v_p(NodePath *param0) {
    (*param0).premunge_scene();
}


void
NodePath_C_prepare_scene_v_pp(NodePath *param0, GraphicsStateGuardianBase *param1) {
    (*param0).prepare_scene(param1);
}


void
NodePath_C_show_bounds_v_p(NodePath *param0) {
    (*param0).show_bounds();
}


void
NodePath_C_show_tight_bounds_v_p(NodePath *param0) {
    (*param0).show_tight_bounds();
}


void
NodePath_C_hide_bounds_v_p(NodePath *param0) {
    (*param0).hide_bounds();
}


PointerTo< BoundingVolume > *
NodePath_C_get_bounds_p_pp(NodePath const *param0, Thread *param1) {
    return new PointerTo< BoundingVolume >((*param0).get_bounds(param1));
}


PointerTo< BoundingVolume > *
NodePath_C_get_bounds_p_p(NodePath const *param0) {
    return new PointerTo< BoundingVolume >((*param0).get_bounds());
}


void
NodePath_C_force_recompute_bounds_v_p(NodePath *param0) {
    (*param0).force_recompute_bounds();
}


void
NodePath_C_write_bounds_v_pp(NodePath const *param0, std::ostream *param1) {
    (*param0).write_bounds(*param1);
}


bool
NodePath_C_calc_tight_bounds_B_ppppp(NodePath const *param0, LPoint3 *param1, LPoint3 *param2, NodePath const *param3, Thread *param4) {
    return (*param0).calc_tight_bounds(*param1, *param2, *param3, param4);
}


bool
NodePath_C_calc_tight_bounds_B_pppp(NodePath const *param0, LPoint3 *param1, LPoint3 *param2, NodePath const *param3) {
    return (*param0).calc_tight_bounds(*param1, *param2, *param3);
}


bool
NodePath_C_calc_tight_bounds_B_ppp(NodePath const *param0, LPoint3 *param1, LPoint3 *param2) {
    return (*param0).calc_tight_bounds(*param1, *param2);
}


int
NodePath_C_flatten_light_i_p(NodePath *param0) {
    return (*param0).flatten_light();
}


int
NodePath_C_flatten_medium_i_p(NodePath *param0) {
    return (*param0).flatten_medium();
}


int
NodePath_C_flatten_strong_i_p(NodePath *param0) {
    return (*param0).flatten_strong();
}


void
NodePath_C_apply_texture_colors_v_p(NodePath *param0) {
    (*param0).apply_texture_colors();
}


int
NodePath_C_clear_model_nodes_i_p(NodePath *param0) {
    return (*param0).clear_model_nodes();
}


void
NodePath_C_set_tag_v_pss(NodePath *param0, char const *param1, char const *param2) {
    (*param0).set_tag(std::string(param1), std::string(param2));
}


char const *
NodePath_C_get_tag_s_ps(NodePath const *param0, char const *param1) {
    static std::string string_holder = (*param0).get_tag(std::string(param1));
    return string_holder.c_str();
}


void
NodePath_C_get_tag_keys_v_pp(NodePath const *param0, vector_string *param1) {
    (*param0).get_tag_keys(*param1);
}


bool
NodePath_C_has_tag_B_ps(NodePath const *param0, char const *param1) {
    return (*param0).has_tag(std::string(param1));
}


void
NodePath_C_clear_tag_v_ps(NodePath *param0, char const *param1) {
    (*param0).clear_tag(std::string(param1));
}


char const *
NodePath_C_get_net_tag_s_ps(NodePath const *param0, char const *param1) {
    static std::string string_holder = (*param0).get_net_tag(std::string(param1));
    return string_holder.c_str();
}


bool
NodePath_C_has_net_tag_B_ps(NodePath const *param0, char const *param1) {
    return (*param0).has_net_tag(std::string(param1));
}


NodePath *
NodePath_C_find_net_tag_p_ps(NodePath const *param0, char const *param1) {
    return new NodePath((*param0).find_net_tag(std::string(param1)));
}


void
NodePath_C_list_tags_v_p(NodePath const *param0) {
    (*param0).list_tags();
}


void
NodePath_C_set_name_v_ps(NodePath *param0, char const *param1) {
    (*param0).set_name(std::string(param1));
}


char const *
NodePath_C_get_name_s_p(NodePath const *param0) {
    static std::string string_holder = (*param0).get_name();
    return string_holder.c_str();
}


bool
NodePath_C_write_bam_file_B_pp(NodePath const *param0, Filename const *param1) {
    return (*param0).write_bam_file(*param1);
}


bool
NodePath_C_write_bam_stream_B_pp(NodePath const *param0, std::ostream *param1) {
    return (*param0).write_bam_stream(*param1);
}


vector_uchar
NodePath_C_encode_to_bam_stream_p_p(NodePath const *param0) {
    return (*param0).encode_to_bam_stream();
}


bool
NodePath_C_encode_to_bam_stream_B_ppp(NodePath const *param0, vector_uchar *param1, BamWriter *param2) {
    return (*param0).encode_to_bam_stream(*param1, param2);
}


bool
NodePath_C_encode_to_bam_stream_B_pp(NodePath const *param0, vector_uchar *param1) {
    return (*param0).encode_to_bam_stream(*param1);
}


NodePath *
NodePath_C_decode_from_bam_stream_p_pp(vector_uchar param0, BamReader *param1) {
    return new NodePath(NodePath::decode_from_bam_stream(param0, param1));
}


NodePath *
NodePath_C_decode_from_bam_stream_p_p(vector_uchar param0) {
    return new NodePath(NodePath::decode_from_bam_stream(param0));
}


void
NodePath_C_write_datagram_v_ppp(NodePath const *param0, BamWriter *param1, Datagram *param2) {
    (*param0).write_datagram(param1, *param2);
}


void
NodePath_C_fillin_v_ppp(NodePath *param0, DatagramIterator *param1, BamReader *param2) {
    (*param0).fillin(*param1, param2);
}


int
NodePath_C_get_class_type_i_v() {
    return (NodePath::get_class_type()).get_index();
}


void
NodePath_C_init_type_v_v() {
    NodePath::init_type();
}


// NodePathCollection


NodePathCollection *
NodePathCollection_C_ctor_p_v() {
    return new NodePathCollection();
}


NodePathCollection *
NodePathCollection_C_ctor_p_p(NodePathCollection const *param0) {
    return new NodePathCollection(*param0);
}


void
NodePathCollection_C_add_path_v_pp(NodePathCollection *param0, NodePath const *param1) {
    (*param0).add_path(*param1);
}


bool
NodePathCollection_C_remove_path_B_pp(NodePathCollection *param0, NodePath const *param1) {
    return (*param0).remove_path(*param1);
}


void
NodePathCollection_C_add_paths_from_v_pp(NodePathCollection *param0, NodePathCollection const *param1) {
    (*param0).add_paths_from(*param1);
}


void
NodePathCollection_C_remove_paths_from_v_pp(NodePathCollection *param0, NodePathCollection const *param1) {
    (*param0).remove_paths_from(*param1);
}


void
NodePathCollection_C_remove_duplicate_paths_v_p(NodePathCollection *param0) {
    (*param0).remove_duplicate_paths();
}


bool
NodePathCollection_C_has_path_B_pp(NodePathCollection const *param0, NodePath const *param1) {
    return (*param0).has_path(*param1);
}


void
NodePathCollection_C_clear_v_p(NodePathCollection *param0) {
    (*param0).clear();
}


void
NodePathCollection_C_reserve_v_pp(NodePathCollection *param0, std::size_t param1) {
    (*param0).reserve(param1);
}


bool
NodePathCollection_C_is_empty_B_p(NodePathCollection const *param0) {
    return (*param0).is_empty();
}


int
NodePathCollection_C_get_num_paths_i_p(NodePathCollection const *param0) {
    return (*param0).get_num_paths();
}


NodePath *
NodePathCollection_C_get_path_p_pi(NodePathCollection const *param0, int param1) {
    return new NodePath((*param0).get_path(param1));
}


std::size_t
NodePathCollection_C_size_p_p(NodePathCollection const *param0) {
    return (*param0).size();
}


void
NodePathCollection_C_append_v_pp(NodePathCollection *param0, NodePath const *param1) {
    (*param0).append(*param1);
}


void
NodePathCollection_C_extend_v_pp(NodePathCollection *param0, NodePathCollection const *param1) {
    (*param0).extend(*param1);
}


void
NodePathCollection_C_ls_v_p(NodePathCollection const *param0) {
    (*param0).ls();
}


void
NodePathCollection_C_ls_v_ppi(NodePathCollection const *param0, std::ostream *param1, int param2) {
    (*param0).ls(*param1, param2);
}


void
NodePathCollection_C_ls_v_pp(NodePathCollection const *param0, std::ostream *param1) {
    (*param0).ls(*param1);
}


NodePathCollection *
NodePathCollection_C_find_all_matches_p_ps(NodePathCollection const *param0, char const *param1) {
    return new NodePathCollection((*param0).find_all_matches(std::string(param1)));
}


void
NodePathCollection_C_reparent_to_v_pp(NodePathCollection *param0, NodePath const *param1) {
    (*param0).reparent_to(*param1);
}


void
NodePathCollection_C_wrt_reparent_to_v_pp(NodePathCollection *param0, NodePath const *param1) {
    (*param0).wrt_reparent_to(*param1);
}


void
NodePathCollection_C_show_v_p(NodePathCollection *param0) {
    (*param0).show();
}


void
NodePathCollection_C_hide_v_p(NodePathCollection *param0) {
    (*param0).hide();
}


void
NodePathCollection_C_stash_v_p(NodePathCollection *param0) {
    (*param0).stash();
}


void
NodePathCollection_C_unstash_v_p(NodePathCollection *param0) {
    (*param0).unstash();
}


void
NodePathCollection_C_detach_v_p(NodePathCollection *param0) {
    (*param0).detach();
}


CollideMask *
NodePathCollection_C_get_collide_mask_p_p(NodePathCollection const *param0) {
    return new CollideMask((*param0).get_collide_mask());
}


void
NodePathCollection_C_set_collide_mask_v_pppi(NodePathCollection *param0, CollideMask *param1, CollideMask *param2, int param3) {
    (*param0).set_collide_mask(*param1, *param2, TypeHandle::from_index(param3));
}


void
NodePathCollection_C_set_collide_mask_v_ppp(NodePathCollection *param0, CollideMask *param1, CollideMask *param2) {
    (*param0).set_collide_mask(*param1, *param2);
}


void
NodePathCollection_C_set_collide_mask_v_pp(NodePathCollection *param0, CollideMask *param1) {
    (*param0).set_collide_mask(*param1);
}


bool
NodePathCollection_C_calc_tight_bounds_B_ppp(NodePathCollection const *param0, LPoint3 *param1, LPoint3 *param2) {
    return (*param0).calc_tight_bounds(*param1, *param2);
}


void
NodePathCollection_C_set_texture_v_ppi(NodePathCollection *param0, Texture *param1, int param2) {
    (*param0).set_texture(param1, param2);
}


void
NodePathCollection_C_set_texture_v_pp(NodePathCollection *param0, Texture *param1) {
    (*param0).set_texture(param1);
}


void
NodePathCollection_C_set_texture_v_pppi(NodePathCollection *param0, TextureStage *param1, Texture *param2, int param3) {
    (*param0).set_texture(param1, param2, param3);
}


void
NodePathCollection_C_set_texture_v_ppp(NodePathCollection *param0, TextureStage *param1, Texture *param2) {
    (*param0).set_texture(param1, param2);
}


void
NodePathCollection_C_set_texture_off_v_ppi(NodePathCollection *param0, TextureStage *param1, int param2) {
    (*param0).set_texture_off(param1, param2);
}


void
NodePathCollection_C_set_texture_off_v_pp(NodePathCollection *param0, TextureStage *param1) {
    (*param0).set_texture_off(param1);
}


void
NodePathCollection_C_set_texture_off_v_pi(NodePathCollection *param0, int param1) {
    (*param0).set_texture_off(param1);
}


void
NodePathCollection_C_set_texture_off_v_p(NodePathCollection *param0) {
    (*param0).set_texture_off();
}


void
NodePathCollection_C_set_color_v_ppi(NodePathCollection *param0, LColor const *param1, int param2) {
    (*param0).set_color(*param1, param2);
}


void
NodePathCollection_C_set_color_v_pp(NodePathCollection *param0, LColor const *param1) {
    (*param0).set_color(*param1);
}


void
NodePathCollection_C_set_color_v_pffffi(NodePathCollection *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, int param5) {
    (*param0).set_color(param1, param2, param3, param4, param5);
}


void
NodePathCollection_C_set_color_v_pffff(NodePathCollection *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    (*param0).set_color(param1, param2, param3, param4);
}


void
NodePathCollection_C_set_color_v_pfff(NodePathCollection *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3) {
    (*param0).set_color(param1, param2, param3);
}


void
NodePathCollection_C_set_color_scale_v_ppi(NodePathCollection *param0, LVecBase4 const *param1, int param2) {
    (*param0).set_color_scale(*param1, param2);
}


void
NodePathCollection_C_set_color_scale_v_pp(NodePathCollection *param0, LVecBase4 const *param1) {
    (*param0).set_color_scale(*param1);
}


void
NodePathCollection_C_set_color_scale_v_pffffi(NodePathCollection *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, int param5) {
    (*param0).set_color_scale(param1, param2, param3, param4, param5);
}


void
NodePathCollection_C_set_color_scale_v_pffff(NodePathCollection *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    (*param0).set_color_scale(param1, param2, param3, param4);
}


void
NodePathCollection_C_set_color_scale_v_pfff(NodePathCollection *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3) {
    (*param0).set_color_scale(param1, param2, param3);
}


void
NodePathCollection_C_compose_color_scale_v_ppi(NodePathCollection *param0, LVecBase4 const *param1, int param2) {
    (*param0).compose_color_scale(*param1, param2);
}


void
NodePathCollection_C_compose_color_scale_v_pp(NodePathCollection *param0, LVecBase4 const *param1) {
    (*param0).compose_color_scale(*param1);
}


void
NodePathCollection_C_compose_color_scale_v_pffffi(NodePathCollection *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, int param5) {
    (*param0).compose_color_scale(param1, param2, param3, param4, param5);
}


void
NodePathCollection_C_compose_color_scale_v_pffff(NodePathCollection *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    (*param0).compose_color_scale(param1, param2, param3, param4);
}


void
NodePathCollection_C_compose_color_scale_v_pfff(NodePathCollection *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3) {
    (*param0).compose_color_scale(param1, param2, param3);
}


void
NodePathCollection_C_set_attrib_v_ppi(NodePathCollection *param0, RenderAttrib const *param1, int param2) {
    (*param0).set_attrib(param1, param2);
}


void
NodePathCollection_C_set_attrib_v_pp(NodePathCollection *param0, RenderAttrib const *param1) {
    (*param0).set_attrib(param1);
}


void
NodePathCollection_C_output_v_pp(NodePathCollection const *param0, std::ostream *param1) {
    (*param0).output(*param1);
}


void
NodePathCollection_C_write_v_ppi(NodePathCollection const *param0, std::ostream *param1, int param2) {
    (*param0).write(*param1, param2);
}


void
NodePathCollection_C_write_v_pp(NodePathCollection const *param0, std::ostream *param1) {
    (*param0).write(*param1);
}


// PandaFramework


PandaFramework *
PandaFramework_C_ctor_p_v() {
    return new PandaFramework();
}


PandaFramework *
PandaFramework_C_ctor_p_p(PandaFramework const *param0) {
    return new PandaFramework(*param0);
}


void
PandaFramework_C_open_framework_v_p(PandaFramework *param0) {
    (*param0).open_framework();
}


void
PandaFramework_C_close_framework_v_p(PandaFramework *param0) {
    (*param0).close_framework();
}


GraphicsPipe *
PandaFramework_C_get_default_pipe_p_p(PandaFramework *param0) {
    return (*param0).get_default_pipe();
}


GraphicsEngine *
PandaFramework_C_get_graphics_engine_p_p(PandaFramework *param0) {
    return (*param0).get_graphics_engine();
}


NodePath const *
PandaFramework_C_get_data_root_p_p(PandaFramework const *param0) {
    return &((*param0).get_data_root());
}


EventHandler *
PandaFramework_C_get_event_handler_p_p(PandaFramework *param0) {
    return &((*param0).get_event_handler());
}


AsyncTaskManager *
PandaFramework_C_get_task_mgr_p_p(PandaFramework *param0) {
    return &((*param0).get_task_mgr());
}


NodePath *
PandaFramework_C_get_mouse_p_pp(PandaFramework *param0, GraphicsOutput *param1) {
    return new NodePath((*param0).get_mouse(param1));
}


void
PandaFramework_C_remove_mouse_v_pp(PandaFramework *param0, GraphicsOutput const *param1) {
    (*param0).remove_mouse(param1);
}


void
PandaFramework_C_set_window_title_v_ps(PandaFramework *param0, char const *param1) {
    (*param0).set_window_title(std::string(param1));
}


void
PandaFramework_C_get_default_window_props_v_pp(PandaFramework *param0, WindowProperties *param1) {
    (*param0).get_default_window_props(*param1);
}


WindowFramework *
PandaFramework_C_open_window_p_p(PandaFramework *param0) {
    return (*param0).open_window();
}


WindowFramework *
PandaFramework_C_open_window_p_ppp(PandaFramework *param0, GraphicsPipe *param1, GraphicsStateGuardian *param2) {
    return (*param0).open_window(param1, param2);
}


WindowFramework *
PandaFramework_C_open_window_p_pp(PandaFramework *param0, GraphicsPipe *param1) {
    return (*param0).open_window(param1);
}


WindowFramework *
PandaFramework_C_open_window_p_ppipp(PandaFramework *param0, WindowProperties const *param1, int param2, GraphicsPipe *param3, GraphicsStateGuardian *param4) {
    return (*param0).open_window(*param1, param2, param3, param4);
}


WindowFramework *
PandaFramework_C_open_window_p_ppip(PandaFramework *param0, WindowProperties const *param1, int param2, GraphicsPipe *param3) {
    return (*param0).open_window(*param1, param2, param3);
}


WindowFramework *
PandaFramework_C_open_window_p_ppi(PandaFramework *param0, WindowProperties const *param1, int param2) {
    return (*param0).open_window(*param1, param2);
}


int
PandaFramework_C_get_num_windows_i_p(PandaFramework const *param0) {
    return (*param0).get_num_windows();
}


WindowFramework *
PandaFramework_C_get_window_p_pi(PandaFramework const *param0, int param1) {
    return (*param0).get_window(param1);
}


int
PandaFramework_C_find_window_i_pp(PandaFramework const *param0, GraphicsOutput const *param1) {
    return (*param0).find_window(param1);
}


int
PandaFramework_C_find_window_i_pp_1_i_pp(PandaFramework const *param0, WindowFramework const *param1) {
    return (*param0).find_window(param1);
}


void
PandaFramework_C_close_window_v_pp(PandaFramework *param0, WindowFramework *param1) {
    (*param0).close_window(param1);
}


void
PandaFramework_C_close_window_v_pi(PandaFramework *param0, int param1) {
    (*param0).close_window(param1);
}


void
PandaFramework_C_close_all_windows_v_p(PandaFramework *param0) {
    (*param0).close_all_windows();
}


bool
PandaFramework_C_all_windows_closed_B_p(PandaFramework const *param0) {
    return (*param0).all_windows_closed();
}


NodePath *
PandaFramework_C_get_models_p_p(PandaFramework *param0) {
    return &((*param0).get_models());
}


void
PandaFramework_C_report_frame_rate_v_pp(PandaFramework const *param0, std::ostream *param1) {
    (*param0).report_frame_rate(*param1);
}


void
PandaFramework_C_reset_frame_rate_v_p(PandaFramework *param0) {
    (*param0).reset_frame_rate();
}


void
PandaFramework_C_set_wireframe_v_pB(PandaFramework *param0, bool param1) {
    (*param0).set_wireframe(param1);
}


void
PandaFramework_C_set_texture_v_pB(PandaFramework *param0, bool param1) {
    (*param0).set_texture(param1);
}


void
PandaFramework_C_set_two_sided_v_pB(PandaFramework *param0, bool param1) {
    (*param0).set_two_sided(param1);
}


void
PandaFramework_C_set_lighting_v_pB(PandaFramework *param0, bool param1) {
    (*param0).set_lighting(param1);
}


void
PandaFramework_C_set_perpixel_v_pB(PandaFramework *param0, bool param1) {
    (*param0).set_perpixel(param1);
}


void
PandaFramework_C_set_background_type_v_pp(PandaFramework *param0, WindowFramework::BackgroundType param1) {
    (*param0).set_background_type(param1);
}


bool
PandaFramework_C_get_wireframe_B_p(PandaFramework const *param0) {
    return (*param0).get_wireframe();
}


bool
PandaFramework_C_get_texture_B_p(PandaFramework const *param0) {
    return (*param0).get_texture();
}


bool
PandaFramework_C_get_two_sided_B_p(PandaFramework const *param0) {
    return (*param0).get_two_sided();
}


bool
PandaFramework_C_get_lighting_B_p(PandaFramework const *param0) {
    return (*param0).get_lighting();
}


bool
PandaFramework_C_get_perpixel_B_p(PandaFramework const *param0) {
    return (*param0).get_perpixel();
}


WindowFramework::BackgroundType
PandaFramework_C_get_background_type_p_p(PandaFramework const *param0) {
    return (*param0).get_background_type();
}


int
PandaFramework_C_hide_collision_solids_i_p(NodePath *param0) {
    return PandaFramework::hide_collision_solids(*param0);
}


int
PandaFramework_C_show_collision_solids_i_p(NodePath *param0) {
    return PandaFramework::show_collision_solids(*param0);
}


void
PandaFramework_C_set_highlight_v_pp(PandaFramework *param0, NodePath const *param1) {
    (*param0).set_highlight(*param1);
}


void
PandaFramework_C_clear_highlight_v_p(PandaFramework *param0) {
    (*param0).clear_highlight();
}


bool
PandaFramework_C_has_highlight_B_p(PandaFramework const *param0) {
    return (*param0).has_highlight();
}


NodePath const *
PandaFramework_C_get_highlight_p_p(PandaFramework const *param0) {
    return &((*param0).get_highlight());
}


RecorderController *
PandaFramework_C_get_recorder_p_p(PandaFramework const *param0) {
    return (*param0).get_recorder();
}


void
PandaFramework_C_set_recorder_v_pp(PandaFramework *param0, RecorderController *param1) {
    (*param0).set_recorder(param1);
}


void
PandaFramework_C_enable_default_keys_v_p(PandaFramework *param0) {
    (*param0).enable_default_keys();
}


bool
PandaFramework_C_do_frame_B_pp(PandaFramework *param0, Thread *param1) {
    return (*param0).do_frame(param1);
}


void
PandaFramework_C_main_loop_v_p(PandaFramework *param0) {
    (*param0).main_loop();
}


void
PandaFramework_C_set_exit_flag_v_p(PandaFramework *param0) {
    (*param0).set_exit_flag();
}


void
PandaFramework_C_clear_exit_flag_v_p(PandaFramework *param0) {
    (*param0).clear_exit_flag();
}


// PandaNode


TypedWritableReferenceCount *
PandaNode_C_upcast_to_TypedWritableReferenceCount_p_p(PandaNode *param0) {
    return (TypedWritableReferenceCount *)param0;
}


Namable *
PandaNode_C_upcast_to_Namable_p_p(PandaNode *param0) {
    return (Namable *)param0;
}


LinkedListNode *
PandaNode_C_upcast_to_LinkedListNode_p_p(PandaNode *param0) {
    return (LinkedListNode *)param0;
}


PandaNode *
PandaNode_C_ctor_p_s(char const *param0) {
    return new PandaNode(std::string(param0));
}


PandaNode *
PandaNode_C_combine_with_p_pp(PandaNode *param0, PandaNode *param1) {
    return (*param0).combine_with(param1);
}


PandaNode *
PandaNode_C_dupe_for_flatten_p_p(PandaNode const *param0) {
    return (*param0).dupe_for_flatten();
}


bool
PandaNode_C_safe_to_flatten_B_p(PandaNode const *param0) {
    return (*param0).safe_to_flatten();
}


bool
PandaNode_C_safe_to_transform_B_p(PandaNode const *param0) {
    return (*param0).safe_to_transform();
}


bool
PandaNode_C_safe_to_modify_transform_B_p(PandaNode const *param0) {
    return (*param0).safe_to_modify_transform();
}


bool
PandaNode_C_safe_to_combine_B_p(PandaNode const *param0) {
    return (*param0).safe_to_combine();
}


bool
PandaNode_C_safe_to_combine_children_B_p(PandaNode const *param0) {
    return (*param0).safe_to_combine_children();
}


bool
PandaNode_C_safe_to_flatten_below_B_p(PandaNode const *param0) {
    return (*param0).safe_to_flatten_below();
}


bool
PandaNode_C_preserve_name_B_p(PandaNode const *param0) {
    return (*param0).preserve_name();
}


int
PandaNode_C_get_unsafe_to_apply_attribs_i_p(PandaNode const *param0) {
    return (*param0).get_unsafe_to_apply_attribs();
}


void
PandaNode_C_apply_attribs_to_vertices_v_ppip(PandaNode *param0, AccumulatedAttribs const *param1, int param2, GeomTransformer *param3) {
    (*param0).apply_attribs_to_vertices(*param1, param2, *param3);
}


void
PandaNode_C_xform_v_pp(PandaNode *param0, LMatrix4 const *param1) {
    (*param0).xform(*param1);
}


bool
PandaNode_C_cull_callback_B_ppp(PandaNode *param0, CullTraverser *param1, CullTraverserData *param2) {
    return (*param0).cull_callback(param1, *param2);
}


bool
PandaNode_C_has_selective_visibility_B_p(PandaNode const *param0) {
    return (*param0).has_selective_visibility();
}


int
PandaNode_C_get_first_visible_child_i_p(PandaNode const *param0) {
    return (*param0).get_first_visible_child();
}


int
PandaNode_C_get_next_visible_child_i_pi(PandaNode const *param0, int param1) {
    return (*param0).get_next_visible_child(param1);
}


bool
PandaNode_C_has_single_child_visibility_B_p(PandaNode const *param0) {
    return (*param0).has_single_child_visibility();
}


int
PandaNode_C_get_visible_child_i_p(PandaNode const *param0) {
    return (*param0).get_visible_child();
}


bool
PandaNode_C_is_renderable_B_p(PandaNode const *param0) {
    return (*param0).is_renderable();
}


void
PandaNode_C_add_for_draw_v_ppp(PandaNode *param0, CullTraverser *param1, CullTraverserData *param2) {
    (*param0).add_for_draw(param1, *param2);
}


PandaNode *
PandaNode_C_make_copy_p_p(PandaNode const *param0) {
    return (*param0).make_copy();
}


PointerTo< PandaNode > *
PandaNode_C_copy_subgraph_p_pp(PandaNode const *param0, Thread *param1) {
    return new PointerTo< PandaNode >((*param0).copy_subgraph(param1));
}


PointerTo< PandaNode > *
PandaNode_C_copy_subgraph_p_p(PandaNode const *param0) {
    return new PointerTo< PandaNode >((*param0).copy_subgraph());
}


int
PandaNode_C_get_num_parents_i_pp(PandaNode const *param0, Thread *param1) {
    return (*param0).get_num_parents(param1);
}


int
PandaNode_C_get_num_parents_i_p(PandaNode const *param0) {
    return (*param0).get_num_parents();
}


PandaNode *
PandaNode_C_get_parent_p_pip(PandaNode const *param0, int param1, Thread *param2) {
    return (*param0).get_parent(param1, param2);
}


PandaNode *
PandaNode_C_get_parent_p_pi(PandaNode const *param0, int param1) {
    return (*param0).get_parent(param1);
}


int
PandaNode_C_find_parent_i_ppp(PandaNode const *param0, PandaNode *param1, Thread *param2) {
    return (*param0).find_parent(param1, param2);
}


int
PandaNode_C_find_parent_i_pp(PandaNode const *param0, PandaNode *param1) {
    return (*param0).find_parent(param1);
}


int
PandaNode_C_get_num_children_i_pp(PandaNode const *param0, Thread *param1) {
    return (*param0).get_num_children(param1);
}


int
PandaNode_C_get_num_children_i_p(PandaNode const *param0) {
    return (*param0).get_num_children();
}


PandaNode *
PandaNode_C_get_child_p_pip(PandaNode const *param0, int param1, Thread *param2) {
    return (*param0).get_child(param1, param2);
}


PandaNode *
PandaNode_C_get_child_p_pi(PandaNode const *param0, int param1) {
    return (*param0).get_child(param1);
}


int
PandaNode_C_get_child_sort_i_pip(PandaNode const *param0, int param1, Thread *param2) {
    return (*param0).get_child_sort(param1, param2);
}


int
PandaNode_C_get_child_sort_i_pi(PandaNode const *param0, int param1) {
    return (*param0).get_child_sort(param1);
}


int
PandaNode_C_find_child_i_ppp(PandaNode const *param0, PandaNode *param1, Thread *param2) {
    return (*param0).find_child(param1, param2);
}


int
PandaNode_C_find_child_i_pp(PandaNode const *param0, PandaNode *param1) {
    return (*param0).find_child(param1);
}


int
PandaNode_C_count_num_descendants_i_p(PandaNode const *param0) {
    return (*param0).count_num_descendants();
}


void
PandaNode_C_add_child_v_ppip(PandaNode *param0, PandaNode *param1, int param2, Thread *param3) {
    (*param0).add_child(param1, param2, param3);
}


void
PandaNode_C_add_child_v_ppi(PandaNode *param0, PandaNode *param1, int param2) {
    (*param0).add_child(param1, param2);
}


void
PandaNode_C_add_child_v_pp(PandaNode *param0, PandaNode *param1) {
    (*param0).add_child(param1);
}


bool
PandaNode_C_remove_child_B_ppp(PandaNode *param0, PandaNode *param1, Thread *param2) {
    return (*param0).remove_child(param1, param2);
}


bool
PandaNode_C_remove_child_B_pp(PandaNode *param0, PandaNode *param1) {
    return (*param0).remove_child(param1);
}


void
PandaNode_C_remove_child_v_pip(PandaNode *param0, int param1, Thread *param2) {
    (*param0).remove_child(param1, param2);
}


void
PandaNode_C_remove_child_v_pi(PandaNode *param0, int param1) {
    (*param0).remove_child(param1);
}


bool
PandaNode_C_replace_child_B_pppp(PandaNode *param0, PandaNode *param1, PandaNode *param2, Thread *param3) {
    return (*param0).replace_child(param1, param2, param3);
}


bool
PandaNode_C_replace_child_B_ppp(PandaNode *param0, PandaNode *param1, PandaNode *param2) {
    return (*param0).replace_child(param1, param2);
}


bool
PandaNode_C_stash_child_B_ppp(PandaNode *param0, PandaNode *param1, Thread *param2) {
    return (*param0).stash_child(param1, param2);
}


bool
PandaNode_C_stash_child_B_pp(PandaNode *param0, PandaNode *param1) {
    return (*param0).stash_child(param1);
}


void
PandaNode_C_stash_child_v_pip(PandaNode *param0, int param1, Thread *param2) {
    (*param0).stash_child(param1, param2);
}


void
PandaNode_C_stash_child_v_pi(PandaNode *param0, int param1) {
    (*param0).stash_child(param1);
}


bool
PandaNode_C_unstash_child_B_ppp(PandaNode *param0, PandaNode *param1, Thread *param2) {
    return (*param0).unstash_child(param1, param2);
}


bool
PandaNode_C_unstash_child_B_pp(PandaNode *param0, PandaNode *param1) {
    return (*param0).unstash_child(param1);
}


void
PandaNode_C_unstash_child_v_pip(PandaNode *param0, int param1, Thread *param2) {
    (*param0).unstash_child(param1, param2);
}


void
PandaNode_C_unstash_child_v_pi(PandaNode *param0, int param1) {
    (*param0).unstash_child(param1);
}


int
PandaNode_C_get_num_stashed_i_pp(PandaNode const *param0, Thread *param1) {
    return (*param0).get_num_stashed(param1);
}


int
PandaNode_C_get_num_stashed_i_p(PandaNode const *param0) {
    return (*param0).get_num_stashed();
}


PandaNode::Stashed *
PandaNode_C_get_stashed_p_pp(PandaNode const *param0, Thread *param1) {
    return new PandaNode::Stashed((*param0).get_stashed(param1));
}


PandaNode::Stashed *
PandaNode_C_get_stashed_p_p(PandaNode const *param0) {
    return new PandaNode::Stashed((*param0).get_stashed());
}


PandaNode *
PandaNode_C_get_stashed_p_pip(PandaNode const *param0, int param1, Thread *param2) {
    return (*param0).get_stashed(param1, param2);
}


PandaNode *
PandaNode_C_get_stashed_p_pi(PandaNode const *param0, int param1) {
    return (*param0).get_stashed(param1);
}


int
PandaNode_C_get_stashed_sort_i_pip(PandaNode const *param0, int param1, Thread *param2) {
    return (*param0).get_stashed_sort(param1, param2);
}


int
PandaNode_C_get_stashed_sort_i_pi(PandaNode const *param0, int param1) {
    return (*param0).get_stashed_sort(param1);
}


int
PandaNode_C_find_stashed_i_ppp(PandaNode const *param0, PandaNode *param1, Thread *param2) {
    return (*param0).find_stashed(param1, param2);
}


int
PandaNode_C_find_stashed_i_pp(PandaNode const *param0, PandaNode *param1) {
    return (*param0).find_stashed(param1);
}


void
PandaNode_C_add_stashed_v_ppip(PandaNode *param0, PandaNode *param1, int param2, Thread *param3) {
    (*param0).add_stashed(param1, param2, param3);
}


void
PandaNode_C_add_stashed_v_ppi(PandaNode *param0, PandaNode *param1, int param2) {
    (*param0).add_stashed(param1, param2);
}


void
PandaNode_C_add_stashed_v_pp(PandaNode *param0, PandaNode *param1) {
    (*param0).add_stashed(param1);
}


void
PandaNode_C_remove_stashed_v_pip(PandaNode *param0, int param1, Thread *param2) {
    (*param0).remove_stashed(param1, param2);
}


void
PandaNode_C_remove_stashed_v_pi(PandaNode *param0, int param1) {
    (*param0).remove_stashed(param1);
}


void
PandaNode_C_remove_all_children_v_pp(PandaNode *param0, Thread *param1) {
    (*param0).remove_all_children(param1);
}


void
PandaNode_C_remove_all_children_v_p(PandaNode *param0) {
    (*param0).remove_all_children();
}


void
PandaNode_C_steal_children_v_ppp(PandaNode *param0, PandaNode *param1, Thread *param2) {
    (*param0).steal_children(param1, param2);
}


void
PandaNode_C_steal_children_v_pp(PandaNode *param0, PandaNode *param1) {
    (*param0).steal_children(param1);
}


void
PandaNode_C_copy_children_v_ppp(PandaNode *param0, PandaNode *param1, Thread *param2) {
    (*param0).copy_children(param1, param2);
}


void
PandaNode_C_copy_children_v_pp(PandaNode *param0, PandaNode *param1) {
    (*param0).copy_children(param1);
}


void
PandaNode_C_set_attrib_v_ppi(PandaNode *param0, RenderAttrib const *param1, int param2) {
    (*param0).set_attrib(param1, param2);
}


void
PandaNode_C_set_attrib_v_pp(PandaNode *param0, RenderAttrib const *param1) {
    (*param0).set_attrib(param1);
}


ConstPointerTo< RenderAttrib > *
PandaNode_C_get_attrib_p_pi(PandaNode const *param0, int param1) {
    return new ConstPointerTo< RenderAttrib >((*param0).get_attrib(TypeHandle::from_index(param1)));
}


ConstPointerTo< RenderAttrib > *
PandaNode_C_get_attrib_p_pi_1_p_pi(PandaNode const *param0, int param1) {
    return new ConstPointerTo< RenderAttrib >((*param0).get_attrib(param1));
}


bool
PandaNode_C_has_attrib_B_pi(PandaNode const *param0, int param1) {
    return (*param0).has_attrib(TypeHandle::from_index(param1));
}


bool
PandaNode_C_has_attrib_B_pi_1_B_pi(PandaNode const *param0, int param1) {
    return (*param0).has_attrib(param1);
}


void
PandaNode_C_clear_attrib_v_pi(PandaNode *param0, int param1) {
    (*param0).clear_attrib(TypeHandle::from_index(param1));
}


void
PandaNode_C_clear_attrib_v_pi_1_v_pi(PandaNode *param0, int param1) {
    (*param0).clear_attrib(param1);
}


void
PandaNode_C_set_effect_v_pp(PandaNode *param0, RenderEffect const *param1) {
    (*param0).set_effect(param1);
}


ConstPointerTo< RenderEffect > *
PandaNode_C_get_effect_p_pi(PandaNode const *param0, int param1) {
    return new ConstPointerTo< RenderEffect >((*param0).get_effect(TypeHandle::from_index(param1)));
}


bool
PandaNode_C_has_effect_B_pi(PandaNode const *param0, int param1) {
    return (*param0).has_effect(TypeHandle::from_index(param1));
}


void
PandaNode_C_clear_effect_v_pi(PandaNode *param0, int param1) {
    (*param0).clear_effect(TypeHandle::from_index(param1));
}


void
PandaNode_C_set_state_v_ppp(PandaNode *param0, RenderState const *param1, Thread *param2) {
    (*param0).set_state(param1, param2);
}


void
PandaNode_C_set_state_v_pp(PandaNode *param0, RenderState const *param1) {
    (*param0).set_state(param1);
}


ConstPointerTo< RenderState > *
PandaNode_C_get_state_p_pp(PandaNode const *param0, Thread *param1) {
    return new ConstPointerTo< RenderState >((*param0).get_state(param1));
}


ConstPointerTo< RenderState > *
PandaNode_C_get_state_p_p(PandaNode const *param0) {
    return new ConstPointerTo< RenderState >((*param0).get_state());
}


void
PandaNode_C_clear_state_v_pp(PandaNode *param0, Thread *param1) {
    (*param0).clear_state(param1);
}


void
PandaNode_C_clear_state_v_p(PandaNode *param0) {
    (*param0).clear_state();
}


void
PandaNode_C_set_effects_v_ppp(PandaNode *param0, RenderEffects const *param1, Thread *param2) {
    (*param0).set_effects(param1, param2);
}


void
PandaNode_C_set_effects_v_pp(PandaNode *param0, RenderEffects const *param1) {
    (*param0).set_effects(param1);
}


ConstPointerTo< RenderEffects > *
PandaNode_C_get_effects_p_pp(PandaNode const *param0, Thread *param1) {
    return new ConstPointerTo< RenderEffects >((*param0).get_effects(param1));
}


ConstPointerTo< RenderEffects > *
PandaNode_C_get_effects_p_p(PandaNode const *param0) {
    return new ConstPointerTo< RenderEffects >((*param0).get_effects());
}


void
PandaNode_C_clear_effects_v_pp(PandaNode *param0, Thread *param1) {
    (*param0).clear_effects(param1);
}


void
PandaNode_C_clear_effects_v_p(PandaNode *param0) {
    (*param0).clear_effects();
}


void
PandaNode_C_set_transform_v_ppp(PandaNode *param0, TransformState const *param1, Thread *param2) {
    (*param0).set_transform(param1, param2);
}


void
PandaNode_C_set_transform_v_pp(PandaNode *param0, TransformState const *param1) {
    (*param0).set_transform(param1);
}


ConstPointerTo< TransformState > *
PandaNode_C_get_transform_p_pp(PandaNode const *param0, Thread *param1) {
    return new ConstPointerTo< TransformState >((*param0).get_transform(param1));
}


ConstPointerTo< TransformState > *
PandaNode_C_get_transform_p_p(PandaNode const *param0) {
    return new ConstPointerTo< TransformState >((*param0).get_transform());
}


void
PandaNode_C_clear_transform_v_pp(PandaNode *param0, Thread *param1) {
    (*param0).clear_transform(param1);
}


void
PandaNode_C_clear_transform_v_p(PandaNode *param0) {
    (*param0).clear_transform();
}


void
PandaNode_C_set_prev_transform_v_ppp(PandaNode *param0, TransformState const *param1, Thread *param2) {
    (*param0).set_prev_transform(param1, param2);
}


void
PandaNode_C_set_prev_transform_v_pp(PandaNode *param0, TransformState const *param1) {
    (*param0).set_prev_transform(param1);
}


ConstPointerTo< TransformState > *
PandaNode_C_get_prev_transform_p_pp(PandaNode const *param0, Thread *param1) {
    return new ConstPointerTo< TransformState >((*param0).get_prev_transform(param1));
}


ConstPointerTo< TransformState > *
PandaNode_C_get_prev_transform_p_p(PandaNode const *param0) {
    return new ConstPointerTo< TransformState >((*param0).get_prev_transform());
}


void
PandaNode_C_reset_prev_transform_v_pp(PandaNode *param0, Thread *param1) {
    (*param0).reset_prev_transform(param1);
}


void
PandaNode_C_reset_prev_transform_v_p(PandaNode *param0) {
    (*param0).reset_prev_transform();
}


bool
PandaNode_C_has_dirty_prev_transform_B_p(PandaNode const *param0) {
    return (*param0).has_dirty_prev_transform();
}


void
PandaNode_C_reset_all_prev_transform_v_p(Thread *param0) {
    PandaNode::reset_all_prev_transform(param0);
}


void
PandaNode_C_reset_all_prev_transform_v_v() {
    PandaNode::reset_all_prev_transform();
}


void
PandaNode_C_set_tag_v_pssp(PandaNode *param0, char const *param1, char const *param2, Thread *param3) {
    (*param0).set_tag(std::string(param1), std::string(param2), param3);
}


void
PandaNode_C_set_tag_v_pss(PandaNode *param0, char const *param1, char const *param2) {
    (*param0).set_tag(std::string(param1), std::string(param2));
}


char const *
PandaNode_C_get_tag_s_psp(PandaNode const *param0, char const *param1, Thread *param2) {
    static std::string string_holder = (*param0).get_tag(std::string(param1), param2);
    return string_holder.c_str();
}


char const *
PandaNode_C_get_tag_s_ps(PandaNode const *param0, char const *param1) {
    static std::string string_holder = (*param0).get_tag(std::string(param1));
    return string_holder.c_str();
}


bool
PandaNode_C_has_tag_B_psp(PandaNode const *param0, char const *param1, Thread *param2) {
    return (*param0).has_tag(std::string(param1), param2);
}


bool
PandaNode_C_has_tag_B_ps(PandaNode const *param0, char const *param1) {
    return (*param0).has_tag(std::string(param1));
}


void
PandaNode_C_clear_tag_v_psp(PandaNode *param0, char const *param1, Thread *param2) {
    (*param0).clear_tag(std::string(param1), param2);
}


void
PandaNode_C_clear_tag_v_ps(PandaNode *param0, char const *param1) {
    (*param0).clear_tag(std::string(param1));
}


void
PandaNode_C_get_tag_keys_v_pp(PandaNode const *param0, vector_string *param1) {
    (*param0).get_tag_keys(*param1);
}


std::size_t
PandaNode_C_get_num_tags_p_p(PandaNode const *param0) {
    return (*param0).get_num_tags();
}


char const *
PandaNode_C_get_tag_key_s_pp(PandaNode const *param0, std::size_t param1) {
    static std::string string_holder = (*param0).get_tag_key(param1);
    return string_holder.c_str();
}


bool
PandaNode_C_has_tags_B_p(PandaNode const *param0) {
    return (*param0).has_tags();
}


void
PandaNode_C_copy_tags_v_pp(PandaNode *param0, PandaNode *param1) {
    (*param0).copy_tags(param1);
}


void
PandaNode_C_list_tags_v_pps(PandaNode const *param0, std::ostream *param1, char const *param2) {
    (*param0).list_tags(*param1, std::string(param2));
}


void
PandaNode_C_list_tags_v_pp(PandaNode const *param0, std::ostream *param1) {
    (*param0).list_tags(*param1);
}


int
PandaNode_C_compare_tags_i_pp(PandaNode const *param0, PandaNode const *param1) {
    return (*param0).compare_tags(param1);
}


void
PandaNode_C_copy_all_properties_v_pp(PandaNode *param0, PandaNode *param1) {
    (*param0).copy_all_properties(param1);
}


void
PandaNode_C_replace_node_v_pp(PandaNode *param0, PandaNode *param1) {
    (*param0).replace_node(param1);
}


void
PandaNode_C_set_unexpected_change_v_pI(PandaNode *param0, unsigned int param1) {
    (*param0).set_unexpected_change(param1);
}


unsigned int
PandaNode_C_get_unexpected_change_I_pI(PandaNode const *param0, unsigned int param1) {
    return (*param0).get_unexpected_change(param1);
}


void
PandaNode_C_clear_unexpected_change_v_pI(PandaNode *param0, unsigned int param1) {
    (*param0).clear_unexpected_change(param1);
}


DrawMask *
PandaNode_C_get_overall_bit_p_v() {
    return new DrawMask(PandaNode::get_overall_bit());
}


DrawMask *
PandaNode_C_get_all_camera_mask_p_v() {
    return new DrawMask(PandaNode::get_all_camera_mask());
}


bool
PandaNode_C_is_overall_hidden_B_p(PandaNode const *param0) {
    return (*param0).is_overall_hidden();
}


void
PandaNode_C_set_overall_hidden_v_pB(PandaNode *param0, bool param1) {
    (*param0).set_overall_hidden(param1);
}


void
PandaNode_C_adjust_draw_mask_v_pppp(PandaNode *param0, DrawMask *param1, DrawMask *param2, DrawMask *param3) {
    (*param0).adjust_draw_mask(*param1, *param2, *param3);
}


DrawMask *
PandaNode_C_get_draw_control_mask_p_p(PandaNode const *param0) {
    return new DrawMask((*param0).get_draw_control_mask());
}


DrawMask *
PandaNode_C_get_draw_show_mask_p_p(PandaNode const *param0) {
    return new DrawMask((*param0).get_draw_show_mask());
}


DrawMask *
PandaNode_C_get_net_draw_control_mask_p_p(PandaNode const *param0) {
    return new DrawMask((*param0).get_net_draw_control_mask());
}


DrawMask *
PandaNode_C_get_net_draw_show_mask_p_p(PandaNode const *param0) {
    return new DrawMask((*param0).get_net_draw_show_mask());
}


void
PandaNode_C_set_into_collide_mask_v_pp(PandaNode *param0, CollideMask *param1) {
    (*param0).set_into_collide_mask(*param1);
}


CollideMask *
PandaNode_C_get_into_collide_mask_p_p(PandaNode const *param0) {
    return new CollideMask((*param0).get_into_collide_mask());
}


CollideMask *
PandaNode_C_get_legal_collide_mask_p_p(PandaNode const *param0) {
    return new CollideMask((*param0).get_legal_collide_mask());
}


CollideMask *
PandaNode_C_get_net_collide_mask_p_pp(PandaNode const *param0, Thread *param1) {
    return new CollideMask((*param0).get_net_collide_mask(param1));
}


CollideMask *
PandaNode_C_get_net_collide_mask_p_p(PandaNode const *param0) {
    return new CollideMask((*param0).get_net_collide_mask());
}


ConstPointerTo< RenderAttrib > *
PandaNode_C_get_off_clip_planes_p_pp(PandaNode const *param0, Thread *param1) {
    return new ConstPointerTo< RenderAttrib >((*param0).get_off_clip_planes(param1));
}


ConstPointerTo< RenderAttrib > *
PandaNode_C_get_off_clip_planes_p_p(PandaNode const *param0) {
    return new ConstPointerTo< RenderAttrib >((*param0).get_off_clip_planes());
}


void
PandaNode_C_prepare_scene_v_ppp(PandaNode *param0, GraphicsStateGuardianBase *param1, RenderState const *param2) {
    (*param0).prepare_scene(param1, param2);
}


bool
PandaNode_C_is_scene_root_B_p(PandaNode const *param0) {
    return (*param0).is_scene_root();
}


bool
PandaNode_C_is_under_scene_root_B_p(PandaNode const *param0) {
    return (*param0).is_under_scene_root();
}


void
PandaNode_C_output_v_pp(PandaNode const *param0, std::ostream *param1) {
    (*param0).output(*param1);
}


void
PandaNode_C_write_v_ppi(PandaNode const *param0, std::ostream *param1, int param2) {
    (*param0).write(*param1, param2);
}


void
PandaNode_C_ls_v_ppi(PandaNode const *param0, std::ostream *param1, int param2) {
    (*param0).ls(*param1, param2);
}


void
PandaNode_C_set_bounds_type_v_pp(PandaNode *param0, BoundingVolume::BoundsType param1) {
    (*param0).set_bounds_type(param1);
}


BoundingVolume::BoundsType
PandaNode_C_get_bounds_type_p_p(PandaNode const *param0) {
    return (*param0).get_bounds_type();
}


void
PandaNode_C_set_bounds_v_pp(PandaNode *param0, BoundingVolume const *param1) {
    (*param0).set_bounds(param1);
}


void
PandaNode_C_set_bound_v_pp(PandaNode *param0, BoundingVolume const *param1) {
    (*param0).set_bound(param1);
}


void
PandaNode_C_clear_bounds_v_p(PandaNode *param0) {
    (*param0).clear_bounds();
}


ConstPointerTo< BoundingVolume > *
PandaNode_C_get_bounds_p_pp(PandaNode const *param0, Thread *param1) {
    return new ConstPointerTo< BoundingVolume >((*param0).get_bounds(param1));
}


ConstPointerTo< BoundingVolume > *
PandaNode_C_get_bounds_p_p(PandaNode const *param0) {
    return new ConstPointerTo< BoundingVolume >((*param0).get_bounds());
}


ConstPointerTo< BoundingVolume > *
PandaNode_C_get_bounds_p_ppp(PandaNode const *param0, UpdateSeq *param1, Thread *param2) {
    return new ConstPointerTo< BoundingVolume >((*param0).get_bounds(*param1, param2));
}


ConstPointerTo< BoundingVolume > *
PandaNode_C_get_bounds_p_pp_1_p_pp(PandaNode const *param0, UpdateSeq *param1) {
    return new ConstPointerTo< BoundingVolume >((*param0).get_bounds(*param1));
}


int
PandaNode_C_get_nested_vertices_i_pp(PandaNode const *param0, Thread *param1) {
    return (*param0).get_nested_vertices(param1);
}


int
PandaNode_C_get_nested_vertices_i_p(PandaNode const *param0) {
    return (*param0).get_nested_vertices();
}


ConstPointerTo< BoundingVolume > *
PandaNode_C_get_internal_bounds_p_pp(PandaNode const *param0, Thread *param1) {
    return new ConstPointerTo< BoundingVolume >((*param0).get_internal_bounds(param1));
}


ConstPointerTo< BoundingVolume > *
PandaNode_C_get_internal_bounds_p_p(PandaNode const *param0) {
    return new ConstPointerTo< BoundingVolume >((*param0).get_internal_bounds());
}


int
PandaNode_C_get_internal_vertices_i_pp(PandaNode const *param0, Thread *param1) {
    return (*param0).get_internal_vertices(param1);
}


int
PandaNode_C_get_internal_vertices_i_p(PandaNode const *param0) {
    return (*param0).get_internal_vertices();
}


void
PandaNode_C_mark_bounds_stale_v_pp(PandaNode const *param0, Thread *param1) {
    (*param0).mark_bounds_stale(param1);
}


void
PandaNode_C_mark_bounds_stale_v_p(PandaNode const *param0) {
    (*param0).mark_bounds_stale();
}


void
PandaNode_C_mark_internal_bounds_stale_v_pp(PandaNode *param0, Thread *param1) {
    (*param0).mark_internal_bounds_stale(param1);
}


void
PandaNode_C_mark_internal_bounds_stale_v_p(PandaNode *param0) {
    (*param0).mark_internal_bounds_stale();
}


bool
PandaNode_C_is_bounds_stale_B_p(PandaNode const *param0) {
    return (*param0).is_bounds_stale();
}


void
PandaNode_C_set_final_v_pB(PandaNode *param0, bool param1) {
    (*param0).set_final(param1);
}


bool
PandaNode_C_is_final_B_pp(PandaNode const *param0, Thread *param1) {
    return (*param0).is_final(param1);
}


bool
PandaNode_C_is_final_B_p(PandaNode const *param0) {
    return (*param0).is_final();
}


bool
PandaNode_C_is_geom_node_B_p(PandaNode const *param0) {
    return (*param0).is_geom_node();
}


bool
PandaNode_C_is_lod_node_B_p(PandaNode const *param0) {
    return (*param0).is_lod_node();
}


bool
PandaNode_C_is_collision_node_B_p(PandaNode const *param0) {
    return (*param0).is_collision_node();
}


Light *
PandaNode_C_as_light_p_p(PandaNode *param0) {
    return (*param0).as_light();
}


bool
PandaNode_C_is_ambient_light_B_p(PandaNode const *param0) {
    return (*param0).is_ambient_light();
}


int
PandaNode_C_get_fancy_bits_i_pp(PandaNode const *param0, Thread *param1) {
    return (*param0).get_fancy_bits(param1);
}


int
PandaNode_C_get_fancy_bits_i_p(PandaNode const *param0) {
    return (*param0).get_fancy_bits();
}


PointerTo< PandaNode > *
PandaNode_C_decode_from_bam_stream_p_pp(vector_uchar param0, BamReader *param1) {
    return new PointerTo< PandaNode >(PandaNode::decode_from_bam_stream(param0, param1));
}


PointerTo< PandaNode > *
PandaNode_C_decode_from_bam_stream_p_p(vector_uchar param0) {
    return new PointerTo< PandaNode >(PandaNode::decode_from_bam_stream(param0));
}


void
PandaNode_C_r_prepare_scene_v_ppppp(PandaNode *param0, GraphicsStateGuardianBase *param1, RenderState const *param2, GeomTransformer *param3, Thread *param4) {
    (*param0).r_prepare_scene(param1, param2, *param3, param4);
}


PandaNode::Children *
PandaNode_C_get_children_p_pp(PandaNode const *param0, Thread *param1) {
    return new PandaNode::Children((*param0).get_children(param1));
}


PandaNode::Children *
PandaNode_C_get_children_p_p(PandaNode const *param0) {
    return new PandaNode::Children((*param0).get_children());
}


PandaNode::Parents *
PandaNode_C_get_parents_p_pp(PandaNode const *param0, Thread *param1) {
    return new PandaNode::Parents((*param0).get_parents(param1));
}


PandaNode::Parents *
PandaNode_C_get_parents_p_p(PandaNode const *param0) {
    return new PandaNode::Parents((*param0).get_parents());
}


void
PandaNode_C_register_with_read_factory_v_v() {
    PandaNode::register_with_read_factory();
}


void
PandaNode_C_write_datagram_v_ppp(PandaNode *param0, BamWriter *param1, Datagram *param2) {
    (*param0).write_datagram(param1, *param2);
}


void
PandaNode_C_update_bam_nested_v_pp(PandaNode *param0, BamWriter *param1) {
    (*param0).update_bam_nested(param1);
}


void
PandaNode_C_write_recorder_v_ppp(PandaNode *param0, BamWriter *param1, Datagram *param2) {
    (*param0).write_recorder(param1, *param2);
}


int
PandaNode_C_get_class_type_i_v() {
    return (PandaNode::get_class_type()).get_index();
}


void
PandaNode_C_init_type_v_v() {
    PandaNode::init_type();
}


int
PandaNode_C_get_type_i_p(PandaNode const *param0) {
    return ((*param0).get_type()).get_index();
}


int
PandaNode_C_force_init_type_i_p(PandaNode *param0) {
    return ((*param0).force_init_type()).get_index();
}


TextNode *
PandaNode_C_downcast_to_TextNode_p_p(PandaNode *param0) {
    return (TextNode *)param0;
}


// PandaSystem


char const *
PandaSystem_C_get_version_string_s_v() {
    static std::string string_holder = PandaSystem::get_version_string();
    return string_holder.c_str();
}


char const *
PandaSystem_C_get_package_version_string_s_v() {
    static std::string string_holder = PandaSystem::get_package_version_string();
    return string_holder.c_str();
}


char const *
PandaSystem_C_get_package_host_url_s_v() {
    static std::string string_holder = PandaSystem::get_package_host_url();
    return string_holder.c_str();
}


char const *
PandaSystem_C_get_p3d_coreapi_version_string_s_v() {
    static std::string string_holder = PandaSystem::get_p3d_coreapi_version_string();
    return string_holder.c_str();
}


int
PandaSystem_C_get_major_version_i_v() {
    return PandaSystem::get_major_version();
}


int
PandaSystem_C_get_minor_version_i_v() {
    return PandaSystem::get_minor_version();
}


int
PandaSystem_C_get_sequence_version_i_v() {
    return PandaSystem::get_sequence_version();
}


bool
PandaSystem_C_is_official_version_B_v() {
    return PandaSystem::is_official_version();
}


int
PandaSystem_C_get_memory_alignment_i_v() {
    return PandaSystem::get_memory_alignment();
}


char const *
PandaSystem_C_get_distributor_s_v() {
    static std::string string_holder = PandaSystem::get_distributor();
    return string_holder.c_str();
}


char const *
PandaSystem_C_get_compiler_s_v() {
    static std::string string_holder = PandaSystem::get_compiler();
    return string_holder.c_str();
}


char const *
PandaSystem_C_get_build_date_s_v() {
    static std::string string_holder = PandaSystem::get_build_date();
    return string_holder.c_str();
}


char const *
PandaSystem_C_get_git_commit_s_v() {
    static std::string string_holder = PandaSystem::get_git_commit();
    return string_holder.c_str();
}


char const *
PandaSystem_C_get_platform_s_v() {
    static std::string string_holder = PandaSystem::get_platform();
    return string_holder.c_str();
}


bool
PandaSystem_C_has_system_B_ps(PandaSystem const *param0, char const *param1) {
    return (*param0).has_system(std::string(param1));
}


std::size_t
PandaSystem_C_get_num_systems_p_p(PandaSystem const *param0) {
    return (*param0).get_num_systems();
}


char const *
PandaSystem_C_get_system_s_pp(PandaSystem const *param0, std::size_t param1) {
    static std::string string_holder = (*param0).get_system(param1);
    return string_holder.c_str();
}


char const *
PandaSystem_C_get_system_tag_s_pss(PandaSystem const *param0, char const *param1, char const *param2) {
    static std::string string_holder = (*param0).get_system_tag(std::string(param1), std::string(param2));
    return string_holder.c_str();
}


void
PandaSystem_C_add_system_v_ps(PandaSystem *param0, char const *param1) {
    (*param0).add_system(std::string(param1));
}


void
PandaSystem_C_set_system_tag_v_psss(PandaSystem *param0, char const *param1, char const *param2, char const *param3) {
    (*param0).set_system_tag(std::string(param1), std::string(param2), std::string(param3));
}


bool
PandaSystem_C_heap_trim_B_pp(PandaSystem *param0, std::size_t param1) {
    return (*param0).heap_trim(param1);
}


void
PandaSystem_C_output_v_pp(PandaSystem const *param0, std::ostream *param1) {
    (*param0).output(*param1);
}


void
PandaSystem_C_write_v_pp(PandaSystem const *param0, std::ostream *param1) {
    (*param0).write(*param1);
}


PandaSystem *
PandaSystem_C_get_global_ptr_p_v() {
    return PandaSystem::get_global_ptr();
}


int
PandaSystem_C_get_class_type_i_v() {
    return (PandaSystem::get_class_type()).get_index();
}


void
PandaSystem_C_init_type_v_v() {
    PandaSystem::init_type();
}


// ReferenceCount


MemoryBase *
ReferenceCount_C_upcast_to_MemoryBase_p_p(ReferenceCount *param0) {
    return (MemoryBase *)param0;
}


int
ReferenceCount_C_get_ref_count_i_p(ReferenceCount const *param0) {
    return (*param0).get_ref_count();
}


void
ReferenceCount_C_ref_v_p(ReferenceCount const *param0) {
    (*param0).ref();
}


bool
ReferenceCount_C_unref_B_p(ReferenceCount const *param0) {
    return (*param0).unref();
}


bool
ReferenceCount_C_test_ref_count_integrity_B_p(ReferenceCount const *param0) {
    return (*param0).test_ref_count_integrity();
}


bool
ReferenceCount_C_test_ref_count_nonzero_B_p(ReferenceCount const *param0) {
    return (*param0).test_ref_count_nonzero();
}


void
ReferenceCount_C_local_object_v_p(ReferenceCount *param0) {
    (*param0).local_object();
}


bool
ReferenceCount_C_has_weak_list_B_p(ReferenceCount const *param0) {
    return (*param0).has_weak_list();
}


WeakReferenceList *
ReferenceCount_C_get_weak_list_p_p(ReferenceCount const *param0) {
    return (*param0).get_weak_list();
}


WeakReferenceList *
ReferenceCount_C_weak_ref_p_p(ReferenceCount *param0) {
    return (*param0).weak_ref();
}


void
ReferenceCount_C_weak_unref_v_p(ReferenceCount *param0) {
    (*param0).weak_unref();
}


bool
ReferenceCount_C_ref_if_nonzero_B_p(ReferenceCount const *param0) {
    return (*param0).ref_if_nonzero();
}


int
ReferenceCount_C_get_class_type_i_v() {
    return (ReferenceCount::get_class_type()).get_index();
}


void
ReferenceCount_C_init_type_v_v() {
    ReferenceCount::init_type();
}


// TextEncoder


TextNode *
TextEncoder_C_downcast_to_TextNode_p_p(TextEncoder *param0) {
    return (TextNode *)param0;
}


// TextNode


PandaNode *
TextNode_C_upcast_to_PandaNode_p_p(TextNode *param0) {
    return (PandaNode *)param0;
}


TextEncoder *
TextNode_C_upcast_to_TextEncoder_p_p(TextNode *param0) {
    return (TextEncoder *)param0;
}


TextProperties *
TextNode_C_upcast_to_TextProperties_p_p(TextNode *param0) {
    return (TextProperties *)param0;
}


TextNode *
TextNode_C_ctor_p_s(char const *param0) {
    return new TextNode(std::string(param0));
}


TextNode *
TextNode_C_ctor_p_sp(char const *param0, TextProperties const *param1) {
    return new TextNode(std::string(param0), *param1);
}


PN_stdfloat
TextNode_C_get_line_height_f_p(TextNode const *param0) {
    return (*param0).get_line_height();
}


void
TextNode_C_set_max_rows_v_pi(TextNode *param0, int param1) {
    (*param0).set_max_rows(param1);
}


void
TextNode_C_clear_max_rows_v_p(TextNode *param0) {
    (*param0).clear_max_rows();
}


bool
TextNode_C_has_max_rows_B_p(TextNode const *param0) {
    return (*param0).has_max_rows();
}


int
TextNode_C_get_max_rows_i_p(TextNode const *param0) {
    return (*param0).get_max_rows();
}


bool
TextNode_C_has_overflow_B_p(TextNode const *param0) {
    return (*param0).has_overflow();
}


void
TextNode_C_set_frame_color_v_pp(TextNode *param0, LColor const *param1) {
    (*param0).set_frame_color(*param1);
}


void
TextNode_C_set_frame_color_v_pffff(TextNode *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    (*param0).set_frame_color(param1, param2, param3, param4);
}


LColor *
TextNode_C_get_frame_color_p_p(TextNode const *param0) {
    return new LColor((*param0).get_frame_color());
}


void
TextNode_C_set_card_border_v_pff(TextNode *param0, PN_stdfloat param1, PN_stdfloat param2) {
    (*param0).set_card_border(param1, param2);
}


void
TextNode_C_clear_card_border_v_p(TextNode *param0) {
    (*param0).clear_card_border();
}


PN_stdfloat
TextNode_C_get_card_border_size_f_p(TextNode const *param0) {
    return (*param0).get_card_border_size();
}


PN_stdfloat
TextNode_C_get_card_border_uv_portion_f_p(TextNode const *param0) {
    return (*param0).get_card_border_uv_portion();
}


bool
TextNode_C_has_card_border_B_p(TextNode const *param0) {
    return (*param0).has_card_border();
}


void
TextNode_C_set_card_color_v_pp(TextNode *param0, LColor const *param1) {
    (*param0).set_card_color(*param1);
}


void
TextNode_C_set_card_color_v_pffff(TextNode *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    (*param0).set_card_color(param1, param2, param3, param4);
}


LColor *
TextNode_C_get_card_color_p_p(TextNode const *param0) {
    return new LColor((*param0).get_card_color());
}


void
TextNode_C_set_card_texture_v_pp(TextNode *param0, Texture *param1) {
    (*param0).set_card_texture(param1);
}


void
TextNode_C_clear_card_texture_v_p(TextNode *param0) {
    (*param0).clear_card_texture();
}


bool
TextNode_C_has_card_texture_B_p(TextNode const *param0) {
    return (*param0).has_card_texture();
}


Texture *
TextNode_C_get_card_texture_p_p(TextNode const *param0) {
    return (*param0).get_card_texture();
}


void
TextNode_C_set_frame_as_margin_v_pffff(TextNode *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    (*param0).set_frame_as_margin(param1, param2, param3, param4);
}


void
TextNode_C_set_frame_actual_v_pffff(TextNode *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    (*param0).set_frame_actual(param1, param2, param3, param4);
}


void
TextNode_C_clear_frame_v_p(TextNode *param0) {
    (*param0).clear_frame();
}


bool
TextNode_C_has_frame_B_p(TextNode const *param0) {
    return (*param0).has_frame();
}


bool
TextNode_C_is_frame_as_margin_B_p(TextNode const *param0) {
    return (*param0).is_frame_as_margin();
}


LVecBase4 *
TextNode_C_get_frame_as_set_p_p(TextNode const *param0) {
    return new LVecBase4((*param0).get_frame_as_set());
}


LVecBase4 *
TextNode_C_get_frame_actual_p_p(TextNode const *param0) {
    return new LVecBase4((*param0).get_frame_actual());
}


void
TextNode_C_set_frame_line_width_v_pf(TextNode *param0, PN_stdfloat param1) {
    (*param0).set_frame_line_width(param1);
}


PN_stdfloat
TextNode_C_get_frame_line_width_f_p(TextNode const *param0) {
    return (*param0).get_frame_line_width();
}


void
TextNode_C_set_frame_corners_v_pB(TextNode *param0, bool param1) {
    (*param0).set_frame_corners(param1);
}


bool
TextNode_C_get_frame_corners_B_p(TextNode const *param0) {
    return (*param0).get_frame_corners();
}


void
TextNode_C_set_card_as_margin_v_pffff(TextNode *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    (*param0).set_card_as_margin(param1, param2, param3, param4);
}


void
TextNode_C_set_card_actual_v_pffff(TextNode *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    (*param0).set_card_actual(param1, param2, param3, param4);
}


void
TextNode_C_set_card_decal_v_pB(TextNode *param0, bool param1) {
    (*param0).set_card_decal(param1);
}


void
TextNode_C_clear_card_v_p(TextNode *param0) {
    (*param0).clear_card();
}


bool
TextNode_C_has_card_B_p(TextNode const *param0) {
    return (*param0).has_card();
}


bool
TextNode_C_get_card_decal_B_p(TextNode const *param0) {
    return (*param0).get_card_decal();
}


bool
TextNode_C_is_card_as_margin_B_p(TextNode const *param0) {
    return (*param0).is_card_as_margin();
}


LVecBase4 *
TextNode_C_get_card_as_set_p_p(TextNode const *param0) {
    return new LVecBase4((*param0).get_card_as_set());
}


LVecBase4 *
TextNode_C_get_card_actual_p_p(TextNode const *param0) {
    return new LVecBase4((*param0).get_card_actual());
}


LVecBase4 *
TextNode_C_get_card_transformed_p_p(TextNode const *param0) {
    return new LVecBase4((*param0).get_card_transformed());
}


void
TextNode_C_set_transform_v_pp(TextNode *param0, LMatrix4 const *param1) {
    (*param0).set_transform(*param1);
}


LMatrix4 *
TextNode_C_get_transform_p_p(TextNode const *param0) {
    return new LMatrix4((*param0).get_transform());
}


void
TextNode_C_set_coordinate_system_v_pp(TextNode *param0, CoordinateSystem param1) {
    (*param0).set_coordinate_system(param1);
}


CoordinateSystem
TextNode_C_get_coordinate_system_p_p(TextNode const *param0) {
    return (*param0).get_coordinate_system();
}


void
TextNode_C_set_usage_hint_v_pp(TextNode *param0, GeomEnums::UsageHint param1) {
    (*param0).set_usage_hint(param1);
}


GeomEnums::UsageHint
TextNode_C_get_usage_hint_p_p(TextNode const *param0) {
    return (*param0).get_usage_hint();
}


void
TextNode_C_set_flatten_flags_v_pi(TextNode *param0, int param1) {
    (*param0).set_flatten_flags(param1);
}


int
TextNode_C_get_flatten_flags_i_p(TextNode const *param0) {
    return (*param0).get_flatten_flags();
}


void
TextNode_C_set_font_v_pp(TextNode *param0, TextFont *param1) {
    (*param0).set_font(param1);
}


void
TextNode_C_clear_font_v_p(TextNode *param0) {
    (*param0).clear_font();
}


void
TextNode_C_set_small_caps_v_pB(TextNode *param0, bool param1) {
    (*param0).set_small_caps(param1);
}


void
TextNode_C_clear_small_caps_v_p(TextNode *param0) {
    (*param0).clear_small_caps();
}


void
TextNode_C_set_small_caps_scale_v_pf(TextNode *param0, PN_stdfloat param1) {
    (*param0).set_small_caps_scale(param1);
}


void
TextNode_C_clear_small_caps_scale_v_p(TextNode *param0) {
    (*param0).clear_small_caps_scale();
}


void
TextNode_C_set_slant_v_pf(TextNode *param0, PN_stdfloat param1) {
    (*param0).set_slant(param1);
}


void
TextNode_C_clear_slant_v_p(TextNode *param0) {
    (*param0).clear_slant();
}


void
TextNode_C_set_align_v_pp(TextNode *param0, TextProperties::Alignment param1) {
    (*param0).set_align(param1);
}


void
TextNode_C_clear_align_v_p(TextNode *param0) {
    (*param0).clear_align();
}


void
TextNode_C_set_indent_v_pf(TextNode *param0, PN_stdfloat param1) {
    (*param0).set_indent(param1);
}


void
TextNode_C_clear_indent_v_p(TextNode *param0) {
    (*param0).clear_indent();
}


void
TextNode_C_set_wordwrap_v_pf(TextNode *param0, PN_stdfloat param1) {
    (*param0).set_wordwrap(param1);
}


void
TextNode_C_clear_wordwrap_v_p(TextNode *param0) {
    (*param0).clear_wordwrap();
}


void
TextNode_C_set_text_color_v_pp(TextNode *param0, LColor const *param1) {
    (*param0).set_text_color(*param1);
}


void
TextNode_C_set_text_color_v_pffff(TextNode *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    (*param0).set_text_color(param1, param2, param3, param4);
}


void
TextNode_C_clear_text_color_v_p(TextNode *param0) {
    (*param0).clear_text_color();
}


void
TextNode_C_set_shadow_color_v_pp(TextNode *param0, LColor const *param1) {
    (*param0).set_shadow_color(*param1);
}


void
TextNode_C_set_shadow_color_v_pffff(TextNode *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    (*param0).set_shadow_color(param1, param2, param3, param4);
}


void
TextNode_C_clear_shadow_color_v_p(TextNode *param0) {
    (*param0).clear_shadow_color();
}


void
TextNode_C_set_shadow_v_pp(TextNode *param0, LVecBase2 const *param1) {
    (*param0).set_shadow(*param1);
}


void
TextNode_C_set_shadow_v_pff(TextNode *param0, PN_stdfloat param1, PN_stdfloat param2) {
    (*param0).set_shadow(param1, param2);
}


void
TextNode_C_clear_shadow_v_p(TextNode *param0) {
    (*param0).clear_shadow();
}


void
TextNode_C_set_bin_v_ps(TextNode *param0, char const *param1) {
    (*param0).set_bin(std::string(param1));
}


void
TextNode_C_clear_bin_v_p(TextNode *param0) {
    (*param0).clear_bin();
}


int
TextNode_C_set_draw_order_i_pi(TextNode *param0, int param1) {
    return (*param0).set_draw_order(param1);
}


void
TextNode_C_clear_draw_order_v_p(TextNode *param0) {
    (*param0).clear_draw_order();
}


void
TextNode_C_set_tab_width_v_pf(TextNode *param0, PN_stdfloat param1) {
    (*param0).set_tab_width(param1);
}


void
TextNode_C_clear_tab_width_v_p(TextNode *param0) {
    (*param0).clear_tab_width();
}


void
TextNode_C_set_glyph_scale_v_pf(TextNode *param0, PN_stdfloat param1) {
    (*param0).set_glyph_scale(param1);
}


void
TextNode_C_clear_glyph_scale_v_p(TextNode *param0) {
    (*param0).clear_glyph_scale();
}


void
TextNode_C_set_glyph_shift_v_pf(TextNode *param0, PN_stdfloat param1) {
    (*param0).set_glyph_shift(param1);
}


void
TextNode_C_clear_glyph_shift_v_p(TextNode *param0) {
    (*param0).clear_glyph_shift();
}


char const *
TextNode_C_get_wordwrapped_text_s_p(TextNode const *param0) {
    static std::string string_holder = (*param0).get_wordwrapped_text();
    return string_holder.c_str();
}


PN_stdfloat
TextNode_C_calc_width_f_ps(TextNode const *param0, char const *param1) {
    return (*param0).calc_width(std::string(param1));
}


PN_stdfloat
TextNode_C_calc_width_f_pp(TextNode const *param0, wchar_t const *param1) {
    return (*param0).calc_width(std::wstring(param1));
}


PN_stdfloat
TextNode_C_calc_width_f_pp_1_f_pp(TextNode const *param0, wchar_t param1) {
    return (*param0).calc_width(param1);
}


bool
TextNode_C_has_exact_character_B_pp(TextNode const *param0, wchar_t param1) {
    return (*param0).has_exact_character(param1);
}


bool
TextNode_C_has_character_B_pp(TextNode const *param0, wchar_t param1) {
    return (*param0).has_character(param1);
}


bool
TextNode_C_is_whitespace_B_pp(TextNode const *param0, wchar_t param1) {
    return (*param0).is_whitespace(param1);
}


wchar_t const *
TextNode_C_get_wordwrapped_wtext_p_p(TextNode const *param0) {
    static std::wstring string_holder = (*param0).get_wordwrapped_wtext();
    return string_holder.c_str();
}


void
TextNode_C_output_v_pp(TextNode const *param0, std::ostream *param1) {
    (*param0).output(*param1);
}


void
TextNode_C_write_v_ppi(TextNode const *param0, std::ostream *param1, int param2) {
    (*param0).write(*param1, param2);
}


void
TextNode_C_write_v_pp(TextNode const *param0, std::ostream *param1) {
    (*param0).write(*param1);
}


PN_stdfloat
TextNode_C_get_left_f_p(TextNode const *param0) {
    return (*param0).get_left();
}


PN_stdfloat
TextNode_C_get_right_f_p(TextNode const *param0) {
    return (*param0).get_right();
}


PN_stdfloat
TextNode_C_get_bottom_f_p(TextNode const *param0) {
    return (*param0).get_bottom();
}


PN_stdfloat
TextNode_C_get_top_f_p(TextNode const *param0) {
    return (*param0).get_top();
}


PN_stdfloat
TextNode_C_get_height_f_p(TextNode const *param0) {
    return (*param0).get_height();
}


PN_stdfloat
TextNode_C_get_width_f_p(TextNode const *param0) {
    return (*param0).get_width();
}


LPoint3 *
TextNode_C_get_upper_left_3d_p_p(TextNode const *param0) {
    return new LPoint3((*param0).get_upper_left_3d());
}


LPoint3 *
TextNode_C_get_lower_right_3d_p_p(TextNode const *param0) {
    return new LPoint3((*param0).get_lower_right_3d());
}


int
TextNode_C_get_num_rows_i_p(TextNode const *param0) {
    return (*param0).get_num_rows();
}


PointerTo< PandaNode > *
TextNode_C_generate_p_p(TextNode *param0) {
    return new PointerTo< PandaNode >((*param0).generate());
}


void
TextNode_C_update_v_p(TextNode *param0) {
    (*param0).update();
}


void
TextNode_C_force_update_v_p(TextNode *param0) {
    (*param0).force_update();
}


PointerTo< PandaNode > *
TextNode_C_get_internal_geom_p_p(TextNode const *param0) {
    return new PointerTo< PandaNode >((*param0).get_internal_geom());
}


TextFont *
TextNode_C_get_font_p_p(TextNode const *param0) {
    return (*param0).get_font();
}


bool
TextNode_C_get_small_caps_B_p(TextNode const *param0) {
    return (*param0).get_small_caps();
}


PN_stdfloat
TextNode_C_get_small_caps_scale_f_p(TextNode const *param0) {
    return (*param0).get_small_caps_scale();
}


PN_stdfloat
TextNode_C_get_slant_f_p(TextNode const *param0) {
    return (*param0).get_slant();
}


bool
TextNode_C_get_underscore_B_p(TextNode const *param0) {
    return (*param0).get_underscore();
}


void
TextNode_C_set_underscore_v_pB(TextNode *param0, bool param1) {
    (*param0).set_underscore(param1);
}


PN_stdfloat
TextNode_C_get_underscore_height_f_p(TextNode const *param0) {
    return (*param0).get_underscore_height();
}


void
TextNode_C_set_underscore_height_v_pf(TextNode *param0, PN_stdfloat param1) {
    (*param0).set_underscore_height(param1);
}


TextProperties::Alignment
TextNode_C_get_align_p_p(TextNode const *param0) {
    return (*param0).get_align();
}


PN_stdfloat
TextNode_C_get_indent_f_p(TextNode const *param0) {
    return (*param0).get_indent();
}


PN_stdfloat
TextNode_C_get_wordwrap_f_p(TextNode const *param0) {
    return (*param0).get_wordwrap();
}


bool
TextNode_C_get_preserve_trailing_whitespace_B_p(TextNode const *param0) {
    return (*param0).get_preserve_trailing_whitespace();
}


void
TextNode_C_set_preserve_trailing_whitespace_v_pB(TextNode *param0, bool param1) {
    (*param0).set_preserve_trailing_whitespace(param1);
}


LColor *
TextNode_C_get_text_color_p_p(TextNode const *param0) {
    return new LColor((*param0).get_text_color());
}


LColor *
TextNode_C_get_shadow_color_p_p(TextNode const *param0) {
    return new LColor((*param0).get_shadow_color());
}


LVector2 *
TextNode_C_get_shadow_p_p(TextNode const *param0) {
    return new LVector2((*param0).get_shadow());
}


char const *
TextNode_C_get_bin_s_p(TextNode const *param0) {
    return ((*param0).get_bin()).c_str();
}


int
TextNode_C_get_draw_order_i_p(TextNode const *param0) {
    return (*param0).get_draw_order();
}


PN_stdfloat
TextNode_C_get_tab_width_f_p(TextNode const *param0) {
    return (*param0).get_tab_width();
}


PN_stdfloat
TextNode_C_get_glyph_scale_f_p(TextNode const *param0) {
    return (*param0).get_glyph_scale();
}


PN_stdfloat
TextNode_C_get_glyph_shift_f_p(TextNode const *param0) {
    return (*param0).get_glyph_shift();
}


PN_stdfloat
TextNode_C_get_text_scale_f_p(TextNode const *param0) {
    return (*param0).get_text_scale();
}


void
TextNode_C_set_text_scale_v_pf(TextNode *param0, PN_stdfloat param1) {
    (*param0).set_text_scale(param1);
}


void
TextNode_C_text_changed_v_p(TextNode *param0) {
    (*param0).text_changed();
}


int
TextNode_C_get_unsafe_to_apply_attribs_i_p(TextNode const *param0) {
    return (*param0).get_unsafe_to_apply_attribs();
}


void
TextNode_C_apply_attribs_to_vertices_v_ppip(TextNode *param0, AccumulatedAttribs const *param1, int param2, GeomTransformer *param3) {
    (*param0).apply_attribs_to_vertices(*param1, param2, *param3);
}


bool
TextNode_C_cull_callback_B_ppp(TextNode *param0, CullTraverser *param1, CullTraverserData *param2) {
    return (*param0).cull_callback(param1, *param2);
}


bool
TextNode_C_is_renderable_B_p(TextNode const *param0) {
    return (*param0).is_renderable();
}


void
TextNode_C_r_prepare_scene_v_ppppp(TextNode *param0, GraphicsStateGuardianBase *param1, RenderState const *param2, GeomTransformer *param3, Thread *param4) {
    (*param0).r_prepare_scene(param1, param2, *param3, param4);
}


int
TextNode_C_get_class_type_i_v() {
    return (TextNode::get_class_type()).get_index();
}


void
TextNode_C_init_type_v_v() {
    TextNode::init_type();
}


int
TextNode_C_get_type_i_p(TextNode const *param0) {
    return ((*param0).get_type()).get_index();
}


int
TextNode_C_force_init_type_i_p(TextNode *param0) {
    return ((*param0).force_init_type()).get_index();
}


// TextProperties


TextNode *
TextProperties_C_downcast_to_TextNode_p_p(TextProperties *param0) {
    return (TextNode *)param0;
}


// Thread


TypedReferenceCount *
Thread_C_upcast_to_TypedReferenceCount_p_p(Thread *param0) {
    return (TypedReferenceCount *)param0;
}


Namable *
Thread_C_upcast_to_Namable_p_p(Thread *param0) {
    return (Namable *)param0;
}


PointerTo< Thread > *
Thread_C_bind_thread_p_ss(char const *param0, char const *param1) {
    return new PointerTo< Thread >(Thread::bind_thread(std::string(param0), std::string(param1)));
}


char const *
Thread_C_get_sync_name_s_p(Thread const *param0) {
    return ((*param0).get_sync_name()).c_str();
}


int
Thread_C_get_pstats_index_i_p(Thread const *param0) {
    return (*param0).get_pstats_index();
}


int
Thread_C_get_python_index_i_p(Thread const *param0) {
    return (*param0).get_python_index();
}


char const *
Thread_C_get_unique_id_s_p(Thread const *param0) {
    static std::string string_holder = (*param0).get_unique_id();
    return string_holder.c_str();
}


int
Thread_C_get_pipeline_stage_i_p(Thread const *param0) {
    return (*param0).get_pipeline_stage();
}


void
Thread_C_set_pipeline_stage_v_pi(Thread *param0, int param1) {
    (*param0).set_pipeline_stage(param1);
}


void
Thread_C_set_min_pipeline_stage_v_pi(Thread *param0, int param1) {
    (*param0).set_min_pipeline_stage(param1);
}


Thread *
Thread_C_get_main_thread_p_v() {
    return Thread::get_main_thread();
}


Thread *
Thread_C_get_external_thread_p_v() {
    return Thread::get_external_thread();
}


Thread *
Thread_C_get_current_thread_p_v() {
    return Thread::get_current_thread();
}


int
Thread_C_get_current_pipeline_stage_i_v() {
    return Thread::get_current_pipeline_stage();
}


bool
Thread_C_is_threading_supported_B_v() {
    return Thread::is_threading_supported();
}


bool
Thread_C_is_true_threads_B_v() {
    return Thread::is_true_threads();
}


bool
Thread_C_is_simple_threads_B_v() {
    return Thread::is_simple_threads();
}


void
Thread_C_sleep_v_d(double param0) {
    Thread::sleep(param0);
}


void
Thread_C_force_yield_v_v() {
    Thread::force_yield();
}


void
Thread_C_consider_yield_v_v() {
    Thread::consider_yield();
}


void
Thread_C_output_v_pp(Thread const *param0, std::ostream *param1) {
    (*param0).output(*param1);
}


void
Thread_C_output_blocker_v_pp(Thread const *param0, std::ostream *param1) {
    (*param0).output_blocker(*param1);
}


void
Thread_C_write_status_v_p(std::ostream *param0) {
    Thread::write_status(*param0);
}


bool
Thread_C_is_started_B_p(Thread const *param0) {
    return (*param0).is_started();
}


bool
Thread_C_is_joinable_B_p(Thread const *param0) {
    return (*param0).is_joinable();
}


bool
Thread_C_start_B_ppB(Thread *param0, ThreadPriority param1, bool param2) {
    return (*param0).start(param1, param2);
}


void
Thread_C_join_v_p(Thread *param0) {
    (*param0).join();
}


void
Thread_C_preempt_v_p(Thread *param0) {
    (*param0).preempt();
}


TypedReferenceCount *
Thread_C_get_current_task_p_p(Thread const *param0) {
    return (*param0).get_current_task();
}


void
Thread_C_set_python_index_v_pi(Thread *param0, int param1) {
    (*param0).set_python_index(param1);
}


void
Thread_C_prepare_for_exit_v_v() {
    Thread::prepare_for_exit();
}


void
Thread_C_set_pstats_index_v_pi(Thread *param0, int param1) {
    (*param0).set_pstats_index(param1);
}


void
Thread_C_set_pstats_callback_v_pp(Thread *param0, Thread::PStatsCallback *param1) {
    (*param0).set_pstats_callback(param1);
}


Thread::PStatsCallback *
Thread_C_get_pstats_callback_p_p(Thread const *param0) {
    return (*param0).get_pstats_callback();
}


int
Thread_C_get_class_type_i_v() {
    return (Thread::get_class_type()).get_index();
}


void
Thread_C_init_type_v_v() {
    Thread::init_type();
}


int
Thread_C_get_type_i_p(Thread const *param0) {
    return ((*param0).get_type()).get_index();
}


int
Thread_C_force_init_type_i_p(Thread *param0) {
    return ((*param0).force_init_type()).get_index();
}


// TypedObject


MemoryBase *
TypedObject_C_upcast_to_MemoryBase_p_p(TypedObject *param0) {
    return (MemoryBase *)param0;
}


int
TypedObject_C_get_type_i_p(TypedObject const *param0) {
    return ((*param0).get_type()).get_index();
}


int
TypedObject_C_get_type_index_i_p(TypedObject const *param0) {
    return (*param0).get_type_index();
}


bool
TypedObject_C_is_of_type_B_pi(TypedObject const *param0, int param1) {
    return (*param0).is_of_type(TypeHandle::from_index(param1));
}


bool
TypedObject_C_is_exact_type_B_pi(TypedObject const *param0, int param1) {
    return (*param0).is_exact_type(TypeHandle::from_index(param1));
}


int
TypedObject_C_get_best_parent_from_Set_i_pp(TypedObject const *param0, std::set< int > const *param1) {
    return (*param0).get_best_parent_from_Set(*param1);
}


int
TypedObject_C_force_init_type_i_p(TypedObject *param0) {
    return ((*param0).force_init_type()).get_index();
}


TypedObject *
TypedObject_C_as_typed_object_p_p(TypedObject *param0) {
    return (*param0).as_typed_object();
}


TypedObject const *
TypedObject_C_as_typed_object_p_p_1_p_p(TypedObject const *param0) {
    return (*param0).as_typed_object();
}


int
TypedObject_C_get_class_type_i_v() {
    return (TypedObject::get_class_type()).get_index();
}


void
TypedObject_C_init_type_v_v() {
    TypedObject::init_type();
}


// TypedReferenceCount


Thread *
TypedReferenceCount_C_downcast_to_Thread_p_p(TypedReferenceCount *param0) {
    return (Thread *)param0;
}


// TypedWritable


TypedWritable *
TypedWritable_C_ctor_p_v() {
    return new TypedWritable();
}


TypedWritable *
TypedWritable_C_ctor_p_p(TypedWritable const *param0) {
    return new TypedWritable(*param0);
}


void
TypedWritable_C_write_datagram_v_ppp(TypedWritable *param0, BamWriter *param1, Datagram *param2) {
    (*param0).write_datagram(param1, *param2);
}


void
TypedWritable_C_update_bam_nested_v_pp(TypedWritable *param0, BamWriter *param1) {
    (*param0).update_bam_nested(param1);
}


bool
TypedWritable_C_require_fully_complete_B_p(TypedWritable const *param0) {
    return (*param0).require_fully_complete();
}


void
TypedWritable_C_fillin_v_ppp(TypedWritable *param0, DatagramIterator *param1, BamReader *param2) {
    (*param0).fillin(*param1, param2);
}


void
TypedWritable_C_finalize_v_pp(TypedWritable *param0, BamReader *param1) {
    (*param0).finalize(param1);
}


ReferenceCount *
TypedWritable_C_as_reference_count_p_p(TypedWritable *param0) {
    return (*param0).as_reference_count();
}


void
TypedWritable_C_mark_bam_modified_v_p(TypedWritable *param0) {
    (*param0).mark_bam_modified();
}


UpdateSeq *
TypedWritable_C_get_bam_modified_p_p(TypedWritable const *param0) {
    return new UpdateSeq((*param0).get_bam_modified());
}


vector_uchar
TypedWritable_C_encode_to_bam_stream_p_p(TypedWritable const *param0) {
    return (*param0).encode_to_bam_stream();
}


bool
TypedWritable_C_encode_to_bam_stream_B_ppp(TypedWritable const *param0, vector_uchar *param1, BamWriter *param2) {
    return (*param0).encode_to_bam_stream(*param1, param2);
}


bool
TypedWritable_C_encode_to_bam_stream_B_pp(TypedWritable const *param0, vector_uchar *param1) {
    return (*param0).encode_to_bam_stream(*param1);
}


int
TypedWritable_C_get_class_type_i_v() {
    return (TypedWritable::get_class_type()).get_index();
}


void
TypedWritable_C_init_type_v_v() {
    TypedWritable::init_type();
}


int
TypedWritable_C_force_init_type_i_p(TypedWritable *param0) {
    return ((*param0).force_init_type()).get_index();
}


// TypedWritableReferenceCount


PandaNode *
TypedWritableReferenceCount_C_downcast_to_PandaNode_p_p(TypedWritableReferenceCount *param0) {
    return (PandaNode *)param0;
}


GeomVertexFormat *
TypedWritableReferenceCount_C_downcast_to_GeomVertexFormat_p_p(TypedWritableReferenceCount *param0) {
    return (GeomVertexFormat *)param0;
}


// WindowFramework


PandaFramework *
WindowFramework_C_get_panda_framework_p_p(WindowFramework const *param0) {
    return (*param0).get_panda_framework();
}


GraphicsWindow *
WindowFramework_C_get_graphics_window_p_p(WindowFramework const *param0) {
    return (*param0).get_graphics_window();
}


GraphicsOutput *
WindowFramework_C_get_graphics_output_p_p(WindowFramework const *param0) {
    return (*param0).get_graphics_output();
}


NodePath *
WindowFramework_C_get_camera_group_p_p(WindowFramework *param0) {
    return new NodePath((*param0).get_camera_group());
}


int
WindowFramework_C_get_num_cameras_i_p(WindowFramework const *param0) {
    return (*param0).get_num_cameras();
}


Camera *
WindowFramework_C_get_camera_p_pi(WindowFramework const *param0, int param1) {
    return (*param0).get_camera(param1);
}


DisplayRegion *
WindowFramework_C_get_display_region_2d_p_p(WindowFramework const *param0) {
    return (*param0).get_display_region_2d();
}


DisplayRegion *
WindowFramework_C_get_display_region_3d_p_p(WindowFramework const *param0) {
    return (*param0).get_display_region_3d();
}


NodePath *
WindowFramework_C_get_render_p_p(WindowFramework *param0) {
    return new NodePath((*param0).get_render());
}


NodePath *
WindowFramework_C_get_render_2d_p_p(WindowFramework *param0) {
    return new NodePath((*param0).get_render_2d());
}


NodePath *
WindowFramework_C_get_aspect_2d_p_p(WindowFramework *param0) {
    return new NodePath((*param0).get_aspect_2d());
}


NodePath *
WindowFramework_C_get_pixel_2d_p_p(WindowFramework *param0) {
    return new NodePath((*param0).get_pixel_2d());
}


NodePath *
WindowFramework_C_get_mouse_p_p(WindowFramework *param0) {
    return new NodePath((*param0).get_mouse());
}


NodePath *
WindowFramework_C_get_button_thrower_p_p(WindowFramework *param0) {
    return new NodePath((*param0).get_button_thrower());
}


void
WindowFramework_C_enable_keyboard_v_p(WindowFramework *param0) {
    (*param0).enable_keyboard();
}


void
WindowFramework_C_setup_trackball_v_p(WindowFramework *param0) {
    (*param0).setup_trackball();
}


void
WindowFramework_C_center_trackball_v_pp(WindowFramework *param0, NodePath const *param1) {
    (*param0).center_trackball(*param1);
}


bool
WindowFramework_C_load_models_B_ppp(WindowFramework *param0, NodePath const *param1, pvector< Filename > const *param2) {
    return (*param0).load_models(*param1, *param2);
}


NodePath *
WindowFramework_C_load_model_p_ppp(WindowFramework *param0, NodePath const *param1, Filename *param2) {
    return new NodePath((*param0).load_model(*param1, *param2));
}


NodePath *
WindowFramework_C_load_default_model_p_pp(WindowFramework *param0, NodePath const *param1) {
    return new NodePath((*param0).load_default_model(*param1));
}


void
WindowFramework_C_loop_animations_v_pi(WindowFramework *param0, int param1) {
    (*param0).loop_animations(param1);
}


void
WindowFramework_C_loop_animations_v_p(WindowFramework *param0) {
    (*param0).loop_animations();
}


void
WindowFramework_C_stagger_animations_v_p(WindowFramework *param0) {
    (*param0).stagger_animations();
}


void
WindowFramework_C_next_anim_control_v_p(WindowFramework *param0) {
    (*param0).next_anim_control();
}


void
WindowFramework_C_set_anim_controls_v_pB(WindowFramework *param0, bool param1) {
    (*param0).set_anim_controls(param1);
}


bool
WindowFramework_C_get_anim_controls_B_p(WindowFramework const *param0) {
    return (*param0).get_anim_controls();
}


void
WindowFramework_C_adjust_dimensions_v_p(WindowFramework *param0) {
    (*param0).adjust_dimensions();
}


WindowFramework *
WindowFramework_C_split_window_p_pp(WindowFramework *param0, WindowFramework::SplitType param1) {
    return (*param0).split_window(param1);
}


WindowFramework *
WindowFramework_C_split_window_p_p(WindowFramework *param0) {
    return (*param0).split_window();
}


void
WindowFramework_C_set_wireframe_v_pBB(WindowFramework *param0, bool param1, bool param2) {
    (*param0).set_wireframe(param1, param2);
}


void
WindowFramework_C_set_wireframe_v_pB(WindowFramework *param0, bool param1) {
    (*param0).set_wireframe(param1);
}


void
WindowFramework_C_set_texture_v_pB(WindowFramework *param0, bool param1) {
    (*param0).set_texture(param1);
}


void
WindowFramework_C_set_two_sided_v_pB(WindowFramework *param0, bool param1) {
    (*param0).set_two_sided(param1);
}


void
WindowFramework_C_set_one_sided_reverse_v_pB(WindowFramework *param0, bool param1) {
    (*param0).set_one_sided_reverse(param1);
}


void
WindowFramework_C_set_lighting_v_pB(WindowFramework *param0, bool param1) {
    (*param0).set_lighting(param1);
}


void
WindowFramework_C_set_perpixel_v_pB(WindowFramework *param0, bool param1) {
    (*param0).set_perpixel(param1);
}


void
WindowFramework_C_set_background_type_v_pp(WindowFramework *param0, WindowFramework::BackgroundType param1) {
    (*param0).set_background_type(param1);
}


bool
WindowFramework_C_get_wireframe_B_p(WindowFramework const *param0) {
    return (*param0).get_wireframe();
}


bool
WindowFramework_C_get_wireframe_filled_B_p(WindowFramework const *param0) {
    return (*param0).get_wireframe_filled();
}


bool
WindowFramework_C_get_texture_B_p(WindowFramework const *param0) {
    return (*param0).get_texture();
}


bool
WindowFramework_C_get_two_sided_B_p(WindowFramework const *param0) {
    return (*param0).get_two_sided();
}


bool
WindowFramework_C_get_one_sided_reverse_B_p(WindowFramework const *param0) {
    return (*param0).get_one_sided_reverse();
}


bool
WindowFramework_C_get_lighting_B_p(WindowFramework const *param0) {
    return (*param0).get_lighting();
}


bool
WindowFramework_C_get_perpixel_B_p(WindowFramework const *param0) {
    return (*param0).get_perpixel();
}


WindowFramework::BackgroundType
WindowFramework_C_get_background_type_p_p(WindowFramework const *param0) {
    return (*param0).get_background_type();
}


TextFont *
WindowFramework_C_get_shuttle_controls_font_p_v() {
    return WindowFramework::get_shuttle_controls_font();
}


NodePath *
WindowFramework_C_make_camera_p_p(WindowFramework *param0) {
    return new NodePath((*param0).make_camera());
}


int
WindowFramework_C_get_class_type_i_v() {
    return (WindowFramework::get_class_type()).get_index();
}


void
WindowFramework_C_init_type_v_v() {
    WindowFramework::init_type();
}


int
WindowFramework_C_get_type_i_p(WindowFramework const *param0) {
    return ((*param0).get_type()).get_index();
}


int
WindowFramework_C_force_init_type_i_p(WindowFramework *param0) {
    return ((*param0).force_init_type()).get_index();
}


WindowFramework *
WindowFramework_C_ctor_p_p(WindowFramework const *param0) {
    return new WindowFramework(*param0);
}

