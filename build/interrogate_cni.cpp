/*
* This file was generated by:
* /data/cross/panda3d/build/panda3d-3.8.5-x86_64-unknown-linux-gnu/bin/interrogate -promiscuous -string -fnames -assert -c -v -S /data/cross/panda3d/build/panda3d-3.8.5-x86_64-unknown-linux-gnu/include -S /data/cross/panda3d/build/panda3d-3.8.5-x86_64-unknown-linux-gnu/include/parser-inc -S /usr/include -S /usr/include/x86_64-linux-gnu --oc ./build/interrogate_temp.cpp -srcdir ./lib -nomangle -od ./build/interrogate.in -module  -library  -DINTERROGATE -DCPPPARSER -D__STDC__=1 -D__cplusplus=201103L lib.cxx em.h lib.h
*
*/

#include "dtoolbase.h"
#include "interrogate_request.h"
#include "dconfig.h"
#include "pnotify.h"
#include <sstream>

#include "collisionBox.h"
#include "collisionCapsule.h"
#include "collisionEntry.h"
#include "collisionFloorMesh.h"
#include "collisionGeom.h"
#include "collisionHandler.h"
#include "collisionHandlerEvent.h"
#include "collisionHandlerFloor.h"
#include "collisionHandlerFluidPusher.h"
#include "collisionHandlerGravity.h"
#include "collisionHandlerHighestEvent.h"
#include "collisionHandlerPhysical.h"
#include "collisionHandlerPusher.h"
#include "collisionHandlerQueue.h"
#include "collisionInvSphere.h"
#include "collisionLevelState.h"
#include "collisionLevelStateBase.h"
#include "collisionLine.h"
#include "collisionNode.h"
#include "collisionParabola.h"
#include "collisionPlane.h"
#include "collisionPolygon.h"
#include "collisionRay.h"
#include "collisionRecorder.h"
#include "collisionSegment.h"
#include "collisionSolid.h"
#include "collisionSphere.h"
#include "collisionTraverser.h"
#include "collisionTube.h"
#include "collisionVisualizer.h"
#include <dlfcn.h>
#include "em.h"
#include "geomTriangles.h"
#include "geomVertexWriter.h"
#include "internalNameCollection.h"
#include <iostream>
#include "lib.h"
#include "loader.h"
#include "materialCollection.h"
#include "nodePath.h"
#include "nodePathCollection.h"
#include "pandaFramework.h"
#include "pandaSystem.h"
#include "pandabase.h"
#include <set>
#include "showBase.h"
#include "texture.h"
#include "texturePeeker.h"
#include "threadPriority.h"
#include <vector>


#if __GNUC__ >= 4
#define EXPORT_FUNC extern "C" __attribute__((used, visibility("default")))
#else
#define EXPORT_FUNC extern "C"
#endif


// 



// AnimControlCollection

EXPORT_FUNC CActor * AnimControlCollection_C_downcast_to_CActor_p_p(AnimControlCollection *param0);


// CActor

EXPORT_FUNC NodePath * CActor_C_upcast_to_NodePath_p_p(CActor *param0);
EXPORT_FUNC AnimControlCollection * CActor_C_upcast_to_AnimControlCollection_p_p(CActor *param0);
EXPORT_FUNC CActor * CActor_C_ctor_p_v();
EXPORT_FUNC CActor * CActor_C_ctor_p_p(CActor const *param0);
EXPORT_FUNC Dict * CActor_C_get_anim_map_p_p(CActor const *param0);
EXPORT_FUNC void CActor_C_add_v_pss(CActor *param0, char const *param1, char const *param2);
EXPORT_FUNC void CActor_C_load_actor_v_ppspi(CActor *param0, WindowFramework *param1, char const *param2, AnimMap const *param3, int param4);
EXPORT_FUNC NodePath * CActor_C_control_joint_p_ps(CActor *param0, char const *param1);
EXPORT_FUNC NodePath * CActor_C_expose_joint_p_ps(CActor *param0, char const *param1);


// CachedTypedWritableReferenceCount

EXPORT_FUNC int CachedTypedWritableReferenceCount_C_get_cache_ref_count_i_p(CachedTypedWritableReferenceCount const *param0);
EXPORT_FUNC void CachedTypedWritableReferenceCount_C_cache_ref_v_p(CachedTypedWritableReferenceCount const *param0);
EXPORT_FUNC bool CachedTypedWritableReferenceCount_C_cache_unref_B_p(CachedTypedWritableReferenceCount const *param0);
EXPORT_FUNC bool CachedTypedWritableReferenceCount_C_test_ref_count_integrity_B_p(CachedTypedWritableReferenceCount const *param0);
EXPORT_FUNC void CachedTypedWritableReferenceCount_C_cache_ref_only_v_p(CachedTypedWritableReferenceCount const *param0);
EXPORT_FUNC int CachedTypedWritableReferenceCount_C_get_class_type_i_v();
EXPORT_FUNC void CachedTypedWritableReferenceCount_C_init_type_v_v();


// Camera

EXPORT_FUNC Camera * Camera_C_ctor_p_p(Camera const *param0);
EXPORT_FUNC Camera * Camera_C_ctor_p_sp(char const *param0, Lens *param1);
EXPORT_FUNC Camera * Camera_C_ctor_p_s(char const *param0);
EXPORT_FUNC PandaNode * Camera_C_make_copy_p_p(Camera const *param0);
EXPORT_FUNC bool Camera_C_safe_to_flatten_B_p(Camera const *param0);
EXPORT_FUNC bool Camera_C_safe_to_transform_B_p(Camera const *param0);
EXPORT_FUNC void Camera_C_set_active_v_pB(Camera *param0, bool param1);
EXPORT_FUNC bool Camera_C_is_active_B_p(Camera const *param0);
EXPORT_FUNC void Camera_C_set_scene_v_pp(Camera *param0, NodePath const *param1);
EXPORT_FUNC NodePath const * Camera_C_get_scene_p_p(Camera const *param0);
EXPORT_FUNC std::size_t Camera_C_get_num_display_regions_l_p(Camera const *param0);
EXPORT_FUNC DisplayRegion * Camera_C_get_display_region_p_pl(Camera const *param0, std::size_t param1);
EXPORT_FUNC void Camera_C_set_camera_mask_v_pp(Camera *param0, DrawMask *param1);
EXPORT_FUNC DrawMask * Camera_C_get_camera_mask_p_p(Camera const *param0);
EXPORT_FUNC void Camera_C_set_cull_center_v_pp(Camera *param0, NodePath const *param1);
EXPORT_FUNC NodePath const * Camera_C_get_cull_center_p_p(Camera const *param0);
EXPORT_FUNC void Camera_C_set_cull_bounds_v_pp(Camera *param0, BoundingVolume *param1);
EXPORT_FUNC BoundingVolume * Camera_C_get_cull_bounds_p_p(Camera const *param0);
EXPORT_FUNC void Camera_C_set_lod_center_v_pp(Camera *param0, NodePath const *param1);
EXPORT_FUNC NodePath const * Camera_C_get_lod_center_p_p(Camera const *param0);
EXPORT_FUNC void Camera_C_set_initial_state_v_pp(Camera *param0, RenderState const *param1);
EXPORT_FUNC ConstPointerTo< RenderState > * Camera_C_get_initial_state_p_p(Camera const *param0);
EXPORT_FUNC void Camera_C_set_tag_state_key_v_ps(Camera *param0, char const *param1);
EXPORT_FUNC char const * Camera_C_get_tag_state_key_s_p(Camera const *param0);
EXPORT_FUNC void Camera_C_set_lod_scale_v_pf(Camera *param0, PN_stdfloat param1);
EXPORT_FUNC PN_stdfloat Camera_C_get_lod_scale_f_p(Camera const *param0);
EXPORT_FUNC void Camera_C_set_tag_state_v_psp(Camera *param0, char const *param1, RenderState const *param2);
EXPORT_FUNC void Camera_C_clear_tag_state_v_ps(Camera *param0, char const *param1);
EXPORT_FUNC void Camera_C_clear_tag_states_v_p(Camera *param0);
EXPORT_FUNC bool Camera_C_has_tag_state_B_ps(Camera const *param0, char const *param1);
EXPORT_FUNC ConstPointerTo< RenderState > * Camera_C_get_tag_state_p_ps(Camera const *param0, char const *param1);
EXPORT_FUNC void Camera_C_set_aux_scene_data_v_ppp(Camera *param0, NodePath const *param1, AuxSceneData *param2);
EXPORT_FUNC bool Camera_C_clear_aux_scene_data_B_pp(Camera *param0, NodePath const *param1);
EXPORT_FUNC AuxSceneData * Camera_C_get_aux_scene_data_p_pp(Camera const *param0, NodePath const *param1);
EXPORT_FUNC void Camera_C_list_aux_scene_data_v_pp(Camera const *param0, std::ostream *param1);
EXPORT_FUNC int Camera_C_cleanup_aux_scene_data_i_pp(Camera *param0, Thread *param1);
EXPORT_FUNC int Camera_C_cleanup_aux_scene_data_i_p(Camera *param0);
EXPORT_FUNC void Camera_C_register_with_read_factory_v_v();
EXPORT_FUNC void Camera_C_write_datagram_v_ppp(Camera *param0, BamWriter *param1, Datagram *param2);
EXPORT_FUNC int Camera_C_get_class_type_i_v();
EXPORT_FUNC void Camera_C_init_type_v_v();
EXPORT_FUNC int Camera_C_get_type_i_p(Camera const *param0);
EXPORT_FUNC int Camera_C_force_init_type_i_p(Camera *param0);


// CollisionNode

EXPORT_FUNC CollisionNode * CollisionNode_C_ctor_p_s(char const *param0);
EXPORT_FUNC bool CollisionNode_C_preserve_name_B_p(CollisionNode const *param0);
EXPORT_FUNC void CollisionNode_C_xform_v_pp(CollisionNode *param0, LMatrix4 const *param1);
EXPORT_FUNC bool CollisionNode_C_cull_callback_B_ppp(CollisionNode *param0, CullTraverser *param1, CullTraverserData *param2);
EXPORT_FUNC bool CollisionNode_C_is_renderable_B_p(CollisionNode const *param0);
EXPORT_FUNC void CollisionNode_C_set_collide_mask_v_pp(CollisionNode *param0, CollideMask *param1);
EXPORT_FUNC void CollisionNode_C_set_from_collide_mask_v_pp(CollisionNode *param0, CollideMask *param1);
EXPORT_FUNC void CollisionNode_C_set_into_collide_mask_v_pp(CollisionNode *param0, CollideMask *param1);
EXPORT_FUNC CollideMask * CollisionNode_C_get_from_collide_mask_p_p(CollisionNode const *param0);
EXPORT_FUNC CollideMask * CollisionNode_C_get_into_collide_mask_p_p(CollisionNode const *param0);
EXPORT_FUNC void CollisionNode_C_clear_solids_v_p(CollisionNode *param0);
EXPORT_FUNC std::size_t CollisionNode_C_get_num_solids_l_p(CollisionNode const *param0);
EXPORT_FUNC ConstPointerTo< CollisionSolid > * CollisionNode_C_get_solid_p_pl(CollisionNode const *param0, std::size_t param1);
EXPORT_FUNC PointerTo< CollisionSolid > * CollisionNode_C_modify_solid_p_pl(CollisionNode *param0, std::size_t param1);
EXPORT_FUNC void CollisionNode_C_set_solid_v_plp(CollisionNode *param0, std::size_t param1, CollisionSolid *param2);
EXPORT_FUNC void CollisionNode_C_insert_solid_v_plp(CollisionNode *param0, std::size_t param1, CollisionSolid const *param2);
EXPORT_FUNC void CollisionNode_C_remove_solid_v_pl(CollisionNode *param0, std::size_t param1);
EXPORT_FUNC std::size_t CollisionNode_C_add_solid_l_pp(CollisionNode *param0, CollisionSolid const *param1);
EXPORT_FUNC int CollisionNode_C_get_collider_sort_i_p(CollisionNode const *param0);
EXPORT_FUNC void CollisionNode_C_set_collider_sort_v_pi(CollisionNode *param0, int param1);
EXPORT_FUNC CollideMask * CollisionNode_C_get_default_collide_mask_p_v();
EXPORT_FUNC void CollisionNode_C_register_with_read_factory_v_v();
EXPORT_FUNC void CollisionNode_C_write_datagram_v_ppp(CollisionNode *param0, BamWriter *param1, Datagram *param2);
EXPORT_FUNC int CollisionNode_C_get_class_type_i_v();
EXPORT_FUNC void CollisionNode_C_init_type_v_v();
EXPORT_FUNC int CollisionNode_C_get_type_i_p(CollisionNode const *param0);
EXPORT_FUNC int CollisionNode_C_force_init_type_i_p(CollisionNode *param0);


// CollisionRay

EXPORT_FUNC CollisionRay * CollisionRay_C_ctor_p_v();
EXPORT_FUNC CollisionRay * CollisionRay_C_ctor_p_p(CollisionRay const *param0);
EXPORT_FUNC CollisionRay * CollisionRay_C_ctor_p_pp(LPoint3 const *param0, LVector3 const *param1);
EXPORT_FUNC CollisionRay * CollisionRay_C_ctor_p_ffffff(PN_stdfloat param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5);
EXPORT_FUNC CollisionSolid * CollisionRay_C_make_copy_p_p(CollisionRay *param0);
EXPORT_FUNC PointerTo< CollisionEntry > * CollisionRay_C_test_intersection_p_pp(CollisionRay const *param0, CollisionEntry const *param1);
EXPORT_FUNC void CollisionRay_C_xform_v_pp(CollisionRay *param0, LMatrix4 const *param1);
EXPORT_FUNC void CollisionRay_C_set_origin_v_pp(CollisionRay *param0, LPoint3 const *param1);
EXPORT_FUNC void CollisionRay_C_set_origin_v_pfff(CollisionRay *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3);
EXPORT_FUNC LPoint3 const * CollisionRay_C_get_origin_p_p(CollisionRay const *param0);
EXPORT_FUNC void CollisionRay_C_set_direction_v_pp(CollisionRay *param0, LVector3 const *param1);
EXPORT_FUNC void CollisionRay_C_set_direction_v_pfff(CollisionRay *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3);
EXPORT_FUNC LVector3 const * CollisionRay_C_get_direction_p_p(CollisionRay const *param0);
EXPORT_FUNC bool CollisionRay_C_set_from_lens_B_ppp(CollisionRay *param0, LensNode *param1, LPoint2 const *param2);
EXPORT_FUNC bool CollisionRay_C_set_from_lens_B_ppff(CollisionRay *param0, LensNode *param1, PN_stdfloat param2, PN_stdfloat param3);
EXPORT_FUNC void CollisionRay_C_register_with_read_factory_v_v();
EXPORT_FUNC void CollisionRay_C_write_datagram_v_ppp(CollisionRay *param0, BamWriter *param1, Datagram *param2);
EXPORT_FUNC int CollisionRay_C_get_class_type_i_v();
EXPORT_FUNC void CollisionRay_C_init_type_v_v();
EXPORT_FUNC int CollisionRay_C_get_type_i_p(CollisionRay const *param0);
EXPORT_FUNC int CollisionRay_C_force_init_type_i_p(CollisionRay *param0);


// CollisionSolid

EXPORT_FUNC CollisionSolid * CollisionSolid_C_make_copy_p_p(CollisionSolid *param0);
EXPORT_FUNC LPoint3 * CollisionSolid_C_get_collision_origin_p_p(CollisionSolid const *param0);
EXPORT_FUNC void CollisionSolid_C_set_tangible_v_pB(CollisionSolid *param0, bool param1);
EXPORT_FUNC bool CollisionSolid_C_is_tangible_B_p(CollisionSolid const *param0);
EXPORT_FUNC void CollisionSolid_C_set_effective_normal_v_pp(CollisionSolid *param0, LVector3 const *param1);
EXPORT_FUNC void CollisionSolid_C_clear_effective_normal_v_p(CollisionSolid *param0);
EXPORT_FUNC bool CollisionSolid_C_has_effective_normal_B_p(CollisionSolid const *param0);
EXPORT_FUNC LVector3 const * CollisionSolid_C_get_effective_normal_p_p(CollisionSolid const *param0);
EXPORT_FUNC void CollisionSolid_C_set_respect_effective_normal_v_pB(CollisionSolid *param0, bool param1);
EXPORT_FUNC bool CollisionSolid_C_get_respect_effective_normal_B_p(CollisionSolid const *param0);
EXPORT_FUNC ConstPointerTo< BoundingVolume > * CollisionSolid_C_get_bounds_p_p(CollisionSolid const *param0);
EXPORT_FUNC void CollisionSolid_C_set_bounds_v_pp(CollisionSolid *param0, BoundingVolume const *param1);
EXPORT_FUNC PointerTo< CollisionEntry > * CollisionSolid_C_test_intersection_p_pp(CollisionSolid const *param0, CollisionEntry const *param1);
EXPORT_FUNC void CollisionSolid_C_xform_v_pp(CollisionSolid *param0, LMatrix4 const *param1);
EXPORT_FUNC PointerTo< PandaNode > * CollisionSolid_C_get_viz_p_pppB(CollisionSolid const *param0, CullTraverser const *param1, CullTraverserData const *param2, bool param3);
EXPORT_FUNC PStatCollector * CollisionSolid_C_get_volume_pcollector_p_p(CollisionSolid *param0);
EXPORT_FUNC PStatCollector * CollisionSolid_C_get_test_pcollector_p_p(CollisionSolid *param0);
EXPORT_FUNC void CollisionSolid_C_output_v_pp(CollisionSolid const *param0, std::ostream *param1);
EXPORT_FUNC void CollisionSolid_C_write_v_ppi(CollisionSolid const *param0, std::ostream *param1, int param2);
EXPORT_FUNC void CollisionSolid_C_write_v_pp(CollisionSolid const *param0, std::ostream *param1);
EXPORT_FUNC void CollisionSolid_C_write_datagram_v_ppp(CollisionSolid *param0, BamWriter *param1, Datagram *param2);
EXPORT_FUNC int CollisionSolid_C_get_class_type_i_v();
EXPORT_FUNC void CollisionSolid_C_init_type_v_v();
EXPORT_FUNC int CollisionSolid_C_get_type_i_p(CollisionSolid const *param0);
EXPORT_FUNC int CollisionSolid_C_force_init_type_i_p(CollisionSolid *param0);


// CollisionTraverser

EXPORT_FUNC CollisionTraverser * CollisionTraverser_C_ctor_p_p(CollisionTraverser const *param0);
EXPORT_FUNC CollisionTraverser * CollisionTraverser_C_ctor_p_s(char const *param0);
EXPORT_FUNC CollisionTraverser * CollisionTraverser_C_ctor_p_v();
EXPORT_FUNC void CollisionTraverser_C_set_respect_prev_transform_v_pB(CollisionTraverser *param0, bool param1);
EXPORT_FUNC bool CollisionTraverser_C_get_respect_prev_transform_B_p(CollisionTraverser const *param0);
EXPORT_FUNC void CollisionTraverser_C_add_collider_v_ppp(CollisionTraverser *param0, NodePath const *param1, CollisionHandler *param2);
EXPORT_FUNC bool CollisionTraverser_C_remove_collider_B_pp(CollisionTraverser *param0, NodePath const *param1);
EXPORT_FUNC bool CollisionTraverser_C_has_collider_B_pp(CollisionTraverser const *param0, NodePath const *param1);
EXPORT_FUNC int CollisionTraverser_C_get_num_colliders_i_p(CollisionTraverser const *param0);
EXPORT_FUNC NodePath * CollisionTraverser_C_get_collider_p_pi(CollisionTraverser const *param0, int param1);
EXPORT_FUNC CollisionHandler * CollisionTraverser_C_get_handler_p_pp(CollisionTraverser const *param0, NodePath const *param1);
EXPORT_FUNC void CollisionTraverser_C_clear_colliders_v_p(CollisionTraverser *param0);
EXPORT_FUNC void CollisionTraverser_C_traverse_v_pp(CollisionTraverser *param0, NodePath const *param1);
EXPORT_FUNC void CollisionTraverser_C_set_recorder_v_pp(CollisionTraverser *param0, CollisionRecorder *param1);
EXPORT_FUNC bool CollisionTraverser_C_has_recorder_B_p(CollisionTraverser const *param0);
EXPORT_FUNC CollisionRecorder * CollisionTraverser_C_get_recorder_p_p(CollisionTraverser const *param0);
EXPORT_FUNC void CollisionTraverser_C_clear_recorder_v_p(CollisionTraverser *param0);
EXPORT_FUNC PandaNode * CollisionTraverser_C_show_collisions_p_pp(CollisionTraverser *param0, NodePath const *param1);
EXPORT_FUNC void CollisionTraverser_C_hide_collisions_v_p(CollisionTraverser *param0);
EXPORT_FUNC void CollisionTraverser_C_output_v_pp(CollisionTraverser const *param0, std::ostream *param1);
EXPORT_FUNC void CollisionTraverser_C_write_v_ppi(CollisionTraverser const *param0, std::ostream *param1, int param2);
EXPORT_FUNC int CollisionTraverser_C_get_class_type_i_v();
EXPORT_FUNC void CollisionTraverser_C_init_type_v_v();


// ConfigPage

EXPORT_FUNC ConfigPage * ConfigPage_C_get_default_page_p_v();
EXPORT_FUNC ConfigPage * ConfigPage_C_get_local_page_p_v();
EXPORT_FUNC char const * ConfigPage_C_get_name_s_p(ConfigPage const *param0);
EXPORT_FUNC bool ConfigPage_C_is_special_B_p(ConfigPage const *param0);
EXPORT_FUNC bool ConfigPage_C_is_implicit_B_p(ConfigPage const *param0);
EXPORT_FUNC void ConfigPage_C_set_sort_v_pi(ConfigPage *param0, int param1);
EXPORT_FUNC int ConfigPage_C_get_sort_i_p(ConfigPage const *param0);
EXPORT_FUNC int ConfigPage_C_get_page_seq_i_p(ConfigPage const *param0);
EXPORT_FUNC int ConfigPage_C_get_trust_level_i_p(ConfigPage const *param0);
EXPORT_FUNC void ConfigPage_C_set_trust_level_v_pi(ConfigPage *param0, int param1);
EXPORT_FUNC char const * ConfigPage_C_get_signature_s_p(ConfigPage const *param0);
EXPORT_FUNC void ConfigPage_C_clear_v_p(ConfigPage *param0);
EXPORT_FUNC bool ConfigPage_C_read_prc_B_pp(ConfigPage *param0, std::istream *param1);
EXPORT_FUNC bool ConfigPage_C_read_encrypted_prc_B_pps(ConfigPage *param0, std::istream *param1, char const *param2);
EXPORT_FUNC ConfigDeclaration * ConfigPage_C_make_declaration_p_pps(ConfigPage *param0, ConfigVariableCore *param1, char const *param2);
EXPORT_FUNC ConfigDeclaration * ConfigPage_C_make_declaration_p_pss(ConfigPage *param0, char const *param1, char const *param2);
EXPORT_FUNC bool ConfigPage_C_delete_declaration_B_pp(ConfigPage *param0, ConfigDeclaration *param1);
EXPORT_FUNC std::size_t ConfigPage_C_get_num_declarations_l_p(ConfigPage const *param0);
EXPORT_FUNC ConfigDeclaration const * ConfigPage_C_get_declaration_p_pl(ConfigPage const *param0, std::size_t param1);
EXPORT_FUNC ConfigDeclaration * ConfigPage_C_modify_declaration_p_pl(ConfigPage *param0, std::size_t param1);
EXPORT_FUNC char const * ConfigPage_C_get_variable_name_s_pl(ConfigPage const *param0, std::size_t param1);
EXPORT_FUNC char const * ConfigPage_C_get_string_value_s_pl(ConfigPage const *param0, std::size_t param1);
EXPORT_FUNC bool ConfigPage_C_is_variable_used_B_pl(ConfigPage const *param0, std::size_t param1);
EXPORT_FUNC void ConfigPage_C_output_v_pp(ConfigPage const *param0, std::ostream *param1);
EXPORT_FUNC void ConfigPage_C_output_brief_signature_v_pp(ConfigPage const *param0, std::ostream *param1);
EXPORT_FUNC void ConfigPage_C_write_v_pp(ConfigPage const *param0, std::ostream *param1);


// CopyOnWriteObject

EXPORT_FUNC Geom * CopyOnWriteObject_C_downcast_to_Geom_p_p(CopyOnWriteObject *param0);
EXPORT_FUNC GeomPrimitive * CopyOnWriteObject_C_downcast_to_GeomPrimitive_p_p(CopyOnWriteObject *param0);
EXPORT_FUNC GeomVertexArrayData * CopyOnWriteObject_C_downcast_to_GeomVertexArrayData_p_p(CopyOnWriteObject *param0);
EXPORT_FUNC GeomVertexData * CopyOnWriteObject_C_downcast_to_GeomVertexData_p_p(CopyOnWriteObject *param0);


// DisplayRegion

EXPORT_FUNC TypedReferenceCount * DisplayRegion_C_upcast_to_TypedReferenceCount_p_p(DisplayRegion *param0);
EXPORT_FUNC DrawableRegion * DisplayRegion_C_upcast_to_DrawableRegion_p_p(DisplayRegion *param0);
EXPORT_FUNC void DisplayRegion_C_cleanup_v_p(DisplayRegion *param0);
EXPORT_FUNC int DisplayRegion_C_get_num_regions_i_p(DisplayRegion const *param0);
EXPORT_FUNC void DisplayRegion_C_set_num_regions_v_pi(DisplayRegion *param0, int param1);
EXPORT_FUNC LVecBase4 * DisplayRegion_C_get_dimensions_p_pi(DisplayRegion const *param0, int param1);
EXPORT_FUNC LVecBase4 * DisplayRegion_C_get_dimensions_p_p(DisplayRegion const *param0);
EXPORT_FUNC PN_stdfloat DisplayRegion_C_get_left_f_pi(DisplayRegion const *param0, int param1);
EXPORT_FUNC PN_stdfloat DisplayRegion_C_get_left_f_p(DisplayRegion const *param0);
EXPORT_FUNC PN_stdfloat DisplayRegion_C_get_right_f_pi(DisplayRegion const *param0, int param1);
EXPORT_FUNC PN_stdfloat DisplayRegion_C_get_right_f_p(DisplayRegion const *param0);
EXPORT_FUNC PN_stdfloat DisplayRegion_C_get_bottom_f_pi(DisplayRegion const *param0, int param1);
EXPORT_FUNC PN_stdfloat DisplayRegion_C_get_bottom_f_p(DisplayRegion const *param0);
EXPORT_FUNC PN_stdfloat DisplayRegion_C_get_top_f_pi(DisplayRegion const *param0, int param1);
EXPORT_FUNC PN_stdfloat DisplayRegion_C_get_top_f_p(DisplayRegion const *param0);
EXPORT_FUNC void DisplayRegion_C_set_dimensions_v_pp(DisplayRegion *param0, LVecBase4 const *param1);
EXPORT_FUNC void DisplayRegion_C_set_dimensions_v_pffff(DisplayRegion *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC void DisplayRegion_C_set_dimensions_v_pip(DisplayRegion *param0, int param1, LVecBase4 const *param2);
EXPORT_FUNC void DisplayRegion_C_set_dimensions_v_piffff(DisplayRegion *param0, int param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5);
EXPORT_FUNC GraphicsOutput * DisplayRegion_C_get_window_p_p(DisplayRegion const *param0);
EXPORT_FUNC GraphicsPipe * DisplayRegion_C_get_pipe_p_p(DisplayRegion const *param0);
EXPORT_FUNC bool DisplayRegion_C_is_stereo_B_p(DisplayRegion const *param0);
EXPORT_FUNC void DisplayRegion_C_set_camera_v_pp(DisplayRegion *param0, NodePath const *param1);
EXPORT_FUNC NodePath * DisplayRegion_C_get_camera_p_pp(DisplayRegion const *param0, Thread *param1);
EXPORT_FUNC NodePath * DisplayRegion_C_get_camera_p_p(DisplayRegion const *param0);
EXPORT_FUNC void DisplayRegion_C_set_active_v_pB(DisplayRegion *param0, bool param1);
EXPORT_FUNC bool DisplayRegion_C_is_active_B_p(DisplayRegion const *param0);
EXPORT_FUNC void DisplayRegion_C_set_sort_v_pi(DisplayRegion *param0, int param1);
EXPORT_FUNC int DisplayRegion_C_get_sort_i_p(DisplayRegion const *param0);
EXPORT_FUNC void DisplayRegion_C_set_stereo_channel_v_pp(DisplayRegion *param0, Lens::StereoChannel param1);
EXPORT_FUNC Lens::StereoChannel DisplayRegion_C_get_stereo_channel_p_p(DisplayRegion const *param0);
EXPORT_FUNC void DisplayRegion_C_set_tex_view_offset_v_pi(DisplayRegion *param0, int param1);
EXPORT_FUNC int DisplayRegion_C_get_tex_view_offset_i_p(DisplayRegion const *param0);
EXPORT_FUNC void DisplayRegion_C_set_incomplete_render_v_pB(DisplayRegion *param0, bool param1);
EXPORT_FUNC bool DisplayRegion_C_get_incomplete_render_B_p(DisplayRegion const *param0);
EXPORT_FUNC void DisplayRegion_C_set_texture_reload_priority_v_pi(DisplayRegion *param0, int param1);
EXPORT_FUNC int DisplayRegion_C_get_texture_reload_priority_i_p(DisplayRegion const *param0);
EXPORT_FUNC void DisplayRegion_C_set_lens_index_v_pi(DisplayRegion *param0, int param1);
EXPORT_FUNC int DisplayRegion_C_get_lens_index_i_p(DisplayRegion const *param0);
EXPORT_FUNC void DisplayRegion_C_set_cull_traverser_v_pp(DisplayRegion *param0, CullTraverser *param1);
EXPORT_FUNC CullTraverser * DisplayRegion_C_get_cull_traverser_p_p(DisplayRegion *param0);
EXPORT_FUNC void DisplayRegion_C_set_cube_map_index_v_pi(DisplayRegion *param0, int param1);
EXPORT_FUNC void DisplayRegion_C_set_target_tex_page_v_pi(DisplayRegion *param0, int param1);
EXPORT_FUNC int DisplayRegion_C_get_target_tex_page_i_p(DisplayRegion const *param0);
EXPORT_FUNC void DisplayRegion_C_set_scissor_enabled_v_pB(DisplayRegion *param0, bool param1);
EXPORT_FUNC bool DisplayRegion_C_get_scissor_enabled_B_p(DisplayRegion const *param0);
EXPORT_FUNC void DisplayRegion_C_set_cull_callback_v_pp(DisplayRegion *param0, CallbackObject *param1);
EXPORT_FUNC void DisplayRegion_C_clear_cull_callback_v_p(DisplayRegion *param0);
EXPORT_FUNC CallbackObject * DisplayRegion_C_get_cull_callback_p_p(DisplayRegion const *param0);
EXPORT_FUNC void DisplayRegion_C_set_draw_callback_v_pp(DisplayRegion *param0, CallbackObject *param1);
EXPORT_FUNC void DisplayRegion_C_clear_draw_callback_v_p(DisplayRegion *param0);
EXPORT_FUNC CallbackObject * DisplayRegion_C_get_draw_callback_p_p(DisplayRegion const *param0);
EXPORT_FUNC int DisplayRegion_C_get_pixel_width_i_pi(DisplayRegion const *param0, int param1);
EXPORT_FUNC int DisplayRegion_C_get_pixel_width_i_p(DisplayRegion const *param0);
EXPORT_FUNC int DisplayRegion_C_get_pixel_height_i_pi(DisplayRegion const *param0, int param1);
EXPORT_FUNC int DisplayRegion_C_get_pixel_height_i_p(DisplayRegion const *param0);
EXPORT_FUNC LVecBase2i * DisplayRegion_C_get_pixel_size_p_pi(DisplayRegion const *param0, int param1);
EXPORT_FUNC LVecBase2i * DisplayRegion_C_get_pixel_size_p_p(DisplayRegion const *param0);
EXPORT_FUNC void DisplayRegion_C_output_v_pp(DisplayRegion const *param0, std::ostream *param1);
EXPORT_FUNC Filename * DisplayRegion_C_make_screenshot_filename_p_s(char const *param0);
EXPORT_FUNC Filename * DisplayRegion_C_make_screenshot_filename_p_v();
EXPORT_FUNC Filename * DisplayRegion_C_save_screenshot_default_p_ps(DisplayRegion *param0, char const *param1);
EXPORT_FUNC Filename * DisplayRegion_C_save_screenshot_default_p_p(DisplayRegion *param0);
EXPORT_FUNC bool DisplayRegion_C_save_screenshot_B_pps(DisplayRegion *param0, Filename const *param1, char const *param2);
EXPORT_FUNC bool DisplayRegion_C_save_screenshot_B_pp(DisplayRegion *param0, Filename const *param1);
EXPORT_FUNC PointerTo< Texture > * DisplayRegion_C_get_screenshot_p_p(DisplayRegion *param0);
EXPORT_FUNC bool DisplayRegion_C_get_screenshot_B_pp(DisplayRegion *param0, PNMImage *param1);
EXPORT_FUNC PointerTo< PandaNode > * DisplayRegion_C_make_cull_result_graph_p_p(DisplayRegion *param0);
EXPORT_FUNC void DisplayRegion_C_compute_pixels_v_p(DisplayRegion *param0);
EXPORT_FUNC void DisplayRegion_C_compute_pixels_v_pii(DisplayRegion *param0, int param1, int param2);
EXPORT_FUNC void DisplayRegion_C_compute_pixels_all_stages_v_p(DisplayRegion *param0);
EXPORT_FUNC void DisplayRegion_C_compute_pixels_all_stages_v_pii(DisplayRegion *param0, int param1, int param2);
EXPORT_FUNC bool DisplayRegion_C_supports_pixel_zoom_B_p(DisplayRegion const *param0);
EXPORT_FUNC void DisplayRegion_C_set_cull_result_v_pppp(DisplayRegion *param0, PointerTo< CullResult > *param1, PointerTo< SceneSetup > *param2, Thread *param3);
EXPORT_FUNC CullResult * DisplayRegion_C_get_cull_result_p_pp(DisplayRegion const *param0, Thread *param1);
EXPORT_FUNC SceneSetup * DisplayRegion_C_get_scene_setup_p_pp(DisplayRegion const *param0, Thread *param1);
EXPORT_FUNC PStatCollector * DisplayRegion_C_get_cull_region_pcollector_p_p(DisplayRegion *param0);
EXPORT_FUNC PStatCollector * DisplayRegion_C_get_draw_region_pcollector_p_p(DisplayRegion *param0);
EXPORT_FUNC char const * DisplayRegion_C_get_debug_name_s_p(DisplayRegion const *param0);
EXPORT_FUNC int DisplayRegion_C_get_class_type_i_v();
EXPORT_FUNC void DisplayRegion_C_init_type_v_v();
EXPORT_FUNC int DisplayRegion_C_get_type_i_p(DisplayRegion const *param0);
EXPORT_FUNC int DisplayRegion_C_force_init_type_i_p(DisplayRegion *param0);


// DrawableRegion

EXPORT_FUNC DrawableRegion * DrawableRegion_C_ctor_p_v();
EXPORT_FUNC DrawableRegion * DrawableRegion_C_ctor_p_p(DrawableRegion const *param0);
EXPORT_FUNC void DrawableRegion_C_copy_clear_settings_v_pp(DrawableRegion *param0, DrawableRegion const *param1);
EXPORT_FUNC void DrawableRegion_C_set_clear_color_active_v_pB(DrawableRegion *param0, bool param1);
EXPORT_FUNC bool DrawableRegion_C_get_clear_color_active_B_p(DrawableRegion const *param0);
EXPORT_FUNC void DrawableRegion_C_set_clear_depth_active_v_pB(DrawableRegion *param0, bool param1);
EXPORT_FUNC bool DrawableRegion_C_get_clear_depth_active_B_p(DrawableRegion const *param0);
EXPORT_FUNC void DrawableRegion_C_set_clear_stencil_active_v_pB(DrawableRegion *param0, bool param1);
EXPORT_FUNC bool DrawableRegion_C_get_clear_stencil_active_B_p(DrawableRegion const *param0);
EXPORT_FUNC void DrawableRegion_C_set_clear_color_v_pp(DrawableRegion *param0, LColor const *param1);
EXPORT_FUNC LColor const * DrawableRegion_C_get_clear_color_p_p(DrawableRegion const *param0);
EXPORT_FUNC void DrawableRegion_C_set_clear_depth_v_pf(DrawableRegion *param0, PN_stdfloat param1);
EXPORT_FUNC PN_stdfloat DrawableRegion_C_get_clear_depth_f_p(DrawableRegion const *param0);
EXPORT_FUNC void DrawableRegion_C_set_clear_stencil_v_pI(DrawableRegion *param0, unsigned int param1);
EXPORT_FUNC unsigned int DrawableRegion_C_get_clear_stencil_I_p(DrawableRegion const *param0);
EXPORT_FUNC void DrawableRegion_C_set_clear_active_v_piB(DrawableRegion *param0, int param1, bool param2);
EXPORT_FUNC bool DrawableRegion_C_get_clear_active_B_pi(DrawableRegion const *param0, int param1);
EXPORT_FUNC void DrawableRegion_C_set_clear_value_v_pip(DrawableRegion *param0, int param1, LColor const *param2);
EXPORT_FUNC LColor const * DrawableRegion_C_get_clear_value_p_pi(DrawableRegion const *param0, int param1);
EXPORT_FUNC void DrawableRegion_C_disable_clears_v_p(DrawableRegion *param0);
EXPORT_FUNC bool DrawableRegion_C_is_any_clear_active_B_p(DrawableRegion const *param0);
EXPORT_FUNC void DrawableRegion_C_set_pixel_zoom_v_pf(DrawableRegion *param0, PN_stdfloat param1);
EXPORT_FUNC PN_stdfloat DrawableRegion_C_get_pixel_zoom_f_p(DrawableRegion const *param0);
EXPORT_FUNC PN_stdfloat DrawableRegion_C_get_pixel_factor_f_p(DrawableRegion const *param0);
EXPORT_FUNC bool DrawableRegion_C_supports_pixel_zoom_B_p(DrawableRegion const *param0);
EXPORT_FUNC int DrawableRegion_C_get_renderbuffer_type_i_i(int param0);
EXPORT_FUNC int DrawableRegion_C_get_screenshot_buffer_type_i_p(DrawableRegion const *param0);
EXPORT_FUNC int DrawableRegion_C_get_draw_buffer_type_i_p(DrawableRegion const *param0);
EXPORT_FUNC DisplayRegion * DrawableRegion_C_downcast_to_DisplayRegion_p_p(DrawableRegion *param0);
EXPORT_FUNC GraphicsOutput * DrawableRegion_C_downcast_to_GraphicsOutput_p_p(DrawableRegion *param0);


// Engine

EXPORT_FUNC Engine * Engine_C_ctor_p_v();
EXPORT_FUNC Engine * Engine_C_ctor_p_p(Engine const *param0);
EXPORT_FUNC void Engine_C_dtor_v_p(Engine *param0);
EXPORT_FUNC void Engine_C_stop_v_v();
EXPORT_FUNC int Engine_C_is_alive_i_v();
EXPORT_FUNC int Engine_C_HelloEngine_i_p(Engine *param0);
EXPORT_FUNC int Engine_C_casetest_i_pisB(Engine *param0, int param1, char const *param2, bool param3);
EXPORT_FUNC NodePath * Engine_C_load_model_p_ps(Engine *param0, char const *param1);
EXPORT_FUNC GeomVertexWriter * Engine_C_new_GeomVertexWriter_p_pps(Engine *param0, GeomVertexData *param1, char const *param2);
EXPORT_FUNC void Engine_C_add_primitive_v_ppp(Engine *param0, Geom *param1, GeomTriangles *param2);
EXPORT_FUNC void Engine_C_close_primitive_v_pp(Engine *param0, GeomTriangles *param1);
EXPORT_FUNC PointerTo< GeomTriangles > * Engine_C_new_GeomTriangles_p_p(Engine *param0);
EXPORT_FUNC NodePath * Engine_C_new_Cube_p_pfss(Engine *param0, float param1, char const *param2, char const *param3);
EXPORT_FUNC void Engine_C_attach_v_pp(Engine *param0, NodePath *param1);
EXPORT_FUNC int Engine_C_inc_ref_i_p(ReferenceCount *param0);
EXPORT_FUNC int Engine_C_dec_ref_i_p(ReferenceCount *param0);
EXPORT_FUNC void Engine_C_prc_v_p(Filename const *param0);
EXPORT_FUNC void Engine_C_prc_v_ss(char const *param0, char const *param1);
EXPORT_FUNC void Engine_C_build_v_p(Engine *param0);
EXPORT_FUNC void Engine_C_step_v_p(Engine *param0);
EXPORT_FUNC char const * Engine_C_get_version_string_s_v();
EXPORT_FUNC WindowFramework * Engine_C_get_wframe_p_p(Engine const *param0);
EXPORT_FUNC void Engine_C_set_wframe_v_pp(Engine *param0, WindowFramework *param1);
EXPORT_FUNC PandaFramework * Engine_C_get_framework_p_p(Engine const *param0);
EXPORT_FUNC void Engine_C_set_framework_v_pp(Engine *param0, PandaFramework *param1);


// EventHandler

EXPORT_FUNC EventHandler * EventHandler_C_ctor_p_p(EventQueue *param0);
EXPORT_FUNC AsyncFuture * EventHandler_C_get_future_p_ps(EventHandler *param0, char const *param1);
EXPORT_FUNC void EventHandler_C_process_events_v_p(EventHandler *param0);
EXPORT_FUNC void EventHandler_C_dispatch_event_v_pp(EventHandler *param0, Event const *param1);
EXPORT_FUNC void EventHandler_C_write_v_pp(EventHandler const *param0, std::ostream *param1);
EXPORT_FUNC EventHandler * EventHandler_C_get_global_event_handler_p_p(EventQueue *param0);
EXPORT_FUNC EventHandler * EventHandler_C_get_global_event_handler_p_v();
EXPORT_FUNC bool EventHandler_C_has_hook_B_ps(EventHandler const *param0, char const *param1);
EXPORT_FUNC bool EventHandler_C_remove_hooks_B_ps(EventHandler *param0, char const *param1);
EXPORT_FUNC void EventHandler_C_remove_all_hooks_v_p(EventHandler *param0);
EXPORT_FUNC int EventHandler_C_get_class_type_i_v();
EXPORT_FUNC void EventHandler_C_init_type_v_v();
EXPORT_FUNC int EventHandler_C_force_init_type_i_p(EventHandler *param0);


// Filename

EXPORT_FUNC Filename * Filename_C_ctor_p_v();
EXPORT_FUNC Filename * Filename_C_ctor_p_p(Filename *param0);
EXPORT_FUNC Filename * Filename_C_ctor_p_p_1_p_p(Filename const *param0);
EXPORT_FUNC Filename * Filename_C_ctor_p_pp(Filename const *param0, Filename const *param1);
EXPORT_FUNC Filename * Filename_C_ctor_p_s(char const *param0);
EXPORT_FUNC Filename * Filename_C_ctor_p_s_1_p_s(char const *param0);
EXPORT_FUNC Filename * Filename_C_ctor_p_s_1_p_s_2_p_s(wchar_t const *param0);
EXPORT_FUNC Filename * Filename_C_text_filename_p_p(Filename const *param0);
EXPORT_FUNC Filename * Filename_C_text_filename_p_s(char const *param0);
EXPORT_FUNC Filename * Filename_C_binary_filename_p_p(Filename const *param0);
EXPORT_FUNC Filename * Filename_C_binary_filename_p_s(char const *param0);
EXPORT_FUNC Filename * Filename_C_dso_filename_p_s(char const *param0);
EXPORT_FUNC Filename * Filename_C_executable_filename_p_s(char const *param0);
EXPORT_FUNC Filename * Filename_C_pattern_filename_p_s(char const *param0);
EXPORT_FUNC Filename * Filename_C_from_os_specific_p_sp(char const *param0, Filename::Type param1);
EXPORT_FUNC Filename * Filename_C_from_os_specific_p_s(char const *param0);
EXPORT_FUNC Filename * Filename_C_from_os_specific_w_p_sp(wchar_t const *param0, Filename::Type param1);
EXPORT_FUNC Filename * Filename_C_from_os_specific_w_p_s(wchar_t const *param0);
EXPORT_FUNC Filename * Filename_C_expand_from_p_sp(char const *param0, Filename::Type param1);
EXPORT_FUNC Filename * Filename_C_expand_from_p_s(char const *param0);
EXPORT_FUNC Filename * Filename_C_temporary_p_sssp(char const *param0, char const *param1, char const *param2, Filename::Type param3);
EXPORT_FUNC Filename * Filename_C_temporary_p_sss(char const *param0, char const *param1, char const *param2);
EXPORT_FUNC Filename * Filename_C_temporary_p_ss(char const *param0, char const *param1);
EXPORT_FUNC Filename const * Filename_C_get_home_directory_p_v();
EXPORT_FUNC Filename const * Filename_C_get_temp_directory_p_v();
EXPORT_FUNC Filename const * Filename_C_get_user_appdata_directory_p_v();
EXPORT_FUNC Filename const * Filename_C_get_common_appdata_directory_p_v();
EXPORT_FUNC char const * Filename_C_c_str_s_p(Filename const *param0);
EXPORT_FUNC bool Filename_C_empty_B_p(Filename const *param0);
EXPORT_FUNC std::size_t Filename_C_length_l_p(Filename const *param0);
EXPORT_FUNC char const * Filename_C_substr_s_pl(Filename const *param0, std::size_t param1);
EXPORT_FUNC char const * Filename_C_substr_s_pll(Filename const *param0, std::size_t param1, std::size_t param2);
EXPORT_FUNC char const * Filename_C_get_fullpath_s_p(Filename const *param0);
EXPORT_FUNC wchar_t const * Filename_C_get_fullpath_w_s_p(Filename const *param0);
EXPORT_FUNC char const * Filename_C_get_dirname_s_p(Filename const *param0);
EXPORT_FUNC char const * Filename_C_get_basename_s_p(Filename const *param0);
EXPORT_FUNC char const * Filename_C_get_fullpath_wo_extension_s_p(Filename const *param0);
EXPORT_FUNC char const * Filename_C_get_basename_wo_extension_s_p(Filename const *param0);
EXPORT_FUNC char const * Filename_C_get_extension_s_p(Filename const *param0);
EXPORT_FUNC void Filename_C_set_fullpath_v_ps(Filename *param0, char const *param1);
EXPORT_FUNC void Filename_C_set_dirname_v_ps(Filename *param0, char const *param1);
EXPORT_FUNC void Filename_C_set_basename_v_ps(Filename *param0, char const *param1);
EXPORT_FUNC void Filename_C_set_fullpath_wo_extension_v_ps(Filename *param0, char const *param1);
EXPORT_FUNC void Filename_C_set_basename_wo_extension_v_ps(Filename *param0, char const *param1);
EXPORT_FUNC void Filename_C_set_extension_v_ps(Filename *param0, char const *param1);
EXPORT_FUNC void Filename_C_set_binary_v_p(Filename *param0);
EXPORT_FUNC void Filename_C_set_text_v_p(Filename *param0);
EXPORT_FUNC bool Filename_C_is_binary_B_p(Filename const *param0);
EXPORT_FUNC bool Filename_C_is_text_B_p(Filename const *param0);
EXPORT_FUNC bool Filename_C_is_binary_or_text_B_p(Filename const *param0);
EXPORT_FUNC void Filename_C_set_type_v_pp(Filename *param0, Filename::Type param1);
EXPORT_FUNC Filename::Type Filename_C_get_type_p_p(Filename const *param0);
EXPORT_FUNC void Filename_C_set_pattern_v_pB(Filename *param0, bool param1);
EXPORT_FUNC bool Filename_C_get_pattern_B_p(Filename const *param0);
EXPORT_FUNC bool Filename_C_has_hash_B_p(Filename const *param0);
EXPORT_FUNC Filename * Filename_C_get_filename_index_p_pi(Filename const *param0, int param1);
EXPORT_FUNC char const * Filename_C_get_hash_to_end_s_p(Filename const *param0);
EXPORT_FUNC void Filename_C_set_hash_to_end_v_ps(Filename *param0, char const *param1);
EXPORT_FUNC void Filename_C_extract_components_v_pp(Filename const *param0, vector_string *param1);
EXPORT_FUNC void Filename_C_standardize_v_p(Filename *param0);
EXPORT_FUNC bool Filename_C_is_local_B_p(Filename const *param0);
EXPORT_FUNC bool Filename_C_is_fully_qualified_B_p(Filename const *param0);
EXPORT_FUNC void Filename_C_make_absolute_v_p(Filename *param0);
EXPORT_FUNC void Filename_C_make_absolute_v_pp(Filename *param0, Filename const *param1);
EXPORT_FUNC bool Filename_C_make_canonical_B_p(Filename *param0);
EXPORT_FUNC bool Filename_C_make_true_case_B_p(Filename *param0);
EXPORT_FUNC char const * Filename_C_to_os_specific_s_p(Filename const *param0);
EXPORT_FUNC wchar_t const * Filename_C_to_os_specific_w_s_p(Filename const *param0);
EXPORT_FUNC char const * Filename_C_to_os_generic_s_p(Filename const *param0);
EXPORT_FUNC char const * Filename_C_to_os_short_name_s_p(Filename const *param0);
EXPORT_FUNC char const * Filename_C_to_os_long_name_s_p(Filename const *param0);
EXPORT_FUNC bool Filename_C_exists_B_p(Filename const *param0);
EXPORT_FUNC bool Filename_C_is_regular_file_B_p(Filename const *param0);
EXPORT_FUNC bool Filename_C_is_writable_B_p(Filename const *param0);
EXPORT_FUNC bool Filename_C_is_directory_B_p(Filename const *param0);
EXPORT_FUNC bool Filename_C_is_executable_B_p(Filename const *param0);
EXPORT_FUNC int Filename_C_compare_timestamps_i_ppBB(Filename const *param0, Filename const *param1, bool param2, bool param3);
EXPORT_FUNC int Filename_C_compare_timestamps_i_ppB(Filename const *param0, Filename const *param1, bool param2);
EXPORT_FUNC int Filename_C_compare_timestamps_i_pp(Filename const *param0, Filename const *param1);
EXPORT_FUNC time_t Filename_C_get_timestamp_p_p(Filename const *param0);
EXPORT_FUNC time_t Filename_C_get_access_timestamp_p_p(Filename const *param0);
EXPORT_FUNC std::streamsize Filename_C_get_file_size_l_p(Filename const *param0);
EXPORT_FUNC bool Filename_C_resolve_filename_B_pps(Filename *param0, DSearchPath const *param1, char const *param2);
EXPORT_FUNC bool Filename_C_resolve_filename_B_pp(Filename *param0, DSearchPath const *param1);
EXPORT_FUNC bool Filename_C_make_relative_to_B_ppB(Filename *param0, Filename *param1, bool param2);
EXPORT_FUNC bool Filename_C_make_relative_to_B_pp(Filename *param0, Filename *param1);
EXPORT_FUNC int Filename_C_find_on_searchpath_i_pp(Filename *param0, DSearchPath const *param1);
EXPORT_FUNC bool Filename_C_scan_directory_B_pp(Filename const *param0, vector_string *param1);
EXPORT_FUNC bool Filename_C_open_read_B_pp(Filename const *param0, pifstream *param1);
EXPORT_FUNC bool Filename_C_open_read_B_pp_1_B_pp(Filename const *param0, std::ifstream *param1);
EXPORT_FUNC bool Filename_C_open_write_B_ppB(Filename const *param0, pofstream *param1, bool param2);
EXPORT_FUNC bool Filename_C_open_write_B_pp(Filename const *param0, pofstream *param1);
EXPORT_FUNC bool Filename_C_open_write_B_ppB_1_B_ppB(Filename const *param0, std::ofstream *param1, bool param2);
EXPORT_FUNC bool Filename_C_open_write_B_pp_1_B_pp(Filename const *param0, std::ofstream *param1);
EXPORT_FUNC bool Filename_C_open_append_B_pp(Filename const *param0, pofstream *param1);
EXPORT_FUNC bool Filename_C_open_append_B_pp_1_B_pp(Filename const *param0, std::ofstream *param1);
EXPORT_FUNC bool Filename_C_open_read_write_B_ppB(Filename const *param0, pfstream *param1, bool param2);
EXPORT_FUNC bool Filename_C_open_read_write_B_pp(Filename const *param0, pfstream *param1);
EXPORT_FUNC bool Filename_C_open_read_write_B_ppB_1_B_ppB(Filename const *param0, std::fstream *param1, bool param2);
EXPORT_FUNC bool Filename_C_open_read_write_B_pp_1_B_pp(Filename const *param0, std::fstream *param1);
EXPORT_FUNC bool Filename_C_open_read_append_B_pp(Filename const *param0, pfstream *param1);
EXPORT_FUNC bool Filename_C_open_read_append_B_pp_1_B_pp(Filename const *param0, std::fstream *param1);
EXPORT_FUNC bool Filename_C_chdir_B_p(Filename const *param0);
EXPORT_FUNC bool Filename_C_touch_B_p(Filename const *param0);
EXPORT_FUNC bool Filename_C_unlink_B_p(Filename const *param0);
EXPORT_FUNC bool Filename_C_rename_to_B_pp(Filename const *param0, Filename const *param1);
EXPORT_FUNC bool Filename_C_copy_to_B_pp(Filename const *param0, Filename const *param1);
EXPORT_FUNC bool Filename_C_make_dir_B_p(Filename const *param0);
EXPORT_FUNC bool Filename_C_mkdir_B_p(Filename const *param0);
EXPORT_FUNC bool Filename_C_rmdir_B_p(Filename const *param0);
EXPORT_FUNC int Filename_C_compare_to_i_pp(Filename const *param0, Filename const *param1);
EXPORT_FUNC bool Filename_C___nonzero___B_p(Filename const *param0);
EXPORT_FUNC int Filename_C_get_hash_i_p(Filename const *param0);
EXPORT_FUNC void Filename_C_output_v_pp(Filename const *param0, std::ostream *param1);
EXPORT_FUNC void Filename_C_set_filesystem_encoding_v_p(TextEncoder::Encoding param0);
EXPORT_FUNC TextEncoder::Encoding Filename_C_get_filesystem_encoding_p_v();
EXPORT_FUNC int Filename_C_get_class_type_i_v();
EXPORT_FUNC void Filename_C_init_type_v_v();


// Fog

EXPORT_FUNC Fog * Fog_C_ctor_p_s(char const *param0);
EXPORT_FUNC void Fog_C_xform_v_pp(Fog *param0, LMatrix4 const *param1);
EXPORT_FUNC Fog::Mode Fog_C_get_mode_p_p(Fog const *param0);
EXPORT_FUNC void Fog_C_set_mode_v_pp(Fog *param0, Fog::Mode param1);
EXPORT_FUNC LColor const * Fog_C_get_color_p_p(Fog const *param0);
EXPORT_FUNC void Fog_C_set_color_v_pp(Fog *param0, LColor const *param1);
EXPORT_FUNC void Fog_C_set_color_v_pfff(Fog *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3);
EXPORT_FUNC void Fog_C_set_linear_range_v_pff(Fog *param0, PN_stdfloat param1, PN_stdfloat param2);
EXPORT_FUNC LPoint3 const * Fog_C_get_linear_onset_point_p_p(Fog const *param0);
EXPORT_FUNC void Fog_C_set_linear_onset_point_v_pp(Fog *param0, LPoint3 const *param1);
EXPORT_FUNC void Fog_C_set_linear_onset_point_v_pfff(Fog *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3);
EXPORT_FUNC LPoint3 const * Fog_C_get_linear_opaque_point_p_p(Fog const *param0);
EXPORT_FUNC void Fog_C_set_linear_opaque_point_v_pp(Fog *param0, LPoint3 const *param1);
EXPORT_FUNC void Fog_C_set_linear_opaque_point_v_pfff(Fog *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3);
EXPORT_FUNC void Fog_C_set_linear_fallback_v_pfff(Fog *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3);
EXPORT_FUNC PN_stdfloat Fog_C_get_exp_density_f_p(Fog const *param0);
EXPORT_FUNC void Fog_C_set_exp_density_v_pf(Fog *param0, PN_stdfloat param1);
EXPORT_FUNC void Fog_C_adjust_to_camera_v_pp(Fog *param0, TransformState const *param1);
EXPORT_FUNC void Fog_C_register_with_read_factory_v_v();
EXPORT_FUNC void Fog_C_write_datagram_v_ppp(Fog *param0, BamWriter *param1, Datagram *param2);
EXPORT_FUNC int Fog_C_get_class_type_i_v();
EXPORT_FUNC void Fog_C_init_type_v_v();
EXPORT_FUNC int Fog_C_get_type_i_p(Fog const *param0);
EXPORT_FUNC int Fog_C_force_init_type_i_p(Fog *param0);


// FrameBufferProperties

EXPORT_FUNC int FrameBufferProperties_C_get_depth_bits_i_p(FrameBufferProperties const *param0);
EXPORT_FUNC int FrameBufferProperties_C_get_color_bits_i_p(FrameBufferProperties const *param0);
EXPORT_FUNC int FrameBufferProperties_C_get_red_bits_i_p(FrameBufferProperties const *param0);
EXPORT_FUNC int FrameBufferProperties_C_get_green_bits_i_p(FrameBufferProperties const *param0);
EXPORT_FUNC int FrameBufferProperties_C_get_blue_bits_i_p(FrameBufferProperties const *param0);
EXPORT_FUNC int FrameBufferProperties_C_get_alpha_bits_i_p(FrameBufferProperties const *param0);
EXPORT_FUNC int FrameBufferProperties_C_get_stencil_bits_i_p(FrameBufferProperties const *param0);
EXPORT_FUNC int FrameBufferProperties_C_get_accum_bits_i_p(FrameBufferProperties const *param0);
EXPORT_FUNC int FrameBufferProperties_C_get_aux_rgba_i_p(FrameBufferProperties const *param0);
EXPORT_FUNC int FrameBufferProperties_C_get_aux_hrgba_i_p(FrameBufferProperties const *param0);
EXPORT_FUNC int FrameBufferProperties_C_get_aux_float_i_p(FrameBufferProperties const *param0);
EXPORT_FUNC int FrameBufferProperties_C_get_multisamples_i_p(FrameBufferProperties const *param0);
EXPORT_FUNC int FrameBufferProperties_C_get_coverage_samples_i_p(FrameBufferProperties const *param0);
EXPORT_FUNC int FrameBufferProperties_C_get_back_buffers_i_p(FrameBufferProperties const *param0);
EXPORT_FUNC bool FrameBufferProperties_C_get_indexed_color_B_p(FrameBufferProperties const *param0);
EXPORT_FUNC bool FrameBufferProperties_C_get_rgb_color_B_p(FrameBufferProperties const *param0);
EXPORT_FUNC bool FrameBufferProperties_C_get_stereo_B_p(FrameBufferProperties const *param0);
EXPORT_FUNC bool FrameBufferProperties_C_get_force_hardware_B_p(FrameBufferProperties const *param0);
EXPORT_FUNC bool FrameBufferProperties_C_get_force_software_B_p(FrameBufferProperties const *param0);
EXPORT_FUNC bool FrameBufferProperties_C_get_srgb_color_B_p(FrameBufferProperties const *param0);
EXPORT_FUNC bool FrameBufferProperties_C_get_float_color_B_p(FrameBufferProperties const *param0);
EXPORT_FUNC bool FrameBufferProperties_C_get_float_depth_B_p(FrameBufferProperties const *param0);
EXPORT_FUNC void FrameBufferProperties_C_set_depth_bits_v_pi(FrameBufferProperties *param0, int param1);
EXPORT_FUNC void FrameBufferProperties_C_set_color_bits_v_pi(FrameBufferProperties *param0, int param1);
EXPORT_FUNC void FrameBufferProperties_C_set_rgba_bits_v_piiii(FrameBufferProperties *param0, int param1, int param2, int param3, int param4);
EXPORT_FUNC void FrameBufferProperties_C_set_red_bits_v_pi(FrameBufferProperties *param0, int param1);
EXPORT_FUNC void FrameBufferProperties_C_set_green_bits_v_pi(FrameBufferProperties *param0, int param1);
EXPORT_FUNC void FrameBufferProperties_C_set_blue_bits_v_pi(FrameBufferProperties *param0, int param1);
EXPORT_FUNC void FrameBufferProperties_C_set_alpha_bits_v_pi(FrameBufferProperties *param0, int param1);
EXPORT_FUNC void FrameBufferProperties_C_set_stencil_bits_v_pi(FrameBufferProperties *param0, int param1);
EXPORT_FUNC void FrameBufferProperties_C_set_accum_bits_v_pi(FrameBufferProperties *param0, int param1);
EXPORT_FUNC void FrameBufferProperties_C_set_aux_rgba_v_pi(FrameBufferProperties *param0, int param1);
EXPORT_FUNC void FrameBufferProperties_C_set_aux_hrgba_v_pi(FrameBufferProperties *param0, int param1);
EXPORT_FUNC void FrameBufferProperties_C_set_aux_float_v_pi(FrameBufferProperties *param0, int param1);
EXPORT_FUNC void FrameBufferProperties_C_set_multisamples_v_pi(FrameBufferProperties *param0, int param1);
EXPORT_FUNC void FrameBufferProperties_C_set_coverage_samples_v_pi(FrameBufferProperties *param0, int param1);
EXPORT_FUNC void FrameBufferProperties_C_set_back_buffers_v_pi(FrameBufferProperties *param0, int param1);
EXPORT_FUNC void FrameBufferProperties_C_set_indexed_color_v_pB(FrameBufferProperties *param0, bool param1);
EXPORT_FUNC void FrameBufferProperties_C_set_rgb_color_v_pB(FrameBufferProperties *param0, bool param1);
EXPORT_FUNC void FrameBufferProperties_C_set_stereo_v_pB(FrameBufferProperties *param0, bool param1);
EXPORT_FUNC void FrameBufferProperties_C_set_force_hardware_v_pB(FrameBufferProperties *param0, bool param1);
EXPORT_FUNC void FrameBufferProperties_C_set_force_software_v_pB(FrameBufferProperties *param0, bool param1);
EXPORT_FUNC void FrameBufferProperties_C_set_srgb_color_v_pB(FrameBufferProperties *param0, bool param1);
EXPORT_FUNC void FrameBufferProperties_C_set_float_color_v_pB(FrameBufferProperties *param0, bool param1);
EXPORT_FUNC void FrameBufferProperties_C_set_float_depth_v_pB(FrameBufferProperties *param0, bool param1);
EXPORT_FUNC FrameBufferProperties * FrameBufferProperties_C_ctor_p_v();
EXPORT_FUNC FrameBufferProperties * FrameBufferProperties_C_ctor_p_p(FrameBufferProperties const *param0);
EXPORT_FUNC FrameBufferProperties const * FrameBufferProperties_C_get_default_p_v();
EXPORT_FUNC void FrameBufferProperties_C_clear_v_p(FrameBufferProperties *param0);
EXPORT_FUNC void FrameBufferProperties_C_set_all_specified_v_p(FrameBufferProperties *param0);
EXPORT_FUNC bool FrameBufferProperties_C_subsumes_B_pp(FrameBufferProperties const *param0, FrameBufferProperties const *param1);
EXPORT_FUNC void FrameBufferProperties_C_add_properties_v_pp(FrameBufferProperties *param0, FrameBufferProperties const *param1);
EXPORT_FUNC void FrameBufferProperties_C_output_v_pp(FrameBufferProperties const *param0, std::ostream *param1);
EXPORT_FUNC void FrameBufferProperties_C_set_one_bit_per_channel_v_p(FrameBufferProperties *param0);
EXPORT_FUNC bool FrameBufferProperties_C_is_stereo_B_p(FrameBufferProperties const *param0);
EXPORT_FUNC bool FrameBufferProperties_C_is_single_buffered_B_p(FrameBufferProperties const *param0);
EXPORT_FUNC int FrameBufferProperties_C_get_quality_i_pp(FrameBufferProperties const *param0, FrameBufferProperties const *param1);
EXPORT_FUNC bool FrameBufferProperties_C_is_any_specified_B_p(FrameBufferProperties const *param0);
EXPORT_FUNC bool FrameBufferProperties_C_is_basic_B_p(FrameBufferProperties const *param0);
EXPORT_FUNC int FrameBufferProperties_C_get_aux_mask_i_p(FrameBufferProperties const *param0);
EXPORT_FUNC int FrameBufferProperties_C_get_buffer_mask_i_p(FrameBufferProperties const *param0);
EXPORT_FUNC bool FrameBufferProperties_C_verify_hardware_software_B_pps(FrameBufferProperties const *param0, FrameBufferProperties const *param1, char const *param2);
EXPORT_FUNC bool FrameBufferProperties_C_setup_color_texture_B_pp(FrameBufferProperties const *param0, Texture *param1);
EXPORT_FUNC bool FrameBufferProperties_C_setup_depth_texture_B_pp(FrameBufferProperties const *param0, Texture *param1);


// Geom

EXPORT_FUNC CopyOnWriteObject * Geom_C_upcast_to_CopyOnWriteObject_p_p(Geom *param0);
EXPORT_FUNC GeomEnums * Geom_C_upcast_to_GeomEnums_p_p(Geom *param0);
EXPORT_FUNC Geom * Geom_C_ctor_p_p(GeomVertexData const *param0);
EXPORT_FUNC Geom * Geom_C_make_copy_p_p(Geom const *param0);
EXPORT_FUNC GeomEnums::PrimitiveType Geom_C_get_primitive_type_p_p(Geom const *param0);
EXPORT_FUNC GeomEnums::ShadeModel Geom_C_get_shade_model_p_p(Geom const *param0);
EXPORT_FUNC int Geom_C_get_geom_rendering_i_p(Geom const *param0);
EXPORT_FUNC GeomEnums::UsageHint Geom_C_get_usage_hint_p_p(Geom const *param0);
EXPORT_FUNC void Geom_C_set_usage_hint_v_pp(Geom *param0, GeomEnums::UsageHint param1);
EXPORT_FUNC ConstPointerTo< GeomVertexData > * Geom_C_get_vertex_data_p_pp(Geom const *param0, Thread *param1);
EXPORT_FUNC ConstPointerTo< GeomVertexData > * Geom_C_get_vertex_data_p_p(Geom const *param0);
EXPORT_FUNC PointerTo< GeomVertexData > * Geom_C_modify_vertex_data_p_p(Geom *param0);
EXPORT_FUNC void Geom_C_set_vertex_data_v_pp(Geom *param0, GeomVertexData const *param1);
EXPORT_FUNC void Geom_C_offset_vertices_v_ppi(Geom *param0, GeomVertexData const *param1, int param2);
EXPORT_FUNC int Geom_C_make_nonindexed_i_pB(Geom *param0, bool param1);
EXPORT_FUNC ConstPointerTo< GeomVertexData > * Geom_C_get_animated_vertex_data_p_pBp(Geom const *param0, bool param1, Thread *param2);
EXPORT_FUNC ConstPointerTo< GeomVertexData > * Geom_C_get_animated_vertex_data_p_pB(Geom const *param0, bool param1);
EXPORT_FUNC bool Geom_C_is_empty_B_p(Geom const *param0);
EXPORT_FUNC std::size_t Geom_C_get_num_primitives_l_p(Geom const *param0);
EXPORT_FUNC ConstPointerTo< GeomPrimitive > * Geom_C_get_primitive_p_pl(Geom const *param0, std::size_t param1);
EXPORT_FUNC PointerTo< GeomPrimitive > * Geom_C_modify_primitive_p_pl(Geom *param0, std::size_t param1);
EXPORT_FUNC void Geom_C_set_primitive_v_plp(Geom *param0, std::size_t param1, GeomPrimitive const *param2);
EXPORT_FUNC void Geom_C_insert_primitive_v_plp(Geom *param0, std::size_t param1, GeomPrimitive const *param2);
EXPORT_FUNC void Geom_C_add_primitive_v_pp(Geom *param0, GeomPrimitive const *param1);
EXPORT_FUNC void Geom_C_remove_primitive_v_pl(Geom *param0, std::size_t param1);
EXPORT_FUNC void Geom_C_clear_primitives_v_p(Geom *param0);
EXPORT_FUNC PointerTo< Geom > * Geom_C_decompose_p_p(Geom const *param0);
EXPORT_FUNC PointerTo< Geom > * Geom_C_doubleside_p_p(Geom const *param0);
EXPORT_FUNC PointerTo< Geom > * Geom_C_reverse_p_p(Geom const *param0);
EXPORT_FUNC PointerTo< Geom > * Geom_C_rotate_p_p(Geom const *param0);
EXPORT_FUNC PointerTo< Geom > * Geom_C_unify_p_piB(Geom const *param0, int param1, bool param2);
EXPORT_FUNC PointerTo< Geom > * Geom_C_make_points_p_p(Geom const *param0);
EXPORT_FUNC PointerTo< Geom > * Geom_C_make_lines_p_p(Geom const *param0);
EXPORT_FUNC PointerTo< Geom > * Geom_C_make_patches_p_p(Geom const *param0);
EXPORT_FUNC PointerTo< Geom > * Geom_C_make_adjacency_p_p(Geom const *param0);
EXPORT_FUNC void Geom_C_decompose_in_place_v_p(Geom *param0);
EXPORT_FUNC void Geom_C_doubleside_in_place_v_p(Geom *param0);
EXPORT_FUNC void Geom_C_reverse_in_place_v_p(Geom *param0);
EXPORT_FUNC void Geom_C_rotate_in_place_v_p(Geom *param0);
EXPORT_FUNC void Geom_C_unify_in_place_v_piB(Geom *param0, int param1, bool param2);
EXPORT_FUNC void Geom_C_make_points_in_place_v_p(Geom *param0);
EXPORT_FUNC void Geom_C_make_lines_in_place_v_p(Geom *param0);
EXPORT_FUNC void Geom_C_make_patches_in_place_v_p(Geom *param0);
EXPORT_FUNC void Geom_C_make_adjacency_in_place_v_p(Geom *param0);
EXPORT_FUNC bool Geom_C_copy_primitives_from_B_pp(Geom *param0, Geom const *param1);
EXPORT_FUNC int Geom_C_get_num_bytes_i_p(Geom const *param0);
EXPORT_FUNC UpdateSeq * Geom_C_get_modified_p_pp(Geom const *param0, Thread *param1);
EXPORT_FUNC UpdateSeq * Geom_C_get_modified_p_p(Geom const *param0);
EXPORT_FUNC bool Geom_C_request_resident_B_p(Geom const *param0);
EXPORT_FUNC void Geom_C_transform_vertices_v_pp(Geom *param0, LMatrix4 const *param1);
EXPORT_FUNC bool Geom_C_check_valid_B_p(Geom const *param0);
EXPORT_FUNC bool Geom_C_check_valid_B_pp(Geom const *param0, GeomVertexData const *param1);
EXPORT_FUNC ConstPointerTo< BoundingVolume > * Geom_C_get_bounds_p_pp(Geom const *param0, Thread *param1);
EXPORT_FUNC ConstPointerTo< BoundingVolume > * Geom_C_get_bounds_p_p(Geom const *param0);
EXPORT_FUNC int Geom_C_get_nested_vertices_i_pp(Geom const *param0, Thread *param1);
EXPORT_FUNC int Geom_C_get_nested_vertices_i_p(Geom const *param0);
EXPORT_FUNC void Geom_C_mark_bounds_stale_v_p(Geom const *param0);
EXPORT_FUNC void Geom_C_set_bounds_type_v_pp(Geom *param0, BoundingVolume::BoundsType param1);
EXPORT_FUNC BoundingVolume::BoundsType Geom_C_get_bounds_type_p_p(Geom const *param0);
EXPORT_FUNC void Geom_C_set_bounds_v_pp(Geom *param0, BoundingVolume const *param1);
EXPORT_FUNC void Geom_C_clear_bounds_v_p(Geom *param0);
EXPORT_FUNC void Geom_C_output_v_pp(Geom const *param0, std::ostream *param1);
EXPORT_FUNC void Geom_C_write_v_ppi(Geom const *param0, std::ostream *param1, int param2);
EXPORT_FUNC void Geom_C_write_v_pp(Geom const *param0, std::ostream *param1);
EXPORT_FUNC void Geom_C_clear_cache_v_p(Geom *param0);
EXPORT_FUNC void Geom_C_clear_cache_stage_v_pp(Geom *param0, Thread *param1);
EXPORT_FUNC void Geom_C_prepare_v_pp(Geom *param0, PreparedGraphicsObjects *param1);
EXPORT_FUNC bool Geom_C_is_prepared_B_pp(Geom const *param0, PreparedGraphicsObjects *param1);
EXPORT_FUNC bool Geom_C_release_B_pp(Geom *param0, PreparedGraphicsObjects *param1);
EXPORT_FUNC int Geom_C_release_all_i_p(Geom *param0);
EXPORT_FUNC GeomContext * Geom_C_prepare_now_p_ppp(Geom *param0, PreparedGraphicsObjects *param1, GraphicsStateGuardianBase *param2);
EXPORT_FUNC bool Geom_C_draw_B_pppBp(Geom const *param0, GraphicsStateGuardianBase *param1, GeomVertexData const *param2, bool param3, Thread *param4);
EXPORT_FUNC UpdateSeq * Geom_C_get_next_modified_p_v();
EXPORT_FUNC void Geom_C_register_with_read_factory_v_v();
EXPORT_FUNC void Geom_C_write_datagram_v_ppp(Geom *param0, BamWriter *param1, Datagram *param2);
EXPORT_FUNC void Geom_C_finalize_v_pp(Geom *param0, BamReader *param1);
EXPORT_FUNC int Geom_C_get_class_type_i_v();
EXPORT_FUNC void Geom_C_init_type_v_v();
EXPORT_FUNC int Geom_C_get_type_i_p(Geom const *param0);
EXPORT_FUNC int Geom_C_force_init_type_i_p(Geom *param0);


// GeomEnums

EXPORT_FUNC GeomEnums * GeomEnums_C_ctor_p_v();
EXPORT_FUNC GeomEnums * GeomEnums_C_ctor_p_p(GeomEnums const *param0);
EXPORT_FUNC Geom * GeomEnums_C_downcast_to_Geom_p_p(GeomEnums *param0);
EXPORT_FUNC GeomPrimitive * GeomEnums_C_downcast_to_GeomPrimitive_p_p(GeomEnums *param0);
EXPORT_FUNC GeomVertexArrayData * GeomEnums_C_downcast_to_GeomVertexArrayData_p_p(GeomEnums *param0);
EXPORT_FUNC GeomVertexArrayFormat * GeomEnums_C_downcast_to_GeomVertexArrayFormat_p_p(GeomEnums *param0);
EXPORT_FUNC GeomVertexArrayDataHandle * GeomEnums_C_downcast_to_GeomVertexArrayDataHandle_p_p(GeomEnums *param0);
EXPORT_FUNC GeomVertexData * GeomEnums_C_downcast_to_GeomVertexData_p_p(GeomEnums *param0);
EXPORT_FUNC GeomVertexFormat * GeomEnums_C_downcast_to_GeomVertexFormat_p_p(GeomEnums *param0);


// GeomNode

EXPORT_FUNC GeomNode * GeomNode_C_ctor_p_s(char const *param0);
EXPORT_FUNC void GeomNode_C_apply_attribs_to_vertices_v_ppip(GeomNode *param0, AccumulatedAttribs const *param1, int param2, GeomTransformer *param3);
EXPORT_FUNC void GeomNode_C_xform_v_pp(GeomNode *param0, LMatrix4 const *param1);
EXPORT_FUNC bool GeomNode_C_is_renderable_B_p(GeomNode const *param0);
EXPORT_FUNC void GeomNode_C_add_for_draw_v_ppp(GeomNode *param0, CullTraverser *param1, CullTraverserData *param2);
EXPORT_FUNC bool GeomNode_C_safe_to_flatten_B_p(GeomNode const *param0);
EXPORT_FUNC bool GeomNode_C_safe_to_combine_B_p(GeomNode const *param0);
EXPORT_FUNC void GeomNode_C_r_prepare_scene_v_ppppp(GeomNode *param0, GraphicsStateGuardianBase *param1, RenderState const *param2, GeomTransformer *param3, Thread *param4);
EXPORT_FUNC void GeomNode_C_set_preserved_v_pB(GeomNode *param0, bool param1);
EXPORT_FUNC bool GeomNode_C_get_preserved_B_p(GeomNode const *param0);
EXPORT_FUNC int GeomNode_C_get_num_geoms_i_p(GeomNode const *param0);
EXPORT_FUNC ConstPointerTo< Geom > * GeomNode_C_get_geom_p_pi(GeomNode const *param0, int param1);
EXPORT_FUNC PointerTo< Geom > * GeomNode_C_modify_geom_p_pi(GeomNode *param0, int param1);
EXPORT_FUNC RenderState const * GeomNode_C_get_geom_state_p_pi(GeomNode const *param0, int param1);
EXPORT_FUNC void GeomNode_C_set_geom_state_v_pip(GeomNode *param0, int param1, RenderState const *param2);
EXPORT_FUNC void GeomNode_C_add_geom_v_ppp(GeomNode *param0, Geom *param1, RenderState const *param2);
EXPORT_FUNC void GeomNode_C_add_geom_v_pp(GeomNode *param0, Geom *param1);
EXPORT_FUNC void GeomNode_C_add_geoms_from_v_pp(GeomNode *param0, GeomNode const *param1);
EXPORT_FUNC void GeomNode_C_set_geom_v_pip(GeomNode *param0, int param1, Geom *param2);
EXPORT_FUNC void GeomNode_C_remove_geom_v_pi(GeomNode *param0, int param1);
EXPORT_FUNC void GeomNode_C_remove_all_geoms_v_p(GeomNode *param0);
EXPORT_FUNC bool GeomNode_C_check_valid_B_p(GeomNode const *param0);
EXPORT_FUNC void GeomNode_C_decompose_v_p(GeomNode *param0);
EXPORT_FUNC void GeomNode_C_unify_v_piB(GeomNode *param0, int param1, bool param2);
EXPORT_FUNC void GeomNode_C_write_geoms_v_ppi(GeomNode const *param0, std::ostream *param1, int param2);
EXPORT_FUNC void GeomNode_C_write_verbose_v_ppi(GeomNode const *param0, std::ostream *param1, int param2);
EXPORT_FUNC CollideMask * GeomNode_C_get_default_collide_mask_p_v();
EXPORT_FUNC void GeomNode_C_do_premunge_v_pppp(GeomNode *param0, GraphicsStateGuardianBase *param1, RenderState const *param2, GeomTransformer *param3);
EXPORT_FUNC GeomNode::Geoms * GeomNode_C_get_geoms_p_pp(GeomNode const *param0, Thread *param1);
EXPORT_FUNC GeomNode::Geoms * GeomNode_C_get_geoms_p_p(GeomNode const *param0);
EXPORT_FUNC void GeomNode_C_register_with_read_factory_v_v();
EXPORT_FUNC void GeomNode_C_write_datagram_v_ppp(GeomNode *param0, BamWriter *param1, Datagram *param2);
EXPORT_FUNC void GeomNode_C_finalize_v_pp(GeomNode *param0, BamReader *param1);
EXPORT_FUNC int GeomNode_C_get_class_type_i_v();
EXPORT_FUNC void GeomNode_C_init_type_v_v();
EXPORT_FUNC int GeomNode_C_get_type_i_p(GeomNode const *param0);
EXPORT_FUNC int GeomNode_C_force_init_type_i_p(GeomNode *param0);


// GeomPrimitive

EXPORT_FUNC CopyOnWriteObject * GeomPrimitive_C_upcast_to_CopyOnWriteObject_p_p(GeomPrimitive *param0);
EXPORT_FUNC GeomEnums * GeomPrimitive_C_upcast_to_GeomEnums_p_p(GeomPrimitive *param0);
EXPORT_FUNC PointerTo< GeomPrimitive > * GeomPrimitive_C_make_copy_p_p(GeomPrimitive const *param0);
EXPORT_FUNC GeomEnums::PrimitiveType GeomPrimitive_C_get_primitive_type_p_p(GeomPrimitive const *param0);
EXPORT_FUNC int GeomPrimitive_C_get_geom_rendering_i_p(GeomPrimitive const *param0);
EXPORT_FUNC GeomEnums::ShadeModel GeomPrimitive_C_get_shade_model_p_p(GeomPrimitive const *param0);
EXPORT_FUNC void GeomPrimitive_C_set_shade_model_v_pp(GeomPrimitive *param0, GeomEnums::ShadeModel param1);
EXPORT_FUNC GeomEnums::UsageHint GeomPrimitive_C_get_usage_hint_p_p(GeomPrimitive const *param0);
EXPORT_FUNC void GeomPrimitive_C_set_usage_hint_v_pp(GeomPrimitive *param0, GeomEnums::UsageHint param1);
EXPORT_FUNC GeomEnums::NumericType GeomPrimitive_C_get_index_type_p_p(GeomPrimitive const *param0);
EXPORT_FUNC void GeomPrimitive_C_set_index_type_v_pp(GeomPrimitive *param0, GeomEnums::NumericType param1);
EXPORT_FUNC bool GeomPrimitive_C_is_composite_B_p(GeomPrimitive const *param0);
EXPORT_FUNC bool GeomPrimitive_C_is_indexed_B_p(GeomPrimitive const *param0);
EXPORT_FUNC int GeomPrimitive_C_get_first_vertex_i_p(GeomPrimitive const *param0);
EXPORT_FUNC int GeomPrimitive_C_get_num_vertices_i_p(GeomPrimitive const *param0);
EXPORT_FUNC int GeomPrimitive_C_get_vertex_i_pi(GeomPrimitive const *param0, int param1);
EXPORT_FUNC void GeomPrimitive_C_add_vertex_v_pi(GeomPrimitive *param0, int param1);
EXPORT_FUNC void GeomPrimitive_C_add_vertices_v_pii(GeomPrimitive *param0, int param1, int param2);
EXPORT_FUNC void GeomPrimitive_C_add_vertices_v_piii(GeomPrimitive *param0, int param1, int param2, int param3);
EXPORT_FUNC void GeomPrimitive_C_add_vertices_v_piiii(GeomPrimitive *param0, int param1, int param2, int param3, int param4);
EXPORT_FUNC void GeomPrimitive_C_add_consecutive_vertices_v_pii(GeomPrimitive *param0, int param1, int param2);
EXPORT_FUNC void GeomPrimitive_C_add_next_vertices_v_pi(GeomPrimitive *param0, int param1);
EXPORT_FUNC void GeomPrimitive_C_reserve_num_vertices_v_pi(GeomPrimitive *param0, int param1);
EXPORT_FUNC bool GeomPrimitive_C_close_primitive_B_p(GeomPrimitive *param0);
EXPORT_FUNC void GeomPrimitive_C_clear_vertices_v_p(GeomPrimitive *param0);
EXPORT_FUNC void GeomPrimitive_C_offset_vertices_v_pi(GeomPrimitive *param0, int param1);
EXPORT_FUNC void GeomPrimitive_C_offset_vertices_v_piii(GeomPrimitive *param0, int param1, int param2, int param3);
EXPORT_FUNC void GeomPrimitive_C_make_nonindexed_v_ppp(GeomPrimitive *param0, GeomVertexData *param1, GeomVertexData const *param2);
EXPORT_FUNC void GeomPrimitive_C_pack_vertices_v_ppp(GeomPrimitive *param0, GeomVertexData *param1, GeomVertexData const *param2);
EXPORT_FUNC void GeomPrimitive_C_make_indexed_v_p(GeomPrimitive *param0);
EXPORT_FUNC int GeomPrimitive_C_get_num_primitives_i_p(GeomPrimitive const *param0);
EXPORT_FUNC int GeomPrimitive_C_get_primitive_start_i_pi(GeomPrimitive const *param0, int param1);
EXPORT_FUNC int GeomPrimitive_C_get_primitive_end_i_pi(GeomPrimitive const *param0, int param1);
EXPORT_FUNC int GeomPrimitive_C_get_primitive_num_vertices_i_pi(GeomPrimitive const *param0, int param1);
EXPORT_FUNC int GeomPrimitive_C_get_num_used_vertices_i_p(GeomPrimitive const *param0);
EXPORT_FUNC int GeomPrimitive_C_get_num_faces_i_p(GeomPrimitive const *param0);
EXPORT_FUNC int GeomPrimitive_C_get_primitive_num_faces_i_pi(GeomPrimitive const *param0, int param1);
EXPORT_FUNC int GeomPrimitive_C_get_min_vertex_i_p(GeomPrimitive const *param0);
EXPORT_FUNC int GeomPrimitive_C_get_primitive_min_vertex_i_pi(GeomPrimitive const *param0, int param1);
EXPORT_FUNC int GeomPrimitive_C_get_max_vertex_i_p(GeomPrimitive const *param0);
EXPORT_FUNC int GeomPrimitive_C_get_primitive_max_vertex_i_pi(GeomPrimitive const *param0, int param1);
EXPORT_FUNC ConstPointerTo< GeomPrimitive > * GeomPrimitive_C_decompose_p_p(GeomPrimitive const *param0);
EXPORT_FUNC ConstPointerTo< GeomPrimitive > * GeomPrimitive_C_rotate_p_p(GeomPrimitive const *param0);
EXPORT_FUNC ConstPointerTo< GeomPrimitive > * GeomPrimitive_C_doubleside_p_p(GeomPrimitive const *param0);
EXPORT_FUNC ConstPointerTo< GeomPrimitive > * GeomPrimitive_C_reverse_p_p(GeomPrimitive const *param0);
EXPORT_FUNC ConstPointerTo< GeomPrimitive > * GeomPrimitive_C_match_shade_model_p_pp(GeomPrimitive const *param0, GeomEnums::ShadeModel param1);
EXPORT_FUNC ConstPointerTo< GeomPrimitive > * GeomPrimitive_C_make_points_p_p(GeomPrimitive const *param0);
EXPORT_FUNC ConstPointerTo< GeomPrimitive > * GeomPrimitive_C_make_lines_p_p(GeomPrimitive const *param0);
EXPORT_FUNC ConstPointerTo< GeomPrimitive > * GeomPrimitive_C_make_patches_p_p(GeomPrimitive const *param0);
EXPORT_FUNC ConstPointerTo< GeomPrimitive > * GeomPrimitive_C_make_adjacency_p_p(GeomPrimitive const *param0);
EXPORT_FUNC int GeomPrimitive_C_get_num_bytes_i_p(GeomPrimitive const *param0);
EXPORT_FUNC int GeomPrimitive_C_get_data_size_bytes_i_p(GeomPrimitive const *param0);
EXPORT_FUNC UpdateSeq * GeomPrimitive_C_get_modified_p_p(GeomPrimitive const *param0);
EXPORT_FUNC bool GeomPrimitive_C_request_resident_B_pp(GeomPrimitive const *param0, Thread *param1);
EXPORT_FUNC bool GeomPrimitive_C_request_resident_B_p(GeomPrimitive const *param0);
EXPORT_FUNC bool GeomPrimitive_C_check_valid_B_pp(GeomPrimitive const *param0, GeomVertexData const *param1);
EXPORT_FUNC bool GeomPrimitive_C_check_valid_B_pp_1_B_pp(GeomPrimitive const *param0, GeomVertexDataPipelineReader const *param1);
EXPORT_FUNC void GeomPrimitive_C_output_v_pp(GeomPrimitive const *param0, std::ostream *param1);
EXPORT_FUNC void GeomPrimitive_C_write_v_ppi(GeomPrimitive const *param0, std::ostream *param1, int param2);
EXPORT_FUNC ConstPointerTo< GeomVertexArrayData > * GeomPrimitive_C_get_vertices_p_p(GeomPrimitive const *param0);
EXPORT_FUNC ConstPointerTo< GeomVertexArrayDataHandle > * GeomPrimitive_C_get_vertices_handle_p_pp(GeomPrimitive const *param0, Thread *param1);
EXPORT_FUNC PointerTo< GeomVertexArrayData > * GeomPrimitive_C_modify_vertices_p_pi(GeomPrimitive *param0, int param1);
EXPORT_FUNC PointerTo< GeomVertexArrayData > * GeomPrimitive_C_modify_vertices_p_p(GeomPrimitive *param0);
EXPORT_FUNC PointerTo< GeomVertexArrayDataHandle > * GeomPrimitive_C_modify_vertices_handle_p_pp(GeomPrimitive *param0, Thread *param1);
EXPORT_FUNC void GeomPrimitive_C_set_vertices_v_ppi(GeomPrimitive *param0, GeomVertexArrayData const *param1, int param2);
EXPORT_FUNC void GeomPrimitive_C_set_vertices_v_pp(GeomPrimitive *param0, GeomVertexArrayData const *param1);
EXPORT_FUNC void GeomPrimitive_C_set_nonindexed_vertices_v_pii(GeomPrimitive *param0, int param1, int param2);
EXPORT_FUNC int GeomPrimitive_C_get_index_stride_i_p(GeomPrimitive const *param0);
EXPORT_FUNC int GeomPrimitive_C_get_strip_cut_index_i_p(GeomPrimitive const *param0);
EXPORT_FUNC CPTA_int * GeomPrimitive_C_get_ends_p_p(GeomPrimitive const *param0);
EXPORT_FUNC PTA_int * GeomPrimitive_C_modify_ends_p_p(GeomPrimitive *param0);
EXPORT_FUNC void GeomPrimitive_C_set_ends_v_pp(GeomPrimitive *param0, PTA_int *param1);
EXPORT_FUNC ConstPointerTo< GeomVertexArrayData > * GeomPrimitive_C_get_mins_p_p(GeomPrimitive const *param0);
EXPORT_FUNC ConstPointerTo< GeomVertexArrayData > * GeomPrimitive_C_get_maxs_p_p(GeomPrimitive const *param0);
EXPORT_FUNC void GeomPrimitive_C_set_minmax_v_piipp(GeomPrimitive *param0, int param1, int param2, GeomVertexArrayData *param3, GeomVertexArrayData *param4);
EXPORT_FUNC void GeomPrimitive_C_clear_minmax_v_p(GeomPrimitive *param0);
EXPORT_FUNC int GeomPrimitive_C_get_num_vertices_per_primitive_i_p(GeomPrimitive const *param0);
EXPORT_FUNC int GeomPrimitive_C_get_min_num_vertices_per_primitive_i_p(GeomPrimitive const *param0);
EXPORT_FUNC int GeomPrimitive_C_get_num_unused_vertices_per_primitive_i_p(GeomPrimitive const *param0);
EXPORT_FUNC void GeomPrimitive_C_prepare_v_pp(GeomPrimitive *param0, PreparedGraphicsObjects *param1);
EXPORT_FUNC bool GeomPrimitive_C_is_prepared_B_pp(GeomPrimitive const *param0, PreparedGraphicsObjects *param1);
EXPORT_FUNC IndexBufferContext * GeomPrimitive_C_prepare_now_p_ppp(GeomPrimitive *param0, PreparedGraphicsObjects *param1, GraphicsStateGuardianBase *param2);
EXPORT_FUNC bool GeomPrimitive_C_release_B_pp(GeomPrimitive *param0, PreparedGraphicsObjects *param1);
EXPORT_FUNC int GeomPrimitive_C_release_all_i_p(GeomPrimitive *param0);
EXPORT_FUNC GeomVertexArrayFormat const * GeomPrimitive_C_get_index_format_p_p(GeomPrimitive const *param0);
EXPORT_FUNC GeomVertexArrayFormat const * GeomPrimitive_C_get_index_format_p_p_1_p_p(GeomEnums::NumericType param0);
EXPORT_FUNC PointerTo< GeomVertexArrayData > * GeomPrimitive_C_make_index_data_p_p(GeomPrimitive const *param0);
EXPORT_FUNC bool GeomPrimitive_C_draw_B_pppB(GeomPrimitive const *param0, GraphicsStateGuardianBase *param1, GeomPrimitivePipelineReader const *param2, bool param3);
EXPORT_FUNC void GeomPrimitive_C_write_datagram_v_ppp(GeomPrimitive *param0, BamWriter *param1, Datagram *param2);
EXPORT_FUNC void GeomPrimitive_C_finalize_v_pp(GeomPrimitive *param0, BamReader *param1);
EXPORT_FUNC int GeomPrimitive_C_get_class_type_i_v();
EXPORT_FUNC void GeomPrimitive_C_init_type_v_v();
EXPORT_FUNC int GeomPrimitive_C_get_type_i_p(GeomPrimitive const *param0);
EXPORT_FUNC int GeomPrimitive_C_force_init_type_i_p(GeomPrimitive *param0);


// GeomTriangles

EXPORT_FUNC GeomTriangles * GeomTriangles_C_ctor_p_p(GeomEnums::UsageHint param0);
EXPORT_FUNC GeomTriangles * GeomTriangles_C_ctor_p_p_1_p_p(GeomTriangles const *param0);
EXPORT_FUNC bool GeomTriangles_C_draw_B_pppB(GeomTriangles const *param0, GraphicsStateGuardianBase *param1, GeomPrimitivePipelineReader const *param2, bool param3);
EXPORT_FUNC void GeomTriangles_C_register_with_read_factory_v_v();
EXPORT_FUNC int GeomTriangles_C_get_class_type_i_v();
EXPORT_FUNC void GeomTriangles_C_init_type_v_v();
EXPORT_FUNC int GeomTriangles_C_get_type_i_p(GeomTriangles const *param0);
EXPORT_FUNC int GeomTriangles_C_force_init_type_i_p(GeomTriangles *param0);


// GeomVertexArrayData

EXPORT_FUNC CopyOnWriteObject * GeomVertexArrayData_C_upcast_to_CopyOnWriteObject_p_p(GeomVertexArrayData *param0);
EXPORT_FUNC SimpleLruPage * GeomVertexArrayData_C_upcast_to_SimpleLruPage_p_p(GeomVertexArrayData *param0);
EXPORT_FUNC GeomEnums * GeomVertexArrayData_C_upcast_to_GeomEnums_p_p(GeomVertexArrayData *param0);
EXPORT_FUNC GeomVertexArrayData * GeomVertexArrayData_C_ctor_p_p(GeomVertexArrayData const *param0);
EXPORT_FUNC GeomVertexArrayData * GeomVertexArrayData_C_ctor_p_pp(GeomVertexArrayFormat const *param0, GeomEnums::UsageHint param1);
EXPORT_FUNC int GeomVertexArrayData_C_compare_to_i_pp(GeomVertexArrayData const *param0, GeomVertexArrayData const *param1);
EXPORT_FUNC GeomVertexArrayFormat const * GeomVertexArrayData_C_get_array_format_p_p(GeomVertexArrayData const *param0);
EXPORT_FUNC GeomEnums::UsageHint GeomVertexArrayData_C_get_usage_hint_p_p(GeomVertexArrayData const *param0);
EXPORT_FUNC void GeomVertexArrayData_C_set_usage_hint_v_pp(GeomVertexArrayData *param0, GeomEnums::UsageHint param1);
EXPORT_FUNC bool GeomVertexArrayData_C_has_column_B_ps(GeomVertexArrayData const *param0, InternalName const *param1);
EXPORT_FUNC int GeomVertexArrayData_C_get_num_rows_i_p(GeomVertexArrayData const *param0);
EXPORT_FUNC bool GeomVertexArrayData_C_set_num_rows_B_pi(GeomVertexArrayData *param0, int param1);
EXPORT_FUNC bool GeomVertexArrayData_C_unclean_set_num_rows_B_pi(GeomVertexArrayData *param0, int param1);
EXPORT_FUNC bool GeomVertexArrayData_C_reserve_num_rows_B_pi(GeomVertexArrayData *param0, int param1);
EXPORT_FUNC void GeomVertexArrayData_C_clear_rows_v_p(GeomVertexArrayData *param0);
EXPORT_FUNC std::size_t GeomVertexArrayData_C_get_data_size_bytes_l_p(GeomVertexArrayData const *param0);
EXPORT_FUNC UpdateSeq * GeomVertexArrayData_C_get_modified_p_p(GeomVertexArrayData const *param0);
EXPORT_FUNC void GeomVertexArrayData_C_output_v_pp(GeomVertexArrayData const *param0, std::ostream *param1);
EXPORT_FUNC void GeomVertexArrayData_C_write_v_ppi(GeomVertexArrayData const *param0, std::ostream *param1, int param2);
EXPORT_FUNC void GeomVertexArrayData_C_write_v_pp(GeomVertexArrayData const *param0, std::ostream *param1);
EXPORT_FUNC bool GeomVertexArrayData_C_request_resident_B_pp(GeomVertexArrayData const *param0, Thread *param1);
EXPORT_FUNC bool GeomVertexArrayData_C_request_resident_B_p(GeomVertexArrayData const *param0);
EXPORT_FUNC ConstPointerTo< GeomVertexArrayDataHandle > * GeomVertexArrayData_C_get_handle_p_pp(GeomVertexArrayData const *param0, Thread *param1);
EXPORT_FUNC ConstPointerTo< GeomVertexArrayDataHandle > * GeomVertexArrayData_C_get_handle_p_p(GeomVertexArrayData const *param0);
EXPORT_FUNC PointerTo< GeomVertexArrayDataHandle > * GeomVertexArrayData_C_modify_handle_p_pp(GeomVertexArrayData *param0, Thread *param1);
EXPORT_FUNC PointerTo< GeomVertexArrayDataHandle > * GeomVertexArrayData_C_modify_handle_p_p(GeomVertexArrayData *param0);
EXPORT_FUNC void GeomVertexArrayData_C_prepare_v_pp(GeomVertexArrayData *param0, PreparedGraphicsObjects *param1);
EXPORT_FUNC bool GeomVertexArrayData_C_is_prepared_B_pp(GeomVertexArrayData const *param0, PreparedGraphicsObjects *param1);
EXPORT_FUNC VertexBufferContext * GeomVertexArrayData_C_prepare_now_p_ppp(GeomVertexArrayData *param0, PreparedGraphicsObjects *param1, GraphicsStateGuardianBase *param2);
EXPORT_FUNC bool GeomVertexArrayData_C_release_B_pp(GeomVertexArrayData *param0, PreparedGraphicsObjects *param1);
EXPORT_FUNC int GeomVertexArrayData_C_release_all_i_p(GeomVertexArrayData *param0);
EXPORT_FUNC SimpleLru * GeomVertexArrayData_C_get_independent_lru_p_v();
EXPORT_FUNC SimpleLru * GeomVertexArrayData_C_get_small_lru_p_v();
EXPORT_FUNC void GeomVertexArrayData_C_lru_epoch_v_v();
EXPORT_FUNC VertexDataBook * GeomVertexArrayData_C_get_book_p_v();
EXPORT_FUNC void GeomVertexArrayData_C_evict_lru_v_p(GeomVertexArrayData *param0);
EXPORT_FUNC void GeomVertexArrayData_C_register_with_read_factory_v_v();
EXPORT_FUNC void GeomVertexArrayData_C_write_datagram_v_ppp(GeomVertexArrayData *param0, BamWriter *param1, Datagram *param2);
EXPORT_FUNC PTA_uchar * GeomVertexArrayData_C_read_raw_data_p_ppp(GeomVertexArrayData *param0, BamReader *param1, DatagramIterator *param2);
EXPORT_FUNC void GeomVertexArrayData_C_finalize_v_pp(GeomVertexArrayData *param0, BamReader *param1);
EXPORT_FUNC int GeomVertexArrayData_C_get_class_type_i_v();
EXPORT_FUNC void GeomVertexArrayData_C_init_type_v_v();
EXPORT_FUNC int GeomVertexArrayData_C_get_type_i_p(GeomVertexArrayData const *param0);
EXPORT_FUNC int GeomVertexArrayData_C_force_init_type_i_p(GeomVertexArrayData *param0);


// GeomVertexArrayDataHandle

EXPORT_FUNC ReferenceCount * GeomVertexArrayDataHandle_C_upcast_to_ReferenceCount_p_p(GeomVertexArrayDataHandle *param0);
EXPORT_FUNC GeomEnums * GeomVertexArrayDataHandle_C_upcast_to_GeomEnums_p_p(GeomVertexArrayDataHandle *param0);
EXPORT_FUNC Thread * GeomVertexArrayDataHandle_C_get_current_thread_p_p(GeomVertexArrayDataHandle const *param0);
EXPORT_FUNC void GeomVertexArrayDataHandle_C_get_read_pointer_v_pB(GeomVertexArrayDataHandle const *param0, bool param1);
EXPORT_FUNC void GeomVertexArrayDataHandle_C_get_write_pointer_v_p(GeomVertexArrayDataHandle *param0);
EXPORT_FUNC GeomVertexArrayData * GeomVertexArrayDataHandle_C_get_object_p_p(GeomVertexArrayDataHandle *param0);
EXPORT_FUNC GeomVertexArrayData const * GeomVertexArrayDataHandle_C_get_object_p_p_1_p_p(GeomVertexArrayDataHandle const *param0);
EXPORT_FUNC GeomVertexArrayFormat const * GeomVertexArrayDataHandle_C_get_array_format_p_p(GeomVertexArrayDataHandle const *param0);
EXPORT_FUNC GeomEnums::UsageHint GeomVertexArrayDataHandle_C_get_usage_hint_p_p(GeomVertexArrayDataHandle const *param0);
EXPORT_FUNC int GeomVertexArrayDataHandle_C_get_num_rows_i_p(GeomVertexArrayDataHandle const *param0);
EXPORT_FUNC bool GeomVertexArrayDataHandle_C_set_num_rows_B_pi(GeomVertexArrayDataHandle *param0, int param1);
EXPORT_FUNC bool GeomVertexArrayDataHandle_C_unclean_set_num_rows_B_pi(GeomVertexArrayDataHandle *param0, int param1);
EXPORT_FUNC bool GeomVertexArrayDataHandle_C_reserve_num_rows_B_pi(GeomVertexArrayDataHandle *param0, int param1);
EXPORT_FUNC void GeomVertexArrayDataHandle_C_clear_rows_v_p(GeomVertexArrayDataHandle *param0);
EXPORT_FUNC std::size_t GeomVertexArrayDataHandle_C_get_data_size_bytes_l_p(GeomVertexArrayDataHandle const *param0);
EXPORT_FUNC UpdateSeq * GeomVertexArrayDataHandle_C_get_modified_p_p(GeomVertexArrayDataHandle const *param0);
EXPORT_FUNC bool GeomVertexArrayDataHandle_C_request_resident_B_p(GeomVertexArrayDataHandle const *param0);
EXPORT_FUNC VertexBufferContext * GeomVertexArrayDataHandle_C_prepare_now_p_ppp(GeomVertexArrayDataHandle const *param0, PreparedGraphicsObjects *param1, GraphicsStateGuardianBase *param2);
EXPORT_FUNC void GeomVertexArrayDataHandle_C_copy_data_from_v_pp(GeomVertexArrayDataHandle *param0, GeomVertexArrayDataHandle const *param1);
EXPORT_FUNC void GeomVertexArrayDataHandle_C_copy_subdata_from_v_pllpll(GeomVertexArrayDataHandle *param0, std::size_t param1, std::size_t param2, GeomVertexArrayDataHandle const *param3, std::size_t param4, std::size_t param5);
EXPORT_FUNC vector_uchar GeomVertexArrayDataHandle_C_get_data_p_p(GeomVertexArrayDataHandle const *param0);
EXPORT_FUNC void GeomVertexArrayDataHandle_C_set_data_v_pp(GeomVertexArrayDataHandle *param0, vector_uchar param1);
EXPORT_FUNC vector_uchar GeomVertexArrayDataHandle_C_get_subdata_p_pll(GeomVertexArrayDataHandle const *param0, std::size_t param1, std::size_t param2);
EXPORT_FUNC void GeomVertexArrayDataHandle_C_set_subdata_v_pllp(GeomVertexArrayDataHandle *param0, std::size_t param1, std::size_t param2, vector_uchar param3);
EXPORT_FUNC void GeomVertexArrayDataHandle_C_mark_used_v_p(GeomVertexArrayDataHandle const *param0);
EXPORT_FUNC int GeomVertexArrayDataHandle_C_get_class_type_i_v();
EXPORT_FUNC void GeomVertexArrayDataHandle_C_init_type_v_v();


// GeomVertexArrayFormat

EXPORT_FUNC TypedWritableReferenceCount * GeomVertexArrayFormat_C_upcast_to_TypedWritableReferenceCount_p_p(GeomVertexArrayFormat *param0);
EXPORT_FUNC GeomEnums * GeomVertexArrayFormat_C_upcast_to_GeomEnums_p_p(GeomVertexArrayFormat *param0);
EXPORT_FUNC GeomVertexArrayFormat * GeomVertexArrayFormat_C_ctor_p_v();
EXPORT_FUNC GeomVertexArrayFormat * GeomVertexArrayFormat_C_ctor_p_sipp(CPT_InternalName *param0, int param1, GeomEnums::NumericType param2, GeomEnums::Contents param3);
EXPORT_FUNC GeomVertexArrayFormat * GeomVertexArrayFormat_C_ctor_p_sippsipp(CPT_InternalName *param0, int param1, GeomEnums::NumericType param2, GeomEnums::Contents param3, CPT_InternalName *param4, int param5, GeomEnums::NumericType param6, GeomEnums::Contents param7);
EXPORT_FUNC GeomVertexArrayFormat * GeomVertexArrayFormat_C_ctor_p_sippsippsipp(CPT_InternalName *param0, int param1, GeomEnums::NumericType param2, GeomEnums::Contents param3, CPT_InternalName *param4, int param5, GeomEnums::NumericType param6, GeomEnums::Contents param7, CPT_InternalName *param8, int param9, GeomEnums::NumericType param10, GeomEnums::Contents param11);
EXPORT_FUNC GeomVertexArrayFormat * GeomVertexArrayFormat_C_ctor_p_sippsippsippsipp(CPT_InternalName *param0, int param1, GeomEnums::NumericType param2, GeomEnums::Contents param3, CPT_InternalName *param4, int param5, GeomEnums::NumericType param6, GeomEnums::Contents param7, CPT_InternalName *param8, int param9, GeomEnums::NumericType param10, GeomEnums::Contents param11, CPT_InternalName *param12, int param13, GeomEnums::NumericType param14, GeomEnums::Contents param15);
EXPORT_FUNC GeomVertexArrayFormat * GeomVertexArrayFormat_C_ctor_p_p(GeomVertexArrayFormat const *param0);
EXPORT_FUNC bool GeomVertexArrayFormat_C_unref_B_p(GeomVertexArrayFormat const *param0);
EXPORT_FUNC bool GeomVertexArrayFormat_C_is_registered_B_p(GeomVertexArrayFormat const *param0);
EXPORT_FUNC ConstPointerTo< GeomVertexArrayFormat > * GeomVertexArrayFormat_C_register_format_p_p(GeomVertexArrayFormat const *param0);
EXPORT_FUNC int GeomVertexArrayFormat_C_get_stride_i_p(GeomVertexArrayFormat const *param0);
EXPORT_FUNC void GeomVertexArrayFormat_C_set_stride_v_pi(GeomVertexArrayFormat *param0, int param1);
EXPORT_FUNC int GeomVertexArrayFormat_C_get_pad_to_i_p(GeomVertexArrayFormat const *param0);
EXPORT_FUNC void GeomVertexArrayFormat_C_set_pad_to_v_pi(GeomVertexArrayFormat *param0, int param1);
EXPORT_FUNC int GeomVertexArrayFormat_C_get_divisor_i_p(GeomVertexArrayFormat const *param0);
EXPORT_FUNC void GeomVertexArrayFormat_C_set_divisor_v_pi(GeomVertexArrayFormat *param0, int param1);
EXPORT_FUNC int GeomVertexArrayFormat_C_get_total_bytes_i_p(GeomVertexArrayFormat const *param0);
EXPORT_FUNC int GeomVertexArrayFormat_C_add_column_i_psippii(GeomVertexArrayFormat *param0, CPT_InternalName *param1, int param2, GeomEnums::NumericType param3, GeomEnums::Contents param4, int param5, int param6);
EXPORT_FUNC int GeomVertexArrayFormat_C_add_column_i_psippi(GeomVertexArrayFormat *param0, CPT_InternalName *param1, int param2, GeomEnums::NumericType param3, GeomEnums::Contents param4, int param5);
EXPORT_FUNC int GeomVertexArrayFormat_C_add_column_i_psipp(GeomVertexArrayFormat *param0, CPT_InternalName *param1, int param2, GeomEnums::NumericType param3, GeomEnums::Contents param4);
EXPORT_FUNC int GeomVertexArrayFormat_C_add_column_i_pp(GeomVertexArrayFormat *param0, GeomVertexColumn const *param1);
EXPORT_FUNC void GeomVertexArrayFormat_C_remove_column_v_ps(GeomVertexArrayFormat *param0, InternalName const *param1);
EXPORT_FUNC void GeomVertexArrayFormat_C_clear_columns_v_p(GeomVertexArrayFormat *param0);
EXPORT_FUNC void GeomVertexArrayFormat_C_pack_columns_v_p(GeomVertexArrayFormat *param0);
EXPORT_FUNC void GeomVertexArrayFormat_C_align_columns_for_animation_v_p(GeomVertexArrayFormat *param0);
EXPORT_FUNC int GeomVertexArrayFormat_C_get_num_columns_i_p(GeomVertexArrayFormat const *param0);
EXPORT_FUNC GeomVertexColumn const * GeomVertexArrayFormat_C_get_column_p_ps(GeomVertexArrayFormat const *param0, InternalName const *param1);
EXPORT_FUNC GeomVertexColumn const * GeomVertexArrayFormat_C_get_column_p_pi(GeomVertexArrayFormat const *param0, int param1);
EXPORT_FUNC GeomVertexColumn const * GeomVertexArrayFormat_C_get_column_p_pii(GeomVertexArrayFormat const *param0, int param1, int param2);
EXPORT_FUNC bool GeomVertexArrayFormat_C_has_column_B_ps(GeomVertexArrayFormat const *param0, InternalName const *param1);
EXPORT_FUNC bool GeomVertexArrayFormat_C_is_data_subset_of_B_pp(GeomVertexArrayFormat const *param0, GeomVertexArrayFormat const *param1);
EXPORT_FUNC int GeomVertexArrayFormat_C_count_unused_space_i_p(GeomVertexArrayFormat const *param0);
EXPORT_FUNC void GeomVertexArrayFormat_C_output_v_pp(GeomVertexArrayFormat const *param0, std::ostream *param1);
EXPORT_FUNC void GeomVertexArrayFormat_C_write_v_ppi(GeomVertexArrayFormat const *param0, std::ostream *param1, int param2);
EXPORT_FUNC void GeomVertexArrayFormat_C_write_v_pp(GeomVertexArrayFormat const *param0, std::ostream *param1);
EXPORT_FUNC void GeomVertexArrayFormat_C_write_with_data_v_ppip(GeomVertexArrayFormat const *param0, std::ostream *param1, int param2, GeomVertexArrayData const *param3);
EXPORT_FUNC char const * GeomVertexArrayFormat_C_get_format_string_s_pB(GeomVertexArrayFormat const *param0, bool param1);
EXPORT_FUNC char const * GeomVertexArrayFormat_C_get_format_string_s_p(GeomVertexArrayFormat const *param0);
EXPORT_FUNC int GeomVertexArrayFormat_C_compare_to_i_pp(GeomVertexArrayFormat const *param0, GeomVertexArrayFormat const *param1);
EXPORT_FUNC void GeomVertexArrayFormat_C_register_with_read_factory_v_v();
EXPORT_FUNC void GeomVertexArrayFormat_C_write_datagram_v_ppp(GeomVertexArrayFormat *param0, BamWriter *param1, Datagram *param2);
EXPORT_FUNC void GeomVertexArrayFormat_C_finalize_v_pp(GeomVertexArrayFormat *param0, BamReader *param1);
EXPORT_FUNC int GeomVertexArrayFormat_C_get_class_type_i_v();
EXPORT_FUNC void GeomVertexArrayFormat_C_init_type_v_v();
EXPORT_FUNC int GeomVertexArrayFormat_C_get_type_i_p(GeomVertexArrayFormat const *param0);
EXPORT_FUNC int GeomVertexArrayFormat_C_force_init_type_i_p(GeomVertexArrayFormat *param0);


// GeomVertexColumn

EXPORT_FUNC GeomVertexColumn * GeomVertexColumn_C_ctor_p_sippiiii(CPT_InternalName *param0, int param1, GeomEnums::NumericType param2, GeomEnums::Contents param3, int param4, int param5, int param6, int param7);
EXPORT_FUNC GeomVertexColumn * GeomVertexColumn_C_ctor_p_sippiii(CPT_InternalName *param0, int param1, GeomEnums::NumericType param2, GeomEnums::Contents param3, int param4, int param5, int param6);
EXPORT_FUNC GeomVertexColumn * GeomVertexColumn_C_ctor_p_sippii(CPT_InternalName *param0, int param1, GeomEnums::NumericType param2, GeomEnums::Contents param3, int param4, int param5);
EXPORT_FUNC GeomVertexColumn * GeomVertexColumn_C_ctor_p_sippi(CPT_InternalName *param0, int param1, GeomEnums::NumericType param2, GeomEnums::Contents param3, int param4);
EXPORT_FUNC GeomVertexColumn * GeomVertexColumn_C_ctor_p_p(GeomVertexColumn const *param0);
EXPORT_FUNC InternalName const * GeomVertexColumn_C_get_name_s_p(GeomVertexColumn const *param0);
EXPORT_FUNC int GeomVertexColumn_C_get_num_components_i_p(GeomVertexColumn const *param0);
EXPORT_FUNC int GeomVertexColumn_C_get_num_values_i_p(GeomVertexColumn const *param0);
EXPORT_FUNC int GeomVertexColumn_C_get_num_elements_i_p(GeomVertexColumn const *param0);
EXPORT_FUNC GeomEnums::NumericType GeomVertexColumn_C_get_numeric_type_p_p(GeomVertexColumn const *param0);
EXPORT_FUNC GeomEnums::Contents GeomVertexColumn_C_get_contents_p_p(GeomVertexColumn const *param0);
EXPORT_FUNC int GeomVertexColumn_C_get_start_i_p(GeomVertexColumn const *param0);
EXPORT_FUNC int GeomVertexColumn_C_get_column_alignment_i_p(GeomVertexColumn const *param0);
EXPORT_FUNC int GeomVertexColumn_C_get_element_stride_i_p(GeomVertexColumn const *param0);
EXPORT_FUNC int GeomVertexColumn_C_get_component_bytes_i_p(GeomVertexColumn const *param0);
EXPORT_FUNC int GeomVertexColumn_C_get_total_bytes_i_p(GeomVertexColumn const *param0);
EXPORT_FUNC bool GeomVertexColumn_C_has_homogeneous_coord_B_p(GeomVertexColumn const *param0);
EXPORT_FUNC bool GeomVertexColumn_C_overlaps_with_B_pii(GeomVertexColumn const *param0, int param1, int param2);
EXPORT_FUNC bool GeomVertexColumn_C_is_bytewise_equivalent_B_pp(GeomVertexColumn const *param0, GeomVertexColumn const *param1);
EXPORT_FUNC void GeomVertexColumn_C_set_name_v_pp(GeomVertexColumn *param0, InternalName *param1);
EXPORT_FUNC void GeomVertexColumn_C_set_num_components_v_pi(GeomVertexColumn *param0, int param1);
EXPORT_FUNC void GeomVertexColumn_C_set_numeric_type_v_pp(GeomVertexColumn *param0, GeomEnums::NumericType param1);
EXPORT_FUNC void GeomVertexColumn_C_set_contents_v_pp(GeomVertexColumn *param0, GeomEnums::Contents param1);
EXPORT_FUNC void GeomVertexColumn_C_set_start_v_pi(GeomVertexColumn *param0, int param1);
EXPORT_FUNC void GeomVertexColumn_C_set_column_alignment_v_pi(GeomVertexColumn *param0, int param1);
EXPORT_FUNC void GeomVertexColumn_C_output_v_pp(GeomVertexColumn const *param0, std::ostream *param1);
EXPORT_FUNC bool GeomVertexColumn_C_is_packed_argb_B_p(GeomVertexColumn const *param0);
EXPORT_FUNC bool GeomVertexColumn_C_is_uint8_rgba_B_p(GeomVertexColumn const *param0);
EXPORT_FUNC int GeomVertexColumn_C_compare_to_i_pp(GeomVertexColumn const *param0, GeomVertexColumn const *param1);
EXPORT_FUNC void GeomVertexColumn_C_write_datagram_v_ppp(GeomVertexColumn *param0, BamWriter *param1, Datagram *param2);
EXPORT_FUNC void GeomVertexColumn_C_fillin_v_ppp(GeomVertexColumn *param0, DatagramIterator *param1, BamReader *param2);


// GeomVertexData

EXPORT_FUNC CopyOnWriteObject * GeomVertexData_C_upcast_to_CopyOnWriteObject_p_p(GeomVertexData *param0);
EXPORT_FUNC GeomEnums * GeomVertexData_C_upcast_to_GeomEnums_p_p(GeomVertexData *param0);
EXPORT_FUNC GeomVertexData * GeomVertexData_C_ctor_p_p(GeomVertexData const *param0);
EXPORT_FUNC GeomVertexData * GeomVertexData_C_ctor_p_pp(GeomVertexData const *param0, GeomVertexFormat const *param1);
EXPORT_FUNC GeomVertexData * GeomVertexData_C_ctor_p_spp(char const *param0, GeomVertexFormat const *param1, GeomEnums::UsageHint param2);
EXPORT_FUNC int GeomVertexData_C_compare_to_i_pp(GeomVertexData const *param0, GeomVertexData const *param1);
EXPORT_FUNC char const * GeomVertexData_C_get_name_s_p(GeomVertexData const *param0);
EXPORT_FUNC void GeomVertexData_C_set_name_v_ps(GeomVertexData *param0, char const *param1);
EXPORT_FUNC GeomEnums::UsageHint GeomVertexData_C_get_usage_hint_p_p(GeomVertexData const *param0);
EXPORT_FUNC void GeomVertexData_C_set_usage_hint_v_pp(GeomVertexData *param0, GeomEnums::UsageHint param1);
EXPORT_FUNC GeomVertexFormat const * GeomVertexData_C_get_format_p_p(GeomVertexData const *param0);
EXPORT_FUNC void GeomVertexData_C_set_format_v_pp(GeomVertexData *param0, GeomVertexFormat const *param1);
EXPORT_FUNC void GeomVertexData_C_unclean_set_format_v_pp(GeomVertexData *param0, GeomVertexFormat const *param1);
EXPORT_FUNC bool GeomVertexData_C_has_column_B_ps(GeomVertexData const *param0, InternalName const *param1);
EXPORT_FUNC int GeomVertexData_C_get_num_rows_i_p(GeomVertexData const *param0);
EXPORT_FUNC bool GeomVertexData_C_set_num_rows_B_pi(GeomVertexData *param0, int param1);
EXPORT_FUNC bool GeomVertexData_C_unclean_set_num_rows_B_pi(GeomVertexData *param0, int param1);
EXPORT_FUNC bool GeomVertexData_C_reserve_num_rows_B_pi(GeomVertexData *param0, int param1);
EXPORT_FUNC void GeomVertexData_C_clear_rows_v_p(GeomVertexData *param0);
EXPORT_FUNC std::size_t GeomVertexData_C_get_num_arrays_l_p(GeomVertexData const *param0);
EXPORT_FUNC ConstPointerTo< GeomVertexArrayData > * GeomVertexData_C_get_array_p_pl(GeomVertexData const *param0, std::size_t param1);
EXPORT_FUNC ConstPointerTo< GeomVertexArrayDataHandle > * GeomVertexData_C_get_array_handle_p_pl(GeomVertexData const *param0, std::size_t param1);
EXPORT_FUNC PointerTo< GeomVertexArrayData > * GeomVertexData_C_modify_array_p_pl(GeomVertexData *param0, std::size_t param1);
EXPORT_FUNC PointerTo< GeomVertexArrayDataHandle > * GeomVertexData_C_modify_array_handle_p_pl(GeomVertexData *param0, std::size_t param1);
EXPORT_FUNC void GeomVertexData_C_set_array_v_plp(GeomVertexData *param0, std::size_t param1, GeomVertexArrayData const *param2);
EXPORT_FUNC TransformTable const * GeomVertexData_C_get_transform_table_p_p(GeomVertexData const *param0);
EXPORT_FUNC void GeomVertexData_C_set_transform_table_v_pp(GeomVertexData *param0, TransformTable const *param1);
EXPORT_FUNC void GeomVertexData_C_clear_transform_table_v_p(GeomVertexData *param0);
EXPORT_FUNC ConstPointerTo< TransformBlendTable > * GeomVertexData_C_get_transform_blend_table_p_p(GeomVertexData const *param0);
EXPORT_FUNC PointerTo< TransformBlendTable > * GeomVertexData_C_modify_transform_blend_table_p_p(GeomVertexData *param0);
EXPORT_FUNC void GeomVertexData_C_set_transform_blend_table_v_pp(GeomVertexData *param0, TransformBlendTable const *param1);
EXPORT_FUNC void GeomVertexData_C_clear_transform_blend_table_v_p(GeomVertexData *param0);
EXPORT_FUNC SliderTable const * GeomVertexData_C_get_slider_table_p_p(GeomVertexData const *param0);
EXPORT_FUNC void GeomVertexData_C_set_slider_table_v_pp(GeomVertexData *param0, SliderTable const *param1);
EXPORT_FUNC void GeomVertexData_C_clear_slider_table_v_p(GeomVertexData *param0);
EXPORT_FUNC int GeomVertexData_C_get_num_bytes_i_p(GeomVertexData const *param0);
EXPORT_FUNC UpdateSeq * GeomVertexData_C_get_modified_p_pp(GeomVertexData const *param0, Thread *param1);
EXPORT_FUNC UpdateSeq * GeomVertexData_C_get_modified_p_p(GeomVertexData const *param0);
EXPORT_FUNC bool GeomVertexData_C_request_resident_B_p(GeomVertexData const *param0);
EXPORT_FUNC void GeomVertexData_C_copy_from_v_ppBp(GeomVertexData *param0, GeomVertexData const *param1, bool param2, Thread *param3);
EXPORT_FUNC void GeomVertexData_C_copy_from_v_ppB(GeomVertexData *param0, GeomVertexData const *param1, bool param2);
EXPORT_FUNC void GeomVertexData_C_copy_row_from_v_pipip(GeomVertexData *param0, int param1, GeomVertexData const *param2, int param3, Thread *param4);
EXPORT_FUNC ConstPointerTo< GeomVertexData > * GeomVertexData_C_convert_to_p_pp(GeomVertexData const *param0, GeomVertexFormat const *param1);
EXPORT_FUNC ConstPointerTo< GeomVertexData > * GeomVertexData_C_scale_color_p_pp(GeomVertexData const *param0, LVecBase4 const *param1);
EXPORT_FUNC ConstPointerTo< GeomVertexData > * GeomVertexData_C_scale_color_p_ppipp(GeomVertexData const *param0, LVecBase4 const *param1, int param2, GeomEnums::NumericType param3, GeomEnums::Contents param4);
EXPORT_FUNC ConstPointerTo< GeomVertexData > * GeomVertexData_C_set_color_p_pp(GeomVertexData const *param0, LColor const *param1);
EXPORT_FUNC ConstPointerTo< GeomVertexData > * GeomVertexData_C_set_color_p_ppipp(GeomVertexData const *param0, LColor const *param1, int param2, GeomEnums::NumericType param3, GeomEnums::Contents param4);
EXPORT_FUNC ConstPointerTo< GeomVertexData > * GeomVertexData_C_reverse_normals_p_p(GeomVertexData const *param0);
EXPORT_FUNC ConstPointerTo< GeomVertexData > * GeomVertexData_C_animate_vertices_p_pBp(GeomVertexData const *param0, bool param1, Thread *param2);
EXPORT_FUNC void GeomVertexData_C_clear_animated_vertices_v_p(GeomVertexData *param0);
EXPORT_FUNC void GeomVertexData_C_transform_vertices_v_pp(GeomVertexData *param0, LMatrix4 const *param1);
EXPORT_FUNC void GeomVertexData_C_transform_vertices_v_ppp(GeomVertexData *param0, LMatrix4 const *param1, SparseArray const *param2);
EXPORT_FUNC void GeomVertexData_C_transform_vertices_v_ppii(GeomVertexData *param0, LMatrix4 const *param1, int param2, int param3);
EXPORT_FUNC PointerTo< GeomVertexData > * GeomVertexData_C_replace_column_p_ppipp(GeomVertexData const *param0, InternalName *param1, int param2, GeomEnums::NumericType param3, GeomEnums::Contents param4);
EXPORT_FUNC void GeomVertexData_C_output_v_pp(GeomVertexData const *param0, std::ostream *param1);
EXPORT_FUNC void GeomVertexData_C_write_v_ppi(GeomVertexData const *param0, std::ostream *param1, int param2);
EXPORT_FUNC void GeomVertexData_C_write_v_pp(GeomVertexData const *param0, std::ostream *param1);
EXPORT_FUNC void GeomVertexData_C_describe_vertex_v_ppi(GeomVertexData const *param0, std::ostream *param1, int param2);
EXPORT_FUNC void GeomVertexData_C_clear_cache_v_p(GeomVertexData *param0);
EXPORT_FUNC void GeomVertexData_C_clear_cache_stage_v_p(GeomVertexData *param0);
EXPORT_FUNC uint32_t GeomVertexData_C_pack_abcd_I_IIII(unsigned int param0, unsigned int param1, unsigned int param2, unsigned int param3);
EXPORT_FUNC unsigned int GeomVertexData_C_unpack_abcd_a_I_I(uint32_t param0);
EXPORT_FUNC unsigned int GeomVertexData_C_unpack_abcd_b_I_I(uint32_t param0);
EXPORT_FUNC unsigned int GeomVertexData_C_unpack_abcd_c_I_I(uint32_t param0);
EXPORT_FUNC unsigned int GeomVertexData_C_unpack_abcd_d_I_I(uint32_t param0);
EXPORT_FUNC uint32_t GeomVertexData_C_pack_ufloat_I_fff(float param0, float param1, float param2);
EXPORT_FUNC float GeomVertexData_C_unpack_ufloat_a_f_I(uint32_t param0);
EXPORT_FUNC float GeomVertexData_C_unpack_ufloat_b_f_I(uint32_t param0);
EXPORT_FUNC float GeomVertexData_C_unpack_ufloat_c_f_I(uint32_t param0);
EXPORT_FUNC void GeomVertexData_C_register_with_read_factory_v_v();
EXPORT_FUNC void GeomVertexData_C_write_datagram_v_ppp(GeomVertexData *param0, BamWriter *param1, Datagram *param2);
EXPORT_FUNC bool GeomVertexData_C_require_fully_complete_B_p(GeomVertexData const *param0);
EXPORT_FUNC void GeomVertexData_C_finalize_v_pp(GeomVertexData *param0, BamReader *param1);
EXPORT_FUNC int GeomVertexData_C_get_class_type_i_v();
EXPORT_FUNC void GeomVertexData_C_init_type_v_v();
EXPORT_FUNC int GeomVertexData_C_get_type_i_p(GeomVertexData const *param0);
EXPORT_FUNC int GeomVertexData_C_force_init_type_i_p(GeomVertexData *param0);


// GeomVertexFormat

EXPORT_FUNC TypedWritableReferenceCount * GeomVertexFormat_C_upcast_to_TypedWritableReferenceCount_p_p(GeomVertexFormat *param0);
EXPORT_FUNC GeomEnums * GeomVertexFormat_C_upcast_to_GeomEnums_p_p(GeomVertexFormat *param0);
EXPORT_FUNC GeomVertexFormat * GeomVertexFormat_C_ctor_p_v();
EXPORT_FUNC GeomVertexFormat * GeomVertexFormat_C_ctor_p_p(GeomVertexArrayFormat const *param0);
EXPORT_FUNC GeomVertexFormat * GeomVertexFormat_C_ctor_p_p_1_p_p(GeomVertexFormat const *param0);
EXPORT_FUNC bool GeomVertexFormat_C_unref_B_p(GeomVertexFormat const *param0);
EXPORT_FUNC bool GeomVertexFormat_C_is_registered_B_p(GeomVertexFormat const *param0);
EXPORT_FUNC ConstPointerTo< GeomVertexFormat > * GeomVertexFormat_C_register_format_p_p(GeomVertexArrayFormat const *param0);
EXPORT_FUNC ConstPointerTo< GeomVertexFormat > * GeomVertexFormat_C_register_format_p_p_1_p_p(GeomVertexFormat const *param0);
EXPORT_FUNC GeomVertexAnimationSpec const * GeomVertexFormat_C_get_animation_p_p(GeomVertexFormat const *param0);
EXPORT_FUNC void GeomVertexFormat_C_set_animation_v_pp(GeomVertexFormat *param0, GeomVertexAnimationSpec const *param1);
EXPORT_FUNC ConstPointerTo< GeomVertexFormat > * GeomVertexFormat_C_get_post_animated_format_p_p(GeomVertexFormat const *param0);
EXPORT_FUNC ConstPointerTo< GeomVertexFormat > * GeomVertexFormat_C_get_union_format_p_pp(GeomVertexFormat const *param0, GeomVertexFormat const *param1);
EXPORT_FUNC std::size_t GeomVertexFormat_C_get_num_arrays_l_p(GeomVertexFormat const *param0);
EXPORT_FUNC GeomVertexArrayFormat const * GeomVertexFormat_C_get_array_p_pl(GeomVertexFormat const *param0, std::size_t param1);
EXPORT_FUNC GeomVertexArrayFormat * GeomVertexFormat_C_modify_array_p_pl(GeomVertexFormat *param0, std::size_t param1);
EXPORT_FUNC void GeomVertexFormat_C_set_array_v_plp(GeomVertexFormat *param0, std::size_t param1, GeomVertexArrayFormat const *param2);
EXPORT_FUNC void GeomVertexFormat_C_remove_array_v_pl(GeomVertexFormat *param0, std::size_t param1);
EXPORT_FUNC std::size_t GeomVertexFormat_C_add_array_l_pp(GeomVertexFormat *param0, GeomVertexArrayFormat const *param1);
EXPORT_FUNC void GeomVertexFormat_C_insert_array_v_plp(GeomVertexFormat *param0, std::size_t param1, GeomVertexArrayFormat const *param2);
EXPORT_FUNC void GeomVertexFormat_C_clear_arrays_v_p(GeomVertexFormat *param0);
EXPORT_FUNC void GeomVertexFormat_C_remove_empty_arrays_v_p(GeomVertexFormat *param0);
EXPORT_FUNC std::size_t GeomVertexFormat_C_get_num_columns_l_p(GeomVertexFormat const *param0);
EXPORT_FUNC int GeomVertexFormat_C_get_array_with_i_ps(GeomVertexFormat const *param0, InternalName const *param1);
EXPORT_FUNC int GeomVertexFormat_C_get_array_with_i_pl(GeomVertexFormat const *param0, std::size_t param1);
EXPORT_FUNC GeomVertexColumn const * GeomVertexFormat_C_get_column_p_ps(GeomVertexFormat const *param0, InternalName const *param1);
EXPORT_FUNC GeomVertexColumn const * GeomVertexFormat_C_get_column_p_pl(GeomVertexFormat const *param0, std::size_t param1);
EXPORT_FUNC bool GeomVertexFormat_C_has_column_B_ps(GeomVertexFormat const *param0, InternalName const *param1);
EXPORT_FUNC InternalName const * GeomVertexFormat_C_get_column_name_s_pl(GeomVertexFormat const *param0, std::size_t param1);
EXPORT_FUNC void GeomVertexFormat_C_remove_column_v_psB(GeomVertexFormat *param0, InternalName const *param1, bool param2);
EXPORT_FUNC void GeomVertexFormat_C_remove_column_v_ps(GeomVertexFormat *param0, InternalName const *param1);
EXPORT_FUNC void GeomVertexFormat_C_pack_columns_v_p(GeomVertexFormat *param0);
EXPORT_FUNC void GeomVertexFormat_C_align_columns_for_animation_v_p(GeomVertexFormat *param0);
EXPORT_FUNC void GeomVertexFormat_C_maybe_align_columns_for_animation_v_p(GeomVertexFormat *param0);
EXPORT_FUNC std::size_t GeomVertexFormat_C_get_num_points_l_p(GeomVertexFormat const *param0);
EXPORT_FUNC InternalName const * GeomVertexFormat_C_get_point_s_pl(GeomVertexFormat const *param0, std::size_t param1);
EXPORT_FUNC std::size_t GeomVertexFormat_C_get_num_vectors_l_p(GeomVertexFormat const *param0);
EXPORT_FUNC InternalName const * GeomVertexFormat_C_get_vector_s_pl(GeomVertexFormat const *param0, std::size_t param1);
EXPORT_FUNC std::size_t GeomVertexFormat_C_get_num_texcoords_l_p(GeomVertexFormat const *param0);
EXPORT_FUNC InternalName const * GeomVertexFormat_C_get_texcoord_s_pl(GeomVertexFormat const *param0, std::size_t param1);
EXPORT_FUNC std::size_t GeomVertexFormat_C_get_num_morphs_l_p(GeomVertexFormat const *param0);
EXPORT_FUNC InternalName const * GeomVertexFormat_C_get_morph_slider_s_pl(GeomVertexFormat const *param0, std::size_t param1);
EXPORT_FUNC InternalName const * GeomVertexFormat_C_get_morph_base_s_pl(GeomVertexFormat const *param0, std::size_t param1);
EXPORT_FUNC InternalName const * GeomVertexFormat_C_get_morph_delta_s_pl(GeomVertexFormat const *param0, std::size_t param1);
EXPORT_FUNC void GeomVertexFormat_C_output_v_pp(GeomVertexFormat const *param0, std::ostream *param1);
EXPORT_FUNC void GeomVertexFormat_C_write_v_ppi(GeomVertexFormat const *param0, std::ostream *param1, int param2);
EXPORT_FUNC void GeomVertexFormat_C_write_v_pp(GeomVertexFormat const *param0, std::ostream *param1);
EXPORT_FUNC void GeomVertexFormat_C_write_with_data_v_ppip(GeomVertexFormat const *param0, std::ostream *param1, int param2, GeomVertexData const *param3);
EXPORT_FUNC GeomVertexFormat const * GeomVertexFormat_C_get_empty_p_v();
EXPORT_FUNC GeomVertexFormat const * GeomVertexFormat_C_get_v3_p_v();
EXPORT_FUNC GeomVertexFormat const * GeomVertexFormat_C_get_v3n3_p_v();
EXPORT_FUNC GeomVertexFormat const * GeomVertexFormat_C_get_v3t2_p_v();
EXPORT_FUNC GeomVertexFormat const * GeomVertexFormat_C_get_v3n3t2_p_v();
EXPORT_FUNC GeomVertexFormat const * GeomVertexFormat_C_get_v3cp_p_v();
EXPORT_FUNC GeomVertexFormat const * GeomVertexFormat_C_get_v3cpt2_p_v();
EXPORT_FUNC GeomVertexFormat const * GeomVertexFormat_C_get_v3n3cp_p_v();
EXPORT_FUNC GeomVertexFormat const * GeomVertexFormat_C_get_v3n3cpt2_p_v();
EXPORT_FUNC GeomVertexFormat const * GeomVertexFormat_C_get_v3c4_p_v();
EXPORT_FUNC GeomVertexFormat const * GeomVertexFormat_C_get_v3c4t2_p_v();
EXPORT_FUNC GeomVertexFormat const * GeomVertexFormat_C_get_v3n3c4_p_v();
EXPORT_FUNC GeomVertexFormat const * GeomVertexFormat_C_get_v3n3c4t2_p_v();
EXPORT_FUNC int GeomVertexFormat_C_get_vertex_array_index_i_p(GeomVertexFormat const *param0);
EXPORT_FUNC GeomVertexColumn const * GeomVertexFormat_C_get_vertex_column_p_p(GeomVertexFormat const *param0);
EXPORT_FUNC int GeomVertexFormat_C_get_normal_array_index_i_p(GeomVertexFormat const *param0);
EXPORT_FUNC GeomVertexColumn const * GeomVertexFormat_C_get_normal_column_p_p(GeomVertexFormat const *param0);
EXPORT_FUNC int GeomVertexFormat_C_get_color_array_index_i_p(GeomVertexFormat const *param0);
EXPORT_FUNC GeomVertexColumn const * GeomVertexFormat_C_get_color_column_p_p(GeomVertexFormat const *param0);
EXPORT_FUNC int GeomVertexFormat_C_compare_to_i_pp(GeomVertexFormat const *param0, GeomVertexFormat const *param1);
EXPORT_FUNC void GeomVertexFormat_C_register_with_read_factory_v_v();
EXPORT_FUNC void GeomVertexFormat_C_write_datagram_v_ppp(GeomVertexFormat *param0, BamWriter *param1, Datagram *param2);
EXPORT_FUNC int GeomVertexFormat_C_get_class_type_i_v();
EXPORT_FUNC void GeomVertexFormat_C_init_type_v_v();
EXPORT_FUNC int GeomVertexFormat_C_get_type_i_p(GeomVertexFormat const *param0);
EXPORT_FUNC int GeomVertexFormat_C_force_init_type_i_p(GeomVertexFormat *param0);


// GeomVertexWriter

EXPORT_FUNC GeomVertexWriter * GeomVertexWriter_C_ctor_p_pp(GeomVertexArrayData *param0, Thread *param1);
EXPORT_FUNC GeomVertexWriter * GeomVertexWriter_C_ctor_p_p(GeomVertexArrayData *param0);
EXPORT_FUNC GeomVertexWriter * GeomVertexWriter_C_ctor_p_pip(GeomVertexArrayData *param0, int param1, Thread *param2);
EXPORT_FUNC GeomVertexWriter * GeomVertexWriter_C_ctor_p_pi(GeomVertexArrayData *param0, int param1);
EXPORT_FUNC GeomVertexWriter * GeomVertexWriter_C_ctor_p_psp(GeomVertexData *param0, CPT_InternalName *param1, Thread *param2);
EXPORT_FUNC GeomVertexWriter * GeomVertexWriter_C_ctor_p_ps(GeomVertexData *param0, CPT_InternalName *param1);
EXPORT_FUNC GeomVertexWriter * GeomVertexWriter_C_ctor_p_pp_1_p_pp(GeomVertexData *param0, Thread *param1);
EXPORT_FUNC GeomVertexWriter * GeomVertexWriter_C_ctor_p_p_1_p_p(GeomVertexData *param0);
EXPORT_FUNC GeomVertexWriter * GeomVertexWriter_C_ctor_p_ps_1_p_ps(GeomVertexDataPipelineWriter *param0, InternalName const *param1);
EXPORT_FUNC GeomVertexWriter * GeomVertexWriter_C_ctor_p_p_1_p_p_2_p_p(GeomVertexWriter const *param0);
EXPORT_FUNC GeomVertexWriter * GeomVertexWriter_C_ctor_p_p_1_p_p_2_p_p_3_p_p(Thread *param0);
EXPORT_FUNC GeomVertexWriter * GeomVertexWriter_C_ctor_p_v();
EXPORT_FUNC GeomVertexData * GeomVertexWriter_C_get_vertex_data_p_p(GeomVertexWriter const *param0);
EXPORT_FUNC GeomVertexArrayData * GeomVertexWriter_C_get_array_data_p_p(GeomVertexWriter const *param0);
EXPORT_FUNC GeomVertexArrayDataHandle * GeomVertexWriter_C_get_array_handle_p_p(GeomVertexWriter const *param0);
EXPORT_FUNC std::size_t GeomVertexWriter_C_get_stride_l_p(GeomVertexWriter const *param0);
EXPORT_FUNC Thread * GeomVertexWriter_C_get_current_thread_p_p(GeomVertexWriter const *param0);
EXPORT_FUNC bool GeomVertexWriter_C_set_column_B_ps(GeomVertexWriter *param0, CPT_InternalName *param1);
EXPORT_FUNC bool GeomVertexWriter_C_set_column_B_pi(GeomVertexWriter *param0, int param1);
EXPORT_FUNC bool GeomVertexWriter_C_set_column_B_pip(GeomVertexWriter *param0, int param1, GeomVertexColumn const *param2);
EXPORT_FUNC void GeomVertexWriter_C_clear_v_p(GeomVertexWriter *param0);
EXPORT_FUNC bool GeomVertexWriter_C_reserve_num_rows_B_pi(GeomVertexWriter *param0, int param1);
EXPORT_FUNC bool GeomVertexWriter_C_has_column_B_p(GeomVertexWriter const *param0);
EXPORT_FUNC int GeomVertexWriter_C_get_array_i_p(GeomVertexWriter const *param0);
EXPORT_FUNC GeomVertexColumn const * GeomVertexWriter_C_get_column_p_p(GeomVertexWriter const *param0);
EXPORT_FUNC void GeomVertexWriter_C_set_row_unsafe_v_pi(GeomVertexWriter *param0, int param1);
EXPORT_FUNC void GeomVertexWriter_C_set_row_v_pi(GeomVertexWriter *param0, int param1);
EXPORT_FUNC int GeomVertexWriter_C_get_start_row_i_p(GeomVertexWriter const *param0);
EXPORT_FUNC int GeomVertexWriter_C_get_write_row_i_p(GeomVertexWriter const *param0);
EXPORT_FUNC bool GeomVertexWriter_C_is_at_end_B_p(GeomVertexWriter const *param0);
EXPORT_FUNC void GeomVertexWriter_C_set_data1f_v_pf(GeomVertexWriter *param0, float param1);
EXPORT_FUNC void GeomVertexWriter_C_set_data2f_v_pp(GeomVertexWriter *param0, LVecBase2f const *param1);
EXPORT_FUNC void GeomVertexWriter_C_set_data2f_v_pff(GeomVertexWriter *param0, float param1, float param2);
EXPORT_FUNC void GeomVertexWriter_C_set_data3f_v_pp(GeomVertexWriter *param0, LVecBase3f const *param1);
EXPORT_FUNC void GeomVertexWriter_C_set_data3f_v_pfff(GeomVertexWriter *param0, float param1, float param2, float param3);
EXPORT_FUNC void GeomVertexWriter_C_set_data4f_v_pp(GeomVertexWriter *param0, LVecBase4f const *param1);
EXPORT_FUNC void GeomVertexWriter_C_set_data4f_v_pffff(GeomVertexWriter *param0, float param1, float param2, float param3, float param4);
EXPORT_FUNC void GeomVertexWriter_C_set_matrix3f_v_pp(GeomVertexWriter *param0, LMatrix3f const *param1);
EXPORT_FUNC void GeomVertexWriter_C_set_matrix4f_v_pp(GeomVertexWriter *param0, LMatrix4f const *param1);
EXPORT_FUNC void GeomVertexWriter_C_set_data1d_v_pd(GeomVertexWriter *param0, double param1);
EXPORT_FUNC void GeomVertexWriter_C_set_data2d_v_pp(GeomVertexWriter *param0, LVecBase2d const *param1);
EXPORT_FUNC void GeomVertexWriter_C_set_data2d_v_pdd(GeomVertexWriter *param0, double param1, double param2);
EXPORT_FUNC void GeomVertexWriter_C_set_data3d_v_pp(GeomVertexWriter *param0, LVecBase3d const *param1);
EXPORT_FUNC void GeomVertexWriter_C_set_data3d_v_pddd(GeomVertexWriter *param0, double param1, double param2, double param3);
EXPORT_FUNC void GeomVertexWriter_C_set_data4d_v_pp(GeomVertexWriter *param0, LVecBase4d const *param1);
EXPORT_FUNC void GeomVertexWriter_C_set_data4d_v_pdddd(GeomVertexWriter *param0, double param1, double param2, double param3, double param4);
EXPORT_FUNC void GeomVertexWriter_C_set_matrix3d_v_pp(GeomVertexWriter *param0, LMatrix3d const *param1);
EXPORT_FUNC void GeomVertexWriter_C_set_matrix4d_v_pp(GeomVertexWriter *param0, LMatrix4d const *param1);
EXPORT_FUNC void GeomVertexWriter_C_set_data1_v_pf(GeomVertexWriter *param0, PN_stdfloat param1);
EXPORT_FUNC void GeomVertexWriter_C_set_data2_v_pp(GeomVertexWriter *param0, LVecBase2 const *param1);
EXPORT_FUNC void GeomVertexWriter_C_set_data2_v_pff(GeomVertexWriter *param0, PN_stdfloat param1, PN_stdfloat param2);
EXPORT_FUNC void GeomVertexWriter_C_set_data3_v_pp(GeomVertexWriter *param0, LVecBase3 const *param1);
EXPORT_FUNC void GeomVertexWriter_C_set_data3_v_pfff(GeomVertexWriter *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3);
EXPORT_FUNC void GeomVertexWriter_C_set_data4_v_pp(GeomVertexWriter *param0, LVecBase4 const *param1);
EXPORT_FUNC void GeomVertexWriter_C_set_data4_v_pffff(GeomVertexWriter *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC void GeomVertexWriter_C_set_matrix3_v_pp(GeomVertexWriter *param0, LMatrix3 const *param1);
EXPORT_FUNC void GeomVertexWriter_C_set_matrix4_v_pp(GeomVertexWriter *param0, LMatrix4 const *param1);
EXPORT_FUNC void GeomVertexWriter_C_set_data1i_v_pi(GeomVertexWriter *param0, int param1);
EXPORT_FUNC void GeomVertexWriter_C_set_data2i_v_pp(GeomVertexWriter *param0, LVecBase2i const *param1);
EXPORT_FUNC void GeomVertexWriter_C_set_data2i_v_pii(GeomVertexWriter *param0, int param1, int param2);
EXPORT_FUNC void GeomVertexWriter_C_set_data3i_v_pp(GeomVertexWriter *param0, LVecBase3i const *param1);
EXPORT_FUNC void GeomVertexWriter_C_set_data3i_v_piii(GeomVertexWriter *param0, int param1, int param2, int param3);
EXPORT_FUNC void GeomVertexWriter_C_set_data4i_v_pp(GeomVertexWriter *param0, LVecBase4i const *param1);
EXPORT_FUNC void GeomVertexWriter_C_set_data4i_v_piiii(GeomVertexWriter *param0, int param1, int param2, int param3, int param4);
EXPORT_FUNC void GeomVertexWriter_C_add_data1f_v_pf(GeomVertexWriter *param0, float param1);
EXPORT_FUNC void GeomVertexWriter_C_add_data2f_v_pp(GeomVertexWriter *param0, LVecBase2f const *param1);
EXPORT_FUNC void GeomVertexWriter_C_add_data2f_v_pff(GeomVertexWriter *param0, float param1, float param2);
EXPORT_FUNC void GeomVertexWriter_C_add_data3f_v_pp(GeomVertexWriter *param0, LVecBase3f const *param1);
EXPORT_FUNC void GeomVertexWriter_C_add_data3f_v_pfff(GeomVertexWriter *param0, float param1, float param2, float param3);
EXPORT_FUNC void GeomVertexWriter_C_add_data4f_v_pp(GeomVertexWriter *param0, LVecBase4f const *param1);
EXPORT_FUNC void GeomVertexWriter_C_add_data4f_v_pffff(GeomVertexWriter *param0, float param1, float param2, float param3, float param4);
EXPORT_FUNC void GeomVertexWriter_C_add_matrix3f_v_pp(GeomVertexWriter *param0, LMatrix3f const *param1);
EXPORT_FUNC void GeomVertexWriter_C_add_matrix4f_v_pp(GeomVertexWriter *param0, LMatrix4f const *param1);
EXPORT_FUNC void GeomVertexWriter_C_add_data1d_v_pd(GeomVertexWriter *param0, double param1);
EXPORT_FUNC void GeomVertexWriter_C_add_data2d_v_pp(GeomVertexWriter *param0, LVecBase2d const *param1);
EXPORT_FUNC void GeomVertexWriter_C_add_data2d_v_pdd(GeomVertexWriter *param0, double param1, double param2);
EXPORT_FUNC void GeomVertexWriter_C_add_data3d_v_pp(GeomVertexWriter *param0, LVecBase3d const *param1);
EXPORT_FUNC void GeomVertexWriter_C_add_data3d_v_pddd(GeomVertexWriter *param0, double param1, double param2, double param3);
EXPORT_FUNC void GeomVertexWriter_C_add_data4d_v_pp(GeomVertexWriter *param0, LVecBase4d const *param1);
EXPORT_FUNC void GeomVertexWriter_C_add_data4d_v_pdddd(GeomVertexWriter *param0, double param1, double param2, double param3, double param4);
EXPORT_FUNC void GeomVertexWriter_C_add_matrix3d_v_pp(GeomVertexWriter *param0, LMatrix3d const *param1);
EXPORT_FUNC void GeomVertexWriter_C_add_matrix4d_v_pp(GeomVertexWriter *param0, LMatrix4d const *param1);
EXPORT_FUNC void GeomVertexWriter_C_add_data1_v_pf(GeomVertexWriter *param0, PN_stdfloat param1);
EXPORT_FUNC void GeomVertexWriter_C_add_data2_v_pp(GeomVertexWriter *param0, LVecBase2 const *param1);
EXPORT_FUNC void GeomVertexWriter_C_add_data2_v_pff(GeomVertexWriter *param0, PN_stdfloat param1, PN_stdfloat param2);
EXPORT_FUNC void GeomVertexWriter_C_add_data3_v_pp(GeomVertexWriter *param0, LVecBase3 const *param1);
EXPORT_FUNC void GeomVertexWriter_C_add_data3_v_pfff(GeomVertexWriter *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3);
EXPORT_FUNC void GeomVertexWriter_C_add_data4_v_pp(GeomVertexWriter *param0, LVecBase4 const *param1);
EXPORT_FUNC void GeomVertexWriter_C_add_data4_v_pffff(GeomVertexWriter *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC void GeomVertexWriter_C_add_matrix3_v_pp(GeomVertexWriter *param0, LMatrix3 const *param1);
EXPORT_FUNC void GeomVertexWriter_C_add_matrix4_v_pp(GeomVertexWriter *param0, LMatrix4 const *param1);
EXPORT_FUNC void GeomVertexWriter_C_add_data1i_v_pi(GeomVertexWriter *param0, int param1);
EXPORT_FUNC void GeomVertexWriter_C_add_data2i_v_pp(GeomVertexWriter *param0, LVecBase2i const *param1);
EXPORT_FUNC void GeomVertexWriter_C_add_data2i_v_pii(GeomVertexWriter *param0, int param1, int param2);
EXPORT_FUNC void GeomVertexWriter_C_add_data3i_v_pp(GeomVertexWriter *param0, LVecBase3i const *param1);
EXPORT_FUNC void GeomVertexWriter_C_add_data3i_v_piii(GeomVertexWriter *param0, int param1, int param2, int param3);
EXPORT_FUNC void GeomVertexWriter_C_add_data4i_v_pp(GeomVertexWriter *param0, LVecBase4i const *param1);
EXPORT_FUNC void GeomVertexWriter_C_add_data4i_v_piiii(GeomVertexWriter *param0, int param1, int param2, int param3, int param4);
EXPORT_FUNC void GeomVertexWriter_C_output_v_pp(GeomVertexWriter const *param0, std::ostream *param1);


// GraphicsEngine

EXPORT_FUNC GraphicsEngine * GraphicsEngine_C_ctor_p_p(Pipeline *param0);
EXPORT_FUNC GraphicsEngine * GraphicsEngine_C_ctor_p_v();
EXPORT_FUNC void GraphicsEngine_C_set_threading_model_v_pp(GraphicsEngine *param0, GraphicsThreadingModel const *param1);
EXPORT_FUNC GraphicsThreadingModel * GraphicsEngine_C_get_threading_model_p_p(GraphicsEngine const *param0);
EXPORT_FUNC ReMutex const * GraphicsEngine_C_get_render_lock_p_p(GraphicsEngine const *param0);
EXPORT_FUNC void GraphicsEngine_C_set_auto_flip_v_pB(GraphicsEngine *param0, bool param1);
EXPORT_FUNC bool GraphicsEngine_C_get_auto_flip_B_p(GraphicsEngine const *param0);
EXPORT_FUNC void GraphicsEngine_C_set_portal_cull_v_pB(GraphicsEngine *param0, bool param1);
EXPORT_FUNC bool GraphicsEngine_C_get_portal_cull_B_p(GraphicsEngine const *param0);
EXPORT_FUNC void GraphicsEngine_C_set_default_loader_v_pp(GraphicsEngine *param0, Loader *param1);
EXPORT_FUNC Loader * GraphicsEngine_C_get_default_loader_p_p(GraphicsEngine const *param0);
EXPORT_FUNC GraphicsOutput * GraphicsEngine_C_make_output_p_ppsippipp(GraphicsEngine *param0, GraphicsPipe *param1, char const *param2, int param3, FrameBufferProperties const *param4, WindowProperties const *param5, int param6, GraphicsStateGuardian *param7, GraphicsOutput *param8);
EXPORT_FUNC GraphicsOutput * GraphicsEngine_C_make_output_p_ppsippip(GraphicsEngine *param0, GraphicsPipe *param1, char const *param2, int param3, FrameBufferProperties const *param4, WindowProperties const *param5, int param6, GraphicsStateGuardian *param7);
EXPORT_FUNC GraphicsOutput * GraphicsEngine_C_make_output_p_ppsippi(GraphicsEngine *param0, GraphicsPipe *param1, char const *param2, int param3, FrameBufferProperties const *param4, WindowProperties const *param5, int param6);
EXPORT_FUNC GraphicsOutput * GraphicsEngine_C_make_buffer_p_ppsiii(GraphicsEngine *param0, GraphicsOutput *param1, char const *param2, int param3, int param4, int param5);
EXPORT_FUNC GraphicsOutput * GraphicsEngine_C_make_buffer_p_ppsiii_1_p_ppsiii(GraphicsEngine *param0, GraphicsStateGuardian *param1, char const *param2, int param3, int param4, int param5);
EXPORT_FUNC GraphicsOutput * GraphicsEngine_C_make_parasite_p_ppsiii(GraphicsEngine *param0, GraphicsOutput *param1, char const *param2, int param3, int param4, int param5);
EXPORT_FUNC bool GraphicsEngine_C_add_window_B_ppi(GraphicsEngine *param0, GraphicsOutput *param1, int param2);
EXPORT_FUNC bool GraphicsEngine_C_remove_window_B_pp(GraphicsEngine *param0, GraphicsOutput *param1);
EXPORT_FUNC void GraphicsEngine_C_remove_all_windows_v_p(GraphicsEngine *param0);
EXPORT_FUNC void GraphicsEngine_C_reset_all_windows_v_pB(GraphicsEngine *param0, bool param1);
EXPORT_FUNC bool GraphicsEngine_C_is_empty_B_p(GraphicsEngine const *param0);
EXPORT_FUNC int GraphicsEngine_C_get_num_windows_i_p(GraphicsEngine const *param0);
EXPORT_FUNC GraphicsOutput * GraphicsEngine_C_get_window_p_pi(GraphicsEngine const *param0, int param1);
EXPORT_FUNC void GraphicsEngine_C_render_frame_v_p(GraphicsEngine *param0);
EXPORT_FUNC void GraphicsEngine_C_open_windows_v_p(GraphicsEngine *param0);
EXPORT_FUNC void GraphicsEngine_C_sync_frame_v_p(GraphicsEngine *param0);
EXPORT_FUNC void GraphicsEngine_C_ready_flip_v_p(GraphicsEngine *param0);
EXPORT_FUNC void GraphicsEngine_C_flip_frame_v_p(GraphicsEngine *param0);
EXPORT_FUNC bool GraphicsEngine_C_extract_texture_data_B_ppp(GraphicsEngine *param0, Texture *param1, GraphicsStateGuardian *param2);
EXPORT_FUNC void GraphicsEngine_C_dispatch_compute_v_pppp(GraphicsEngine *param0, LVecBase3i const *param1, ShaderAttrib const *param2, GraphicsStateGuardian *param3);
EXPORT_FUNC GraphicsEngine * GraphicsEngine_C_get_global_ptr_p_v();
EXPORT_FUNC void GraphicsEngine_C_texture_uploaded_v_pp(GraphicsEngine *param0, Texture *param1);
EXPORT_FUNC PointerTo< Texture > * GraphicsEngine_C_do_get_screenshot_p_ppp(GraphicsEngine *param0, DisplayRegion *param1, GraphicsStateGuardian *param2);
EXPORT_FUNC void GraphicsEngine_C_do_cull_v_pppp(CullHandler *param0, SceneSetup *param1, GraphicsStateGuardian *param2, Thread *param3);


// GraphicsOutput

EXPORT_FUNC GraphicsOutputBase * GraphicsOutput_C_upcast_to_GraphicsOutputBase_p_p(GraphicsOutput *param0);
EXPORT_FUNC DrawableRegion * GraphicsOutput_C_upcast_to_DrawableRegion_p_p(GraphicsOutput *param0);
EXPORT_FUNC GraphicsStateGuardian * GraphicsOutput_C_get_gsg_p_p(GraphicsOutput const *param0);
EXPORT_FUNC GraphicsPipe * GraphicsOutput_C_get_pipe_p_p(GraphicsOutput const *param0);
EXPORT_FUNC GraphicsEngine * GraphicsOutput_C_get_engine_p_p(GraphicsOutput const *param0);
EXPORT_FUNC char const * GraphicsOutput_C_get_name_s_p(GraphicsOutput const *param0);
EXPORT_FUNC int GraphicsOutput_C_count_textures_i_p(GraphicsOutput const *param0);
EXPORT_FUNC bool GraphicsOutput_C_has_texture_B_p(GraphicsOutput const *param0);
EXPORT_FUNC Texture * GraphicsOutput_C_get_texture_p_pi(GraphicsOutput const *param0, int param1);
EXPORT_FUNC Texture * GraphicsOutput_C_get_texture_p_p(GraphicsOutput const *param0);
EXPORT_FUNC DrawableRegion::RenderTexturePlane GraphicsOutput_C_get_texture_plane_p_pi(GraphicsOutput const *param0, int param1);
EXPORT_FUNC DrawableRegion::RenderTexturePlane GraphicsOutput_C_get_texture_plane_p_p(GraphicsOutput const *param0);
EXPORT_FUNC GraphicsOutput::RenderTextureMode GraphicsOutput_C_get_rtm_mode_p_pi(GraphicsOutput const *param0, int param1);
EXPORT_FUNC GraphicsOutput::RenderTextureMode GraphicsOutput_C_get_rtm_mode_p_p(GraphicsOutput const *param0);
EXPORT_FUNC void GraphicsOutput_C_clear_render_textures_v_p(GraphicsOutput *param0);
EXPORT_FUNC void GraphicsOutput_C_add_render_texture_v_pppp(GraphicsOutput *param0, Texture *param1, GraphicsOutput::RenderTextureMode param2, DrawableRegion::RenderTexturePlane param3);
EXPORT_FUNC void GraphicsOutput_C_add_render_texture_v_ppp(GraphicsOutput *param0, Texture *param1, GraphicsOutput::RenderTextureMode param2);
EXPORT_FUNC void GraphicsOutput_C_setup_render_texture_v_ppBB(GraphicsOutput *param0, Texture *param1, bool param2, bool param3);
EXPORT_FUNC LVecBase2i const * GraphicsOutput_C_get_size_p_p(GraphicsOutput const *param0);
EXPORT_FUNC int GraphicsOutput_C_get_x_size_i_p(GraphicsOutput const *param0);
EXPORT_FUNC int GraphicsOutput_C_get_y_size_i_p(GraphicsOutput const *param0);
EXPORT_FUNC LVecBase2i * GraphicsOutput_C_get_fb_size_p_p(GraphicsOutput const *param0);
EXPORT_FUNC int GraphicsOutput_C_get_fb_x_size_i_p(GraphicsOutput const *param0);
EXPORT_FUNC int GraphicsOutput_C_get_fb_y_size_i_p(GraphicsOutput const *param0);
EXPORT_FUNC LVecBase2i * GraphicsOutput_C_get_sbs_left_size_p_p(GraphicsOutput const *param0);
EXPORT_FUNC int GraphicsOutput_C_get_sbs_left_x_size_i_p(GraphicsOutput const *param0);
EXPORT_FUNC int GraphicsOutput_C_get_sbs_left_y_size_i_p(GraphicsOutput const *param0);
EXPORT_FUNC LVecBase2i * GraphicsOutput_C_get_sbs_right_size_p_p(GraphicsOutput const *param0);
EXPORT_FUNC int GraphicsOutput_C_get_sbs_right_x_size_i_p(GraphicsOutput const *param0);
EXPORT_FUNC int GraphicsOutput_C_get_sbs_right_y_size_i_p(GraphicsOutput const *param0);
EXPORT_FUNC bool GraphicsOutput_C_has_size_B_p(GraphicsOutput const *param0);
EXPORT_FUNC bool GraphicsOutput_C_is_valid_B_p(GraphicsOutput const *param0);
EXPORT_FUNC bool GraphicsOutput_C_is_nonzero_size_B_p(GraphicsOutput const *param0);
EXPORT_FUNC void GraphicsOutput_C_set_active_v_pB(GraphicsOutput *param0, bool param1);
EXPORT_FUNC bool GraphicsOutput_C_is_active_B_p(GraphicsOutput const *param0);
EXPORT_FUNC void GraphicsOutput_C_set_one_shot_v_pB(GraphicsOutput *param0, bool param1);
EXPORT_FUNC bool GraphicsOutput_C_get_one_shot_B_p(GraphicsOutput const *param0);
EXPORT_FUNC void GraphicsOutput_C_set_inverted_v_pB(GraphicsOutput *param0, bool param1);
EXPORT_FUNC bool GraphicsOutput_C_get_inverted_B_p(GraphicsOutput const *param0);
EXPORT_FUNC void GraphicsOutput_C_set_swap_eyes_v_pB(GraphicsOutput *param0, bool param1);
EXPORT_FUNC bool GraphicsOutput_C_get_swap_eyes_B_p(GraphicsOutput const *param0);
EXPORT_FUNC void GraphicsOutput_C_set_red_blue_stereo_v_pBII(GraphicsOutput *param0, bool param1, unsigned int param2, unsigned int param3);
EXPORT_FUNC bool GraphicsOutput_C_get_red_blue_stereo_B_p(GraphicsOutput const *param0);
EXPORT_FUNC unsigned int GraphicsOutput_C_get_left_eye_color_mask_I_p(GraphicsOutput const *param0);
EXPORT_FUNC unsigned int GraphicsOutput_C_get_right_eye_color_mask_I_p(GraphicsOutput const *param0);
EXPORT_FUNC void GraphicsOutput_C_set_side_by_side_stereo_v_pB(GraphicsOutput *param0, bool param1);
EXPORT_FUNC void GraphicsOutput_C_set_side_by_side_stereo_v_pBpp(GraphicsOutput *param0, bool param1, LVecBase4 const *param2, LVecBase4 const *param3);
EXPORT_FUNC bool GraphicsOutput_C_get_side_by_side_stereo_B_p(GraphicsOutput const *param0);
EXPORT_FUNC LVecBase4 const * GraphicsOutput_C_get_sbs_left_dimensions_p_p(GraphicsOutput const *param0);
EXPORT_FUNC LVecBase4 const * GraphicsOutput_C_get_sbs_right_dimensions_p_p(GraphicsOutput const *param0);
EXPORT_FUNC FrameBufferProperties const * GraphicsOutput_C_get_fb_properties_p_p(GraphicsOutput const *param0);
EXPORT_FUNC bool GraphicsOutput_C_is_stereo_B_p(GraphicsOutput const *param0);
EXPORT_FUNC void GraphicsOutput_C_clear_delete_flag_v_p(GraphicsOutput *param0);
EXPORT_FUNC bool GraphicsOutput_C_get_delete_flag_B_p(GraphicsOutput const *param0);
EXPORT_FUNC void GraphicsOutput_C_set_sort_v_pi(GraphicsOutput *param0, int param1);
EXPORT_FUNC int GraphicsOutput_C_get_sort_i_p(GraphicsOutput const *param0);
EXPORT_FUNC void GraphicsOutput_C_set_child_sort_v_pi(GraphicsOutput *param0, int param1);
EXPORT_FUNC void GraphicsOutput_C_clear_child_sort_v_p(GraphicsOutput *param0);
EXPORT_FUNC int GraphicsOutput_C_get_child_sort_i_p(GraphicsOutput const *param0);
EXPORT_FUNC AsyncFuture * GraphicsOutput_C_trigger_copy_p_p(GraphicsOutput *param0);
EXPORT_FUNC DisplayRegion * GraphicsOutput_C_make_display_region_p_p(GraphicsOutput *param0);
EXPORT_FUNC DisplayRegion * GraphicsOutput_C_make_display_region_p_pp(GraphicsOutput *param0, LVecBase4 const *param1);
EXPORT_FUNC DisplayRegion * GraphicsOutput_C_make_display_region_p_pffff(GraphicsOutput *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC DisplayRegion * GraphicsOutput_C_make_mono_display_region_p_p(GraphicsOutput *param0);
EXPORT_FUNC DisplayRegion * GraphicsOutput_C_make_mono_display_region_p_pp(GraphicsOutput *param0, LVecBase4 const *param1);
EXPORT_FUNC DisplayRegion * GraphicsOutput_C_make_mono_display_region_p_pffff(GraphicsOutput *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC StereoDisplayRegion * GraphicsOutput_C_make_stereo_display_region_p_p(GraphicsOutput *param0);
EXPORT_FUNC StereoDisplayRegion * GraphicsOutput_C_make_stereo_display_region_p_pp(GraphicsOutput *param0, LVecBase4 const *param1);
EXPORT_FUNC StereoDisplayRegion * GraphicsOutput_C_make_stereo_display_region_p_pffff(GraphicsOutput *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC bool GraphicsOutput_C_remove_display_region_B_pp(GraphicsOutput *param0, DisplayRegion *param1);
EXPORT_FUNC void GraphicsOutput_C_remove_all_display_regions_v_p(GraphicsOutput *param0);
EXPORT_FUNC DisplayRegion * GraphicsOutput_C_get_overlay_display_region_p_p(GraphicsOutput const *param0);
EXPORT_FUNC void GraphicsOutput_C_set_overlay_display_region_v_pp(GraphicsOutput *param0, DisplayRegion *param1);
EXPORT_FUNC int GraphicsOutput_C_get_num_display_regions_i_p(GraphicsOutput const *param0);
EXPORT_FUNC PointerTo< DisplayRegion > * GraphicsOutput_C_get_display_region_p_pi(GraphicsOutput const *param0, int param1);
EXPORT_FUNC int GraphicsOutput_C_get_num_active_display_regions_i_p(GraphicsOutput const *param0);
EXPORT_FUNC PointerTo< DisplayRegion > * GraphicsOutput_C_get_active_display_region_p_pi(GraphicsOutput const *param0, int param1);
EXPORT_FUNC GraphicsOutput * GraphicsOutput_C_make_texture_buffer_p_psiipBp(GraphicsOutput *param0, char const *param1, int param2, int param3, Texture *param4, bool param5, FrameBufferProperties *param6);
EXPORT_FUNC GraphicsOutput * GraphicsOutput_C_make_texture_buffer_p_psiipB(GraphicsOutput *param0, char const *param1, int param2, int param3, Texture *param4, bool param5);
EXPORT_FUNC GraphicsOutput * GraphicsOutput_C_make_texture_buffer_p_psiip(GraphicsOutput *param0, char const *param1, int param2, int param3, Texture *param4);
EXPORT_FUNC GraphicsOutput * GraphicsOutput_C_make_texture_buffer_p_psii(GraphicsOutput *param0, char const *param1, int param2, int param3);
EXPORT_FUNC GraphicsOutput * GraphicsOutput_C_make_cube_map_p_psippBp(GraphicsOutput *param0, char const *param1, int param2, NodePath *param3, DrawMask *param4, bool param5, FrameBufferProperties *param6);
EXPORT_FUNC GraphicsOutput * GraphicsOutput_C_make_cube_map_p_psippB(GraphicsOutput *param0, char const *param1, int param2, NodePath *param3, DrawMask *param4, bool param5);
EXPORT_FUNC GraphicsOutput * GraphicsOutput_C_make_cube_map_p_psipp(GraphicsOutput *param0, char const *param1, int param2, NodePath *param3, DrawMask *param4);
EXPORT_FUNC GraphicsOutput * GraphicsOutput_C_make_cube_map_p_psip(GraphicsOutput *param0, char const *param1, int param2, NodePath *param3);
EXPORT_FUNC Filename * GraphicsOutput_C_make_screenshot_filename_p_s(char const *param0);
EXPORT_FUNC Filename * GraphicsOutput_C_make_screenshot_filename_p_v();
EXPORT_FUNC Filename * GraphicsOutput_C_save_screenshot_default_p_ps(GraphicsOutput *param0, char const *param1);
EXPORT_FUNC Filename * GraphicsOutput_C_save_screenshot_default_p_p(GraphicsOutput *param0);
EXPORT_FUNC bool GraphicsOutput_C_save_screenshot_B_pps(GraphicsOutput *param0, Filename const *param1, char const *param2);
EXPORT_FUNC bool GraphicsOutput_C_save_screenshot_B_pp(GraphicsOutput *param0, Filename const *param1);
EXPORT_FUNC PointerTo< Texture > * GraphicsOutput_C_get_screenshot_p_p(GraphicsOutput *param0);
EXPORT_FUNC bool GraphicsOutput_C_get_screenshot_B_pp(GraphicsOutput *param0, PNMImage *param1);
EXPORT_FUNC NodePath * GraphicsOutput_C_get_texture_card_p_p(GraphicsOutput *param0);
EXPORT_FUNC bool GraphicsOutput_C_share_depth_buffer_B_pp(GraphicsOutput *param0, GraphicsOutput *param1);
EXPORT_FUNC void GraphicsOutput_C_unshare_depth_buffer_v_p(GraphicsOutput *param0);
EXPORT_FUNC bool GraphicsOutput_C_get_supports_render_texture_B_p(GraphicsOutput const *param0);
EXPORT_FUNC bool GraphicsOutput_C_flip_ready_B_p(GraphicsOutput const *param0);
EXPORT_FUNC GraphicsOutput * GraphicsOutput_C_get_host_p_p(GraphicsOutput *param0);
EXPORT_FUNC void GraphicsOutput_C_request_open_v_p(GraphicsOutput *param0);
EXPORT_FUNC void GraphicsOutput_C_request_close_v_p(GraphicsOutput *param0);
EXPORT_FUNC void GraphicsOutput_C_set_close_now_v_p(GraphicsOutput *param0);
EXPORT_FUNC void GraphicsOutput_C_reset_window_v_pB(GraphicsOutput *param0, bool param1);
EXPORT_FUNC void GraphicsOutput_C_clear_pipe_v_p(GraphicsOutput *param0);
EXPORT_FUNC void GraphicsOutput_C_set_size_and_recalc_v_pii(GraphicsOutput *param0, int param1, int param2);
EXPORT_FUNC void GraphicsOutput_C_clear_v_pp(GraphicsOutput *param0, Thread *param1);
EXPORT_FUNC bool GraphicsOutput_C_begin_frame_B_ppp(GraphicsOutput *param0, GraphicsOutput::FrameMode param1, Thread *param2);
EXPORT_FUNC void GraphicsOutput_C_end_frame_v_ppp(GraphicsOutput *param0, GraphicsOutput::FrameMode param1, Thread *param2);
EXPORT_FUNC void GraphicsOutput_C_change_scenes_v_pp(GraphicsOutput *param0, DisplayRegionPipelineReader *param1);
EXPORT_FUNC void GraphicsOutput_C_select_target_tex_page_v_pi(GraphicsOutput *param0, int param1);
EXPORT_FUNC void GraphicsOutput_C_begin_flip_v_p(GraphicsOutput *param0);
EXPORT_FUNC void GraphicsOutput_C_ready_flip_v_p(GraphicsOutput *param0);
EXPORT_FUNC void GraphicsOutput_C_end_flip_v_p(GraphicsOutput *param0);
EXPORT_FUNC void GraphicsOutput_C_process_events_v_p(GraphicsOutput *param0);
EXPORT_FUNC PStatCollector * GraphicsOutput_C_get_cull_window_pcollector_p_p(GraphicsOutput *param0);
EXPORT_FUNC PStatCollector * GraphicsOutput_C_get_draw_window_pcollector_p_p(GraphicsOutput *param0);
EXPORT_FUNC PStatCollector * GraphicsOutput_C_get_clear_window_pcollector_p_p(GraphicsOutput *param0);
EXPORT_FUNC int GraphicsOutput_C_get_class_type_i_v();
EXPORT_FUNC void GraphicsOutput_C_init_type_v_v();
EXPORT_FUNC int GraphicsOutput_C_get_type_i_p(GraphicsOutput const *param0);
EXPORT_FUNC int GraphicsOutput_C_force_init_type_i_p(GraphicsOutput *param0);


// GraphicsOutputBase

EXPORT_FUNC GraphicsOutput * GraphicsOutputBase_C_downcast_to_GraphicsOutput_p_p(GraphicsOutputBase *param0);


// GraphicsWindow

EXPORT_FUNC WindowProperties const * GraphicsWindow_C_get_properties_p_p(GraphicsWindow const *param0);
EXPORT_FUNC WindowProperties const * GraphicsWindow_C_get_requested_properties_p_p(GraphicsWindow const *param0);
EXPORT_FUNC void GraphicsWindow_C_clear_rejected_properties_v_p(GraphicsWindow *param0);
EXPORT_FUNC WindowProperties * GraphicsWindow_C_get_rejected_properties_p_p(GraphicsWindow const *param0);
EXPORT_FUNC void GraphicsWindow_C_request_properties_v_pp(GraphicsWindow *param0, WindowProperties const *param1);
EXPORT_FUNC bool GraphicsWindow_C_is_closed_B_p(GraphicsWindow const *param0);
EXPORT_FUNC bool GraphicsWindow_C_is_fullscreen_B_p(GraphicsWindow const *param0);
EXPORT_FUNC void GraphicsWindow_C_set_window_event_v_ps(GraphicsWindow *param0, char const *param1);
EXPORT_FUNC char const * GraphicsWindow_C_get_window_event_s_p(GraphicsWindow const *param0);
EXPORT_FUNC void GraphicsWindow_C_set_close_request_event_v_ps(GraphicsWindow *param0, char const *param1);
EXPORT_FUNC char const * GraphicsWindow_C_get_close_request_event_s_p(GraphicsWindow const *param0);
EXPORT_FUNC void GraphicsWindow_C_set_unexposed_draw_v_pB(GraphicsWindow *param0, bool param1);
EXPORT_FUNC bool GraphicsWindow_C_get_unexposed_draw_B_p(GraphicsWindow const *param0);
EXPORT_FUNC WindowHandle * GraphicsWindow_C_get_window_handle_p_p(GraphicsWindow const *param0);
EXPORT_FUNC int GraphicsWindow_C_get_num_input_devices_i_p(GraphicsWindow const *param0);
EXPORT_FUNC InputDevice * GraphicsWindow_C_get_input_device_p_pi(GraphicsWindow const *param0, int param1);
EXPORT_FUNC char const * GraphicsWindow_C_get_input_device_name_s_pi(GraphicsWindow const *param0, int param1);
EXPORT_FUNC bool GraphicsWindow_C_has_pointer_B_pi(GraphicsWindow const *param0, int param1);
EXPORT_FUNC bool GraphicsWindow_C_has_keyboard_B_pi(GraphicsWindow const *param0, int param1);
EXPORT_FUNC ButtonMap * GraphicsWindow_C_get_keyboard_map_p_p(GraphicsWindow const *param0);
EXPORT_FUNC void GraphicsWindow_C_enable_pointer_events_v_pi(GraphicsWindow *param0, int param1);
EXPORT_FUNC void GraphicsWindow_C_disable_pointer_events_v_pi(GraphicsWindow *param0, int param1);
EXPORT_FUNC MouseData * GraphicsWindow_C_get_pointer_p_pi(GraphicsWindow const *param0, int param1);
EXPORT_FUNC bool GraphicsWindow_C_move_pointer_B_piii(GraphicsWindow *param0, int param1, int param2, int param3);
EXPORT_FUNC void GraphicsWindow_C_close_ime_v_p(GraphicsWindow *param0);
EXPORT_FUNC void GraphicsWindow_C_add_window_proc_v_pp(GraphicsWindow *param0, GraphicsWindowProc const *param1);
EXPORT_FUNC void GraphicsWindow_C_remove_window_proc_v_pp(GraphicsWindow *param0, GraphicsWindowProc const *param1);
EXPORT_FUNC void GraphicsWindow_C_clear_window_procs_v_p(GraphicsWindow *param0);
EXPORT_FUNC bool GraphicsWindow_C_supports_window_procs_B_p(GraphicsWindow const *param0);
EXPORT_FUNC bool GraphicsWindow_C_is_touch_event_B_pp(GraphicsWindow *param0, GraphicsWindowProcCallbackData *param1);
EXPORT_FUNC int GraphicsWindow_C_get_num_touches_i_p(GraphicsWindow *param0);
EXPORT_FUNC TouchInfo * GraphicsWindow_C_get_touch_info_p_pi(GraphicsWindow *param0, int param1);
EXPORT_FUNC void GraphicsWindow_C_request_open_v_p(GraphicsWindow *param0);
EXPORT_FUNC void GraphicsWindow_C_request_close_v_p(GraphicsWindow *param0);
EXPORT_FUNC void GraphicsWindow_C_set_close_now_v_p(GraphicsWindow *param0);
EXPORT_FUNC void GraphicsWindow_C_process_events_v_p(GraphicsWindow *param0);
EXPORT_FUNC void GraphicsWindow_C_set_properties_now_v_pp(GraphicsWindow *param0, WindowProperties *param1);
EXPORT_FUNC int GraphicsWindow_C_get_class_type_i_v();
EXPORT_FUNC void GraphicsWindow_C_init_type_v_v();
EXPORT_FUNC int GraphicsWindow_C_get_type_i_p(GraphicsWindow const *param0);
EXPORT_FUNC int GraphicsWindow_C_force_init_type_i_p(GraphicsWindow *param0);


// InternalName

EXPORT_FUNC PointerTo< InternalName > * InternalName_C_make_p_s(char const *param0);
EXPORT_FUNC PointerTo< InternalName > * InternalName_C_make_p_si(char const *param0, int param1);
EXPORT_FUNC PointerTo< InternalName > * InternalName_C_append_p_ps(InternalName *param0, char const *param1);
EXPORT_FUNC InternalName * InternalName_C_get_parent_p_p(InternalName const *param0);
EXPORT_FUNC char const * InternalName_C_get_name_s_p(InternalName const *param0);
EXPORT_FUNC char const * InternalName_C_join_s_ss(InternalName const *param0, char const *param1);
EXPORT_FUNC char const * InternalName_C_get_basename_s_p(InternalName const *param0);
EXPORT_FUNC int InternalName_C_find_ancestor_i_ss(InternalName const *param0, char const *param1);
EXPORT_FUNC InternalName const * InternalName_C_get_ancestor_s_si(InternalName const *param0, int param1);
EXPORT_FUNC InternalName const * InternalName_C_get_top_s_p(InternalName const *param0);
EXPORT_FUNC char const * InternalName_C_get_net_basename_s_si(InternalName const *param0, int param1);
EXPORT_FUNC void InternalName_C_output_v_sp(InternalName const *param0, std::ostream *param1);
EXPORT_FUNC PointerTo< InternalName > * InternalName_C_get_root_p_v();
EXPORT_FUNC PointerTo< InternalName > * InternalName_C_get_error_p_v();
EXPORT_FUNC PointerTo< InternalName > * InternalName_C_get_vertex_p_v();
EXPORT_FUNC PointerTo< InternalName > * InternalName_C_get_normal_p_v();
EXPORT_FUNC PointerTo< InternalName > * InternalName_C_get_tangent_p_v();
EXPORT_FUNC PointerTo< InternalName > * InternalName_C_get_tangent_name_p_s(char const *param0);
EXPORT_FUNC PointerTo< InternalName > * InternalName_C_get_binormal_p_v();
EXPORT_FUNC PointerTo< InternalName > * InternalName_C_get_binormal_name_p_s(char const *param0);
EXPORT_FUNC PointerTo< InternalName > * InternalName_C_get_texcoord_p_v();
EXPORT_FUNC PointerTo< InternalName > * InternalName_C_get_texcoord_name_p_s(char const *param0);
EXPORT_FUNC PointerTo< InternalName > * InternalName_C_get_color_p_v();
EXPORT_FUNC PointerTo< InternalName > * InternalName_C_get_rotate_p_v();
EXPORT_FUNC PointerTo< InternalName > * InternalName_C_get_size_p_v();
EXPORT_FUNC PointerTo< InternalName > * InternalName_C_get_aspect_ratio_p_v();
EXPORT_FUNC PointerTo< InternalName > * InternalName_C_get_transform_blend_p_v();
EXPORT_FUNC PointerTo< InternalName > * InternalName_C_get_transform_weight_p_v();
EXPORT_FUNC PointerTo< InternalName > * InternalName_C_get_transform_index_p_v();
EXPORT_FUNC PointerTo< InternalName > * InternalName_C_get_morph_p_ps(InternalName *param0, char const *param1);
EXPORT_FUNC PointerTo< InternalName > * InternalName_C_get_index_p_v();
EXPORT_FUNC PointerTo< InternalName > * InternalName_C_get_world_p_v();
EXPORT_FUNC PointerTo< InternalName > * InternalName_C_get_camera_p_v();
EXPORT_FUNC PointerTo< InternalName > * InternalName_C_get_model_p_v();
EXPORT_FUNC PointerTo< InternalName > * InternalName_C_get_view_p_v();
EXPORT_FUNC void InternalName_C_register_with_read_factory_v_v();
EXPORT_FUNC void InternalName_C_write_datagram_v_ppp(InternalName *param0, BamWriter *param1, Datagram *param2);
EXPORT_FUNC void InternalName_C_finalize_v_pp(InternalName *param0, BamReader *param1);
EXPORT_FUNC int InternalName_C_get_class_type_i_v();
EXPORT_FUNC void InternalName_C_init_type_v_v();
EXPORT_FUNC int InternalName_C_get_type_i_p(InternalName const *param0);
EXPORT_FUNC int InternalName_C_force_init_type_i_p(InternalName *param0);


// LPoint2d

EXPORT_FUNC LPoint2d * LPoint2d_C_ctor_p_v();
EXPORT_FUNC LPoint2d * LPoint2d_C_ctor_p_p(LPoint2d const *param0);
EXPORT_FUNC LPoint2d * LPoint2d_C_ctor_p_p_1_p_p(LVecBase2d const *param0);
EXPORT_FUNC LPoint2d * LPoint2d_C_ctor_p_d(double param0);
EXPORT_FUNC LPoint2d * LPoint2d_C_ctor_p_dd(double param0, double param1);
EXPORT_FUNC LPoint2d const * LPoint2d_C_zero_p_v();
EXPORT_FUNC LPoint2d const * LPoint2d_C_unit_x_p_v();
EXPORT_FUNC LPoint2d const * LPoint2d_C_unit_y_p_v();
EXPORT_FUNC LPoint2d * LPoint2d_C_normalized_p_p(LPoint2d const *param0);
EXPORT_FUNC LPoint2d * LPoint2d_C_project_p_pp(LPoint2d const *param0, LVecBase2d const *param1);
EXPORT_FUNC int LPoint2d_C_get_class_type_i_v();
EXPORT_FUNC void LPoint2d_C_init_type_v_v();


// LPoint2f

EXPORT_FUNC LPoint2f * LPoint2f_C_ctor_p_v();
EXPORT_FUNC LPoint2f * LPoint2f_C_ctor_p_p(LPoint2f const *param0);
EXPORT_FUNC LPoint2f * LPoint2f_C_ctor_p_p_1_p_p(LVecBase2f const *param0);
EXPORT_FUNC LPoint2f * LPoint2f_C_ctor_p_f(float param0);
EXPORT_FUNC LPoint2f * LPoint2f_C_ctor_p_ff(float param0, float param1);
EXPORT_FUNC LPoint2f const * LPoint2f_C_zero_p_v();
EXPORT_FUNC LPoint2f const * LPoint2f_C_unit_x_p_v();
EXPORT_FUNC LPoint2f const * LPoint2f_C_unit_y_p_v();
EXPORT_FUNC LPoint2f * LPoint2f_C_normalized_p_p(LPoint2f const *param0);
EXPORT_FUNC LPoint2f * LPoint2f_C_project_p_pp(LPoint2f const *param0, LVecBase2f const *param1);
EXPORT_FUNC int LPoint2f_C_get_class_type_i_v();
EXPORT_FUNC void LPoint2f_C_init_type_v_v();


// LPoint2i

EXPORT_FUNC LPoint2i * LPoint2i_C_ctor_p_v();
EXPORT_FUNC LPoint2i * LPoint2i_C_ctor_p_p(LPoint2i const *param0);
EXPORT_FUNC LPoint2i * LPoint2i_C_ctor_p_p_1_p_p(LVecBase2i const *param0);
EXPORT_FUNC LPoint2i * LPoint2i_C_ctor_p_i(int param0);
EXPORT_FUNC LPoint2i * LPoint2i_C_ctor_p_ii(int param0, int param1);
EXPORT_FUNC LPoint2i const * LPoint2i_C_zero_p_v();
EXPORT_FUNC LPoint2i const * LPoint2i_C_unit_x_p_v();
EXPORT_FUNC LPoint2i const * LPoint2i_C_unit_y_p_v();
EXPORT_FUNC int LPoint2i_C_get_class_type_i_v();
EXPORT_FUNC void LPoint2i_C_init_type_v_v();


// LPoint3d

EXPORT_FUNC LPoint3d * LPoint3d_C_ctor_p_v();
EXPORT_FUNC LPoint3d * LPoint3d_C_ctor_p_p(LPoint3d const *param0);
EXPORT_FUNC LPoint3d * LPoint3d_C_ctor_p_pd(LVecBase2d const *param0, double param1);
EXPORT_FUNC LPoint3d * LPoint3d_C_ctor_p_p_1_p_p(LVecBase3d const *param0);
EXPORT_FUNC LPoint3d * LPoint3d_C_ctor_p_d(double param0);
EXPORT_FUNC LPoint3d * LPoint3d_C_ctor_p_ddd(double param0, double param1, double param2);
EXPORT_FUNC LPoint3d const * LPoint3d_C_zero_p_v();
EXPORT_FUNC LPoint3d const * LPoint3d_C_unit_x_p_v();
EXPORT_FUNC LPoint3d const * LPoint3d_C_unit_y_p_v();
EXPORT_FUNC LPoint3d const * LPoint3d_C_unit_z_p_v();
EXPORT_FUNC LPoint2d * LPoint3d_C_get_xy_p_p(LPoint3d const *param0);
EXPORT_FUNC LPoint2d * LPoint3d_C_get_xz_p_p(LPoint3d const *param0);
EXPORT_FUNC LPoint2d * LPoint3d_C_get_yz_p_p(LPoint3d const *param0);
EXPORT_FUNC LPoint3d * LPoint3d_C_cross_p_pp(LPoint3d const *param0, LVecBase3d const *param1);
EXPORT_FUNC LPoint3d * LPoint3d_C_normalized_p_p(LPoint3d const *param0);
EXPORT_FUNC LPoint3d * LPoint3d_C_project_p_pp(LPoint3d const *param0, LVecBase3d const *param1);
EXPORT_FUNC LPoint3d const * LPoint3d_C_origin_p_p(CoordinateSystem param0);
EXPORT_FUNC LPoint3d const * LPoint3d_C_origin_p_v();
EXPORT_FUNC LPoint3d * LPoint3d_C_rfu_p_dddp(double param0, double param1, double param2, CoordinateSystem param3);
EXPORT_FUNC LPoint3d * LPoint3d_C_rfu_p_ddd(double param0, double param1, double param2);
EXPORT_FUNC int LPoint3d_C_get_class_type_i_v();
EXPORT_FUNC void LPoint3d_C_init_type_v_v();


// LPoint3f

EXPORT_FUNC LPoint3f * LPoint3f_C_ctor_p_v();
EXPORT_FUNC LPoint3f * LPoint3f_C_ctor_p_p(LPoint3f const *param0);
EXPORT_FUNC LPoint3f * LPoint3f_C_ctor_p_pf(LVecBase2f const *param0, float param1);
EXPORT_FUNC LPoint3f * LPoint3f_C_ctor_p_p_1_p_p(LVecBase3f const *param0);
EXPORT_FUNC LPoint3f * LPoint3f_C_ctor_p_f(float param0);
EXPORT_FUNC LPoint3f * LPoint3f_C_ctor_p_fff(float param0, float param1, float param2);
EXPORT_FUNC LPoint3f const * LPoint3f_C_zero_p_v();
EXPORT_FUNC LPoint3f const * LPoint3f_C_unit_x_p_v();
EXPORT_FUNC LPoint3f const * LPoint3f_C_unit_y_p_v();
EXPORT_FUNC LPoint3f const * LPoint3f_C_unit_z_p_v();
EXPORT_FUNC LPoint2f * LPoint3f_C_get_xy_p_p(LPoint3f const *param0);
EXPORT_FUNC LPoint2f * LPoint3f_C_get_xz_p_p(LPoint3f const *param0);
EXPORT_FUNC LPoint2f * LPoint3f_C_get_yz_p_p(LPoint3f const *param0);
EXPORT_FUNC LPoint3f * LPoint3f_C_cross_p_pp(LPoint3f const *param0, LVecBase3f const *param1);
EXPORT_FUNC LPoint3f * LPoint3f_C_normalized_p_p(LPoint3f const *param0);
EXPORT_FUNC LPoint3f * LPoint3f_C_project_p_pp(LPoint3f const *param0, LVecBase3f const *param1);
EXPORT_FUNC LPoint3f const * LPoint3f_C_origin_p_p(CoordinateSystem param0);
EXPORT_FUNC LPoint3f const * LPoint3f_C_origin_p_v();
EXPORT_FUNC LPoint3f * LPoint3f_C_rfu_p_fffp(float param0, float param1, float param2, CoordinateSystem param3);
EXPORT_FUNC LPoint3f * LPoint3f_C_rfu_p_fff(float param0, float param1, float param2);
EXPORT_FUNC int LPoint3f_C_get_class_type_i_v();
EXPORT_FUNC void LPoint3f_C_init_type_v_v();


// LPoint3i

EXPORT_FUNC LPoint3i * LPoint3i_C_ctor_p_v();
EXPORT_FUNC LPoint3i * LPoint3i_C_ctor_p_p(LPoint3i const *param0);
EXPORT_FUNC LPoint3i * LPoint3i_C_ctor_p_pi(LVecBase2i const *param0, int param1);
EXPORT_FUNC LPoint3i * LPoint3i_C_ctor_p_p_1_p_p(LVecBase3i const *param0);
EXPORT_FUNC LPoint3i * LPoint3i_C_ctor_p_i(int param0);
EXPORT_FUNC LPoint3i * LPoint3i_C_ctor_p_iii(int param0, int param1, int param2);
EXPORT_FUNC LPoint3i const * LPoint3i_C_zero_p_v();
EXPORT_FUNC LPoint3i const * LPoint3i_C_unit_x_p_v();
EXPORT_FUNC LPoint3i const * LPoint3i_C_unit_y_p_v();
EXPORT_FUNC LPoint3i const * LPoint3i_C_unit_z_p_v();
EXPORT_FUNC LPoint2i * LPoint3i_C_get_xy_p_p(LPoint3i const *param0);
EXPORT_FUNC LPoint2i * LPoint3i_C_get_xz_p_p(LPoint3i const *param0);
EXPORT_FUNC LPoint2i * LPoint3i_C_get_yz_p_p(LPoint3i const *param0);
EXPORT_FUNC LPoint3i * LPoint3i_C_cross_p_pp(LPoint3i const *param0, LVecBase3i const *param1);
EXPORT_FUNC LPoint3i const * LPoint3i_C_origin_p_p(CoordinateSystem param0);
EXPORT_FUNC LPoint3i const * LPoint3i_C_origin_p_v();
EXPORT_FUNC LPoint3i * LPoint3i_C_rfu_p_iiip(int param0, int param1, int param2, CoordinateSystem param3);
EXPORT_FUNC LPoint3i * LPoint3i_C_rfu_p_iii(int param0, int param1, int param2);
EXPORT_FUNC int LPoint3i_C_get_class_type_i_v();
EXPORT_FUNC void LPoint3i_C_init_type_v_v();


// LPoint4d

EXPORT_FUNC LPoint4d * LPoint4d_C_ctor_p_v();
EXPORT_FUNC LPoint4d * LPoint4d_C_ctor_p_p(LPoint4d const *param0);
EXPORT_FUNC LPoint4d * LPoint4d_C_ctor_p_pd(LVecBase3d const *param0, double param1);
EXPORT_FUNC LPoint4d * LPoint4d_C_ctor_p_p_1_p_p(LVecBase4d const *param0);
EXPORT_FUNC LPoint4d * LPoint4d_C_ctor_p_d(double param0);
EXPORT_FUNC LPoint4d * LPoint4d_C_ctor_p_dddd(double param0, double param1, double param2, double param3);
EXPORT_FUNC LPoint4d const * LPoint4d_C_zero_p_v();
EXPORT_FUNC LPoint4d const * LPoint4d_C_unit_x_p_v();
EXPORT_FUNC LPoint4d const * LPoint4d_C_unit_y_p_v();
EXPORT_FUNC LPoint4d const * LPoint4d_C_unit_z_p_v();
EXPORT_FUNC LPoint4d const * LPoint4d_C_unit_w_p_v();
EXPORT_FUNC LPoint3d * LPoint4d_C_get_xyz_p_p(LPoint4d const *param0);
EXPORT_FUNC LPoint2d * LPoint4d_C_get_xy_p_p(LPoint4d const *param0);
EXPORT_FUNC LPoint4d * LPoint4d_C_normalized_p_p(LPoint4d const *param0);
EXPORT_FUNC LPoint4d * LPoint4d_C_project_p_pp(LPoint4d const *param0, LVecBase4d const *param1);
EXPORT_FUNC int LPoint4d_C_get_class_type_i_v();
EXPORT_FUNC void LPoint4d_C_init_type_v_v();


// LPoint4f

EXPORT_FUNC LPoint4f * LPoint4f_C_ctor_p_v();
EXPORT_FUNC LPoint4f * LPoint4f_C_ctor_p_p(LPoint4f const *param0);
EXPORT_FUNC LPoint4f * LPoint4f_C_ctor_p_pf(LVecBase3f const *param0, float param1);
EXPORT_FUNC LPoint4f * LPoint4f_C_ctor_p_p_1_p_p(LVecBase4f const *param0);
EXPORT_FUNC LPoint4f * LPoint4f_C_ctor_p_f(float param0);
EXPORT_FUNC LPoint4f * LPoint4f_C_ctor_p_ffff(float param0, float param1, float param2, float param3);
EXPORT_FUNC LPoint4f const * LPoint4f_C_zero_p_v();
EXPORT_FUNC LPoint4f const * LPoint4f_C_unit_x_p_v();
EXPORT_FUNC LPoint4f const * LPoint4f_C_unit_y_p_v();
EXPORT_FUNC LPoint4f const * LPoint4f_C_unit_z_p_v();
EXPORT_FUNC LPoint4f const * LPoint4f_C_unit_w_p_v();
EXPORT_FUNC LPoint3f * LPoint4f_C_get_xyz_p_p(LPoint4f const *param0);
EXPORT_FUNC LPoint2f * LPoint4f_C_get_xy_p_p(LPoint4f const *param0);
EXPORT_FUNC LPoint4f * LPoint4f_C_normalized_p_p(LPoint4f const *param0);
EXPORT_FUNC LPoint4f * LPoint4f_C_project_p_pp(LPoint4f const *param0, LVecBase4f const *param1);
EXPORT_FUNC int LPoint4f_C_get_class_type_i_v();
EXPORT_FUNC void LPoint4f_C_init_type_v_v();


// LPoint4i

EXPORT_FUNC LPoint4i * LPoint4i_C_ctor_p_v();
EXPORT_FUNC LPoint4i * LPoint4i_C_ctor_p_p(LPoint4i const *param0);
EXPORT_FUNC LPoint4i * LPoint4i_C_ctor_p_pi(LVecBase3i const *param0, int param1);
EXPORT_FUNC LPoint4i * LPoint4i_C_ctor_p_p_1_p_p(LVecBase4i const *param0);
EXPORT_FUNC LPoint4i * LPoint4i_C_ctor_p_i(int param0);
EXPORT_FUNC LPoint4i * LPoint4i_C_ctor_p_iiii(int param0, int param1, int param2, int param3);
EXPORT_FUNC LPoint4i const * LPoint4i_C_zero_p_v();
EXPORT_FUNC LPoint4i const * LPoint4i_C_unit_x_p_v();
EXPORT_FUNC LPoint4i const * LPoint4i_C_unit_y_p_v();
EXPORT_FUNC LPoint4i const * LPoint4i_C_unit_z_p_v();
EXPORT_FUNC LPoint4i const * LPoint4i_C_unit_w_p_v();
EXPORT_FUNC LPoint3i * LPoint4i_C_get_xyz_p_p(LPoint4i const *param0);
EXPORT_FUNC LPoint2i * LPoint4i_C_get_xy_p_p(LPoint4i const *param0);
EXPORT_FUNC int LPoint4i_C_get_class_type_i_v();
EXPORT_FUNC void LPoint4i_C_init_type_v_v();


// LVecBase2d

EXPORT_FUNC LVecBase2d * LVecBase2d_C_ctor_p_v();
EXPORT_FUNC LVecBase2d * LVecBase2d_C_ctor_p_p(LVecBase2d const *param0);
EXPORT_FUNC LVecBase2d * LVecBase2d_C_ctor_p_p_1_p_p(LVecBase2d::EVector2 const *param0);
EXPORT_FUNC LVecBase2d * LVecBase2d_C_ctor_p_d(double param0);
EXPORT_FUNC LVecBase2d * LVecBase2d_C_ctor_p_dd(double param0, double param1);
EXPORT_FUNC LVecBase2d const * LVecBase2d_C_zero_p_v();
EXPORT_FUNC LVecBase2d const * LVecBase2d_C_unit_x_p_v();
EXPORT_FUNC LVecBase2d const * LVecBase2d_C_unit_y_p_v();
EXPORT_FUNC int LVecBase2d_C_size_i_v();
EXPORT_FUNC bool LVecBase2d_C_is_nan_B_p(LVecBase2d const *param0);
EXPORT_FUNC double LVecBase2d_C_get_cell_d_pi(LVecBase2d const *param0, int param1);
EXPORT_FUNC void LVecBase2d_C_set_cell_v_pid(LVecBase2d *param0, int param1, double param2);
EXPORT_FUNC double LVecBase2d_C_get_x_d_p(LVecBase2d const *param0);
EXPORT_FUNC double LVecBase2d_C_get_y_d_p(LVecBase2d const *param0);
EXPORT_FUNC void LVecBase2d_C_set_x_v_pd(LVecBase2d *param0, double param1);
EXPORT_FUNC void LVecBase2d_C_set_y_v_pd(LVecBase2d *param0, double param1);
EXPORT_FUNC void LVecBase2d_C_add_to_cell_v_pid(LVecBase2d *param0, int param1, double param2);
EXPORT_FUNC void LVecBase2d_C_add_x_v_pd(LVecBase2d *param0, double param1);
EXPORT_FUNC void LVecBase2d_C_add_y_v_pd(LVecBase2d *param0, double param1);
EXPORT_FUNC void LVecBase2d_C_get_data_v_p(LVecBase2d const *param0);
EXPORT_FUNC int LVecBase2d_C_get_num_components_i_v();
EXPORT_FUNC void LVecBase2d_C_begin_v_p(LVecBase2d *param0);
EXPORT_FUNC void LVecBase2d_C_begin_v_p_1_v_p(LVecBase2d const *param0);
EXPORT_FUNC void LVecBase2d_C_end_v_p(LVecBase2d *param0);
EXPORT_FUNC void LVecBase2d_C_end_v_p_1_v_p(LVecBase2d const *param0);
EXPORT_FUNC void LVecBase2d_C_fill_v_pd(LVecBase2d *param0, double param1);
EXPORT_FUNC void LVecBase2d_C_set_v_pdd(LVecBase2d *param0, double param1, double param2);
EXPORT_FUNC double LVecBase2d_C_dot_d_pp(LVecBase2d const *param0, LVecBase2d const *param1);
EXPORT_FUNC double LVecBase2d_C_length_squared_d_p(LVecBase2d const *param0);
EXPORT_FUNC double LVecBase2d_C_length_d_p(LVecBase2d const *param0);
EXPORT_FUNC bool LVecBase2d_C_normalize_B_p(LVecBase2d *param0);
EXPORT_FUNC LVecBase2d * LVecBase2d_C_normalized_p_p(LVecBase2d const *param0);
EXPORT_FUNC LVecBase2d * LVecBase2d_C_project_p_pp(LVecBase2d const *param0, LVecBase2d const *param1);
EXPORT_FUNC int LVecBase2d_C_compare_to_i_pp(LVecBase2d const *param0, LVecBase2d const *param1);
EXPORT_FUNC int LVecBase2d_C_compare_to_i_ppd(LVecBase2d const *param0, LVecBase2d const *param1, double param2);
EXPORT_FUNC std::size_t LVecBase2d_C_get_hash_l_p(LVecBase2d const *param0);
EXPORT_FUNC std::size_t LVecBase2d_C_get_hash_l_pd(LVecBase2d const *param0, double param1);
EXPORT_FUNC std::size_t LVecBase2d_C_add_hash_l_pl(LVecBase2d const *param0, std::size_t param1);
EXPORT_FUNC std::size_t LVecBase2d_C_add_hash_l_pld(LVecBase2d const *param0, std::size_t param1, double param2);
EXPORT_FUNC void LVecBase2d_C_generate_hash_v_pp(LVecBase2d const *param0, ChecksumHashGenerator *param1);
EXPORT_FUNC void LVecBase2d_C_generate_hash_v_ppd(LVecBase2d const *param0, ChecksumHashGenerator *param1, double param2);
EXPORT_FUNC void LVecBase2d_C_componentwise_mult_v_pp(LVecBase2d *param0, LVecBase2d const *param1);
EXPORT_FUNC LVecBase2d * LVecBase2d_C_fmax_p_pp(LVecBase2d const *param0, LVecBase2d const *param1);
EXPORT_FUNC LVecBase2d * LVecBase2d_C_fmin_p_pp(LVecBase2d const *param0, LVecBase2d const *param1);
EXPORT_FUNC bool LVecBase2d_C_almost_equal_B_pp(LVecBase2d const *param0, LVecBase2d const *param1);
EXPORT_FUNC bool LVecBase2d_C_almost_equal_B_ppd(LVecBase2d const *param0, LVecBase2d const *param1, double param2);
EXPORT_FUNC void LVecBase2d_C_output_v_pp(LVecBase2d const *param0, std::ostream *param1);
EXPORT_FUNC void LVecBase2d_C_write_datagram_fixed_v_pp(LVecBase2d const *param0, Datagram *param1);
EXPORT_FUNC void LVecBase2d_C_read_datagram_fixed_v_pp(LVecBase2d *param0, DatagramIterator *param1);
EXPORT_FUNC void LVecBase2d_C_write_datagram_v_pp(LVecBase2d const *param0, Datagram *param1);
EXPORT_FUNC void LVecBase2d_C_read_datagram_v_pp(LVecBase2d *param0, DatagramIterator *param1);
EXPORT_FUNC LVecBase2d::EVector2 * LVecBase2d_C_get_v_p_p(LVecBase2d const *param0);
EXPORT_FUNC int LVecBase2d_C_get_class_type_i_v();
EXPORT_FUNC void LVecBase2d_C_init_type_v_v();


// LVecBase2f

EXPORT_FUNC LVecBase2f * LVecBase2f_C_ctor_p_v();
EXPORT_FUNC LVecBase2f * LVecBase2f_C_ctor_p_p(LVecBase2f const *param0);
EXPORT_FUNC LVecBase2f * LVecBase2f_C_ctor_p_p_1_p_p(LVecBase2f::EVector2 const *param0);
EXPORT_FUNC LVecBase2f * LVecBase2f_C_ctor_p_f(float param0);
EXPORT_FUNC LVecBase2f * LVecBase2f_C_ctor_p_ff(float param0, float param1);
EXPORT_FUNC LVecBase2f const * LVecBase2f_C_zero_p_v();
EXPORT_FUNC LVecBase2f const * LVecBase2f_C_unit_x_p_v();
EXPORT_FUNC LVecBase2f const * LVecBase2f_C_unit_y_p_v();
EXPORT_FUNC int LVecBase2f_C_size_i_v();
EXPORT_FUNC bool LVecBase2f_C_is_nan_B_p(LVecBase2f const *param0);
EXPORT_FUNC float LVecBase2f_C_get_cell_f_pi(LVecBase2f const *param0, int param1);
EXPORT_FUNC void LVecBase2f_C_set_cell_v_pif(LVecBase2f *param0, int param1, float param2);
EXPORT_FUNC float LVecBase2f_C_get_x_f_p(LVecBase2f const *param0);
EXPORT_FUNC float LVecBase2f_C_get_y_f_p(LVecBase2f const *param0);
EXPORT_FUNC void LVecBase2f_C_set_x_v_pf(LVecBase2f *param0, float param1);
EXPORT_FUNC void LVecBase2f_C_set_y_v_pf(LVecBase2f *param0, float param1);
EXPORT_FUNC void LVecBase2f_C_add_to_cell_v_pif(LVecBase2f *param0, int param1, float param2);
EXPORT_FUNC void LVecBase2f_C_add_x_v_pf(LVecBase2f *param0, float param1);
EXPORT_FUNC void LVecBase2f_C_add_y_v_pf(LVecBase2f *param0, float param1);
EXPORT_FUNC void LVecBase2f_C_get_data_v_p(LVecBase2f const *param0);
EXPORT_FUNC int LVecBase2f_C_get_num_components_i_v();
EXPORT_FUNC void LVecBase2f_C_begin_v_p(LVecBase2f *param0);
EXPORT_FUNC void LVecBase2f_C_begin_v_p_1_v_p(LVecBase2f const *param0);
EXPORT_FUNC void LVecBase2f_C_end_v_p(LVecBase2f *param0);
EXPORT_FUNC void LVecBase2f_C_end_v_p_1_v_p(LVecBase2f const *param0);
EXPORT_FUNC void LVecBase2f_C_fill_v_pf(LVecBase2f *param0, float param1);
EXPORT_FUNC void LVecBase2f_C_set_v_pff(LVecBase2f *param0, float param1, float param2);
EXPORT_FUNC float LVecBase2f_C_dot_f_pp(LVecBase2f const *param0, LVecBase2f const *param1);
EXPORT_FUNC float LVecBase2f_C_length_squared_f_p(LVecBase2f const *param0);
EXPORT_FUNC float LVecBase2f_C_length_f_p(LVecBase2f const *param0);
EXPORT_FUNC bool LVecBase2f_C_normalize_B_p(LVecBase2f *param0);
EXPORT_FUNC LVecBase2f * LVecBase2f_C_normalized_p_p(LVecBase2f const *param0);
EXPORT_FUNC LVecBase2f * LVecBase2f_C_project_p_pp(LVecBase2f const *param0, LVecBase2f const *param1);
EXPORT_FUNC int LVecBase2f_C_compare_to_i_pp(LVecBase2f const *param0, LVecBase2f const *param1);
EXPORT_FUNC int LVecBase2f_C_compare_to_i_ppf(LVecBase2f const *param0, LVecBase2f const *param1, float param2);
EXPORT_FUNC std::size_t LVecBase2f_C_get_hash_l_p(LVecBase2f const *param0);
EXPORT_FUNC std::size_t LVecBase2f_C_get_hash_l_pf(LVecBase2f const *param0, float param1);
EXPORT_FUNC std::size_t LVecBase2f_C_add_hash_l_pl(LVecBase2f const *param0, std::size_t param1);
EXPORT_FUNC std::size_t LVecBase2f_C_add_hash_l_plf(LVecBase2f const *param0, std::size_t param1, float param2);
EXPORT_FUNC void LVecBase2f_C_generate_hash_v_pp(LVecBase2f const *param0, ChecksumHashGenerator *param1);
EXPORT_FUNC void LVecBase2f_C_generate_hash_v_ppf(LVecBase2f const *param0, ChecksumHashGenerator *param1, float param2);
EXPORT_FUNC void LVecBase2f_C_componentwise_mult_v_pp(LVecBase2f *param0, LVecBase2f const *param1);
EXPORT_FUNC LVecBase2f * LVecBase2f_C_fmax_p_pp(LVecBase2f const *param0, LVecBase2f const *param1);
EXPORT_FUNC LVecBase2f * LVecBase2f_C_fmin_p_pp(LVecBase2f const *param0, LVecBase2f const *param1);
EXPORT_FUNC bool LVecBase2f_C_almost_equal_B_pp(LVecBase2f const *param0, LVecBase2f const *param1);
EXPORT_FUNC bool LVecBase2f_C_almost_equal_B_ppf(LVecBase2f const *param0, LVecBase2f const *param1, float param2);
EXPORT_FUNC void LVecBase2f_C_output_v_pp(LVecBase2f const *param0, std::ostream *param1);
EXPORT_FUNC void LVecBase2f_C_write_datagram_fixed_v_pp(LVecBase2f const *param0, Datagram *param1);
EXPORT_FUNC void LVecBase2f_C_read_datagram_fixed_v_pp(LVecBase2f *param0, DatagramIterator *param1);
EXPORT_FUNC void LVecBase2f_C_write_datagram_v_pp(LVecBase2f const *param0, Datagram *param1);
EXPORT_FUNC void LVecBase2f_C_read_datagram_v_pp(LVecBase2f *param0, DatagramIterator *param1);
EXPORT_FUNC LVecBase2f::EVector2 * LVecBase2f_C_get_v_p_p(LVecBase2f const *param0);
EXPORT_FUNC int LVecBase2f_C_get_class_type_i_v();
EXPORT_FUNC void LVecBase2f_C_init_type_v_v();


// LVecBase2i

EXPORT_FUNC LVecBase2i * LVecBase2i_C_ctor_p_v();
EXPORT_FUNC LVecBase2i * LVecBase2i_C_ctor_p_p(LVecBase2i const *param0);
EXPORT_FUNC LVecBase2i * LVecBase2i_C_ctor_p_p_1_p_p(LVecBase2i::EVector2 const *param0);
EXPORT_FUNC LVecBase2i * LVecBase2i_C_ctor_p_i(int param0);
EXPORT_FUNC LVecBase2i * LVecBase2i_C_ctor_p_ii(int param0, int param1);
EXPORT_FUNC LVecBase2i const * LVecBase2i_C_zero_p_v();
EXPORT_FUNC LVecBase2i const * LVecBase2i_C_unit_x_p_v();
EXPORT_FUNC LVecBase2i const * LVecBase2i_C_unit_y_p_v();
EXPORT_FUNC int LVecBase2i_C_size_i_v();
EXPORT_FUNC bool LVecBase2i_C_is_nan_B_p(LVecBase2i const *param0);
EXPORT_FUNC int LVecBase2i_C_get_cell_i_pi(LVecBase2i const *param0, int param1);
EXPORT_FUNC void LVecBase2i_C_set_cell_v_pii(LVecBase2i *param0, int param1, int param2);
EXPORT_FUNC int LVecBase2i_C_get_x_i_p(LVecBase2i const *param0);
EXPORT_FUNC int LVecBase2i_C_get_y_i_p(LVecBase2i const *param0);
EXPORT_FUNC void LVecBase2i_C_set_x_v_pi(LVecBase2i *param0, int param1);
EXPORT_FUNC void LVecBase2i_C_set_y_v_pi(LVecBase2i *param0, int param1);
EXPORT_FUNC void LVecBase2i_C_add_to_cell_v_pii(LVecBase2i *param0, int param1, int param2);
EXPORT_FUNC void LVecBase2i_C_add_x_v_pi(LVecBase2i *param0, int param1);
EXPORT_FUNC void LVecBase2i_C_add_y_v_pi(LVecBase2i *param0, int param1);
EXPORT_FUNC void LVecBase2i_C_get_data_v_p(LVecBase2i const *param0);
EXPORT_FUNC int LVecBase2i_C_get_num_components_i_v();
EXPORT_FUNC void LVecBase2i_C_begin_v_p(LVecBase2i *param0);
EXPORT_FUNC void LVecBase2i_C_begin_v_p_1_v_p(LVecBase2i const *param0);
EXPORT_FUNC void LVecBase2i_C_end_v_p(LVecBase2i *param0);
EXPORT_FUNC void LVecBase2i_C_end_v_p_1_v_p(LVecBase2i const *param0);
EXPORT_FUNC void LVecBase2i_C_fill_v_pi(LVecBase2i *param0, int param1);
EXPORT_FUNC void LVecBase2i_C_set_v_pii(LVecBase2i *param0, int param1, int param2);
EXPORT_FUNC int LVecBase2i_C_dot_i_pp(LVecBase2i const *param0, LVecBase2i const *param1);
EXPORT_FUNC int LVecBase2i_C_length_squared_i_p(LVecBase2i const *param0);
EXPORT_FUNC int LVecBase2i_C_compare_to_i_pp(LVecBase2i const *param0, LVecBase2i const *param1);
EXPORT_FUNC std::size_t LVecBase2i_C_get_hash_l_p(LVecBase2i const *param0);
EXPORT_FUNC std::size_t LVecBase2i_C_add_hash_l_pl(LVecBase2i const *param0, std::size_t param1);
EXPORT_FUNC void LVecBase2i_C_generate_hash_v_pp(LVecBase2i const *param0, ChecksumHashGenerator *param1);
EXPORT_FUNC void LVecBase2i_C_componentwise_mult_v_pp(LVecBase2i *param0, LVecBase2i const *param1);
EXPORT_FUNC LVecBase2i * LVecBase2i_C_fmax_p_pp(LVecBase2i const *param0, LVecBase2i const *param1);
EXPORT_FUNC LVecBase2i * LVecBase2i_C_fmin_p_pp(LVecBase2i const *param0, LVecBase2i const *param1);
EXPORT_FUNC bool LVecBase2i_C_almost_equal_B_pp(LVecBase2i const *param0, LVecBase2i const *param1);
EXPORT_FUNC bool LVecBase2i_C_almost_equal_B_ppi(LVecBase2i const *param0, LVecBase2i const *param1, int param2);
EXPORT_FUNC void LVecBase2i_C_output_v_pp(LVecBase2i const *param0, std::ostream *param1);
EXPORT_FUNC void LVecBase2i_C_write_datagram_fixed_v_pp(LVecBase2i const *param0, Datagram *param1);
EXPORT_FUNC void LVecBase2i_C_read_datagram_fixed_v_pp(LVecBase2i *param0, DatagramIterator *param1);
EXPORT_FUNC void LVecBase2i_C_write_datagram_v_pp(LVecBase2i const *param0, Datagram *param1);
EXPORT_FUNC void LVecBase2i_C_read_datagram_v_pp(LVecBase2i *param0, DatagramIterator *param1);
EXPORT_FUNC LVecBase2i::EVector2 * LVecBase2i_C_get_v_p_p(LVecBase2i const *param0);
EXPORT_FUNC int LVecBase2i_C_get_class_type_i_v();
EXPORT_FUNC void LVecBase2i_C_init_type_v_v();


// LVecBase3d

EXPORT_FUNC LVecBase3d * LVecBase3d_C_ctor_p_v();
EXPORT_FUNC LVecBase3d * LVecBase3d_C_ctor_p_pd(LVecBase2d const *param0, double param1);
EXPORT_FUNC LVecBase3d * LVecBase3d_C_ctor_p_p(LVecBase3d const *param0);
EXPORT_FUNC LVecBase3d * LVecBase3d_C_ctor_p_p_1_p_p(LVecBase3d::EVector3 const *param0);
EXPORT_FUNC LVecBase3d * LVecBase3d_C_ctor_p_d(double param0);
EXPORT_FUNC LVecBase3d * LVecBase3d_C_ctor_p_ddd(double param0, double param1, double param2);
EXPORT_FUNC LVecBase3d const * LVecBase3d_C_zero_p_v();
EXPORT_FUNC LVecBase3d const * LVecBase3d_C_unit_x_p_v();
EXPORT_FUNC LVecBase3d const * LVecBase3d_C_unit_y_p_v();
EXPORT_FUNC LVecBase3d const * LVecBase3d_C_unit_z_p_v();
EXPORT_FUNC int LVecBase3d_C_size_i_v();
EXPORT_FUNC bool LVecBase3d_C_is_nan_B_p(LVecBase3d const *param0);
EXPORT_FUNC double LVecBase3d_C_get_cell_d_pi(LVecBase3d const *param0, int param1);
EXPORT_FUNC double LVecBase3d_C_get_x_d_p(LVecBase3d const *param0);
EXPORT_FUNC double LVecBase3d_C_get_y_d_p(LVecBase3d const *param0);
EXPORT_FUNC double LVecBase3d_C_get_z_d_p(LVecBase3d const *param0);
EXPORT_FUNC void LVecBase3d_C_set_cell_v_pid(LVecBase3d *param0, int param1, double param2);
EXPORT_FUNC void LVecBase3d_C_set_x_v_pd(LVecBase3d *param0, double param1);
EXPORT_FUNC void LVecBase3d_C_set_y_v_pd(LVecBase3d *param0, double param1);
EXPORT_FUNC void LVecBase3d_C_set_z_v_pd(LVecBase3d *param0, double param1);
EXPORT_FUNC LVecBase2d * LVecBase3d_C_get_xy_p_p(LVecBase3d const *param0);
EXPORT_FUNC LVecBase2d * LVecBase3d_C_get_xz_p_p(LVecBase3d const *param0);
EXPORT_FUNC LVecBase2d * LVecBase3d_C_get_yz_p_p(LVecBase3d const *param0);
EXPORT_FUNC void LVecBase3d_C_add_to_cell_v_pid(LVecBase3d *param0, int param1, double param2);
EXPORT_FUNC void LVecBase3d_C_add_x_v_pd(LVecBase3d *param0, double param1);
EXPORT_FUNC void LVecBase3d_C_add_y_v_pd(LVecBase3d *param0, double param1);
EXPORT_FUNC void LVecBase3d_C_add_z_v_pd(LVecBase3d *param0, double param1);
EXPORT_FUNC void LVecBase3d_C_get_data_v_p(LVecBase3d const *param0);
EXPORT_FUNC int LVecBase3d_C_get_num_components_i_v();
EXPORT_FUNC void LVecBase3d_C_begin_v_p(LVecBase3d *param0);
EXPORT_FUNC void LVecBase3d_C_begin_v_p_1_v_p(LVecBase3d const *param0);
EXPORT_FUNC void LVecBase3d_C_end_v_p(LVecBase3d *param0);
EXPORT_FUNC void LVecBase3d_C_end_v_p_1_v_p(LVecBase3d const *param0);
EXPORT_FUNC void LVecBase3d_C_fill_v_pd(LVecBase3d *param0, double param1);
EXPORT_FUNC void LVecBase3d_C_set_v_pddd(LVecBase3d *param0, double param1, double param2, double param3);
EXPORT_FUNC double LVecBase3d_C_dot_d_pp(LVecBase3d const *param0, LVecBase3d const *param1);
EXPORT_FUNC double LVecBase3d_C_length_squared_d_p(LVecBase3d const *param0);
EXPORT_FUNC double LVecBase3d_C_length_d_p(LVecBase3d const *param0);
EXPORT_FUNC bool LVecBase3d_C_normalize_B_p(LVecBase3d *param0);
EXPORT_FUNC LVecBase3d * LVecBase3d_C_normalized_p_p(LVecBase3d const *param0);
EXPORT_FUNC LVecBase3d * LVecBase3d_C_project_p_pp(LVecBase3d const *param0, LVecBase3d const *param1);
EXPORT_FUNC LVecBase3d * LVecBase3d_C_cross_p_pp(LVecBase3d const *param0, LVecBase3d const *param1);
EXPORT_FUNC LVecBase3d * LVecBase3d_C_get_standardized_hpr_p_p(LVecBase3d const *param0);
EXPORT_FUNC int LVecBase3d_C_compare_to_i_pp(LVecBase3d const *param0, LVecBase3d const *param1);
EXPORT_FUNC int LVecBase3d_C_compare_to_i_ppd(LVecBase3d const *param0, LVecBase3d const *param1, double param2);
EXPORT_FUNC std::size_t LVecBase3d_C_get_hash_l_p(LVecBase3d const *param0);
EXPORT_FUNC std::size_t LVecBase3d_C_get_hash_l_pd(LVecBase3d const *param0, double param1);
EXPORT_FUNC std::size_t LVecBase3d_C_add_hash_l_pl(LVecBase3d const *param0, std::size_t param1);
EXPORT_FUNC std::size_t LVecBase3d_C_add_hash_l_pld(LVecBase3d const *param0, std::size_t param1, double param2);
EXPORT_FUNC void LVecBase3d_C_generate_hash_v_pp(LVecBase3d const *param0, ChecksumHashGenerator *param1);
EXPORT_FUNC void LVecBase3d_C_generate_hash_v_ppd(LVecBase3d const *param0, ChecksumHashGenerator *param1, double param2);
EXPORT_FUNC void LVecBase3d_C_componentwise_mult_v_pp(LVecBase3d *param0, LVecBase3d const *param1);
EXPORT_FUNC LVecBase3d * LVecBase3d_C_fmax_p_pp(LVecBase3d const *param0, LVecBase3d const *param1);
EXPORT_FUNC LVecBase3d * LVecBase3d_C_fmin_p_pp(LVecBase3d const *param0, LVecBase3d const *param1);
EXPORT_FUNC void LVecBase3d_C_cross_into_v_pp(LVecBase3d *param0, LVecBase3d const *param1);
EXPORT_FUNC bool LVecBase3d_C_almost_equal_B_pp(LVecBase3d const *param0, LVecBase3d const *param1);
EXPORT_FUNC bool LVecBase3d_C_almost_equal_B_ppd(LVecBase3d const *param0, LVecBase3d const *param1, double param2);
EXPORT_FUNC void LVecBase3d_C_output_v_pp(LVecBase3d const *param0, std::ostream *param1);
EXPORT_FUNC void LVecBase3d_C_write_datagram_fixed_v_pp(LVecBase3d const *param0, Datagram *param1);
EXPORT_FUNC void LVecBase3d_C_read_datagram_fixed_v_pp(LVecBase3d *param0, DatagramIterator *param1);
EXPORT_FUNC void LVecBase3d_C_write_datagram_v_pp(LVecBase3d const *param0, Datagram *param1);
EXPORT_FUNC void LVecBase3d_C_read_datagram_v_pp(LVecBase3d *param0, DatagramIterator *param1);
EXPORT_FUNC LVecBase3d::EVector3 * LVecBase3d_C_get_v_p_p(LVecBase3d const *param0);
EXPORT_FUNC int LVecBase3d_C_get_class_type_i_v();
EXPORT_FUNC void LVecBase3d_C_init_type_v_v();


// LVecBase3f

EXPORT_FUNC LVecBase3f * LVecBase3f_C_ctor_p_v();
EXPORT_FUNC LVecBase3f * LVecBase3f_C_ctor_p_pf(LVecBase2f const *param0, float param1);
EXPORT_FUNC LVecBase3f * LVecBase3f_C_ctor_p_p(LVecBase3f const *param0);
EXPORT_FUNC LVecBase3f * LVecBase3f_C_ctor_p_p_1_p_p(LVecBase3f::EVector3 const *param0);
EXPORT_FUNC LVecBase3f * LVecBase3f_C_ctor_p_f(float param0);
EXPORT_FUNC LVecBase3f * LVecBase3f_C_ctor_p_fff(float param0, float param1, float param2);
EXPORT_FUNC LVecBase3f const * LVecBase3f_C_zero_p_v();
EXPORT_FUNC LVecBase3f const * LVecBase3f_C_unit_x_p_v();
EXPORT_FUNC LVecBase3f const * LVecBase3f_C_unit_y_p_v();
EXPORT_FUNC LVecBase3f const * LVecBase3f_C_unit_z_p_v();
EXPORT_FUNC int LVecBase3f_C_size_i_v();
EXPORT_FUNC bool LVecBase3f_C_is_nan_B_p(LVecBase3f const *param0);
EXPORT_FUNC float LVecBase3f_C_get_cell_f_pi(LVecBase3f const *param0, int param1);
EXPORT_FUNC float LVecBase3f_C_get_x_f_p(LVecBase3f const *param0);
EXPORT_FUNC float LVecBase3f_C_get_y_f_p(LVecBase3f const *param0);
EXPORT_FUNC float LVecBase3f_C_get_z_f_p(LVecBase3f const *param0);
EXPORT_FUNC void LVecBase3f_C_set_cell_v_pif(LVecBase3f *param0, int param1, float param2);
EXPORT_FUNC void LVecBase3f_C_set_x_v_pf(LVecBase3f *param0, float param1);
EXPORT_FUNC void LVecBase3f_C_set_y_v_pf(LVecBase3f *param0, float param1);
EXPORT_FUNC void LVecBase3f_C_set_z_v_pf(LVecBase3f *param0, float param1);
EXPORT_FUNC LVecBase2f * LVecBase3f_C_get_xy_p_p(LVecBase3f const *param0);
EXPORT_FUNC LVecBase2f * LVecBase3f_C_get_xz_p_p(LVecBase3f const *param0);
EXPORT_FUNC LVecBase2f * LVecBase3f_C_get_yz_p_p(LVecBase3f const *param0);
EXPORT_FUNC void LVecBase3f_C_add_to_cell_v_pif(LVecBase3f *param0, int param1, float param2);
EXPORT_FUNC void LVecBase3f_C_add_x_v_pf(LVecBase3f *param0, float param1);
EXPORT_FUNC void LVecBase3f_C_add_y_v_pf(LVecBase3f *param0, float param1);
EXPORT_FUNC void LVecBase3f_C_add_z_v_pf(LVecBase3f *param0, float param1);
EXPORT_FUNC void LVecBase3f_C_get_data_v_p(LVecBase3f const *param0);
EXPORT_FUNC int LVecBase3f_C_get_num_components_i_v();
EXPORT_FUNC void LVecBase3f_C_begin_v_p(LVecBase3f *param0);
EXPORT_FUNC void LVecBase3f_C_begin_v_p_1_v_p(LVecBase3f const *param0);
EXPORT_FUNC void LVecBase3f_C_end_v_p(LVecBase3f *param0);
EXPORT_FUNC void LVecBase3f_C_end_v_p_1_v_p(LVecBase3f const *param0);
EXPORT_FUNC void LVecBase3f_C_fill_v_pf(LVecBase3f *param0, float param1);
EXPORT_FUNC void LVecBase3f_C_set_v_pfff(LVecBase3f *param0, float param1, float param2, float param3);
EXPORT_FUNC float LVecBase3f_C_dot_f_pp(LVecBase3f const *param0, LVecBase3f const *param1);
EXPORT_FUNC float LVecBase3f_C_length_squared_f_p(LVecBase3f const *param0);
EXPORT_FUNC float LVecBase3f_C_length_f_p(LVecBase3f const *param0);
EXPORT_FUNC bool LVecBase3f_C_normalize_B_p(LVecBase3f *param0);
EXPORT_FUNC LVecBase3f * LVecBase3f_C_normalized_p_p(LVecBase3f const *param0);
EXPORT_FUNC LVecBase3f * LVecBase3f_C_project_p_pp(LVecBase3f const *param0, LVecBase3f const *param1);
EXPORT_FUNC LVecBase3f * LVecBase3f_C_cross_p_pp(LVecBase3f const *param0, LVecBase3f const *param1);
EXPORT_FUNC LVecBase3f * LVecBase3f_C_get_standardized_hpr_p_p(LVecBase3f const *param0);
EXPORT_FUNC int LVecBase3f_C_compare_to_i_pp(LVecBase3f const *param0, LVecBase3f const *param1);
EXPORT_FUNC int LVecBase3f_C_compare_to_i_ppf(LVecBase3f const *param0, LVecBase3f const *param1, float param2);
EXPORT_FUNC std::size_t LVecBase3f_C_get_hash_l_p(LVecBase3f const *param0);
EXPORT_FUNC std::size_t LVecBase3f_C_get_hash_l_pf(LVecBase3f const *param0, float param1);
EXPORT_FUNC std::size_t LVecBase3f_C_add_hash_l_pl(LVecBase3f const *param0, std::size_t param1);
EXPORT_FUNC std::size_t LVecBase3f_C_add_hash_l_plf(LVecBase3f const *param0, std::size_t param1, float param2);
EXPORT_FUNC void LVecBase3f_C_generate_hash_v_pp(LVecBase3f const *param0, ChecksumHashGenerator *param1);
EXPORT_FUNC void LVecBase3f_C_generate_hash_v_ppf(LVecBase3f const *param0, ChecksumHashGenerator *param1, float param2);
EXPORT_FUNC void LVecBase3f_C_componentwise_mult_v_pp(LVecBase3f *param0, LVecBase3f const *param1);
EXPORT_FUNC LVecBase3f * LVecBase3f_C_fmax_p_pp(LVecBase3f const *param0, LVecBase3f const *param1);
EXPORT_FUNC LVecBase3f * LVecBase3f_C_fmin_p_pp(LVecBase3f const *param0, LVecBase3f const *param1);
EXPORT_FUNC void LVecBase3f_C_cross_into_v_pp(LVecBase3f *param0, LVecBase3f const *param1);
EXPORT_FUNC bool LVecBase3f_C_almost_equal_B_pp(LVecBase3f const *param0, LVecBase3f const *param1);
EXPORT_FUNC bool LVecBase3f_C_almost_equal_B_ppf(LVecBase3f const *param0, LVecBase3f const *param1, float param2);
EXPORT_FUNC void LVecBase3f_C_output_v_pp(LVecBase3f const *param0, std::ostream *param1);
EXPORT_FUNC void LVecBase3f_C_write_datagram_fixed_v_pp(LVecBase3f const *param0, Datagram *param1);
EXPORT_FUNC void LVecBase3f_C_read_datagram_fixed_v_pp(LVecBase3f *param0, DatagramIterator *param1);
EXPORT_FUNC void LVecBase3f_C_write_datagram_v_pp(LVecBase3f const *param0, Datagram *param1);
EXPORT_FUNC void LVecBase3f_C_read_datagram_v_pp(LVecBase3f *param0, DatagramIterator *param1);
EXPORT_FUNC LVecBase3f::EVector3 * LVecBase3f_C_get_v_p_p(LVecBase3f const *param0);
EXPORT_FUNC int LVecBase3f_C_get_class_type_i_v();
EXPORT_FUNC void LVecBase3f_C_init_type_v_v();


// LVecBase3i

EXPORT_FUNC LVecBase3i * LVecBase3i_C_ctor_p_v();
EXPORT_FUNC LVecBase3i * LVecBase3i_C_ctor_p_pi(LVecBase2i const *param0, int param1);
EXPORT_FUNC LVecBase3i * LVecBase3i_C_ctor_p_p(LVecBase3i const *param0);
EXPORT_FUNC LVecBase3i * LVecBase3i_C_ctor_p_p_1_p_p(LVecBase3i::EVector3 const *param0);
EXPORT_FUNC LVecBase3i * LVecBase3i_C_ctor_p_i(int param0);
EXPORT_FUNC LVecBase3i * LVecBase3i_C_ctor_p_iii(int param0, int param1, int param2);
EXPORT_FUNC LVecBase3i const * LVecBase3i_C_zero_p_v();
EXPORT_FUNC LVecBase3i const * LVecBase3i_C_unit_x_p_v();
EXPORT_FUNC LVecBase3i const * LVecBase3i_C_unit_y_p_v();
EXPORT_FUNC LVecBase3i const * LVecBase3i_C_unit_z_p_v();
EXPORT_FUNC int LVecBase3i_C_size_i_v();
EXPORT_FUNC bool LVecBase3i_C_is_nan_B_p(LVecBase3i const *param0);
EXPORT_FUNC int LVecBase3i_C_get_cell_i_pi(LVecBase3i const *param0, int param1);
EXPORT_FUNC int LVecBase3i_C_get_x_i_p(LVecBase3i const *param0);
EXPORT_FUNC int LVecBase3i_C_get_y_i_p(LVecBase3i const *param0);
EXPORT_FUNC int LVecBase3i_C_get_z_i_p(LVecBase3i const *param0);
EXPORT_FUNC void LVecBase3i_C_set_cell_v_pii(LVecBase3i *param0, int param1, int param2);
EXPORT_FUNC void LVecBase3i_C_set_x_v_pi(LVecBase3i *param0, int param1);
EXPORT_FUNC void LVecBase3i_C_set_y_v_pi(LVecBase3i *param0, int param1);
EXPORT_FUNC void LVecBase3i_C_set_z_v_pi(LVecBase3i *param0, int param1);
EXPORT_FUNC LVecBase2i * LVecBase3i_C_get_xy_p_p(LVecBase3i const *param0);
EXPORT_FUNC LVecBase2i * LVecBase3i_C_get_xz_p_p(LVecBase3i const *param0);
EXPORT_FUNC LVecBase2i * LVecBase3i_C_get_yz_p_p(LVecBase3i const *param0);
EXPORT_FUNC void LVecBase3i_C_add_to_cell_v_pii(LVecBase3i *param0, int param1, int param2);
EXPORT_FUNC void LVecBase3i_C_add_x_v_pi(LVecBase3i *param0, int param1);
EXPORT_FUNC void LVecBase3i_C_add_y_v_pi(LVecBase3i *param0, int param1);
EXPORT_FUNC void LVecBase3i_C_add_z_v_pi(LVecBase3i *param0, int param1);
EXPORT_FUNC void LVecBase3i_C_get_data_v_p(LVecBase3i const *param0);
EXPORT_FUNC int LVecBase3i_C_get_num_components_i_v();
EXPORT_FUNC void LVecBase3i_C_begin_v_p(LVecBase3i *param0);
EXPORT_FUNC void LVecBase3i_C_begin_v_p_1_v_p(LVecBase3i const *param0);
EXPORT_FUNC void LVecBase3i_C_end_v_p(LVecBase3i *param0);
EXPORT_FUNC void LVecBase3i_C_end_v_p_1_v_p(LVecBase3i const *param0);
EXPORT_FUNC void LVecBase3i_C_fill_v_pi(LVecBase3i *param0, int param1);
EXPORT_FUNC void LVecBase3i_C_set_v_piii(LVecBase3i *param0, int param1, int param2, int param3);
EXPORT_FUNC int LVecBase3i_C_dot_i_pp(LVecBase3i const *param0, LVecBase3i const *param1);
EXPORT_FUNC int LVecBase3i_C_length_squared_i_p(LVecBase3i const *param0);
EXPORT_FUNC LVecBase3i * LVecBase3i_C_cross_p_pp(LVecBase3i const *param0, LVecBase3i const *param1);
EXPORT_FUNC int LVecBase3i_C_compare_to_i_pp(LVecBase3i const *param0, LVecBase3i const *param1);
EXPORT_FUNC std::size_t LVecBase3i_C_get_hash_l_p(LVecBase3i const *param0);
EXPORT_FUNC std::size_t LVecBase3i_C_add_hash_l_pl(LVecBase3i const *param0, std::size_t param1);
EXPORT_FUNC void LVecBase3i_C_generate_hash_v_pp(LVecBase3i const *param0, ChecksumHashGenerator *param1);
EXPORT_FUNC void LVecBase3i_C_componentwise_mult_v_pp(LVecBase3i *param0, LVecBase3i const *param1);
EXPORT_FUNC LVecBase3i * LVecBase3i_C_fmax_p_pp(LVecBase3i const *param0, LVecBase3i const *param1);
EXPORT_FUNC LVecBase3i * LVecBase3i_C_fmin_p_pp(LVecBase3i const *param0, LVecBase3i const *param1);
EXPORT_FUNC void LVecBase3i_C_cross_into_v_pp(LVecBase3i *param0, LVecBase3i const *param1);
EXPORT_FUNC bool LVecBase3i_C_almost_equal_B_pp(LVecBase3i const *param0, LVecBase3i const *param1);
EXPORT_FUNC bool LVecBase3i_C_almost_equal_B_ppi(LVecBase3i const *param0, LVecBase3i const *param1, int param2);
EXPORT_FUNC void LVecBase3i_C_output_v_pp(LVecBase3i const *param0, std::ostream *param1);
EXPORT_FUNC void LVecBase3i_C_write_datagram_fixed_v_pp(LVecBase3i const *param0, Datagram *param1);
EXPORT_FUNC void LVecBase3i_C_read_datagram_fixed_v_pp(LVecBase3i *param0, DatagramIterator *param1);
EXPORT_FUNC void LVecBase3i_C_write_datagram_v_pp(LVecBase3i const *param0, Datagram *param1);
EXPORT_FUNC void LVecBase3i_C_read_datagram_v_pp(LVecBase3i *param0, DatagramIterator *param1);
EXPORT_FUNC LVecBase3i::EVector3 * LVecBase3i_C_get_v_p_p(LVecBase3i const *param0);
EXPORT_FUNC int LVecBase3i_C_get_class_type_i_v();
EXPORT_FUNC void LVecBase3i_C_init_type_v_v();


// LVecBase4d

EXPORT_FUNC LVecBase4d * LVecBase4d_C_ctor_p_v();
EXPORT_FUNC LVecBase4d * LVecBase4d_C_ctor_p_p(LPoint3d const *param0);
EXPORT_FUNC LVecBase4d * LVecBase4d_C_ctor_p_pd(LVecBase3d const *param0, double param1);
EXPORT_FUNC LVecBase4d * LVecBase4d_C_ctor_p_p_1_p_p(LVecBase4d const *param0);
EXPORT_FUNC LVecBase4d * LVecBase4d_C_ctor_p_p_1_p_p_2_p_p(LVecBase4d::EVector4 const *param0);
EXPORT_FUNC LVecBase4d * LVecBase4d_C_ctor_p_p_1_p_p_2_p_p_3_p_p(LVector3d const *param0);
EXPORT_FUNC LVecBase4d * LVecBase4d_C_ctor_p_p_1_p_p_2_p_p_3_p_p_4_p_p(UnalignedLVecBase4d const *param0);
EXPORT_FUNC LVecBase4d * LVecBase4d_C_ctor_p_d(double param0);
EXPORT_FUNC LVecBase4d * LVecBase4d_C_ctor_p_dddd(double param0, double param1, double param2, double param3);
EXPORT_FUNC LVecBase4d const * LVecBase4d_C_zero_p_v();
EXPORT_FUNC LVecBase4d const * LVecBase4d_C_unit_x_p_v();
EXPORT_FUNC LVecBase4d const * LVecBase4d_C_unit_y_p_v();
EXPORT_FUNC LVecBase4d const * LVecBase4d_C_unit_z_p_v();
EXPORT_FUNC LVecBase4d const * LVecBase4d_C_unit_w_p_v();
EXPORT_FUNC int LVecBase4d_C_size_i_v();
EXPORT_FUNC bool LVecBase4d_C_is_nan_B_p(LVecBase4d const *param0);
EXPORT_FUNC double LVecBase4d_C_get_cell_d_pi(LVecBase4d const *param0, int param1);
EXPORT_FUNC void LVecBase4d_C_set_cell_v_pid(LVecBase4d *param0, int param1, double param2);
EXPORT_FUNC double LVecBase4d_C_get_x_d_p(LVecBase4d const *param0);
EXPORT_FUNC double LVecBase4d_C_get_y_d_p(LVecBase4d const *param0);
EXPORT_FUNC double LVecBase4d_C_get_z_d_p(LVecBase4d const *param0);
EXPORT_FUNC double LVecBase4d_C_get_w_d_p(LVecBase4d const *param0);
EXPORT_FUNC LVecBase3d * LVecBase4d_C_get_xyz_p_p(LVecBase4d const *param0);
EXPORT_FUNC LVecBase2d * LVecBase4d_C_get_xy_p_p(LVecBase4d const *param0);
EXPORT_FUNC void LVecBase4d_C_set_x_v_pd(LVecBase4d *param0, double param1);
EXPORT_FUNC void LVecBase4d_C_set_y_v_pd(LVecBase4d *param0, double param1);
EXPORT_FUNC void LVecBase4d_C_set_z_v_pd(LVecBase4d *param0, double param1);
EXPORT_FUNC void LVecBase4d_C_set_w_v_pd(LVecBase4d *param0, double param1);
EXPORT_FUNC void LVecBase4d_C_add_to_cell_v_pid(LVecBase4d *param0, int param1, double param2);
EXPORT_FUNC void LVecBase4d_C_add_x_v_pd(LVecBase4d *param0, double param1);
EXPORT_FUNC void LVecBase4d_C_add_y_v_pd(LVecBase4d *param0, double param1);
EXPORT_FUNC void LVecBase4d_C_add_z_v_pd(LVecBase4d *param0, double param1);
EXPORT_FUNC void LVecBase4d_C_add_w_v_pd(LVecBase4d *param0, double param1);
EXPORT_FUNC void LVecBase4d_C_get_data_v_p(LVecBase4d const *param0);
EXPORT_FUNC int LVecBase4d_C_get_num_components_i_v();
EXPORT_FUNC void LVecBase4d_C_begin_v_p(LVecBase4d *param0);
EXPORT_FUNC void LVecBase4d_C_begin_v_p_1_v_p(LVecBase4d const *param0);
EXPORT_FUNC void LVecBase4d_C_end_v_p(LVecBase4d *param0);
EXPORT_FUNC void LVecBase4d_C_end_v_p_1_v_p(LVecBase4d const *param0);
EXPORT_FUNC void LVecBase4d_C_fill_v_pd(LVecBase4d *param0, double param1);
EXPORT_FUNC void LVecBase4d_C_set_v_pdddd(LVecBase4d *param0, double param1, double param2, double param3, double param4);
EXPORT_FUNC double LVecBase4d_C_dot_d_pp(LVecBase4d const *param0, LVecBase4d const *param1);
EXPORT_FUNC double LVecBase4d_C_length_squared_d_p(LVecBase4d const *param0);
EXPORT_FUNC double LVecBase4d_C_length_d_p(LVecBase4d const *param0);
EXPORT_FUNC bool LVecBase4d_C_normalize_B_p(LVecBase4d *param0);
EXPORT_FUNC LVecBase4d * LVecBase4d_C_normalized_p_p(LVecBase4d const *param0);
EXPORT_FUNC LVecBase4d * LVecBase4d_C_project_p_pp(LVecBase4d const *param0, LVecBase4d const *param1);
EXPORT_FUNC int LVecBase4d_C_compare_to_i_pp(LVecBase4d const *param0, LVecBase4d const *param1);
EXPORT_FUNC int LVecBase4d_C_compare_to_i_ppd(LVecBase4d const *param0, LVecBase4d const *param1, double param2);
EXPORT_FUNC std::size_t LVecBase4d_C_get_hash_l_p(LVecBase4d const *param0);
EXPORT_FUNC std::size_t LVecBase4d_C_get_hash_l_pd(LVecBase4d const *param0, double param1);
EXPORT_FUNC std::size_t LVecBase4d_C_add_hash_l_pl(LVecBase4d const *param0, std::size_t param1);
EXPORT_FUNC std::size_t LVecBase4d_C_add_hash_l_pld(LVecBase4d const *param0, std::size_t param1, double param2);
EXPORT_FUNC void LVecBase4d_C_generate_hash_v_pp(LVecBase4d const *param0, ChecksumHashGenerator *param1);
EXPORT_FUNC void LVecBase4d_C_generate_hash_v_ppd(LVecBase4d const *param0, ChecksumHashGenerator *param1, double param2);
EXPORT_FUNC void LVecBase4d_C_componentwise_mult_v_pp(LVecBase4d *param0, LVecBase4d const *param1);
EXPORT_FUNC LVecBase4d * LVecBase4d_C_fmax_p_pp(LVecBase4d const *param0, LVecBase4d const *param1);
EXPORT_FUNC LVecBase4d * LVecBase4d_C_fmin_p_pp(LVecBase4d const *param0, LVecBase4d const *param1);
EXPORT_FUNC bool LVecBase4d_C_almost_equal_B_pp(LVecBase4d const *param0, LVecBase4d const *param1);
EXPORT_FUNC bool LVecBase4d_C_almost_equal_B_ppd(LVecBase4d const *param0, LVecBase4d const *param1, double param2);
EXPORT_FUNC void LVecBase4d_C_output_v_pp(LVecBase4d const *param0, std::ostream *param1);
EXPORT_FUNC void LVecBase4d_C_write_datagram_fixed_v_pp(LVecBase4d const *param0, Datagram *param1);
EXPORT_FUNC void LVecBase4d_C_read_datagram_fixed_v_pp(LVecBase4d *param0, DatagramIterator *param1);
EXPORT_FUNC void LVecBase4d_C_write_datagram_v_pp(LVecBase4d const *param0, Datagram *param1);
EXPORT_FUNC void LVecBase4d_C_read_datagram_v_pp(LVecBase4d *param0, DatagramIterator *param1);
EXPORT_FUNC LVecBase4d::EVector4 * LVecBase4d_C_get_v_p_p(LVecBase4d const *param0);
EXPORT_FUNC int LVecBase4d_C_get_class_type_i_v();
EXPORT_FUNC void LVecBase4d_C_init_type_v_v();


// LVecBase4f

EXPORT_FUNC LVecBase4f * LVecBase4f_C_ctor_p_v();
EXPORT_FUNC LVecBase4f * LVecBase4f_C_ctor_p_p(LPoint3f const *param0);
EXPORT_FUNC LVecBase4f * LVecBase4f_C_ctor_p_pf(LVecBase3f const *param0, float param1);
EXPORT_FUNC LVecBase4f * LVecBase4f_C_ctor_p_p_1_p_p(LVecBase4f const *param0);
EXPORT_FUNC LVecBase4f * LVecBase4f_C_ctor_p_p_1_p_p_2_p_p(LVecBase4f::EVector4 const *param0);
EXPORT_FUNC LVecBase4f * LVecBase4f_C_ctor_p_p_1_p_p_2_p_p_3_p_p(LVector3f const *param0);
EXPORT_FUNC LVecBase4f * LVecBase4f_C_ctor_p_p_1_p_p_2_p_p_3_p_p_4_p_p(UnalignedLVecBase4f const *param0);
EXPORT_FUNC LVecBase4f * LVecBase4f_C_ctor_p_f(float param0);
EXPORT_FUNC LVecBase4f * LVecBase4f_C_ctor_p_ffff(float param0, float param1, float param2, float param3);
EXPORT_FUNC LVecBase4f const * LVecBase4f_C_zero_p_v();
EXPORT_FUNC LVecBase4f const * LVecBase4f_C_unit_x_p_v();
EXPORT_FUNC LVecBase4f const * LVecBase4f_C_unit_y_p_v();
EXPORT_FUNC LVecBase4f const * LVecBase4f_C_unit_z_p_v();
EXPORT_FUNC LVecBase4f const * LVecBase4f_C_unit_w_p_v();
EXPORT_FUNC int LVecBase4f_C_size_i_v();
EXPORT_FUNC bool LVecBase4f_C_is_nan_B_p(LVecBase4f const *param0);
EXPORT_FUNC float LVecBase4f_C_get_cell_f_pi(LVecBase4f const *param0, int param1);
EXPORT_FUNC void LVecBase4f_C_set_cell_v_pif(LVecBase4f *param0, int param1, float param2);
EXPORT_FUNC float LVecBase4f_C_get_x_f_p(LVecBase4f const *param0);
EXPORT_FUNC float LVecBase4f_C_get_y_f_p(LVecBase4f const *param0);
EXPORT_FUNC float LVecBase4f_C_get_z_f_p(LVecBase4f const *param0);
EXPORT_FUNC float LVecBase4f_C_get_w_f_p(LVecBase4f const *param0);
EXPORT_FUNC LVecBase3f * LVecBase4f_C_get_xyz_p_p(LVecBase4f const *param0);
EXPORT_FUNC LVecBase2f * LVecBase4f_C_get_xy_p_p(LVecBase4f const *param0);
EXPORT_FUNC void LVecBase4f_C_set_x_v_pf(LVecBase4f *param0, float param1);
EXPORT_FUNC void LVecBase4f_C_set_y_v_pf(LVecBase4f *param0, float param1);
EXPORT_FUNC void LVecBase4f_C_set_z_v_pf(LVecBase4f *param0, float param1);
EXPORT_FUNC void LVecBase4f_C_set_w_v_pf(LVecBase4f *param0, float param1);
EXPORT_FUNC void LVecBase4f_C_add_to_cell_v_pif(LVecBase4f *param0, int param1, float param2);
EXPORT_FUNC void LVecBase4f_C_add_x_v_pf(LVecBase4f *param0, float param1);
EXPORT_FUNC void LVecBase4f_C_add_y_v_pf(LVecBase4f *param0, float param1);
EXPORT_FUNC void LVecBase4f_C_add_z_v_pf(LVecBase4f *param0, float param1);
EXPORT_FUNC void LVecBase4f_C_add_w_v_pf(LVecBase4f *param0, float param1);
EXPORT_FUNC void LVecBase4f_C_get_data_v_p(LVecBase4f const *param0);
EXPORT_FUNC int LVecBase4f_C_get_num_components_i_v();
EXPORT_FUNC void LVecBase4f_C_begin_v_p(LVecBase4f *param0);
EXPORT_FUNC void LVecBase4f_C_begin_v_p_1_v_p(LVecBase4f const *param0);
EXPORT_FUNC void LVecBase4f_C_end_v_p(LVecBase4f *param0);
EXPORT_FUNC void LVecBase4f_C_end_v_p_1_v_p(LVecBase4f const *param0);
EXPORT_FUNC void LVecBase4f_C_fill_v_pf(LVecBase4f *param0, float param1);
EXPORT_FUNC void LVecBase4f_C_set_v_pffff(LVecBase4f *param0, float param1, float param2, float param3, float param4);
EXPORT_FUNC float LVecBase4f_C_dot_f_pp(LVecBase4f const *param0, LVecBase4f const *param1);
EXPORT_FUNC float LVecBase4f_C_length_squared_f_p(LVecBase4f const *param0);
EXPORT_FUNC float LVecBase4f_C_length_f_p(LVecBase4f const *param0);
EXPORT_FUNC bool LVecBase4f_C_normalize_B_p(LVecBase4f *param0);
EXPORT_FUNC LVecBase4f * LVecBase4f_C_normalized_p_p(LVecBase4f const *param0);
EXPORT_FUNC LVecBase4f * LVecBase4f_C_project_p_pp(LVecBase4f const *param0, LVecBase4f const *param1);
EXPORT_FUNC int LVecBase4f_C_compare_to_i_pp(LVecBase4f const *param0, LVecBase4f const *param1);
EXPORT_FUNC int LVecBase4f_C_compare_to_i_ppf(LVecBase4f const *param0, LVecBase4f const *param1, float param2);
EXPORT_FUNC std::size_t LVecBase4f_C_get_hash_l_p(LVecBase4f const *param0);
EXPORT_FUNC std::size_t LVecBase4f_C_get_hash_l_pf(LVecBase4f const *param0, float param1);
EXPORT_FUNC std::size_t LVecBase4f_C_add_hash_l_pl(LVecBase4f const *param0, std::size_t param1);
EXPORT_FUNC std::size_t LVecBase4f_C_add_hash_l_plf(LVecBase4f const *param0, std::size_t param1, float param2);
EXPORT_FUNC void LVecBase4f_C_generate_hash_v_pp(LVecBase4f const *param0, ChecksumHashGenerator *param1);
EXPORT_FUNC void LVecBase4f_C_generate_hash_v_ppf(LVecBase4f const *param0, ChecksumHashGenerator *param1, float param2);
EXPORT_FUNC void LVecBase4f_C_componentwise_mult_v_pp(LVecBase4f *param0, LVecBase4f const *param1);
EXPORT_FUNC LVecBase4f * LVecBase4f_C_fmax_p_pp(LVecBase4f const *param0, LVecBase4f const *param1);
EXPORT_FUNC LVecBase4f * LVecBase4f_C_fmin_p_pp(LVecBase4f const *param0, LVecBase4f const *param1);
EXPORT_FUNC bool LVecBase4f_C_almost_equal_B_pp(LVecBase4f const *param0, LVecBase4f const *param1);
EXPORT_FUNC bool LVecBase4f_C_almost_equal_B_ppf(LVecBase4f const *param0, LVecBase4f const *param1, float param2);
EXPORT_FUNC void LVecBase4f_C_output_v_pp(LVecBase4f const *param0, std::ostream *param1);
EXPORT_FUNC void LVecBase4f_C_write_datagram_fixed_v_pp(LVecBase4f const *param0, Datagram *param1);
EXPORT_FUNC void LVecBase4f_C_read_datagram_fixed_v_pp(LVecBase4f *param0, DatagramIterator *param1);
EXPORT_FUNC void LVecBase4f_C_write_datagram_v_pp(LVecBase4f const *param0, Datagram *param1);
EXPORT_FUNC void LVecBase4f_C_read_datagram_v_pp(LVecBase4f *param0, DatagramIterator *param1);
EXPORT_FUNC LVecBase4f::EVector4 * LVecBase4f_C_get_v_p_p(LVecBase4f const *param0);
EXPORT_FUNC int LVecBase4f_C_get_class_type_i_v();
EXPORT_FUNC void LVecBase4f_C_init_type_v_v();


// LVecBase4i

EXPORT_FUNC LVecBase4i * LVecBase4i_C_ctor_p_v();
EXPORT_FUNC LVecBase4i * LVecBase4i_C_ctor_p_p(LPoint3i const *param0);
EXPORT_FUNC LVecBase4i * LVecBase4i_C_ctor_p_pi(LVecBase3i const *param0, int param1);
EXPORT_FUNC LVecBase4i * LVecBase4i_C_ctor_p_p_1_p_p(LVecBase4i const *param0);
EXPORT_FUNC LVecBase4i * LVecBase4i_C_ctor_p_p_1_p_p_2_p_p(LVecBase4i::EVector4 const *param0);
EXPORT_FUNC LVecBase4i * LVecBase4i_C_ctor_p_p_1_p_p_2_p_p_3_p_p(LVector3i const *param0);
EXPORT_FUNC LVecBase4i * LVecBase4i_C_ctor_p_p_1_p_p_2_p_p_3_p_p_4_p_p(UnalignedLVecBase4i const *param0);
EXPORT_FUNC LVecBase4i * LVecBase4i_C_ctor_p_i(int param0);
EXPORT_FUNC LVecBase4i * LVecBase4i_C_ctor_p_iiii(int param0, int param1, int param2, int param3);
EXPORT_FUNC LVecBase4i const * LVecBase4i_C_zero_p_v();
EXPORT_FUNC LVecBase4i const * LVecBase4i_C_unit_x_p_v();
EXPORT_FUNC LVecBase4i const * LVecBase4i_C_unit_y_p_v();
EXPORT_FUNC LVecBase4i const * LVecBase4i_C_unit_z_p_v();
EXPORT_FUNC LVecBase4i const * LVecBase4i_C_unit_w_p_v();
EXPORT_FUNC int LVecBase4i_C_size_i_v();
EXPORT_FUNC bool LVecBase4i_C_is_nan_B_p(LVecBase4i const *param0);
EXPORT_FUNC int LVecBase4i_C_get_cell_i_pi(LVecBase4i const *param0, int param1);
EXPORT_FUNC void LVecBase4i_C_set_cell_v_pii(LVecBase4i *param0, int param1, int param2);
EXPORT_FUNC int LVecBase4i_C_get_x_i_p(LVecBase4i const *param0);
EXPORT_FUNC int LVecBase4i_C_get_y_i_p(LVecBase4i const *param0);
EXPORT_FUNC int LVecBase4i_C_get_z_i_p(LVecBase4i const *param0);
EXPORT_FUNC int LVecBase4i_C_get_w_i_p(LVecBase4i const *param0);
EXPORT_FUNC LVecBase3i * LVecBase4i_C_get_xyz_p_p(LVecBase4i const *param0);
EXPORT_FUNC LVecBase2i * LVecBase4i_C_get_xy_p_p(LVecBase4i const *param0);
EXPORT_FUNC void LVecBase4i_C_set_x_v_pi(LVecBase4i *param0, int param1);
EXPORT_FUNC void LVecBase4i_C_set_y_v_pi(LVecBase4i *param0, int param1);
EXPORT_FUNC void LVecBase4i_C_set_z_v_pi(LVecBase4i *param0, int param1);
EXPORT_FUNC void LVecBase4i_C_set_w_v_pi(LVecBase4i *param0, int param1);
EXPORT_FUNC void LVecBase4i_C_add_to_cell_v_pii(LVecBase4i *param0, int param1, int param2);
EXPORT_FUNC void LVecBase4i_C_add_x_v_pi(LVecBase4i *param0, int param1);
EXPORT_FUNC void LVecBase4i_C_add_y_v_pi(LVecBase4i *param0, int param1);
EXPORT_FUNC void LVecBase4i_C_add_z_v_pi(LVecBase4i *param0, int param1);
EXPORT_FUNC void LVecBase4i_C_add_w_v_pi(LVecBase4i *param0, int param1);
EXPORT_FUNC void LVecBase4i_C_get_data_v_p(LVecBase4i const *param0);
EXPORT_FUNC int LVecBase4i_C_get_num_components_i_v();
EXPORT_FUNC void LVecBase4i_C_begin_v_p(LVecBase4i *param0);
EXPORT_FUNC void LVecBase4i_C_begin_v_p_1_v_p(LVecBase4i const *param0);
EXPORT_FUNC void LVecBase4i_C_end_v_p(LVecBase4i *param0);
EXPORT_FUNC void LVecBase4i_C_end_v_p_1_v_p(LVecBase4i const *param0);
EXPORT_FUNC void LVecBase4i_C_fill_v_pi(LVecBase4i *param0, int param1);
EXPORT_FUNC void LVecBase4i_C_set_v_piiii(LVecBase4i *param0, int param1, int param2, int param3, int param4);
EXPORT_FUNC int LVecBase4i_C_dot_i_pp(LVecBase4i const *param0, LVecBase4i const *param1);
EXPORT_FUNC int LVecBase4i_C_length_squared_i_p(LVecBase4i const *param0);
EXPORT_FUNC int LVecBase4i_C_compare_to_i_pp(LVecBase4i const *param0, LVecBase4i const *param1);
EXPORT_FUNC std::size_t LVecBase4i_C_get_hash_l_p(LVecBase4i const *param0);
EXPORT_FUNC std::size_t LVecBase4i_C_add_hash_l_pl(LVecBase4i const *param0, std::size_t param1);
EXPORT_FUNC void LVecBase4i_C_generate_hash_v_pp(LVecBase4i const *param0, ChecksumHashGenerator *param1);
EXPORT_FUNC void LVecBase4i_C_componentwise_mult_v_pp(LVecBase4i *param0, LVecBase4i const *param1);
EXPORT_FUNC LVecBase4i * LVecBase4i_C_fmax_p_pp(LVecBase4i const *param0, LVecBase4i const *param1);
EXPORT_FUNC LVecBase4i * LVecBase4i_C_fmin_p_pp(LVecBase4i const *param0, LVecBase4i const *param1);
EXPORT_FUNC bool LVecBase4i_C_almost_equal_B_pp(LVecBase4i const *param0, LVecBase4i const *param1);
EXPORT_FUNC bool LVecBase4i_C_almost_equal_B_ppi(LVecBase4i const *param0, LVecBase4i const *param1, int param2);
EXPORT_FUNC void LVecBase4i_C_output_v_pp(LVecBase4i const *param0, std::ostream *param1);
EXPORT_FUNC void LVecBase4i_C_write_datagram_fixed_v_pp(LVecBase4i const *param0, Datagram *param1);
EXPORT_FUNC void LVecBase4i_C_read_datagram_fixed_v_pp(LVecBase4i *param0, DatagramIterator *param1);
EXPORT_FUNC void LVecBase4i_C_write_datagram_v_pp(LVecBase4i const *param0, Datagram *param1);
EXPORT_FUNC void LVecBase4i_C_read_datagram_v_pp(LVecBase4i *param0, DatagramIterator *param1);
EXPORT_FUNC LVecBase4i::EVector4 * LVecBase4i_C_get_v_p_p(LVecBase4i const *param0);
EXPORT_FUNC int LVecBase4i_C_get_class_type_i_v();
EXPORT_FUNC void LVecBase4i_C_init_type_v_v();


// LVector2d

EXPORT_FUNC LVector2d * LVector2d_C_ctor_p_v();
EXPORT_FUNC LVector2d * LVector2d_C_ctor_p_p(LVecBase2d const *param0);
EXPORT_FUNC LVector2d * LVector2d_C_ctor_p_p_1_p_p(LVector2d const *param0);
EXPORT_FUNC LVector2d * LVector2d_C_ctor_p_d(double param0);
EXPORT_FUNC LVector2d * LVector2d_C_ctor_p_dd(double param0, double param1);
EXPORT_FUNC LVector2d const * LVector2d_C_zero_p_v();
EXPORT_FUNC LVector2d const * LVector2d_C_unit_x_p_v();
EXPORT_FUNC LVector2d const * LVector2d_C_unit_y_p_v();
EXPORT_FUNC LVector2d * LVector2d_C_normalized_p_p(LVector2d const *param0);
EXPORT_FUNC LVector2d * LVector2d_C_project_p_pp(LVector2d const *param0, LVecBase2d const *param1);
EXPORT_FUNC double LVector2d_C_signed_angle_rad_d_pp(LVector2d const *param0, LVector2d const *param1);
EXPORT_FUNC double LVector2d_C_signed_angle_deg_d_pp(LVector2d const *param0, LVector2d const *param1);
EXPORT_FUNC int LVector2d_C_get_class_type_i_v();
EXPORT_FUNC void LVector2d_C_init_type_v_v();


// LVector2f

EXPORT_FUNC LVector2f * LVector2f_C_ctor_p_v();
EXPORT_FUNC LVector2f * LVector2f_C_ctor_p_p(LVecBase2f const *param0);
EXPORT_FUNC LVector2f * LVector2f_C_ctor_p_p_1_p_p(LVector2f const *param0);
EXPORT_FUNC LVector2f * LVector2f_C_ctor_p_f(float param0);
EXPORT_FUNC LVector2f * LVector2f_C_ctor_p_ff(float param0, float param1);
EXPORT_FUNC LVector2f const * LVector2f_C_zero_p_v();
EXPORT_FUNC LVector2f const * LVector2f_C_unit_x_p_v();
EXPORT_FUNC LVector2f const * LVector2f_C_unit_y_p_v();
EXPORT_FUNC LVector2f * LVector2f_C_normalized_p_p(LVector2f const *param0);
EXPORT_FUNC LVector2f * LVector2f_C_project_p_pp(LVector2f const *param0, LVecBase2f const *param1);
EXPORT_FUNC float LVector2f_C_signed_angle_rad_f_pp(LVector2f const *param0, LVector2f const *param1);
EXPORT_FUNC float LVector2f_C_signed_angle_deg_f_pp(LVector2f const *param0, LVector2f const *param1);
EXPORT_FUNC int LVector2f_C_get_class_type_i_v();
EXPORT_FUNC void LVector2f_C_init_type_v_v();


// LVector2i

EXPORT_FUNC LVector2i * LVector2i_C_ctor_p_v();
EXPORT_FUNC LVector2i * LVector2i_C_ctor_p_p(LVecBase2i const *param0);
EXPORT_FUNC LVector2i * LVector2i_C_ctor_p_p_1_p_p(LVector2i const *param0);
EXPORT_FUNC LVector2i * LVector2i_C_ctor_p_i(int param0);
EXPORT_FUNC LVector2i * LVector2i_C_ctor_p_ii(int param0, int param1);
EXPORT_FUNC LVector2i const * LVector2i_C_zero_p_v();
EXPORT_FUNC LVector2i const * LVector2i_C_unit_x_p_v();
EXPORT_FUNC LVector2i const * LVector2i_C_unit_y_p_v();
EXPORT_FUNC int LVector2i_C_get_class_type_i_v();
EXPORT_FUNC void LVector2i_C_init_type_v_v();


// LVector3d

EXPORT_FUNC LVector3d * LVector3d_C_ctor_p_v();
EXPORT_FUNC LVector3d * LVector3d_C_ctor_p_pd(LVecBase2d const *param0, double param1);
EXPORT_FUNC LVector3d * LVector3d_C_ctor_p_p(LVecBase3d const *param0);
EXPORT_FUNC LVector3d * LVector3d_C_ctor_p_p_1_p_p(LVector3d const *param0);
EXPORT_FUNC LVector3d * LVector3d_C_ctor_p_d(double param0);
EXPORT_FUNC LVector3d * LVector3d_C_ctor_p_ddd(double param0, double param1, double param2);
EXPORT_FUNC LVector3d const * LVector3d_C_zero_p_v();
EXPORT_FUNC LVector3d const * LVector3d_C_unit_x_p_v();
EXPORT_FUNC LVector3d const * LVector3d_C_unit_y_p_v();
EXPORT_FUNC LVector3d const * LVector3d_C_unit_z_p_v();
EXPORT_FUNC LVector2d * LVector3d_C_get_xy_p_p(LVector3d const *param0);
EXPORT_FUNC LVector2d * LVector3d_C_get_xz_p_p(LVector3d const *param0);
EXPORT_FUNC LVector2d * LVector3d_C_get_yz_p_p(LVector3d const *param0);
EXPORT_FUNC LVector3d * LVector3d_C_cross_p_pp(LVector3d const *param0, LVecBase3d const *param1);
EXPORT_FUNC LVector3d * LVector3d_C_normalized_p_p(LVector3d const *param0);
EXPORT_FUNC LVector3d * LVector3d_C_project_p_pp(LVector3d const *param0, LVecBase3d const *param1);
EXPORT_FUNC double LVector3d_C_angle_rad_d_pp(LVector3d const *param0, LVector3d const *param1);
EXPORT_FUNC double LVector3d_C_angle_deg_d_pp(LVector3d const *param0, LVector3d const *param1);
EXPORT_FUNC double LVector3d_C_signed_angle_rad_d_ppp(LVector3d const *param0, LVector3d const *param1, LVector3d const *param2);
EXPORT_FUNC double LVector3d_C_signed_angle_deg_d_ppp(LVector3d const *param0, LVector3d const *param1, LVector3d const *param2);
EXPORT_FUNC double LVector3d_C_relative_angle_rad_d_pp(LVector3d const *param0, LVector3d const *param1);
EXPORT_FUNC double LVector3d_C_relative_angle_deg_d_pp(LVector3d const *param0, LVector3d const *param1);
EXPORT_FUNC LVector3d * LVector3d_C_up_p_p(CoordinateSystem param0);
EXPORT_FUNC LVector3d * LVector3d_C_up_p_v();
EXPORT_FUNC LVector3d * LVector3d_C_right_p_p(CoordinateSystem param0);
EXPORT_FUNC LVector3d * LVector3d_C_right_p_v();
EXPORT_FUNC LVector3d * LVector3d_C_forward_p_p(CoordinateSystem param0);
EXPORT_FUNC LVector3d * LVector3d_C_forward_p_v();
EXPORT_FUNC LVector3d * LVector3d_C_down_p_p(CoordinateSystem param0);
EXPORT_FUNC LVector3d * LVector3d_C_down_p_v();
EXPORT_FUNC LVector3d * LVector3d_C_left_p_p(CoordinateSystem param0);
EXPORT_FUNC LVector3d * LVector3d_C_left_p_v();
EXPORT_FUNC LVector3d * LVector3d_C_back_p_p(CoordinateSystem param0);
EXPORT_FUNC LVector3d * LVector3d_C_back_p_v();
EXPORT_FUNC LVector3d * LVector3d_C_rfu_p_dddp(double param0, double param1, double param2, CoordinateSystem param3);
EXPORT_FUNC LVector3d * LVector3d_C_rfu_p_ddd(double param0, double param1, double param2);
EXPORT_FUNC int LVector3d_C_get_class_type_i_v();
EXPORT_FUNC void LVector3d_C_init_type_v_v();


// LVector3f

EXPORT_FUNC LVector3f * LVector3f_C_ctor_p_v();
EXPORT_FUNC LVector3f * LVector3f_C_ctor_p_pf(LVecBase2f const *param0, float param1);
EXPORT_FUNC LVector3f * LVector3f_C_ctor_p_p(LVecBase3f const *param0);
EXPORT_FUNC LVector3f * LVector3f_C_ctor_p_p_1_p_p(LVector3f const *param0);
EXPORT_FUNC LVector3f * LVector3f_C_ctor_p_f(float param0);
EXPORT_FUNC LVector3f * LVector3f_C_ctor_p_fff(float param0, float param1, float param2);
EXPORT_FUNC LVector3f const * LVector3f_C_zero_p_v();
EXPORT_FUNC LVector3f const * LVector3f_C_unit_x_p_v();
EXPORT_FUNC LVector3f const * LVector3f_C_unit_y_p_v();
EXPORT_FUNC LVector3f const * LVector3f_C_unit_z_p_v();
EXPORT_FUNC LVector2f * LVector3f_C_get_xy_p_p(LVector3f const *param0);
EXPORT_FUNC LVector2f * LVector3f_C_get_xz_p_p(LVector3f const *param0);
EXPORT_FUNC LVector2f * LVector3f_C_get_yz_p_p(LVector3f const *param0);
EXPORT_FUNC LVector3f * LVector3f_C_cross_p_pp(LVector3f const *param0, LVecBase3f const *param1);
EXPORT_FUNC LVector3f * LVector3f_C_normalized_p_p(LVector3f const *param0);
EXPORT_FUNC LVector3f * LVector3f_C_project_p_pp(LVector3f const *param0, LVecBase3f const *param1);
EXPORT_FUNC float LVector3f_C_angle_rad_f_pp(LVector3f const *param0, LVector3f const *param1);
EXPORT_FUNC float LVector3f_C_angle_deg_f_pp(LVector3f const *param0, LVector3f const *param1);
EXPORT_FUNC float LVector3f_C_signed_angle_rad_f_ppp(LVector3f const *param0, LVector3f const *param1, LVector3f const *param2);
EXPORT_FUNC float LVector3f_C_signed_angle_deg_f_ppp(LVector3f const *param0, LVector3f const *param1, LVector3f const *param2);
EXPORT_FUNC float LVector3f_C_relative_angle_rad_f_pp(LVector3f const *param0, LVector3f const *param1);
EXPORT_FUNC float LVector3f_C_relative_angle_deg_f_pp(LVector3f const *param0, LVector3f const *param1);
EXPORT_FUNC LVector3f * LVector3f_C_up_p_p(CoordinateSystem param0);
EXPORT_FUNC LVector3f * LVector3f_C_up_p_v();
EXPORT_FUNC LVector3f * LVector3f_C_right_p_p(CoordinateSystem param0);
EXPORT_FUNC LVector3f * LVector3f_C_right_p_v();
EXPORT_FUNC LVector3f * LVector3f_C_forward_p_p(CoordinateSystem param0);
EXPORT_FUNC LVector3f * LVector3f_C_forward_p_v();
EXPORT_FUNC LVector3f * LVector3f_C_down_p_p(CoordinateSystem param0);
EXPORT_FUNC LVector3f * LVector3f_C_down_p_v();
EXPORT_FUNC LVector3f * LVector3f_C_left_p_p(CoordinateSystem param0);
EXPORT_FUNC LVector3f * LVector3f_C_left_p_v();
EXPORT_FUNC LVector3f * LVector3f_C_back_p_p(CoordinateSystem param0);
EXPORT_FUNC LVector3f * LVector3f_C_back_p_v();
EXPORT_FUNC LVector3f * LVector3f_C_rfu_p_fffp(float param0, float param1, float param2, CoordinateSystem param3);
EXPORT_FUNC LVector3f * LVector3f_C_rfu_p_fff(float param0, float param1, float param2);
EXPORT_FUNC int LVector3f_C_get_class_type_i_v();
EXPORT_FUNC void LVector3f_C_init_type_v_v();


// LVector3i

EXPORT_FUNC LVector3i * LVector3i_C_ctor_p_v();
EXPORT_FUNC LVector3i * LVector3i_C_ctor_p_pi(LVecBase2i const *param0, int param1);
EXPORT_FUNC LVector3i * LVector3i_C_ctor_p_p(LVecBase3i const *param0);
EXPORT_FUNC LVector3i * LVector3i_C_ctor_p_p_1_p_p(LVector3i const *param0);
EXPORT_FUNC LVector3i * LVector3i_C_ctor_p_i(int param0);
EXPORT_FUNC LVector3i * LVector3i_C_ctor_p_iii(int param0, int param1, int param2);
EXPORT_FUNC LVector3i const * LVector3i_C_zero_p_v();
EXPORT_FUNC LVector3i const * LVector3i_C_unit_x_p_v();
EXPORT_FUNC LVector3i const * LVector3i_C_unit_y_p_v();
EXPORT_FUNC LVector3i const * LVector3i_C_unit_z_p_v();
EXPORT_FUNC LVector2i * LVector3i_C_get_xy_p_p(LVector3i const *param0);
EXPORT_FUNC LVector2i * LVector3i_C_get_xz_p_p(LVector3i const *param0);
EXPORT_FUNC LVector2i * LVector3i_C_get_yz_p_p(LVector3i const *param0);
EXPORT_FUNC LVector3i * LVector3i_C_cross_p_pp(LVector3i const *param0, LVecBase3i const *param1);
EXPORT_FUNC LVector3i * LVector3i_C_up_p_p(CoordinateSystem param0);
EXPORT_FUNC LVector3i * LVector3i_C_up_p_v();
EXPORT_FUNC LVector3i * LVector3i_C_right_p_p(CoordinateSystem param0);
EXPORT_FUNC LVector3i * LVector3i_C_right_p_v();
EXPORT_FUNC LVector3i * LVector3i_C_forward_p_p(CoordinateSystem param0);
EXPORT_FUNC LVector3i * LVector3i_C_forward_p_v();
EXPORT_FUNC LVector3i * LVector3i_C_down_p_p(CoordinateSystem param0);
EXPORT_FUNC LVector3i * LVector3i_C_down_p_v();
EXPORT_FUNC LVector3i * LVector3i_C_left_p_p(CoordinateSystem param0);
EXPORT_FUNC LVector3i * LVector3i_C_left_p_v();
EXPORT_FUNC LVector3i * LVector3i_C_back_p_p(CoordinateSystem param0);
EXPORT_FUNC LVector3i * LVector3i_C_back_p_v();
EXPORT_FUNC LVector3i * LVector3i_C_rfu_p_iiip(int param0, int param1, int param2, CoordinateSystem param3);
EXPORT_FUNC LVector3i * LVector3i_C_rfu_p_iii(int param0, int param1, int param2);
EXPORT_FUNC int LVector3i_C_get_class_type_i_v();
EXPORT_FUNC void LVector3i_C_init_type_v_v();


// LVector4d

EXPORT_FUNC LVector4d * LVector4d_C_ctor_p_v();
EXPORT_FUNC LVector4d * LVector4d_C_ctor_p_pd(LVecBase3d const *param0, double param1);
EXPORT_FUNC LVector4d * LVector4d_C_ctor_p_p(LVecBase4d const *param0);
EXPORT_FUNC LVector4d * LVector4d_C_ctor_p_p_1_p_p(LVector4d const *param0);
EXPORT_FUNC LVector4d * LVector4d_C_ctor_p_d(double param0);
EXPORT_FUNC LVector4d * LVector4d_C_ctor_p_dddd(double param0, double param1, double param2, double param3);
EXPORT_FUNC LVector4d const * LVector4d_C_zero_p_v();
EXPORT_FUNC LVector4d const * LVector4d_C_unit_x_p_v();
EXPORT_FUNC LVector4d const * LVector4d_C_unit_y_p_v();
EXPORT_FUNC LVector4d const * LVector4d_C_unit_z_p_v();
EXPORT_FUNC LVector4d const * LVector4d_C_unit_w_p_v();
EXPORT_FUNC LVector3d * LVector4d_C_get_xyz_p_p(LVector4d const *param0);
EXPORT_FUNC LVector2d * LVector4d_C_get_xy_p_p(LVector4d const *param0);
EXPORT_FUNC LVector4d * LVector4d_C_normalized_p_p(LVector4d const *param0);
EXPORT_FUNC LVector4d * LVector4d_C_project_p_pp(LVector4d const *param0, LVecBase4d const *param1);
EXPORT_FUNC int LVector4d_C_get_class_type_i_v();
EXPORT_FUNC void LVector4d_C_init_type_v_v();


// LVector4f

EXPORT_FUNC LVector4f * LVector4f_C_ctor_p_v();
EXPORT_FUNC LVector4f * LVector4f_C_ctor_p_pf(LVecBase3f const *param0, float param1);
EXPORT_FUNC LVector4f * LVector4f_C_ctor_p_p(LVecBase4f const *param0);
EXPORT_FUNC LVector4f * LVector4f_C_ctor_p_p_1_p_p(LVector4f const *param0);
EXPORT_FUNC LVector4f * LVector4f_C_ctor_p_f(float param0);
EXPORT_FUNC LVector4f * LVector4f_C_ctor_p_ffff(float param0, float param1, float param2, float param3);
EXPORT_FUNC LVector4f const * LVector4f_C_zero_p_v();
EXPORT_FUNC LVector4f const * LVector4f_C_unit_x_p_v();
EXPORT_FUNC LVector4f const * LVector4f_C_unit_y_p_v();
EXPORT_FUNC LVector4f const * LVector4f_C_unit_z_p_v();
EXPORT_FUNC LVector4f const * LVector4f_C_unit_w_p_v();
EXPORT_FUNC LVector3f * LVector4f_C_get_xyz_p_p(LVector4f const *param0);
EXPORT_FUNC LVector2f * LVector4f_C_get_xy_p_p(LVector4f const *param0);
EXPORT_FUNC LVector4f * LVector4f_C_normalized_p_p(LVector4f const *param0);
EXPORT_FUNC LVector4f * LVector4f_C_project_p_pp(LVector4f const *param0, LVecBase4f const *param1);
EXPORT_FUNC int LVector4f_C_get_class_type_i_v();
EXPORT_FUNC void LVector4f_C_init_type_v_v();


// LVector4i

EXPORT_FUNC LVector4i * LVector4i_C_ctor_p_v();
EXPORT_FUNC LVector4i * LVector4i_C_ctor_p_pi(LVecBase3i const *param0, int param1);
EXPORT_FUNC LVector4i * LVector4i_C_ctor_p_p(LVecBase4i const *param0);
EXPORT_FUNC LVector4i * LVector4i_C_ctor_p_p_1_p_p(LVector4i const *param0);
EXPORT_FUNC LVector4i * LVector4i_C_ctor_p_i(int param0);
EXPORT_FUNC LVector4i * LVector4i_C_ctor_p_iiii(int param0, int param1, int param2, int param3);
EXPORT_FUNC LVector4i const * LVector4i_C_zero_p_v();
EXPORT_FUNC LVector4i const * LVector4i_C_unit_x_p_v();
EXPORT_FUNC LVector4i const * LVector4i_C_unit_y_p_v();
EXPORT_FUNC LVector4i const * LVector4i_C_unit_z_p_v();
EXPORT_FUNC LVector4i const * LVector4i_C_unit_w_p_v();
EXPORT_FUNC LVector3i * LVector4i_C_get_xyz_p_p(LVector4i const *param0);
EXPORT_FUNC LVector2i * LVector4i_C_get_xy_p_p(LVector4i const *param0);
EXPORT_FUNC int LVector4i_C_get_class_type_i_v();
EXPORT_FUNC void LVector4i_C_init_type_v_v();


// Lens

EXPORT_FUNC PointerTo< Lens > * Lens_C_make_copy_p_p(Lens const *param0);
EXPORT_FUNC bool Lens_C_extrude_B_pppp(Lens const *param0, LPoint2 const *param1, LPoint3 *param2, LPoint3 *param3);
EXPORT_FUNC bool Lens_C_extrude_B_pppp_1_B_pppp(Lens const *param0, LPoint3 const *param1, LPoint3 *param2, LPoint3 *param3);
EXPORT_FUNC bool Lens_C_extrude_depth_B_ppp(Lens const *param0, LPoint3 const *param1, LPoint3 *param2);
EXPORT_FUNC bool Lens_C_extrude_vec_B_ppp(Lens const *param0, LPoint2 const *param1, LVector3 *param2);
EXPORT_FUNC bool Lens_C_extrude_vec_B_ppp_1_B_ppp(Lens const *param0, LPoint3 const *param1, LVector3 *param2);
EXPORT_FUNC bool Lens_C_project_B_ppp(Lens const *param0, LPoint3 const *param1, LPoint2 *param2);
EXPORT_FUNC bool Lens_C_project_B_ppp_1_B_ppp(Lens const *param0, LPoint3 const *param1, LPoint3 *param2);
EXPORT_FUNC void Lens_C_set_change_event_v_ps(Lens *param0, char const *param1);
EXPORT_FUNC char const * Lens_C_get_change_event_s_p(Lens const *param0);
EXPORT_FUNC void Lens_C_set_coordinate_system_v_pp(Lens *param0, CoordinateSystem param1);
EXPORT_FUNC CoordinateSystem Lens_C_get_coordinate_system_p_p(Lens const *param0);
EXPORT_FUNC void Lens_C_clear_v_p(Lens *param0);
EXPORT_FUNC void Lens_C_set_film_size_v_pp(Lens *param0, LVecBase2 const *param1);
EXPORT_FUNC void Lens_C_set_film_size_v_pf(Lens *param0, PN_stdfloat param1);
EXPORT_FUNC void Lens_C_set_film_size_v_pff(Lens *param0, PN_stdfloat param1, PN_stdfloat param2);
EXPORT_FUNC LVecBase2 const * Lens_C_get_film_size_p_p(Lens const *param0);
EXPORT_FUNC void Lens_C_set_film_offset_v_pp(Lens *param0, LVecBase2 const *param1);
EXPORT_FUNC void Lens_C_set_film_offset_v_pff(Lens *param0, PN_stdfloat param1, PN_stdfloat param2);
EXPORT_FUNC LVector2 const * Lens_C_get_film_offset_p_p(Lens const *param0);
EXPORT_FUNC void Lens_C_set_focal_length_v_pf(Lens *param0, PN_stdfloat param1);
EXPORT_FUNC PN_stdfloat Lens_C_get_focal_length_f_p(Lens const *param0);
EXPORT_FUNC void Lens_C_set_min_fov_v_pf(Lens *param0, PN_stdfloat param1);
EXPORT_FUNC void Lens_C_set_fov_v_pp(Lens *param0, LVecBase2 const *param1);
EXPORT_FUNC void Lens_C_set_fov_v_pf(Lens *param0, PN_stdfloat param1);
EXPORT_FUNC void Lens_C_set_fov_v_pff(Lens *param0, PN_stdfloat param1, PN_stdfloat param2);
EXPORT_FUNC LVecBase2 const * Lens_C_get_fov_p_p(Lens const *param0);
EXPORT_FUNC PN_stdfloat Lens_C_get_hfov_f_p(Lens const *param0);
EXPORT_FUNC PN_stdfloat Lens_C_get_vfov_f_p(Lens const *param0);
EXPORT_FUNC PN_stdfloat Lens_C_get_min_fov_f_p(Lens const *param0);
EXPORT_FUNC void Lens_C_set_aspect_ratio_v_pf(Lens *param0, PN_stdfloat param1);
EXPORT_FUNC PN_stdfloat Lens_C_get_aspect_ratio_f_p(Lens const *param0);
EXPORT_FUNC void Lens_C_set_near_v_pf(Lens *param0, PN_stdfloat param1);
EXPORT_FUNC PN_stdfloat Lens_C_get_near_f_p(Lens const *param0);
EXPORT_FUNC void Lens_C_set_far_v_pf(Lens *param0, PN_stdfloat param1);
EXPORT_FUNC PN_stdfloat Lens_C_get_far_f_p(Lens const *param0);
EXPORT_FUNC void Lens_C_set_near_far_v_pff(Lens *param0, PN_stdfloat param1, PN_stdfloat param2);
EXPORT_FUNC PN_stdfloat Lens_C_get_default_near_f_v();
EXPORT_FUNC PN_stdfloat Lens_C_get_default_far_f_v();
EXPORT_FUNC void Lens_C_set_view_hpr_v_pp(Lens *param0, LVecBase3 const *param1);
EXPORT_FUNC void Lens_C_set_view_hpr_v_pfff(Lens *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3);
EXPORT_FUNC LVecBase3 const * Lens_C_get_view_hpr_p_p(Lens const *param0);
EXPORT_FUNC void Lens_C_set_view_vector_v_ppp(Lens *param0, LVector3 const *param1, LVector3 const *param2);
EXPORT_FUNC void Lens_C_set_view_vector_v_pffffff(Lens *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5, PN_stdfloat param6);
EXPORT_FUNC LVector3 const * Lens_C_get_view_vector_p_p(Lens const *param0);
EXPORT_FUNC LVector3 const * Lens_C_get_up_vector_p_p(Lens const *param0);
EXPORT_FUNC LPoint3 * Lens_C_get_nodal_point_p_p(Lens const *param0);
EXPORT_FUNC void Lens_C_set_interocular_distance_v_pf(Lens *param0, PN_stdfloat param1);
EXPORT_FUNC PN_stdfloat Lens_C_get_interocular_distance_f_p(Lens const *param0);
EXPORT_FUNC void Lens_C_set_convergence_distance_v_pf(Lens *param0, PN_stdfloat param1);
EXPORT_FUNC PN_stdfloat Lens_C_get_convergence_distance_f_p(Lens const *param0);
EXPORT_FUNC void Lens_C_set_view_mat_v_pp(Lens *param0, LMatrix4 const *param1);
EXPORT_FUNC LMatrix4 const * Lens_C_get_view_mat_p_p(Lens const *param0);
EXPORT_FUNC void Lens_C_clear_view_mat_v_p(Lens *param0);
EXPORT_FUNC void Lens_C_set_keystone_v_pp(Lens *param0, LVecBase2 const *param1);
EXPORT_FUNC LVecBase2 const * Lens_C_get_keystone_p_p(Lens const *param0);
EXPORT_FUNC void Lens_C_clear_keystone_v_p(Lens *param0);
EXPORT_FUNC void Lens_C_set_custom_film_mat_v_pp(Lens *param0, LMatrix4 const *param1);
EXPORT_FUNC LMatrix4 const * Lens_C_get_custom_film_mat_p_p(Lens const *param0);
EXPORT_FUNC void Lens_C_clear_custom_film_mat_v_p(Lens *param0);
EXPORT_FUNC void Lens_C_set_frustum_from_corners_v_pppppi(Lens *param0, LVecBase3 const *param1, LVecBase3 const *param2, LVecBase3 const *param3, LVecBase3 const *param4, int param5);
EXPORT_FUNC void Lens_C_recompute_all_v_p(Lens *param0);
EXPORT_FUNC bool Lens_C_is_linear_B_p(Lens const *param0);
EXPORT_FUNC bool Lens_C_is_perspective_B_p(Lens const *param0);
EXPORT_FUNC bool Lens_C_is_orthographic_B_p(Lens const *param0);
EXPORT_FUNC PointerTo< Geom > * Lens_C_make_geometry_p_p(Lens *param0);
EXPORT_FUNC PointerTo< BoundingVolume > * Lens_C_make_bounds_p_p(Lens const *param0);
EXPORT_FUNC LMatrix4 const * Lens_C_get_projection_mat_p_pp(Lens const *param0, Lens::StereoChannel param1);
EXPORT_FUNC LMatrix4 const * Lens_C_get_projection_mat_p_p(Lens const *param0);
EXPORT_FUNC LMatrix4 const * Lens_C_get_projection_mat_inv_p_pp(Lens const *param0, Lens::StereoChannel param1);
EXPORT_FUNC LMatrix4 const * Lens_C_get_projection_mat_inv_p_p(Lens const *param0);
EXPORT_FUNC LMatrix4 const * Lens_C_get_film_mat_p_p(Lens const *param0);
EXPORT_FUNC LMatrix4 const * Lens_C_get_film_mat_inv_p_p(Lens const *param0);
EXPORT_FUNC LMatrix4 const * Lens_C_get_lens_mat_p_p(Lens const *param0);
EXPORT_FUNC LMatrix4 const * Lens_C_get_lens_mat_inv_p_p(Lens const *param0);
EXPORT_FUNC void Lens_C_output_v_pp(Lens const *param0, std::ostream *param1);
EXPORT_FUNC void Lens_C_write_v_ppi(Lens const *param0, std::ostream *param1, int param2);
EXPORT_FUNC void Lens_C_write_v_pp(Lens const *param0, std::ostream *param1);
EXPORT_FUNC UpdateSeq * Lens_C_get_last_change_p_p(Lens const *param0);
EXPORT_FUNC void Lens_C_write_datagram_v_ppp(Lens *param0, BamWriter *param1, Datagram *param2);
EXPORT_FUNC int Lens_C_get_type_i_p(Lens const *param0);
EXPORT_FUNC int Lens_C_force_init_type_i_p(Lens *param0);
EXPORT_FUNC int Lens_C_get_class_type_i_v();
EXPORT_FUNC void Lens_C_init_type_v_v();


// LensNode

EXPORT_FUNC LensNode * LensNode_C_ctor_p_sp(char const *param0, Lens *param1);
EXPORT_FUNC LensNode * LensNode_C_ctor_p_s(char const *param0);
EXPORT_FUNC void LensNode_C_xform_v_pp(LensNode *param0, LMatrix4 const *param1);
EXPORT_FUNC void LensNode_C_copy_lens_v_pp(LensNode *param0, Lens const *param1);
EXPORT_FUNC void LensNode_C_copy_lens_v_pip(LensNode *param0, int param1, Lens const *param2);
EXPORT_FUNC void LensNode_C_set_lens_v_pp(LensNode *param0, Lens *param1);
EXPORT_FUNC void LensNode_C_set_lens_v_pip(LensNode *param0, int param1, Lens *param2);
EXPORT_FUNC Lens * LensNode_C_get_lens_p_pi(LensNode const *param0, int param1);
EXPORT_FUNC Lens * LensNode_C_get_lens_p_p(LensNode const *param0);
EXPORT_FUNC bool LensNode_C_set_lens_active_B_piB(LensNode *param0, int param1, bool param2);
EXPORT_FUNC bool LensNode_C_get_lens_active_B_pi(LensNode const *param0, int param1);
EXPORT_FUNC bool LensNode_C_activate_lens_B_pi(LensNode *param0, int param1);
EXPORT_FUNC bool LensNode_C_deactivate_lens_B_pi(LensNode *param0, int param1);
EXPORT_FUNC bool LensNode_C_is_in_view_B_pp(LensNode *param0, LPoint3 const *param1);
EXPORT_FUNC bool LensNode_C_is_in_view_B_pip(LensNode *param0, int param1, LPoint3 const *param2);
EXPORT_FUNC void LensNode_C_show_frustum_v_p(LensNode *param0);
EXPORT_FUNC void LensNode_C_hide_frustum_v_p(LensNode *param0);
EXPORT_FUNC void LensNode_C_register_with_read_factory_v_v();
EXPORT_FUNC void LensNode_C_write_datagram_v_ppp(LensNode *param0, BamWriter *param1, Datagram *param2);
EXPORT_FUNC int LensNode_C_get_class_type_i_v();
EXPORT_FUNC void LensNode_C_init_type_v_v();
EXPORT_FUNC int LensNode_C_get_type_i_p(LensNode const *param0);
EXPORT_FUNC int LensNode_C_force_init_type_i_p(LensNode *param0);


// LinkedListNode

EXPORT_FUNC PandaNode * LinkedListNode_C_downcast_to_PandaNode_p_p(LinkedListNode *param0);


// Loader

EXPORT_FUNC TypedReferenceCount * Loader_C_upcast_to_TypedReferenceCount_p_p(Loader *param0);
EXPORT_FUNC Namable * Loader_C_upcast_to_Namable_p_p(Loader *param0);
EXPORT_FUNC Loader * Loader_C_ctor_p_p(Loader const *param0);
EXPORT_FUNC Loader * Loader_C_ctor_p_s(char const *param0);
EXPORT_FUNC Loader * Loader_C_ctor_p_v();
EXPORT_FUNC void Loader_C_set_task_manager_v_pp(Loader *param0, AsyncTaskManager *param1);
EXPORT_FUNC AsyncTaskManager * Loader_C_get_task_manager_p_p(Loader const *param0);
EXPORT_FUNC void Loader_C_set_task_chain_v_ps(Loader *param0, char const *param1);
EXPORT_FUNC char const * Loader_C_get_task_chain_s_p(Loader const *param0);
EXPORT_FUNC void Loader_C_stop_threads_v_p(Loader *param0);
EXPORT_FUNC bool Loader_C_remove_B_pp(Loader *param0, AsyncTask *param1);
EXPORT_FUNC PointerTo< PandaNode > * Loader_C_load_sync_p_ppp(Loader const *param0, Filename const *param1, LoaderOptions const *param2);
EXPORT_FUNC PointerTo< PandaNode > * Loader_C_load_sync_p_pp(Loader const *param0, Filename const *param1);
EXPORT_FUNC PointerTo< AsyncTask > * Loader_C_make_async_request_p_ppp(Loader *param0, Filename const *param1, LoaderOptions const *param2);
EXPORT_FUNC PointerTo< AsyncTask > * Loader_C_make_async_request_p_pp(Loader *param0, Filename const *param1);
EXPORT_FUNC void Loader_C_load_async_v_pp(Loader *param0, AsyncTask *param1);
EXPORT_FUNC bool Loader_C_save_sync_B_pppp(Loader const *param0, Filename const *param1, LoaderOptions const *param2, PandaNode *param3);
EXPORT_FUNC PointerTo< AsyncTask > * Loader_C_make_async_save_request_p_pppp(Loader *param0, Filename const *param1, LoaderOptions const *param2, PandaNode *param3);
EXPORT_FUNC void Loader_C_save_async_v_pp(Loader *param0, AsyncTask *param1);
EXPORT_FUNC PointerTo< PandaNode > * Loader_C_load_bam_stream_p_pp(Loader *param0, std::istream *param1);
EXPORT_FUNC void Loader_C_output_v_pp(Loader const *param0, std::ostream *param1);
EXPORT_FUNC Loader * Loader_C_get_global_ptr_p_v();
EXPORT_FUNC int Loader_C_get_class_type_i_v();
EXPORT_FUNC void Loader_C_init_type_v_v();
EXPORT_FUNC int Loader_C_get_type_i_p(Loader const *param0);
EXPORT_FUNC int Loader_C_force_init_type_i_p(Loader *param0);


// LoaderOptions

EXPORT_FUNC LoaderOptions * LoaderOptions_C_ctor_p_p(LoaderOptions const *param0);
EXPORT_FUNC LoaderOptions * LoaderOptions_C_ctor_p_i(int param0);
EXPORT_FUNC LoaderOptions * LoaderOptions_C_ctor_p_v();
EXPORT_FUNC LoaderOptions * LoaderOptions_C_ctor_p_ii(int param0, int param1);
EXPORT_FUNC void LoaderOptions_C_set_flags_v_pi(LoaderOptions *param0, int param1);
EXPORT_FUNC int LoaderOptions_C_get_flags_i_p(LoaderOptions const *param0);
EXPORT_FUNC void LoaderOptions_C_set_texture_flags_v_pi(LoaderOptions *param0, int param1);
EXPORT_FUNC int LoaderOptions_C_get_texture_flags_i_p(LoaderOptions const *param0);
EXPORT_FUNC void LoaderOptions_C_set_texture_num_views_v_pi(LoaderOptions *param0, int param1);
EXPORT_FUNC int LoaderOptions_C_get_texture_num_views_i_p(LoaderOptions const *param0);
EXPORT_FUNC void LoaderOptions_C_set_auto_texture_scale_v_pp(LoaderOptions *param0, AutoTextureScale param1);
EXPORT_FUNC AutoTextureScale LoaderOptions_C_get_auto_texture_scale_p_p(LoaderOptions const *param0);
EXPORT_FUNC void LoaderOptions_C_output_v_pp(LoaderOptions const *param0, std::ostream *param1);


// MemoryBase

EXPORT_FUNC MemoryBase * MemoryBase_C_ctor_p_v();
EXPORT_FUNC MemoryBase * MemoryBase_C_ctor_p_p(MemoryBase const *param0);
EXPORT_FUNC ReferenceCount * MemoryBase_C_downcast_to_ReferenceCount_p_p(MemoryBase *param0);
EXPORT_FUNC TypedObject * MemoryBase_C_downcast_to_TypedObject_p_p(MemoryBase *param0);


// Namable

EXPORT_FUNC PandaNode * Namable_C_downcast_to_PandaNode_p_p(Namable *param0);
EXPORT_FUNC Loader * Namable_C_downcast_to_Loader_p_p(Namable *param0);
EXPORT_FUNC TextFont * Namable_C_downcast_to_TextFont_p_p(Namable *param0);
EXPORT_FUNC Texture * Namable_C_downcast_to_Texture_p_p(Namable *param0);
EXPORT_FUNC Thread * Namable_C_downcast_to_Thread_p_p(Namable *param0);


// NodeCachedReferenceCount

EXPORT_FUNC int NodeCachedReferenceCount_C_get_node_ref_count_i_p(NodeCachedReferenceCount const *param0);
EXPORT_FUNC void NodeCachedReferenceCount_C_node_ref_v_p(NodeCachedReferenceCount const *param0);
EXPORT_FUNC bool NodeCachedReferenceCount_C_node_unref_B_p(NodeCachedReferenceCount const *param0);
EXPORT_FUNC bool NodeCachedReferenceCount_C_test_ref_count_integrity_B_p(NodeCachedReferenceCount const *param0);
EXPORT_FUNC int NodeCachedReferenceCount_C_get_referenced_bits_i_p(NodeCachedReferenceCount const *param0);
EXPORT_FUNC int NodeCachedReferenceCount_C_get_class_type_i_v();
EXPORT_FUNC void NodeCachedReferenceCount_C_init_type_v_v();


// NodePath

EXPORT_FUNC NodePath * NodePath_C_ctor_p_v();
EXPORT_FUNC NodePath * NodePath_C_ctor_p_p(NodePath *param0);
EXPORT_FUNC NodePath * NodePath_C_ctor_p_p_1_p_p(NodePath const *param0);
EXPORT_FUNC NodePath * NodePath_C_ctor_p_ppp(NodePath const *param0, PandaNode *param1, Thread *param2);
EXPORT_FUNC NodePath * NodePath_C_ctor_p_pp(NodePath const *param0, PandaNode *param1);
EXPORT_FUNC NodePath * NodePath_C_ctor_p_pp_1_p_pp(PandaNode *param0, Thread *param1);
EXPORT_FUNC NodePath * NodePath_C_ctor_p_p_1_p_p_2_p_p(PandaNode *param0);
EXPORT_FUNC NodePath * NodePath_C_ctor_p_sp(char const *param0, Thread *param1);
EXPORT_FUNC NodePath * NodePath_C_ctor_p_s(char const *param0);
EXPORT_FUNC NodePath * NodePath_C_any_path_p_pp(PandaNode *param0, Thread *param1);
EXPORT_FUNC NodePath * NodePath_C_any_path_p_p(PandaNode *param0);
EXPORT_FUNC void NodePath_C_clear_v_p(NodePath *param0);
EXPORT_FUNC NodePath * NodePath_C_not_found_p_v();
EXPORT_FUNC NodePath * NodePath_C_removed_p_v();
EXPORT_FUNC NodePath * NodePath_C_fail_p_v();
EXPORT_FUNC void NodePath_C_set_max_search_depth_v_i(int param0);
EXPORT_FUNC int NodePath_C_get_max_search_depth_i_v();
EXPORT_FUNC bool NodePath_C_is_empty_B_p(NodePath const *param0);
EXPORT_FUNC bool NodePath_C_is_singleton_B_pp(NodePath const *param0, Thread *param1);
EXPORT_FUNC bool NodePath_C_is_singleton_B_p(NodePath const *param0);
EXPORT_FUNC int NodePath_C_get_num_nodes_i_pp(NodePath const *param0, Thread *param1);
EXPORT_FUNC int NodePath_C_get_num_nodes_i_p(NodePath const *param0);
EXPORT_FUNC PandaNode * NodePath_C_get_node_p_pip(NodePath const *param0, int param1, Thread *param2);
EXPORT_FUNC PandaNode * NodePath_C_get_node_p_pi(NodePath const *param0, int param1);
EXPORT_FUNC NodePath * NodePath_C_get_ancestor_p_pip(NodePath const *param0, int param1, Thread *param2);
EXPORT_FUNC NodePath * NodePath_C_get_ancestor_p_pi(NodePath const *param0, int param1);
EXPORT_FUNC NodePath::ErrorType NodePath_C_get_error_type_p_p(NodePath const *param0);
EXPORT_FUNC PandaNode * NodePath_C_get_top_node_p_pp(NodePath const *param0, Thread *param1);
EXPORT_FUNC PandaNode * NodePath_C_get_top_node_p_p(NodePath const *param0);
EXPORT_FUNC NodePath * NodePath_C_get_top_p_pp(NodePath const *param0, Thread *param1);
EXPORT_FUNC NodePath * NodePath_C_get_top_p_p(NodePath const *param0);
EXPORT_FUNC PandaNode * NodePath_C_node_p_p(NodePath const *param0);
EXPORT_FUNC int NodePath_C_get_key_i_p(NodePath const *param0);
EXPORT_FUNC std::size_t NodePath_C_add_hash_l_pl(NodePath const *param0, std::size_t param1);
EXPORT_FUNC bool NodePath_C_is_same_graph_B_ppp(NodePath const *param0, NodePath const *param1, Thread *param2);
EXPORT_FUNC bool NodePath_C_is_same_graph_B_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC bool NodePath_C_is_ancestor_of_B_ppp(NodePath const *param0, NodePath const *param1, Thread *param2);
EXPORT_FUNC bool NodePath_C_is_ancestor_of_B_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC NodePath * NodePath_C_get_common_ancestor_p_ppp(NodePath const *param0, NodePath const *param1, Thread *param2);
EXPORT_FUNC NodePath * NodePath_C_get_common_ancestor_p_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC NodePathCollection * NodePath_C_get_children_p_pp(NodePath const *param0, Thread *param1);
EXPORT_FUNC NodePathCollection * NodePath_C_get_children_p_p(NodePath const *param0);
EXPORT_FUNC int NodePath_C_get_num_children_i_pp(NodePath const *param0, Thread *param1);
EXPORT_FUNC int NodePath_C_get_num_children_i_p(NodePath const *param0);
EXPORT_FUNC NodePath * NodePath_C_get_child_p_pip(NodePath const *param0, int param1, Thread *param2);
EXPORT_FUNC NodePath * NodePath_C_get_child_p_pi(NodePath const *param0, int param1);
EXPORT_FUNC NodePathCollection * NodePath_C_get_stashed_children_p_pp(NodePath const *param0, Thread *param1);
EXPORT_FUNC NodePathCollection * NodePath_C_get_stashed_children_p_p(NodePath const *param0);
EXPORT_FUNC int NodePath_C_count_num_descendants_i_p(NodePath const *param0);
EXPORT_FUNC bool NodePath_C_has_parent_B_pp(NodePath const *param0, Thread *param1);
EXPORT_FUNC bool NodePath_C_has_parent_B_p(NodePath const *param0);
EXPORT_FUNC NodePath * NodePath_C_get_parent_p_pp(NodePath const *param0, Thread *param1);
EXPORT_FUNC NodePath * NodePath_C_get_parent_p_p(NodePath const *param0);
EXPORT_FUNC int NodePath_C_get_sort_i_pp(NodePath const *param0, Thread *param1);
EXPORT_FUNC int NodePath_C_get_sort_i_p(NodePath const *param0);
EXPORT_FUNC NodePath * NodePath_C_find_p_ps(NodePath const *param0, char const *param1);
EXPORT_FUNC NodePath * NodePath_C_find_path_to_p_pp(NodePath const *param0, PandaNode *param1);
EXPORT_FUNC NodePathCollection * NodePath_C_find_all_matches_p_ps(NodePath const *param0, char const *param1);
EXPORT_FUNC NodePathCollection * NodePath_C_find_all_paths_to_p_pp(NodePath const *param0, PandaNode *param1);
EXPORT_FUNC void NodePath_C_reparent_to_v_ppip(NodePath *param0, NodePath const *param1, int param2, Thread *param3);
EXPORT_FUNC void NodePath_C_reparent_to_v_ppi(NodePath *param0, NodePath const *param1, int param2);
EXPORT_FUNC void NodePath_C_reparent_to_v_pp(NodePath *param0, NodePath const *param1);
EXPORT_FUNC void NodePath_C_stash_to_v_ppip(NodePath *param0, NodePath const *param1, int param2, Thread *param3);
EXPORT_FUNC void NodePath_C_stash_to_v_ppi(NodePath *param0, NodePath const *param1, int param2);
EXPORT_FUNC void NodePath_C_stash_to_v_pp(NodePath *param0, NodePath const *param1);
EXPORT_FUNC void NodePath_C_wrt_reparent_to_v_ppip(NodePath *param0, NodePath const *param1, int param2, Thread *param3);
EXPORT_FUNC void NodePath_C_wrt_reparent_to_v_ppi(NodePath *param0, NodePath const *param1, int param2);
EXPORT_FUNC void NodePath_C_wrt_reparent_to_v_pp(NodePath *param0, NodePath const *param1);
EXPORT_FUNC NodePath * NodePath_C_instance_to_p_ppip(NodePath const *param0, NodePath const *param1, int param2, Thread *param3);
EXPORT_FUNC NodePath * NodePath_C_instance_to_p_ppi(NodePath const *param0, NodePath const *param1, int param2);
EXPORT_FUNC NodePath * NodePath_C_instance_to_p_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC NodePath * NodePath_C_instance_under_node_p_ppsip(NodePath const *param0, NodePath const *param1, char const *param2, int param3, Thread *param4);
EXPORT_FUNC NodePath * NodePath_C_instance_under_node_p_ppsi(NodePath const *param0, NodePath const *param1, char const *param2, int param3);
EXPORT_FUNC NodePath * NodePath_C_instance_under_node_p_pps(NodePath const *param0, NodePath const *param1, char const *param2);
EXPORT_FUNC NodePath * NodePath_C_copy_to_p_ppip(NodePath const *param0, NodePath const *param1, int param2, Thread *param3);
EXPORT_FUNC NodePath * NodePath_C_copy_to_p_ppi(NodePath const *param0, NodePath const *param1, int param2);
EXPORT_FUNC NodePath * NodePath_C_copy_to_p_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC NodePath * NodePath_C_attach_new_node_p_ppip(NodePath const *param0, PandaNode *param1, int param2, Thread *param3);
EXPORT_FUNC NodePath * NodePath_C_attach_new_node_p_ppi(NodePath const *param0, PandaNode *param1, int param2);
EXPORT_FUNC NodePath * NodePath_C_attach_new_node_p_pp(NodePath const *param0, PandaNode *param1);
EXPORT_FUNC NodePath * NodePath_C_attach_new_node_p_psip(NodePath const *param0, char const *param1, int param2, Thread *param3);
EXPORT_FUNC NodePath * NodePath_C_attach_new_node_p_psi(NodePath const *param0, char const *param1, int param2);
EXPORT_FUNC NodePath * NodePath_C_attach_new_node_p_ps(NodePath const *param0, char const *param1);
EXPORT_FUNC void NodePath_C_remove_node_v_pp(NodePath *param0, Thread *param1);
EXPORT_FUNC void NodePath_C_remove_node_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_detach_node_v_pp(NodePath *param0, Thread *param1);
EXPORT_FUNC void NodePath_C_detach_node_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_output_v_pp(NodePath const *param0, std::ostream *param1);
EXPORT_FUNC void NodePath_C_ls_v_p(NodePath const *param0);
EXPORT_FUNC void NodePath_C_ls_v_ppi(NodePath const *param0, std::ostream *param1, int param2);
EXPORT_FUNC void NodePath_C_ls_v_pp(NodePath const *param0, std::ostream *param1);
EXPORT_FUNC void NodePath_C_reverse_ls_v_p(NodePath const *param0);
EXPORT_FUNC int NodePath_C_reverse_ls_i_ppi(NodePath const *param0, std::ostream *param1, int param2);
EXPORT_FUNC int NodePath_C_reverse_ls_i_pp(NodePath const *param0, std::ostream *param1);
EXPORT_FUNC ConstPointerTo< RenderState > * NodePath_C_get_state_p_ppp(NodePath const *param0, NodePath const *param1, Thread *param2);
EXPORT_FUNC ConstPointerTo< RenderState > * NodePath_C_get_state_p_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC RenderState const * NodePath_C_get_state_p_pp_1_p_pp(NodePath const *param0, Thread *param1);
EXPORT_FUNC RenderState const * NodePath_C_get_state_p_p(NodePath const *param0);
EXPORT_FUNC void NodePath_C_set_state_v_pppp(NodePath *param0, NodePath const *param1, RenderState const *param2, Thread *param3);
EXPORT_FUNC void NodePath_C_set_state_v_ppp(NodePath *param0, NodePath const *param1, RenderState const *param2);
EXPORT_FUNC void NodePath_C_set_state_v_ppp_1_v_ppp(NodePath *param0, RenderState const *param1, Thread *param2);
EXPORT_FUNC void NodePath_C_set_state_v_pp(NodePath *param0, RenderState const *param1);
EXPORT_FUNC ConstPointerTo< RenderState > * NodePath_C_get_net_state_p_pp(NodePath const *param0, Thread *param1);
EXPORT_FUNC ConstPointerTo< RenderState > * NodePath_C_get_net_state_p_p(NodePath const *param0);
EXPORT_FUNC void NodePath_C_set_attrib_v_ppi(NodePath *param0, RenderAttrib const *param1, int param2);
EXPORT_FUNC void NodePath_C_set_attrib_v_pp(NodePath *param0, RenderAttrib const *param1);
EXPORT_FUNC RenderAttrib const * NodePath_C_get_attrib_p_pi(NodePath const *param0, int param1);
EXPORT_FUNC bool NodePath_C_has_attrib_B_pi(NodePath const *param0, int param1);
EXPORT_FUNC void NodePath_C_clear_attrib_v_pi(NodePath *param0, int param1);
EXPORT_FUNC void NodePath_C_set_effect_v_pp(NodePath *param0, RenderEffect const *param1);
EXPORT_FUNC RenderEffect const * NodePath_C_get_effect_p_pi(NodePath const *param0, int param1);
EXPORT_FUNC bool NodePath_C_has_effect_B_pi(NodePath const *param0, int param1);
EXPORT_FUNC void NodePath_C_clear_effect_v_pi(NodePath *param0, int param1);
EXPORT_FUNC void NodePath_C_set_effects_v_pp(NodePath *param0, RenderEffects const *param1);
EXPORT_FUNC RenderEffects const * NodePath_C_get_effects_p_p(NodePath const *param0);
EXPORT_FUNC void NodePath_C_clear_effects_v_p(NodePath *param0);
EXPORT_FUNC ConstPointerTo< TransformState > * NodePath_C_get_transform_p_ppp(NodePath const *param0, NodePath const *param1, Thread *param2);
EXPORT_FUNC ConstPointerTo< TransformState > * NodePath_C_get_transform_p_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC TransformState const * NodePath_C_get_transform_p_pp_1_p_pp(NodePath const *param0, Thread *param1);
EXPORT_FUNC TransformState const * NodePath_C_get_transform_p_p(NodePath const *param0);
EXPORT_FUNC void NodePath_C_clear_transform_v_ppp(NodePath *param0, NodePath const *param1, Thread *param2);
EXPORT_FUNC void NodePath_C_clear_transform_v_pp(NodePath *param0, NodePath const *param1);
EXPORT_FUNC void NodePath_C_clear_transform_v_pp_1_v_pp(NodePath *param0, Thread *param1);
EXPORT_FUNC void NodePath_C_clear_transform_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_set_transform_v_pppp(NodePath *param0, NodePath const *param1, TransformState const *param2, Thread *param3);
EXPORT_FUNC void NodePath_C_set_transform_v_ppp(NodePath *param0, NodePath const *param1, TransformState const *param2);
EXPORT_FUNC void NodePath_C_set_transform_v_ppp_1_v_ppp(NodePath *param0, TransformState const *param1, Thread *param2);
EXPORT_FUNC void NodePath_C_set_transform_v_pp(NodePath *param0, TransformState const *param1);
EXPORT_FUNC ConstPointerTo< TransformState > * NodePath_C_get_net_transform_p_pp(NodePath const *param0, Thread *param1);
EXPORT_FUNC ConstPointerTo< TransformState > * NodePath_C_get_net_transform_p_p(NodePath const *param0);
EXPORT_FUNC ConstPointerTo< TransformState > * NodePath_C_get_prev_transform_p_ppp(NodePath const *param0, NodePath const *param1, Thread *param2);
EXPORT_FUNC ConstPointerTo< TransformState > * NodePath_C_get_prev_transform_p_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC TransformState const * NodePath_C_get_prev_transform_p_pp_1_p_pp(NodePath const *param0, Thread *param1);
EXPORT_FUNC TransformState const * NodePath_C_get_prev_transform_p_p(NodePath const *param0);
EXPORT_FUNC void NodePath_C_set_prev_transform_v_pppp(NodePath *param0, NodePath const *param1, TransformState const *param2, Thread *param3);
EXPORT_FUNC void NodePath_C_set_prev_transform_v_ppp(NodePath *param0, NodePath const *param1, TransformState const *param2);
EXPORT_FUNC void NodePath_C_set_prev_transform_v_ppp_1_v_ppp(NodePath *param0, TransformState const *param1, Thread *param2);
EXPORT_FUNC void NodePath_C_set_prev_transform_v_pp(NodePath *param0, TransformState const *param1);
EXPORT_FUNC ConstPointerTo< TransformState > * NodePath_C_get_net_prev_transform_p_pp(NodePath const *param0, Thread *param1);
EXPORT_FUNC ConstPointerTo< TransformState > * NodePath_C_get_net_prev_transform_p_p(NodePath const *param0);
EXPORT_FUNC void NodePath_C_set_pos_v_pp(NodePath *param0, LVecBase3 const *param1);
EXPORT_FUNC void NodePath_C_set_pos_v_ppp(NodePath *param0, NodePath const *param1, LVecBase3 const *param2);
EXPORT_FUNC void NodePath_C_set_pos_v_ppfff(NodePath *param0, NodePath const *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC void NodePath_C_set_pos_v_pfff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3);
EXPORT_FUNC void NodePath_C_set_x_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2);
EXPORT_FUNC void NodePath_C_set_x_v_pf(NodePath *param0, PN_stdfloat param1);
EXPORT_FUNC void NodePath_C_set_y_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2);
EXPORT_FUNC void NodePath_C_set_y_v_pf(NodePath *param0, PN_stdfloat param1);
EXPORT_FUNC void NodePath_C_set_z_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2);
EXPORT_FUNC void NodePath_C_set_z_v_pf(NodePath *param0, PN_stdfloat param1);
EXPORT_FUNC void NodePath_C_set_fluid_pos_v_pp(NodePath *param0, LVecBase3 const *param1);
EXPORT_FUNC void NodePath_C_set_fluid_pos_v_ppp(NodePath *param0, NodePath const *param1, LVecBase3 const *param2);
EXPORT_FUNC void NodePath_C_set_fluid_pos_v_ppfff(NodePath *param0, NodePath const *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC void NodePath_C_set_fluid_pos_v_pfff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3);
EXPORT_FUNC void NodePath_C_set_fluid_x_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2);
EXPORT_FUNC void NodePath_C_set_fluid_x_v_pf(NodePath *param0, PN_stdfloat param1);
EXPORT_FUNC void NodePath_C_set_fluid_y_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2);
EXPORT_FUNC void NodePath_C_set_fluid_y_v_pf(NodePath *param0, PN_stdfloat param1);
EXPORT_FUNC void NodePath_C_set_fluid_z_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2);
EXPORT_FUNC void NodePath_C_set_fluid_z_v_pf(NodePath *param0, PN_stdfloat param1);
EXPORT_FUNC LPoint3 * NodePath_C_get_pos_p_p(NodePath const *param0);
EXPORT_FUNC LPoint3 * NodePath_C_get_pos_p_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC PN_stdfloat NodePath_C_get_x_f_p(NodePath const *param0);
EXPORT_FUNC PN_stdfloat NodePath_C_get_x_f_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC PN_stdfloat NodePath_C_get_y_f_p(NodePath const *param0);
EXPORT_FUNC PN_stdfloat NodePath_C_get_y_f_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC PN_stdfloat NodePath_C_get_z_f_p(NodePath const *param0);
EXPORT_FUNC PN_stdfloat NodePath_C_get_z_f_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC LVector3 * NodePath_C_get_pos_delta_p_p(NodePath const *param0);
EXPORT_FUNC LVector3 * NodePath_C_get_pos_delta_p_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC void NodePath_C_set_hpr_v_pp(NodePath *param0, LVecBase3 const *param1);
EXPORT_FUNC void NodePath_C_set_hpr_v_ppp(NodePath *param0, NodePath const *param1, LVecBase3 const *param2);
EXPORT_FUNC void NodePath_C_set_hpr_v_ppfff(NodePath *param0, NodePath const *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC void NodePath_C_set_hpr_v_pfff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3);
EXPORT_FUNC void NodePath_C_set_h_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2);
EXPORT_FUNC void NodePath_C_set_h_v_pf(NodePath *param0, PN_stdfloat param1);
EXPORT_FUNC void NodePath_C_set_p_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2);
EXPORT_FUNC void NodePath_C_set_p_v_pf(NodePath *param0, PN_stdfloat param1);
EXPORT_FUNC void NodePath_C_set_r_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2);
EXPORT_FUNC void NodePath_C_set_r_v_pf(NodePath *param0, PN_stdfloat param1);
EXPORT_FUNC LVecBase3 * NodePath_C_get_hpr_p_p(NodePath const *param0);
EXPORT_FUNC LVecBase3 * NodePath_C_get_hpr_p_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC PN_stdfloat NodePath_C_get_h_f_p(NodePath const *param0);
EXPORT_FUNC PN_stdfloat NodePath_C_get_h_f_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC PN_stdfloat NodePath_C_get_p_f_p(NodePath const *param0);
EXPORT_FUNC PN_stdfloat NodePath_C_get_p_f_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC PN_stdfloat NodePath_C_get_r_f_p(NodePath const *param0);
EXPORT_FUNC PN_stdfloat NodePath_C_get_r_f_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC void NodePath_C_set_quat_v_pp(NodePath *param0, LQuaternion const *param1);
EXPORT_FUNC void NodePath_C_set_quat_v_ppp(NodePath *param0, NodePath const *param1, LQuaternion const *param2);
EXPORT_FUNC LQuaternion * NodePath_C_get_quat_p_p(NodePath const *param0);
EXPORT_FUNC LQuaternion * NodePath_C_get_quat_p_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC void NodePath_C_set_scale_v_pp(NodePath *param0, LVecBase3 const *param1);
EXPORT_FUNC void NodePath_C_set_scale_v_ppp(NodePath *param0, NodePath const *param1, LVecBase3 const *param2);
EXPORT_FUNC void NodePath_C_set_scale_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2);
EXPORT_FUNC void NodePath_C_set_scale_v_ppfff(NodePath *param0, NodePath const *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC void NodePath_C_set_scale_v_pf(NodePath *param0, PN_stdfloat param1);
EXPORT_FUNC void NodePath_C_set_scale_v_pfff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3);
EXPORT_FUNC void NodePath_C_set_sx_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2);
EXPORT_FUNC void NodePath_C_set_sx_v_pf(NodePath *param0, PN_stdfloat param1);
EXPORT_FUNC void NodePath_C_set_sy_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2);
EXPORT_FUNC void NodePath_C_set_sy_v_pf(NodePath *param0, PN_stdfloat param1);
EXPORT_FUNC void NodePath_C_set_sz_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2);
EXPORT_FUNC void NodePath_C_set_sz_v_pf(NodePath *param0, PN_stdfloat param1);
EXPORT_FUNC LVecBase3 * NodePath_C_get_scale_p_p(NodePath const *param0);
EXPORT_FUNC LVecBase3 * NodePath_C_get_scale_p_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC PN_stdfloat NodePath_C_get_sx_f_p(NodePath const *param0);
EXPORT_FUNC PN_stdfloat NodePath_C_get_sx_f_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC PN_stdfloat NodePath_C_get_sy_f_p(NodePath const *param0);
EXPORT_FUNC PN_stdfloat NodePath_C_get_sy_f_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC PN_stdfloat NodePath_C_get_sz_f_p(NodePath const *param0);
EXPORT_FUNC PN_stdfloat NodePath_C_get_sz_f_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC void NodePath_C_set_shear_v_pp(NodePath *param0, LVecBase3 const *param1);
EXPORT_FUNC void NodePath_C_set_shear_v_ppp(NodePath *param0, NodePath const *param1, LVecBase3 const *param2);
EXPORT_FUNC void NodePath_C_set_shear_v_ppfff(NodePath *param0, NodePath const *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC void NodePath_C_set_shear_v_pfff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3);
EXPORT_FUNC void NodePath_C_set_shxy_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2);
EXPORT_FUNC void NodePath_C_set_shxy_v_pf(NodePath *param0, PN_stdfloat param1);
EXPORT_FUNC void NodePath_C_set_shxz_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2);
EXPORT_FUNC void NodePath_C_set_shxz_v_pf(NodePath *param0, PN_stdfloat param1);
EXPORT_FUNC void NodePath_C_set_shyz_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2);
EXPORT_FUNC void NodePath_C_set_shyz_v_pf(NodePath *param0, PN_stdfloat param1);
EXPORT_FUNC LVecBase3 * NodePath_C_get_shear_p_p(NodePath const *param0);
EXPORT_FUNC LVecBase3 * NodePath_C_get_shear_p_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC PN_stdfloat NodePath_C_get_shxy_f_p(NodePath const *param0);
EXPORT_FUNC PN_stdfloat NodePath_C_get_shxy_f_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC PN_stdfloat NodePath_C_get_shxz_f_p(NodePath const *param0);
EXPORT_FUNC PN_stdfloat NodePath_C_get_shxz_f_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC PN_stdfloat NodePath_C_get_shyz_f_p(NodePath const *param0);
EXPORT_FUNC PN_stdfloat NodePath_C_get_shyz_f_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC void NodePath_C_set_pos_hpr_v_ppp(NodePath *param0, LVecBase3 const *param1, LVecBase3 const *param2);
EXPORT_FUNC void NodePath_C_set_pos_hpr_v_pppp(NodePath *param0, NodePath const *param1, LVecBase3 const *param2, LVecBase3 const *param3);
EXPORT_FUNC void NodePath_C_set_pos_hpr_v_ppffffff(NodePath *param0, NodePath const *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5, PN_stdfloat param6, PN_stdfloat param7);
EXPORT_FUNC void NodePath_C_set_pos_hpr_v_pffffff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5, PN_stdfloat param6);
EXPORT_FUNC void NodePath_C_set_pos_quat_v_ppp(NodePath *param0, LVecBase3 const *param1, LQuaternion const *param2);
EXPORT_FUNC void NodePath_C_set_pos_quat_v_pppp(NodePath *param0, NodePath const *param1, LVecBase3 const *param2, LQuaternion const *param3);
EXPORT_FUNC void NodePath_C_set_hpr_scale_v_ppp(NodePath *param0, LVecBase3 const *param1, LVecBase3 const *param2);
EXPORT_FUNC void NodePath_C_set_hpr_scale_v_pppp(NodePath *param0, NodePath const *param1, LVecBase3 const *param2, LVecBase3 const *param3);
EXPORT_FUNC void NodePath_C_set_hpr_scale_v_ppffffff(NodePath *param0, NodePath const *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5, PN_stdfloat param6, PN_stdfloat param7);
EXPORT_FUNC void NodePath_C_set_hpr_scale_v_pffffff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5, PN_stdfloat param6);
EXPORT_FUNC void NodePath_C_set_quat_scale_v_ppp(NodePath *param0, LQuaternion const *param1, LVecBase3 const *param2);
EXPORT_FUNC void NodePath_C_set_quat_scale_v_pppp(NodePath *param0, NodePath const *param1, LQuaternion const *param2, LVecBase3 const *param3);
EXPORT_FUNC void NodePath_C_set_pos_hpr_scale_v_pppp(NodePath *param0, LVecBase3 const *param1, LVecBase3 const *param2, LVecBase3 const *param3);
EXPORT_FUNC void NodePath_C_set_pos_hpr_scale_v_ppppp(NodePath *param0, NodePath const *param1, LVecBase3 const *param2, LVecBase3 const *param3, LVecBase3 const *param4);
EXPORT_FUNC void NodePath_C_set_pos_hpr_scale_v_ppfffffffff(NodePath *param0, NodePath const *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5, PN_stdfloat param6, PN_stdfloat param7, PN_stdfloat param8, PN_stdfloat param9, PN_stdfloat param10);
EXPORT_FUNC void NodePath_C_set_pos_hpr_scale_v_pfffffffff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5, PN_stdfloat param6, PN_stdfloat param7, PN_stdfloat param8, PN_stdfloat param9);
EXPORT_FUNC void NodePath_C_set_pos_quat_scale_v_pppp(NodePath *param0, LVecBase3 const *param1, LQuaternion const *param2, LVecBase3 const *param3);
EXPORT_FUNC void NodePath_C_set_pos_quat_scale_v_ppppp(NodePath *param0, NodePath const *param1, LVecBase3 const *param2, LQuaternion const *param3, LVecBase3 const *param4);
EXPORT_FUNC void NodePath_C_set_pos_hpr_scale_shear_v_ppppp(NodePath *param0, LVecBase3 const *param1, LVecBase3 const *param2, LVecBase3 const *param3, LVecBase3 const *param4);
EXPORT_FUNC void NodePath_C_set_pos_hpr_scale_shear_v_pppppp(NodePath *param0, NodePath const *param1, LVecBase3 const *param2, LVecBase3 const *param3, LVecBase3 const *param4, LVecBase3 const *param5);
EXPORT_FUNC void NodePath_C_set_pos_quat_scale_shear_v_ppppp(NodePath *param0, LVecBase3 const *param1, LQuaternion const *param2, LVecBase3 const *param3, LVecBase3 const *param4);
EXPORT_FUNC void NodePath_C_set_pos_quat_scale_shear_v_pppppp(NodePath *param0, NodePath const *param1, LVecBase3 const *param2, LQuaternion const *param3, LVecBase3 const *param4, LVecBase3 const *param5);
EXPORT_FUNC void NodePath_C_set_mat_v_pp(NodePath *param0, LMatrix4 const *param1);
EXPORT_FUNC void NodePath_C_set_mat_v_ppp(NodePath *param0, NodePath const *param1, LMatrix4 const *param2);
EXPORT_FUNC void NodePath_C_clear_mat_v_p(NodePath *param0);
EXPORT_FUNC bool NodePath_C_has_mat_B_p(NodePath const *param0);
EXPORT_FUNC LMatrix4 const * NodePath_C_get_mat_p_p(NodePath const *param0);
EXPORT_FUNC LMatrix4 * NodePath_C_get_mat_p_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC void NodePath_C_look_at_v_ppp(NodePath *param0, LPoint3 const *param1, LVector3 const *param2);
EXPORT_FUNC void NodePath_C_look_at_v_pp(NodePath *param0, LPoint3 const *param1);
EXPORT_FUNC void NodePath_C_look_at_v_pppp(NodePath *param0, NodePath const *param1, LPoint3 const *param2, LVector3 const *param3);
EXPORT_FUNC void NodePath_C_look_at_v_ppp_1_v_ppp(NodePath *param0, NodePath const *param1, LPoint3 const *param2);
EXPORT_FUNC void NodePath_C_look_at_v_pp_1_v_pp(NodePath *param0, NodePath const *param1);
EXPORT_FUNC void NodePath_C_look_at_v_ppfff(NodePath *param0, NodePath const *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC void NodePath_C_look_at_v_pfff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3);
EXPORT_FUNC void NodePath_C_heads_up_v_ppp(NodePath *param0, LPoint3 const *param1, LVector3 const *param2);
EXPORT_FUNC void NodePath_C_heads_up_v_pp(NodePath *param0, LPoint3 const *param1);
EXPORT_FUNC void NodePath_C_heads_up_v_pppp(NodePath *param0, NodePath const *param1, LPoint3 const *param2, LVector3 const *param3);
EXPORT_FUNC void NodePath_C_heads_up_v_ppp_1_v_ppp(NodePath *param0, NodePath const *param1, LPoint3 const *param2);
EXPORT_FUNC void NodePath_C_heads_up_v_pp_1_v_pp(NodePath *param0, NodePath const *param1);
EXPORT_FUNC void NodePath_C_heads_up_v_ppfff(NodePath *param0, NodePath const *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC void NodePath_C_heads_up_v_pfff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3);
EXPORT_FUNC LPoint3 * NodePath_C_get_relative_point_p_ppp(NodePath const *param0, NodePath const *param1, LVecBase3 const *param2);
EXPORT_FUNC LVector3 * NodePath_C_get_relative_vector_p_ppp(NodePath const *param0, NodePath const *param1, LVecBase3 const *param2);
EXPORT_FUNC PN_stdfloat NodePath_C_get_distance_f_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC void NodePath_C_set_color_v_ppi(NodePath *param0, LColor const *param1, int param2);
EXPORT_FUNC void NodePath_C_set_color_v_pp(NodePath *param0, LColor const *param1);
EXPORT_FUNC void NodePath_C_set_color_v_pffffi(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, int param5);
EXPORT_FUNC void NodePath_C_set_color_v_pffff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC void NodePath_C_set_color_v_pfff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3);
EXPORT_FUNC void NodePath_C_set_color_off_v_pi(NodePath *param0, int param1);
EXPORT_FUNC void NodePath_C_set_color_off_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_clear_color_v_p(NodePath *param0);
EXPORT_FUNC bool NodePath_C_has_color_B_p(NodePath const *param0);
EXPORT_FUNC LColor * NodePath_C_get_color_p_p(NodePath const *param0);
EXPORT_FUNC bool NodePath_C_has_color_scale_B_p(NodePath const *param0);
EXPORT_FUNC void NodePath_C_clear_color_scale_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_set_color_scale_v_ppi(NodePath *param0, LVecBase4 const *param1, int param2);
EXPORT_FUNC void NodePath_C_set_color_scale_v_pp(NodePath *param0, LVecBase4 const *param1);
EXPORT_FUNC void NodePath_C_set_color_scale_v_pffffi(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, int param5);
EXPORT_FUNC void NodePath_C_set_color_scale_v_pffff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC void NodePath_C_compose_color_scale_v_ppi(NodePath *param0, LVecBase4 const *param1, int param2);
EXPORT_FUNC void NodePath_C_compose_color_scale_v_pp(NodePath *param0, LVecBase4 const *param1);
EXPORT_FUNC void NodePath_C_compose_color_scale_v_pffffi(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, int param5);
EXPORT_FUNC void NodePath_C_compose_color_scale_v_pffff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC void NodePath_C_set_color_scale_off_v_pi(NodePath *param0, int param1);
EXPORT_FUNC void NodePath_C_set_color_scale_off_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_set_alpha_scale_v_pfi(NodePath *param0, PN_stdfloat param1, int param2);
EXPORT_FUNC void NodePath_C_set_alpha_scale_v_pf(NodePath *param0, PN_stdfloat param1);
EXPORT_FUNC void NodePath_C_set_all_color_scale_v_pfi(NodePath *param0, PN_stdfloat param1, int param2);
EXPORT_FUNC void NodePath_C_set_all_color_scale_v_pf(NodePath *param0, PN_stdfloat param1);
EXPORT_FUNC void NodePath_C_set_sr_v_pf(NodePath *param0, PN_stdfloat param1);
EXPORT_FUNC void NodePath_C_set_sg_v_pf(NodePath *param0, PN_stdfloat param1);
EXPORT_FUNC void NodePath_C_set_sb_v_pf(NodePath *param0, PN_stdfloat param1);
EXPORT_FUNC void NodePath_C_set_sa_v_pf(NodePath *param0, PN_stdfloat param1);
EXPORT_FUNC LVecBase4 const * NodePath_C_get_color_scale_p_p(NodePath const *param0);
EXPORT_FUNC PN_stdfloat NodePath_C_get_sr_f_p(NodePath const *param0);
EXPORT_FUNC PN_stdfloat NodePath_C_get_sg_f_p(NodePath const *param0);
EXPORT_FUNC PN_stdfloat NodePath_C_get_sb_f_p(NodePath const *param0);
EXPORT_FUNC PN_stdfloat NodePath_C_get_sa_f_p(NodePath const *param0);
EXPORT_FUNC void NodePath_C_set_light_v_ppi(NodePath *param0, NodePath const *param1, int param2);
EXPORT_FUNC void NodePath_C_set_light_v_pp(NodePath *param0, NodePath const *param1);
EXPORT_FUNC void NodePath_C_set_light_off_v_ppi(NodePath *param0, NodePath const *param1, int param2);
EXPORT_FUNC void NodePath_C_set_light_off_v_pp(NodePath *param0, NodePath const *param1);
EXPORT_FUNC void NodePath_C_set_light_off_v_pi(NodePath *param0, int param1);
EXPORT_FUNC void NodePath_C_set_light_off_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_clear_light_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_clear_light_v_pp(NodePath *param0, NodePath const *param1);
EXPORT_FUNC bool NodePath_C_has_light_B_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC bool NodePath_C_has_light_off_B_p(NodePath const *param0);
EXPORT_FUNC bool NodePath_C_has_light_off_B_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC void NodePath_C_set_clip_plane_v_ppi(NodePath *param0, NodePath const *param1, int param2);
EXPORT_FUNC void NodePath_C_set_clip_plane_v_pp(NodePath *param0, NodePath const *param1);
EXPORT_FUNC void NodePath_C_set_clip_plane_off_v_ppi(NodePath *param0, NodePath const *param1, int param2);
EXPORT_FUNC void NodePath_C_set_clip_plane_off_v_pp(NodePath *param0, NodePath const *param1);
EXPORT_FUNC void NodePath_C_set_clip_plane_off_v_pi(NodePath *param0, int param1);
EXPORT_FUNC void NodePath_C_set_clip_plane_off_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_clear_clip_plane_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_clear_clip_plane_v_pp(NodePath *param0, NodePath const *param1);
EXPORT_FUNC bool NodePath_C_has_clip_plane_B_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC bool NodePath_C_has_clip_plane_off_B_p(NodePath const *param0);
EXPORT_FUNC bool NodePath_C_has_clip_plane_off_B_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC void NodePath_C_set_scissor_v_ppp(NodePath *param0, LPoint3 const *param1, LPoint3 const *param2);
EXPORT_FUNC void NodePath_C_set_scissor_v_ppppp(NodePath *param0, LPoint3 const *param1, LPoint3 const *param2, LPoint3 const *param3, LPoint3 const *param4);
EXPORT_FUNC void NodePath_C_set_scissor_v_pppp(NodePath *param0, NodePath const *param1, LPoint3 const *param2, LPoint3 const *param3);
EXPORT_FUNC void NodePath_C_set_scissor_v_pppppp(NodePath *param0, NodePath const *param1, LPoint3 const *param2, LPoint3 const *param3, LPoint3 const *param4, LPoint3 const *param5);
EXPORT_FUNC void NodePath_C_set_scissor_v_pffff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC void NodePath_C_clear_scissor_v_p(NodePath *param0);
EXPORT_FUNC bool NodePath_C_has_scissor_B_p(NodePath const *param0);
EXPORT_FUNC void NodePath_C_set_occluder_v_pp(NodePath *param0, NodePath const *param1);
EXPORT_FUNC void NodePath_C_clear_occluder_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_clear_occluder_v_pp(NodePath *param0, NodePath const *param1);
EXPORT_FUNC bool NodePath_C_has_occluder_B_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC void NodePath_C_set_bin_v_psii(NodePath *param0, char const *param1, int param2, int param3);
EXPORT_FUNC void NodePath_C_set_bin_v_psi(NodePath *param0, char const *param1, int param2);
EXPORT_FUNC void NodePath_C_clear_bin_v_p(NodePath *param0);
EXPORT_FUNC bool NodePath_C_has_bin_B_p(NodePath const *param0);
EXPORT_FUNC char const * NodePath_C_get_bin_name_s_p(NodePath const *param0);
EXPORT_FUNC int NodePath_C_get_bin_draw_order_i_p(NodePath const *param0);
EXPORT_FUNC void NodePath_C_set_texture_v_pppi(NodePath *param0, Texture *param1, SamplerState const *param2, int param3);
EXPORT_FUNC void NodePath_C_set_texture_v_ppp(NodePath *param0, Texture *param1, SamplerState const *param2);
EXPORT_FUNC void NodePath_C_set_texture_v_ppi(NodePath *param0, Texture *param1, int param2);
EXPORT_FUNC void NodePath_C_set_texture_v_pp(NodePath *param0, Texture *param1);
EXPORT_FUNC void NodePath_C_set_texture_v_ppppi(NodePath *param0, TextureStage *param1, Texture *param2, SamplerState const *param3, int param4);
EXPORT_FUNC void NodePath_C_set_texture_v_pppp(NodePath *param0, TextureStage *param1, Texture *param2, SamplerState const *param3);
EXPORT_FUNC void NodePath_C_set_texture_v_pppi_1_v_pppi(NodePath *param0, TextureStage *param1, Texture *param2, int param3);
EXPORT_FUNC void NodePath_C_set_texture_v_ppp_1_v_ppp(NodePath *param0, TextureStage *param1, Texture *param2);
EXPORT_FUNC void NodePath_C_set_texture_off_v_ppi(NodePath *param0, TextureStage *param1, int param2);
EXPORT_FUNC void NodePath_C_set_texture_off_v_pp(NodePath *param0, TextureStage *param1);
EXPORT_FUNC void NodePath_C_set_texture_off_v_pi(NodePath *param0, int param1);
EXPORT_FUNC void NodePath_C_set_texture_off_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_clear_texture_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_clear_texture_v_pp(NodePath *param0, TextureStage *param1);
EXPORT_FUNC bool NodePath_C_has_texture_B_p(NodePath const *param0);
EXPORT_FUNC bool NodePath_C_has_texture_B_pp(NodePath const *param0, TextureStage *param1);
EXPORT_FUNC bool NodePath_C_has_texture_off_B_p(NodePath const *param0);
EXPORT_FUNC bool NodePath_C_has_texture_off_B_pp(NodePath const *param0, TextureStage *param1);
EXPORT_FUNC Texture * NodePath_C_get_texture_p_p(NodePath const *param0);
EXPORT_FUNC Texture * NodePath_C_get_texture_p_pp(NodePath const *param0, TextureStage *param1);
EXPORT_FUNC void NodePath_C_replace_texture_v_ppp(NodePath *param0, Texture *param1, Texture *param2);
EXPORT_FUNC SamplerState const * NodePath_C_get_texture_sampler_p_p(NodePath const *param0);
EXPORT_FUNC SamplerState const * NodePath_C_get_texture_sampler_p_pp(NodePath const *param0, TextureStage *param1);
EXPORT_FUNC void NodePath_C_set_shader_v_ppi(NodePath *param0, Shader const *param1, int param2);
EXPORT_FUNC void NodePath_C_set_shader_v_pp(NodePath *param0, Shader const *param1);
EXPORT_FUNC void NodePath_C_set_shader_off_v_pi(NodePath *param0, int param1);
EXPORT_FUNC void NodePath_C_set_shader_off_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_set_shader_auto_v_ppi(NodePath *param0, BitMask32 *param1, int param2);
EXPORT_FUNC void NodePath_C_set_shader_auto_v_pp(NodePath *param0, BitMask32 *param1);
EXPORT_FUNC void NodePath_C_set_shader_auto_v_pi(NodePath *param0, int param1);
EXPORT_FUNC void NodePath_C_set_shader_auto_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_clear_shader_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_set_shader_input_v_pspi(NodePath *param0, CPT_InternalName *param1, LMatrix3 const *param2, int param3);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psp(NodePath *param0, CPT_InternalName *param1, LMatrix3 const *param2);
EXPORT_FUNC void NodePath_C_set_shader_input_v_pspi_1_v_pspi(NodePath *param0, CPT_InternalName *param1, LMatrix4 const *param2, int param3);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psp_1_v_psp(NodePath *param0, CPT_InternalName *param1, LMatrix4 const *param2);
EXPORT_FUNC void NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi(NodePath *param0, CPT_InternalName *param1, LVecBase2 const *param2, int param3);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp(NodePath *param0, CPT_InternalName *param1, LVecBase2 const *param2);
EXPORT_FUNC void NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi(NodePath *param0, CPT_InternalName *param1, LVecBase2i const *param2, int param3);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp(NodePath *param0, CPT_InternalName *param1, LVecBase2i const *param2);
EXPORT_FUNC void NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi(NodePath *param0, CPT_InternalName *param1, LVecBase3 const *param2, int param3);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp(NodePath *param0, CPT_InternalName *param1, LVecBase3 const *param2);
EXPORT_FUNC void NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi(NodePath *param0, CPT_InternalName *param1, LVecBase3i const *param2, int param3);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp(NodePath *param0, CPT_InternalName *param1, LVecBase3i const *param2);
EXPORT_FUNC void NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi(NodePath *param0, CPT_InternalName *param1, LVecBase4 const *param2, int param3);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp(NodePath *param0, CPT_InternalName *param1, LVecBase4 const *param2);
EXPORT_FUNC void NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi_7_v_pspi(NodePath *param0, CPT_InternalName *param1, LVecBase4i const *param2, int param3);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp_7_v_psp(NodePath *param0, CPT_InternalName *param1, LVecBase4i const *param2);
EXPORT_FUNC void NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi_7_v_pspi_8_v_pspi(NodePath *param0, CPT_InternalName *param1, NodePath const *param2, int param3);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp_7_v_psp_8_v_psp(NodePath *param0, CPT_InternalName *param1, NodePath const *param2);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psffffi(NodePath *param0, CPT_InternalName *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5, int param6);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psffff(NodePath *param0, CPT_InternalName *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psfff(NodePath *param0, CPT_InternalName *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psff(NodePath *param0, CPT_InternalName *param1, PN_stdfloat param2, PN_stdfloat param3);
EXPORT_FUNC void NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi_7_v_pspi_8_v_pspi_9_v_pspi(NodePath *param0, CPT_InternalName *param1, PTA_LMatrix3 const *param2, int param3);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp_7_v_psp_8_v_psp_9_v_psp(NodePath *param0, CPT_InternalName *param1, PTA_LMatrix3 const *param2);
EXPORT_FUNC void NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi_7_v_pspi_8_v_pspi_9_v_pspi_10_v_pspi(NodePath *param0, CPT_InternalName *param1, PTA_LMatrix4 const *param2, int param3);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp_7_v_psp_8_v_psp_9_v_psp_10_v_psp(NodePath *param0, CPT_InternalName *param1, PTA_LMatrix4 const *param2);
EXPORT_FUNC void NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi_7_v_pspi_8_v_pspi_9_v_pspi_10_v_pspi_11_v_pspi(NodePath *param0, CPT_InternalName *param1, PTA_LVecBase2 const *param2, int param3);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp_7_v_psp_8_v_psp_9_v_psp_10_v_psp_11_v_psp(NodePath *param0, CPT_InternalName *param1, PTA_LVecBase2 const *param2);
EXPORT_FUNC void NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi_7_v_pspi_8_v_pspi_9_v_pspi_10_v_pspi_11_v_pspi_12_v_pspi(NodePath *param0, CPT_InternalName *param1, PTA_LVecBase2i const *param2, int param3);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp_7_v_psp_8_v_psp_9_v_psp_10_v_psp_11_v_psp_12_v_psp(NodePath *param0, CPT_InternalName *param1, PTA_LVecBase2i const *param2);
EXPORT_FUNC void NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi_7_v_pspi_8_v_pspi_9_v_pspi_10_v_pspi_11_v_pspi_12_v_pspi_13_v_pspi(NodePath *param0, CPT_InternalName *param1, PTA_LVecBase3 const *param2, int param3);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp_7_v_psp_8_v_psp_9_v_psp_10_v_psp_11_v_psp_12_v_psp_13_v_psp(NodePath *param0, CPT_InternalName *param1, PTA_LVecBase3 const *param2);
EXPORT_FUNC void NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi_7_v_pspi_8_v_pspi_9_v_pspi_10_v_pspi_11_v_pspi_12_v_pspi_13_v_pspi_14_v_pspi(NodePath *param0, CPT_InternalName *param1, PTA_LVecBase3i const *param2, int param3);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp_7_v_psp_8_v_psp_9_v_psp_10_v_psp_11_v_psp_12_v_psp_13_v_psp_14_v_psp(NodePath *param0, CPT_InternalName *param1, PTA_LVecBase3i const *param2);
EXPORT_FUNC void NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi_7_v_pspi_8_v_pspi_9_v_pspi_10_v_pspi_11_v_pspi_12_v_pspi_13_v_pspi_14_v_pspi_15_v_pspi(NodePath *param0, CPT_InternalName *param1, PTA_LVecBase4 const *param2, int param3);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp_7_v_psp_8_v_psp_9_v_psp_10_v_psp_11_v_psp_12_v_psp_13_v_psp_14_v_psp_15_v_psp(NodePath *param0, CPT_InternalName *param1, PTA_LVecBase4 const *param2);
EXPORT_FUNC void NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi_7_v_pspi_8_v_pspi_9_v_pspi_10_v_pspi_11_v_pspi_12_v_pspi_13_v_pspi_14_v_pspi_15_v_pspi_16_v_pspi(NodePath *param0, CPT_InternalName *param1, PTA_LVecBase4i const *param2, int param3);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp_7_v_psp_8_v_psp_9_v_psp_10_v_psp_11_v_psp_12_v_psp_13_v_psp_14_v_psp_15_v_psp_16_v_psp(NodePath *param0, CPT_InternalName *param1, PTA_LVecBase4i const *param2);
EXPORT_FUNC void NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi_7_v_pspi_8_v_pspi_9_v_pspi_10_v_pspi_11_v_pspi_12_v_pspi_13_v_pspi_14_v_pspi_15_v_pspi_16_v_pspi_17_v_pspi(NodePath *param0, CPT_InternalName *param1, PTA_double const *param2, int param3);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp_7_v_psp_8_v_psp_9_v_psp_10_v_psp_11_v_psp_12_v_psp_13_v_psp_14_v_psp_15_v_psp_16_v_psp_17_v_psp(NodePath *param0, CPT_InternalName *param1, PTA_double const *param2);
EXPORT_FUNC void NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi_7_v_pspi_8_v_pspi_9_v_pspi_10_v_pspi_11_v_pspi_12_v_pspi_13_v_pspi_14_v_pspi_15_v_pspi_16_v_pspi_17_v_pspi_18_v_pspi(NodePath *param0, CPT_InternalName *param1, PTA_float const *param2, int param3);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp_7_v_psp_8_v_psp_9_v_psp_10_v_psp_11_v_psp_12_v_psp_13_v_psp_14_v_psp_15_v_psp_16_v_psp_17_v_psp_18_v_psp(NodePath *param0, CPT_InternalName *param1, PTA_float const *param2);
EXPORT_FUNC void NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi_7_v_pspi_8_v_pspi_9_v_pspi_10_v_pspi_11_v_pspi_12_v_pspi_13_v_pspi_14_v_pspi_15_v_pspi_16_v_pspi_17_v_pspi_18_v_pspi_19_v_pspi(NodePath *param0, CPT_InternalName *param1, PTA_int const *param2, int param3);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp_7_v_psp_8_v_psp_9_v_psp_10_v_psp_11_v_psp_12_v_psp_13_v_psp_14_v_psp_15_v_psp_16_v_psp_17_v_psp_18_v_psp_19_v_psp(NodePath *param0, CPT_InternalName *param1, PTA_int const *param2);
EXPORT_FUNC void NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi_7_v_pspi_8_v_pspi_9_v_pspi_10_v_pspi_11_v_pspi_12_v_pspi_13_v_pspi_14_v_pspi_15_v_pspi_16_v_pspi_17_v_pspi_18_v_pspi_19_v_pspi_20_v_pspi(NodePath *param0, CPT_InternalName *param1, ShaderBuffer *param2, int param3);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp_7_v_psp_8_v_psp_9_v_psp_10_v_psp_11_v_psp_12_v_psp_13_v_psp_14_v_psp_15_v_psp_16_v_psp_17_v_psp_18_v_psp_19_v_psp_20_v_psp(NodePath *param0, CPT_InternalName *param1, ShaderBuffer *param2);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psppi(NodePath *param0, CPT_InternalName *param1, Texture *param2, SamplerState const *param3, int param4);
EXPORT_FUNC void NodePath_C_set_shader_input_v_pspp(NodePath *param0, CPT_InternalName *param1, Texture *param2, SamplerState const *param3);
EXPORT_FUNC void NodePath_C_set_shader_input_v_pspBBiii(NodePath *param0, CPT_InternalName *param1, Texture *param2, bool param3, bool param4, int param5, int param6, int param7);
EXPORT_FUNC void NodePath_C_set_shader_input_v_pspBBii(NodePath *param0, CPT_InternalName *param1, Texture *param2, bool param3, bool param4, int param5, int param6);
EXPORT_FUNC void NodePath_C_set_shader_input_v_pspBBi(NodePath *param0, CPT_InternalName *param1, Texture *param2, bool param3, bool param4, int param5);
EXPORT_FUNC void NodePath_C_set_shader_input_v_pspBB(NodePath *param0, CPT_InternalName *param1, Texture *param2, bool param3, bool param4);
EXPORT_FUNC void NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi_7_v_pspi_8_v_pspi_9_v_pspi_10_v_pspi_11_v_pspi_12_v_pspi_13_v_pspi_14_v_pspi_15_v_pspi_16_v_pspi_17_v_pspi_18_v_pspi_19_v_pspi_20_v_pspi_21_v_pspi(NodePath *param0, CPT_InternalName *param1, Texture *param2, int param3);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp_7_v_psp_8_v_psp_9_v_psp_10_v_psp_11_v_psp_12_v_psp_13_v_psp_14_v_psp_15_v_psp_16_v_psp_17_v_psp_18_v_psp_19_v_psp_20_v_psp_21_v_psp(NodePath *param0, CPT_InternalName *param1, Texture *param2);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psiiiii(NodePath *param0, CPT_InternalName *param1, int param2, int param3, int param4, int param5, int param6);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psiiii(NodePath *param0, CPT_InternalName *param1, int param2, int param3, int param4, int param5);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psiii(NodePath *param0, CPT_InternalName *param1, int param2, int param3, int param4);
EXPORT_FUNC void NodePath_C_set_shader_input_v_psii(NodePath *param0, CPT_InternalName *param1, int param2, int param3);
EXPORT_FUNC void NodePath_C_set_shader_input_v_pp(NodePath *param0, ShaderInput *param1);
EXPORT_FUNC void NodePath_C_set_shader_input_v_pp_1_v_pp(NodePath *param0, ShaderInput const *param1);
EXPORT_FUNC void NodePath_C_clear_shader_input_v_ps(NodePath *param0, CPT_InternalName *param1);
EXPORT_FUNC void NodePath_C_set_instance_count_v_pi(NodePath *param0, int param1);
EXPORT_FUNC Shader const * NodePath_C_get_shader_p_p(NodePath const *param0);
EXPORT_FUNC ShaderInput * NodePath_C_get_shader_input_p_ps(NodePath const *param0, CPT_InternalName *param1);
EXPORT_FUNC int NodePath_C_get_instance_count_i_p(NodePath const *param0);
EXPORT_FUNC void NodePath_C_set_tex_transform_v_pppp(NodePath *param0, NodePath const *param1, TextureStage *param2, TransformState const *param3);
EXPORT_FUNC void NodePath_C_set_tex_transform_v_ppp(NodePath *param0, TextureStage *param1, TransformState const *param2);
EXPORT_FUNC void NodePath_C_clear_tex_transform_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_clear_tex_transform_v_pp(NodePath *param0, TextureStage *param1);
EXPORT_FUNC bool NodePath_C_has_tex_transform_B_pp(NodePath const *param0, TextureStage *param1);
EXPORT_FUNC ConstPointerTo< TransformState > * NodePath_C_get_tex_transform_p_ppp(NodePath const *param0, NodePath const *param1, TextureStage *param2);
EXPORT_FUNC ConstPointerTo< TransformState > * NodePath_C_get_tex_transform_p_pp(NodePath const *param0, TextureStage *param1);
EXPORT_FUNC void NodePath_C_set_tex_offset_v_pppp(NodePath *param0, NodePath const *param1, TextureStage *param2, LVecBase2 const *param3);
EXPORT_FUNC void NodePath_C_set_tex_offset_v_pppff(NodePath *param0, NodePath const *param1, TextureStage *param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC void NodePath_C_set_tex_offset_v_ppp(NodePath *param0, TextureStage *param1, LVecBase2 const *param2);
EXPORT_FUNC void NodePath_C_set_tex_offset_v_ppff(NodePath *param0, TextureStage *param1, PN_stdfloat param2, PN_stdfloat param3);
EXPORT_FUNC void NodePath_C_set_tex_rotate_v_pppf(NodePath *param0, NodePath const *param1, TextureStage *param2, PN_stdfloat param3);
EXPORT_FUNC void NodePath_C_set_tex_rotate_v_ppf(NodePath *param0, TextureStage *param1, PN_stdfloat param2);
EXPORT_FUNC void NodePath_C_set_tex_scale_v_pppp(NodePath *param0, NodePath const *param1, TextureStage *param2, LVecBase2 const *param3);
EXPORT_FUNC void NodePath_C_set_tex_scale_v_pppp_1_v_pppp(NodePath *param0, NodePath const *param1, TextureStage *param2, LVecBase3 const *param3);
EXPORT_FUNC void NodePath_C_set_tex_scale_v_pppf(NodePath *param0, NodePath const *param1, TextureStage *param2, PN_stdfloat param3);
EXPORT_FUNC void NodePath_C_set_tex_scale_v_pppff(NodePath *param0, NodePath const *param1, TextureStage *param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC void NodePath_C_set_tex_scale_v_pppfff(NodePath *param0, NodePath const *param1, TextureStage *param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5);
EXPORT_FUNC void NodePath_C_set_tex_scale_v_ppp(NodePath *param0, TextureStage *param1, LVecBase2 const *param2);
EXPORT_FUNC void NodePath_C_set_tex_scale_v_ppp_1_v_ppp(NodePath *param0, TextureStage *param1, LVecBase3 const *param2);
EXPORT_FUNC void NodePath_C_set_tex_scale_v_ppf(NodePath *param0, TextureStage *param1, PN_stdfloat param2);
EXPORT_FUNC void NodePath_C_set_tex_scale_v_ppff(NodePath *param0, TextureStage *param1, PN_stdfloat param2, PN_stdfloat param3);
EXPORT_FUNC void NodePath_C_set_tex_scale_v_ppfff(NodePath *param0, TextureStage *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC LVecBase2 * NodePath_C_get_tex_offset_p_ppp(NodePath const *param0, NodePath const *param1, TextureStage *param2);
EXPORT_FUNC LVecBase2 * NodePath_C_get_tex_offset_p_pp(NodePath const *param0, TextureStage *param1);
EXPORT_FUNC PN_stdfloat NodePath_C_get_tex_rotate_f_ppp(NodePath const *param0, NodePath const *param1, TextureStage *param2);
EXPORT_FUNC PN_stdfloat NodePath_C_get_tex_rotate_f_pp(NodePath const *param0, TextureStage *param1);
EXPORT_FUNC LVecBase2 * NodePath_C_get_tex_scale_p_ppp(NodePath const *param0, NodePath const *param1, TextureStage *param2);
EXPORT_FUNC LVecBase2 * NodePath_C_get_tex_scale_p_pp(NodePath const *param0, TextureStage *param1);
EXPORT_FUNC void NodePath_C_set_tex_pos_v_pppp(NodePath *param0, NodePath const *param1, TextureStage *param2, LVecBase3 const *param3);
EXPORT_FUNC void NodePath_C_set_tex_pos_v_pppfff(NodePath *param0, NodePath const *param1, TextureStage *param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5);
EXPORT_FUNC void NodePath_C_set_tex_pos_v_ppp(NodePath *param0, TextureStage *param1, LVecBase3 const *param2);
EXPORT_FUNC void NodePath_C_set_tex_pos_v_ppfff(NodePath *param0, TextureStage *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC void NodePath_C_set_tex_hpr_v_pppp(NodePath *param0, NodePath const *param1, TextureStage *param2, LVecBase3 const *param3);
EXPORT_FUNC void NodePath_C_set_tex_hpr_v_pppfff(NodePath *param0, NodePath const *param1, TextureStage *param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5);
EXPORT_FUNC void NodePath_C_set_tex_hpr_v_ppp(NodePath *param0, TextureStage *param1, LVecBase3 const *param2);
EXPORT_FUNC void NodePath_C_set_tex_hpr_v_ppfff(NodePath *param0, TextureStage *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC LVecBase3 * NodePath_C_get_tex_pos_p_ppp(NodePath const *param0, NodePath const *param1, TextureStage *param2);
EXPORT_FUNC LVecBase3 * NodePath_C_get_tex_pos_p_pp(NodePath const *param0, TextureStage *param1);
EXPORT_FUNC LVecBase3 * NodePath_C_get_tex_hpr_p_ppp(NodePath const *param0, NodePath const *param1, TextureStage *param2);
EXPORT_FUNC LVecBase3 * NodePath_C_get_tex_hpr_p_pp(NodePath const *param0, TextureStage *param1);
EXPORT_FUNC LVecBase3 * NodePath_C_get_tex_scale_3d_p_ppp(NodePath const *param0, NodePath const *param1, TextureStage *param2);
EXPORT_FUNC LVecBase3 * NodePath_C_get_tex_scale_3d_p_pp(NodePath const *param0, TextureStage *param1);
EXPORT_FUNC void NodePath_C_set_tex_gen_v_ppppi(NodePath *param0, TextureStage *param1, RenderAttrib::TexGenMode param2, LTexCoord3 const *param3, int param4);
EXPORT_FUNC void NodePath_C_set_tex_gen_v_pppp(NodePath *param0, TextureStage *param1, RenderAttrib::TexGenMode param2, LTexCoord3 const *param3);
EXPORT_FUNC void NodePath_C_set_tex_gen_v_pppi(NodePath *param0, TextureStage *param1, RenderAttrib::TexGenMode param2, int param3);
EXPORT_FUNC void NodePath_C_set_tex_gen_v_ppp(NodePath *param0, TextureStage *param1, RenderAttrib::TexGenMode param2);
EXPORT_FUNC void NodePath_C_clear_tex_gen_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_clear_tex_gen_v_pp(NodePath *param0, TextureStage *param1);
EXPORT_FUNC bool NodePath_C_has_tex_gen_B_pp(NodePath const *param0, TextureStage *param1);
EXPORT_FUNC RenderAttrib::TexGenMode NodePath_C_get_tex_gen_p_pp(NodePath const *param0, TextureStage *param1);
EXPORT_FUNC void NodePath_C_set_tex_projector_v_ppppi(NodePath *param0, TextureStage *param1, NodePath const *param2, NodePath const *param3, int param4);
EXPORT_FUNC void NodePath_C_set_tex_projector_v_pppp(NodePath *param0, TextureStage *param1, NodePath const *param2, NodePath const *param3);
EXPORT_FUNC void NodePath_C_clear_tex_projector_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_clear_tex_projector_v_pp(NodePath *param0, TextureStage *param1);
EXPORT_FUNC bool NodePath_C_has_tex_projector_B_pp(NodePath const *param0, TextureStage *param1);
EXPORT_FUNC NodePath * NodePath_C_get_tex_projector_from_p_pp(NodePath const *param0, TextureStage *param1);
EXPORT_FUNC NodePath * NodePath_C_get_tex_projector_to_p_pp(NodePath const *param0, TextureStage *param1);
EXPORT_FUNC void NodePath_C_project_texture_v_pppp(NodePath *param0, TextureStage *param1, Texture *param2, NodePath const *param3);
EXPORT_FUNC void NodePath_C_clear_project_texture_v_pp(NodePath *param0, TextureStage *param1);
EXPORT_FUNC bool NodePath_C_has_texcoord_B_ps(NodePath const *param0, char const *param1);
EXPORT_FUNC bool NodePath_C_has_vertex_column_B_ps(NodePath const *param0, InternalName const *param1);
EXPORT_FUNC InternalNameCollection * NodePath_C_find_all_vertex_columns_p_p(NodePath const *param0);
EXPORT_FUNC InternalNameCollection * NodePath_C_find_all_vertex_columns_p_ps(NodePath const *param0, char const *param1);
EXPORT_FUNC InternalNameCollection * NodePath_C_find_all_texcoords_p_p(NodePath const *param0);
EXPORT_FUNC InternalNameCollection * NodePath_C_find_all_texcoords_p_ps(NodePath const *param0, char const *param1);
EXPORT_FUNC Texture * NodePath_C_find_texture_p_pp(NodePath const *param0, TextureStage *param1);
EXPORT_FUNC Texture * NodePath_C_find_texture_p_ps(NodePath const *param0, char const *param1);
EXPORT_FUNC TextureCollection * NodePath_C_find_all_textures_p_p(NodePath const *param0);
EXPORT_FUNC TextureCollection * NodePath_C_find_all_textures_p_pp(NodePath const *param0, TextureStage *param1);
EXPORT_FUNC TextureCollection * NodePath_C_find_all_textures_p_ps(NodePath const *param0, char const *param1);
EXPORT_FUNC TextureStage * NodePath_C_find_texture_stage_p_ps(NodePath const *param0, char const *param1);
EXPORT_FUNC TextureStageCollection * NodePath_C_find_all_texture_stages_p_p(NodePath const *param0);
EXPORT_FUNC TextureStageCollection * NodePath_C_find_all_texture_stages_p_ps(NodePath const *param0, char const *param1);
EXPORT_FUNC void NodePath_C_unify_texture_stages_v_pp(NodePath *param0, TextureStage *param1);
EXPORT_FUNC Material * NodePath_C_find_material_p_ps(NodePath const *param0, char const *param1);
EXPORT_FUNC MaterialCollection * NodePath_C_find_all_materials_p_p(NodePath const *param0);
EXPORT_FUNC MaterialCollection * NodePath_C_find_all_materials_p_ps(NodePath const *param0, char const *param1);
EXPORT_FUNC void NodePath_C_set_material_v_ppi(NodePath *param0, Material *param1, int param2);
EXPORT_FUNC void NodePath_C_set_material_v_pp(NodePath *param0, Material *param1);
EXPORT_FUNC void NodePath_C_set_material_off_v_pi(NodePath *param0, int param1);
EXPORT_FUNC void NodePath_C_set_material_off_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_clear_material_v_p(NodePath *param0);
EXPORT_FUNC bool NodePath_C_has_material_B_p(NodePath const *param0);
EXPORT_FUNC PointerTo< Material > * NodePath_C_get_material_p_p(NodePath const *param0);
EXPORT_FUNC void NodePath_C_replace_material_v_ppp(NodePath *param0, Material *param1, Material *param2);
EXPORT_FUNC void NodePath_C_set_fog_v_ppi(NodePath *param0, Fog *param1, int param2);
EXPORT_FUNC void NodePath_C_set_fog_v_pp(NodePath *param0, Fog *param1);
EXPORT_FUNC void NodePath_C_set_fog_off_v_pi(NodePath *param0, int param1);
EXPORT_FUNC void NodePath_C_set_fog_off_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_clear_fog_v_p(NodePath *param0);
EXPORT_FUNC bool NodePath_C_has_fog_B_p(NodePath const *param0);
EXPORT_FUNC bool NodePath_C_has_fog_off_B_p(NodePath const *param0);
EXPORT_FUNC Fog * NodePath_C_get_fog_p_p(NodePath const *param0);
EXPORT_FUNC void NodePath_C_set_render_mode_wireframe_v_pi(NodePath *param0, int param1);
EXPORT_FUNC void NodePath_C_set_render_mode_wireframe_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_set_render_mode_filled_v_pi(NodePath *param0, int param1);
EXPORT_FUNC void NodePath_C_set_render_mode_filled_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_set_render_mode_filled_wireframe_v_ppi(NodePath *param0, LColor const *param1, int param2);
EXPORT_FUNC void NodePath_C_set_render_mode_filled_wireframe_v_pp(NodePath *param0, LColor const *param1);
EXPORT_FUNC void NodePath_C_set_render_mode_thickness_v_pfi(NodePath *param0, PN_stdfloat param1, int param2);
EXPORT_FUNC void NodePath_C_set_render_mode_thickness_v_pf(NodePath *param0, PN_stdfloat param1);
EXPORT_FUNC void NodePath_C_set_render_mode_perspective_v_pBi(NodePath *param0, bool param1, int param2);
EXPORT_FUNC void NodePath_C_set_render_mode_perspective_v_pB(NodePath *param0, bool param1);
EXPORT_FUNC void NodePath_C_set_render_mode_v_ppfi(NodePath *param0, RenderModeAttrib::Mode param1, PN_stdfloat param2, int param3);
EXPORT_FUNC void NodePath_C_set_render_mode_v_ppf(NodePath *param0, RenderModeAttrib::Mode param1, PN_stdfloat param2);
EXPORT_FUNC void NodePath_C_clear_render_mode_v_p(NodePath *param0);
EXPORT_FUNC bool NodePath_C_has_render_mode_B_p(NodePath const *param0);
EXPORT_FUNC RenderModeAttrib::Mode NodePath_C_get_render_mode_p_p(NodePath const *param0);
EXPORT_FUNC PN_stdfloat NodePath_C_get_render_mode_thickness_f_p(NodePath const *param0);
EXPORT_FUNC bool NodePath_C_get_render_mode_perspective_B_p(NodePath const *param0);
EXPORT_FUNC void NodePath_C_set_two_sided_v_pBi(NodePath *param0, bool param1, int param2);
EXPORT_FUNC void NodePath_C_set_two_sided_v_pB(NodePath *param0, bool param1);
EXPORT_FUNC void NodePath_C_clear_two_sided_v_p(NodePath *param0);
EXPORT_FUNC bool NodePath_C_has_two_sided_B_p(NodePath const *param0);
EXPORT_FUNC bool NodePath_C_get_two_sided_B_p(NodePath const *param0);
EXPORT_FUNC void NodePath_C_set_depth_test_v_pBi(NodePath *param0, bool param1, int param2);
EXPORT_FUNC void NodePath_C_set_depth_test_v_pB(NodePath *param0, bool param1);
EXPORT_FUNC void NodePath_C_clear_depth_test_v_p(NodePath *param0);
EXPORT_FUNC bool NodePath_C_has_depth_test_B_p(NodePath const *param0);
EXPORT_FUNC bool NodePath_C_get_depth_test_B_p(NodePath const *param0);
EXPORT_FUNC void NodePath_C_set_depth_write_v_pBi(NodePath *param0, bool param1, int param2);
EXPORT_FUNC void NodePath_C_set_depth_write_v_pB(NodePath *param0, bool param1);
EXPORT_FUNC void NodePath_C_clear_depth_write_v_p(NodePath *param0);
EXPORT_FUNC bool NodePath_C_has_depth_write_B_p(NodePath const *param0);
EXPORT_FUNC bool NodePath_C_get_depth_write_B_p(NodePath const *param0);
EXPORT_FUNC void NodePath_C_set_depth_offset_v_pii(NodePath *param0, int param1, int param2);
EXPORT_FUNC void NodePath_C_set_depth_offset_v_pi(NodePath *param0, int param1);
EXPORT_FUNC void NodePath_C_clear_depth_offset_v_p(NodePath *param0);
EXPORT_FUNC bool NodePath_C_has_depth_offset_B_p(NodePath const *param0);
EXPORT_FUNC int NodePath_C_get_depth_offset_i_p(NodePath const *param0);
EXPORT_FUNC void NodePath_C_do_billboard_axis_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2);
EXPORT_FUNC void NodePath_C_do_billboard_point_eye_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2);
EXPORT_FUNC void NodePath_C_do_billboard_point_world_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2);
EXPORT_FUNC void NodePath_C_set_billboard_axis_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2);
EXPORT_FUNC void NodePath_C_set_billboard_axis_v_pf(NodePath *param0, PN_stdfloat param1);
EXPORT_FUNC void NodePath_C_set_billboard_axis_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_set_billboard_point_eye_v_ppfB(NodePath *param0, NodePath const *param1, PN_stdfloat param2, bool param3);
EXPORT_FUNC void NodePath_C_set_billboard_point_eye_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2);
EXPORT_FUNC void NodePath_C_set_billboard_point_eye_v_pfB(NodePath *param0, PN_stdfloat param1, bool param2);
EXPORT_FUNC void NodePath_C_set_billboard_point_eye_v_pf(NodePath *param0, PN_stdfloat param1);
EXPORT_FUNC void NodePath_C_set_billboard_point_eye_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_set_billboard_point_world_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2);
EXPORT_FUNC void NodePath_C_set_billboard_point_world_v_pf(NodePath *param0, PN_stdfloat param1);
EXPORT_FUNC void NodePath_C_set_billboard_point_world_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_clear_billboard_v_p(NodePath *param0);
EXPORT_FUNC bool NodePath_C_has_billboard_B_p(NodePath const *param0);
EXPORT_FUNC void NodePath_C_set_compass_v_pp(NodePath *param0, NodePath const *param1);
EXPORT_FUNC void NodePath_C_set_compass_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_clear_compass_v_p(NodePath *param0);
EXPORT_FUNC bool NodePath_C_has_compass_B_p(NodePath const *param0);
EXPORT_FUNC void NodePath_C_set_transparency_v_ppi(NodePath *param0, TransparencyAttrib::Mode param1, int param2);
EXPORT_FUNC void NodePath_C_set_transparency_v_pp(NodePath *param0, TransparencyAttrib::Mode param1);
EXPORT_FUNC void NodePath_C_clear_transparency_v_p(NodePath *param0);
EXPORT_FUNC bool NodePath_C_has_transparency_B_p(NodePath const *param0);
EXPORT_FUNC TransparencyAttrib::Mode NodePath_C_get_transparency_p_p(NodePath const *param0);
EXPORT_FUNC void NodePath_C_set_logic_op_v_ppi(NodePath *param0, LogicOpAttrib::Operation param1, int param2);
EXPORT_FUNC void NodePath_C_set_logic_op_v_pp(NodePath *param0, LogicOpAttrib::Operation param1);
EXPORT_FUNC void NodePath_C_clear_logic_op_v_p(NodePath *param0);
EXPORT_FUNC bool NodePath_C_has_logic_op_B_p(NodePath const *param0);
EXPORT_FUNC LogicOpAttrib::Operation NodePath_C_get_logic_op_p_p(NodePath const *param0);
EXPORT_FUNC void NodePath_C_set_antialias_v_pHi(NodePath *param0, unsigned short int param1, int param2);
EXPORT_FUNC void NodePath_C_set_antialias_v_pH(NodePath *param0, unsigned short int param1);
EXPORT_FUNC void NodePath_C_clear_antialias_v_p(NodePath *param0);
EXPORT_FUNC bool NodePath_C_has_antialias_B_p(NodePath const *param0);
EXPORT_FUNC unsigned short int NodePath_C_get_antialias_H_p(NodePath const *param0);
EXPORT_FUNC bool NodePath_C_has_audio_volume_B_p(NodePath const *param0);
EXPORT_FUNC void NodePath_C_clear_audio_volume_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_set_audio_volume_v_pfi(NodePath *param0, PN_stdfloat param1, int param2);
EXPORT_FUNC void NodePath_C_set_audio_volume_v_pf(NodePath *param0, PN_stdfloat param1);
EXPORT_FUNC void NodePath_C_set_audio_volume_off_v_pi(NodePath *param0, int param1);
EXPORT_FUNC void NodePath_C_set_audio_volume_off_v_p(NodePath *param0);
EXPORT_FUNC PN_stdfloat NodePath_C_get_audio_volume_f_p(NodePath const *param0);
EXPORT_FUNC PN_stdfloat NodePath_C_get_net_audio_volume_f_p(NodePath const *param0);
EXPORT_FUNC void NodePath_C_adjust_all_priorities_v_pi(NodePath *param0, int param1);
EXPORT_FUNC void NodePath_C_show_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_show_v_pp(NodePath *param0, DrawMask *param1);
EXPORT_FUNC void NodePath_C_show_through_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_show_through_v_pp(NodePath *param0, DrawMask *param1);
EXPORT_FUNC void NodePath_C_hide_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_hide_v_pp(NodePath *param0, DrawMask *param1);
EXPORT_FUNC bool NodePath_C_is_hidden_B_pp(NodePath const *param0, DrawMask *param1);
EXPORT_FUNC bool NodePath_C_is_hidden_B_p(NodePath const *param0);
EXPORT_FUNC NodePath * NodePath_C_get_hidden_ancestor_p_ppp(NodePath const *param0, DrawMask *param1, Thread *param2);
EXPORT_FUNC NodePath * NodePath_C_get_hidden_ancestor_p_pp(NodePath const *param0, DrawMask *param1);
EXPORT_FUNC NodePath * NodePath_C_get_hidden_ancestor_p_p(NodePath const *param0);
EXPORT_FUNC void NodePath_C_stash_v_pip(NodePath *param0, int param1, Thread *param2);
EXPORT_FUNC void NodePath_C_stash_v_pi(NodePath *param0, int param1);
EXPORT_FUNC void NodePath_C_stash_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_unstash_v_pip(NodePath *param0, int param1, Thread *param2);
EXPORT_FUNC void NodePath_C_unstash_v_pi(NodePath *param0, int param1);
EXPORT_FUNC void NodePath_C_unstash_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_unstash_all_v_pp(NodePath *param0, Thread *param1);
EXPORT_FUNC void NodePath_C_unstash_all_v_p(NodePath *param0);
EXPORT_FUNC bool NodePath_C_is_stashed_B_p(NodePath const *param0);
EXPORT_FUNC NodePath * NodePath_C_get_stashed_ancestor_p_pp(NodePath const *param0, Thread *param1);
EXPORT_FUNC NodePath * NodePath_C_get_stashed_ancestor_p_p(NodePath const *param0);
EXPORT_FUNC CollideMask * NodePath_C_get_collide_mask_p_p(NodePath const *param0);
EXPORT_FUNC void NodePath_C_set_collide_mask_v_pppi(NodePath *param0, CollideMask *param1, CollideMask *param2, int param3);
EXPORT_FUNC void NodePath_C_set_collide_mask_v_ppp(NodePath *param0, CollideMask *param1, CollideMask *param2);
EXPORT_FUNC void NodePath_C_set_collide_mask_v_pp(NodePath *param0, CollideMask *param1);
EXPORT_FUNC int NodePath_C_compare_to_i_pp(NodePath const *param0, NodePath const *param1);
EXPORT_FUNC int NodePath_C_compare_to_i_pp_1_i_pp(NodePath const *param0, WeakNodePath const *param1);
EXPORT_FUNC bool NodePath_C_verify_complete_B_pp(NodePath const *param0, Thread *param1);
EXPORT_FUNC bool NodePath_C_verify_complete_B_p(NodePath const *param0);
EXPORT_FUNC void NodePath_C_premunge_scene_v_pp(NodePath *param0, GraphicsStateGuardianBase *param1);
EXPORT_FUNC void NodePath_C_premunge_scene_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_prepare_scene_v_pp(NodePath *param0, GraphicsStateGuardianBase *param1);
EXPORT_FUNC void NodePath_C_show_bounds_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_show_tight_bounds_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_hide_bounds_v_p(NodePath *param0);
EXPORT_FUNC PointerTo< BoundingVolume > * NodePath_C_get_bounds_p_pp(NodePath const *param0, Thread *param1);
EXPORT_FUNC PointerTo< BoundingVolume > * NodePath_C_get_bounds_p_p(NodePath const *param0);
EXPORT_FUNC void NodePath_C_force_recompute_bounds_v_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_write_bounds_v_pp(NodePath const *param0, std::ostream *param1);
EXPORT_FUNC bool NodePath_C_calc_tight_bounds_B_ppppp(NodePath const *param0, LPoint3 *param1, LPoint3 *param2, NodePath const *param3, Thread *param4);
EXPORT_FUNC bool NodePath_C_calc_tight_bounds_B_pppp(NodePath const *param0, LPoint3 *param1, LPoint3 *param2, NodePath const *param3);
EXPORT_FUNC bool NodePath_C_calc_tight_bounds_B_ppp(NodePath const *param0, LPoint3 *param1, LPoint3 *param2);
EXPORT_FUNC int NodePath_C_flatten_light_i_p(NodePath *param0);
EXPORT_FUNC int NodePath_C_flatten_medium_i_p(NodePath *param0);
EXPORT_FUNC int NodePath_C_flatten_strong_i_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_apply_texture_colors_v_p(NodePath *param0);
EXPORT_FUNC int NodePath_C_clear_model_nodes_i_p(NodePath *param0);
EXPORT_FUNC void NodePath_C_set_tag_v_pss(NodePath *param0, char const *param1, char const *param2);
EXPORT_FUNC char const * NodePath_C_get_tag_s_ps(NodePath const *param0, char const *param1);
EXPORT_FUNC void NodePath_C_get_tag_keys_v_pp(NodePath const *param0, vector_string *param1);
EXPORT_FUNC bool NodePath_C_has_tag_B_ps(NodePath const *param0, char const *param1);
EXPORT_FUNC void NodePath_C_clear_tag_v_ps(NodePath *param0, char const *param1);
EXPORT_FUNC char const * NodePath_C_get_net_tag_s_ps(NodePath const *param0, char const *param1);
EXPORT_FUNC bool NodePath_C_has_net_tag_B_ps(NodePath const *param0, char const *param1);
EXPORT_FUNC NodePath * NodePath_C_find_net_tag_p_ps(NodePath const *param0, char const *param1);
EXPORT_FUNC void NodePath_C_list_tags_v_p(NodePath const *param0);
EXPORT_FUNC void NodePath_C_set_name_v_ps(NodePath *param0, char const *param1);
EXPORT_FUNC char const * NodePath_C_get_name_s_p(NodePath const *param0);
EXPORT_FUNC bool NodePath_C_write_bam_file_B_pp(NodePath const *param0, Filename const *param1);
EXPORT_FUNC bool NodePath_C_write_bam_stream_B_pp(NodePath const *param0, std::ostream *param1);
EXPORT_FUNC vector_uchar NodePath_C_encode_to_bam_stream_p_p(NodePath const *param0);
EXPORT_FUNC bool NodePath_C_encode_to_bam_stream_B_ppp(NodePath const *param0, vector_uchar *param1, BamWriter *param2);
EXPORT_FUNC bool NodePath_C_encode_to_bam_stream_B_pp(NodePath const *param0, vector_uchar *param1);
EXPORT_FUNC NodePath * NodePath_C_decode_from_bam_stream_p_pp(vector_uchar param0, BamReader *param1);
EXPORT_FUNC NodePath * NodePath_C_decode_from_bam_stream_p_p(vector_uchar param0);
EXPORT_FUNC void NodePath_C_write_datagram_v_ppp(NodePath const *param0, BamWriter *param1, Datagram *param2);
EXPORT_FUNC void NodePath_C_fillin_v_ppp(NodePath *param0, DatagramIterator *param1, BamReader *param2);
EXPORT_FUNC int NodePath_C_get_class_type_i_v();
EXPORT_FUNC void NodePath_C_init_type_v_v();
EXPORT_FUNC CActor * NodePath_C_downcast_to_CActor_p_p(NodePath *param0);


// NodePathCollection

EXPORT_FUNC NodePathCollection * NodePathCollection_C_ctor_p_v();
EXPORT_FUNC NodePathCollection * NodePathCollection_C_ctor_p_p(NodePathCollection const *param0);
EXPORT_FUNC void NodePathCollection_C_add_path_v_pp(NodePathCollection *param0, NodePath const *param1);
EXPORT_FUNC bool NodePathCollection_C_remove_path_B_pp(NodePathCollection *param0, NodePath const *param1);
EXPORT_FUNC void NodePathCollection_C_add_paths_from_v_pp(NodePathCollection *param0, NodePathCollection const *param1);
EXPORT_FUNC void NodePathCollection_C_remove_paths_from_v_pp(NodePathCollection *param0, NodePathCollection const *param1);
EXPORT_FUNC void NodePathCollection_C_remove_duplicate_paths_v_p(NodePathCollection *param0);
EXPORT_FUNC bool NodePathCollection_C_has_path_B_pp(NodePathCollection const *param0, NodePath const *param1);
EXPORT_FUNC void NodePathCollection_C_clear_v_p(NodePathCollection *param0);
EXPORT_FUNC void NodePathCollection_C_reserve_v_pl(NodePathCollection *param0, std::size_t param1);
EXPORT_FUNC bool NodePathCollection_C_is_empty_B_p(NodePathCollection const *param0);
EXPORT_FUNC int NodePathCollection_C_get_num_paths_i_p(NodePathCollection const *param0);
EXPORT_FUNC NodePath * NodePathCollection_C_get_path_p_pi(NodePathCollection const *param0, int param1);
EXPORT_FUNC std::size_t NodePathCollection_C_size_l_p(NodePathCollection const *param0);
EXPORT_FUNC void NodePathCollection_C_append_v_pp(NodePathCollection *param0, NodePath const *param1);
EXPORT_FUNC void NodePathCollection_C_extend_v_pp(NodePathCollection *param0, NodePathCollection const *param1);
EXPORT_FUNC void NodePathCollection_C_ls_v_p(NodePathCollection const *param0);
EXPORT_FUNC void NodePathCollection_C_ls_v_ppi(NodePathCollection const *param0, std::ostream *param1, int param2);
EXPORT_FUNC void NodePathCollection_C_ls_v_pp(NodePathCollection const *param0, std::ostream *param1);
EXPORT_FUNC NodePathCollection * NodePathCollection_C_find_all_matches_p_ps(NodePathCollection const *param0, char const *param1);
EXPORT_FUNC void NodePathCollection_C_reparent_to_v_pp(NodePathCollection *param0, NodePath const *param1);
EXPORT_FUNC void NodePathCollection_C_wrt_reparent_to_v_pp(NodePathCollection *param0, NodePath const *param1);
EXPORT_FUNC void NodePathCollection_C_show_v_p(NodePathCollection *param0);
EXPORT_FUNC void NodePathCollection_C_hide_v_p(NodePathCollection *param0);
EXPORT_FUNC void NodePathCollection_C_stash_v_p(NodePathCollection *param0);
EXPORT_FUNC void NodePathCollection_C_unstash_v_p(NodePathCollection *param0);
EXPORT_FUNC void NodePathCollection_C_detach_v_p(NodePathCollection *param0);
EXPORT_FUNC CollideMask * NodePathCollection_C_get_collide_mask_p_p(NodePathCollection const *param0);
EXPORT_FUNC void NodePathCollection_C_set_collide_mask_v_pppi(NodePathCollection *param0, CollideMask *param1, CollideMask *param2, int param3);
EXPORT_FUNC void NodePathCollection_C_set_collide_mask_v_ppp(NodePathCollection *param0, CollideMask *param1, CollideMask *param2);
EXPORT_FUNC void NodePathCollection_C_set_collide_mask_v_pp(NodePathCollection *param0, CollideMask *param1);
EXPORT_FUNC bool NodePathCollection_C_calc_tight_bounds_B_ppp(NodePathCollection const *param0, LPoint3 *param1, LPoint3 *param2);
EXPORT_FUNC void NodePathCollection_C_set_texture_v_ppi(NodePathCollection *param0, Texture *param1, int param2);
EXPORT_FUNC void NodePathCollection_C_set_texture_v_pp(NodePathCollection *param0, Texture *param1);
EXPORT_FUNC void NodePathCollection_C_set_texture_v_pppi(NodePathCollection *param0, TextureStage *param1, Texture *param2, int param3);
EXPORT_FUNC void NodePathCollection_C_set_texture_v_ppp(NodePathCollection *param0, TextureStage *param1, Texture *param2);
EXPORT_FUNC void NodePathCollection_C_set_texture_off_v_ppi(NodePathCollection *param0, TextureStage *param1, int param2);
EXPORT_FUNC void NodePathCollection_C_set_texture_off_v_pp(NodePathCollection *param0, TextureStage *param1);
EXPORT_FUNC void NodePathCollection_C_set_texture_off_v_pi(NodePathCollection *param0, int param1);
EXPORT_FUNC void NodePathCollection_C_set_texture_off_v_p(NodePathCollection *param0);
EXPORT_FUNC void NodePathCollection_C_set_color_v_ppi(NodePathCollection *param0, LColor const *param1, int param2);
EXPORT_FUNC void NodePathCollection_C_set_color_v_pp(NodePathCollection *param0, LColor const *param1);
EXPORT_FUNC void NodePathCollection_C_set_color_v_pffffi(NodePathCollection *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, int param5);
EXPORT_FUNC void NodePathCollection_C_set_color_v_pffff(NodePathCollection *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC void NodePathCollection_C_set_color_v_pfff(NodePathCollection *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3);
EXPORT_FUNC void NodePathCollection_C_set_color_scale_v_ppi(NodePathCollection *param0, LVecBase4 const *param1, int param2);
EXPORT_FUNC void NodePathCollection_C_set_color_scale_v_pp(NodePathCollection *param0, LVecBase4 const *param1);
EXPORT_FUNC void NodePathCollection_C_set_color_scale_v_pffffi(NodePathCollection *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, int param5);
EXPORT_FUNC void NodePathCollection_C_set_color_scale_v_pffff(NodePathCollection *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC void NodePathCollection_C_set_color_scale_v_pfff(NodePathCollection *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3);
EXPORT_FUNC void NodePathCollection_C_compose_color_scale_v_ppi(NodePathCollection *param0, LVecBase4 const *param1, int param2);
EXPORT_FUNC void NodePathCollection_C_compose_color_scale_v_pp(NodePathCollection *param0, LVecBase4 const *param1);
EXPORT_FUNC void NodePathCollection_C_compose_color_scale_v_pffffi(NodePathCollection *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, int param5);
EXPORT_FUNC void NodePathCollection_C_compose_color_scale_v_pffff(NodePathCollection *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC void NodePathCollection_C_compose_color_scale_v_pfff(NodePathCollection *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3);
EXPORT_FUNC void NodePathCollection_C_set_attrib_v_ppi(NodePathCollection *param0, RenderAttrib const *param1, int param2);
EXPORT_FUNC void NodePathCollection_C_set_attrib_v_pp(NodePathCollection *param0, RenderAttrib const *param1);
EXPORT_FUNC void NodePathCollection_C_output_v_pp(NodePathCollection const *param0, std::ostream *param1);
EXPORT_FUNC void NodePathCollection_C_write_v_ppi(NodePathCollection const *param0, std::ostream *param1, int param2);
EXPORT_FUNC void NodePathCollection_C_write_v_pp(NodePathCollection const *param0, std::ostream *param1);


// PandaFramework

EXPORT_FUNC PandaFramework * PandaFramework_C_ctor_p_v();
EXPORT_FUNC PandaFramework * PandaFramework_C_ctor_p_p(PandaFramework const *param0);
EXPORT_FUNC void PandaFramework_C_open_framework_v_p(PandaFramework *param0);
EXPORT_FUNC void PandaFramework_C_close_framework_v_p(PandaFramework *param0);
EXPORT_FUNC GraphicsPipe * PandaFramework_C_get_default_pipe_p_p(PandaFramework *param0);
EXPORT_FUNC GraphicsEngine * PandaFramework_C_get_graphics_engine_p_p(PandaFramework *param0);
EXPORT_FUNC NodePath const * PandaFramework_C_get_data_root_p_p(PandaFramework const *param0);
EXPORT_FUNC EventHandler * PandaFramework_C_get_event_handler_p_p(PandaFramework *param0);
EXPORT_FUNC AsyncTaskManager * PandaFramework_C_get_task_mgr_p_p(PandaFramework *param0);
EXPORT_FUNC NodePath * PandaFramework_C_get_mouse_p_pp(PandaFramework *param0, GraphicsOutput *param1);
EXPORT_FUNC void PandaFramework_C_remove_mouse_v_pp(PandaFramework *param0, GraphicsOutput const *param1);
EXPORT_FUNC void PandaFramework_C_set_window_title_v_ps(PandaFramework *param0, char const *param1);
EXPORT_FUNC void PandaFramework_C_get_default_window_props_v_pp(PandaFramework *param0, WindowProperties *param1);
EXPORT_FUNC WindowFramework * PandaFramework_C_open_window_p_p(PandaFramework *param0);
EXPORT_FUNC WindowFramework * PandaFramework_C_open_window_p_ppp(PandaFramework *param0, GraphicsPipe *param1, GraphicsStateGuardian *param2);
EXPORT_FUNC WindowFramework * PandaFramework_C_open_window_p_pp(PandaFramework *param0, GraphicsPipe *param1);
EXPORT_FUNC WindowFramework * PandaFramework_C_open_window_p_ppipp(PandaFramework *param0, WindowProperties const *param1, int param2, GraphicsPipe *param3, GraphicsStateGuardian *param4);
EXPORT_FUNC WindowFramework * PandaFramework_C_open_window_p_ppip(PandaFramework *param0, WindowProperties const *param1, int param2, GraphicsPipe *param3);
EXPORT_FUNC WindowFramework * PandaFramework_C_open_window_p_ppi(PandaFramework *param0, WindowProperties const *param1, int param2);
EXPORT_FUNC int PandaFramework_C_get_num_windows_i_p(PandaFramework const *param0);
EXPORT_FUNC WindowFramework * PandaFramework_C_get_window_p_pi(PandaFramework const *param0, int param1);
EXPORT_FUNC int PandaFramework_C_find_window_i_pp(PandaFramework const *param0, GraphicsOutput const *param1);
EXPORT_FUNC int PandaFramework_C_find_window_i_pp_1_i_pp(PandaFramework const *param0, WindowFramework const *param1);
EXPORT_FUNC void PandaFramework_C_close_window_v_pp(PandaFramework *param0, WindowFramework *param1);
EXPORT_FUNC void PandaFramework_C_close_window_v_pi(PandaFramework *param0, int param1);
EXPORT_FUNC void PandaFramework_C_close_all_windows_v_p(PandaFramework *param0);
EXPORT_FUNC bool PandaFramework_C_all_windows_closed_B_p(PandaFramework const *param0);
EXPORT_FUNC NodePath * PandaFramework_C_get_models_p_p(PandaFramework *param0);
EXPORT_FUNC void PandaFramework_C_report_frame_rate_v_pp(PandaFramework const *param0, std::ostream *param1);
EXPORT_FUNC void PandaFramework_C_reset_frame_rate_v_p(PandaFramework *param0);
EXPORT_FUNC void PandaFramework_C_set_wireframe_v_pB(PandaFramework *param0, bool param1);
EXPORT_FUNC void PandaFramework_C_set_texture_v_pB(PandaFramework *param0, bool param1);
EXPORT_FUNC void PandaFramework_C_set_two_sided_v_pB(PandaFramework *param0, bool param1);
EXPORT_FUNC void PandaFramework_C_set_lighting_v_pB(PandaFramework *param0, bool param1);
EXPORT_FUNC void PandaFramework_C_set_perpixel_v_pB(PandaFramework *param0, bool param1);
EXPORT_FUNC void PandaFramework_C_set_background_type_v_pp(PandaFramework *param0, WindowFramework::BackgroundType param1);
EXPORT_FUNC bool PandaFramework_C_get_wireframe_B_p(PandaFramework const *param0);
EXPORT_FUNC bool PandaFramework_C_get_texture_B_p(PandaFramework const *param0);
EXPORT_FUNC bool PandaFramework_C_get_two_sided_B_p(PandaFramework const *param0);
EXPORT_FUNC bool PandaFramework_C_get_lighting_B_p(PandaFramework const *param0);
EXPORT_FUNC bool PandaFramework_C_get_perpixel_B_p(PandaFramework const *param0);
EXPORT_FUNC WindowFramework::BackgroundType PandaFramework_C_get_background_type_p_p(PandaFramework const *param0);
EXPORT_FUNC int PandaFramework_C_hide_collision_solids_i_p(NodePath *param0);
EXPORT_FUNC int PandaFramework_C_show_collision_solids_i_p(NodePath *param0);
EXPORT_FUNC void PandaFramework_C_set_highlight_v_pp(PandaFramework *param0, NodePath const *param1);
EXPORT_FUNC void PandaFramework_C_clear_highlight_v_p(PandaFramework *param0);
EXPORT_FUNC bool PandaFramework_C_has_highlight_B_p(PandaFramework const *param0);
EXPORT_FUNC NodePath const * PandaFramework_C_get_highlight_p_p(PandaFramework const *param0);
EXPORT_FUNC RecorderController * PandaFramework_C_get_recorder_p_p(PandaFramework const *param0);
EXPORT_FUNC void PandaFramework_C_set_recorder_v_pp(PandaFramework *param0, RecorderController *param1);
EXPORT_FUNC void PandaFramework_C_enable_default_keys_v_p(PandaFramework *param0);
EXPORT_FUNC bool PandaFramework_C_do_frame_B_pp(PandaFramework *param0, Thread *param1);
EXPORT_FUNC void PandaFramework_C_main_loop_v_p(PandaFramework *param0);
EXPORT_FUNC void PandaFramework_C_set_exit_flag_v_p(PandaFramework *param0);
EXPORT_FUNC void PandaFramework_C_clear_exit_flag_v_p(PandaFramework *param0);


// PandaNode

EXPORT_FUNC TypedWritableReferenceCount * PandaNode_C_upcast_to_TypedWritableReferenceCount_p_p(PandaNode *param0);
EXPORT_FUNC Namable * PandaNode_C_upcast_to_Namable_p_p(PandaNode *param0);
EXPORT_FUNC LinkedListNode * PandaNode_C_upcast_to_LinkedListNode_p_p(PandaNode *param0);
EXPORT_FUNC PandaNode * PandaNode_C_ctor_p_s(char const *param0);
EXPORT_FUNC PandaNode * PandaNode_C_combine_with_p_pp(PandaNode *param0, PandaNode *param1);
EXPORT_FUNC PandaNode * PandaNode_C_dupe_for_flatten_p_p(PandaNode const *param0);
EXPORT_FUNC bool PandaNode_C_safe_to_flatten_B_p(PandaNode const *param0);
EXPORT_FUNC bool PandaNode_C_safe_to_transform_B_p(PandaNode const *param0);
EXPORT_FUNC bool PandaNode_C_safe_to_modify_transform_B_p(PandaNode const *param0);
EXPORT_FUNC bool PandaNode_C_safe_to_combine_B_p(PandaNode const *param0);
EXPORT_FUNC bool PandaNode_C_safe_to_combine_children_B_p(PandaNode const *param0);
EXPORT_FUNC bool PandaNode_C_safe_to_flatten_below_B_p(PandaNode const *param0);
EXPORT_FUNC bool PandaNode_C_preserve_name_B_p(PandaNode const *param0);
EXPORT_FUNC int PandaNode_C_get_unsafe_to_apply_attribs_i_p(PandaNode const *param0);
EXPORT_FUNC void PandaNode_C_apply_attribs_to_vertices_v_ppip(PandaNode *param0, AccumulatedAttribs const *param1, int param2, GeomTransformer *param3);
EXPORT_FUNC void PandaNode_C_xform_v_pp(PandaNode *param0, LMatrix4 const *param1);
EXPORT_FUNC bool PandaNode_C_cull_callback_B_ppp(PandaNode *param0, CullTraverser *param1, CullTraverserData *param2);
EXPORT_FUNC bool PandaNode_C_has_selective_visibility_B_p(PandaNode const *param0);
EXPORT_FUNC int PandaNode_C_get_first_visible_child_i_p(PandaNode const *param0);
EXPORT_FUNC int PandaNode_C_get_next_visible_child_i_pi(PandaNode const *param0, int param1);
EXPORT_FUNC bool PandaNode_C_has_single_child_visibility_B_p(PandaNode const *param0);
EXPORT_FUNC int PandaNode_C_get_visible_child_i_p(PandaNode const *param0);
EXPORT_FUNC bool PandaNode_C_is_renderable_B_p(PandaNode const *param0);
EXPORT_FUNC void PandaNode_C_add_for_draw_v_ppp(PandaNode *param0, CullTraverser *param1, CullTraverserData *param2);
EXPORT_FUNC PandaNode * PandaNode_C_make_copy_p_p(PandaNode const *param0);
EXPORT_FUNC PointerTo< PandaNode > * PandaNode_C_copy_subgraph_p_pp(PandaNode const *param0, Thread *param1);
EXPORT_FUNC PointerTo< PandaNode > * PandaNode_C_copy_subgraph_p_p(PandaNode const *param0);
EXPORT_FUNC int PandaNode_C_get_num_parents_i_pp(PandaNode const *param0, Thread *param1);
EXPORT_FUNC int PandaNode_C_get_num_parents_i_p(PandaNode const *param0);
EXPORT_FUNC PandaNode * PandaNode_C_get_parent_p_pip(PandaNode const *param0, int param1, Thread *param2);
EXPORT_FUNC PandaNode * PandaNode_C_get_parent_p_pi(PandaNode const *param0, int param1);
EXPORT_FUNC int PandaNode_C_find_parent_i_ppp(PandaNode const *param0, PandaNode *param1, Thread *param2);
EXPORT_FUNC int PandaNode_C_find_parent_i_pp(PandaNode const *param0, PandaNode *param1);
EXPORT_FUNC int PandaNode_C_get_num_children_i_pp(PandaNode const *param0, Thread *param1);
EXPORT_FUNC int PandaNode_C_get_num_children_i_p(PandaNode const *param0);
EXPORT_FUNC PandaNode * PandaNode_C_get_child_p_pip(PandaNode const *param0, int param1, Thread *param2);
EXPORT_FUNC PandaNode * PandaNode_C_get_child_p_pi(PandaNode const *param0, int param1);
EXPORT_FUNC int PandaNode_C_get_child_sort_i_pip(PandaNode const *param0, int param1, Thread *param2);
EXPORT_FUNC int PandaNode_C_get_child_sort_i_pi(PandaNode const *param0, int param1);
EXPORT_FUNC int PandaNode_C_find_child_i_ppp(PandaNode const *param0, PandaNode *param1, Thread *param2);
EXPORT_FUNC int PandaNode_C_find_child_i_pp(PandaNode const *param0, PandaNode *param1);
EXPORT_FUNC int PandaNode_C_count_num_descendants_i_p(PandaNode const *param0);
EXPORT_FUNC void PandaNode_C_add_child_v_ppip(PandaNode *param0, PandaNode *param1, int param2, Thread *param3);
EXPORT_FUNC void PandaNode_C_add_child_v_ppi(PandaNode *param0, PandaNode *param1, int param2);
EXPORT_FUNC void PandaNode_C_add_child_v_pp(PandaNode *param0, PandaNode *param1);
EXPORT_FUNC bool PandaNode_C_remove_child_B_ppp(PandaNode *param0, PandaNode *param1, Thread *param2);
EXPORT_FUNC bool PandaNode_C_remove_child_B_pp(PandaNode *param0, PandaNode *param1);
EXPORT_FUNC void PandaNode_C_remove_child_v_pip(PandaNode *param0, int param1, Thread *param2);
EXPORT_FUNC void PandaNode_C_remove_child_v_pi(PandaNode *param0, int param1);
EXPORT_FUNC bool PandaNode_C_replace_child_B_pppp(PandaNode *param0, PandaNode *param1, PandaNode *param2, Thread *param3);
EXPORT_FUNC bool PandaNode_C_replace_child_B_ppp(PandaNode *param0, PandaNode *param1, PandaNode *param2);
EXPORT_FUNC bool PandaNode_C_stash_child_B_ppp(PandaNode *param0, PandaNode *param1, Thread *param2);
EXPORT_FUNC bool PandaNode_C_stash_child_B_pp(PandaNode *param0, PandaNode *param1);
EXPORT_FUNC void PandaNode_C_stash_child_v_pip(PandaNode *param0, int param1, Thread *param2);
EXPORT_FUNC void PandaNode_C_stash_child_v_pi(PandaNode *param0, int param1);
EXPORT_FUNC bool PandaNode_C_unstash_child_B_ppp(PandaNode *param0, PandaNode *param1, Thread *param2);
EXPORT_FUNC bool PandaNode_C_unstash_child_B_pp(PandaNode *param0, PandaNode *param1);
EXPORT_FUNC void PandaNode_C_unstash_child_v_pip(PandaNode *param0, int param1, Thread *param2);
EXPORT_FUNC void PandaNode_C_unstash_child_v_pi(PandaNode *param0, int param1);
EXPORT_FUNC int PandaNode_C_get_num_stashed_i_pp(PandaNode const *param0, Thread *param1);
EXPORT_FUNC int PandaNode_C_get_num_stashed_i_p(PandaNode const *param0);
EXPORT_FUNC PandaNode::Stashed * PandaNode_C_get_stashed_p_pp(PandaNode const *param0, Thread *param1);
EXPORT_FUNC PandaNode::Stashed * PandaNode_C_get_stashed_p_p(PandaNode const *param0);
EXPORT_FUNC PandaNode * PandaNode_C_get_stashed_p_pip(PandaNode const *param0, int param1, Thread *param2);
EXPORT_FUNC PandaNode * PandaNode_C_get_stashed_p_pi(PandaNode const *param0, int param1);
EXPORT_FUNC int PandaNode_C_get_stashed_sort_i_pip(PandaNode const *param0, int param1, Thread *param2);
EXPORT_FUNC int PandaNode_C_get_stashed_sort_i_pi(PandaNode const *param0, int param1);
EXPORT_FUNC int PandaNode_C_find_stashed_i_ppp(PandaNode const *param0, PandaNode *param1, Thread *param2);
EXPORT_FUNC int PandaNode_C_find_stashed_i_pp(PandaNode const *param0, PandaNode *param1);
EXPORT_FUNC void PandaNode_C_add_stashed_v_ppip(PandaNode *param0, PandaNode *param1, int param2, Thread *param3);
EXPORT_FUNC void PandaNode_C_add_stashed_v_ppi(PandaNode *param0, PandaNode *param1, int param2);
EXPORT_FUNC void PandaNode_C_add_stashed_v_pp(PandaNode *param0, PandaNode *param1);
EXPORT_FUNC void PandaNode_C_remove_stashed_v_pip(PandaNode *param0, int param1, Thread *param2);
EXPORT_FUNC void PandaNode_C_remove_stashed_v_pi(PandaNode *param0, int param1);
EXPORT_FUNC void PandaNode_C_remove_all_children_v_pp(PandaNode *param0, Thread *param1);
EXPORT_FUNC void PandaNode_C_remove_all_children_v_p(PandaNode *param0);
EXPORT_FUNC void PandaNode_C_steal_children_v_ppp(PandaNode *param0, PandaNode *param1, Thread *param2);
EXPORT_FUNC void PandaNode_C_steal_children_v_pp(PandaNode *param0, PandaNode *param1);
EXPORT_FUNC void PandaNode_C_copy_children_v_ppp(PandaNode *param0, PandaNode *param1, Thread *param2);
EXPORT_FUNC void PandaNode_C_copy_children_v_pp(PandaNode *param0, PandaNode *param1);
EXPORT_FUNC void PandaNode_C_set_attrib_v_ppi(PandaNode *param0, RenderAttrib const *param1, int param2);
EXPORT_FUNC void PandaNode_C_set_attrib_v_pp(PandaNode *param0, RenderAttrib const *param1);
EXPORT_FUNC ConstPointerTo< RenderAttrib > * PandaNode_C_get_attrib_p_pi(PandaNode const *param0, int param1);
EXPORT_FUNC ConstPointerTo< RenderAttrib > * PandaNode_C_get_attrib_p_pi_1_p_pi(PandaNode const *param0, int param1);
EXPORT_FUNC bool PandaNode_C_has_attrib_B_pi(PandaNode const *param0, int param1);
EXPORT_FUNC bool PandaNode_C_has_attrib_B_pi_1_B_pi(PandaNode const *param0, int param1);
EXPORT_FUNC void PandaNode_C_clear_attrib_v_pi(PandaNode *param0, int param1);
EXPORT_FUNC void PandaNode_C_clear_attrib_v_pi_1_v_pi(PandaNode *param0, int param1);
EXPORT_FUNC void PandaNode_C_set_effect_v_pp(PandaNode *param0, RenderEffect const *param1);
EXPORT_FUNC ConstPointerTo< RenderEffect > * PandaNode_C_get_effect_p_pi(PandaNode const *param0, int param1);
EXPORT_FUNC bool PandaNode_C_has_effect_B_pi(PandaNode const *param0, int param1);
EXPORT_FUNC void PandaNode_C_clear_effect_v_pi(PandaNode *param0, int param1);
EXPORT_FUNC void PandaNode_C_set_state_v_ppp(PandaNode *param0, RenderState const *param1, Thread *param2);
EXPORT_FUNC void PandaNode_C_set_state_v_pp(PandaNode *param0, RenderState const *param1);
EXPORT_FUNC ConstPointerTo< RenderState > * PandaNode_C_get_state_p_pp(PandaNode const *param0, Thread *param1);
EXPORT_FUNC ConstPointerTo< RenderState > * PandaNode_C_get_state_p_p(PandaNode const *param0);
EXPORT_FUNC void PandaNode_C_clear_state_v_pp(PandaNode *param0, Thread *param1);
EXPORT_FUNC void PandaNode_C_clear_state_v_p(PandaNode *param0);
EXPORT_FUNC void PandaNode_C_set_effects_v_ppp(PandaNode *param0, RenderEffects const *param1, Thread *param2);
EXPORT_FUNC void PandaNode_C_set_effects_v_pp(PandaNode *param0, RenderEffects const *param1);
EXPORT_FUNC ConstPointerTo< RenderEffects > * PandaNode_C_get_effects_p_pp(PandaNode const *param0, Thread *param1);
EXPORT_FUNC ConstPointerTo< RenderEffects > * PandaNode_C_get_effects_p_p(PandaNode const *param0);
EXPORT_FUNC void PandaNode_C_clear_effects_v_pp(PandaNode *param0, Thread *param1);
EXPORT_FUNC void PandaNode_C_clear_effects_v_p(PandaNode *param0);
EXPORT_FUNC void PandaNode_C_set_transform_v_ppp(PandaNode *param0, TransformState const *param1, Thread *param2);
EXPORT_FUNC void PandaNode_C_set_transform_v_pp(PandaNode *param0, TransformState const *param1);
EXPORT_FUNC ConstPointerTo< TransformState > * PandaNode_C_get_transform_p_pp(PandaNode const *param0, Thread *param1);
EXPORT_FUNC ConstPointerTo< TransformState > * PandaNode_C_get_transform_p_p(PandaNode const *param0);
EXPORT_FUNC void PandaNode_C_clear_transform_v_pp(PandaNode *param0, Thread *param1);
EXPORT_FUNC void PandaNode_C_clear_transform_v_p(PandaNode *param0);
EXPORT_FUNC void PandaNode_C_set_prev_transform_v_ppp(PandaNode *param0, TransformState const *param1, Thread *param2);
EXPORT_FUNC void PandaNode_C_set_prev_transform_v_pp(PandaNode *param0, TransformState const *param1);
EXPORT_FUNC ConstPointerTo< TransformState > * PandaNode_C_get_prev_transform_p_pp(PandaNode const *param0, Thread *param1);
EXPORT_FUNC ConstPointerTo< TransformState > * PandaNode_C_get_prev_transform_p_p(PandaNode const *param0);
EXPORT_FUNC void PandaNode_C_reset_prev_transform_v_pp(PandaNode *param0, Thread *param1);
EXPORT_FUNC void PandaNode_C_reset_prev_transform_v_p(PandaNode *param0);
EXPORT_FUNC bool PandaNode_C_has_dirty_prev_transform_B_p(PandaNode const *param0);
EXPORT_FUNC void PandaNode_C_reset_all_prev_transform_v_p(Thread *param0);
EXPORT_FUNC void PandaNode_C_reset_all_prev_transform_v_v();
EXPORT_FUNC void PandaNode_C_set_tag_v_pssp(PandaNode *param0, char const *param1, char const *param2, Thread *param3);
EXPORT_FUNC void PandaNode_C_set_tag_v_pss(PandaNode *param0, char const *param1, char const *param2);
EXPORT_FUNC char const * PandaNode_C_get_tag_s_psp(PandaNode const *param0, char const *param1, Thread *param2);
EXPORT_FUNC char const * PandaNode_C_get_tag_s_ps(PandaNode const *param0, char const *param1);
EXPORT_FUNC bool PandaNode_C_has_tag_B_psp(PandaNode const *param0, char const *param1, Thread *param2);
EXPORT_FUNC bool PandaNode_C_has_tag_B_ps(PandaNode const *param0, char const *param1);
EXPORT_FUNC void PandaNode_C_clear_tag_v_psp(PandaNode *param0, char const *param1, Thread *param2);
EXPORT_FUNC void PandaNode_C_clear_tag_v_ps(PandaNode *param0, char const *param1);
EXPORT_FUNC void PandaNode_C_get_tag_keys_v_pp(PandaNode const *param0, vector_string *param1);
EXPORT_FUNC std::size_t PandaNode_C_get_num_tags_l_p(PandaNode const *param0);
EXPORT_FUNC char const * PandaNode_C_get_tag_key_s_pl(PandaNode const *param0, std::size_t param1);
EXPORT_FUNC bool PandaNode_C_has_tags_B_p(PandaNode const *param0);
EXPORT_FUNC void PandaNode_C_copy_tags_v_pp(PandaNode *param0, PandaNode *param1);
EXPORT_FUNC void PandaNode_C_list_tags_v_pps(PandaNode const *param0, std::ostream *param1, char const *param2);
EXPORT_FUNC void PandaNode_C_list_tags_v_pp(PandaNode const *param0, std::ostream *param1);
EXPORT_FUNC int PandaNode_C_compare_tags_i_pp(PandaNode const *param0, PandaNode const *param1);
EXPORT_FUNC void PandaNode_C_copy_all_properties_v_pp(PandaNode *param0, PandaNode *param1);
EXPORT_FUNC void PandaNode_C_replace_node_v_pp(PandaNode *param0, PandaNode *param1);
EXPORT_FUNC void PandaNode_C_set_unexpected_change_v_pI(PandaNode *param0, unsigned int param1);
EXPORT_FUNC unsigned int PandaNode_C_get_unexpected_change_I_pI(PandaNode const *param0, unsigned int param1);
EXPORT_FUNC void PandaNode_C_clear_unexpected_change_v_pI(PandaNode *param0, unsigned int param1);
EXPORT_FUNC DrawMask * PandaNode_C_get_overall_bit_p_v();
EXPORT_FUNC DrawMask * PandaNode_C_get_all_camera_mask_p_v();
EXPORT_FUNC bool PandaNode_C_is_overall_hidden_B_p(PandaNode const *param0);
EXPORT_FUNC void PandaNode_C_set_overall_hidden_v_pB(PandaNode *param0, bool param1);
EXPORT_FUNC void PandaNode_C_adjust_draw_mask_v_pppp(PandaNode *param0, DrawMask *param1, DrawMask *param2, DrawMask *param3);
EXPORT_FUNC DrawMask * PandaNode_C_get_draw_control_mask_p_p(PandaNode const *param0);
EXPORT_FUNC DrawMask * PandaNode_C_get_draw_show_mask_p_p(PandaNode const *param0);
EXPORT_FUNC DrawMask * PandaNode_C_get_net_draw_control_mask_p_p(PandaNode const *param0);
EXPORT_FUNC DrawMask * PandaNode_C_get_net_draw_show_mask_p_p(PandaNode const *param0);
EXPORT_FUNC void PandaNode_C_set_into_collide_mask_v_pp(PandaNode *param0, CollideMask *param1);
EXPORT_FUNC CollideMask * PandaNode_C_get_into_collide_mask_p_p(PandaNode const *param0);
EXPORT_FUNC CollideMask * PandaNode_C_get_legal_collide_mask_p_p(PandaNode const *param0);
EXPORT_FUNC CollideMask * PandaNode_C_get_net_collide_mask_p_pp(PandaNode const *param0, Thread *param1);
EXPORT_FUNC CollideMask * PandaNode_C_get_net_collide_mask_p_p(PandaNode const *param0);
EXPORT_FUNC ConstPointerTo< RenderAttrib > * PandaNode_C_get_off_clip_planes_p_pp(PandaNode const *param0, Thread *param1);
EXPORT_FUNC ConstPointerTo< RenderAttrib > * PandaNode_C_get_off_clip_planes_p_p(PandaNode const *param0);
EXPORT_FUNC void PandaNode_C_prepare_scene_v_ppp(PandaNode *param0, GraphicsStateGuardianBase *param1, RenderState const *param2);
EXPORT_FUNC bool PandaNode_C_is_scene_root_B_p(PandaNode const *param0);
EXPORT_FUNC bool PandaNode_C_is_under_scene_root_B_p(PandaNode const *param0);
EXPORT_FUNC void PandaNode_C_output_v_pp(PandaNode const *param0, std::ostream *param1);
EXPORT_FUNC void PandaNode_C_write_v_ppi(PandaNode const *param0, std::ostream *param1, int param2);
EXPORT_FUNC void PandaNode_C_ls_v_ppi(PandaNode const *param0, std::ostream *param1, int param2);
EXPORT_FUNC void PandaNode_C_set_bounds_type_v_pp(PandaNode *param0, BoundingVolume::BoundsType param1);
EXPORT_FUNC BoundingVolume::BoundsType PandaNode_C_get_bounds_type_p_p(PandaNode const *param0);
EXPORT_FUNC void PandaNode_C_set_bounds_v_pp(PandaNode *param0, BoundingVolume const *param1);
EXPORT_FUNC void PandaNode_C_set_bound_v_pp(PandaNode *param0, BoundingVolume const *param1);
EXPORT_FUNC void PandaNode_C_clear_bounds_v_p(PandaNode *param0);
EXPORT_FUNC ConstPointerTo< BoundingVolume > * PandaNode_C_get_bounds_p_pp(PandaNode const *param0, Thread *param1);
EXPORT_FUNC ConstPointerTo< BoundingVolume > * PandaNode_C_get_bounds_p_p(PandaNode const *param0);
EXPORT_FUNC ConstPointerTo< BoundingVolume > * PandaNode_C_get_bounds_p_ppp(PandaNode const *param0, UpdateSeq *param1, Thread *param2);
EXPORT_FUNC ConstPointerTo< BoundingVolume > * PandaNode_C_get_bounds_p_pp_1_p_pp(PandaNode const *param0, UpdateSeq *param1);
EXPORT_FUNC int PandaNode_C_get_nested_vertices_i_pp(PandaNode const *param0, Thread *param1);
EXPORT_FUNC int PandaNode_C_get_nested_vertices_i_p(PandaNode const *param0);
EXPORT_FUNC ConstPointerTo< BoundingVolume > * PandaNode_C_get_internal_bounds_p_pp(PandaNode const *param0, Thread *param1);
EXPORT_FUNC ConstPointerTo< BoundingVolume > * PandaNode_C_get_internal_bounds_p_p(PandaNode const *param0);
EXPORT_FUNC int PandaNode_C_get_internal_vertices_i_pp(PandaNode const *param0, Thread *param1);
EXPORT_FUNC int PandaNode_C_get_internal_vertices_i_p(PandaNode const *param0);
EXPORT_FUNC void PandaNode_C_mark_bounds_stale_v_pp(PandaNode const *param0, Thread *param1);
EXPORT_FUNC void PandaNode_C_mark_bounds_stale_v_p(PandaNode const *param0);
EXPORT_FUNC void PandaNode_C_mark_internal_bounds_stale_v_pp(PandaNode *param0, Thread *param1);
EXPORT_FUNC void PandaNode_C_mark_internal_bounds_stale_v_p(PandaNode *param0);
EXPORT_FUNC bool PandaNode_C_is_bounds_stale_B_p(PandaNode const *param0);
EXPORT_FUNC void PandaNode_C_set_final_v_pB(PandaNode *param0, bool param1);
EXPORT_FUNC bool PandaNode_C_is_final_B_pp(PandaNode const *param0, Thread *param1);
EXPORT_FUNC bool PandaNode_C_is_final_B_p(PandaNode const *param0);
EXPORT_FUNC bool PandaNode_C_is_geom_node_B_p(PandaNode const *param0);
EXPORT_FUNC bool PandaNode_C_is_lod_node_B_p(PandaNode const *param0);
EXPORT_FUNC bool PandaNode_C_is_collision_node_B_p(PandaNode const *param0);
EXPORT_FUNC Light * PandaNode_C_as_light_p_p(PandaNode *param0);
EXPORT_FUNC bool PandaNode_C_is_ambient_light_B_p(PandaNode const *param0);
EXPORT_FUNC int PandaNode_C_get_fancy_bits_i_pp(PandaNode const *param0, Thread *param1);
EXPORT_FUNC int PandaNode_C_get_fancy_bits_i_p(PandaNode const *param0);
EXPORT_FUNC PointerTo< PandaNode > * PandaNode_C_decode_from_bam_stream_p_pp(vector_uchar param0, BamReader *param1);
EXPORT_FUNC PointerTo< PandaNode > * PandaNode_C_decode_from_bam_stream_p_p(vector_uchar param0);
EXPORT_FUNC void PandaNode_C_r_prepare_scene_v_ppppp(PandaNode *param0, GraphicsStateGuardianBase *param1, RenderState const *param2, GeomTransformer *param3, Thread *param4);
EXPORT_FUNC PandaNode::Children * PandaNode_C_get_children_p_pp(PandaNode const *param0, Thread *param1);
EXPORT_FUNC PandaNode::Children * PandaNode_C_get_children_p_p(PandaNode const *param0);
EXPORT_FUNC PandaNode::Parents * PandaNode_C_get_parents_p_pp(PandaNode const *param0, Thread *param1);
EXPORT_FUNC PandaNode::Parents * PandaNode_C_get_parents_p_p(PandaNode const *param0);
EXPORT_FUNC void PandaNode_C_register_with_read_factory_v_v();
EXPORT_FUNC void PandaNode_C_write_datagram_v_ppp(PandaNode *param0, BamWriter *param1, Datagram *param2);
EXPORT_FUNC void PandaNode_C_update_bam_nested_v_pp(PandaNode *param0, BamWriter *param1);
EXPORT_FUNC void PandaNode_C_write_recorder_v_ppp(PandaNode *param0, BamWriter *param1, Datagram *param2);
EXPORT_FUNC int PandaNode_C_get_class_type_i_v();
EXPORT_FUNC void PandaNode_C_init_type_v_v();
EXPORT_FUNC int PandaNode_C_get_type_i_p(PandaNode const *param0);
EXPORT_FUNC int PandaNode_C_force_init_type_i_p(PandaNode *param0);
EXPORT_FUNC TextNode * PandaNode_C_downcast_to_TextNode_p_p(PandaNode *param0);


// PandaSystem

EXPORT_FUNC char const * PandaSystem_C_get_version_string_s_v();
EXPORT_FUNC int PandaSystem_C_get_major_version_i_v();
EXPORT_FUNC int PandaSystem_C_get_minor_version_i_v();
EXPORT_FUNC int PandaSystem_C_get_sequence_version_i_v();
EXPORT_FUNC bool PandaSystem_C_is_official_version_B_v();
EXPORT_FUNC int PandaSystem_C_get_memory_alignment_i_v();
EXPORT_FUNC char const * PandaSystem_C_get_distributor_s_v();
EXPORT_FUNC char const * PandaSystem_C_get_compiler_s_v();
EXPORT_FUNC char const * PandaSystem_C_get_build_date_s_v();
EXPORT_FUNC char const * PandaSystem_C_get_git_commit_s_v();
EXPORT_FUNC char const * PandaSystem_C_get_platform_s_v();
EXPORT_FUNC bool PandaSystem_C_has_system_B_ps(PandaSystem const *param0, char const *param1);
EXPORT_FUNC std::size_t PandaSystem_C_get_num_systems_l_p(PandaSystem const *param0);
EXPORT_FUNC char const * PandaSystem_C_get_system_s_pl(PandaSystem const *param0, std::size_t param1);
EXPORT_FUNC char const * PandaSystem_C_get_system_tag_s_pss(PandaSystem const *param0, char const *param1, char const *param2);
EXPORT_FUNC void PandaSystem_C_add_system_v_ps(PandaSystem *param0, char const *param1);
EXPORT_FUNC void PandaSystem_C_set_system_tag_v_psss(PandaSystem *param0, char const *param1, char const *param2, char const *param3);
EXPORT_FUNC bool PandaSystem_C_heap_trim_B_pl(PandaSystem *param0, std::size_t param1);
EXPORT_FUNC void PandaSystem_C_output_v_pp(PandaSystem const *param0, std::ostream *param1);
EXPORT_FUNC void PandaSystem_C_write_v_pp(PandaSystem const *param0, std::ostream *param1);
EXPORT_FUNC PandaSystem * PandaSystem_C_get_global_ptr_p_v();
EXPORT_FUNC int PandaSystem_C_get_class_type_i_v();
EXPORT_FUNC void PandaSystem_C_init_type_v_v();


// ReferenceCount

EXPORT_FUNC MemoryBase * ReferenceCount_C_upcast_to_MemoryBase_p_p(ReferenceCount *param0);
EXPORT_FUNC int ReferenceCount_C_get_ref_count_i_p(ReferenceCount const *param0);
EXPORT_FUNC void ReferenceCount_C_ref_v_p(ReferenceCount const *param0);
EXPORT_FUNC bool ReferenceCount_C_unref_B_p(ReferenceCount const *param0);
EXPORT_FUNC bool ReferenceCount_C_test_ref_count_integrity_B_p(ReferenceCount const *param0);
EXPORT_FUNC bool ReferenceCount_C_test_ref_count_nonzero_B_p(ReferenceCount const *param0);
EXPORT_FUNC void ReferenceCount_C_local_object_v_p(ReferenceCount *param0);
EXPORT_FUNC bool ReferenceCount_C_has_weak_list_B_p(ReferenceCount const *param0);
EXPORT_FUNC WeakReferenceList * ReferenceCount_C_get_weak_list_p_p(ReferenceCount const *param0);
EXPORT_FUNC WeakReferenceList * ReferenceCount_C_weak_ref_p_p(ReferenceCount *param0);
EXPORT_FUNC void ReferenceCount_C_weak_unref_v_p(ReferenceCount *param0);
EXPORT_FUNC bool ReferenceCount_C_ref_if_nonzero_B_p(ReferenceCount const *param0);
EXPORT_FUNC bool ReferenceCount_C_unref_if_one_B_p(ReferenceCount const *param0);
EXPORT_FUNC int ReferenceCount_C_get_class_type_i_v();
EXPORT_FUNC void ReferenceCount_C_init_type_v_v();
EXPORT_FUNC GeomVertexArrayDataHandle * ReferenceCount_C_downcast_to_GeomVertexArrayDataHandle_p_p(ReferenceCount *param0);


// RenderEffect

EXPORT_FUNC bool RenderEffect_C_safe_to_transform_B_p(RenderEffect const *param0);
EXPORT_FUNC ConstPointerTo< TransformState > * RenderEffect_C_prepare_flatten_transform_p_pp(RenderEffect const *param0, TransformState const *param1);
EXPORT_FUNC bool RenderEffect_C_safe_to_combine_B_p(RenderEffect const *param0);
EXPORT_FUNC ConstPointerTo< RenderEffect > * RenderEffect_C_xform_p_pp(RenderEffect const *param0, LMatrix4 const *param1);
EXPORT_FUNC bool RenderEffect_C_has_cull_callback_B_p(RenderEffect const *param0);
EXPORT_FUNC void RenderEffect_C_cull_callback_v_ppppp(RenderEffect const *param0, CullTraverser *param1, CullTraverserData *param2, ConstPointerTo< TransformState > *param3, ConstPointerTo< RenderState > *param4);
EXPORT_FUNC bool RenderEffect_C_has_adjust_transform_B_p(RenderEffect const *param0);
EXPORT_FUNC void RenderEffect_C_adjust_transform_v_pppp(RenderEffect const *param0, ConstPointerTo< TransformState > *param1, ConstPointerTo< TransformState > *param2, PandaNode const *param3);
EXPORT_FUNC int RenderEffect_C_compare_to_i_pp(RenderEffect const *param0, RenderEffect const *param1);
EXPORT_FUNC void RenderEffect_C_output_v_pp(RenderEffect const *param0, std::ostream *param1);
EXPORT_FUNC void RenderEffect_C_write_v_ppi(RenderEffect const *param0, std::ostream *param1, int param2);
EXPORT_FUNC int RenderEffect_C_get_num_effects_i_v();
EXPORT_FUNC void RenderEffect_C_list_effects_v_p(std::ostream *param0);
EXPORT_FUNC bool RenderEffect_C_validate_effects_B_v();
EXPORT_FUNC void RenderEffect_C_write_datagram_v_ppp(RenderEffect *param0, BamWriter *param1, Datagram *param2);
EXPORT_FUNC TypedWritable * RenderEffect_C_change_this_p_pp(TypedWritable *param0, BamReader *param1);
EXPORT_FUNC void RenderEffect_C_finalize_v_pp(RenderEffect *param0, BamReader *param1);
EXPORT_FUNC int RenderEffect_C_get_class_type_i_v();
EXPORT_FUNC void RenderEffect_C_init_type_v_v();
EXPORT_FUNC int RenderEffect_C_get_type_i_p(RenderEffect const *param0);
EXPORT_FUNC int RenderEffect_C_force_init_type_i_p(RenderEffect *param0);


// RenderState

EXPORT_FUNC int RenderState_C_compare_to_i_pp(RenderState const *param0, RenderState const *param1);
EXPORT_FUNC int RenderState_C_compare_sort_i_pp(RenderState const *param0, RenderState const *param1);
EXPORT_FUNC int RenderState_C_compare_mask_i_ppp(RenderState const *param0, RenderState const *param1, RenderState::SlotMask *param2);
EXPORT_FUNC std::size_t RenderState_C_get_hash_l_p(RenderState const *param0);
EXPORT_FUNC bool RenderState_C_is_empty_B_p(RenderState const *param0);
EXPORT_FUNC bool RenderState_C_has_cull_callback_B_p(RenderState const *param0);
EXPORT_FUNC bool RenderState_C_cull_callback_B_ppp(RenderState const *param0, CullTraverser *param1, CullTraverserData const *param2);
EXPORT_FUNC ConstPointerTo< RenderState > * RenderState_C_make_empty_p_v();
EXPORT_FUNC ConstPointerTo< RenderState > * RenderState_C_make_p_pppppi(RenderAttrib const *param0, RenderAttrib const *param1, RenderAttrib const *param2, RenderAttrib const *param3, RenderAttrib const *param4, int param5);
EXPORT_FUNC ConstPointerTo< RenderState > * RenderState_C_make_p_ppppp(RenderAttrib const *param0, RenderAttrib const *param1, RenderAttrib const *param2, RenderAttrib const *param3, RenderAttrib const *param4);
EXPORT_FUNC ConstPointerTo< RenderState > * RenderState_C_make_p_ppppi(RenderAttrib const *param0, RenderAttrib const *param1, RenderAttrib const *param2, RenderAttrib const *param3, int param4);
EXPORT_FUNC ConstPointerTo< RenderState > * RenderState_C_make_p_pppp(RenderAttrib const *param0, RenderAttrib const *param1, RenderAttrib const *param2, RenderAttrib const *param3);
EXPORT_FUNC ConstPointerTo< RenderState > * RenderState_C_make_p_pppi(RenderAttrib const *param0, RenderAttrib const *param1, RenderAttrib const *param2, int param3);
EXPORT_FUNC ConstPointerTo< RenderState > * RenderState_C_make_p_ppp(RenderAttrib const *param0, RenderAttrib const *param1, RenderAttrib const *param2);
EXPORT_FUNC ConstPointerTo< RenderState > * RenderState_C_make_p_ppi(RenderAttrib const *param0, RenderAttrib const *param1, int param2);
EXPORT_FUNC ConstPointerTo< RenderState > * RenderState_C_make_p_pp(RenderAttrib const *param0, RenderAttrib const *param1);
EXPORT_FUNC ConstPointerTo< RenderState > * RenderState_C_make_p_pi(RenderAttrib const *param0, int param1);
EXPORT_FUNC ConstPointerTo< RenderState > * RenderState_C_make_p_p(RenderAttrib const *param0);
EXPORT_FUNC ConstPointerTo< RenderState > * RenderState_C_compose_p_pp(RenderState const *param0, RenderState const *param1);
EXPORT_FUNC ConstPointerTo< RenderState > * RenderState_C_invert_compose_p_pp(RenderState const *param0, RenderState const *param1);
EXPORT_FUNC ConstPointerTo< RenderState > * RenderState_C_add_attrib_p_ppi(RenderState const *param0, RenderAttrib const *param1, int param2);
EXPORT_FUNC ConstPointerTo< RenderState > * RenderState_C_add_attrib_p_pp(RenderState const *param0, RenderAttrib const *param1);
EXPORT_FUNC ConstPointerTo< RenderState > * RenderState_C_set_attrib_p_pp(RenderState const *param0, RenderAttrib const *param1);
EXPORT_FUNC ConstPointerTo< RenderState > * RenderState_C_set_attrib_p_ppi(RenderState const *param0, RenderAttrib const *param1, int param2);
EXPORT_FUNC ConstPointerTo< RenderState > * RenderState_C_remove_attrib_p_pi(RenderState const *param0, int param1);
EXPORT_FUNC ConstPointerTo< RenderState > * RenderState_C_remove_attrib_p_pi_1_p_pi(RenderState const *param0, int param1);
EXPORT_FUNC ConstPointerTo< RenderState > * RenderState_C_adjust_all_priorities_p_pi(RenderState const *param0, int param1);
EXPORT_FUNC bool RenderState_C_has_attrib_B_pi(RenderState const *param0, int param1);
EXPORT_FUNC bool RenderState_C_has_attrib_B_pi_1_B_pi(RenderState const *param0, int param1);
EXPORT_FUNC RenderAttrib const * RenderState_C_get_attrib_p_pi(RenderState const *param0, int param1);
EXPORT_FUNC RenderAttrib const * RenderState_C_get_attrib_p_pi_1_p_pi(RenderState const *param0, int param1);
EXPORT_FUNC RenderAttrib const * RenderState_C_get_attrib_def_p_pi(RenderState const *param0, int param1);
EXPORT_FUNC int RenderState_C_get_override_i_pi(RenderState const *param0, int param1);
EXPORT_FUNC int RenderState_C_get_override_i_pi_1_i_pi(RenderState const *param0, int param1);
EXPORT_FUNC ConstPointerTo< RenderState > * RenderState_C_get_unique_p_p(RenderState const *param0);
EXPORT_FUNC void RenderState_C_cache_ref_v_p(RenderState const *param0);
EXPORT_FUNC bool RenderState_C_cache_unref_B_p(RenderState const *param0);
EXPORT_FUNC void RenderState_C_node_ref_v_p(RenderState const *param0);
EXPORT_FUNC bool RenderState_C_node_unref_B_p(RenderState const *param0);
EXPORT_FUNC std::size_t RenderState_C_get_composition_cache_num_entries_l_p(RenderState const *param0);
EXPORT_FUNC std::size_t RenderState_C_get_invert_composition_cache_num_entries_l_p(RenderState const *param0);
EXPORT_FUNC std::size_t RenderState_C_get_composition_cache_size_l_p(RenderState const *param0);
EXPORT_FUNC RenderState const * RenderState_C_get_composition_cache_source_p_pl(RenderState const *param0, std::size_t param1);
EXPORT_FUNC RenderState const * RenderState_C_get_composition_cache_result_p_pl(RenderState const *param0, std::size_t param1);
EXPORT_FUNC std::size_t RenderState_C_get_invert_composition_cache_size_l_p(RenderState const *param0);
EXPORT_FUNC RenderState const * RenderState_C_get_invert_composition_cache_source_p_pl(RenderState const *param0, std::size_t param1);
EXPORT_FUNC RenderState const * RenderState_C_get_invert_composition_cache_result_p_pl(RenderState const *param0, std::size_t param1);
EXPORT_FUNC void RenderState_C_output_v_pp(RenderState const *param0, std::ostream *param1);
EXPORT_FUNC void RenderState_C_write_v_ppi(RenderState const *param0, std::ostream *param1, int param2);
EXPORT_FUNC int RenderState_C_get_max_priority_i_v();
EXPORT_FUNC int RenderState_C_get_num_states_i_v();
EXPORT_FUNC int RenderState_C_get_num_unused_states_i_v();
EXPORT_FUNC int RenderState_C_clear_cache_i_v();
EXPORT_FUNC void RenderState_C_clear_munger_cache_v_v();
EXPORT_FUNC int RenderState_C_garbage_collect_i_v();
EXPORT_FUNC void RenderState_C_list_cycles_v_p(std::ostream *param0);
EXPORT_FUNC void RenderState_C_list_states_v_p(std::ostream *param0);
EXPORT_FUNC bool RenderState_C_validate_states_B_v();
EXPORT_FUNC int RenderState_C_get_draw_order_i_p(RenderState const *param0);
EXPORT_FUNC int RenderState_C_get_bin_index_i_p(RenderState const *param0);
EXPORT_FUNC int RenderState_C_get_geom_rendering_i_pi(RenderState const *param0, int param1);
EXPORT_FUNC void RenderState_C_bin_removed_v_i(int param0);
EXPORT_FUNC void RenderState_C_flush_level_v_v();
EXPORT_FUNC void RenderState_C_cache_ref_only_v_p(RenderState const *param0);
EXPORT_FUNC void RenderState_C_init_states_v_v();
EXPORT_FUNC ConstPointerTo< RenderAttrib > const * RenderState_C_get_generated_shader_p_p(RenderState const *param0);
EXPORT_FUNC UpdateSeq const * RenderState_C_get_generated_shader_seq_p_p(RenderState const *param0);
EXPORT_FUNC void RenderState_C_register_with_read_factory_v_v();
EXPORT_FUNC void RenderState_C_write_datagram_v_ppp(RenderState *param0, BamWriter *param1, Datagram *param2);
EXPORT_FUNC TypedWritable * RenderState_C_change_this_p_pp(TypedWritable *param0, BamReader *param1);
EXPORT_FUNC void RenderState_C_finalize_v_pp(RenderState *param0, BamReader *param1);
EXPORT_FUNC int RenderState_C_get_class_type_i_v();
EXPORT_FUNC void RenderState_C_init_type_v_v();
EXPORT_FUNC int RenderState_C_get_type_i_p(RenderState const *param0);
EXPORT_FUNC int RenderState_C_force_init_type_i_p(RenderState *param0);


// Shader

EXPORT_FUNC PointerTo< Shader > * Shader_C_load_p_pp(Filename const *param0, Shader::ShaderLanguage param1);
EXPORT_FUNC PointerTo< Shader > * Shader_C_load_p_p(Filename const *param0);
EXPORT_FUNC PointerTo< Shader > * Shader_C_load_p_pppppp(Shader::ShaderLanguage param0, Filename const *param1, Filename const *param2, Filename const *param3, Filename const *param4, Filename const *param5);
EXPORT_FUNC PointerTo< Shader > * Shader_C_load_p_ppppp(Shader::ShaderLanguage param0, Filename const *param1, Filename const *param2, Filename const *param3, Filename const *param4);
EXPORT_FUNC PointerTo< Shader > * Shader_C_load_p_pppp(Shader::ShaderLanguage param0, Filename const *param1, Filename const *param2, Filename const *param3);
EXPORT_FUNC PointerTo< Shader > * Shader_C_load_p_ppp(Shader::ShaderLanguage param0, Filename const *param1, Filename const *param2);
EXPORT_FUNC PointerTo< Shader > * Shader_C_make_p_psssss(Shader::ShaderLanguage param0, char const *param1, char const *param2, char const *param3, char const *param4, char const *param5);
EXPORT_FUNC PointerTo< Shader > * Shader_C_make_p_pssss(Shader::ShaderLanguage param0, char const *param1, char const *param2, char const *param3, char const *param4);
EXPORT_FUNC PointerTo< Shader > * Shader_C_make_p_psss(Shader::ShaderLanguage param0, char const *param1, char const *param2, char const *param3);
EXPORT_FUNC PointerTo< Shader > * Shader_C_make_p_pss(Shader::ShaderLanguage param0, char const *param1, char const *param2);
EXPORT_FUNC PointerTo< Shader > * Shader_C_make_p_sp(char const *param0, Shader::ShaderLanguage param1);
EXPORT_FUNC PointerTo< Shader > * Shader_C_make_p_s(char const *param0);
EXPORT_FUNC PointerTo< Shader > * Shader_C_load_compute_p_pp(Shader::ShaderLanguage param0, Filename const *param1);
EXPORT_FUNC PointerTo< Shader > * Shader_C_make_compute_p_ps(Shader::ShaderLanguage param0, char const *param1);
EXPORT_FUNC Filename * Shader_C_get_filename_p_pp(Shader const *param0, Shader::ShaderType param1);
EXPORT_FUNC Filename * Shader_C_get_filename_p_p(Shader const *param0);
EXPORT_FUNC void Shader_C_set_filename_v_ppp(Shader *param0, Shader::ShaderType param1, Filename const *param2);
EXPORT_FUNC char const * Shader_C_get_text_s_pp(Shader const *param0, Shader::ShaderType param1);
EXPORT_FUNC char const * Shader_C_get_text_s_p(Shader const *param0);
EXPORT_FUNC bool Shader_C_get_error_flag_B_p(Shader const *param0);
EXPORT_FUNC Shader::ShaderLanguage Shader_C_get_language_p_p(Shader const *param0);
EXPORT_FUNC bool Shader_C_has_fullpath_B_p(Shader const *param0);
EXPORT_FUNC Filename const * Shader_C_get_fullpath_p_p(Shader const *param0);
EXPORT_FUNC bool Shader_C_get_cache_compiled_shader_B_p(Shader const *param0);
EXPORT_FUNC void Shader_C_set_cache_compiled_shader_v_pB(Shader *param0, bool param1);
EXPORT_FUNC PointerTo< AsyncFuture > * Shader_C_prepare_p_pp(Shader *param0, PreparedGraphicsObjects *param1);
EXPORT_FUNC bool Shader_C_is_prepared_B_pp(Shader const *param0, PreparedGraphicsObjects *param1);
EXPORT_FUNC bool Shader_C_release_B_pp(Shader *param0, PreparedGraphicsObjects *param1);
EXPORT_FUNC int Shader_C_release_all_i_p(Shader *param0);
EXPORT_FUNC ShaderContext * Shader_C_prepare_now_p_ppp(Shader *param0, PreparedGraphicsObjects *param1, GraphicsStateGuardianBase *param2);
EXPORT_FUNC void Shader_C_parse_init_v_p(Shader *param0);
EXPORT_FUNC bool Shader_C_parse_eof_B_p(Shader *param0);
EXPORT_FUNC void Shader_C_cp_report_error_v_pps(Shader *param0, Shader::ShaderArgInfo *param1, char const *param2);
EXPORT_FUNC bool Shader_C_cp_errchk_parameter_words_B_ppi(Shader *param0, Shader::ShaderArgInfo *param1, int param2);
EXPORT_FUNC bool Shader_C_cp_errchk_parameter_in_B_pp(Shader *param0, Shader::ShaderArgInfo *param1);
EXPORT_FUNC bool Shader_C_cp_errchk_parameter_ptr_B_pp(Shader *param0, Shader::ShaderArgInfo *param1);
EXPORT_FUNC bool Shader_C_cp_errchk_parameter_varying_B_pp(Shader *param0, Shader::ShaderArgInfo *param1);
EXPORT_FUNC bool Shader_C_cp_errchk_parameter_uniform_B_pp(Shader *param0, Shader::ShaderArgInfo *param1);
EXPORT_FUNC bool Shader_C_cp_errchk_parameter_float_B_ppii(Shader *param0, Shader::ShaderArgInfo *param1, int param2, int param3);
EXPORT_FUNC bool Shader_C_cp_errchk_parameter_sampler_B_pp(Shader *param0, Shader::ShaderArgInfo *param1);
EXPORT_FUNC int Shader_C_cp_dependency_i_pp(Shader *param0, Shader::ShaderMatInput param1);
EXPORT_FUNC void Shader_C_cp_add_mat_spec_v_pp(Shader *param0, Shader::ShaderMatSpec *param1);
EXPORT_FUNC std::size_t Shader_C_cp_get_mat_cache_size_l_p(Shader const *param0);
EXPORT_FUNC void Shader_C_clear_parameters_v_p(Shader *param0);
EXPORT_FUNC void Shader_C_set_compiled_v_pIsl(Shader *param0, unsigned int param1, char const *param2, std::size_t param3);
EXPORT_FUNC void Shader_C_set_default_caps_v_p(Shader::ShaderCaps const *param0);
EXPORT_FUNC PStatCollector * Shader_C_get_prepare_shader_pcollector_p_p(Shader *param0);
EXPORT_FUNC char const * Shader_C_get_debug_name_s_p(Shader const *param0);
EXPORT_FUNC pvector< Shader::ShaderPtrSpec > * Shader_C_get_ptr_spec_p_p(Shader const *param0);
EXPORT_FUNC pvector< Shader::ShaderMatSpec > * Shader_C_get_mat_spec_p_p(Shader const *param0);
EXPORT_FUNC pvector< Shader::ShaderTexSpec > * Shader_C_get_tex_spec_p_p(Shader const *param0);
EXPORT_FUNC pvector< Shader::ShaderVarSpec > * Shader_C_get_var_spec_p_p(Shader const *param0);
EXPORT_FUNC pvector< Shader::ShaderMatPart > * Shader_C_get_mat_parts_p_p(Shader const *param0);
EXPORT_FUNC int Shader_C_get_mat_deps_i_p(Shader const *param0);
EXPORT_FUNC void Shader_C_set_mat_deps_v_pi(Shader *param0, int param1);
EXPORT_FUNC int Shader_C_get_mat_cache_size_i_p(Shader const *param0);
EXPORT_FUNC void Shader_C_set_mat_cache_size_v_pi(Shader *param0, int param1);
EXPORT_FUNC void Shader_C_set_error_flag_v_pB(Shader *param0, bool param1);
EXPORT_FUNC Filename * Shader_C_get_filename_from_index_p_pip(Shader const *param0, int param1, Shader::ShaderType param2);
EXPORT_FUNC void Shader_C_register_with_read_factory_v_v();
EXPORT_FUNC void Shader_C_write_datagram_v_ppp(Shader *param0, BamWriter *param1, Datagram *param2);
EXPORT_FUNC int Shader_C_get_class_type_i_v();
EXPORT_FUNC void Shader_C_init_type_v_v();
EXPORT_FUNC int Shader_C_get_type_i_p(Shader const *param0);
EXPORT_FUNC int Shader_C_force_init_type_i_p(Shader *param0);
EXPORT_FUNC Shader * Shader_C_ctor_p_p(Shader const *param0);


// ShaderInput

EXPORT_FUNC ShaderInput const * ShaderInput_C_get_blank_p_v();
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_v();
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_spi(CPT_InternalName *param0, LMatrix3d const *param1, int param2);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_sp(CPT_InternalName *param0, LMatrix3d const *param1);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_spi_1_p_spi(CPT_InternalName *param0, LMatrix3f const *param1, int param2);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_sp_1_p_sp(CPT_InternalName *param0, LMatrix3f const *param1);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi(CPT_InternalName *param0, LMatrix4d const *param1, int param2);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp(CPT_InternalName *param0, LMatrix4d const *param1);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi_3_p_spi(CPT_InternalName *param0, LMatrix4f const *param1, int param2);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp_3_p_sp(CPT_InternalName *param0, LMatrix4f const *param1);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi_3_p_spi_4_p_spi(CPT_InternalName *param0, LVecBase2d const *param1, int param2);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp_3_p_sp_4_p_sp(CPT_InternalName *param0, LVecBase2d const *param1);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi_3_p_spi_4_p_spi_5_p_spi(CPT_InternalName *param0, LVecBase2f const *param1, int param2);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp_3_p_sp_4_p_sp_5_p_sp(CPT_InternalName *param0, LVecBase2f const *param1);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi_3_p_spi_4_p_spi_5_p_spi_6_p_spi(CPT_InternalName *param0, LVecBase2i const *param1, int param2);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp_3_p_sp_4_p_sp_5_p_sp_6_p_sp(CPT_InternalName *param0, LVecBase2i const *param1);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi_3_p_spi_4_p_spi_5_p_spi_6_p_spi_7_p_spi(CPT_InternalName *param0, LVecBase3d const *param1, int param2);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp_3_p_sp_4_p_sp_5_p_sp_6_p_sp_7_p_sp(CPT_InternalName *param0, LVecBase3d const *param1);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi_3_p_spi_4_p_spi_5_p_spi_6_p_spi_7_p_spi_8_p_spi(CPT_InternalName *param0, LVecBase3f const *param1, int param2);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp_3_p_sp_4_p_sp_5_p_sp_6_p_sp_7_p_sp_8_p_sp(CPT_InternalName *param0, LVecBase3f const *param1);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi_3_p_spi_4_p_spi_5_p_spi_6_p_spi_7_p_spi_8_p_spi_9_p_spi(CPT_InternalName *param0, LVecBase3i const *param1, int param2);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp_3_p_sp_4_p_sp_5_p_sp_6_p_sp_7_p_sp_8_p_sp_9_p_sp(CPT_InternalName *param0, LVecBase3i const *param1);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi_3_p_spi_4_p_spi_5_p_spi_6_p_spi_7_p_spi_8_p_spi_9_p_spi_10_p_spi(CPT_InternalName *param0, LVecBase4d const *param1, int param2);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp_3_p_sp_4_p_sp_5_p_sp_6_p_sp_7_p_sp_8_p_sp_9_p_sp_10_p_sp(CPT_InternalName *param0, LVecBase4d const *param1);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi_3_p_spi_4_p_spi_5_p_spi_6_p_spi_7_p_spi_8_p_spi_9_p_spi_10_p_spi_11_p_spi(CPT_InternalName *param0, LVecBase4f const *param1, int param2);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp_3_p_sp_4_p_sp_5_p_sp_6_p_sp_7_p_sp_8_p_sp_9_p_sp_10_p_sp_11_p_sp(CPT_InternalName *param0, LVecBase4f const *param1);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi_3_p_spi_4_p_spi_5_p_spi_6_p_spi_7_p_spi_8_p_spi_9_p_spi_10_p_spi_11_p_spi_12_p_spi(CPT_InternalName *param0, LVecBase4i const *param1, int param2);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp_3_p_sp_4_p_sp_5_p_sp_6_p_sp_7_p_sp_8_p_sp_9_p_sp_10_p_sp_11_p_sp_12_p_sp(CPT_InternalName *param0, LVecBase4i const *param1);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi_3_p_spi_4_p_spi_5_p_spi_6_p_spi_7_p_spi_8_p_spi_9_p_spi_10_p_spi_11_p_spi_12_p_spi_13_p_spi(CPT_InternalName *param0, NodePath const *param1, int param2);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp_3_p_sp_4_p_sp_5_p_sp_6_p_sp_7_p_sp_8_p_sp_9_p_sp_10_p_sp_11_p_sp_12_p_sp_13_p_sp(CPT_InternalName *param0, NodePath const *param1);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi_3_p_spi_4_p_spi_5_p_spi_6_p_spi_7_p_spi_8_p_spi_9_p_spi_10_p_spi_11_p_spi_12_p_spi_13_p_spi_14_p_spi(CPT_InternalName *param0, PTA_LMatrix3d const *param1, int param2);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp_3_p_sp_4_p_sp_5_p_sp_6_p_sp_7_p_sp_8_p_sp_9_p_sp_10_p_sp_11_p_sp_12_p_sp_13_p_sp_14_p_sp(CPT_InternalName *param0, PTA_LMatrix3d const *param1);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi_3_p_spi_4_p_spi_5_p_spi_6_p_spi_7_p_spi_8_p_spi_9_p_spi_10_p_spi_11_p_spi_12_p_spi_13_p_spi_14_p_spi_15_p_spi(CPT_InternalName *param0, PTA_LMatrix3f const *param1, int param2);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp_3_p_sp_4_p_sp_5_p_sp_6_p_sp_7_p_sp_8_p_sp_9_p_sp_10_p_sp_11_p_sp_12_p_sp_13_p_sp_14_p_sp_15_p_sp(CPT_InternalName *param0, PTA_LMatrix3f const *param1);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi_3_p_spi_4_p_spi_5_p_spi_6_p_spi_7_p_spi_8_p_spi_9_p_spi_10_p_spi_11_p_spi_12_p_spi_13_p_spi_14_p_spi_15_p_spi_16_p_spi(CPT_InternalName *param0, PTA_LMatrix4d const *param1, int param2);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp_3_p_sp_4_p_sp_5_p_sp_6_p_sp_7_p_sp_8_p_sp_9_p_sp_10_p_sp_11_p_sp_12_p_sp_13_p_sp_14_p_sp_15_p_sp_16_p_sp(CPT_InternalName *param0, PTA_LMatrix4d const *param1);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi_3_p_spi_4_p_spi_5_p_spi_6_p_spi_7_p_spi_8_p_spi_9_p_spi_10_p_spi_11_p_spi_12_p_spi_13_p_spi_14_p_spi_15_p_spi_16_p_spi_17_p_spi(CPT_InternalName *param0, PTA_LMatrix4f const *param1, int param2);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp_3_p_sp_4_p_sp_5_p_sp_6_p_sp_7_p_sp_8_p_sp_9_p_sp_10_p_sp_11_p_sp_12_p_sp_13_p_sp_14_p_sp_15_p_sp_16_p_sp_17_p_sp(CPT_InternalName *param0, PTA_LMatrix4f const *param1);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi_3_p_spi_4_p_spi_5_p_spi_6_p_spi_7_p_spi_8_p_spi_9_p_spi_10_p_spi_11_p_spi_12_p_spi_13_p_spi_14_p_spi_15_p_spi_16_p_spi_17_p_spi_18_p_spi(CPT_InternalName *param0, PTA_LVecBase2d const *param1, int param2);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp_3_p_sp_4_p_sp_5_p_sp_6_p_sp_7_p_sp_8_p_sp_9_p_sp_10_p_sp_11_p_sp_12_p_sp_13_p_sp_14_p_sp_15_p_sp_16_p_sp_17_p_sp_18_p_sp(CPT_InternalName *param0, PTA_LVecBase2d const *param1);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi_3_p_spi_4_p_spi_5_p_spi_6_p_spi_7_p_spi_8_p_spi_9_p_spi_10_p_spi_11_p_spi_12_p_spi_13_p_spi_14_p_spi_15_p_spi_16_p_spi_17_p_spi_18_p_spi_19_p_spi(CPT_InternalName *param0, PTA_LVecBase2f const *param1, int param2);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp_3_p_sp_4_p_sp_5_p_sp_6_p_sp_7_p_sp_8_p_sp_9_p_sp_10_p_sp_11_p_sp_12_p_sp_13_p_sp_14_p_sp_15_p_sp_16_p_sp_17_p_sp_18_p_sp_19_p_sp(CPT_InternalName *param0, PTA_LVecBase2f const *param1);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi_3_p_spi_4_p_spi_5_p_spi_6_p_spi_7_p_spi_8_p_spi_9_p_spi_10_p_spi_11_p_spi_12_p_spi_13_p_spi_14_p_spi_15_p_spi_16_p_spi_17_p_spi_18_p_spi_19_p_spi_20_p_spi(CPT_InternalName *param0, PTA_LVecBase2i const *param1, int param2);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp_3_p_sp_4_p_sp_5_p_sp_6_p_sp_7_p_sp_8_p_sp_9_p_sp_10_p_sp_11_p_sp_12_p_sp_13_p_sp_14_p_sp_15_p_sp_16_p_sp_17_p_sp_18_p_sp_19_p_sp_20_p_sp(CPT_InternalName *param0, PTA_LVecBase2i const *param1);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi_3_p_spi_4_p_spi_5_p_spi_6_p_spi_7_p_spi_8_p_spi_9_p_spi_10_p_spi_11_p_spi_12_p_spi_13_p_spi_14_p_spi_15_p_spi_16_p_spi_17_p_spi_18_p_spi_19_p_spi_20_p_spi_21_p_spi(CPT_InternalName *param0, PTA_LVecBase3d const *param1, int param2);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp_3_p_sp_4_p_sp_5_p_sp_6_p_sp_7_p_sp_8_p_sp_9_p_sp_10_p_sp_11_p_sp_12_p_sp_13_p_sp_14_p_sp_15_p_sp_16_p_sp_17_p_sp_18_p_sp_19_p_sp_20_p_sp_21_p_sp(CPT_InternalName *param0, PTA_LVecBase3d const *param1);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi_3_p_spi_4_p_spi_5_p_spi_6_p_spi_7_p_spi_8_p_spi_9_p_spi_10_p_spi_11_p_spi_12_p_spi_13_p_spi_14_p_spi_15_p_spi_16_p_spi_17_p_spi_18_p_spi_19_p_spi_20_p_spi_21_p_spi_22_p_spi(CPT_InternalName *param0, PTA_LVecBase3f const *param1, int param2);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp_3_p_sp_4_p_sp_5_p_sp_6_p_sp_7_p_sp_8_p_sp_9_p_sp_10_p_sp_11_p_sp_12_p_sp_13_p_sp_14_p_sp_15_p_sp_16_p_sp_17_p_sp_18_p_sp_19_p_sp_20_p_sp_21_p_sp_22_p_sp(CPT_InternalName *param0, PTA_LVecBase3f const *param1);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi_3_p_spi_4_p_spi_5_p_spi_6_p_spi_7_p_spi_8_p_spi_9_p_spi_10_p_spi_11_p_spi_12_p_spi_13_p_spi_14_p_spi_15_p_spi_16_p_spi_17_p_spi_18_p_spi_19_p_spi_20_p_spi_21_p_spi_22_p_spi_23_p_spi(CPT_InternalName *param0, PTA_LVecBase3i const *param1, int param2);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp_3_p_sp_4_p_sp_5_p_sp_6_p_sp_7_p_sp_8_p_sp_9_p_sp_10_p_sp_11_p_sp_12_p_sp_13_p_sp_14_p_sp_15_p_sp_16_p_sp_17_p_sp_18_p_sp_19_p_sp_20_p_sp_21_p_sp_22_p_sp_23_p_sp(CPT_InternalName *param0, PTA_LVecBase3i const *param1);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi_3_p_spi_4_p_spi_5_p_spi_6_p_spi_7_p_spi_8_p_spi_9_p_spi_10_p_spi_11_p_spi_12_p_spi_13_p_spi_14_p_spi_15_p_spi_16_p_spi_17_p_spi_18_p_spi_19_p_spi_20_p_spi_21_p_spi_22_p_spi_23_p_spi_24_p_spi(CPT_InternalName *param0, PTA_LVecBase4d const *param1, int param2);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp_3_p_sp_4_p_sp_5_p_sp_6_p_sp_7_p_sp_8_p_sp_9_p_sp_10_p_sp_11_p_sp_12_p_sp_13_p_sp_14_p_sp_15_p_sp_16_p_sp_17_p_sp_18_p_sp_19_p_sp_20_p_sp_21_p_sp_22_p_sp_23_p_sp_24_p_sp(CPT_InternalName *param0, PTA_LVecBase4d const *param1);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi_3_p_spi_4_p_spi_5_p_spi_6_p_spi_7_p_spi_8_p_spi_9_p_spi_10_p_spi_11_p_spi_12_p_spi_13_p_spi_14_p_spi_15_p_spi_16_p_spi_17_p_spi_18_p_spi_19_p_spi_20_p_spi_21_p_spi_22_p_spi_23_p_spi_24_p_spi_25_p_spi(CPT_InternalName *param0, PTA_LVecBase4f const *param1, int param2);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp_3_p_sp_4_p_sp_5_p_sp_6_p_sp_7_p_sp_8_p_sp_9_p_sp_10_p_sp_11_p_sp_12_p_sp_13_p_sp_14_p_sp_15_p_sp_16_p_sp_17_p_sp_18_p_sp_19_p_sp_20_p_sp_21_p_sp_22_p_sp_23_p_sp_24_p_sp_25_p_sp(CPT_InternalName *param0, PTA_LVecBase4f const *param1);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi_3_p_spi_4_p_spi_5_p_spi_6_p_spi_7_p_spi_8_p_spi_9_p_spi_10_p_spi_11_p_spi_12_p_spi_13_p_spi_14_p_spi_15_p_spi_16_p_spi_17_p_spi_18_p_spi_19_p_spi_20_p_spi_21_p_spi_22_p_spi_23_p_spi_24_p_spi_25_p_spi_26_p_spi(CPT_InternalName *param0, PTA_LVecBase4i const *param1, int param2);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp_3_p_sp_4_p_sp_5_p_sp_6_p_sp_7_p_sp_8_p_sp_9_p_sp_10_p_sp_11_p_sp_12_p_sp_13_p_sp_14_p_sp_15_p_sp_16_p_sp_17_p_sp_18_p_sp_19_p_sp_20_p_sp_21_p_sp_22_p_sp_23_p_sp_24_p_sp_25_p_sp_26_p_sp(CPT_InternalName *param0, PTA_LVecBase4i const *param1);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi_3_p_spi_4_p_spi_5_p_spi_6_p_spi_7_p_spi_8_p_spi_9_p_spi_10_p_spi_11_p_spi_12_p_spi_13_p_spi_14_p_spi_15_p_spi_16_p_spi_17_p_spi_18_p_spi_19_p_spi_20_p_spi_21_p_spi_22_p_spi_23_p_spi_24_p_spi_25_p_spi_26_p_spi_27_p_spi(CPT_InternalName *param0, PTA_double const *param1, int param2);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp_3_p_sp_4_p_sp_5_p_sp_6_p_sp_7_p_sp_8_p_sp_9_p_sp_10_p_sp_11_p_sp_12_p_sp_13_p_sp_14_p_sp_15_p_sp_16_p_sp_17_p_sp_18_p_sp_19_p_sp_20_p_sp_21_p_sp_22_p_sp_23_p_sp_24_p_sp_25_p_sp_26_p_sp_27_p_sp(CPT_InternalName *param0, PTA_double const *param1);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi_3_p_spi_4_p_spi_5_p_spi_6_p_spi_7_p_spi_8_p_spi_9_p_spi_10_p_spi_11_p_spi_12_p_spi_13_p_spi_14_p_spi_15_p_spi_16_p_spi_17_p_spi_18_p_spi_19_p_spi_20_p_spi_21_p_spi_22_p_spi_23_p_spi_24_p_spi_25_p_spi_26_p_spi_27_p_spi_28_p_spi(CPT_InternalName *param0, PTA_float const *param1, int param2);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp_3_p_sp_4_p_sp_5_p_sp_6_p_sp_7_p_sp_8_p_sp_9_p_sp_10_p_sp_11_p_sp_12_p_sp_13_p_sp_14_p_sp_15_p_sp_16_p_sp_17_p_sp_18_p_sp_19_p_sp_20_p_sp_21_p_sp_22_p_sp_23_p_sp_24_p_sp_25_p_sp_26_p_sp_27_p_sp_28_p_sp(CPT_InternalName *param0, PTA_float const *param1);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi_3_p_spi_4_p_spi_5_p_spi_6_p_spi_7_p_spi_8_p_spi_9_p_spi_10_p_spi_11_p_spi_12_p_spi_13_p_spi_14_p_spi_15_p_spi_16_p_spi_17_p_spi_18_p_spi_19_p_spi_20_p_spi_21_p_spi_22_p_spi_23_p_spi_24_p_spi_25_p_spi_26_p_spi_27_p_spi_28_p_spi_29_p_spi(CPT_InternalName *param0, PTA_int const *param1, int param2);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp_3_p_sp_4_p_sp_5_p_sp_6_p_sp_7_p_sp_8_p_sp_9_p_sp_10_p_sp_11_p_sp_12_p_sp_13_p_sp_14_p_sp_15_p_sp_16_p_sp_17_p_sp_18_p_sp_19_p_sp_20_p_sp_21_p_sp_22_p_sp_23_p_sp_24_p_sp_25_p_sp_26_p_sp_27_p_sp_28_p_sp_29_p_sp(CPT_InternalName *param0, PTA_int const *param1);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi_3_p_spi_4_p_spi_5_p_spi_6_p_spi_7_p_spi_8_p_spi_9_p_spi_10_p_spi_11_p_spi_12_p_spi_13_p_spi_14_p_spi_15_p_spi_16_p_spi_17_p_spi_18_p_spi_19_p_spi_20_p_spi_21_p_spi_22_p_spi_23_p_spi_24_p_spi_25_p_spi_26_p_spi_27_p_spi_28_p_spi_29_p_spi_30_p_spi(CPT_InternalName *param0, ParamValueBase *param1, int param2);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp_3_p_sp_4_p_sp_5_p_sp_6_p_sp_7_p_sp_8_p_sp_9_p_sp_10_p_sp_11_p_sp_12_p_sp_13_p_sp_14_p_sp_15_p_sp_16_p_sp_17_p_sp_18_p_sp_19_p_sp_20_p_sp_21_p_sp_22_p_sp_23_p_sp_24_p_sp_25_p_sp_26_p_sp_27_p_sp_28_p_sp_29_p_sp_30_p_sp(CPT_InternalName *param0, ParamValueBase *param1);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi_3_p_spi_4_p_spi_5_p_spi_6_p_spi_7_p_spi_8_p_spi_9_p_spi_10_p_spi_11_p_spi_12_p_spi_13_p_spi_14_p_spi_15_p_spi_16_p_spi_17_p_spi_18_p_spi_19_p_spi_20_p_spi_21_p_spi_22_p_spi_23_p_spi_24_p_spi_25_p_spi_26_p_spi_27_p_spi_28_p_spi_29_p_spi_30_p_spi_31_p_spi(CPT_InternalName *param0, ShaderBuffer *param1, int param2);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp_3_p_sp_4_p_sp_5_p_sp_6_p_sp_7_p_sp_8_p_sp_9_p_sp_10_p_sp_11_p_sp_12_p_sp_13_p_sp_14_p_sp_15_p_sp_16_p_sp_17_p_sp_18_p_sp_19_p_sp_20_p_sp_21_p_sp_22_p_sp_23_p_sp_24_p_sp_25_p_sp_26_p_sp_27_p_sp_28_p_sp_29_p_sp_30_p_sp_31_p_sp(CPT_InternalName *param0, ShaderBuffer *param1);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_sppi(CPT_InternalName *param0, Texture *param1, SamplerState const *param2, int param3);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_spp(CPT_InternalName *param0, Texture *param1, SamplerState const *param2);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_spBBiii(CPT_InternalName *param0, Texture *param1, bool param2, bool param3, int param4, int param5, int param6);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_spBBii(CPT_InternalName *param0, Texture *param1, bool param2, bool param3, int param4, int param5);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_spBBi(CPT_InternalName *param0, Texture *param1, bool param2, bool param3, int param4);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_spBB(CPT_InternalName *param0, Texture *param1, bool param2, bool param3);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi_3_p_spi_4_p_spi_5_p_spi_6_p_spi_7_p_spi_8_p_spi_9_p_spi_10_p_spi_11_p_spi_12_p_spi_13_p_spi_14_p_spi_15_p_spi_16_p_spi_17_p_spi_18_p_spi_19_p_spi_20_p_spi_21_p_spi_22_p_spi_23_p_spi_24_p_spi_25_p_spi_26_p_spi_27_p_spi_28_p_spi_29_p_spi_30_p_spi_31_p_spi_32_p_spi(CPT_InternalName *param0, Texture *param1, int param2);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp_3_p_sp_4_p_sp_5_p_sp_6_p_sp_7_p_sp_8_p_sp_9_p_sp_10_p_sp_11_p_sp_12_p_sp_13_p_sp_14_p_sp_15_p_sp_16_p_sp_17_p_sp_18_p_sp_19_p_sp_20_p_sp_21_p_sp_22_p_sp_23_p_sp_24_p_sp_25_p_sp_26_p_sp_27_p_sp_28_p_sp_29_p_sp_30_p_sp_31_p_sp_32_p_sp(CPT_InternalName *param0, Texture *param1);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_si(CPT_InternalName *param0, int param1);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_s(CPT_InternalName *param0);
EXPORT_FUNC ShaderInput * ShaderInput_C_ctor_p_p(ShaderInput const *param0);
EXPORT_FUNC std::size_t ShaderInput_C_add_hash_l_pl(ShaderInput const *param0, std::size_t param1);
EXPORT_FUNC InternalName const * ShaderInput_C_get_name_s_p(ShaderInput const *param0);
EXPORT_FUNC int ShaderInput_C_get_value_type_i_p(ShaderInput const *param0);
EXPORT_FUNC int ShaderInput_C_get_priority_i_p(ShaderInput const *param0);
EXPORT_FUNC LVecBase4 const * ShaderInput_C_get_vector_p_p(ShaderInput const *param0);
EXPORT_FUNC Shader::ShaderPtrData const * ShaderInput_C_get_ptr_p_p(ShaderInput const *param0);
EXPORT_FUNC NodePath * ShaderInput_C_get_nodepath_p_p(ShaderInput const *param0);
EXPORT_FUNC Texture * ShaderInput_C_get_texture_p_p(ShaderInput const *param0);
EXPORT_FUNC SamplerState const * ShaderInput_C_get_sampler_p_p(ShaderInput const *param0);
EXPORT_FUNC ParamValueBase * ShaderInput_C_get_param_p_p(ShaderInput const *param0);
EXPORT_FUNC TypedWritableReferenceCount * ShaderInput_C_get_value_p_p(ShaderInput const *param0);
EXPORT_FUNC void ShaderInput_C_register_with_read_factory_v_v();


// SimpleLruPage

EXPORT_FUNC GeomVertexArrayData * SimpleLruPage_C_downcast_to_GeomVertexArrayData_p_p(SimpleLruPage *param0);


// TextEncoder

EXPORT_FUNC TextNode * TextEncoder_C_downcast_to_TextNode_p_p(TextEncoder *param0);


// TextFont

EXPORT_FUNC TypedReferenceCount * TextFont_C_upcast_to_TypedReferenceCount_p_p(TextFont *param0);
EXPORT_FUNC Namable * TextFont_C_upcast_to_Namable_p_p(TextFont *param0);
EXPORT_FUNC PointerTo< TextFont > * TextFont_C_make_copy_p_p(TextFont const *param0);
EXPORT_FUNC bool TextFont_C_is_valid_B_p(TextFont const *param0);
EXPORT_FUNC PN_stdfloat TextFont_C_get_line_height_f_p(TextFont const *param0);
EXPORT_FUNC void TextFont_C_set_line_height_v_pf(TextFont *param0, PN_stdfloat param1);
EXPORT_FUNC PN_stdfloat TextFont_C_get_space_advance_f_p(TextFont const *param0);
EXPORT_FUNC void TextFont_C_set_space_advance_v_pf(TextFont *param0, PN_stdfloat param1);
EXPORT_FUNC ConstPointerTo< TextGlyph > * TextFont_C_get_glyph_p_pi(TextFont *param0, int param1);
EXPORT_FUNC bool TextFont_C_get_glyph_B_pip(TextFont *param0, int param1, ConstPointerTo< TextGlyph > *param2);
EXPORT_FUNC PN_stdfloat TextFont_C_get_kerning_f_pii(TextFont const *param0, int param1, int param2);
EXPORT_FUNC void TextFont_C_write_v_ppi(TextFont const *param0, std::ostream *param1, int param2);
EXPORT_FUNC PN_stdfloat TextFont_C_get_total_poly_margin_f_p(TextFont const *param0);
EXPORT_FUNC TextGlyph * TextFont_C_get_invalid_glyph_p_p(TextFont *param0);
EXPORT_FUNC TextFont::RenderMode TextFont_C_string_render_mode_p_s(char const *param0);
EXPORT_FUNC int TextFont_C_get_class_type_i_v();
EXPORT_FUNC void TextFont_C_init_type_v_v();
EXPORT_FUNC int TextFont_C_get_type_i_p(TextFont const *param0);
EXPORT_FUNC int TextFont_C_force_init_type_i_p(TextFont *param0);


// TextNode

EXPORT_FUNC PandaNode * TextNode_C_upcast_to_PandaNode_p_p(TextNode *param0);
EXPORT_FUNC TextEncoder * TextNode_C_upcast_to_TextEncoder_p_p(TextNode *param0);
EXPORT_FUNC TextProperties * TextNode_C_upcast_to_TextProperties_p_p(TextNode *param0);
EXPORT_FUNC TextNode * TextNode_C_ctor_p_s(char const *param0);
EXPORT_FUNC TextNode * TextNode_C_ctor_p_sp(char const *param0, TextProperties const *param1);
EXPORT_FUNC PN_stdfloat TextNode_C_get_line_height_f_p(TextNode const *param0);
EXPORT_FUNC void TextNode_C_set_max_rows_v_pi(TextNode *param0, int param1);
EXPORT_FUNC void TextNode_C_clear_max_rows_v_p(TextNode *param0);
EXPORT_FUNC bool TextNode_C_has_max_rows_B_p(TextNode const *param0);
EXPORT_FUNC int TextNode_C_get_max_rows_i_p(TextNode const *param0);
EXPORT_FUNC bool TextNode_C_has_overflow_B_p(TextNode const *param0);
EXPORT_FUNC void TextNode_C_set_frame_color_v_pp(TextNode *param0, LColor const *param1);
EXPORT_FUNC void TextNode_C_set_frame_color_v_pffff(TextNode *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC LColor * TextNode_C_get_frame_color_p_p(TextNode const *param0);
EXPORT_FUNC void TextNode_C_set_card_border_v_pff(TextNode *param0, PN_stdfloat param1, PN_stdfloat param2);
EXPORT_FUNC void TextNode_C_clear_card_border_v_p(TextNode *param0);
EXPORT_FUNC PN_stdfloat TextNode_C_get_card_border_size_f_p(TextNode const *param0);
EXPORT_FUNC PN_stdfloat TextNode_C_get_card_border_uv_portion_f_p(TextNode const *param0);
EXPORT_FUNC bool TextNode_C_has_card_border_B_p(TextNode const *param0);
EXPORT_FUNC void TextNode_C_set_card_color_v_pp(TextNode *param0, LColor const *param1);
EXPORT_FUNC void TextNode_C_set_card_color_v_pffff(TextNode *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC LColor * TextNode_C_get_card_color_p_p(TextNode const *param0);
EXPORT_FUNC void TextNode_C_set_card_texture_v_pp(TextNode *param0, Texture *param1);
EXPORT_FUNC void TextNode_C_clear_card_texture_v_p(TextNode *param0);
EXPORT_FUNC bool TextNode_C_has_card_texture_B_p(TextNode const *param0);
EXPORT_FUNC Texture * TextNode_C_get_card_texture_p_p(TextNode const *param0);
EXPORT_FUNC void TextNode_C_set_frame_as_margin_v_pffff(TextNode *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC void TextNode_C_set_frame_actual_v_pffff(TextNode *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC void TextNode_C_clear_frame_v_p(TextNode *param0);
EXPORT_FUNC bool TextNode_C_has_frame_B_p(TextNode const *param0);
EXPORT_FUNC bool TextNode_C_is_frame_as_margin_B_p(TextNode const *param0);
EXPORT_FUNC LVecBase4 * TextNode_C_get_frame_as_set_p_p(TextNode const *param0);
EXPORT_FUNC LVecBase4 * TextNode_C_get_frame_actual_p_p(TextNode const *param0);
EXPORT_FUNC void TextNode_C_set_frame_line_width_v_pf(TextNode *param0, PN_stdfloat param1);
EXPORT_FUNC PN_stdfloat TextNode_C_get_frame_line_width_f_p(TextNode const *param0);
EXPORT_FUNC void TextNode_C_set_frame_corners_v_pB(TextNode *param0, bool param1);
EXPORT_FUNC bool TextNode_C_get_frame_corners_B_p(TextNode const *param0);
EXPORT_FUNC void TextNode_C_set_card_as_margin_v_pffff(TextNode *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC void TextNode_C_set_card_actual_v_pffff(TextNode *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC void TextNode_C_set_card_decal_v_pB(TextNode *param0, bool param1);
EXPORT_FUNC void TextNode_C_clear_card_v_p(TextNode *param0);
EXPORT_FUNC bool TextNode_C_has_card_B_p(TextNode const *param0);
EXPORT_FUNC bool TextNode_C_get_card_decal_B_p(TextNode const *param0);
EXPORT_FUNC bool TextNode_C_is_card_as_margin_B_p(TextNode const *param0);
EXPORT_FUNC LVecBase4 * TextNode_C_get_card_as_set_p_p(TextNode const *param0);
EXPORT_FUNC LVecBase4 * TextNode_C_get_card_actual_p_p(TextNode const *param0);
EXPORT_FUNC LVecBase4 * TextNode_C_get_card_transformed_p_p(TextNode const *param0);
EXPORT_FUNC void TextNode_C_set_transform_v_pp(TextNode *param0, LMatrix4 const *param1);
EXPORT_FUNC LMatrix4 * TextNode_C_get_transform_p_p(TextNode const *param0);
EXPORT_FUNC void TextNode_C_set_coordinate_system_v_pp(TextNode *param0, CoordinateSystem param1);
EXPORT_FUNC CoordinateSystem TextNode_C_get_coordinate_system_p_p(TextNode const *param0);
EXPORT_FUNC void TextNode_C_set_usage_hint_v_pp(TextNode *param0, GeomEnums::UsageHint param1);
EXPORT_FUNC GeomEnums::UsageHint TextNode_C_get_usage_hint_p_p(TextNode const *param0);
EXPORT_FUNC void TextNode_C_set_flatten_flags_v_pi(TextNode *param0, int param1);
EXPORT_FUNC int TextNode_C_get_flatten_flags_i_p(TextNode const *param0);
EXPORT_FUNC void TextNode_C_set_font_v_pp(TextNode *param0, TextFont *param1);
EXPORT_FUNC void TextNode_C_clear_font_v_p(TextNode *param0);
EXPORT_FUNC void TextNode_C_set_small_caps_v_pB(TextNode *param0, bool param1);
EXPORT_FUNC void TextNode_C_clear_small_caps_v_p(TextNode *param0);
EXPORT_FUNC void TextNode_C_set_small_caps_scale_v_pf(TextNode *param0, PN_stdfloat param1);
EXPORT_FUNC void TextNode_C_clear_small_caps_scale_v_p(TextNode *param0);
EXPORT_FUNC void TextNode_C_set_slant_v_pf(TextNode *param0, PN_stdfloat param1);
EXPORT_FUNC void TextNode_C_clear_slant_v_p(TextNode *param0);
EXPORT_FUNC void TextNode_C_set_align_v_pp(TextNode *param0, TextProperties::Alignment param1);
EXPORT_FUNC void TextNode_C_clear_align_v_p(TextNode *param0);
EXPORT_FUNC void TextNode_C_set_indent_v_pf(TextNode *param0, PN_stdfloat param1);
EXPORT_FUNC void TextNode_C_clear_indent_v_p(TextNode *param0);
EXPORT_FUNC void TextNode_C_set_wordwrap_v_pf(TextNode *param0, PN_stdfloat param1);
EXPORT_FUNC void TextNode_C_clear_wordwrap_v_p(TextNode *param0);
EXPORT_FUNC void TextNode_C_set_text_color_v_pp(TextNode *param0, LColor const *param1);
EXPORT_FUNC void TextNode_C_set_text_color_v_pffff(TextNode *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC void TextNode_C_clear_text_color_v_p(TextNode *param0);
EXPORT_FUNC void TextNode_C_set_shadow_color_v_pp(TextNode *param0, LColor const *param1);
EXPORT_FUNC void TextNode_C_set_shadow_color_v_pffff(TextNode *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC void TextNode_C_clear_shadow_color_v_p(TextNode *param0);
EXPORT_FUNC void TextNode_C_set_shadow_v_pp(TextNode *param0, LVecBase2 const *param1);
EXPORT_FUNC void TextNode_C_set_shadow_v_pff(TextNode *param0, PN_stdfloat param1, PN_stdfloat param2);
EXPORT_FUNC void TextNode_C_clear_shadow_v_p(TextNode *param0);
EXPORT_FUNC void TextNode_C_set_bin_v_ps(TextNode *param0, char const *param1);
EXPORT_FUNC void TextNode_C_clear_bin_v_p(TextNode *param0);
EXPORT_FUNC int TextNode_C_set_draw_order_i_pi(TextNode *param0, int param1);
EXPORT_FUNC void TextNode_C_clear_draw_order_v_p(TextNode *param0);
EXPORT_FUNC void TextNode_C_set_tab_width_v_pf(TextNode *param0, PN_stdfloat param1);
EXPORT_FUNC void TextNode_C_clear_tab_width_v_p(TextNode *param0);
EXPORT_FUNC void TextNode_C_set_glyph_scale_v_pf(TextNode *param0, PN_stdfloat param1);
EXPORT_FUNC void TextNode_C_clear_glyph_scale_v_p(TextNode *param0);
EXPORT_FUNC void TextNode_C_set_glyph_shift_v_pf(TextNode *param0, PN_stdfloat param1);
EXPORT_FUNC void TextNode_C_clear_glyph_shift_v_p(TextNode *param0);
EXPORT_FUNC char const * TextNode_C_get_wordwrapped_text_s_p(TextNode const *param0);
EXPORT_FUNC PN_stdfloat TextNode_C_calc_width_f_ps(TextNode const *param0, char const *param1);
EXPORT_FUNC PN_stdfloat TextNode_C_calc_width_f_ps_1_f_ps(TextNode const *param0, wchar_t const *param1);
EXPORT_FUNC PN_stdfloat TextNode_C_calc_width_f_pp(TextNode const *param0, wchar_t param1);
EXPORT_FUNC bool TextNode_C_has_exact_character_B_pp(TextNode const *param0, wchar_t param1);
EXPORT_FUNC bool TextNode_C_has_character_B_pp(TextNode const *param0, wchar_t param1);
EXPORT_FUNC bool TextNode_C_is_whitespace_B_pp(TextNode const *param0, wchar_t param1);
EXPORT_FUNC wchar_t const * TextNode_C_get_wordwrapped_wtext_s_p(TextNode const *param0);
EXPORT_FUNC void TextNode_C_output_v_pp(TextNode const *param0, std::ostream *param1);
EXPORT_FUNC void TextNode_C_write_v_ppi(TextNode const *param0, std::ostream *param1, int param2);
EXPORT_FUNC void TextNode_C_write_v_pp(TextNode const *param0, std::ostream *param1);
EXPORT_FUNC PN_stdfloat TextNode_C_get_left_f_p(TextNode const *param0);
EXPORT_FUNC PN_stdfloat TextNode_C_get_right_f_p(TextNode const *param0);
EXPORT_FUNC PN_stdfloat TextNode_C_get_bottom_f_p(TextNode const *param0);
EXPORT_FUNC PN_stdfloat TextNode_C_get_top_f_p(TextNode const *param0);
EXPORT_FUNC PN_stdfloat TextNode_C_get_height_f_p(TextNode const *param0);
EXPORT_FUNC PN_stdfloat TextNode_C_get_width_f_p(TextNode const *param0);
EXPORT_FUNC LPoint3 * TextNode_C_get_upper_left_3d_p_p(TextNode const *param0);
EXPORT_FUNC LPoint3 * TextNode_C_get_lower_right_3d_p_p(TextNode const *param0);
EXPORT_FUNC int TextNode_C_get_num_rows_i_p(TextNode const *param0);
EXPORT_FUNC PointerTo< PandaNode > * TextNode_C_generate_p_p(TextNode *param0);
EXPORT_FUNC void TextNode_C_update_v_p(TextNode *param0);
EXPORT_FUNC void TextNode_C_force_update_v_p(TextNode *param0);
EXPORT_FUNC PointerTo< PandaNode > * TextNode_C_get_internal_geom_p_p(TextNode const *param0);
EXPORT_FUNC TextFont * TextNode_C_get_font_p_p(TextNode const *param0);
EXPORT_FUNC bool TextNode_C_get_small_caps_B_p(TextNode const *param0);
EXPORT_FUNC PN_stdfloat TextNode_C_get_small_caps_scale_f_p(TextNode const *param0);
EXPORT_FUNC PN_stdfloat TextNode_C_get_slant_f_p(TextNode const *param0);
EXPORT_FUNC bool TextNode_C_get_underscore_B_p(TextNode const *param0);
EXPORT_FUNC void TextNode_C_set_underscore_v_pB(TextNode *param0, bool param1);
EXPORT_FUNC PN_stdfloat TextNode_C_get_underscore_height_f_p(TextNode const *param0);
EXPORT_FUNC void TextNode_C_set_underscore_height_v_pf(TextNode *param0, PN_stdfloat param1);
EXPORT_FUNC TextProperties::Alignment TextNode_C_get_align_p_p(TextNode const *param0);
EXPORT_FUNC PN_stdfloat TextNode_C_get_indent_f_p(TextNode const *param0);
EXPORT_FUNC PN_stdfloat TextNode_C_get_wordwrap_f_p(TextNode const *param0);
EXPORT_FUNC bool TextNode_C_get_preserve_trailing_whitespace_B_p(TextNode const *param0);
EXPORT_FUNC void TextNode_C_set_preserve_trailing_whitespace_v_pB(TextNode *param0, bool param1);
EXPORT_FUNC LColor * TextNode_C_get_text_color_p_p(TextNode const *param0);
EXPORT_FUNC LColor * TextNode_C_get_shadow_color_p_p(TextNode const *param0);
EXPORT_FUNC LVector2 * TextNode_C_get_shadow_p_p(TextNode const *param0);
EXPORT_FUNC char const * TextNode_C_get_bin_s_p(TextNode const *param0);
EXPORT_FUNC int TextNode_C_get_draw_order_i_p(TextNode const *param0);
EXPORT_FUNC PN_stdfloat TextNode_C_get_tab_width_f_p(TextNode const *param0);
EXPORT_FUNC PN_stdfloat TextNode_C_get_glyph_scale_f_p(TextNode const *param0);
EXPORT_FUNC PN_stdfloat TextNode_C_get_glyph_shift_f_p(TextNode const *param0);
EXPORT_FUNC PN_stdfloat TextNode_C_get_text_scale_f_p(TextNode const *param0);
EXPORT_FUNC void TextNode_C_set_text_scale_v_pf(TextNode *param0, PN_stdfloat param1);
EXPORT_FUNC void TextNode_C_text_changed_v_p(TextNode *param0);
EXPORT_FUNC int TextNode_C_get_unsafe_to_apply_attribs_i_p(TextNode const *param0);
EXPORT_FUNC void TextNode_C_apply_attribs_to_vertices_v_ppip(TextNode *param0, AccumulatedAttribs const *param1, int param2, GeomTransformer *param3);
EXPORT_FUNC bool TextNode_C_cull_callback_B_ppp(TextNode *param0, CullTraverser *param1, CullTraverserData *param2);
EXPORT_FUNC bool TextNode_C_is_renderable_B_p(TextNode const *param0);
EXPORT_FUNC void TextNode_C_r_prepare_scene_v_ppppp(TextNode *param0, GraphicsStateGuardianBase *param1, RenderState const *param2, GeomTransformer *param3, Thread *param4);
EXPORT_FUNC int TextNode_C_get_class_type_i_v();
EXPORT_FUNC void TextNode_C_init_type_v_v();
EXPORT_FUNC int TextNode_C_get_type_i_p(TextNode const *param0);
EXPORT_FUNC int TextNode_C_force_init_type_i_p(TextNode *param0);


// TextProperties

EXPORT_FUNC TextNode * TextProperties_C_downcast_to_TextNode_p_p(TextProperties *param0);


// Texture

EXPORT_FUNC TypedWritableReferenceCount * Texture_C_upcast_to_TypedWritableReferenceCount_p_p(Texture *param0);
EXPORT_FUNC Namable * Texture_C_upcast_to_Namable_p_p(Texture *param0);
EXPORT_FUNC Texture * Texture_C_ctor_p_s(char const *param0);
EXPORT_FUNC Texture * Texture_C_ctor_p_v();
EXPORT_FUNC PointerTo< Texture > * Texture_C_make_copy_p_p(Texture const *param0);
EXPORT_FUNC void Texture_C_clear_v_p(Texture *param0);
EXPORT_FUNC void Texture_C_setup_texture_v_ppiiipp(Texture *param0, Texture::TextureType param1, int param2, int param3, int param4, Texture::ComponentType param5, Texture::Format param6);
EXPORT_FUNC void Texture_C_setup_1d_texture_v_p(Texture *param0);
EXPORT_FUNC void Texture_C_setup_1d_texture_v_pipp(Texture *param0, int param1, Texture::ComponentType param2, Texture::Format param3);
EXPORT_FUNC void Texture_C_setup_2d_texture_v_p(Texture *param0);
EXPORT_FUNC void Texture_C_setup_2d_texture_v_piipp(Texture *param0, int param1, int param2, Texture::ComponentType param3, Texture::Format param4);
EXPORT_FUNC void Texture_C_setup_3d_texture_v_pi(Texture *param0, int param1);
EXPORT_FUNC void Texture_C_setup_3d_texture_v_p(Texture *param0);
EXPORT_FUNC void Texture_C_setup_3d_texture_v_piiipp(Texture *param0, int param1, int param2, int param3, Texture::ComponentType param4, Texture::Format param5);
EXPORT_FUNC void Texture_C_setup_cube_map_v_p(Texture *param0);
EXPORT_FUNC void Texture_C_setup_cube_map_v_pipp(Texture *param0, int param1, Texture::ComponentType param2, Texture::Format param3);
EXPORT_FUNC void Texture_C_setup_2d_texture_array_v_pi(Texture *param0, int param1);
EXPORT_FUNC void Texture_C_setup_2d_texture_array_v_p(Texture *param0);
EXPORT_FUNC void Texture_C_setup_2d_texture_array_v_piiipp(Texture *param0, int param1, int param2, int param3, Texture::ComponentType param4, Texture::Format param5);
EXPORT_FUNC void Texture_C_setup_cube_map_array_v_pi(Texture *param0, int param1);
EXPORT_FUNC void Texture_C_setup_cube_map_array_v_piipp(Texture *param0, int param1, int param2, Texture::ComponentType param3, Texture::Format param4);
EXPORT_FUNC void Texture_C_setup_buffer_texture_v_pippp(Texture *param0, int param1, Texture::ComponentType param2, Texture::Format param3, GeomEnums::UsageHint param4);
EXPORT_FUNC void Texture_C_generate_normalization_cube_map_v_pi(Texture *param0, int param1);
EXPORT_FUNC void Texture_C_generate_alpha_scale_map_v_p(Texture *param0);
EXPORT_FUNC void Texture_C_clear_image_v_p(Texture *param0);
EXPORT_FUNC bool Texture_C_has_clear_color_B_p(Texture const *param0);
EXPORT_FUNC LColor * Texture_C_get_clear_color_p_p(Texture const *param0);
EXPORT_FUNC void Texture_C_set_clear_color_v_pp(Texture *param0, LColor const *param1);
EXPORT_FUNC void Texture_C_clear_clear_color_v_p(Texture *param0);
EXPORT_FUNC vector_uchar Texture_C_get_clear_data_p_p(Texture const *param0);
EXPORT_FUNC bool Texture_C_read_B_pppiip(Texture *param0, Filename const *param1, Filename const *param2, int param3, int param4, LoaderOptions const *param5);
EXPORT_FUNC bool Texture_C_read_B_pppii(Texture *param0, Filename const *param1, Filename const *param2, int param3, int param4);
EXPORT_FUNC bool Texture_C_read_B_pppiiiiBBpp(Texture *param0, Filename const *param1, Filename const *param2, int param3, int param4, int param5, int param6, bool param7, bool param8, BamCacheRecord *param9, LoaderOptions const *param10);
EXPORT_FUNC bool Texture_C_read_B_pppiiiiBBp(Texture *param0, Filename const *param1, Filename const *param2, int param3, int param4, int param5, int param6, bool param7, bool param8, BamCacheRecord *param9);
EXPORT_FUNC bool Texture_C_read_B_pppiiiiBB(Texture *param0, Filename const *param1, Filename const *param2, int param3, int param4, int param5, int param6, bool param7, bool param8);
EXPORT_FUNC bool Texture_C_read_B_ppp(Texture *param0, Filename const *param1, LoaderOptions const *param2);
EXPORT_FUNC bool Texture_C_read_B_pp(Texture *param0, Filename const *param1);
EXPORT_FUNC bool Texture_C_read_B_ppiiBBp(Texture *param0, Filename const *param1, int param2, int param3, bool param4, bool param5, LoaderOptions const *param6);
EXPORT_FUNC bool Texture_C_read_B_ppiiBB(Texture *param0, Filename const *param1, int param2, int param3, bool param4, bool param5);
EXPORT_FUNC bool Texture_C_write_B_pp(Texture *param0, Filename const *param1);
EXPORT_FUNC bool Texture_C_write_B_ppiiBB(Texture *param0, Filename const *param1, int param2, int param3, bool param4, bool param5);
EXPORT_FUNC void Texture_C_write_v_ppi(Texture const *param0, std::ostream *param1, int param2);
EXPORT_FUNC bool Texture_C_read_txo_B_pps(Texture *param0, std::istream *param1, char const *param2);
EXPORT_FUNC bool Texture_C_read_txo_B_pp(Texture *param0, std::istream *param1);
EXPORT_FUNC PointerTo< Texture > * Texture_C_make_from_txo_p_ps(std::istream *param0, char const *param1);
EXPORT_FUNC PointerTo< Texture > * Texture_C_make_from_txo_p_p(std::istream *param0);
EXPORT_FUNC bool Texture_C_write_txo_B_pps(Texture const *param0, std::ostream *param1, char const *param2);
EXPORT_FUNC bool Texture_C_write_txo_B_pp(Texture const *param0, std::ostream *param1);
EXPORT_FUNC bool Texture_C_read_dds_B_ppsB(Texture *param0, std::istream *param1, char const *param2, bool param3);
EXPORT_FUNC bool Texture_C_read_dds_B_pps(Texture *param0, std::istream *param1, char const *param2);
EXPORT_FUNC bool Texture_C_read_dds_B_pp(Texture *param0, std::istream *param1);
EXPORT_FUNC bool Texture_C_read_ktx_B_ppsB(Texture *param0, std::istream *param1, char const *param2, bool param3);
EXPORT_FUNC bool Texture_C_read_ktx_B_pps(Texture *param0, std::istream *param1, char const *param2);
EXPORT_FUNC bool Texture_C_read_ktx_B_pp(Texture *param0, std::istream *param1);
EXPORT_FUNC bool Texture_C_load_B_ppp(Texture *param0, PNMImage const *param1, LoaderOptions const *param2);
EXPORT_FUNC bool Texture_C_load_B_pp(Texture *param0, PNMImage const *param1);
EXPORT_FUNC bool Texture_C_load_B_ppiip(Texture *param0, PNMImage const *param1, int param2, int param3, LoaderOptions const *param4);
EXPORT_FUNC bool Texture_C_load_B_ppii(Texture *param0, PNMImage const *param1, int param2, int param3);
EXPORT_FUNC bool Texture_C_load_B_ppp_1_B_ppp(Texture *param0, PfmFile const *param1, LoaderOptions const *param2);
EXPORT_FUNC bool Texture_C_load_B_pp_1_B_pp(Texture *param0, PfmFile const *param1);
EXPORT_FUNC bool Texture_C_load_B_ppiip_1_B_ppiip(Texture *param0, PfmFile const *param1, int param2, int param3, LoaderOptions const *param4);
EXPORT_FUNC bool Texture_C_load_B_ppii_1_B_ppii(Texture *param0, PfmFile const *param1, int param2, int param3);
EXPORT_FUNC bool Texture_C_load_sub_image_B_ppiiii(Texture *param0, PNMImage const *param1, int param2, int param3, int param4, int param5);
EXPORT_FUNC bool Texture_C_load_sub_image_B_ppiii(Texture *param0, PNMImage const *param1, int param2, int param3, int param4);
EXPORT_FUNC bool Texture_C_load_sub_image_B_ppii(Texture *param0, PNMImage const *param1, int param2, int param3);
EXPORT_FUNC bool Texture_C_store_B_pp(Texture const *param0, PNMImage *param1);
EXPORT_FUNC bool Texture_C_store_B_ppii(Texture const *param0, PNMImage *param1, int param2, int param3);
EXPORT_FUNC bool Texture_C_store_B_pp_1_B_pp(Texture const *param0, PfmFile *param1);
EXPORT_FUNC bool Texture_C_store_B_ppii_1_B_ppii(Texture const *param0, PfmFile *param1, int param2, int param3);
EXPORT_FUNC bool Texture_C_reload_B_p(Texture *param0);
EXPORT_FUNC Texture * Texture_C_load_related_p_ps(Texture const *param0, InternalName const *param1);
EXPORT_FUNC bool Texture_C_has_filename_B_p(Texture const *param0);
EXPORT_FUNC Filename const * Texture_C_get_filename_p_p(Texture const *param0);
EXPORT_FUNC void Texture_C_set_filename_v_pp(Texture *param0, Filename const *param1);
EXPORT_FUNC void Texture_C_clear_filename_v_p(Texture *param0);
EXPORT_FUNC bool Texture_C_has_alpha_filename_B_p(Texture const *param0);
EXPORT_FUNC Filename const * Texture_C_get_alpha_filename_p_p(Texture const *param0);
EXPORT_FUNC void Texture_C_set_alpha_filename_v_pp(Texture *param0, Filename const *param1);
EXPORT_FUNC void Texture_C_clear_alpha_filename_v_p(Texture *param0);
EXPORT_FUNC bool Texture_C_has_fullpath_B_p(Texture const *param0);
EXPORT_FUNC Filename const * Texture_C_get_fullpath_p_p(Texture const *param0);
EXPORT_FUNC void Texture_C_set_fullpath_v_pp(Texture *param0, Filename const *param1);
EXPORT_FUNC void Texture_C_clear_fullpath_v_p(Texture *param0);
EXPORT_FUNC bool Texture_C_has_alpha_fullpath_B_p(Texture const *param0);
EXPORT_FUNC Filename const * Texture_C_get_alpha_fullpath_p_p(Texture const *param0);
EXPORT_FUNC void Texture_C_set_alpha_fullpath_v_pp(Texture *param0, Filename const *param1);
EXPORT_FUNC void Texture_C_clear_alpha_fullpath_v_p(Texture *param0);
EXPORT_FUNC int Texture_C_get_x_size_i_p(Texture const *param0);
EXPORT_FUNC void Texture_C_set_x_size_v_pi(Texture *param0, int param1);
EXPORT_FUNC int Texture_C_get_y_size_i_p(Texture const *param0);
EXPORT_FUNC void Texture_C_set_y_size_v_pi(Texture *param0, int param1);
EXPORT_FUNC int Texture_C_get_z_size_i_p(Texture const *param0);
EXPORT_FUNC void Texture_C_set_z_size_v_pi(Texture *param0, int param1);
EXPORT_FUNC int Texture_C_get_num_views_i_p(Texture const *param0);
EXPORT_FUNC void Texture_C_set_num_views_v_pi(Texture *param0, int param1);
EXPORT_FUNC int Texture_C_get_num_pages_i_p(Texture const *param0);
EXPORT_FUNC int Texture_C_get_num_components_i_p(Texture const *param0);
EXPORT_FUNC int Texture_C_get_component_width_i_p(Texture const *param0);
EXPORT_FUNC Texture::TextureType Texture_C_get_texture_type_p_p(Texture const *param0);
EXPORT_FUNC GeomEnums::UsageHint Texture_C_get_usage_hint_p_p(Texture const *param0);
EXPORT_FUNC Texture::Format Texture_C_get_format_p_p(Texture const *param0);
EXPORT_FUNC void Texture_C_set_format_v_pp(Texture *param0, Texture::Format param1);
EXPORT_FUNC Texture::ComponentType Texture_C_get_component_type_p_p(Texture const *param0);
EXPORT_FUNC void Texture_C_set_component_type_v_pp(Texture *param0, Texture::ComponentType param1);
EXPORT_FUNC SamplerState::WrapMode Texture_C_get_wrap_u_p_p(Texture const *param0);
EXPORT_FUNC void Texture_C_set_wrap_u_v_pp(Texture *param0, Texture::WrapMode param1);
EXPORT_FUNC SamplerState::WrapMode Texture_C_get_wrap_v_p_p(Texture const *param0);
EXPORT_FUNC void Texture_C_set_wrap_v_v_pp(Texture *param0, Texture::WrapMode param1);
EXPORT_FUNC SamplerState::WrapMode Texture_C_get_wrap_w_p_p(Texture const *param0);
EXPORT_FUNC void Texture_C_set_wrap_w_v_pp(Texture *param0, Texture::WrapMode param1);
EXPORT_FUNC SamplerState::FilterType Texture_C_get_minfilter_p_p(Texture const *param0);
EXPORT_FUNC SamplerState::FilterType Texture_C_get_effective_minfilter_p_p(Texture const *param0);
EXPORT_FUNC void Texture_C_set_minfilter_v_pp(Texture *param0, Texture::FilterType param1);
EXPORT_FUNC SamplerState::FilterType Texture_C_get_magfilter_p_p(Texture const *param0);
EXPORT_FUNC SamplerState::FilterType Texture_C_get_effective_magfilter_p_p(Texture const *param0);
EXPORT_FUNC void Texture_C_set_magfilter_v_pp(Texture *param0, Texture::FilterType param1);
EXPORT_FUNC int Texture_C_get_anisotropic_degree_i_p(Texture const *param0);
EXPORT_FUNC int Texture_C_get_effective_anisotropic_degree_i_p(Texture const *param0);
EXPORT_FUNC void Texture_C_set_anisotropic_degree_v_pi(Texture *param0, int param1);
EXPORT_FUNC LColor * Texture_C_get_border_color_p_p(Texture const *param0);
EXPORT_FUNC void Texture_C_set_border_color_v_pp(Texture *param0, LColor const *param1);
EXPORT_FUNC bool Texture_C_has_compression_B_p(Texture const *param0);
EXPORT_FUNC Texture::CompressionMode Texture_C_get_compression_p_p(Texture const *param0);
EXPORT_FUNC void Texture_C_set_compression_v_pp(Texture *param0, Texture::CompressionMode param1);
EXPORT_FUNC bool Texture_C_get_render_to_texture_B_p(Texture const *param0);
EXPORT_FUNC void Texture_C_set_render_to_texture_v_pB(Texture *param0, bool param1);
EXPORT_FUNC SamplerState const * Texture_C_get_default_sampler_p_p(Texture const *param0);
EXPORT_FUNC void Texture_C_set_default_sampler_v_pp(Texture *param0, SamplerState const *param1);
EXPORT_FUNC bool Texture_C_uses_mipmaps_B_p(Texture const *param0);
EXPORT_FUNC Texture::QualityLevel Texture_C_get_quality_level_p_p(Texture const *param0);
EXPORT_FUNC Texture::QualityLevel Texture_C_get_effective_quality_level_p_p(Texture const *param0);
EXPORT_FUNC void Texture_C_set_quality_level_v_pp(Texture *param0, Texture::QualityLevel param1);
EXPORT_FUNC int Texture_C_get_expected_num_mipmap_levels_i_p(Texture const *param0);
EXPORT_FUNC int Texture_C_get_expected_mipmap_x_size_i_pi(Texture const *param0, int param1);
EXPORT_FUNC int Texture_C_get_expected_mipmap_y_size_i_pi(Texture const *param0, int param1);
EXPORT_FUNC int Texture_C_get_expected_mipmap_z_size_i_pi(Texture const *param0, int param1);
EXPORT_FUNC int Texture_C_get_expected_mipmap_num_pages_i_pi(Texture const *param0, int param1);
EXPORT_FUNC bool Texture_C_has_ram_image_B_p(Texture const *param0);
EXPORT_FUNC bool Texture_C_has_uncompressed_ram_image_B_p(Texture const *param0);
EXPORT_FUNC bool Texture_C_might_have_ram_image_B_p(Texture const *param0);
EXPORT_FUNC std::size_t Texture_C_get_ram_image_size_l_p(Texture const *param0);
EXPORT_FUNC std::size_t Texture_C_get_ram_view_size_l_p(Texture const *param0);
EXPORT_FUNC std::size_t Texture_C_get_ram_page_size_l_p(Texture const *param0);
EXPORT_FUNC std::size_t Texture_C_get_expected_ram_image_size_l_p(Texture const *param0);
EXPORT_FUNC std::size_t Texture_C_get_expected_ram_page_size_l_p(Texture const *param0);
EXPORT_FUNC CPTA_uchar * Texture_C_get_ram_image_p_p(Texture *param0);
EXPORT_FUNC Texture::CompressionMode Texture_C_get_ram_image_compression_p_p(Texture const *param0);
EXPORT_FUNC CPTA_uchar * Texture_C_get_uncompressed_ram_image_p_p(Texture *param0);
EXPORT_FUNC CPTA_uchar * Texture_C_get_ram_image_as_p_ps(Texture *param0, char const *param1);
EXPORT_FUNC PTA_uchar * Texture_C_modify_ram_image_p_p(Texture *param0);
EXPORT_FUNC PTA_uchar * Texture_C_make_ram_image_p_p(Texture *param0);
EXPORT_FUNC void Texture_C_clear_ram_image_v_p(Texture *param0);
EXPORT_FUNC void Texture_C_set_keep_ram_image_v_pB(Texture *param0, bool param1);
EXPORT_FUNC bool Texture_C_get_keep_ram_image_B_p(Texture const *param0);
EXPORT_FUNC bool Texture_C_is_cacheable_B_p(Texture const *param0);
EXPORT_FUNC bool Texture_C_compress_ram_image_B_pppp(Texture *param0, Texture::CompressionMode param1, Texture::QualityLevel param2, GraphicsStateGuardianBase *param3);
EXPORT_FUNC bool Texture_C_compress_ram_image_B_ppp(Texture *param0, Texture::CompressionMode param1, Texture::QualityLevel param2);
EXPORT_FUNC bool Texture_C_compress_ram_image_B_pp(Texture *param0, Texture::CompressionMode param1);
EXPORT_FUNC bool Texture_C_compress_ram_image_B_p(Texture *param0);
EXPORT_FUNC bool Texture_C_uncompress_ram_image_B_p(Texture *param0);
EXPORT_FUNC int Texture_C_get_num_ram_mipmap_images_i_p(Texture const *param0);
EXPORT_FUNC bool Texture_C_has_ram_mipmap_image_B_pi(Texture const *param0, int param1);
EXPORT_FUNC int Texture_C_get_num_loadable_ram_mipmap_images_i_p(Texture const *param0);
EXPORT_FUNC bool Texture_C_has_all_ram_mipmap_images_B_p(Texture const *param0);
EXPORT_FUNC std::size_t Texture_C_get_ram_mipmap_image_size_l_pi(Texture const *param0, int param1);
EXPORT_FUNC std::size_t Texture_C_get_ram_mipmap_view_size_l_pi(Texture const *param0, int param1);
EXPORT_FUNC std::size_t Texture_C_get_ram_mipmap_page_size_l_pi(Texture const *param0, int param1);
EXPORT_FUNC std::size_t Texture_C_get_expected_ram_mipmap_image_size_l_pi(Texture const *param0, int param1);
EXPORT_FUNC std::size_t Texture_C_get_expected_ram_mipmap_view_size_l_pi(Texture const *param0, int param1);
EXPORT_FUNC std::size_t Texture_C_get_expected_ram_mipmap_page_size_l_pi(Texture const *param0, int param1);
EXPORT_FUNC CPTA_uchar * Texture_C_get_ram_mipmap_image_p_pi(Texture const *param0, int param1);
EXPORT_FUNC void Texture_C_get_ram_mipmap_pointer_v_pi(Texture const *param0, int param1);
EXPORT_FUNC PTA_uchar * Texture_C_modify_ram_mipmap_image_p_pi(Texture *param0, int param1);
EXPORT_FUNC PTA_uchar * Texture_C_make_ram_mipmap_image_p_pi(Texture *param0, int param1);
EXPORT_FUNC void Texture_C_set_ram_mipmap_pointer_from_int_v_ppii(Texture *param0, long long int param1, int param2, int param3);
EXPORT_FUNC void Texture_C_set_ram_mipmap_image_v_pipl(Texture *param0, int param1, CPTA_uchar *param2, std::size_t param3);
EXPORT_FUNC void Texture_C_set_ram_mipmap_image_v_pip(Texture *param0, int param1, CPTA_uchar *param2);
EXPORT_FUNC void Texture_C_clear_ram_mipmap_image_v_pi(Texture *param0, int param1);
EXPORT_FUNC void Texture_C_clear_ram_mipmap_images_v_p(Texture *param0);
EXPORT_FUNC void Texture_C_generate_ram_mipmap_images_v_p(Texture *param0);
EXPORT_FUNC int Texture_C_get_simple_x_size_i_p(Texture const *param0);
EXPORT_FUNC int Texture_C_get_simple_y_size_i_p(Texture const *param0);
EXPORT_FUNC bool Texture_C_has_simple_ram_image_B_p(Texture const *param0);
EXPORT_FUNC std::size_t Texture_C_get_simple_ram_image_size_l_p(Texture const *param0);
EXPORT_FUNC CPTA_uchar * Texture_C_get_simple_ram_image_p_p(Texture const *param0);
EXPORT_FUNC void Texture_C_set_simple_ram_image_v_ppii(Texture *param0, CPTA_uchar *param1, int param2, int param3);
EXPORT_FUNC PTA_uchar * Texture_C_modify_simple_ram_image_p_p(Texture *param0);
EXPORT_FUNC PTA_uchar * Texture_C_new_simple_ram_image_p_pii(Texture *param0, int param1, int param2);
EXPORT_FUNC void Texture_C_generate_simple_ram_image_v_p(Texture *param0);
EXPORT_FUNC void Texture_C_clear_simple_ram_image_v_p(Texture *param0);
EXPORT_FUNC PointerTo< TexturePeeker > * Texture_C_peek_p_p(Texture *param0);
EXPORT_FUNC UpdateSeq * Texture_C_get_properties_modified_p_p(Texture const *param0);
EXPORT_FUNC UpdateSeq * Texture_C_get_image_modified_p_p(Texture const *param0);
EXPORT_FUNC UpdateSeq * Texture_C_get_simple_image_modified_p_p(Texture const *param0);
EXPORT_FUNC bool Texture_C_has_auto_texture_scale_B_p(Texture const *param0);
EXPORT_FUNC AutoTextureScale Texture_C_get_auto_texture_scale_p_p(Texture const *param0);
EXPORT_FUNC void Texture_C_set_auto_texture_scale_v_pp(Texture *param0, AutoTextureScale param1);
EXPORT_FUNC PointerTo< AsyncFuture > * Texture_C_prepare_p_pp(Texture *param0, PreparedGraphicsObjects *param1);
EXPORT_FUNC bool Texture_C_is_prepared_B_pp(Texture const *param0, PreparedGraphicsObjects *param1);
EXPORT_FUNC bool Texture_C_was_image_modified_B_pp(Texture const *param0, PreparedGraphicsObjects *param1);
EXPORT_FUNC std::size_t Texture_C_get_data_size_bytes_l_pp(Texture const *param0, PreparedGraphicsObjects *param1);
EXPORT_FUNC bool Texture_C_get_active_B_pp(Texture const *param0, PreparedGraphicsObjects *param1);
EXPORT_FUNC bool Texture_C_get_resident_B_pp(Texture const *param0, PreparedGraphicsObjects *param1);
EXPORT_FUNC bool Texture_C_release_B_pp(Texture *param0, PreparedGraphicsObjects *param1);
EXPORT_FUNC int Texture_C_release_all_i_p(Texture *param0);
EXPORT_FUNC std::size_t Texture_C_estimate_texture_memory_l_p(Texture const *param0);
EXPORT_FUNC void Texture_C_set_aux_data_v_psp(Texture *param0, char const *param1, TypedReferenceCount *param2);
EXPORT_FUNC void Texture_C_clear_aux_data_v_ps(Texture *param0, char const *param1);
EXPORT_FUNC TypedReferenceCount * Texture_C_get_aux_data_p_ps(Texture const *param0, char const *param1);
EXPORT_FUNC void Texture_C_set_textures_power_2_v_p(AutoTextureScale param0);
EXPORT_FUNC AutoTextureScale Texture_C_get_textures_power_2_p_v();
EXPORT_FUNC bool Texture_C_has_textures_power_2_B_v();
EXPORT_FUNC int Texture_C_get_pad_x_size_i_p(Texture const *param0);
EXPORT_FUNC int Texture_C_get_pad_y_size_i_p(Texture const *param0);
EXPORT_FUNC int Texture_C_get_pad_z_size_i_p(Texture const *param0);
EXPORT_FUNC LVecBase2 * Texture_C_get_tex_scale_p_p(Texture const *param0);
EXPORT_FUNC void Texture_C_set_pad_size_v_piii(Texture *param0, int param1, int param2, int param3);
EXPORT_FUNC void Texture_C_set_pad_size_v_pii(Texture *param0, int param1, int param2);
EXPORT_FUNC void Texture_C_set_pad_size_v_pi(Texture *param0, int param1);
EXPORT_FUNC void Texture_C_set_pad_size_v_p(Texture *param0);
EXPORT_FUNC void Texture_C_set_size_padded_v_piii(Texture *param0, int param1, int param2, int param3);
EXPORT_FUNC void Texture_C_set_size_padded_v_pii(Texture *param0, int param1, int param2);
EXPORT_FUNC void Texture_C_set_size_padded_v_pi(Texture *param0, int param1);
EXPORT_FUNC void Texture_C_set_size_padded_v_p(Texture *param0);
EXPORT_FUNC int Texture_C_get_orig_file_x_size_i_p(Texture const *param0);
EXPORT_FUNC int Texture_C_get_orig_file_y_size_i_p(Texture const *param0);
EXPORT_FUNC int Texture_C_get_orig_file_z_size_i_p(Texture const *param0);
EXPORT_FUNC void Texture_C_set_orig_file_size_v_piii(Texture *param0, int param1, int param2, int param3);
EXPORT_FUNC void Texture_C_set_orig_file_size_v_pii(Texture *param0, int param1, int param2);
EXPORT_FUNC void Texture_C_set_loaded_from_image_v_pB(Texture *param0, bool param1);
EXPORT_FUNC void Texture_C_set_loaded_from_image_v_p(Texture *param0);
EXPORT_FUNC bool Texture_C_get_loaded_from_image_B_p(Texture const *param0);
EXPORT_FUNC void Texture_C_set_loaded_from_txo_v_pB(Texture *param0, bool param1);
EXPORT_FUNC void Texture_C_set_loaded_from_txo_v_p(Texture *param0);
EXPORT_FUNC bool Texture_C_get_loaded_from_txo_B_p(Texture const *param0);
EXPORT_FUNC bool Texture_C_get_match_framebuffer_format_B_p(Texture const *param0);
EXPORT_FUNC void Texture_C_set_match_framebuffer_format_v_pB(Texture *param0, bool param1);
EXPORT_FUNC bool Texture_C_get_post_load_store_cache_B_p(Texture const *param0);
EXPORT_FUNC void Texture_C_set_post_load_store_cache_v_pB(Texture *param0, bool param1);
EXPORT_FUNC TextureContext * Texture_C_prepare_now_p_pipp(Texture *param0, int param1, PreparedGraphicsObjects *param2, GraphicsStateGuardianBase *param3);
EXPORT_FUNC int Texture_C_up_to_power_2_i_i(int param0);
EXPORT_FUNC int Texture_C_down_to_power_2_i_i(int param0);
EXPORT_FUNC void Texture_C_consider_rescale_v_pp(Texture *param0, PNMImage *param1);
EXPORT_FUNC void Texture_C_consider_rescale_v_psp(PNMImage *param0, char const *param1, AutoTextureScale param2);
EXPORT_FUNC void Texture_C_consider_rescale_v_ps(PNMImage *param0, char const *param1);
EXPORT_FUNC bool Texture_C_rescale_texture_B_p(Texture *param0);
EXPORT_FUNC char const * Texture_C_format_texture_type_s_p(Texture::TextureType param0);
EXPORT_FUNC Texture::TextureType Texture_C_string_texture_type_p_s(char const *param0);
EXPORT_FUNC char const * Texture_C_format_component_type_s_p(Texture::ComponentType param0);
EXPORT_FUNC Texture::ComponentType Texture_C_string_component_type_p_s(char const *param0);
EXPORT_FUNC char const * Texture_C_format_format_s_p(Texture::Format param0);
EXPORT_FUNC Texture::Format Texture_C_string_format_p_s(char const *param0);
EXPORT_FUNC char const * Texture_C_format_compression_mode_s_p(Texture::CompressionMode param0);
EXPORT_FUNC Texture::CompressionMode Texture_C_string_compression_mode_p_s(char const *param0);
EXPORT_FUNC char const * Texture_C_format_quality_level_s_p(Texture::QualityLevel param0);
EXPORT_FUNC Texture::QualityLevel Texture_C_string_quality_level_p_s(char const *param0);
EXPORT_FUNC void Texture_C_texture_uploaded_v_p(Texture *param0);
EXPORT_FUNC bool Texture_C_has_cull_callback_B_p(Texture const *param0);
EXPORT_FUNC bool Texture_C_cull_callback_B_ppp(Texture const *param0, CullTraverser *param1, CullTraverserData const *param2);
EXPORT_FUNC PointerTo< Texture > * Texture_C_make_texture_p_v();
EXPORT_FUNC bool Texture_C_is_unsigned_B_p(Texture::ComponentType param0);
EXPORT_FUNC bool Texture_C_is_specific_B_p(Texture::CompressionMode param0);
EXPORT_FUNC bool Texture_C_has_alpha_B_p(Texture::Format param0);
EXPORT_FUNC bool Texture_C_has_binary_alpha_B_p(Texture::Format param0);
EXPORT_FUNC bool Texture_C_is_srgb_B_p(Texture::Format param0);
EXPORT_FUNC void Texture_C_ensure_loader_type_v_pp(Texture *param0, Filename const *param1);
EXPORT_FUNC void Texture_C_register_with_read_factory_v_v();
EXPORT_FUNC void Texture_C_write_datagram_v_ppp(Texture *param0, BamWriter *param1, Datagram *param2);
EXPORT_FUNC void Texture_C_finalize_v_pp(Texture *param0, BamReader *param1);
EXPORT_FUNC int Texture_C_get_class_type_i_v();
EXPORT_FUNC void Texture_C_init_type_v_v();
EXPORT_FUNC int Texture_C_get_type_i_p(Texture const *param0);
EXPORT_FUNC int Texture_C_force_init_type_i_p(Texture *param0);


// TextureCollection

EXPORT_FUNC TextureCollection * TextureCollection_C_ctor_p_v();
EXPORT_FUNC TextureCollection * TextureCollection_C_ctor_p_p(TextureCollection const *param0);
EXPORT_FUNC void TextureCollection_C_add_texture_v_pp(TextureCollection *param0, Texture *param1);
EXPORT_FUNC bool TextureCollection_C_remove_texture_B_pp(TextureCollection *param0, Texture *param1);
EXPORT_FUNC void TextureCollection_C_add_textures_from_v_pp(TextureCollection *param0, TextureCollection const *param1);
EXPORT_FUNC void TextureCollection_C_remove_textures_from_v_pp(TextureCollection *param0, TextureCollection const *param1);
EXPORT_FUNC void TextureCollection_C_remove_duplicate_textures_v_p(TextureCollection *param0);
EXPORT_FUNC bool TextureCollection_C_has_texture_B_pp(TextureCollection const *param0, Texture *param1);
EXPORT_FUNC void TextureCollection_C_clear_v_p(TextureCollection *param0);
EXPORT_FUNC void TextureCollection_C_reserve_v_pl(TextureCollection *param0, std::size_t param1);
EXPORT_FUNC Texture * TextureCollection_C_find_texture_p_ps(TextureCollection const *param0, char const *param1);
EXPORT_FUNC int TextureCollection_C_get_num_textures_i_p(TextureCollection const *param0);
EXPORT_FUNC Texture * TextureCollection_C_get_texture_p_pi(TextureCollection const *param0, int param1);
EXPORT_FUNC int TextureCollection_C_size_i_p(TextureCollection const *param0);
EXPORT_FUNC void TextureCollection_C_append_v_pp(TextureCollection *param0, Texture *param1);
EXPORT_FUNC void TextureCollection_C_extend_v_pp(TextureCollection *param0, TextureCollection const *param1);
EXPORT_FUNC void TextureCollection_C_output_v_pp(TextureCollection const *param0, std::ostream *param1);
EXPORT_FUNC void TextureCollection_C_write_v_ppi(TextureCollection const *param0, std::ostream *param1, int param2);
EXPORT_FUNC void TextureCollection_C_write_v_pp(TextureCollection const *param0, std::ostream *param1);


// TexturePeeker

EXPORT_FUNC bool TexturePeeker_C_is_valid_B_p(TexturePeeker const *param0);
EXPORT_FUNC int TexturePeeker_C_get_x_size_i_p(TexturePeeker const *param0);
EXPORT_FUNC int TexturePeeker_C_get_y_size_i_p(TexturePeeker const *param0);
EXPORT_FUNC int TexturePeeker_C_get_z_size_i_p(TexturePeeker const *param0);
EXPORT_FUNC bool TexturePeeker_C_has_pixel_B_pii(TexturePeeker const *param0, int param1, int param2);
EXPORT_FUNC void TexturePeeker_C_lookup_v_ppff(TexturePeeker const *param0, LColor *param1, PN_stdfloat param2, PN_stdfloat param3);
EXPORT_FUNC void TexturePeeker_C_lookup_v_ppfff(TexturePeeker const *param0, LColor *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4);
EXPORT_FUNC void TexturePeeker_C_fetch_pixel_v_ppii(TexturePeeker const *param0, LColor *param1, int param2, int param3);
EXPORT_FUNC bool TexturePeeker_C_lookup_bilinear_B_ppff(TexturePeeker const *param0, LColor *param1, PN_stdfloat param2, PN_stdfloat param3);
EXPORT_FUNC void TexturePeeker_C_filter_rect_v_ppffff(TexturePeeker const *param0, LColor *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5);
EXPORT_FUNC void TexturePeeker_C_filter_rect_v_ppffffff(TexturePeeker const *param0, LColor *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5, PN_stdfloat param6, PN_stdfloat param7);
EXPORT_FUNC TexturePeeker * TexturePeeker_C_ctor_p_p(TexturePeeker const *param0);


// Thread

EXPORT_FUNC TypedReferenceCount * Thread_C_upcast_to_TypedReferenceCount_p_p(Thread *param0);
EXPORT_FUNC Namable * Thread_C_upcast_to_Namable_p_p(Thread *param0);
EXPORT_FUNC PointerTo< Thread > * Thread_C_bind_thread_p_ss(char const *param0, char const *param1);
EXPORT_FUNC char const * Thread_C_get_sync_name_s_p(Thread const *param0);
EXPORT_FUNC int Thread_C_get_pstats_index_i_p(Thread const *param0);
EXPORT_FUNC int Thread_C_get_python_index_i_p(Thread const *param0);
EXPORT_FUNC char const * Thread_C_get_unique_id_s_p(Thread const *param0);
EXPORT_FUNC int Thread_C_get_pipeline_stage_i_p(Thread const *param0);
EXPORT_FUNC void Thread_C_set_pipeline_stage_v_pi(Thread *param0, int param1);
EXPORT_FUNC void Thread_C_set_min_pipeline_stage_v_pi(Thread *param0, int param1);
EXPORT_FUNC Thread * Thread_C_get_main_thread_p_v();
EXPORT_FUNC Thread * Thread_C_get_external_thread_p_v();
EXPORT_FUNC Thread * Thread_C_get_current_thread_p_v();
EXPORT_FUNC int Thread_C_get_current_pipeline_stage_i_v();
EXPORT_FUNC bool Thread_C_is_threading_supported_B_v();
EXPORT_FUNC bool Thread_C_is_true_threads_B_v();
EXPORT_FUNC bool Thread_C_is_simple_threads_B_v();
EXPORT_FUNC void Thread_C_sleep_v_d(double param0);
EXPORT_FUNC void Thread_C_force_yield_v_v();
EXPORT_FUNC void Thread_C_consider_yield_v_v();
EXPORT_FUNC void Thread_C_output_v_pp(Thread const *param0, std::ostream *param1);
EXPORT_FUNC void Thread_C_output_blocker_v_pp(Thread const *param0, std::ostream *param1);
EXPORT_FUNC void Thread_C_write_status_v_p(std::ostream *param0);
EXPORT_FUNC bool Thread_C_is_started_B_p(Thread const *param0);
EXPORT_FUNC bool Thread_C_is_joinable_B_p(Thread const *param0);
EXPORT_FUNC bool Thread_C_start_B_ppB(Thread *param0, ThreadPriority param1, bool param2);
EXPORT_FUNC void Thread_C_join_v_p(Thread *param0);
EXPORT_FUNC void Thread_C_preempt_v_p(Thread *param0);
EXPORT_FUNC TypedReferenceCount * Thread_C_get_current_task_p_p(Thread const *param0);
EXPORT_FUNC void Thread_C_set_python_index_v_pi(Thread *param0, int param1);
EXPORT_FUNC void Thread_C_prepare_for_exit_v_v();
EXPORT_FUNC void Thread_C_set_pstats_index_v_pi(Thread *param0, int param1);
EXPORT_FUNC void Thread_C_set_pstats_callback_v_pp(Thread *param0, Thread::PStatsCallback *param1);
EXPORT_FUNC Thread::PStatsCallback * Thread_C_get_pstats_callback_p_p(Thread const *param0);
EXPORT_FUNC int Thread_C_get_class_type_i_v();
EXPORT_FUNC void Thread_C_init_type_v_v();
EXPORT_FUNC int Thread_C_get_type_i_p(Thread const *param0);
EXPORT_FUNC int Thread_C_force_init_type_i_p(Thread *param0);


// TouchInfo

EXPORT_FUNC TouchInfo * TouchInfo_C_ctor_p_v();
EXPORT_FUNC TouchInfo * TouchInfo_C_ctor_p_p(TouchInfo const *param0);
EXPORT_FUNC void TouchInfo_C_set_x_v_pi(TouchInfo *param0, int param1);
EXPORT_FUNC void TouchInfo_C_set_y_v_pi(TouchInfo *param0, int param1);
EXPORT_FUNC void TouchInfo_C_set_id_v_pi(TouchInfo *param0, int param1);
EXPORT_FUNC void TouchInfo_C_set_flags_v_pi(TouchInfo *param0, int param1);
EXPORT_FUNC int TouchInfo_C_get_x_i_p(TouchInfo *param0);
EXPORT_FUNC int TouchInfo_C_get_y_i_p(TouchInfo *param0);
EXPORT_FUNC int TouchInfo_C_get_id_i_p(TouchInfo *param0);
EXPORT_FUNC int TouchInfo_C_get_flags_i_p(TouchInfo *param0);


// TransformState

EXPORT_FUNC int TransformState_C_compare_to_i_pp(TransformState const *param0, TransformState const *param1);
EXPORT_FUNC int TransformState_C_compare_to_i_ppB(TransformState const *param0, TransformState const *param1, bool param2);
EXPORT_FUNC std::size_t TransformState_C_get_hash_l_p(TransformState const *param0);
EXPORT_FUNC ConstPointerTo< TransformState > * TransformState_C_make_identity_p_v();
EXPORT_FUNC ConstPointerTo< TransformState > * TransformState_C_make_invalid_p_v();
EXPORT_FUNC ConstPointerTo< TransformState > * TransformState_C_make_pos_p_p(LVecBase3 const *param0);
EXPORT_FUNC ConstPointerTo< TransformState > * TransformState_C_make_hpr_p_p(LVecBase3 const *param0);
EXPORT_FUNC ConstPointerTo< TransformState > * TransformState_C_make_quat_p_p(LQuaternion const *param0);
EXPORT_FUNC ConstPointerTo< TransformState > * TransformState_C_make_pos_hpr_p_pp(LVecBase3 const *param0, LVecBase3 const *param1);
EXPORT_FUNC ConstPointerTo< TransformState > * TransformState_C_make_scale_p_p(LVecBase3 const *param0);
EXPORT_FUNC ConstPointerTo< TransformState > * TransformState_C_make_scale_p_f(PN_stdfloat param0);
EXPORT_FUNC ConstPointerTo< TransformState > * TransformState_C_make_shear_p_p(LVecBase3 const *param0);
EXPORT_FUNC ConstPointerTo< TransformState > * TransformState_C_make_pos_hpr_scale_p_ppp(LVecBase3 const *param0, LVecBase3 const *param1, LVecBase3 const *param2);
EXPORT_FUNC ConstPointerTo< TransformState > * TransformState_C_make_pos_quat_scale_p_ppp(LVecBase3 const *param0, LQuaternion const *param1, LVecBase3 const *param2);
EXPORT_FUNC ConstPointerTo< TransformState > * TransformState_C_make_pos_hpr_scale_shear_p_pppp(LVecBase3 const *param0, LVecBase3 const *param1, LVecBase3 const *param2, LVecBase3 const *param3);
EXPORT_FUNC ConstPointerTo< TransformState > * TransformState_C_make_pos_quat_scale_shear_p_pppp(LVecBase3 const *param0, LQuaternion const *param1, LVecBase3 const *param2, LVecBase3 const *param3);
EXPORT_FUNC ConstPointerTo< TransformState > * TransformState_C_make_mat_p_p(LMatrix4 const *param0);
EXPORT_FUNC ConstPointerTo< TransformState > * TransformState_C_make_pos2d_p_p(LVecBase2 const *param0);
EXPORT_FUNC ConstPointerTo< TransformState > * TransformState_C_make_rotate2d_p_f(PN_stdfloat param0);
EXPORT_FUNC ConstPointerTo< TransformState > * TransformState_C_make_pos_rotate2d_p_pf(LVecBase2 const *param0, PN_stdfloat param1);
EXPORT_FUNC ConstPointerTo< TransformState > * TransformState_C_make_scale2d_p_p(LVecBase2 const *param0);
EXPORT_FUNC ConstPointerTo< TransformState > * TransformState_C_make_scale2d_p_f(PN_stdfloat param0);
EXPORT_FUNC ConstPointerTo< TransformState > * TransformState_C_make_shear2d_p_f(PN_stdfloat param0);
EXPORT_FUNC ConstPointerTo< TransformState > * TransformState_C_make_pos_rotate_scale2d_p_pfp(LVecBase2 const *param0, PN_stdfloat param1, LVecBase2 const *param2);
EXPORT_FUNC ConstPointerTo< TransformState > * TransformState_C_make_pos_rotate_scale_shear2d_p_pfpf(LVecBase2 const *param0, PN_stdfloat param1, LVecBase2 const *param2, PN_stdfloat param3);
EXPORT_FUNC ConstPointerTo< TransformState > * TransformState_C_make_mat3_p_p(LMatrix3 const *param0);
EXPORT_FUNC bool TransformState_C_is_identity_B_p(TransformState const *param0);
EXPORT_FUNC bool TransformState_C_is_invalid_B_p(TransformState const *param0);
EXPORT_FUNC bool TransformState_C_is_singular_B_p(TransformState const *param0);
EXPORT_FUNC bool TransformState_C_is_2d_B_p(TransformState const *param0);
EXPORT_FUNC bool TransformState_C_has_components_B_p(TransformState const *param0);
EXPORT_FUNC bool TransformState_C_components_given_B_p(TransformState const *param0);
EXPORT_FUNC bool TransformState_C_hpr_given_B_p(TransformState const *param0);
EXPORT_FUNC bool TransformState_C_quat_given_B_p(TransformState const *param0);
EXPORT_FUNC bool TransformState_C_has_pos_B_p(TransformState const *param0);
EXPORT_FUNC bool TransformState_C_has_hpr_B_p(TransformState const *param0);
EXPORT_FUNC bool TransformState_C_has_quat_B_p(TransformState const *param0);
EXPORT_FUNC bool TransformState_C_has_scale_B_p(TransformState const *param0);
EXPORT_FUNC bool TransformState_C_has_identity_scale_B_p(TransformState const *param0);
EXPORT_FUNC bool TransformState_C_has_uniform_scale_B_p(TransformState const *param0);
EXPORT_FUNC bool TransformState_C_has_shear_B_p(TransformState const *param0);
EXPORT_FUNC bool TransformState_C_has_nonzero_shear_B_p(TransformState const *param0);
EXPORT_FUNC bool TransformState_C_has_mat_B_p(TransformState const *param0);
EXPORT_FUNC LPoint3 const * TransformState_C_get_pos_p_p(TransformState const *param0);
EXPORT_FUNC LVecBase3 const * TransformState_C_get_hpr_p_p(TransformState const *param0);
EXPORT_FUNC LQuaternion const * TransformState_C_get_quat_p_p(TransformState const *param0);
EXPORT_FUNC LQuaternion const * TransformState_C_get_norm_quat_p_p(TransformState const *param0);
EXPORT_FUNC LVecBase3 const * TransformState_C_get_scale_p_p(TransformState const *param0);
EXPORT_FUNC PN_stdfloat TransformState_C_get_uniform_scale_f_p(TransformState const *param0);
EXPORT_FUNC LVecBase3 const * TransformState_C_get_shear_p_p(TransformState const *param0);
EXPORT_FUNC LMatrix4 const * TransformState_C_get_mat_p_p(TransformState const *param0);
EXPORT_FUNC LVecBase2 * TransformState_C_get_pos2d_p_p(TransformState const *param0);
EXPORT_FUNC PN_stdfloat TransformState_C_get_rotate2d_f_p(TransformState const *param0);
EXPORT_FUNC LVecBase2 * TransformState_C_get_scale2d_p_p(TransformState const *param0);
EXPORT_FUNC PN_stdfloat TransformState_C_get_shear2d_f_p(TransformState const *param0);
EXPORT_FUNC LMatrix3 * TransformState_C_get_mat3_p_p(TransformState const *param0);
EXPORT_FUNC ConstPointerTo< TransformState > * TransformState_C_set_pos_p_pp(TransformState const *param0, LVecBase3 const *param1);
EXPORT_FUNC ConstPointerTo< TransformState > * TransformState_C_set_hpr_p_pp(TransformState const *param0, LVecBase3 const *param1);
EXPORT_FUNC ConstPointerTo< TransformState > * TransformState_C_set_quat_p_pp(TransformState const *param0, LQuaternion const *param1);
EXPORT_FUNC ConstPointerTo< TransformState > * TransformState_C_set_scale_p_pp(TransformState const *param0, LVecBase3 const *param1);
EXPORT_FUNC ConstPointerTo< TransformState > * TransformState_C_set_shear_p_pp(TransformState const *param0, LVecBase3 const *param1);
EXPORT_FUNC ConstPointerTo< TransformState > * TransformState_C_set_pos2d_p_pp(TransformState const *param0, LVecBase2 const *param1);
EXPORT_FUNC ConstPointerTo< TransformState > * TransformState_C_set_rotate2d_p_pf(TransformState const *param0, PN_stdfloat param1);
EXPORT_FUNC ConstPointerTo< TransformState > * TransformState_C_set_scale2d_p_pp(TransformState const *param0, LVecBase2 const *param1);
EXPORT_FUNC ConstPointerTo< TransformState > * TransformState_C_set_shear2d_p_pf(TransformState const *param0, PN_stdfloat param1);
EXPORT_FUNC ConstPointerTo< TransformState > * TransformState_C_compose_p_pp(TransformState const *param0, TransformState const *param1);
EXPORT_FUNC ConstPointerTo< TransformState > * TransformState_C_invert_compose_p_pp(TransformState const *param0, TransformState const *param1);
EXPORT_FUNC ConstPointerTo< TransformState > * TransformState_C_get_inverse_p_p(TransformState const *param0);
EXPORT_FUNC ConstPointerTo< TransformState > * TransformState_C_get_unique_p_p(TransformState const *param0);
EXPORT_FUNC int TransformState_C_get_geom_rendering_i_pi(TransformState const *param0, int param1);
EXPORT_FUNC void TransformState_C_cache_ref_v_p(TransformState const *param0);
EXPORT_FUNC bool TransformState_C_cache_unref_B_p(TransformState const *param0);
EXPORT_FUNC void TransformState_C_node_ref_v_p(TransformState const *param0);
EXPORT_FUNC bool TransformState_C_node_unref_B_p(TransformState const *param0);
EXPORT_FUNC std::size_t TransformState_C_get_composition_cache_num_entries_l_p(TransformState const *param0);
EXPORT_FUNC std::size_t TransformState_C_get_invert_composition_cache_num_entries_l_p(TransformState const *param0);
EXPORT_FUNC std::size_t TransformState_C_get_composition_cache_size_l_p(TransformState const *param0);
EXPORT_FUNC TransformState const * TransformState_C_get_composition_cache_source_p_pl(TransformState const *param0, std::size_t param1);
EXPORT_FUNC TransformState const * TransformState_C_get_composition_cache_result_p_pl(TransformState const *param0, std::size_t param1);
EXPORT_FUNC std::size_t TransformState_C_get_invert_composition_cache_size_l_p(TransformState const *param0);
EXPORT_FUNC TransformState const * TransformState_C_get_invert_composition_cache_source_p_pl(TransformState const *param0, std::size_t param1);
EXPORT_FUNC TransformState const * TransformState_C_get_invert_composition_cache_result_p_pl(TransformState const *param0, std::size_t param1);
EXPORT_FUNC bool TransformState_C_validate_composition_cache_B_p(TransformState const *param0);
EXPORT_FUNC void TransformState_C_output_v_pp(TransformState const *param0, std::ostream *param1);
EXPORT_FUNC void TransformState_C_write_v_ppi(TransformState const *param0, std::ostream *param1, int param2);
EXPORT_FUNC void TransformState_C_write_composition_cache_v_ppi(TransformState const *param0, std::ostream *param1, int param2);
EXPORT_FUNC int TransformState_C_get_num_states_i_v();
EXPORT_FUNC int TransformState_C_get_num_unused_states_i_v();
EXPORT_FUNC int TransformState_C_clear_cache_i_v();
EXPORT_FUNC int TransformState_C_garbage_collect_i_v();
EXPORT_FUNC void TransformState_C_list_cycles_v_p(std::ostream *param0);
EXPORT_FUNC void TransformState_C_list_states_v_p(std::ostream *param0);
EXPORT_FUNC bool TransformState_C_validate_states_B_v();
EXPORT_FUNC void TransformState_C_init_states_v_v();
EXPORT_FUNC void TransformState_C_flush_level_v_v();
EXPORT_FUNC void TransformState_C_cache_ref_only_v_p(TransformState const *param0);
EXPORT_FUNC void TransformState_C_register_with_read_factory_v_v();
EXPORT_FUNC void TransformState_C_write_datagram_v_ppp(TransformState *param0, BamWriter *param1, Datagram *param2);
EXPORT_FUNC PointerTo< TypedWritableReferenceCount > * TransformState_C_change_this_p_pp(TypedWritableReferenceCount *param0, BamReader *param1);
EXPORT_FUNC int TransformState_C_get_class_type_i_v();
EXPORT_FUNC void TransformState_C_init_type_v_v();
EXPORT_FUNC int TransformState_C_get_type_i_p(TransformState const *param0);
EXPORT_FUNC int TransformState_C_force_init_type_i_p(TransformState *param0);


// TransformTable

EXPORT_FUNC TransformTable * TransformTable_C_ctor_p_v();
EXPORT_FUNC TransformTable * TransformTable_C_ctor_p_p(TransformTable const *param0);
EXPORT_FUNC bool TransformTable_C_is_registered_B_p(TransformTable const *param0);
EXPORT_FUNC ConstPointerTo< TransformTable > * TransformTable_C_register_table_p_p(TransformTable const *param0);
EXPORT_FUNC std::size_t TransformTable_C_get_num_transforms_l_p(TransformTable const *param0);
EXPORT_FUNC VertexTransform const * TransformTable_C_get_transform_p_pl(TransformTable const *param0, std::size_t param1);
EXPORT_FUNC UpdateSeq * TransformTable_C_get_modified_p_pp(TransformTable const *param0, Thread *param1);
EXPORT_FUNC UpdateSeq * TransformTable_C_get_modified_p_p(TransformTable const *param0);
EXPORT_FUNC void TransformTable_C_set_transform_v_plp(TransformTable *param0, std::size_t param1, VertexTransform const *param2);
EXPORT_FUNC void TransformTable_C_insert_transform_v_plp(TransformTable *param0, std::size_t param1, VertexTransform const *param2);
EXPORT_FUNC void TransformTable_C_remove_transform_v_pl(TransformTable *param0, std::size_t param1);
EXPORT_FUNC std::size_t TransformTable_C_add_transform_l_pp(TransformTable *param0, VertexTransform const *param1);
EXPORT_FUNC void TransformTable_C_write_v_pp(TransformTable const *param0, std::ostream *param1);
EXPORT_FUNC void TransformTable_C_register_with_read_factory_v_v();
EXPORT_FUNC void TransformTable_C_write_datagram_v_ppp(TransformTable *param0, BamWriter *param1, Datagram *param2);
EXPORT_FUNC int TransformTable_C_get_class_type_i_v();
EXPORT_FUNC void TransformTable_C_init_type_v_v();
EXPORT_FUNC int TransformTable_C_get_type_i_p(TransformTable const *param0);
EXPORT_FUNC int TransformTable_C_force_init_type_i_p(TransformTable *param0);


// TypedObject

EXPORT_FUNC MemoryBase * TypedObject_C_upcast_to_MemoryBase_p_p(TypedObject *param0);
EXPORT_FUNC int TypedObject_C_get_type_i_p(TypedObject const *param0);
EXPORT_FUNC int TypedObject_C_get_type_index_i_p(TypedObject const *param0);
EXPORT_FUNC bool TypedObject_C_is_of_type_B_pi(TypedObject const *param0, int param1);
EXPORT_FUNC bool TypedObject_C_is_exact_type_B_pi(TypedObject const *param0, int param1);
EXPORT_FUNC int TypedObject_C_get_best_parent_from_Set_i_pp(TypedObject const *param0, std::set< int > const *param1);
EXPORT_FUNC int TypedObject_C_force_init_type_i_p(TypedObject *param0);
EXPORT_FUNC TypedObject * TypedObject_C_as_typed_object_p_p(TypedObject *param0);
EXPORT_FUNC TypedObject const * TypedObject_C_as_typed_object_p_p_1_p_p(TypedObject const *param0);
EXPORT_FUNC int TypedObject_C_get_class_type_i_v();
EXPORT_FUNC void TypedObject_C_init_type_v_v();


// TypedReferenceCount

EXPORT_FUNC DisplayRegion * TypedReferenceCount_C_downcast_to_DisplayRegion_p_p(TypedReferenceCount *param0);
EXPORT_FUNC Loader * TypedReferenceCount_C_downcast_to_Loader_p_p(TypedReferenceCount *param0);
EXPORT_FUNC TextFont * TypedReferenceCount_C_downcast_to_TextFont_p_p(TypedReferenceCount *param0);
EXPORT_FUNC Thread * TypedReferenceCount_C_downcast_to_Thread_p_p(TypedReferenceCount *param0);


// TypedWritable

EXPORT_FUNC TypedWritable * TypedWritable_C_ctor_p_v();
EXPORT_FUNC TypedWritable * TypedWritable_C_ctor_p_p(TypedWritable const *param0);
EXPORT_FUNC void TypedWritable_C_write_datagram_v_ppp(TypedWritable *param0, BamWriter *param1, Datagram *param2);
EXPORT_FUNC void TypedWritable_C_update_bam_nested_v_pp(TypedWritable *param0, BamWriter *param1);
EXPORT_FUNC bool TypedWritable_C_require_fully_complete_B_p(TypedWritable const *param0);
EXPORT_FUNC void TypedWritable_C_fillin_v_ppp(TypedWritable *param0, DatagramIterator *param1, BamReader *param2);
EXPORT_FUNC void TypedWritable_C_finalize_v_pp(TypedWritable *param0, BamReader *param1);
EXPORT_FUNC ReferenceCount * TypedWritable_C_as_reference_count_p_p(TypedWritable *param0);
EXPORT_FUNC void TypedWritable_C_mark_bam_modified_v_p(TypedWritable *param0);
EXPORT_FUNC UpdateSeq * TypedWritable_C_get_bam_modified_p_p(TypedWritable const *param0);
EXPORT_FUNC vector_uchar TypedWritable_C_encode_to_bam_stream_p_p(TypedWritable const *param0);
EXPORT_FUNC bool TypedWritable_C_encode_to_bam_stream_B_ppp(TypedWritable const *param0, vector_uchar *param1, BamWriter *param2);
EXPORT_FUNC bool TypedWritable_C_encode_to_bam_stream_B_pp(TypedWritable const *param0, vector_uchar *param1);
EXPORT_FUNC int TypedWritable_C_get_class_type_i_v();
EXPORT_FUNC void TypedWritable_C_init_type_v_v();
EXPORT_FUNC int TypedWritable_C_force_init_type_i_p(TypedWritable *param0);


// TypedWritableReferenceCount

EXPORT_FUNC PandaNode * TypedWritableReferenceCount_C_downcast_to_PandaNode_p_p(TypedWritableReferenceCount *param0);
EXPORT_FUNC GeomVertexArrayFormat * TypedWritableReferenceCount_C_downcast_to_GeomVertexArrayFormat_p_p(TypedWritableReferenceCount *param0);
EXPORT_FUNC GeomVertexFormat * TypedWritableReferenceCount_C_downcast_to_GeomVertexFormat_p_p(TypedWritableReferenceCount *param0);
EXPORT_FUNC Texture * TypedWritableReferenceCount_C_downcast_to_Texture_p_p(TypedWritableReferenceCount *param0);


// UpdateSeq

EXPORT_FUNC UpdateSeq * UpdateSeq_C_ctor_p_v();
EXPORT_FUNC UpdateSeq * UpdateSeq_C_ctor_p_p(UpdateSeq const *param0);
EXPORT_FUNC UpdateSeq * UpdateSeq_C_initial_p_v();
EXPORT_FUNC UpdateSeq * UpdateSeq_C_old_p_v();
EXPORT_FUNC UpdateSeq * UpdateSeq_C_fresh_p_v();
EXPORT_FUNC void UpdateSeq_C_clear_v_p(UpdateSeq *param0);
EXPORT_FUNC bool UpdateSeq_C_is_initial_B_p(UpdateSeq const *param0);
EXPORT_FUNC bool UpdateSeq_C_is_old_B_p(UpdateSeq const *param0);
EXPORT_FUNC bool UpdateSeq_C_is_fresh_B_p(UpdateSeq const *param0);
EXPORT_FUNC bool UpdateSeq_C_is_special_B_p(UpdateSeq const *param0);
EXPORT_FUNC AtomicAdjust::Integer UpdateSeq_C_get_seq_p_p(UpdateSeq const *param0);
EXPORT_FUNC void UpdateSeq_C_output_v_pp(UpdateSeq const *param0, std::ostream *param1);


// WindowFramework

EXPORT_FUNC PandaFramework * WindowFramework_C_get_panda_framework_p_p(WindowFramework const *param0);
EXPORT_FUNC GraphicsWindow * WindowFramework_C_get_graphics_window_p_p(WindowFramework const *param0);
EXPORT_FUNC GraphicsOutput * WindowFramework_C_get_graphics_output_p_p(WindowFramework const *param0);
EXPORT_FUNC NodePath * WindowFramework_C_get_camera_group_p_p(WindowFramework *param0);
EXPORT_FUNC int WindowFramework_C_get_num_cameras_i_p(WindowFramework const *param0);
EXPORT_FUNC Camera * WindowFramework_C_get_camera_p_pi(WindowFramework const *param0, int param1);
EXPORT_FUNC DisplayRegion * WindowFramework_C_get_display_region_2d_p_p(WindowFramework const *param0);
EXPORT_FUNC DisplayRegion * WindowFramework_C_get_display_region_3d_p_p(WindowFramework const *param0);
EXPORT_FUNC NodePath * WindowFramework_C_get_render_p_p(WindowFramework *param0);
EXPORT_FUNC NodePath * WindowFramework_C_get_render_2d_p_p(WindowFramework *param0);
EXPORT_FUNC NodePath * WindowFramework_C_get_aspect_2d_p_p(WindowFramework *param0);
EXPORT_FUNC NodePath * WindowFramework_C_get_pixel_2d_p_p(WindowFramework *param0);
EXPORT_FUNC NodePath * WindowFramework_C_get_mouse_p_p(WindowFramework *param0);
EXPORT_FUNC NodePath * WindowFramework_C_get_button_thrower_p_p(WindowFramework *param0);
EXPORT_FUNC void WindowFramework_C_enable_keyboard_v_p(WindowFramework *param0);
EXPORT_FUNC void WindowFramework_C_setup_trackball_v_p(WindowFramework *param0);
EXPORT_FUNC void WindowFramework_C_center_trackball_v_pp(WindowFramework *param0, NodePath const *param1);
EXPORT_FUNC bool WindowFramework_C_load_models_B_ppp(WindowFramework *param0, NodePath const *param1, pvector< Filename > const *param2);
EXPORT_FUNC NodePath * WindowFramework_C_load_model_p_ppp(WindowFramework *param0, NodePath const *param1, Filename *param2);
EXPORT_FUNC NodePath * WindowFramework_C_load_default_model_p_pp(WindowFramework *param0, NodePath const *param1);
EXPORT_FUNC void WindowFramework_C_loop_animations_v_pi(WindowFramework *param0, int param1);
EXPORT_FUNC void WindowFramework_C_loop_animations_v_p(WindowFramework *param0);
EXPORT_FUNC void WindowFramework_C_stagger_animations_v_p(WindowFramework *param0);
EXPORT_FUNC void WindowFramework_C_next_anim_control_v_p(WindowFramework *param0);
EXPORT_FUNC void WindowFramework_C_set_anim_controls_v_pB(WindowFramework *param0, bool param1);
EXPORT_FUNC bool WindowFramework_C_get_anim_controls_B_p(WindowFramework const *param0);
EXPORT_FUNC void WindowFramework_C_adjust_dimensions_v_p(WindowFramework *param0);
EXPORT_FUNC WindowFramework * WindowFramework_C_split_window_p_pp(WindowFramework *param0, WindowFramework::SplitType param1);
EXPORT_FUNC WindowFramework * WindowFramework_C_split_window_p_p(WindowFramework *param0);
EXPORT_FUNC void WindowFramework_C_set_wireframe_v_pBB(WindowFramework *param0, bool param1, bool param2);
EXPORT_FUNC void WindowFramework_C_set_wireframe_v_pB(WindowFramework *param0, bool param1);
EXPORT_FUNC void WindowFramework_C_set_texture_v_pB(WindowFramework *param0, bool param1);
EXPORT_FUNC void WindowFramework_C_set_two_sided_v_pB(WindowFramework *param0, bool param1);
EXPORT_FUNC void WindowFramework_C_set_one_sided_reverse_v_pB(WindowFramework *param0, bool param1);
EXPORT_FUNC void WindowFramework_C_set_lighting_v_pB(WindowFramework *param0, bool param1);
EXPORT_FUNC void WindowFramework_C_set_perpixel_v_pB(WindowFramework *param0, bool param1);
EXPORT_FUNC void WindowFramework_C_set_background_type_v_pp(WindowFramework *param0, WindowFramework::BackgroundType param1);
EXPORT_FUNC bool WindowFramework_C_get_wireframe_B_p(WindowFramework const *param0);
EXPORT_FUNC bool WindowFramework_C_get_wireframe_filled_B_p(WindowFramework const *param0);
EXPORT_FUNC bool WindowFramework_C_get_texture_B_p(WindowFramework const *param0);
EXPORT_FUNC bool WindowFramework_C_get_two_sided_B_p(WindowFramework const *param0);
EXPORT_FUNC bool WindowFramework_C_get_one_sided_reverse_B_p(WindowFramework const *param0);
EXPORT_FUNC bool WindowFramework_C_get_lighting_B_p(WindowFramework const *param0);
EXPORT_FUNC bool WindowFramework_C_get_perpixel_B_p(WindowFramework const *param0);
EXPORT_FUNC WindowFramework::BackgroundType WindowFramework_C_get_background_type_p_p(WindowFramework const *param0);
EXPORT_FUNC TextFont * WindowFramework_C_get_shuttle_controls_font_p_v();
EXPORT_FUNC NodePath * WindowFramework_C_make_camera_p_p(WindowFramework *param0);
EXPORT_FUNC int WindowFramework_C_get_class_type_i_v();
EXPORT_FUNC void WindowFramework_C_init_type_v_v();
EXPORT_FUNC int WindowFramework_C_get_type_i_p(WindowFramework const *param0);
EXPORT_FUNC int WindowFramework_C_force_init_type_i_p(WindowFramework *param0);
EXPORT_FUNC WindowFramework * WindowFramework_C_ctor_p_p(WindowFramework const *param0);


// WindowHandle

EXPORT_FUNC WindowHandle * WindowHandle_C_ctor_p_p(WindowHandle const *param0);
EXPORT_FUNC WindowHandle * WindowHandle_C_ctor_p_p_1_p_p(WindowHandle::OSHandle *param0);
EXPORT_FUNC WindowHandle::OSHandle * WindowHandle_C_get_os_handle_p_p(WindowHandle const *param0);
EXPORT_FUNC void WindowHandle_C_set_os_handle_v_pp(WindowHandle *param0, WindowHandle::OSHandle *param1);
EXPORT_FUNC void WindowHandle_C_send_windows_message_v_pIii(WindowHandle *param0, unsigned int param1, int param2, int param3);
EXPORT_FUNC std::size_t WindowHandle_C_get_int_handle_l_p(WindowHandle const *param0);
EXPORT_FUNC void WindowHandle_C_output_v_pp(WindowHandle const *param0, std::ostream *param1);
EXPORT_FUNC void WindowHandle_C_attach_child_v_pp(WindowHandle *param0, WindowHandle *param1);
EXPORT_FUNC void WindowHandle_C_detach_child_v_pp(WindowHandle *param0, WindowHandle *param1);
EXPORT_FUNC void WindowHandle_C_request_keyboard_focus_v_pp(WindowHandle *param0, WindowHandle *param1);
EXPORT_FUNC void WindowHandle_C_receive_windows_message_v_pIii(WindowHandle *param0, unsigned int param1, int param2, int param3);
EXPORT_FUNC int WindowHandle_C_get_class_type_i_v();
EXPORT_FUNC void WindowHandle_C_init_type_v_v();
EXPORT_FUNC int WindowHandle_C_get_type_i_p(WindowHandle const *param0);
EXPORT_FUNC int WindowHandle_C_force_init_type_i_p(WindowHandle *param0);


// WindowProperties

EXPORT_FUNC WindowProperties * WindowProperties_C_ctor_p_v();
EXPORT_FUNC WindowProperties * WindowProperties_C_ctor_p_p(WindowProperties const *param0);
EXPORT_FUNC WindowProperties * WindowProperties_C_get_config_properties_p_v();
EXPORT_FUNC WindowProperties * WindowProperties_C_get_default_p_v();
EXPORT_FUNC void WindowProperties_C_set_default_v_p(WindowProperties const *param0);
EXPORT_FUNC void WindowProperties_C_clear_default_v_v();
EXPORT_FUNC WindowProperties * WindowProperties_C_size_p_p(LVecBase2i const *param0);
EXPORT_FUNC WindowProperties * WindowProperties_C_size_p_ii(int param0, int param1);
EXPORT_FUNC void WindowProperties_C_clear_v_p(WindowProperties *param0);
EXPORT_FUNC bool WindowProperties_C_is_any_specified_B_p(WindowProperties const *param0);
EXPORT_FUNC void WindowProperties_C_set_origin_v_pp(WindowProperties *param0, LPoint2i const *param1);
EXPORT_FUNC void WindowProperties_C_set_origin_v_pii(WindowProperties *param0, int param1, int param2);
EXPORT_FUNC LPoint2i const * WindowProperties_C_get_origin_p_p(WindowProperties const *param0);
EXPORT_FUNC int WindowProperties_C_get_x_origin_i_p(WindowProperties const *param0);
EXPORT_FUNC int WindowProperties_C_get_y_origin_i_p(WindowProperties const *param0);
EXPORT_FUNC bool WindowProperties_C_has_origin_B_p(WindowProperties const *param0);
EXPORT_FUNC void WindowProperties_C_clear_origin_v_p(WindowProperties *param0);
EXPORT_FUNC void WindowProperties_C_set_size_v_pp(WindowProperties *param0, LVector2i const *param1);
EXPORT_FUNC void WindowProperties_C_set_size_v_pii(WindowProperties *param0, int param1, int param2);
EXPORT_FUNC LVector2i const * WindowProperties_C_get_size_p_p(WindowProperties const *param0);
EXPORT_FUNC int WindowProperties_C_get_x_size_i_p(WindowProperties const *param0);
EXPORT_FUNC int WindowProperties_C_get_y_size_i_p(WindowProperties const *param0);
EXPORT_FUNC bool WindowProperties_C_has_size_B_p(WindowProperties const *param0);
EXPORT_FUNC void WindowProperties_C_clear_size_v_p(WindowProperties *param0);
EXPORT_FUNC bool WindowProperties_C_has_mouse_mode_B_p(WindowProperties const *param0);
EXPORT_FUNC void WindowProperties_C_set_mouse_mode_v_pp(WindowProperties *param0, WindowProperties::MouseMode param1);
EXPORT_FUNC WindowProperties::MouseMode WindowProperties_C_get_mouse_mode_p_p(WindowProperties const *param0);
EXPORT_FUNC void WindowProperties_C_clear_mouse_mode_v_p(WindowProperties *param0);
EXPORT_FUNC void WindowProperties_C_set_title_v_ps(WindowProperties *param0, char const *param1);
EXPORT_FUNC char const * WindowProperties_C_get_title_s_p(WindowProperties const *param0);
EXPORT_FUNC bool WindowProperties_C_has_title_B_p(WindowProperties const *param0);
EXPORT_FUNC void WindowProperties_C_clear_title_v_p(WindowProperties *param0);
EXPORT_FUNC void WindowProperties_C_set_undecorated_v_pB(WindowProperties *param0, bool param1);
EXPORT_FUNC bool WindowProperties_C_get_undecorated_B_p(WindowProperties const *param0);
EXPORT_FUNC bool WindowProperties_C_has_undecorated_B_p(WindowProperties const *param0);
EXPORT_FUNC void WindowProperties_C_clear_undecorated_v_p(WindowProperties *param0);
EXPORT_FUNC void WindowProperties_C_set_fixed_size_v_pB(WindowProperties *param0, bool param1);
EXPORT_FUNC bool WindowProperties_C_get_fixed_size_B_p(WindowProperties const *param0);
EXPORT_FUNC bool WindowProperties_C_has_fixed_size_B_p(WindowProperties const *param0);
EXPORT_FUNC void WindowProperties_C_clear_fixed_size_v_p(WindowProperties *param0);
EXPORT_FUNC void WindowProperties_C_set_fullscreen_v_pB(WindowProperties *param0, bool param1);
EXPORT_FUNC bool WindowProperties_C_get_fullscreen_B_p(WindowProperties const *param0);
EXPORT_FUNC bool WindowProperties_C_has_fullscreen_B_p(WindowProperties const *param0);
EXPORT_FUNC void WindowProperties_C_clear_fullscreen_v_p(WindowProperties *param0);
EXPORT_FUNC void WindowProperties_C_set_foreground_v_pB(WindowProperties *param0, bool param1);
EXPORT_FUNC bool WindowProperties_C_get_foreground_B_p(WindowProperties const *param0);
EXPORT_FUNC bool WindowProperties_C_has_foreground_B_p(WindowProperties const *param0);
EXPORT_FUNC void WindowProperties_C_clear_foreground_v_p(WindowProperties *param0);
EXPORT_FUNC void WindowProperties_C_set_minimized_v_pB(WindowProperties *param0, bool param1);
EXPORT_FUNC bool WindowProperties_C_get_minimized_B_p(WindowProperties const *param0);
EXPORT_FUNC bool WindowProperties_C_has_minimized_B_p(WindowProperties const *param0);
EXPORT_FUNC void WindowProperties_C_clear_minimized_v_p(WindowProperties *param0);
EXPORT_FUNC void WindowProperties_C_set_maximized_v_pB(WindowProperties *param0, bool param1);
EXPORT_FUNC bool WindowProperties_C_get_maximized_B_p(WindowProperties const *param0);
EXPORT_FUNC bool WindowProperties_C_has_maximized_B_p(WindowProperties const *param0);
EXPORT_FUNC void WindowProperties_C_clear_maximized_v_p(WindowProperties *param0);
EXPORT_FUNC void WindowProperties_C_set_raw_mice_v_pB(WindowProperties *param0, bool param1);
EXPORT_FUNC bool WindowProperties_C_get_raw_mice_B_p(WindowProperties const *param0);
EXPORT_FUNC bool WindowProperties_C_has_raw_mice_B_p(WindowProperties const *param0);
EXPORT_FUNC void WindowProperties_C_clear_raw_mice_v_p(WindowProperties *param0);
EXPORT_FUNC void WindowProperties_C_set_open_v_pB(WindowProperties *param0, bool param1);
EXPORT_FUNC bool WindowProperties_C_get_open_B_p(WindowProperties const *param0);
EXPORT_FUNC bool WindowProperties_C_has_open_B_p(WindowProperties const *param0);
EXPORT_FUNC void WindowProperties_C_clear_open_v_p(WindowProperties *param0);
EXPORT_FUNC void WindowProperties_C_set_cursor_hidden_v_pB(WindowProperties *param0, bool param1);
EXPORT_FUNC bool WindowProperties_C_get_cursor_hidden_B_p(WindowProperties const *param0);
EXPORT_FUNC bool WindowProperties_C_has_cursor_hidden_B_p(WindowProperties const *param0);
EXPORT_FUNC void WindowProperties_C_clear_cursor_hidden_v_p(WindowProperties *param0);
EXPORT_FUNC void WindowProperties_C_set_icon_filename_v_pp(WindowProperties *param0, Filename const *param1);
EXPORT_FUNC Filename const * WindowProperties_C_get_icon_filename_p_p(WindowProperties const *param0);
EXPORT_FUNC bool WindowProperties_C_has_icon_filename_B_p(WindowProperties const *param0);
EXPORT_FUNC void WindowProperties_C_clear_icon_filename_v_p(WindowProperties *param0);
EXPORT_FUNC void WindowProperties_C_set_cursor_filename_v_pp(WindowProperties *param0, Filename const *param1);
EXPORT_FUNC Filename const * WindowProperties_C_get_cursor_filename_p_p(WindowProperties const *param0);
EXPORT_FUNC bool WindowProperties_C_has_cursor_filename_B_p(WindowProperties const *param0);
EXPORT_FUNC void WindowProperties_C_clear_cursor_filename_v_p(WindowProperties *param0);
EXPORT_FUNC void WindowProperties_C_set_z_order_v_pp(WindowProperties *param0, WindowProperties::ZOrder param1);
EXPORT_FUNC WindowProperties::ZOrder WindowProperties_C_get_z_order_p_p(WindowProperties const *param0);
EXPORT_FUNC bool WindowProperties_C_has_z_order_B_p(WindowProperties const *param0);
EXPORT_FUNC void WindowProperties_C_clear_z_order_v_p(WindowProperties *param0);
EXPORT_FUNC void WindowProperties_C_set_parent_window_v_pp(WindowProperties *param0, WindowHandle *param1);
EXPORT_FUNC void WindowProperties_C_set_parent_window_v_p(WindowProperties *param0);
EXPORT_FUNC void WindowProperties_C_set_parent_window_v_pl(WindowProperties *param0, std::size_t param1);
EXPORT_FUNC WindowHandle * WindowProperties_C_get_parent_window_p_p(WindowProperties const *param0);
EXPORT_FUNC bool WindowProperties_C_has_parent_window_B_p(WindowProperties const *param0);
EXPORT_FUNC void WindowProperties_C_clear_parent_window_v_p(WindowProperties *param0);
EXPORT_FUNC void WindowProperties_C_add_properties_v_pp(WindowProperties *param0, WindowProperties const *param1);
EXPORT_FUNC void WindowProperties_C_output_v_pp(WindowProperties const *param0, std::ostream *param1);


// 


// AnimControlCollection


CActor *
AnimControlCollection_C_downcast_to_CActor_p_p(AnimControlCollection *param0) {
    return (CActor *)param0;
}


// CActor


NodePath *
CActor_C_upcast_to_NodePath_p_p(CActor *param0) {
    return (NodePath *)param0;
}


AnimControlCollection *
CActor_C_upcast_to_AnimControlCollection_p_p(CActor *param0) {
    return (AnimControlCollection *)param0;
}


CActor *
CActor_C_ctor_p_v() {
    return new CActor();
}


CActor *
CActor_C_ctor_p_p(CActor const *param0) {
    return new CActor(*param0);
}


Dict *
CActor_C_get_anim_map_p_p(CActor const *param0) {
    return new Dict((param0)->anim_map);
}


void
CActor_C_add_v_pss(CActor *param0, char const *param1, char const *param2) {
    ((*param0).add)(param1, param2);
}


void
CActor_C_load_actor_v_ppspi(CActor *param0, WindowFramework *param1, char const *param2, AnimMap const *param3, int param4) {
    ((*param0).load_actor)(param1, std::string(param2), param3, param4);
}


NodePath *
CActor_C_control_joint_p_ps(CActor *param0, char const *param1) {
    return new NodePath(((*param0).control_joint)(std::string(param1)));
}


NodePath *
CActor_C_expose_joint_p_ps(CActor *param0, char const *param1) {
    return new NodePath(((*param0).expose_joint)(std::string(param1)));
}


// CachedTypedWritableReferenceCount


int
CachedTypedWritableReferenceCount_C_get_cache_ref_count_i_p(CachedTypedWritableReferenceCount const *param0) {
    return ((*param0).get_cache_ref_count)();
}


void
CachedTypedWritableReferenceCount_C_cache_ref_v_p(CachedTypedWritableReferenceCount const *param0) {
    ((*param0).cache_ref)();
}


bool
CachedTypedWritableReferenceCount_C_cache_unref_B_p(CachedTypedWritableReferenceCount const *param0) {
    return ((*param0).cache_unref)();
}


bool
CachedTypedWritableReferenceCount_C_test_ref_count_integrity_B_p(CachedTypedWritableReferenceCount const *param0) {
    return ((*param0).test_ref_count_integrity)();
}


void
CachedTypedWritableReferenceCount_C_cache_ref_only_v_p(CachedTypedWritableReferenceCount const *param0) {
    ((*param0).cache_ref_only)();
}


int
CachedTypedWritableReferenceCount_C_get_class_type_i_v() {
    return ((CachedTypedWritableReferenceCount::get_class_type)()).get_index();
}


void
CachedTypedWritableReferenceCount_C_init_type_v_v() {
    (CachedTypedWritableReferenceCount::init_type)();
}


// Camera


Camera *
Camera_C_ctor_p_p(Camera const *param0) {
    return new Camera(*param0);
}


Camera *
Camera_C_ctor_p_sp(char const *param0, Lens *param1) {
    return new Camera(std::string(param0), param1);
}


Camera *
Camera_C_ctor_p_s(char const *param0) {
    return new Camera(std::string(param0));
}


PandaNode *
Camera_C_make_copy_p_p(Camera const *param0) {
    return ((*param0).make_copy)();
}


bool
Camera_C_safe_to_flatten_B_p(Camera const *param0) {
    return ((*param0).safe_to_flatten)();
}


bool
Camera_C_safe_to_transform_B_p(Camera const *param0) {
    return ((*param0).safe_to_transform)();
}


void
Camera_C_set_active_v_pB(Camera *param0, bool param1) {
    ((*param0).set_active)(param1);
}


bool
Camera_C_is_active_B_p(Camera const *param0) {
    return ((*param0).is_active)();
}


void
Camera_C_set_scene_v_pp(Camera *param0, NodePath const *param1) {
    ((*param0).set_scene)(*param1);
}


NodePath const *
Camera_C_get_scene_p_p(Camera const *param0) {
    return &(((*param0).get_scene)());
}


std::size_t
Camera_C_get_num_display_regions_l_p(Camera const *param0) {
    return ((*param0).get_num_display_regions)();
}


DisplayRegion *
Camera_C_get_display_region_p_pl(Camera const *param0, std::size_t param1) {
    return ((*param0).get_display_region)(param1);
}


void
Camera_C_set_camera_mask_v_pp(Camera *param0, DrawMask *param1) {
    ((*param0).set_camera_mask)(*param1);
}


DrawMask *
Camera_C_get_camera_mask_p_p(Camera const *param0) {
    return new DrawMask(((*param0).get_camera_mask)());
}


void
Camera_C_set_cull_center_v_pp(Camera *param0, NodePath const *param1) {
    ((*param0).set_cull_center)(*param1);
}


NodePath const *
Camera_C_get_cull_center_p_p(Camera const *param0) {
    return &(((*param0).get_cull_center)());
}


void
Camera_C_set_cull_bounds_v_pp(Camera *param0, BoundingVolume *param1) {
    ((*param0).set_cull_bounds)(param1);
}


BoundingVolume *
Camera_C_get_cull_bounds_p_p(Camera const *param0) {
    return ((*param0).get_cull_bounds)();
}


void
Camera_C_set_lod_center_v_pp(Camera *param0, NodePath const *param1) {
    ((*param0).set_lod_center)(*param1);
}


NodePath const *
Camera_C_get_lod_center_p_p(Camera const *param0) {
    return &(((*param0).get_lod_center)());
}


void
Camera_C_set_initial_state_v_pp(Camera *param0, RenderState const *param1) {
    ((*param0).set_initial_state)(param1);
}


ConstPointerTo< RenderState > *
Camera_C_get_initial_state_p_p(Camera const *param0) {
    return new ConstPointerTo< RenderState >(((*param0).get_initial_state)());
}


void
Camera_C_set_tag_state_key_v_ps(Camera *param0, char const *param1) {
    ((*param0).set_tag_state_key)(std::string(param1));
}


char const *
Camera_C_get_tag_state_key_s_p(Camera const *param0) {
    return (((*param0).get_tag_state_key)()).c_str();
}


void
Camera_C_set_lod_scale_v_pf(Camera *param0, PN_stdfloat param1) {
    ((*param0).set_lod_scale)(param1);
}


PN_stdfloat
Camera_C_get_lod_scale_f_p(Camera const *param0) {
    return ((*param0).get_lod_scale)();
}


void
Camera_C_set_tag_state_v_psp(Camera *param0, char const *param1, RenderState const *param2) {
    ((*param0).set_tag_state)(std::string(param1), param2);
}


void
Camera_C_clear_tag_state_v_ps(Camera *param0, char const *param1) {
    ((*param0).clear_tag_state)(std::string(param1));
}


void
Camera_C_clear_tag_states_v_p(Camera *param0) {
    ((*param0).clear_tag_states)();
}


bool
Camera_C_has_tag_state_B_ps(Camera const *param0, char const *param1) {
    return ((*param0).has_tag_state)(std::string(param1));
}


ConstPointerTo< RenderState > *
Camera_C_get_tag_state_p_ps(Camera const *param0, char const *param1) {
    return new ConstPointerTo< RenderState >(((*param0).get_tag_state)(std::string(param1)));
}


void
Camera_C_set_aux_scene_data_v_ppp(Camera *param0, NodePath const *param1, AuxSceneData *param2) {
    ((*param0).set_aux_scene_data)(*param1, param2);
}


bool
Camera_C_clear_aux_scene_data_B_pp(Camera *param0, NodePath const *param1) {
    return ((*param0).clear_aux_scene_data)(*param1);
}


AuxSceneData *
Camera_C_get_aux_scene_data_p_pp(Camera const *param0, NodePath const *param1) {
    return ((*param0).get_aux_scene_data)(*param1);
}


void
Camera_C_list_aux_scene_data_v_pp(Camera const *param0, std::ostream *param1) {
    ((*param0).list_aux_scene_data)(*param1);
}


int
Camera_C_cleanup_aux_scene_data_i_pp(Camera *param0, Thread *param1) {
    return ((*param0).cleanup_aux_scene_data)(param1);
}


int
Camera_C_cleanup_aux_scene_data_i_p(Camera *param0) {
    return ((*param0).cleanup_aux_scene_data)();
}


void
Camera_C_register_with_read_factory_v_v() {
    (Camera::register_with_read_factory)();
}


void
Camera_C_write_datagram_v_ppp(Camera *param0, BamWriter *param1, Datagram *param2) {
    ((*param0).write_datagram)(param1, *param2);
}


int
Camera_C_get_class_type_i_v() {
    return ((Camera::get_class_type)()).get_index();
}


void
Camera_C_init_type_v_v() {
    (Camera::init_type)();
}


int
Camera_C_get_type_i_p(Camera const *param0) {
    return (((*param0).get_type)()).get_index();
}


int
Camera_C_force_init_type_i_p(Camera *param0) {
    return (((*param0).force_init_type)()).get_index();
}


// CollisionNode


CollisionNode *
CollisionNode_C_ctor_p_s(char const *param0) {
    return new CollisionNode(std::string(param0));
}


bool
CollisionNode_C_preserve_name_B_p(CollisionNode const *param0) {
    return ((*param0).preserve_name)();
}


void
CollisionNode_C_xform_v_pp(CollisionNode *param0, LMatrix4 const *param1) {
    ((*param0).xform)(*param1);
}


bool
CollisionNode_C_cull_callback_B_ppp(CollisionNode *param0, CullTraverser *param1, CullTraverserData *param2) {
    return ((*param0).cull_callback)(param1, *param2);
}


bool
CollisionNode_C_is_renderable_B_p(CollisionNode const *param0) {
    return ((*param0).is_renderable)();
}


void
CollisionNode_C_set_collide_mask_v_pp(CollisionNode *param0, CollideMask *param1) {
    ((*param0).set_collide_mask)(*param1);
}


void
CollisionNode_C_set_from_collide_mask_v_pp(CollisionNode *param0, CollideMask *param1) {
    ((*param0).set_from_collide_mask)(*param1);
}


void
CollisionNode_C_set_into_collide_mask_v_pp(CollisionNode *param0, CollideMask *param1) {
    ((*param0).set_into_collide_mask)(*param1);
}


CollideMask *
CollisionNode_C_get_from_collide_mask_p_p(CollisionNode const *param0) {
    return new CollideMask(((*param0).get_from_collide_mask)());
}


CollideMask *
CollisionNode_C_get_into_collide_mask_p_p(CollisionNode const *param0) {
    return new CollideMask(((*param0).get_into_collide_mask)());
}


void
CollisionNode_C_clear_solids_v_p(CollisionNode *param0) {
    ((*param0).clear_solids)();
}


std::size_t
CollisionNode_C_get_num_solids_l_p(CollisionNode const *param0) {
    return ((*param0).get_num_solids)();
}


ConstPointerTo< CollisionSolid > *
CollisionNode_C_get_solid_p_pl(CollisionNode const *param0, std::size_t param1) {
    return new ConstPointerTo< CollisionSolid >(((*param0).get_solid)(param1));
}


PointerTo< CollisionSolid > *
CollisionNode_C_modify_solid_p_pl(CollisionNode *param0, std::size_t param1) {
    return new PointerTo< CollisionSolid >(((*param0).modify_solid)(param1));
}


void
CollisionNode_C_set_solid_v_plp(CollisionNode *param0, std::size_t param1, CollisionSolid *param2) {
    ((*param0).set_solid)(param1, param2);
}


void
CollisionNode_C_insert_solid_v_plp(CollisionNode *param0, std::size_t param1, CollisionSolid const *param2) {
    ((*param0).insert_solid)(param1, param2);
}


void
CollisionNode_C_remove_solid_v_pl(CollisionNode *param0, std::size_t param1) {
    ((*param0).remove_solid)(param1);
}


std::size_t
CollisionNode_C_add_solid_l_pp(CollisionNode *param0, CollisionSolid const *param1) {
    return ((*param0).add_solid)(param1);
}


int
CollisionNode_C_get_collider_sort_i_p(CollisionNode const *param0) {
    return ((*param0).get_collider_sort)();
}


void
CollisionNode_C_set_collider_sort_v_pi(CollisionNode *param0, int param1) {
    ((*param0).set_collider_sort)(param1);
}


CollideMask *
CollisionNode_C_get_default_collide_mask_p_v() {
    return new CollideMask((CollisionNode::get_default_collide_mask)());
}


void
CollisionNode_C_register_with_read_factory_v_v() {
    (CollisionNode::register_with_read_factory)();
}


void
CollisionNode_C_write_datagram_v_ppp(CollisionNode *param0, BamWriter *param1, Datagram *param2) {
    ((*param0).write_datagram)(param1, *param2);
}


int
CollisionNode_C_get_class_type_i_v() {
    return ((CollisionNode::get_class_type)()).get_index();
}


void
CollisionNode_C_init_type_v_v() {
    (CollisionNode::init_type)();
}


int
CollisionNode_C_get_type_i_p(CollisionNode const *param0) {
    return (((*param0).get_type)()).get_index();
}


int
CollisionNode_C_force_init_type_i_p(CollisionNode *param0) {
    return (((*param0).force_init_type)()).get_index();
}


// CollisionRay


CollisionRay *
CollisionRay_C_ctor_p_v() {
    return new CollisionRay();
}


CollisionRay *
CollisionRay_C_ctor_p_p(CollisionRay const *param0) {
    return new CollisionRay(*param0);
}


CollisionRay *
CollisionRay_C_ctor_p_pp(LPoint3 const *param0, LVector3 const *param1) {
    return new CollisionRay(*param0, *param1);
}


CollisionRay *
CollisionRay_C_ctor_p_ffffff(PN_stdfloat param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5) {
    return new CollisionRay(param0, param1, param2, param3, param4, param5);
}


CollisionSolid *
CollisionRay_C_make_copy_p_p(CollisionRay *param0) {
    return ((*param0).make_copy)();
}


PointerTo< CollisionEntry > *
CollisionRay_C_test_intersection_p_pp(CollisionRay const *param0, CollisionEntry const *param1) {
    return new PointerTo< CollisionEntry >(((*param0).test_intersection)(*param1));
}


void
CollisionRay_C_xform_v_pp(CollisionRay *param0, LMatrix4 const *param1) {
    ((*param0).xform)(*param1);
}


void
CollisionRay_C_set_origin_v_pp(CollisionRay *param0, LPoint3 const *param1) {
    ((*param0).set_origin)(*param1);
}


void
CollisionRay_C_set_origin_v_pfff(CollisionRay *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3) {
    ((*param0).set_origin)(param1, param2, param3);
}


LPoint3 const *
CollisionRay_C_get_origin_p_p(CollisionRay const *param0) {
    return &(((*param0).get_origin)());
}


void
CollisionRay_C_set_direction_v_pp(CollisionRay *param0, LVector3 const *param1) {
    ((*param0).set_direction)(*param1);
}


void
CollisionRay_C_set_direction_v_pfff(CollisionRay *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3) {
    ((*param0).set_direction)(param1, param2, param3);
}


LVector3 const *
CollisionRay_C_get_direction_p_p(CollisionRay const *param0) {
    return &(((*param0).get_direction)());
}


bool
CollisionRay_C_set_from_lens_B_ppp(CollisionRay *param0, LensNode *param1, LPoint2 const *param2) {
    return ((*param0).set_from_lens)(param1, *param2);
}


bool
CollisionRay_C_set_from_lens_B_ppff(CollisionRay *param0, LensNode *param1, PN_stdfloat param2, PN_stdfloat param3) {
    return ((*param0).set_from_lens)(param1, param2, param3);
}


void
CollisionRay_C_register_with_read_factory_v_v() {
    (CollisionRay::register_with_read_factory)();
}


void
CollisionRay_C_write_datagram_v_ppp(CollisionRay *param0, BamWriter *param1, Datagram *param2) {
    ((*param0).write_datagram)(param1, *param2);
}


int
CollisionRay_C_get_class_type_i_v() {
    return ((CollisionRay::get_class_type)()).get_index();
}


void
CollisionRay_C_init_type_v_v() {
    (CollisionRay::init_type)();
}


int
CollisionRay_C_get_type_i_p(CollisionRay const *param0) {
    return (((*param0).get_type)()).get_index();
}


int
CollisionRay_C_force_init_type_i_p(CollisionRay *param0) {
    return (((*param0).force_init_type)()).get_index();
}


// CollisionSolid


CollisionSolid *
CollisionSolid_C_make_copy_p_p(CollisionSolid *param0) {
    return ((*param0).make_copy)();
}


LPoint3 *
CollisionSolid_C_get_collision_origin_p_p(CollisionSolid const *param0) {
    return new LPoint3(((*param0).get_collision_origin)());
}


void
CollisionSolid_C_set_tangible_v_pB(CollisionSolid *param0, bool param1) {
    ((*param0).set_tangible)(param1);
}


bool
CollisionSolid_C_is_tangible_B_p(CollisionSolid const *param0) {
    return ((*param0).is_tangible)();
}


void
CollisionSolid_C_set_effective_normal_v_pp(CollisionSolid *param0, LVector3 const *param1) {
    ((*param0).set_effective_normal)(*param1);
}


void
CollisionSolid_C_clear_effective_normal_v_p(CollisionSolid *param0) {
    ((*param0).clear_effective_normal)();
}


bool
CollisionSolid_C_has_effective_normal_B_p(CollisionSolid const *param0) {
    return ((*param0).has_effective_normal)();
}


LVector3 const *
CollisionSolid_C_get_effective_normal_p_p(CollisionSolid const *param0) {
    return &(((*param0).get_effective_normal)());
}


void
CollisionSolid_C_set_respect_effective_normal_v_pB(CollisionSolid *param0, bool param1) {
    ((*param0).set_respect_effective_normal)(param1);
}


bool
CollisionSolid_C_get_respect_effective_normal_B_p(CollisionSolid const *param0) {
    return ((*param0).get_respect_effective_normal)();
}


ConstPointerTo< BoundingVolume > *
CollisionSolid_C_get_bounds_p_p(CollisionSolid const *param0) {
    return new ConstPointerTo< BoundingVolume >(((*param0).get_bounds)());
}


void
CollisionSolid_C_set_bounds_v_pp(CollisionSolid *param0, BoundingVolume const *param1) {
    ((*param0).set_bounds)(*param1);
}


PointerTo< CollisionEntry > *
CollisionSolid_C_test_intersection_p_pp(CollisionSolid const *param0, CollisionEntry const *param1) {
    return new PointerTo< CollisionEntry >(((*param0).test_intersection)(*param1));
}


void
CollisionSolid_C_xform_v_pp(CollisionSolid *param0, LMatrix4 const *param1) {
    ((*param0).xform)(*param1);
}


PointerTo< PandaNode > *
CollisionSolid_C_get_viz_p_pppB(CollisionSolid const *param0, CullTraverser const *param1, CullTraverserData const *param2, bool param3) {
    return new PointerTo< PandaNode >(((*param0).get_viz)(param1, *param2, param3));
}


PStatCollector *
CollisionSolid_C_get_volume_pcollector_p_p(CollisionSolid *param0) {
    return &(((*param0).get_volume_pcollector)());
}


PStatCollector *
CollisionSolid_C_get_test_pcollector_p_p(CollisionSolid *param0) {
    return &(((*param0).get_test_pcollector)());
}


void
CollisionSolid_C_output_v_pp(CollisionSolid const *param0, std::ostream *param1) {
    ((*param0).output)(*param1);
}


void
CollisionSolid_C_write_v_ppi(CollisionSolid const *param0, std::ostream *param1, int param2) {
    ((*param0).write)(*param1, param2);
}


void
CollisionSolid_C_write_v_pp(CollisionSolid const *param0, std::ostream *param1) {
    ((*param0).write)(*param1);
}


void
CollisionSolid_C_write_datagram_v_ppp(CollisionSolid *param0, BamWriter *param1, Datagram *param2) {
    ((*param0).write_datagram)(param1, *param2);
}


int
CollisionSolid_C_get_class_type_i_v() {
    return ((CollisionSolid::get_class_type)()).get_index();
}


void
CollisionSolid_C_init_type_v_v() {
    (CollisionSolid::init_type)();
}


int
CollisionSolid_C_get_type_i_p(CollisionSolid const *param0) {
    return (((*param0).get_type)()).get_index();
}


int
CollisionSolid_C_force_init_type_i_p(CollisionSolid *param0) {
    return (((*param0).force_init_type)()).get_index();
}


// CollisionTraverser


CollisionTraverser *
CollisionTraverser_C_ctor_p_p(CollisionTraverser const *param0) {
    return new CollisionTraverser(*param0);
}


CollisionTraverser *
CollisionTraverser_C_ctor_p_s(char const *param0) {
    return new CollisionTraverser(std::string(param0));
}


CollisionTraverser *
CollisionTraverser_C_ctor_p_v() {
    return new CollisionTraverser();
}


void
CollisionTraverser_C_set_respect_prev_transform_v_pB(CollisionTraverser *param0, bool param1) {
    ((*param0).set_respect_prev_transform)(param1);
}


bool
CollisionTraverser_C_get_respect_prev_transform_B_p(CollisionTraverser const *param0) {
    return ((*param0).get_respect_prev_transform)();
}


void
CollisionTraverser_C_add_collider_v_ppp(CollisionTraverser *param0, NodePath const *param1, CollisionHandler *param2) {
    ((*param0).add_collider)(*param1, param2);
}


bool
CollisionTraverser_C_remove_collider_B_pp(CollisionTraverser *param0, NodePath const *param1) {
    return ((*param0).remove_collider)(*param1);
}


bool
CollisionTraverser_C_has_collider_B_pp(CollisionTraverser const *param0, NodePath const *param1) {
    return ((*param0).has_collider)(*param1);
}


int
CollisionTraverser_C_get_num_colliders_i_p(CollisionTraverser const *param0) {
    return ((*param0).get_num_colliders)();
}


NodePath *
CollisionTraverser_C_get_collider_p_pi(CollisionTraverser const *param0, int param1) {
    return new NodePath(((*param0).get_collider)(param1));
}


CollisionHandler *
CollisionTraverser_C_get_handler_p_pp(CollisionTraverser const *param0, NodePath const *param1) {
    return ((*param0).get_handler)(*param1);
}


void
CollisionTraverser_C_clear_colliders_v_p(CollisionTraverser *param0) {
    ((*param0).clear_colliders)();
}


void
CollisionTraverser_C_traverse_v_pp(CollisionTraverser *param0, NodePath const *param1) {
    ((*param0).traverse)(*param1);
}


void
CollisionTraverser_C_set_recorder_v_pp(CollisionTraverser *param0, CollisionRecorder *param1) {
    ((*param0).set_recorder)(param1);
}


bool
CollisionTraverser_C_has_recorder_B_p(CollisionTraverser const *param0) {
    return ((*param0).has_recorder)();
}


CollisionRecorder *
CollisionTraverser_C_get_recorder_p_p(CollisionTraverser const *param0) {
    return ((*param0).get_recorder)();
}


void
CollisionTraverser_C_clear_recorder_v_p(CollisionTraverser *param0) {
    ((*param0).clear_recorder)();
}


PandaNode *
CollisionTraverser_C_show_collisions_p_pp(CollisionTraverser *param0, NodePath const *param1) {
    return ((*param0).show_collisions)(*param1);
}


void
CollisionTraverser_C_hide_collisions_v_p(CollisionTraverser *param0) {
    ((*param0).hide_collisions)();
}


void
CollisionTraverser_C_output_v_pp(CollisionTraverser const *param0, std::ostream *param1) {
    ((*param0).output)(*param1);
}


void
CollisionTraverser_C_write_v_ppi(CollisionTraverser const *param0, std::ostream *param1, int param2) {
    ((*param0).write)(*param1, param2);
}


int
CollisionTraverser_C_get_class_type_i_v() {
    return ((CollisionTraverser::get_class_type)()).get_index();
}


void
CollisionTraverser_C_init_type_v_v() {
    (CollisionTraverser::init_type)();
}


// ConfigPage


ConfigPage *
ConfigPage_C_get_default_page_p_v() {
    return (ConfigPage::get_default_page)();
}


ConfigPage *
ConfigPage_C_get_local_page_p_v() {
    return (ConfigPage::get_local_page)();
}


char const *
ConfigPage_C_get_name_s_p(ConfigPage const *param0) {
    return (((*param0).get_name)()).c_str();
}


bool
ConfigPage_C_is_special_B_p(ConfigPage const *param0) {
    return ((*param0).is_special)();
}


bool
ConfigPage_C_is_implicit_B_p(ConfigPage const *param0) {
    return ((*param0).is_implicit)();
}


void
ConfigPage_C_set_sort_v_pi(ConfigPage *param0, int param1) {
    ((*param0).set_sort)(param1);
}


int
ConfigPage_C_get_sort_i_p(ConfigPage const *param0) {
    return ((*param0).get_sort)();
}


int
ConfigPage_C_get_page_seq_i_p(ConfigPage const *param0) {
    return ((*param0).get_page_seq)();
}


int
ConfigPage_C_get_trust_level_i_p(ConfigPage const *param0) {
    return ((*param0).get_trust_level)();
}


void
ConfigPage_C_set_trust_level_v_pi(ConfigPage *param0, int param1) {
    ((*param0).set_trust_level)(param1);
}


char const *
ConfigPage_C_get_signature_s_p(ConfigPage const *param0) {
    return (((*param0).get_signature)()).c_str();
}


void
ConfigPage_C_clear_v_p(ConfigPage *param0) {
    ((*param0).clear)();
}


bool
ConfigPage_C_read_prc_B_pp(ConfigPage *param0, std::istream *param1) {
    return ((*param0).read_prc)(*param1);
}


bool
ConfigPage_C_read_encrypted_prc_B_pps(ConfigPage *param0, std::istream *param1, char const *param2) {
    return ((*param0).read_encrypted_prc)(*param1, std::string(param2));
}


ConfigDeclaration *
ConfigPage_C_make_declaration_p_pps(ConfigPage *param0, ConfigVariableCore *param1, char const *param2) {
    return ((*param0).make_declaration)(param1, std::string(param2));
}


ConfigDeclaration *
ConfigPage_C_make_declaration_p_pss(ConfigPage *param0, char const *param1, char const *param2) {
    return ((*param0).make_declaration)(std::string(param1), std::string(param2));
}


bool
ConfigPage_C_delete_declaration_B_pp(ConfigPage *param0, ConfigDeclaration *param1) {
    return ((*param0).delete_declaration)(param1);
}


std::size_t
ConfigPage_C_get_num_declarations_l_p(ConfigPage const *param0) {
    return ((*param0).get_num_declarations)();
}


ConfigDeclaration const *
ConfigPage_C_get_declaration_p_pl(ConfigPage const *param0, std::size_t param1) {
    return ((*param0).get_declaration)(param1);
}


ConfigDeclaration *
ConfigPage_C_modify_declaration_p_pl(ConfigPage *param0, std::size_t param1) {
    return ((*param0).modify_declaration)(param1);
}


char const *
ConfigPage_C_get_variable_name_s_pl(ConfigPage const *param0, std::size_t param1) {
    static std::string string_holder = ((*param0).get_variable_name)(param1);
    return string_holder.c_str();
}


char const *
ConfigPage_C_get_string_value_s_pl(ConfigPage const *param0, std::size_t param1) {
    static std::string string_holder = ((*param0).get_string_value)(param1);
    return string_holder.c_str();
}


bool
ConfigPage_C_is_variable_used_B_pl(ConfigPage const *param0, std::size_t param1) {
    return ((*param0).is_variable_used)(param1);
}


void
ConfigPage_C_output_v_pp(ConfigPage const *param0, std::ostream *param1) {
    ((*param0).output)(*param1);
}


void
ConfigPage_C_output_brief_signature_v_pp(ConfigPage const *param0, std::ostream *param1) {
    ((*param0).output_brief_signature)(*param1);
}


void
ConfigPage_C_write_v_pp(ConfigPage const *param0, std::ostream *param1) {
    ((*param0).write)(*param1);
}


// CopyOnWriteObject


Geom *
CopyOnWriteObject_C_downcast_to_Geom_p_p(CopyOnWriteObject *param0) {
    return (Geom *)param0;
}


GeomPrimitive *
CopyOnWriteObject_C_downcast_to_GeomPrimitive_p_p(CopyOnWriteObject *param0) {
    return (GeomPrimitive *)param0;
}


GeomVertexArrayData *
CopyOnWriteObject_C_downcast_to_GeomVertexArrayData_p_p(CopyOnWriteObject *param0) {
    return (GeomVertexArrayData *)param0;
}


GeomVertexData *
CopyOnWriteObject_C_downcast_to_GeomVertexData_p_p(CopyOnWriteObject *param0) {
    return (GeomVertexData *)param0;
}


// DisplayRegion


TypedReferenceCount *
DisplayRegion_C_upcast_to_TypedReferenceCount_p_p(DisplayRegion *param0) {
    return (TypedReferenceCount *)param0;
}


DrawableRegion *
DisplayRegion_C_upcast_to_DrawableRegion_p_p(DisplayRegion *param0) {
    return (DrawableRegion *)param0;
}


void
DisplayRegion_C_cleanup_v_p(DisplayRegion *param0) {
    ((*param0).cleanup)();
}


int
DisplayRegion_C_get_num_regions_i_p(DisplayRegion const *param0) {
    return ((*param0).get_num_regions)();
}


void
DisplayRegion_C_set_num_regions_v_pi(DisplayRegion *param0, int param1) {
    ((*param0).set_num_regions)(param1);
}


LVecBase4 *
DisplayRegion_C_get_dimensions_p_pi(DisplayRegion const *param0, int param1) {
    return new LVecBase4(((*param0).get_dimensions)(param1));
}


LVecBase4 *
DisplayRegion_C_get_dimensions_p_p(DisplayRegion const *param0) {
    return new LVecBase4(((*param0).get_dimensions)());
}


PN_stdfloat
DisplayRegion_C_get_left_f_pi(DisplayRegion const *param0, int param1) {
    return ((*param0).get_left)(param1);
}


PN_stdfloat
DisplayRegion_C_get_left_f_p(DisplayRegion const *param0) {
    return ((*param0).get_left)();
}


PN_stdfloat
DisplayRegion_C_get_right_f_pi(DisplayRegion const *param0, int param1) {
    return ((*param0).get_right)(param1);
}


PN_stdfloat
DisplayRegion_C_get_right_f_p(DisplayRegion const *param0) {
    return ((*param0).get_right)();
}


PN_stdfloat
DisplayRegion_C_get_bottom_f_pi(DisplayRegion const *param0, int param1) {
    return ((*param0).get_bottom)(param1);
}


PN_stdfloat
DisplayRegion_C_get_bottom_f_p(DisplayRegion const *param0) {
    return ((*param0).get_bottom)();
}


PN_stdfloat
DisplayRegion_C_get_top_f_pi(DisplayRegion const *param0, int param1) {
    return ((*param0).get_top)(param1);
}


PN_stdfloat
DisplayRegion_C_get_top_f_p(DisplayRegion const *param0) {
    return ((*param0).get_top)();
}


void
DisplayRegion_C_set_dimensions_v_pp(DisplayRegion *param0, LVecBase4 const *param1) {
    ((*param0).set_dimensions)(*param1);
}


void
DisplayRegion_C_set_dimensions_v_pffff(DisplayRegion *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    ((*param0).set_dimensions)(param1, param2, param3, param4);
}


void
DisplayRegion_C_set_dimensions_v_pip(DisplayRegion *param0, int param1, LVecBase4 const *param2) {
    ((*param0).set_dimensions)(param1, *param2);
}


void
DisplayRegion_C_set_dimensions_v_piffff(DisplayRegion *param0, int param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5) {
    ((*param0).set_dimensions)(param1, param2, param3, param4, param5);
}


GraphicsOutput *
DisplayRegion_C_get_window_p_p(DisplayRegion const *param0) {
    return ((*param0).get_window)();
}


GraphicsPipe *
DisplayRegion_C_get_pipe_p_p(DisplayRegion const *param0) {
    return ((*param0).get_pipe)();
}


bool
DisplayRegion_C_is_stereo_B_p(DisplayRegion const *param0) {
    return ((*param0).is_stereo)();
}


void
DisplayRegion_C_set_camera_v_pp(DisplayRegion *param0, NodePath const *param1) {
    ((*param0).set_camera)(*param1);
}


NodePath *
DisplayRegion_C_get_camera_p_pp(DisplayRegion const *param0, Thread *param1) {
    return new NodePath(((*param0).get_camera)(param1));
}


NodePath *
DisplayRegion_C_get_camera_p_p(DisplayRegion const *param0) {
    return new NodePath(((*param0).get_camera)());
}


void
DisplayRegion_C_set_active_v_pB(DisplayRegion *param0, bool param1) {
    ((*param0).set_active)(param1);
}


bool
DisplayRegion_C_is_active_B_p(DisplayRegion const *param0) {
    return ((*param0).is_active)();
}


void
DisplayRegion_C_set_sort_v_pi(DisplayRegion *param0, int param1) {
    ((*param0).set_sort)(param1);
}


int
DisplayRegion_C_get_sort_i_p(DisplayRegion const *param0) {
    return ((*param0).get_sort)();
}


void
DisplayRegion_C_set_stereo_channel_v_pp(DisplayRegion *param0, Lens::StereoChannel param1) {
    ((*param0).set_stereo_channel)(param1);
}


Lens::StereoChannel
DisplayRegion_C_get_stereo_channel_p_p(DisplayRegion const *param0) {
    return ((*param0).get_stereo_channel)();
}


void
DisplayRegion_C_set_tex_view_offset_v_pi(DisplayRegion *param0, int param1) {
    ((*param0).set_tex_view_offset)(param1);
}


int
DisplayRegion_C_get_tex_view_offset_i_p(DisplayRegion const *param0) {
    return ((*param0).get_tex_view_offset)();
}


void
DisplayRegion_C_set_incomplete_render_v_pB(DisplayRegion *param0, bool param1) {
    ((*param0).set_incomplete_render)(param1);
}


bool
DisplayRegion_C_get_incomplete_render_B_p(DisplayRegion const *param0) {
    return ((*param0).get_incomplete_render)();
}


void
DisplayRegion_C_set_texture_reload_priority_v_pi(DisplayRegion *param0, int param1) {
    ((*param0).set_texture_reload_priority)(param1);
}


int
DisplayRegion_C_get_texture_reload_priority_i_p(DisplayRegion const *param0) {
    return ((*param0).get_texture_reload_priority)();
}


void
DisplayRegion_C_set_lens_index_v_pi(DisplayRegion *param0, int param1) {
    ((*param0).set_lens_index)(param1);
}


int
DisplayRegion_C_get_lens_index_i_p(DisplayRegion const *param0) {
    return ((*param0).get_lens_index)();
}


void
DisplayRegion_C_set_cull_traverser_v_pp(DisplayRegion *param0, CullTraverser *param1) {
    ((*param0).set_cull_traverser)(param1);
}


CullTraverser *
DisplayRegion_C_get_cull_traverser_p_p(DisplayRegion *param0) {
    return ((*param0).get_cull_traverser)();
}


void
DisplayRegion_C_set_cube_map_index_v_pi(DisplayRegion *param0, int param1) {
    ((*param0).set_cube_map_index)(param1);
}


void
DisplayRegion_C_set_target_tex_page_v_pi(DisplayRegion *param0, int param1) {
    ((*param0).set_target_tex_page)(param1);
}


int
DisplayRegion_C_get_target_tex_page_i_p(DisplayRegion const *param0) {
    return ((*param0).get_target_tex_page)();
}


void
DisplayRegion_C_set_scissor_enabled_v_pB(DisplayRegion *param0, bool param1) {
    ((*param0).set_scissor_enabled)(param1);
}


bool
DisplayRegion_C_get_scissor_enabled_B_p(DisplayRegion const *param0) {
    return ((*param0).get_scissor_enabled)();
}


void
DisplayRegion_C_set_cull_callback_v_pp(DisplayRegion *param0, CallbackObject *param1) {
    ((*param0).set_cull_callback)(param1);
}


void
DisplayRegion_C_clear_cull_callback_v_p(DisplayRegion *param0) {
    ((*param0).clear_cull_callback)();
}


CallbackObject *
DisplayRegion_C_get_cull_callback_p_p(DisplayRegion const *param0) {
    return ((*param0).get_cull_callback)();
}


void
DisplayRegion_C_set_draw_callback_v_pp(DisplayRegion *param0, CallbackObject *param1) {
    ((*param0).set_draw_callback)(param1);
}


void
DisplayRegion_C_clear_draw_callback_v_p(DisplayRegion *param0) {
    ((*param0).clear_draw_callback)();
}


CallbackObject *
DisplayRegion_C_get_draw_callback_p_p(DisplayRegion const *param0) {
    return ((*param0).get_draw_callback)();
}


int
DisplayRegion_C_get_pixel_width_i_pi(DisplayRegion const *param0, int param1) {
    return ((*param0).get_pixel_width)(param1);
}


int
DisplayRegion_C_get_pixel_width_i_p(DisplayRegion const *param0) {
    return ((*param0).get_pixel_width)();
}


int
DisplayRegion_C_get_pixel_height_i_pi(DisplayRegion const *param0, int param1) {
    return ((*param0).get_pixel_height)(param1);
}


int
DisplayRegion_C_get_pixel_height_i_p(DisplayRegion const *param0) {
    return ((*param0).get_pixel_height)();
}


LVecBase2i *
DisplayRegion_C_get_pixel_size_p_pi(DisplayRegion const *param0, int param1) {
    return new LVecBase2i(((*param0).get_pixel_size)(param1));
}


LVecBase2i *
DisplayRegion_C_get_pixel_size_p_p(DisplayRegion const *param0) {
    return new LVecBase2i(((*param0).get_pixel_size)());
}


void
DisplayRegion_C_output_v_pp(DisplayRegion const *param0, std::ostream *param1) {
    ((*param0).output)(*param1);
}


Filename *
DisplayRegion_C_make_screenshot_filename_p_s(char const *param0) {
    return new Filename((DisplayRegion::make_screenshot_filename)(std::string(param0)));
}


Filename *
DisplayRegion_C_make_screenshot_filename_p_v() {
    return new Filename((DisplayRegion::make_screenshot_filename)());
}


Filename *
DisplayRegion_C_save_screenshot_default_p_ps(DisplayRegion *param0, char const *param1) {
    return new Filename(((*param0).save_screenshot_default)(std::string(param1)));
}


Filename *
DisplayRegion_C_save_screenshot_default_p_p(DisplayRegion *param0) {
    return new Filename(((*param0).save_screenshot_default)());
}


bool
DisplayRegion_C_save_screenshot_B_pps(DisplayRegion *param0, Filename const *param1, char const *param2) {
    return ((*param0).save_screenshot)(*param1, std::string(param2));
}


bool
DisplayRegion_C_save_screenshot_B_pp(DisplayRegion *param0, Filename const *param1) {
    return ((*param0).save_screenshot)(*param1);
}


PointerTo< Texture > *
DisplayRegion_C_get_screenshot_p_p(DisplayRegion *param0) {
    return new PointerTo< Texture >(((*param0).get_screenshot)());
}


bool
DisplayRegion_C_get_screenshot_B_pp(DisplayRegion *param0, PNMImage *param1) {
    return ((*param0).get_screenshot)(*param1);
}


PointerTo< PandaNode > *
DisplayRegion_C_make_cull_result_graph_p_p(DisplayRegion *param0) {
    return new PointerTo< PandaNode >(((*param0).make_cull_result_graph)());
}


void
DisplayRegion_C_compute_pixels_v_p(DisplayRegion *param0) {
    ((*param0).compute_pixels)();
}


void
DisplayRegion_C_compute_pixels_v_pii(DisplayRegion *param0, int param1, int param2) {
    ((*param0).compute_pixels)(param1, param2);
}


void
DisplayRegion_C_compute_pixels_all_stages_v_p(DisplayRegion *param0) {
    ((*param0).compute_pixels_all_stages)();
}


void
DisplayRegion_C_compute_pixels_all_stages_v_pii(DisplayRegion *param0, int param1, int param2) {
    ((*param0).compute_pixels_all_stages)(param1, param2);
}


bool
DisplayRegion_C_supports_pixel_zoom_B_p(DisplayRegion const *param0) {
    return ((*param0).supports_pixel_zoom)();
}


void
DisplayRegion_C_set_cull_result_v_pppp(DisplayRegion *param0, PointerTo< CullResult > *param1, PointerTo< SceneSetup > *param2, Thread *param3) {
    ((*param0).set_cull_result)(*param1, *param2, param3);
}


CullResult *
DisplayRegion_C_get_cull_result_p_pp(DisplayRegion const *param0, Thread *param1) {
    return ((*param0).get_cull_result)(param1);
}


SceneSetup *
DisplayRegion_C_get_scene_setup_p_pp(DisplayRegion const *param0, Thread *param1) {
    return ((*param0).get_scene_setup)(param1);
}


PStatCollector *
DisplayRegion_C_get_cull_region_pcollector_p_p(DisplayRegion *param0) {
    return &(((*param0).get_cull_region_pcollector)());
}


PStatCollector *
DisplayRegion_C_get_draw_region_pcollector_p_p(DisplayRegion *param0) {
    return &(((*param0).get_draw_region_pcollector)());
}


char const *
DisplayRegion_C_get_debug_name_s_p(DisplayRegion const *param0) {
    return (((*param0).get_debug_name)()).c_str();
}


int
DisplayRegion_C_get_class_type_i_v() {
    return ((DisplayRegion::get_class_type)()).get_index();
}


void
DisplayRegion_C_init_type_v_v() {
    (DisplayRegion::init_type)();
}


int
DisplayRegion_C_get_type_i_p(DisplayRegion const *param0) {
    return (((*param0).get_type)()).get_index();
}


int
DisplayRegion_C_force_init_type_i_p(DisplayRegion *param0) {
    return (((*param0).force_init_type)()).get_index();
}


// DrawableRegion


DrawableRegion *
DrawableRegion_C_ctor_p_v() {
    return new DrawableRegion();
}


DrawableRegion *
DrawableRegion_C_ctor_p_p(DrawableRegion const *param0) {
    return new DrawableRegion(*param0);
}


void
DrawableRegion_C_copy_clear_settings_v_pp(DrawableRegion *param0, DrawableRegion const *param1) {
    ((*param0).copy_clear_settings)(*param1);
}


void
DrawableRegion_C_set_clear_color_active_v_pB(DrawableRegion *param0, bool param1) {
    ((*param0).set_clear_color_active)(param1);
}


bool
DrawableRegion_C_get_clear_color_active_B_p(DrawableRegion const *param0) {
    return ((*param0).get_clear_color_active)();
}


void
DrawableRegion_C_set_clear_depth_active_v_pB(DrawableRegion *param0, bool param1) {
    ((*param0).set_clear_depth_active)(param1);
}


bool
DrawableRegion_C_get_clear_depth_active_B_p(DrawableRegion const *param0) {
    return ((*param0).get_clear_depth_active)();
}


void
DrawableRegion_C_set_clear_stencil_active_v_pB(DrawableRegion *param0, bool param1) {
    ((*param0).set_clear_stencil_active)(param1);
}


bool
DrawableRegion_C_get_clear_stencil_active_B_p(DrawableRegion const *param0) {
    return ((*param0).get_clear_stencil_active)();
}


void
DrawableRegion_C_set_clear_color_v_pp(DrawableRegion *param0, LColor const *param1) {
    ((*param0).set_clear_color)(*param1);
}


LColor const *
DrawableRegion_C_get_clear_color_p_p(DrawableRegion const *param0) {
    return &(((*param0).get_clear_color)());
}


void
DrawableRegion_C_set_clear_depth_v_pf(DrawableRegion *param0, PN_stdfloat param1) {
    ((*param0).set_clear_depth)(param1);
}


PN_stdfloat
DrawableRegion_C_get_clear_depth_f_p(DrawableRegion const *param0) {
    return ((*param0).get_clear_depth)();
}


void
DrawableRegion_C_set_clear_stencil_v_pI(DrawableRegion *param0, unsigned int param1) {
    ((*param0).set_clear_stencil)(param1);
}


unsigned int
DrawableRegion_C_get_clear_stencil_I_p(DrawableRegion const *param0) {
    return ((*param0).get_clear_stencil)();
}


void
DrawableRegion_C_set_clear_active_v_piB(DrawableRegion *param0, int param1, bool param2) {
    ((*param0).set_clear_active)(param1, param2);
}


bool
DrawableRegion_C_get_clear_active_B_pi(DrawableRegion const *param0, int param1) {
    return ((*param0).get_clear_active)(param1);
}


void
DrawableRegion_C_set_clear_value_v_pip(DrawableRegion *param0, int param1, LColor const *param2) {
    ((*param0).set_clear_value)(param1, *param2);
}


LColor const *
DrawableRegion_C_get_clear_value_p_pi(DrawableRegion const *param0, int param1) {
    return &(((*param0).get_clear_value)(param1));
}


void
DrawableRegion_C_disable_clears_v_p(DrawableRegion *param0) {
    ((*param0).disable_clears)();
}


bool
DrawableRegion_C_is_any_clear_active_B_p(DrawableRegion const *param0) {
    return ((*param0).is_any_clear_active)();
}


void
DrawableRegion_C_set_pixel_zoom_v_pf(DrawableRegion *param0, PN_stdfloat param1) {
    ((*param0).set_pixel_zoom)(param1);
}


PN_stdfloat
DrawableRegion_C_get_pixel_zoom_f_p(DrawableRegion const *param0) {
    return ((*param0).get_pixel_zoom)();
}


PN_stdfloat
DrawableRegion_C_get_pixel_factor_f_p(DrawableRegion const *param0) {
    return ((*param0).get_pixel_factor)();
}


bool
DrawableRegion_C_supports_pixel_zoom_B_p(DrawableRegion const *param0) {
    return ((*param0).supports_pixel_zoom)();
}


int
DrawableRegion_C_get_renderbuffer_type_i_i(int param0) {
    return (DrawableRegion::get_renderbuffer_type)(param0);
}


int
DrawableRegion_C_get_screenshot_buffer_type_i_p(DrawableRegion const *param0) {
    return ((*param0).get_screenshot_buffer_type)();
}


int
DrawableRegion_C_get_draw_buffer_type_i_p(DrawableRegion const *param0) {
    return ((*param0).get_draw_buffer_type)();
}


DisplayRegion *
DrawableRegion_C_downcast_to_DisplayRegion_p_p(DrawableRegion *param0) {
    return (DisplayRegion *)param0;
}


GraphicsOutput *
DrawableRegion_C_downcast_to_GraphicsOutput_p_p(DrawableRegion *param0) {
    return (GraphicsOutput *)param0;
}


// Engine


Engine *
Engine_C_ctor_p_v() {
    return new Engine();
}


Engine *
Engine_C_ctor_p_p(Engine const *param0) {
    return new Engine(*param0);
}


void
Engine_C_dtor_v_p(Engine *param0) {
    ((*param0).dtor)();
}


void
Engine_C_stop_v_v() {
    (Engine::stop)();
}


int
Engine_C_is_alive_i_v() {
    return (Engine::is_alive)();
}


int
Engine_C_HelloEngine_i_p(Engine *param0) {
    return ((*param0).HelloEngine)();
}


int
Engine_C_casetest_i_pisB(Engine *param0, int param1, char const *param2, bool param3) {
    return ((*param0).casetest)(param1, std::string(param2), param3);
}


NodePath *
Engine_C_load_model_p_ps(Engine *param0, char const *param1) {
    return ((*param0).load_model)(param1);
}


GeomVertexWriter *
Engine_C_new_GeomVertexWriter_p_pps(Engine *param0, GeomVertexData *param1, char const *param2) {
    return ((*param0).new_GeomVertexWriter)(param1, param2);
}


void
Engine_C_add_primitive_v_ppp(Engine *param0, Geom *param1, GeomTriangles *param2) {
    ((*param0).add_primitive)(param1, param2);
}


void
Engine_C_close_primitive_v_pp(Engine *param0, GeomTriangles *param1) {
    ((*param0).close_primitive)(param1);
}


PointerTo< GeomTriangles > *
Engine_C_new_GeomTriangles_p_p(Engine *param0) {
    return new PointerTo< GeomTriangles >(((*param0).new_GeomTriangles)());
}


NodePath *
Engine_C_new_Cube_p_pfss(Engine *param0, float param1, char const *param2, char const *param3) {
    return ((*param0).new_Cube)(param1, param2, param3);
}


void
Engine_C_attach_v_pp(Engine *param0, NodePath *param1) {
    ((*param0).attach)(param1);
}


int
Engine_C_inc_ref_i_p(ReferenceCount *param0) {
    return (Engine::inc_ref)(param0);
}


int
Engine_C_dec_ref_i_p(ReferenceCount *param0) {
    return (Engine::dec_ref)(param0);
}


void
Engine_C_prc_v_p(Filename const *param0) {
    (Engine::prc)(*param0);
}


void
Engine_C_prc_v_ss(char const *param0, char const *param1) {
    (Engine::prc)(param0, param1);
}


void
Engine_C_build_v_p(Engine *param0) {
    ((*param0).build)();
}


void
Engine_C_step_v_p(Engine *param0) {
    ((*param0).step)();
}


char const *
Engine_C_get_version_string_s_v() {
    static std::string string_holder = (Engine::get_version_string)();
    return string_holder.c_str();
}


WindowFramework *
Engine_C_get_wframe_p_p(Engine const *param0) {
    return (param0)->wframe;
}


void
Engine_C_set_wframe_v_pp(Engine *param0, WindowFramework *param1) {
    (param0)->wframe = param1;
}


PandaFramework *
Engine_C_get_framework_p_p(Engine const *param0) {
    return (param0)->framework;
}


void
Engine_C_set_framework_v_pp(Engine *param0, PandaFramework *param1) {
    (param0)->framework = param1;
}


// EventHandler


EventHandler *
EventHandler_C_ctor_p_p(EventQueue *param0) {
    return new EventHandler(param0);
}


AsyncFuture *
EventHandler_C_get_future_p_ps(EventHandler *param0, char const *param1) {
    return ((*param0).get_future)(std::string(param1));
}


void
EventHandler_C_process_events_v_p(EventHandler *param0) {
    ((*param0).process_events)();
}


void
EventHandler_C_dispatch_event_v_pp(EventHandler *param0, Event const *param1) {
    ((*param0).dispatch_event)(param1);
}


void
EventHandler_C_write_v_pp(EventHandler const *param0, std::ostream *param1) {
    ((*param0).write)(*param1);
}


EventHandler *
EventHandler_C_get_global_event_handler_p_p(EventQueue *param0) {
    return (EventHandler::get_global_event_handler)(param0);
}


EventHandler *
EventHandler_C_get_global_event_handler_p_v() {
    return (EventHandler::get_global_event_handler)();
}


bool
EventHandler_C_has_hook_B_ps(EventHandler const *param0, char const *param1) {
    return ((*param0).has_hook)(std::string(param1));
}


bool
EventHandler_C_remove_hooks_B_ps(EventHandler *param0, char const *param1) {
    return ((*param0).remove_hooks)(std::string(param1));
}


void
EventHandler_C_remove_all_hooks_v_p(EventHandler *param0) {
    ((*param0).remove_all_hooks)();
}


int
EventHandler_C_get_class_type_i_v() {
    return ((EventHandler::get_class_type)()).get_index();
}


void
EventHandler_C_init_type_v_v() {
    (EventHandler::init_type)();
}


int
EventHandler_C_force_init_type_i_p(EventHandler *param0) {
    return (((*param0).force_init_type)()).get_index();
}


// Filename


Filename *
Filename_C_ctor_p_v() {
    return new Filename();
}


Filename *
Filename_C_ctor_p_p(Filename *param0) {
    return new Filename(*param0);
}


Filename *
Filename_C_ctor_p_p_1_p_p(Filename const *param0) {
    return new Filename(*param0);
}


Filename *
Filename_C_ctor_p_pp(Filename const *param0, Filename const *param1) {
    return new Filename(*param0, *param1);
}


Filename *
Filename_C_ctor_p_s(char const *param0) {
    return new Filename(param0);
}


Filename *
Filename_C_ctor_p_s_1_p_s(char const *param0) {
    return new Filename(std::string(param0));
}


Filename *
Filename_C_ctor_p_s_1_p_s_2_p_s(wchar_t const *param0) {
    return new Filename(std::wstring(param0));
}


Filename *
Filename_C_text_filename_p_p(Filename const *param0) {
    return new Filename((Filename::text_filename)(*param0));
}


Filename *
Filename_C_text_filename_p_s(char const *param0) {
    return new Filename((Filename::text_filename)(std::string(param0)));
}


Filename *
Filename_C_binary_filename_p_p(Filename const *param0) {
    return new Filename((Filename::binary_filename)(*param0));
}


Filename *
Filename_C_binary_filename_p_s(char const *param0) {
    return new Filename((Filename::binary_filename)(std::string(param0)));
}


Filename *
Filename_C_dso_filename_p_s(char const *param0) {
    return new Filename((Filename::dso_filename)(std::string(param0)));
}


Filename *
Filename_C_executable_filename_p_s(char const *param0) {
    return new Filename((Filename::executable_filename)(std::string(param0)));
}


Filename *
Filename_C_pattern_filename_p_s(char const *param0) {
    return new Filename((Filename::pattern_filename)(std::string(param0)));
}


Filename *
Filename_C_from_os_specific_p_sp(char const *param0, Filename::Type param1) {
    return new Filename((Filename::from_os_specific)(std::string(param0), param1));
}


Filename *
Filename_C_from_os_specific_p_s(char const *param0) {
    return new Filename((Filename::from_os_specific)(std::string(param0)));
}


Filename *
Filename_C_from_os_specific_w_p_sp(wchar_t const *param0, Filename::Type param1) {
    return new Filename((Filename::from_os_specific_w)(std::wstring(param0), param1));
}


Filename *
Filename_C_from_os_specific_w_p_s(wchar_t const *param0) {
    return new Filename((Filename::from_os_specific_w)(std::wstring(param0)));
}


Filename *
Filename_C_expand_from_p_sp(char const *param0, Filename::Type param1) {
    return new Filename((Filename::expand_from)(std::string(param0), param1));
}


Filename *
Filename_C_expand_from_p_s(char const *param0) {
    return new Filename((Filename::expand_from)(std::string(param0)));
}


Filename *
Filename_C_temporary_p_sssp(char const *param0, char const *param1, char const *param2, Filename::Type param3) {
    return new Filename((Filename::temporary)(std::string(param0), std::string(param1), std::string(param2), param3));
}


Filename *
Filename_C_temporary_p_sss(char const *param0, char const *param1, char const *param2) {
    return new Filename((Filename::temporary)(std::string(param0), std::string(param1), std::string(param2)));
}


Filename *
Filename_C_temporary_p_ss(char const *param0, char const *param1) {
    return new Filename((Filename::temporary)(std::string(param0), std::string(param1)));
}


Filename const *
Filename_C_get_home_directory_p_v() {
    return &((Filename::get_home_directory)());
}


Filename const *
Filename_C_get_temp_directory_p_v() {
    return &((Filename::get_temp_directory)());
}


Filename const *
Filename_C_get_user_appdata_directory_p_v() {
    return &((Filename::get_user_appdata_directory)());
}


Filename const *
Filename_C_get_common_appdata_directory_p_v() {
    return &((Filename::get_common_appdata_directory)());
}


char const *
Filename_C_c_str_s_p(Filename const *param0) {
    return ((*param0).c_str)();
}


bool
Filename_C_empty_B_p(Filename const *param0) {
    return ((*param0).empty)();
}


std::size_t
Filename_C_length_l_p(Filename const *param0) {
    return ((*param0).length)();
}


char const *
Filename_C_substr_s_pl(Filename const *param0, std::size_t param1) {
    static std::string string_holder = ((*param0).substr)(param1);
    return string_holder.c_str();
}


char const *
Filename_C_substr_s_pll(Filename const *param0, std::size_t param1, std::size_t param2) {
    static std::string string_holder = ((*param0).substr)(param1, param2);
    return string_holder.c_str();
}


char const *
Filename_C_get_fullpath_s_p(Filename const *param0) {
    static std::string string_holder = ((*param0).get_fullpath)();
    return string_holder.c_str();
}


wchar_t const *
Filename_C_get_fullpath_w_s_p(Filename const *param0) {
    static std::wstring string_holder = ((*param0).get_fullpath_w)();
    return string_holder.c_str();
}


char const *
Filename_C_get_dirname_s_p(Filename const *param0) {
    static std::string string_holder = ((*param0).get_dirname)();
    return string_holder.c_str();
}


char const *
Filename_C_get_basename_s_p(Filename const *param0) {
    static std::string string_holder = ((*param0).get_basename)();
    return string_holder.c_str();
}


char const *
Filename_C_get_fullpath_wo_extension_s_p(Filename const *param0) {
    static std::string string_holder = ((*param0).get_fullpath_wo_extension)();
    return string_holder.c_str();
}


char const *
Filename_C_get_basename_wo_extension_s_p(Filename const *param0) {
    static std::string string_holder = ((*param0).get_basename_wo_extension)();
    return string_holder.c_str();
}


char const *
Filename_C_get_extension_s_p(Filename const *param0) {
    static std::string string_holder = ((*param0).get_extension)();
    return string_holder.c_str();
}


void
Filename_C_set_fullpath_v_ps(Filename *param0, char const *param1) {
    ((*param0).set_fullpath)(std::string(param1));
}


void
Filename_C_set_dirname_v_ps(Filename *param0, char const *param1) {
    ((*param0).set_dirname)(std::string(param1));
}


void
Filename_C_set_basename_v_ps(Filename *param0, char const *param1) {
    ((*param0).set_basename)(std::string(param1));
}


void
Filename_C_set_fullpath_wo_extension_v_ps(Filename *param0, char const *param1) {
    ((*param0).set_fullpath_wo_extension)(std::string(param1));
}


void
Filename_C_set_basename_wo_extension_v_ps(Filename *param0, char const *param1) {
    ((*param0).set_basename_wo_extension)(std::string(param1));
}


void
Filename_C_set_extension_v_ps(Filename *param0, char const *param1) {
    ((*param0).set_extension)(std::string(param1));
}


void
Filename_C_set_binary_v_p(Filename *param0) {
    ((*param0).set_binary)();
}


void
Filename_C_set_text_v_p(Filename *param0) {
    ((*param0).set_text)();
}


bool
Filename_C_is_binary_B_p(Filename const *param0) {
    return ((*param0).is_binary)();
}


bool
Filename_C_is_text_B_p(Filename const *param0) {
    return ((*param0).is_text)();
}


bool
Filename_C_is_binary_or_text_B_p(Filename const *param0) {
    return ((*param0).is_binary_or_text)();
}


void
Filename_C_set_type_v_pp(Filename *param0, Filename::Type param1) {
    ((*param0).set_type)(param1);
}


Filename::Type
Filename_C_get_type_p_p(Filename const *param0) {
    return ((*param0).get_type)();
}


void
Filename_C_set_pattern_v_pB(Filename *param0, bool param1) {
    ((*param0).set_pattern)(param1);
}


bool
Filename_C_get_pattern_B_p(Filename const *param0) {
    return ((*param0).get_pattern)();
}


bool
Filename_C_has_hash_B_p(Filename const *param0) {
    return ((*param0).has_hash)();
}


Filename *
Filename_C_get_filename_index_p_pi(Filename const *param0, int param1) {
    return new Filename(((*param0).get_filename_index)(param1));
}


char const *
Filename_C_get_hash_to_end_s_p(Filename const *param0) {
    static std::string string_holder = ((*param0).get_hash_to_end)();
    return string_holder.c_str();
}


void
Filename_C_set_hash_to_end_v_ps(Filename *param0, char const *param1) {
    ((*param0).set_hash_to_end)(std::string(param1));
}


void
Filename_C_extract_components_v_pp(Filename const *param0, vector_string *param1) {
    ((*param0).extract_components)(*param1);
}


void
Filename_C_standardize_v_p(Filename *param0) {
    ((*param0).standardize)();
}


bool
Filename_C_is_local_B_p(Filename const *param0) {
    return ((*param0).is_local)();
}


bool
Filename_C_is_fully_qualified_B_p(Filename const *param0) {
    return ((*param0).is_fully_qualified)();
}


void
Filename_C_make_absolute_v_p(Filename *param0) {
    ((*param0).make_absolute)();
}


void
Filename_C_make_absolute_v_pp(Filename *param0, Filename const *param1) {
    ((*param0).make_absolute)(*param1);
}


bool
Filename_C_make_canonical_B_p(Filename *param0) {
    return ((*param0).make_canonical)();
}


bool
Filename_C_make_true_case_B_p(Filename *param0) {
    return ((*param0).make_true_case)();
}


char const *
Filename_C_to_os_specific_s_p(Filename const *param0) {
    static std::string string_holder = ((*param0).to_os_specific)();
    return string_holder.c_str();
}


wchar_t const *
Filename_C_to_os_specific_w_s_p(Filename const *param0) {
    static std::wstring string_holder = ((*param0).to_os_specific_w)();
    return string_holder.c_str();
}


char const *
Filename_C_to_os_generic_s_p(Filename const *param0) {
    static std::string string_holder = ((*param0).to_os_generic)();
    return string_holder.c_str();
}


char const *
Filename_C_to_os_short_name_s_p(Filename const *param0) {
    static std::string string_holder = ((*param0).to_os_short_name)();
    return string_holder.c_str();
}


char const *
Filename_C_to_os_long_name_s_p(Filename const *param0) {
    static std::string string_holder = ((*param0).to_os_long_name)();
    return string_holder.c_str();
}


bool
Filename_C_exists_B_p(Filename const *param0) {
    return ((*param0).exists)();
}


bool
Filename_C_is_regular_file_B_p(Filename const *param0) {
    return ((*param0).is_regular_file)();
}


bool
Filename_C_is_writable_B_p(Filename const *param0) {
    return ((*param0).is_writable)();
}


bool
Filename_C_is_directory_B_p(Filename const *param0) {
    return ((*param0).is_directory)();
}


bool
Filename_C_is_executable_B_p(Filename const *param0) {
    return ((*param0).is_executable)();
}


int
Filename_C_compare_timestamps_i_ppBB(Filename const *param0, Filename const *param1, bool param2, bool param3) {
    return ((*param0).compare_timestamps)(*param1, param2, param3);
}


int
Filename_C_compare_timestamps_i_ppB(Filename const *param0, Filename const *param1, bool param2) {
    return ((*param0).compare_timestamps)(*param1, param2);
}


int
Filename_C_compare_timestamps_i_pp(Filename const *param0, Filename const *param1) {
    return ((*param0).compare_timestamps)(*param1);
}


time_t
Filename_C_get_timestamp_p_p(Filename const *param0) {
    return ((*param0).get_timestamp)();
}


time_t
Filename_C_get_access_timestamp_p_p(Filename const *param0) {
    return ((*param0).get_access_timestamp)();
}


std::streamsize
Filename_C_get_file_size_l_p(Filename const *param0) {
    return ((*param0).get_file_size)();
}


bool
Filename_C_resolve_filename_B_pps(Filename *param0, DSearchPath const *param1, char const *param2) {
    return ((*param0).resolve_filename)(*param1, std::string(param2));
}


bool
Filename_C_resolve_filename_B_pp(Filename *param0, DSearchPath const *param1) {
    return ((*param0).resolve_filename)(*param1);
}


bool
Filename_C_make_relative_to_B_ppB(Filename *param0, Filename *param1, bool param2) {
    return ((*param0).make_relative_to)(*param1, param2);
}


bool
Filename_C_make_relative_to_B_pp(Filename *param0, Filename *param1) {
    return ((*param0).make_relative_to)(*param1);
}


int
Filename_C_find_on_searchpath_i_pp(Filename *param0, DSearchPath const *param1) {
    return ((*param0).find_on_searchpath)(*param1);
}


bool
Filename_C_scan_directory_B_pp(Filename const *param0, vector_string *param1) {
    return ((*param0).scan_directory)(*param1);
}


bool
Filename_C_open_read_B_pp(Filename const *param0, pifstream *param1) {
    return ((*param0).open_read)(*param1);
}


bool
Filename_C_open_read_B_pp_1_B_pp(Filename const *param0, std::ifstream *param1) {
    return ((*param0).open_read)(*param1);
}


bool
Filename_C_open_write_B_ppB(Filename const *param0, pofstream *param1, bool param2) {
    return ((*param0).open_write)(*param1, param2);
}


bool
Filename_C_open_write_B_pp(Filename const *param0, pofstream *param1) {
    return ((*param0).open_write)(*param1);
}


bool
Filename_C_open_write_B_ppB_1_B_ppB(Filename const *param0, std::ofstream *param1, bool param2) {
    return ((*param0).open_write)(*param1, param2);
}


bool
Filename_C_open_write_B_pp_1_B_pp(Filename const *param0, std::ofstream *param1) {
    return ((*param0).open_write)(*param1);
}


bool
Filename_C_open_append_B_pp(Filename const *param0, pofstream *param1) {
    return ((*param0).open_append)(*param1);
}


bool
Filename_C_open_append_B_pp_1_B_pp(Filename const *param0, std::ofstream *param1) {
    return ((*param0).open_append)(*param1);
}


bool
Filename_C_open_read_write_B_ppB(Filename const *param0, pfstream *param1, bool param2) {
    return ((*param0).open_read_write)(*param1, param2);
}


bool
Filename_C_open_read_write_B_pp(Filename const *param0, pfstream *param1) {
    return ((*param0).open_read_write)(*param1);
}


bool
Filename_C_open_read_write_B_ppB_1_B_ppB(Filename const *param0, std::fstream *param1, bool param2) {
    return ((*param0).open_read_write)(*param1, param2);
}


bool
Filename_C_open_read_write_B_pp_1_B_pp(Filename const *param0, std::fstream *param1) {
    return ((*param0).open_read_write)(*param1);
}


bool
Filename_C_open_read_append_B_pp(Filename const *param0, pfstream *param1) {
    return ((*param0).open_read_append)(*param1);
}


bool
Filename_C_open_read_append_B_pp_1_B_pp(Filename const *param0, std::fstream *param1) {
    return ((*param0).open_read_append)(*param1);
}


bool
Filename_C_chdir_B_p(Filename const *param0) {
    return ((*param0).chdir)();
}


bool
Filename_C_touch_B_p(Filename const *param0) {
    return ((*param0).touch)();
}


bool
Filename_C_unlink_B_p(Filename const *param0) {
    return ((*param0).unlink)();
}


bool
Filename_C_rename_to_B_pp(Filename const *param0, Filename const *param1) {
    return ((*param0).rename_to)(*param1);
}


bool
Filename_C_copy_to_B_pp(Filename const *param0, Filename const *param1) {
    return ((*param0).copy_to)(*param1);
}


bool
Filename_C_make_dir_B_p(Filename const *param0) {
    return ((*param0).make_dir)();
}


bool
Filename_C_mkdir_B_p(Filename const *param0) {
    return ((*param0).mkdir)();
}


bool
Filename_C_rmdir_B_p(Filename const *param0) {
    return ((*param0).rmdir)();
}


int
Filename_C_compare_to_i_pp(Filename const *param0, Filename const *param1) {
    return ((*param0).compare_to)(*param1);
}


bool
Filename_C___nonzero___B_p(Filename const *param0) {
    return ((*param0).__nonzero__)();
}


int
Filename_C_get_hash_i_p(Filename const *param0) {
    return ((*param0).get_hash)();
}


void
Filename_C_output_v_pp(Filename const *param0, std::ostream *param1) {
    ((*param0).output)(*param1);
}


void
Filename_C_set_filesystem_encoding_v_p(TextEncoder::Encoding param0) {
    (Filename::set_filesystem_encoding)(param0);
}


TextEncoder::Encoding
Filename_C_get_filesystem_encoding_p_v() {
    return (Filename::get_filesystem_encoding)();
}


int
Filename_C_get_class_type_i_v() {
    return ((Filename::get_class_type)()).get_index();
}


void
Filename_C_init_type_v_v() {
    (Filename::init_type)();
}


// Fog


Fog *
Fog_C_ctor_p_s(char const *param0) {
    return new Fog(std::string(param0));
}


void
Fog_C_xform_v_pp(Fog *param0, LMatrix4 const *param1) {
    ((*param0).xform)(*param1);
}


Fog::Mode
Fog_C_get_mode_p_p(Fog const *param0) {
    return ((*param0).get_mode)();
}


void
Fog_C_set_mode_v_pp(Fog *param0, Fog::Mode param1) {
    ((*param0).set_mode)(param1);
}


LColor const *
Fog_C_get_color_p_p(Fog const *param0) {
    return &(((*param0).get_color)());
}


void
Fog_C_set_color_v_pp(Fog *param0, LColor const *param1) {
    ((*param0).set_color)(*param1);
}


void
Fog_C_set_color_v_pfff(Fog *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3) {
    ((*param0).set_color)(param1, param2, param3);
}


void
Fog_C_set_linear_range_v_pff(Fog *param0, PN_stdfloat param1, PN_stdfloat param2) {
    ((*param0).set_linear_range)(param1, param2);
}


LPoint3 const *
Fog_C_get_linear_onset_point_p_p(Fog const *param0) {
    return &(((*param0).get_linear_onset_point)());
}


void
Fog_C_set_linear_onset_point_v_pp(Fog *param0, LPoint3 const *param1) {
    ((*param0).set_linear_onset_point)(*param1);
}


void
Fog_C_set_linear_onset_point_v_pfff(Fog *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3) {
    ((*param0).set_linear_onset_point)(param1, param2, param3);
}


LPoint3 const *
Fog_C_get_linear_opaque_point_p_p(Fog const *param0) {
    return &(((*param0).get_linear_opaque_point)());
}


void
Fog_C_set_linear_opaque_point_v_pp(Fog *param0, LPoint3 const *param1) {
    ((*param0).set_linear_opaque_point)(*param1);
}


void
Fog_C_set_linear_opaque_point_v_pfff(Fog *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3) {
    ((*param0).set_linear_opaque_point)(param1, param2, param3);
}


void
Fog_C_set_linear_fallback_v_pfff(Fog *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3) {
    ((*param0).set_linear_fallback)(param1, param2, param3);
}


PN_stdfloat
Fog_C_get_exp_density_f_p(Fog const *param0) {
    return ((*param0).get_exp_density)();
}


void
Fog_C_set_exp_density_v_pf(Fog *param0, PN_stdfloat param1) {
    ((*param0).set_exp_density)(param1);
}


void
Fog_C_adjust_to_camera_v_pp(Fog *param0, TransformState const *param1) {
    ((*param0).adjust_to_camera)(param1);
}


void
Fog_C_register_with_read_factory_v_v() {
    (Fog::register_with_read_factory)();
}


void
Fog_C_write_datagram_v_ppp(Fog *param0, BamWriter *param1, Datagram *param2) {
    ((*param0).write_datagram)(param1, *param2);
}


int
Fog_C_get_class_type_i_v() {
    return ((Fog::get_class_type)()).get_index();
}


void
Fog_C_init_type_v_v() {
    (Fog::init_type)();
}


int
Fog_C_get_type_i_p(Fog const *param0) {
    return (((*param0).get_type)()).get_index();
}


int
Fog_C_force_init_type_i_p(Fog *param0) {
    return (((*param0).force_init_type)()).get_index();
}


// FrameBufferProperties


int
FrameBufferProperties_C_get_depth_bits_i_p(FrameBufferProperties const *param0) {
    return ((*param0).get_depth_bits)();
}


int
FrameBufferProperties_C_get_color_bits_i_p(FrameBufferProperties const *param0) {
    return ((*param0).get_color_bits)();
}


int
FrameBufferProperties_C_get_red_bits_i_p(FrameBufferProperties const *param0) {
    return ((*param0).get_red_bits)();
}


int
FrameBufferProperties_C_get_green_bits_i_p(FrameBufferProperties const *param0) {
    return ((*param0).get_green_bits)();
}


int
FrameBufferProperties_C_get_blue_bits_i_p(FrameBufferProperties const *param0) {
    return ((*param0).get_blue_bits)();
}


int
FrameBufferProperties_C_get_alpha_bits_i_p(FrameBufferProperties const *param0) {
    return ((*param0).get_alpha_bits)();
}


int
FrameBufferProperties_C_get_stencil_bits_i_p(FrameBufferProperties const *param0) {
    return ((*param0).get_stencil_bits)();
}


int
FrameBufferProperties_C_get_accum_bits_i_p(FrameBufferProperties const *param0) {
    return ((*param0).get_accum_bits)();
}


int
FrameBufferProperties_C_get_aux_rgba_i_p(FrameBufferProperties const *param0) {
    return ((*param0).get_aux_rgba)();
}


int
FrameBufferProperties_C_get_aux_hrgba_i_p(FrameBufferProperties const *param0) {
    return ((*param0).get_aux_hrgba)();
}


int
FrameBufferProperties_C_get_aux_float_i_p(FrameBufferProperties const *param0) {
    return ((*param0).get_aux_float)();
}


int
FrameBufferProperties_C_get_multisamples_i_p(FrameBufferProperties const *param0) {
    return ((*param0).get_multisamples)();
}


int
FrameBufferProperties_C_get_coverage_samples_i_p(FrameBufferProperties const *param0) {
    return ((*param0).get_coverage_samples)();
}


int
FrameBufferProperties_C_get_back_buffers_i_p(FrameBufferProperties const *param0) {
    return ((*param0).get_back_buffers)();
}


bool
FrameBufferProperties_C_get_indexed_color_B_p(FrameBufferProperties const *param0) {
    return ((*param0).get_indexed_color)();
}


bool
FrameBufferProperties_C_get_rgb_color_B_p(FrameBufferProperties const *param0) {
    return ((*param0).get_rgb_color)();
}


bool
FrameBufferProperties_C_get_stereo_B_p(FrameBufferProperties const *param0) {
    return ((*param0).get_stereo)();
}


bool
FrameBufferProperties_C_get_force_hardware_B_p(FrameBufferProperties const *param0) {
    return ((*param0).get_force_hardware)();
}


bool
FrameBufferProperties_C_get_force_software_B_p(FrameBufferProperties const *param0) {
    return ((*param0).get_force_software)();
}


bool
FrameBufferProperties_C_get_srgb_color_B_p(FrameBufferProperties const *param0) {
    return ((*param0).get_srgb_color)();
}


bool
FrameBufferProperties_C_get_float_color_B_p(FrameBufferProperties const *param0) {
    return ((*param0).get_float_color)();
}


bool
FrameBufferProperties_C_get_float_depth_B_p(FrameBufferProperties const *param0) {
    return ((*param0).get_float_depth)();
}


void
FrameBufferProperties_C_set_depth_bits_v_pi(FrameBufferProperties *param0, int param1) {
    ((*param0).set_depth_bits)(param1);
}


void
FrameBufferProperties_C_set_color_bits_v_pi(FrameBufferProperties *param0, int param1) {
    ((*param0).set_color_bits)(param1);
}


void
FrameBufferProperties_C_set_rgba_bits_v_piiii(FrameBufferProperties *param0, int param1, int param2, int param3, int param4) {
    ((*param0).set_rgba_bits)(param1, param2, param3, param4);
}


void
FrameBufferProperties_C_set_red_bits_v_pi(FrameBufferProperties *param0, int param1) {
    ((*param0).set_red_bits)(param1);
}


void
FrameBufferProperties_C_set_green_bits_v_pi(FrameBufferProperties *param0, int param1) {
    ((*param0).set_green_bits)(param1);
}


void
FrameBufferProperties_C_set_blue_bits_v_pi(FrameBufferProperties *param0, int param1) {
    ((*param0).set_blue_bits)(param1);
}


void
FrameBufferProperties_C_set_alpha_bits_v_pi(FrameBufferProperties *param0, int param1) {
    ((*param0).set_alpha_bits)(param1);
}


void
FrameBufferProperties_C_set_stencil_bits_v_pi(FrameBufferProperties *param0, int param1) {
    ((*param0).set_stencil_bits)(param1);
}


void
FrameBufferProperties_C_set_accum_bits_v_pi(FrameBufferProperties *param0, int param1) {
    ((*param0).set_accum_bits)(param1);
}


void
FrameBufferProperties_C_set_aux_rgba_v_pi(FrameBufferProperties *param0, int param1) {
    ((*param0).set_aux_rgba)(param1);
}


void
FrameBufferProperties_C_set_aux_hrgba_v_pi(FrameBufferProperties *param0, int param1) {
    ((*param0).set_aux_hrgba)(param1);
}


void
FrameBufferProperties_C_set_aux_float_v_pi(FrameBufferProperties *param0, int param1) {
    ((*param0).set_aux_float)(param1);
}


void
FrameBufferProperties_C_set_multisamples_v_pi(FrameBufferProperties *param0, int param1) {
    ((*param0).set_multisamples)(param1);
}


void
FrameBufferProperties_C_set_coverage_samples_v_pi(FrameBufferProperties *param0, int param1) {
    ((*param0).set_coverage_samples)(param1);
}


void
FrameBufferProperties_C_set_back_buffers_v_pi(FrameBufferProperties *param0, int param1) {
    ((*param0).set_back_buffers)(param1);
}


void
FrameBufferProperties_C_set_indexed_color_v_pB(FrameBufferProperties *param0, bool param1) {
    ((*param0).set_indexed_color)(param1);
}


void
FrameBufferProperties_C_set_rgb_color_v_pB(FrameBufferProperties *param0, bool param1) {
    ((*param0).set_rgb_color)(param1);
}


void
FrameBufferProperties_C_set_stereo_v_pB(FrameBufferProperties *param0, bool param1) {
    ((*param0).set_stereo)(param1);
}


void
FrameBufferProperties_C_set_force_hardware_v_pB(FrameBufferProperties *param0, bool param1) {
    ((*param0).set_force_hardware)(param1);
}


void
FrameBufferProperties_C_set_force_software_v_pB(FrameBufferProperties *param0, bool param1) {
    ((*param0).set_force_software)(param1);
}


void
FrameBufferProperties_C_set_srgb_color_v_pB(FrameBufferProperties *param0, bool param1) {
    ((*param0).set_srgb_color)(param1);
}


void
FrameBufferProperties_C_set_float_color_v_pB(FrameBufferProperties *param0, bool param1) {
    ((*param0).set_float_color)(param1);
}


void
FrameBufferProperties_C_set_float_depth_v_pB(FrameBufferProperties *param0, bool param1) {
    ((*param0).set_float_depth)(param1);
}


FrameBufferProperties *
FrameBufferProperties_C_ctor_p_v() {
    return new FrameBufferProperties();
}


FrameBufferProperties *
FrameBufferProperties_C_ctor_p_p(FrameBufferProperties const *param0) {
    return new FrameBufferProperties(*param0);
}


FrameBufferProperties const *
FrameBufferProperties_C_get_default_p_v() {
    return &((FrameBufferProperties::get_default)());
}


void
FrameBufferProperties_C_clear_v_p(FrameBufferProperties *param0) {
    ((*param0).clear)();
}


void
FrameBufferProperties_C_set_all_specified_v_p(FrameBufferProperties *param0) {
    ((*param0).set_all_specified)();
}


bool
FrameBufferProperties_C_subsumes_B_pp(FrameBufferProperties const *param0, FrameBufferProperties const *param1) {
    return ((*param0).subsumes)(*param1);
}


void
FrameBufferProperties_C_add_properties_v_pp(FrameBufferProperties *param0, FrameBufferProperties const *param1) {
    ((*param0).add_properties)(*param1);
}


void
FrameBufferProperties_C_output_v_pp(FrameBufferProperties const *param0, std::ostream *param1) {
    ((*param0).output)(*param1);
}


void
FrameBufferProperties_C_set_one_bit_per_channel_v_p(FrameBufferProperties *param0) {
    ((*param0).set_one_bit_per_channel)();
}


bool
FrameBufferProperties_C_is_stereo_B_p(FrameBufferProperties const *param0) {
    return ((*param0).is_stereo)();
}


bool
FrameBufferProperties_C_is_single_buffered_B_p(FrameBufferProperties const *param0) {
    return ((*param0).is_single_buffered)();
}


int
FrameBufferProperties_C_get_quality_i_pp(FrameBufferProperties const *param0, FrameBufferProperties const *param1) {
    return ((*param0).get_quality)(*param1);
}


bool
FrameBufferProperties_C_is_any_specified_B_p(FrameBufferProperties const *param0) {
    return ((*param0).is_any_specified)();
}


bool
FrameBufferProperties_C_is_basic_B_p(FrameBufferProperties const *param0) {
    return ((*param0).is_basic)();
}


int
FrameBufferProperties_C_get_aux_mask_i_p(FrameBufferProperties const *param0) {
    return ((*param0).get_aux_mask)();
}


int
FrameBufferProperties_C_get_buffer_mask_i_p(FrameBufferProperties const *param0) {
    return ((*param0).get_buffer_mask)();
}


bool
FrameBufferProperties_C_verify_hardware_software_B_pps(FrameBufferProperties const *param0, FrameBufferProperties const *param1, char const *param2) {
    return ((*param0).verify_hardware_software)(*param1, std::string(param2));
}


bool
FrameBufferProperties_C_setup_color_texture_B_pp(FrameBufferProperties const *param0, Texture *param1) {
    return ((*param0).setup_color_texture)(param1);
}


bool
FrameBufferProperties_C_setup_depth_texture_B_pp(FrameBufferProperties const *param0, Texture *param1) {
    return ((*param0).setup_depth_texture)(param1);
}


// Geom


CopyOnWriteObject *
Geom_C_upcast_to_CopyOnWriteObject_p_p(Geom *param0) {
    return (CopyOnWriteObject *)param0;
}


GeomEnums *
Geom_C_upcast_to_GeomEnums_p_p(Geom *param0) {
    return (GeomEnums *)param0;
}


Geom *
Geom_C_ctor_p_p(GeomVertexData const *param0) {
    return new Geom(param0);
}


Geom *
Geom_C_make_copy_p_p(Geom const *param0) {
    return ((*param0).make_copy)();
}


GeomEnums::PrimitiveType
Geom_C_get_primitive_type_p_p(Geom const *param0) {
    return ((*param0).get_primitive_type)();
}


GeomEnums::ShadeModel
Geom_C_get_shade_model_p_p(Geom const *param0) {
    return ((*param0).get_shade_model)();
}


int
Geom_C_get_geom_rendering_i_p(Geom const *param0) {
    return ((*param0).get_geom_rendering)();
}


GeomEnums::UsageHint
Geom_C_get_usage_hint_p_p(Geom const *param0) {
    return ((*param0).get_usage_hint)();
}


void
Geom_C_set_usage_hint_v_pp(Geom *param0, GeomEnums::UsageHint param1) {
    ((*param0).set_usage_hint)(param1);
}


ConstPointerTo< GeomVertexData > *
Geom_C_get_vertex_data_p_pp(Geom const *param0, Thread *param1) {
    return new ConstPointerTo< GeomVertexData >(((*param0).get_vertex_data)(param1));
}


ConstPointerTo< GeomVertexData > *
Geom_C_get_vertex_data_p_p(Geom const *param0) {
    return new ConstPointerTo< GeomVertexData >(((*param0).get_vertex_data)());
}


PointerTo< GeomVertexData > *
Geom_C_modify_vertex_data_p_p(Geom *param0) {
    return new PointerTo< GeomVertexData >(((*param0).modify_vertex_data)());
}


void
Geom_C_set_vertex_data_v_pp(Geom *param0, GeomVertexData const *param1) {
    ((*param0).set_vertex_data)(param1);
}


void
Geom_C_offset_vertices_v_ppi(Geom *param0, GeomVertexData const *param1, int param2) {
    ((*param0).offset_vertices)(param1, param2);
}


int
Geom_C_make_nonindexed_i_pB(Geom *param0, bool param1) {
    return ((*param0).make_nonindexed)(param1);
}


ConstPointerTo< GeomVertexData > *
Geom_C_get_animated_vertex_data_p_pBp(Geom const *param0, bool param1, Thread *param2) {
    return new ConstPointerTo< GeomVertexData >(((*param0).get_animated_vertex_data)(param1, param2));
}


ConstPointerTo< GeomVertexData > *
Geom_C_get_animated_vertex_data_p_pB(Geom const *param0, bool param1) {
    return new ConstPointerTo< GeomVertexData >(((*param0).get_animated_vertex_data)(param1));
}


bool
Geom_C_is_empty_B_p(Geom const *param0) {
    return ((*param0).is_empty)();
}


std::size_t
Geom_C_get_num_primitives_l_p(Geom const *param0) {
    return ((*param0).get_num_primitives)();
}


ConstPointerTo< GeomPrimitive > *
Geom_C_get_primitive_p_pl(Geom const *param0, std::size_t param1) {
    return new ConstPointerTo< GeomPrimitive >(((*param0).get_primitive)(param1));
}


PointerTo< GeomPrimitive > *
Geom_C_modify_primitive_p_pl(Geom *param0, std::size_t param1) {
    return new PointerTo< GeomPrimitive >(((*param0).modify_primitive)(param1));
}


void
Geom_C_set_primitive_v_plp(Geom *param0, std::size_t param1, GeomPrimitive const *param2) {
    ((*param0).set_primitive)(param1, param2);
}


void
Geom_C_insert_primitive_v_plp(Geom *param0, std::size_t param1, GeomPrimitive const *param2) {
    ((*param0).insert_primitive)(param1, param2);
}


void
Geom_C_add_primitive_v_pp(Geom *param0, GeomPrimitive const *param1) {
    ((*param0).add_primitive)(param1);
}


void
Geom_C_remove_primitive_v_pl(Geom *param0, std::size_t param1) {
    ((*param0).remove_primitive)(param1);
}


void
Geom_C_clear_primitives_v_p(Geom *param0) {
    ((*param0).clear_primitives)();
}


PointerTo< Geom > *
Geom_C_decompose_p_p(Geom const *param0) {
    return new PointerTo< Geom >(((*param0).decompose)());
}


PointerTo< Geom > *
Geom_C_doubleside_p_p(Geom const *param0) {
    return new PointerTo< Geom >(((*param0).doubleside)());
}


PointerTo< Geom > *
Geom_C_reverse_p_p(Geom const *param0) {
    return new PointerTo< Geom >(((*param0).reverse)());
}


PointerTo< Geom > *
Geom_C_rotate_p_p(Geom const *param0) {
    return new PointerTo< Geom >(((*param0).rotate)());
}


PointerTo< Geom > *
Geom_C_unify_p_piB(Geom const *param0, int param1, bool param2) {
    return new PointerTo< Geom >(((*param0).unify)(param1, param2));
}


PointerTo< Geom > *
Geom_C_make_points_p_p(Geom const *param0) {
    return new PointerTo< Geom >(((*param0).make_points)());
}


PointerTo< Geom > *
Geom_C_make_lines_p_p(Geom const *param0) {
    return new PointerTo< Geom >(((*param0).make_lines)());
}


PointerTo< Geom > *
Geom_C_make_patches_p_p(Geom const *param0) {
    return new PointerTo< Geom >(((*param0).make_patches)());
}


PointerTo< Geom > *
Geom_C_make_adjacency_p_p(Geom const *param0) {
    return new PointerTo< Geom >(((*param0).make_adjacency)());
}


void
Geom_C_decompose_in_place_v_p(Geom *param0) {
    ((*param0).decompose_in_place)();
}


void
Geom_C_doubleside_in_place_v_p(Geom *param0) {
    ((*param0).doubleside_in_place)();
}


void
Geom_C_reverse_in_place_v_p(Geom *param0) {
    ((*param0).reverse_in_place)();
}


void
Geom_C_rotate_in_place_v_p(Geom *param0) {
    ((*param0).rotate_in_place)();
}


void
Geom_C_unify_in_place_v_piB(Geom *param0, int param1, bool param2) {
    ((*param0).unify_in_place)(param1, param2);
}


void
Geom_C_make_points_in_place_v_p(Geom *param0) {
    ((*param0).make_points_in_place)();
}


void
Geom_C_make_lines_in_place_v_p(Geom *param0) {
    ((*param0).make_lines_in_place)();
}


void
Geom_C_make_patches_in_place_v_p(Geom *param0) {
    ((*param0).make_patches_in_place)();
}


void
Geom_C_make_adjacency_in_place_v_p(Geom *param0) {
    ((*param0).make_adjacency_in_place)();
}


bool
Geom_C_copy_primitives_from_B_pp(Geom *param0, Geom const *param1) {
    return ((*param0).copy_primitives_from)(param1);
}


int
Geom_C_get_num_bytes_i_p(Geom const *param0) {
    return ((*param0).get_num_bytes)();
}


UpdateSeq *
Geom_C_get_modified_p_pp(Geom const *param0, Thread *param1) {
    return new UpdateSeq(((*param0).get_modified)(param1));
}


UpdateSeq *
Geom_C_get_modified_p_p(Geom const *param0) {
    return new UpdateSeq(((*param0).get_modified)());
}


bool
Geom_C_request_resident_B_p(Geom const *param0) {
    return ((*param0).request_resident)();
}


void
Geom_C_transform_vertices_v_pp(Geom *param0, LMatrix4 const *param1) {
    ((*param0).transform_vertices)(*param1);
}


bool
Geom_C_check_valid_B_p(Geom const *param0) {
    return ((*param0).check_valid)();
}


bool
Geom_C_check_valid_B_pp(Geom const *param0, GeomVertexData const *param1) {
    return ((*param0).check_valid)(param1);
}


ConstPointerTo< BoundingVolume > *
Geom_C_get_bounds_p_pp(Geom const *param0, Thread *param1) {
    return new ConstPointerTo< BoundingVolume >(((*param0).get_bounds)(param1));
}


ConstPointerTo< BoundingVolume > *
Geom_C_get_bounds_p_p(Geom const *param0) {
    return new ConstPointerTo< BoundingVolume >(((*param0).get_bounds)());
}


int
Geom_C_get_nested_vertices_i_pp(Geom const *param0, Thread *param1) {
    return ((*param0).get_nested_vertices)(param1);
}


int
Geom_C_get_nested_vertices_i_p(Geom const *param0) {
    return ((*param0).get_nested_vertices)();
}


void
Geom_C_mark_bounds_stale_v_p(Geom const *param0) {
    ((*param0).mark_bounds_stale)();
}


void
Geom_C_set_bounds_type_v_pp(Geom *param0, BoundingVolume::BoundsType param1) {
    ((*param0).set_bounds_type)(param1);
}


BoundingVolume::BoundsType
Geom_C_get_bounds_type_p_p(Geom const *param0) {
    return ((*param0).get_bounds_type)();
}


void
Geom_C_set_bounds_v_pp(Geom *param0, BoundingVolume const *param1) {
    ((*param0).set_bounds)(param1);
}


void
Geom_C_clear_bounds_v_p(Geom *param0) {
    ((*param0).clear_bounds)();
}


void
Geom_C_output_v_pp(Geom const *param0, std::ostream *param1) {
    ((*param0).output)(*param1);
}


void
Geom_C_write_v_ppi(Geom const *param0, std::ostream *param1, int param2) {
    ((*param0).write)(*param1, param2);
}


void
Geom_C_write_v_pp(Geom const *param0, std::ostream *param1) {
    ((*param0).write)(*param1);
}


void
Geom_C_clear_cache_v_p(Geom *param0) {
    ((*param0).clear_cache)();
}


void
Geom_C_clear_cache_stage_v_pp(Geom *param0, Thread *param1) {
    ((*param0).clear_cache_stage)(param1);
}


void
Geom_C_prepare_v_pp(Geom *param0, PreparedGraphicsObjects *param1) {
    ((*param0).prepare)(param1);
}


bool
Geom_C_is_prepared_B_pp(Geom const *param0, PreparedGraphicsObjects *param1) {
    return ((*param0).is_prepared)(param1);
}


bool
Geom_C_release_B_pp(Geom *param0, PreparedGraphicsObjects *param1) {
    return ((*param0).release)(param1);
}


int
Geom_C_release_all_i_p(Geom *param0) {
    return ((*param0).release_all)();
}


GeomContext *
Geom_C_prepare_now_p_ppp(Geom *param0, PreparedGraphicsObjects *param1, GraphicsStateGuardianBase *param2) {
    return ((*param0).prepare_now)(param1, param2);
}


bool
Geom_C_draw_B_pppBp(Geom const *param0, GraphicsStateGuardianBase *param1, GeomVertexData const *param2, bool param3, Thread *param4) {
    return ((*param0).draw)(param1, param2, param3, param4);
}


UpdateSeq *
Geom_C_get_next_modified_p_v() {
    return new UpdateSeq((Geom::get_next_modified)());
}


void
Geom_C_register_with_read_factory_v_v() {
    (Geom::register_with_read_factory)();
}


void
Geom_C_write_datagram_v_ppp(Geom *param0, BamWriter *param1, Datagram *param2) {
    ((*param0).write_datagram)(param1, *param2);
}


void
Geom_C_finalize_v_pp(Geom *param0, BamReader *param1) {
    ((*param0).finalize)(param1);
}


int
Geom_C_get_class_type_i_v() {
    return ((Geom::get_class_type)()).get_index();
}


void
Geom_C_init_type_v_v() {
    (Geom::init_type)();
}


int
Geom_C_get_type_i_p(Geom const *param0) {
    return (((*param0).get_type)()).get_index();
}


int
Geom_C_force_init_type_i_p(Geom *param0) {
    return (((*param0).force_init_type)()).get_index();
}


// GeomEnums


GeomEnums *
GeomEnums_C_ctor_p_v() {
    return new GeomEnums();
}


GeomEnums *
GeomEnums_C_ctor_p_p(GeomEnums const *param0) {
    return new GeomEnums(*param0);
}


Geom *
GeomEnums_C_downcast_to_Geom_p_p(GeomEnums *param0) {
    return (Geom *)param0;
}


GeomPrimitive *
GeomEnums_C_downcast_to_GeomPrimitive_p_p(GeomEnums *param0) {
    return (GeomPrimitive *)param0;
}


GeomVertexArrayData *
GeomEnums_C_downcast_to_GeomVertexArrayData_p_p(GeomEnums *param0) {
    return (GeomVertexArrayData *)param0;
}


GeomVertexArrayFormat *
GeomEnums_C_downcast_to_GeomVertexArrayFormat_p_p(GeomEnums *param0) {
    return (GeomVertexArrayFormat *)param0;
}


GeomVertexArrayDataHandle *
GeomEnums_C_downcast_to_GeomVertexArrayDataHandle_p_p(GeomEnums *param0) {
    return (GeomVertexArrayDataHandle *)param0;
}


GeomVertexData *
GeomEnums_C_downcast_to_GeomVertexData_p_p(GeomEnums *param0) {
    return (GeomVertexData *)param0;
}


GeomVertexFormat *
GeomEnums_C_downcast_to_GeomVertexFormat_p_p(GeomEnums *param0) {
    return (GeomVertexFormat *)param0;
}


// GeomNode


GeomNode *
GeomNode_C_ctor_p_s(char const *param0) {
    return new GeomNode(std::string(param0));
}


void
GeomNode_C_apply_attribs_to_vertices_v_ppip(GeomNode *param0, AccumulatedAttribs const *param1, int param2, GeomTransformer *param3) {
    ((*param0).apply_attribs_to_vertices)(*param1, param2, *param3);
}


void
GeomNode_C_xform_v_pp(GeomNode *param0, LMatrix4 const *param1) {
    ((*param0).xform)(*param1);
}


bool
GeomNode_C_is_renderable_B_p(GeomNode const *param0) {
    return ((*param0).is_renderable)();
}


void
GeomNode_C_add_for_draw_v_ppp(GeomNode *param0, CullTraverser *param1, CullTraverserData *param2) {
    ((*param0).add_for_draw)(param1, *param2);
}


bool
GeomNode_C_safe_to_flatten_B_p(GeomNode const *param0) {
    return ((*param0).safe_to_flatten)();
}


bool
GeomNode_C_safe_to_combine_B_p(GeomNode const *param0) {
    return ((*param0).safe_to_combine)();
}


void
GeomNode_C_r_prepare_scene_v_ppppp(GeomNode *param0, GraphicsStateGuardianBase *param1, RenderState const *param2, GeomTransformer *param3, Thread *param4) {
    ((*param0).r_prepare_scene)(param1, param2, *param3, param4);
}


void
GeomNode_C_set_preserved_v_pB(GeomNode *param0, bool param1) {
    ((*param0).set_preserved)(param1);
}


bool
GeomNode_C_get_preserved_B_p(GeomNode const *param0) {
    return ((*param0).get_preserved)();
}


int
GeomNode_C_get_num_geoms_i_p(GeomNode const *param0) {
    return ((*param0).get_num_geoms)();
}


ConstPointerTo< Geom > *
GeomNode_C_get_geom_p_pi(GeomNode const *param0, int param1) {
    return new ConstPointerTo< Geom >(((*param0).get_geom)(param1));
}


PointerTo< Geom > *
GeomNode_C_modify_geom_p_pi(GeomNode *param0, int param1) {
    return new PointerTo< Geom >(((*param0).modify_geom)(param1));
}


RenderState const *
GeomNode_C_get_geom_state_p_pi(GeomNode const *param0, int param1) {
    return ((*param0).get_geom_state)(param1);
}


void
GeomNode_C_set_geom_state_v_pip(GeomNode *param0, int param1, RenderState const *param2) {
    ((*param0).set_geom_state)(param1, param2);
}


void
GeomNode_C_add_geom_v_ppp(GeomNode *param0, Geom *param1, RenderState const *param2) {
    ((*param0).add_geom)(param1, param2);
}


void
GeomNode_C_add_geom_v_pp(GeomNode *param0, Geom *param1) {
    ((*param0).add_geom)(param1);
}


void
GeomNode_C_add_geoms_from_v_pp(GeomNode *param0, GeomNode const *param1) {
    ((*param0).add_geoms_from)(param1);
}


void
GeomNode_C_set_geom_v_pip(GeomNode *param0, int param1, Geom *param2) {
    ((*param0).set_geom)(param1, param2);
}


void
GeomNode_C_remove_geom_v_pi(GeomNode *param0, int param1) {
    ((*param0).remove_geom)(param1);
}


void
GeomNode_C_remove_all_geoms_v_p(GeomNode *param0) {
    ((*param0).remove_all_geoms)();
}


bool
GeomNode_C_check_valid_B_p(GeomNode const *param0) {
    return ((*param0).check_valid)();
}


void
GeomNode_C_decompose_v_p(GeomNode *param0) {
    ((*param0).decompose)();
}


void
GeomNode_C_unify_v_piB(GeomNode *param0, int param1, bool param2) {
    ((*param0).unify)(param1, param2);
}


void
GeomNode_C_write_geoms_v_ppi(GeomNode const *param0, std::ostream *param1, int param2) {
    ((*param0).write_geoms)(*param1, param2);
}


void
GeomNode_C_write_verbose_v_ppi(GeomNode const *param0, std::ostream *param1, int param2) {
    ((*param0).write_verbose)(*param1, param2);
}


CollideMask *
GeomNode_C_get_default_collide_mask_p_v() {
    return new CollideMask((GeomNode::get_default_collide_mask)());
}


void
GeomNode_C_do_premunge_v_pppp(GeomNode *param0, GraphicsStateGuardianBase *param1, RenderState const *param2, GeomTransformer *param3) {
    ((*param0).do_premunge)(param1, param2, *param3);
}


GeomNode::Geoms *
GeomNode_C_get_geoms_p_pp(GeomNode const *param0, Thread *param1) {
    return new GeomNode::Geoms(((*param0).get_geoms)(param1));
}


GeomNode::Geoms *
GeomNode_C_get_geoms_p_p(GeomNode const *param0) {
    return new GeomNode::Geoms(((*param0).get_geoms)());
}


void
GeomNode_C_register_with_read_factory_v_v() {
    (GeomNode::register_with_read_factory)();
}


void
GeomNode_C_write_datagram_v_ppp(GeomNode *param0, BamWriter *param1, Datagram *param2) {
    ((*param0).write_datagram)(param1, *param2);
}


void
GeomNode_C_finalize_v_pp(GeomNode *param0, BamReader *param1) {
    ((*param0).finalize)(param1);
}


int
GeomNode_C_get_class_type_i_v() {
    return ((GeomNode::get_class_type)()).get_index();
}


void
GeomNode_C_init_type_v_v() {
    (GeomNode::init_type)();
}


int
GeomNode_C_get_type_i_p(GeomNode const *param0) {
    return (((*param0).get_type)()).get_index();
}


int
GeomNode_C_force_init_type_i_p(GeomNode *param0) {
    return (((*param0).force_init_type)()).get_index();
}


// GeomPrimitive


CopyOnWriteObject *
GeomPrimitive_C_upcast_to_CopyOnWriteObject_p_p(GeomPrimitive *param0) {
    return (CopyOnWriteObject *)param0;
}


GeomEnums *
GeomPrimitive_C_upcast_to_GeomEnums_p_p(GeomPrimitive *param0) {
    return (GeomEnums *)param0;
}


PointerTo< GeomPrimitive > *
GeomPrimitive_C_make_copy_p_p(GeomPrimitive const *param0) {
    return new PointerTo< GeomPrimitive >(((*param0).make_copy)());
}


GeomEnums::PrimitiveType
GeomPrimitive_C_get_primitive_type_p_p(GeomPrimitive const *param0) {
    return ((*param0).get_primitive_type)();
}


int
GeomPrimitive_C_get_geom_rendering_i_p(GeomPrimitive const *param0) {
    return ((*param0).get_geom_rendering)();
}


GeomEnums::ShadeModel
GeomPrimitive_C_get_shade_model_p_p(GeomPrimitive const *param0) {
    return ((*param0).get_shade_model)();
}


void
GeomPrimitive_C_set_shade_model_v_pp(GeomPrimitive *param0, GeomEnums::ShadeModel param1) {
    ((*param0).set_shade_model)(param1);
}


GeomEnums::UsageHint
GeomPrimitive_C_get_usage_hint_p_p(GeomPrimitive const *param0) {
    return ((*param0).get_usage_hint)();
}


void
GeomPrimitive_C_set_usage_hint_v_pp(GeomPrimitive *param0, GeomEnums::UsageHint param1) {
    ((*param0).set_usage_hint)(param1);
}


GeomEnums::NumericType
GeomPrimitive_C_get_index_type_p_p(GeomPrimitive const *param0) {
    return ((*param0).get_index_type)();
}


void
GeomPrimitive_C_set_index_type_v_pp(GeomPrimitive *param0, GeomEnums::NumericType param1) {
    ((*param0).set_index_type)(param1);
}


bool
GeomPrimitive_C_is_composite_B_p(GeomPrimitive const *param0) {
    return ((*param0).is_composite)();
}


bool
GeomPrimitive_C_is_indexed_B_p(GeomPrimitive const *param0) {
    return ((*param0).is_indexed)();
}


int
GeomPrimitive_C_get_first_vertex_i_p(GeomPrimitive const *param0) {
    return ((*param0).get_first_vertex)();
}


int
GeomPrimitive_C_get_num_vertices_i_p(GeomPrimitive const *param0) {
    return ((*param0).get_num_vertices)();
}


int
GeomPrimitive_C_get_vertex_i_pi(GeomPrimitive const *param0, int param1) {
    return ((*param0).get_vertex)(param1);
}


void
GeomPrimitive_C_add_vertex_v_pi(GeomPrimitive *param0, int param1) {
    ((*param0).add_vertex)(param1);
}


void
GeomPrimitive_C_add_vertices_v_pii(GeomPrimitive *param0, int param1, int param2) {
    ((*param0).add_vertices)(param1, param2);
}


void
GeomPrimitive_C_add_vertices_v_piii(GeomPrimitive *param0, int param1, int param2, int param3) {
    ((*param0).add_vertices)(param1, param2, param3);
}


void
GeomPrimitive_C_add_vertices_v_piiii(GeomPrimitive *param0, int param1, int param2, int param3, int param4) {
    ((*param0).add_vertices)(param1, param2, param3, param4);
}


void
GeomPrimitive_C_add_consecutive_vertices_v_pii(GeomPrimitive *param0, int param1, int param2) {
    ((*param0).add_consecutive_vertices)(param1, param2);
}


void
GeomPrimitive_C_add_next_vertices_v_pi(GeomPrimitive *param0, int param1) {
    ((*param0).add_next_vertices)(param1);
}


void
GeomPrimitive_C_reserve_num_vertices_v_pi(GeomPrimitive *param0, int param1) {
    ((*param0).reserve_num_vertices)(param1);
}


bool
GeomPrimitive_C_close_primitive_B_p(GeomPrimitive *param0) {
    return ((*param0).close_primitive)();
}


void
GeomPrimitive_C_clear_vertices_v_p(GeomPrimitive *param0) {
    ((*param0).clear_vertices)();
}


void
GeomPrimitive_C_offset_vertices_v_pi(GeomPrimitive *param0, int param1) {
    ((*param0).offset_vertices)(param1);
}


void
GeomPrimitive_C_offset_vertices_v_piii(GeomPrimitive *param0, int param1, int param2, int param3) {
    ((*param0).offset_vertices)(param1, param2, param3);
}


void
GeomPrimitive_C_make_nonindexed_v_ppp(GeomPrimitive *param0, GeomVertexData *param1, GeomVertexData const *param2) {
    ((*param0).make_nonindexed)(param1, param2);
}


void
GeomPrimitive_C_pack_vertices_v_ppp(GeomPrimitive *param0, GeomVertexData *param1, GeomVertexData const *param2) {
    ((*param0).pack_vertices)(param1, param2);
}


void
GeomPrimitive_C_make_indexed_v_p(GeomPrimitive *param0) {
    ((*param0).make_indexed)();
}


int
GeomPrimitive_C_get_num_primitives_i_p(GeomPrimitive const *param0) {
    return ((*param0).get_num_primitives)();
}


int
GeomPrimitive_C_get_primitive_start_i_pi(GeomPrimitive const *param0, int param1) {
    return ((*param0).get_primitive_start)(param1);
}


int
GeomPrimitive_C_get_primitive_end_i_pi(GeomPrimitive const *param0, int param1) {
    return ((*param0).get_primitive_end)(param1);
}


int
GeomPrimitive_C_get_primitive_num_vertices_i_pi(GeomPrimitive const *param0, int param1) {
    return ((*param0).get_primitive_num_vertices)(param1);
}


int
GeomPrimitive_C_get_num_used_vertices_i_p(GeomPrimitive const *param0) {
    return ((*param0).get_num_used_vertices)();
}


int
GeomPrimitive_C_get_num_faces_i_p(GeomPrimitive const *param0) {
    return ((*param0).get_num_faces)();
}


int
GeomPrimitive_C_get_primitive_num_faces_i_pi(GeomPrimitive const *param0, int param1) {
    return ((*param0).get_primitive_num_faces)(param1);
}


int
GeomPrimitive_C_get_min_vertex_i_p(GeomPrimitive const *param0) {
    return ((*param0).get_min_vertex)();
}


int
GeomPrimitive_C_get_primitive_min_vertex_i_pi(GeomPrimitive const *param0, int param1) {
    return ((*param0).get_primitive_min_vertex)(param1);
}


int
GeomPrimitive_C_get_max_vertex_i_p(GeomPrimitive const *param0) {
    return ((*param0).get_max_vertex)();
}


int
GeomPrimitive_C_get_primitive_max_vertex_i_pi(GeomPrimitive const *param0, int param1) {
    return ((*param0).get_primitive_max_vertex)(param1);
}


ConstPointerTo< GeomPrimitive > *
GeomPrimitive_C_decompose_p_p(GeomPrimitive const *param0) {
    return new ConstPointerTo< GeomPrimitive >(((*param0).decompose)());
}


ConstPointerTo< GeomPrimitive > *
GeomPrimitive_C_rotate_p_p(GeomPrimitive const *param0) {
    return new ConstPointerTo< GeomPrimitive >(((*param0).rotate)());
}


ConstPointerTo< GeomPrimitive > *
GeomPrimitive_C_doubleside_p_p(GeomPrimitive const *param0) {
    return new ConstPointerTo< GeomPrimitive >(((*param0).doubleside)());
}


ConstPointerTo< GeomPrimitive > *
GeomPrimitive_C_reverse_p_p(GeomPrimitive const *param0) {
    return new ConstPointerTo< GeomPrimitive >(((*param0).reverse)());
}


ConstPointerTo< GeomPrimitive > *
GeomPrimitive_C_match_shade_model_p_pp(GeomPrimitive const *param0, GeomEnums::ShadeModel param1) {
    return new ConstPointerTo< GeomPrimitive >(((*param0).match_shade_model)(param1));
}


ConstPointerTo< GeomPrimitive > *
GeomPrimitive_C_make_points_p_p(GeomPrimitive const *param0) {
    return new ConstPointerTo< GeomPrimitive >(((*param0).make_points)());
}


ConstPointerTo< GeomPrimitive > *
GeomPrimitive_C_make_lines_p_p(GeomPrimitive const *param0) {
    return new ConstPointerTo< GeomPrimitive >(((*param0).make_lines)());
}


ConstPointerTo< GeomPrimitive > *
GeomPrimitive_C_make_patches_p_p(GeomPrimitive const *param0) {
    return new ConstPointerTo< GeomPrimitive >(((*param0).make_patches)());
}


ConstPointerTo< GeomPrimitive > *
GeomPrimitive_C_make_adjacency_p_p(GeomPrimitive const *param0) {
    return new ConstPointerTo< GeomPrimitive >(((*param0).make_adjacency)());
}


int
GeomPrimitive_C_get_num_bytes_i_p(GeomPrimitive const *param0) {
    return ((*param0).get_num_bytes)();
}


int
GeomPrimitive_C_get_data_size_bytes_i_p(GeomPrimitive const *param0) {
    return ((*param0).get_data_size_bytes)();
}


UpdateSeq *
GeomPrimitive_C_get_modified_p_p(GeomPrimitive const *param0) {
    return new UpdateSeq(((*param0).get_modified)());
}


bool
GeomPrimitive_C_request_resident_B_pp(GeomPrimitive const *param0, Thread *param1) {
    return ((*param0).request_resident)(param1);
}


bool
GeomPrimitive_C_request_resident_B_p(GeomPrimitive const *param0) {
    return ((*param0).request_resident)();
}


bool
GeomPrimitive_C_check_valid_B_pp(GeomPrimitive const *param0, GeomVertexData const *param1) {
    return ((*param0).check_valid)(param1);
}


bool
GeomPrimitive_C_check_valid_B_pp_1_B_pp(GeomPrimitive const *param0, GeomVertexDataPipelineReader const *param1) {
    return ((*param0).check_valid)(param1);
}


void
GeomPrimitive_C_output_v_pp(GeomPrimitive const *param0, std::ostream *param1) {
    ((*param0).output)(*param1);
}


void
GeomPrimitive_C_write_v_ppi(GeomPrimitive const *param0, std::ostream *param1, int param2) {
    ((*param0).write)(*param1, param2);
}


ConstPointerTo< GeomVertexArrayData > *
GeomPrimitive_C_get_vertices_p_p(GeomPrimitive const *param0) {
    return new ConstPointerTo< GeomVertexArrayData >(((*param0).get_vertices)());
}


ConstPointerTo< GeomVertexArrayDataHandle > *
GeomPrimitive_C_get_vertices_handle_p_pp(GeomPrimitive const *param0, Thread *param1) {
    return new ConstPointerTo< GeomVertexArrayDataHandle >(((*param0).get_vertices_handle)(param1));
}


PointerTo< GeomVertexArrayData > *
GeomPrimitive_C_modify_vertices_p_pi(GeomPrimitive *param0, int param1) {
    return new PointerTo< GeomVertexArrayData >(((*param0).modify_vertices)(param1));
}


PointerTo< GeomVertexArrayData > *
GeomPrimitive_C_modify_vertices_p_p(GeomPrimitive *param0) {
    return new PointerTo< GeomVertexArrayData >(((*param0).modify_vertices)());
}


PointerTo< GeomVertexArrayDataHandle > *
GeomPrimitive_C_modify_vertices_handle_p_pp(GeomPrimitive *param0, Thread *param1) {
    return new PointerTo< GeomVertexArrayDataHandle >(((*param0).modify_vertices_handle)(param1));
}


void
GeomPrimitive_C_set_vertices_v_ppi(GeomPrimitive *param0, GeomVertexArrayData const *param1, int param2) {
    ((*param0).set_vertices)(param1, param2);
}


void
GeomPrimitive_C_set_vertices_v_pp(GeomPrimitive *param0, GeomVertexArrayData const *param1) {
    ((*param0).set_vertices)(param1);
}


void
GeomPrimitive_C_set_nonindexed_vertices_v_pii(GeomPrimitive *param0, int param1, int param2) {
    ((*param0).set_nonindexed_vertices)(param1, param2);
}


int
GeomPrimitive_C_get_index_stride_i_p(GeomPrimitive const *param0) {
    return ((*param0).get_index_stride)();
}


int
GeomPrimitive_C_get_strip_cut_index_i_p(GeomPrimitive const *param0) {
    return ((*param0).get_strip_cut_index)();
}


CPTA_int *
GeomPrimitive_C_get_ends_p_p(GeomPrimitive const *param0) {
    return new CPTA_int(((*param0).get_ends)());
}


PTA_int *
GeomPrimitive_C_modify_ends_p_p(GeomPrimitive *param0) {
    return new PTA_int(((*param0).modify_ends)());
}


void
GeomPrimitive_C_set_ends_v_pp(GeomPrimitive *param0, PTA_int *param1) {
    ((*param0).set_ends)(*param1);
}


ConstPointerTo< GeomVertexArrayData > *
GeomPrimitive_C_get_mins_p_p(GeomPrimitive const *param0) {
    return new ConstPointerTo< GeomVertexArrayData >(((*param0).get_mins)());
}


ConstPointerTo< GeomVertexArrayData > *
GeomPrimitive_C_get_maxs_p_p(GeomPrimitive const *param0) {
    return new ConstPointerTo< GeomVertexArrayData >(((*param0).get_maxs)());
}


void
GeomPrimitive_C_set_minmax_v_piipp(GeomPrimitive *param0, int param1, int param2, GeomVertexArrayData *param3, GeomVertexArrayData *param4) {
    ((*param0).set_minmax)(param1, param2, param3, param4);
}


void
GeomPrimitive_C_clear_minmax_v_p(GeomPrimitive *param0) {
    ((*param0).clear_minmax)();
}


int
GeomPrimitive_C_get_num_vertices_per_primitive_i_p(GeomPrimitive const *param0) {
    return ((*param0).get_num_vertices_per_primitive)();
}


int
GeomPrimitive_C_get_min_num_vertices_per_primitive_i_p(GeomPrimitive const *param0) {
    return ((*param0).get_min_num_vertices_per_primitive)();
}


int
GeomPrimitive_C_get_num_unused_vertices_per_primitive_i_p(GeomPrimitive const *param0) {
    return ((*param0).get_num_unused_vertices_per_primitive)();
}


void
GeomPrimitive_C_prepare_v_pp(GeomPrimitive *param0, PreparedGraphicsObjects *param1) {
    ((*param0).prepare)(param1);
}


bool
GeomPrimitive_C_is_prepared_B_pp(GeomPrimitive const *param0, PreparedGraphicsObjects *param1) {
    return ((*param0).is_prepared)(param1);
}


IndexBufferContext *
GeomPrimitive_C_prepare_now_p_ppp(GeomPrimitive *param0, PreparedGraphicsObjects *param1, GraphicsStateGuardianBase *param2) {
    return ((*param0).prepare_now)(param1, param2);
}


bool
GeomPrimitive_C_release_B_pp(GeomPrimitive *param0, PreparedGraphicsObjects *param1) {
    return ((*param0).release)(param1);
}


int
GeomPrimitive_C_release_all_i_p(GeomPrimitive *param0) {
    return ((*param0).release_all)();
}


GeomVertexArrayFormat const *
GeomPrimitive_C_get_index_format_p_p(GeomPrimitive const *param0) {
    return ((*param0).get_index_format)();
}


GeomVertexArrayFormat const *
GeomPrimitive_C_get_index_format_p_p_1_p_p(GeomEnums::NumericType param0) {
    return (GeomPrimitive::get_index_format)(param0);
}


PointerTo< GeomVertexArrayData > *
GeomPrimitive_C_make_index_data_p_p(GeomPrimitive const *param0) {
    return new PointerTo< GeomVertexArrayData >(((*param0).make_index_data)());
}


bool
GeomPrimitive_C_draw_B_pppB(GeomPrimitive const *param0, GraphicsStateGuardianBase *param1, GeomPrimitivePipelineReader const *param2, bool param3) {
    return ((*param0).draw)(param1, param2, param3);
}


void
GeomPrimitive_C_write_datagram_v_ppp(GeomPrimitive *param0, BamWriter *param1, Datagram *param2) {
    ((*param0).write_datagram)(param1, *param2);
}


void
GeomPrimitive_C_finalize_v_pp(GeomPrimitive *param0, BamReader *param1) {
    ((*param0).finalize)(param1);
}


int
GeomPrimitive_C_get_class_type_i_v() {
    return ((GeomPrimitive::get_class_type)()).get_index();
}


void
GeomPrimitive_C_init_type_v_v() {
    (GeomPrimitive::init_type)();
}


int
GeomPrimitive_C_get_type_i_p(GeomPrimitive const *param0) {
    return (((*param0).get_type)()).get_index();
}


int
GeomPrimitive_C_force_init_type_i_p(GeomPrimitive *param0) {
    return (((*param0).force_init_type)()).get_index();
}


// GeomTriangles


GeomTriangles *
GeomTriangles_C_ctor_p_p(GeomEnums::UsageHint param0) {
    return new GeomTriangles(param0);
}


GeomTriangles *
GeomTriangles_C_ctor_p_p_1_p_p(GeomTriangles const *param0) {
    return new GeomTriangles(*param0);
}


bool
GeomTriangles_C_draw_B_pppB(GeomTriangles const *param0, GraphicsStateGuardianBase *param1, GeomPrimitivePipelineReader const *param2, bool param3) {
    return ((*param0).draw)(param1, param2, param3);
}


void
GeomTriangles_C_register_with_read_factory_v_v() {
    (GeomTriangles::register_with_read_factory)();
}


int
GeomTriangles_C_get_class_type_i_v() {
    return ((GeomTriangles::get_class_type)()).get_index();
}


void
GeomTriangles_C_init_type_v_v() {
    (GeomTriangles::init_type)();
}


int
GeomTriangles_C_get_type_i_p(GeomTriangles const *param0) {
    return (((*param0).get_type)()).get_index();
}


int
GeomTriangles_C_force_init_type_i_p(GeomTriangles *param0) {
    return (((*param0).force_init_type)()).get_index();
}


// GeomVertexArrayData


CopyOnWriteObject *
GeomVertexArrayData_C_upcast_to_CopyOnWriteObject_p_p(GeomVertexArrayData *param0) {
    return (CopyOnWriteObject *)param0;
}


SimpleLruPage *
GeomVertexArrayData_C_upcast_to_SimpleLruPage_p_p(GeomVertexArrayData *param0) {
    return (SimpleLruPage *)param0;
}


GeomEnums *
GeomVertexArrayData_C_upcast_to_GeomEnums_p_p(GeomVertexArrayData *param0) {
    return (GeomEnums *)param0;
}


GeomVertexArrayData *
GeomVertexArrayData_C_ctor_p_p(GeomVertexArrayData const *param0) {
    return new GeomVertexArrayData(*param0);
}


GeomVertexArrayData *
GeomVertexArrayData_C_ctor_p_pp(GeomVertexArrayFormat const *param0, GeomEnums::UsageHint param1) {
    return new GeomVertexArrayData(param0, param1);
}


int
GeomVertexArrayData_C_compare_to_i_pp(GeomVertexArrayData const *param0, GeomVertexArrayData const *param1) {
    return ((*param0).compare_to)(*param1);
}


GeomVertexArrayFormat const *
GeomVertexArrayData_C_get_array_format_p_p(GeomVertexArrayData const *param0) {
    return ((*param0).get_array_format)();
}


GeomEnums::UsageHint
GeomVertexArrayData_C_get_usage_hint_p_p(GeomVertexArrayData const *param0) {
    return ((*param0).get_usage_hint)();
}


void
GeomVertexArrayData_C_set_usage_hint_v_pp(GeomVertexArrayData *param0, GeomEnums::UsageHint param1) {
    ((*param0).set_usage_hint)(param1);
}


bool
GeomVertexArrayData_C_has_column_B_ps(GeomVertexArrayData const *param0, InternalName const *param1) {
    return ((*param0).has_column)(param1);
}


int
GeomVertexArrayData_C_get_num_rows_i_p(GeomVertexArrayData const *param0) {
    return ((*param0).get_num_rows)();
}


bool
GeomVertexArrayData_C_set_num_rows_B_pi(GeomVertexArrayData *param0, int param1) {
    return ((*param0).set_num_rows)(param1);
}


bool
GeomVertexArrayData_C_unclean_set_num_rows_B_pi(GeomVertexArrayData *param0, int param1) {
    return ((*param0).unclean_set_num_rows)(param1);
}


bool
GeomVertexArrayData_C_reserve_num_rows_B_pi(GeomVertexArrayData *param0, int param1) {
    return ((*param0).reserve_num_rows)(param1);
}


void
GeomVertexArrayData_C_clear_rows_v_p(GeomVertexArrayData *param0) {
    ((*param0).clear_rows)();
}


std::size_t
GeomVertexArrayData_C_get_data_size_bytes_l_p(GeomVertexArrayData const *param0) {
    return ((*param0).get_data_size_bytes)();
}


UpdateSeq *
GeomVertexArrayData_C_get_modified_p_p(GeomVertexArrayData const *param0) {
    return new UpdateSeq(((*param0).get_modified)());
}


void
GeomVertexArrayData_C_output_v_pp(GeomVertexArrayData const *param0, std::ostream *param1) {
    ((*param0).output)(*param1);
}


void
GeomVertexArrayData_C_write_v_ppi(GeomVertexArrayData const *param0, std::ostream *param1, int param2) {
    ((*param0).write)(*param1, param2);
}


void
GeomVertexArrayData_C_write_v_pp(GeomVertexArrayData const *param0, std::ostream *param1) {
    ((*param0).write)(*param1);
}


bool
GeomVertexArrayData_C_request_resident_B_pp(GeomVertexArrayData const *param0, Thread *param1) {
    return ((*param0).request_resident)(param1);
}


bool
GeomVertexArrayData_C_request_resident_B_p(GeomVertexArrayData const *param0) {
    return ((*param0).request_resident)();
}


ConstPointerTo< GeomVertexArrayDataHandle > *
GeomVertexArrayData_C_get_handle_p_pp(GeomVertexArrayData const *param0, Thread *param1) {
    return new ConstPointerTo< GeomVertexArrayDataHandle >(((*param0).get_handle)(param1));
}


ConstPointerTo< GeomVertexArrayDataHandle > *
GeomVertexArrayData_C_get_handle_p_p(GeomVertexArrayData const *param0) {
    return new ConstPointerTo< GeomVertexArrayDataHandle >(((*param0).get_handle)());
}


PointerTo< GeomVertexArrayDataHandle > *
GeomVertexArrayData_C_modify_handle_p_pp(GeomVertexArrayData *param0, Thread *param1) {
    return new PointerTo< GeomVertexArrayDataHandle >(((*param0).modify_handle)(param1));
}


PointerTo< GeomVertexArrayDataHandle > *
GeomVertexArrayData_C_modify_handle_p_p(GeomVertexArrayData *param0) {
    return new PointerTo< GeomVertexArrayDataHandle >(((*param0).modify_handle)());
}


void
GeomVertexArrayData_C_prepare_v_pp(GeomVertexArrayData *param0, PreparedGraphicsObjects *param1) {
    ((*param0).prepare)(param1);
}


bool
GeomVertexArrayData_C_is_prepared_B_pp(GeomVertexArrayData const *param0, PreparedGraphicsObjects *param1) {
    return ((*param0).is_prepared)(param1);
}


VertexBufferContext *
GeomVertexArrayData_C_prepare_now_p_ppp(GeomVertexArrayData *param0, PreparedGraphicsObjects *param1, GraphicsStateGuardianBase *param2) {
    return ((*param0).prepare_now)(param1, param2);
}


bool
GeomVertexArrayData_C_release_B_pp(GeomVertexArrayData *param0, PreparedGraphicsObjects *param1) {
    return ((*param0).release)(param1);
}


int
GeomVertexArrayData_C_release_all_i_p(GeomVertexArrayData *param0) {
    return ((*param0).release_all)();
}


SimpleLru *
GeomVertexArrayData_C_get_independent_lru_p_v() {
    return (GeomVertexArrayData::get_independent_lru)();
}


SimpleLru *
GeomVertexArrayData_C_get_small_lru_p_v() {
    return (GeomVertexArrayData::get_small_lru)();
}


void
GeomVertexArrayData_C_lru_epoch_v_v() {
    (GeomVertexArrayData::lru_epoch)();
}


VertexDataBook *
GeomVertexArrayData_C_get_book_p_v() {
    return &((GeomVertexArrayData::get_book)());
}


void
GeomVertexArrayData_C_evict_lru_v_p(GeomVertexArrayData *param0) {
    ((*param0).evict_lru)();
}


void
GeomVertexArrayData_C_register_with_read_factory_v_v() {
    (GeomVertexArrayData::register_with_read_factory)();
}


void
GeomVertexArrayData_C_write_datagram_v_ppp(GeomVertexArrayData *param0, BamWriter *param1, Datagram *param2) {
    ((*param0).write_datagram)(param1, *param2);
}


PTA_uchar *
GeomVertexArrayData_C_read_raw_data_p_ppp(GeomVertexArrayData *param0, BamReader *param1, DatagramIterator *param2) {
    return new PTA_uchar(((*param0).read_raw_data)(param1, *param2));
}


void
GeomVertexArrayData_C_finalize_v_pp(GeomVertexArrayData *param0, BamReader *param1) {
    ((*param0).finalize)(param1);
}


int
GeomVertexArrayData_C_get_class_type_i_v() {
    return ((GeomVertexArrayData::get_class_type)()).get_index();
}


void
GeomVertexArrayData_C_init_type_v_v() {
    (GeomVertexArrayData::init_type)();
}


int
GeomVertexArrayData_C_get_type_i_p(GeomVertexArrayData const *param0) {
    return (((*param0).get_type)()).get_index();
}


int
GeomVertexArrayData_C_force_init_type_i_p(GeomVertexArrayData *param0) {
    return (((*param0).force_init_type)()).get_index();
}


// GeomVertexArrayDataHandle


ReferenceCount *
GeomVertexArrayDataHandle_C_upcast_to_ReferenceCount_p_p(GeomVertexArrayDataHandle *param0) {
    return (ReferenceCount *)param0;
}


GeomEnums *
GeomVertexArrayDataHandle_C_upcast_to_GeomEnums_p_p(GeomVertexArrayDataHandle *param0) {
    return (GeomEnums *)param0;
}


Thread *
GeomVertexArrayDataHandle_C_get_current_thread_p_p(GeomVertexArrayDataHandle const *param0) {
    return ((*param0).get_current_thread)();
}


void
GeomVertexArrayDataHandle_C_get_read_pointer_v_pB(GeomVertexArrayDataHandle const *param0, bool param1) {
    ((*param0).get_read_pointer)(param1);
}


void
GeomVertexArrayDataHandle_C_get_write_pointer_v_p(GeomVertexArrayDataHandle *param0) {
    ((*param0).get_write_pointer)();
}


GeomVertexArrayData *
GeomVertexArrayDataHandle_C_get_object_p_p(GeomVertexArrayDataHandle *param0) {
    return ((*param0).get_object)();
}


GeomVertexArrayData const *
GeomVertexArrayDataHandle_C_get_object_p_p_1_p_p(GeomVertexArrayDataHandle const *param0) {
    return ((*param0).get_object)();
}


GeomVertexArrayFormat const *
GeomVertexArrayDataHandle_C_get_array_format_p_p(GeomVertexArrayDataHandle const *param0) {
    return ((*param0).get_array_format)();
}


GeomEnums::UsageHint
GeomVertexArrayDataHandle_C_get_usage_hint_p_p(GeomVertexArrayDataHandle const *param0) {
    return ((*param0).get_usage_hint)();
}


int
GeomVertexArrayDataHandle_C_get_num_rows_i_p(GeomVertexArrayDataHandle const *param0) {
    return ((*param0).get_num_rows)();
}


bool
GeomVertexArrayDataHandle_C_set_num_rows_B_pi(GeomVertexArrayDataHandle *param0, int param1) {
    return ((*param0).set_num_rows)(param1);
}


bool
GeomVertexArrayDataHandle_C_unclean_set_num_rows_B_pi(GeomVertexArrayDataHandle *param0, int param1) {
    return ((*param0).unclean_set_num_rows)(param1);
}


bool
GeomVertexArrayDataHandle_C_reserve_num_rows_B_pi(GeomVertexArrayDataHandle *param0, int param1) {
    return ((*param0).reserve_num_rows)(param1);
}


void
GeomVertexArrayDataHandle_C_clear_rows_v_p(GeomVertexArrayDataHandle *param0) {
    ((*param0).clear_rows)();
}


std::size_t
GeomVertexArrayDataHandle_C_get_data_size_bytes_l_p(GeomVertexArrayDataHandle const *param0) {
    return ((*param0).get_data_size_bytes)();
}


UpdateSeq *
GeomVertexArrayDataHandle_C_get_modified_p_p(GeomVertexArrayDataHandle const *param0) {
    return new UpdateSeq(((*param0).get_modified)());
}


bool
GeomVertexArrayDataHandle_C_request_resident_B_p(GeomVertexArrayDataHandle const *param0) {
    return ((*param0).request_resident)();
}


VertexBufferContext *
GeomVertexArrayDataHandle_C_prepare_now_p_ppp(GeomVertexArrayDataHandle const *param0, PreparedGraphicsObjects *param1, GraphicsStateGuardianBase *param2) {
    return ((*param0).prepare_now)(param1, param2);
}


void
GeomVertexArrayDataHandle_C_copy_data_from_v_pp(GeomVertexArrayDataHandle *param0, GeomVertexArrayDataHandle const *param1) {
    ((*param0).copy_data_from)(param1);
}


void
GeomVertexArrayDataHandle_C_copy_subdata_from_v_pllpll(GeomVertexArrayDataHandle *param0, std::size_t param1, std::size_t param2, GeomVertexArrayDataHandle const *param3, std::size_t param4, std::size_t param5) {
    ((*param0).copy_subdata_from)(param1, param2, param3, param4, param5);
}


vector_uchar
GeomVertexArrayDataHandle_C_get_data_p_p(GeomVertexArrayDataHandle const *param0) {
    return ((*param0).get_data)();
}


void
GeomVertexArrayDataHandle_C_set_data_v_pp(GeomVertexArrayDataHandle *param0, vector_uchar param1) {
    ((*param0).set_data)(param1);
}


vector_uchar
GeomVertexArrayDataHandle_C_get_subdata_p_pll(GeomVertexArrayDataHandle const *param0, std::size_t param1, std::size_t param2) {
    return ((*param0).get_subdata)(param1, param2);
}


void
GeomVertexArrayDataHandle_C_set_subdata_v_pllp(GeomVertexArrayDataHandle *param0, std::size_t param1, std::size_t param2, vector_uchar param3) {
    ((*param0).set_subdata)(param1, param2, param3);
}


void
GeomVertexArrayDataHandle_C_mark_used_v_p(GeomVertexArrayDataHandle const *param0) {
    ((*param0).mark_used)();
}


int
GeomVertexArrayDataHandle_C_get_class_type_i_v() {
    return ((GeomVertexArrayDataHandle::get_class_type)()).get_index();
}


void
GeomVertexArrayDataHandle_C_init_type_v_v() {
    (GeomVertexArrayDataHandle::init_type)();
}


// GeomVertexArrayFormat


TypedWritableReferenceCount *
GeomVertexArrayFormat_C_upcast_to_TypedWritableReferenceCount_p_p(GeomVertexArrayFormat *param0) {
    return (TypedWritableReferenceCount *)param0;
}


GeomEnums *
GeomVertexArrayFormat_C_upcast_to_GeomEnums_p_p(GeomVertexArrayFormat *param0) {
    return (GeomEnums *)param0;
}


GeomVertexArrayFormat *
GeomVertexArrayFormat_C_ctor_p_v() {
    return new GeomVertexArrayFormat();
}


GeomVertexArrayFormat *
GeomVertexArrayFormat_C_ctor_p_sipp(CPT_InternalName *param0, int param1, GeomEnums::NumericType param2, GeomEnums::Contents param3) {
    return new GeomVertexArrayFormat(*param0, param1, param2, param3);
}


GeomVertexArrayFormat *
GeomVertexArrayFormat_C_ctor_p_sippsipp(CPT_InternalName *param0, int param1, GeomEnums::NumericType param2, GeomEnums::Contents param3, CPT_InternalName *param4, int param5, GeomEnums::NumericType param6, GeomEnums::Contents param7) {
    return new GeomVertexArrayFormat(*param0, param1, param2, param3, *param4, param5, param6, param7);
}


GeomVertexArrayFormat *
GeomVertexArrayFormat_C_ctor_p_sippsippsipp(CPT_InternalName *param0, int param1, GeomEnums::NumericType param2, GeomEnums::Contents param3, CPT_InternalName *param4, int param5, GeomEnums::NumericType param6, GeomEnums::Contents param7, CPT_InternalName *param8, int param9, GeomEnums::NumericType param10, GeomEnums::Contents param11) {
    return new GeomVertexArrayFormat(*param0, param1, param2, param3, *param4, param5, param6, param7, *param8, param9, param10, param11);
}


GeomVertexArrayFormat *
GeomVertexArrayFormat_C_ctor_p_sippsippsippsipp(CPT_InternalName *param0, int param1, GeomEnums::NumericType param2, GeomEnums::Contents param3, CPT_InternalName *param4, int param5, GeomEnums::NumericType param6, GeomEnums::Contents param7, CPT_InternalName *param8, int param9, GeomEnums::NumericType param10, GeomEnums::Contents param11, CPT_InternalName *param12, int param13, GeomEnums::NumericType param14, GeomEnums::Contents param15) {
    return new GeomVertexArrayFormat(*param0, param1, param2, param3, *param4, param5, param6, param7, *param8, param9, param10, param11, *param12, param13, param14, param15);
}


GeomVertexArrayFormat *
GeomVertexArrayFormat_C_ctor_p_p(GeomVertexArrayFormat const *param0) {
    return new GeomVertexArrayFormat(*param0);
}


bool
GeomVertexArrayFormat_C_unref_B_p(GeomVertexArrayFormat const *param0) {
    return ((*param0).unref)();
}


bool
GeomVertexArrayFormat_C_is_registered_B_p(GeomVertexArrayFormat const *param0) {
    return ((*param0).is_registered)();
}


ConstPointerTo< GeomVertexArrayFormat > *
GeomVertexArrayFormat_C_register_format_p_p(GeomVertexArrayFormat const *param0) {
    return new ConstPointerTo< GeomVertexArrayFormat >((GeomVertexArrayFormat::register_format)(param0));
}


int
GeomVertexArrayFormat_C_get_stride_i_p(GeomVertexArrayFormat const *param0) {
    return ((*param0).get_stride)();
}


void
GeomVertexArrayFormat_C_set_stride_v_pi(GeomVertexArrayFormat *param0, int param1) {
    ((*param0).set_stride)(param1);
}


int
GeomVertexArrayFormat_C_get_pad_to_i_p(GeomVertexArrayFormat const *param0) {
    return ((*param0).get_pad_to)();
}


void
GeomVertexArrayFormat_C_set_pad_to_v_pi(GeomVertexArrayFormat *param0, int param1) {
    ((*param0).set_pad_to)(param1);
}


int
GeomVertexArrayFormat_C_get_divisor_i_p(GeomVertexArrayFormat const *param0) {
    return ((*param0).get_divisor)();
}


void
GeomVertexArrayFormat_C_set_divisor_v_pi(GeomVertexArrayFormat *param0, int param1) {
    ((*param0).set_divisor)(param1);
}


int
GeomVertexArrayFormat_C_get_total_bytes_i_p(GeomVertexArrayFormat const *param0) {
    return ((*param0).get_total_bytes)();
}


int
GeomVertexArrayFormat_C_add_column_i_psippii(GeomVertexArrayFormat *param0, CPT_InternalName *param1, int param2, GeomEnums::NumericType param3, GeomEnums::Contents param4, int param5, int param6) {
    return ((*param0).add_column)(*param1, param2, param3, param4, param5, param6);
}


int
GeomVertexArrayFormat_C_add_column_i_psippi(GeomVertexArrayFormat *param0, CPT_InternalName *param1, int param2, GeomEnums::NumericType param3, GeomEnums::Contents param4, int param5) {
    return ((*param0).add_column)(*param1, param2, param3, param4, param5);
}


int
GeomVertexArrayFormat_C_add_column_i_psipp(GeomVertexArrayFormat *param0, CPT_InternalName *param1, int param2, GeomEnums::NumericType param3, GeomEnums::Contents param4) {
    return ((*param0).add_column)(*param1, param2, param3, param4);
}


int
GeomVertexArrayFormat_C_add_column_i_pp(GeomVertexArrayFormat *param0, GeomVertexColumn const *param1) {
    return ((*param0).add_column)(*param1);
}


void
GeomVertexArrayFormat_C_remove_column_v_ps(GeomVertexArrayFormat *param0, InternalName const *param1) {
    ((*param0).remove_column)(param1);
}


void
GeomVertexArrayFormat_C_clear_columns_v_p(GeomVertexArrayFormat *param0) {
    ((*param0).clear_columns)();
}


void
GeomVertexArrayFormat_C_pack_columns_v_p(GeomVertexArrayFormat *param0) {
    ((*param0).pack_columns)();
}


void
GeomVertexArrayFormat_C_align_columns_for_animation_v_p(GeomVertexArrayFormat *param0) {
    ((*param0).align_columns_for_animation)();
}


int
GeomVertexArrayFormat_C_get_num_columns_i_p(GeomVertexArrayFormat const *param0) {
    return ((*param0).get_num_columns)();
}


GeomVertexColumn const *
GeomVertexArrayFormat_C_get_column_p_ps(GeomVertexArrayFormat const *param0, InternalName const *param1) {
    return ((*param0).get_column)(param1);
}


GeomVertexColumn const *
GeomVertexArrayFormat_C_get_column_p_pi(GeomVertexArrayFormat const *param0, int param1) {
    return ((*param0).get_column)(param1);
}


GeomVertexColumn const *
GeomVertexArrayFormat_C_get_column_p_pii(GeomVertexArrayFormat const *param0, int param1, int param2) {
    return ((*param0).get_column)(param1, param2);
}


bool
GeomVertexArrayFormat_C_has_column_B_ps(GeomVertexArrayFormat const *param0, InternalName const *param1) {
    return ((*param0).has_column)(param1);
}


bool
GeomVertexArrayFormat_C_is_data_subset_of_B_pp(GeomVertexArrayFormat const *param0, GeomVertexArrayFormat const *param1) {
    return ((*param0).is_data_subset_of)(*param1);
}


int
GeomVertexArrayFormat_C_count_unused_space_i_p(GeomVertexArrayFormat const *param0) {
    return ((*param0).count_unused_space)();
}


void
GeomVertexArrayFormat_C_output_v_pp(GeomVertexArrayFormat const *param0, std::ostream *param1) {
    ((*param0).output)(*param1);
}


void
GeomVertexArrayFormat_C_write_v_ppi(GeomVertexArrayFormat const *param0, std::ostream *param1, int param2) {
    ((*param0).write)(*param1, param2);
}


void
GeomVertexArrayFormat_C_write_v_pp(GeomVertexArrayFormat const *param0, std::ostream *param1) {
    ((*param0).write)(*param1);
}


void
GeomVertexArrayFormat_C_write_with_data_v_ppip(GeomVertexArrayFormat const *param0, std::ostream *param1, int param2, GeomVertexArrayData const *param3) {
    ((*param0).write_with_data)(*param1, param2, param3);
}


char const *
GeomVertexArrayFormat_C_get_format_string_s_pB(GeomVertexArrayFormat const *param0, bool param1) {
    static std::string string_holder = ((*param0).get_format_string)(param1);
    return string_holder.c_str();
}


char const *
GeomVertexArrayFormat_C_get_format_string_s_p(GeomVertexArrayFormat const *param0) {
    static std::string string_holder = ((*param0).get_format_string)();
    return string_holder.c_str();
}


int
GeomVertexArrayFormat_C_compare_to_i_pp(GeomVertexArrayFormat const *param0, GeomVertexArrayFormat const *param1) {
    return ((*param0).compare_to)(*param1);
}


void
GeomVertexArrayFormat_C_register_with_read_factory_v_v() {
    (GeomVertexArrayFormat::register_with_read_factory)();
}


void
GeomVertexArrayFormat_C_write_datagram_v_ppp(GeomVertexArrayFormat *param0, BamWriter *param1, Datagram *param2) {
    ((*param0).write_datagram)(param1, *param2);
}


void
GeomVertexArrayFormat_C_finalize_v_pp(GeomVertexArrayFormat *param0, BamReader *param1) {
    ((*param0).finalize)(param1);
}


int
GeomVertexArrayFormat_C_get_class_type_i_v() {
    return ((GeomVertexArrayFormat::get_class_type)()).get_index();
}


void
GeomVertexArrayFormat_C_init_type_v_v() {
    (GeomVertexArrayFormat::init_type)();
}


int
GeomVertexArrayFormat_C_get_type_i_p(GeomVertexArrayFormat const *param0) {
    return (((*param0).get_type)()).get_index();
}


int
GeomVertexArrayFormat_C_force_init_type_i_p(GeomVertexArrayFormat *param0) {
    return (((*param0).force_init_type)()).get_index();
}


// GeomVertexColumn


GeomVertexColumn *
GeomVertexColumn_C_ctor_p_sippiiii(CPT_InternalName *param0, int param1, GeomEnums::NumericType param2, GeomEnums::Contents param3, int param4, int param5, int param6, int param7) {
    return new GeomVertexColumn(*param0, param1, param2, param3, param4, param5, param6, param7);
}


GeomVertexColumn *
GeomVertexColumn_C_ctor_p_sippiii(CPT_InternalName *param0, int param1, GeomEnums::NumericType param2, GeomEnums::Contents param3, int param4, int param5, int param6) {
    return new GeomVertexColumn(*param0, param1, param2, param3, param4, param5, param6);
}


GeomVertexColumn *
GeomVertexColumn_C_ctor_p_sippii(CPT_InternalName *param0, int param1, GeomEnums::NumericType param2, GeomEnums::Contents param3, int param4, int param5) {
    return new GeomVertexColumn(*param0, param1, param2, param3, param4, param5);
}


GeomVertexColumn *
GeomVertexColumn_C_ctor_p_sippi(CPT_InternalName *param0, int param1, GeomEnums::NumericType param2, GeomEnums::Contents param3, int param4) {
    return new GeomVertexColumn(*param0, param1, param2, param3, param4);
}


GeomVertexColumn *
GeomVertexColumn_C_ctor_p_p(GeomVertexColumn const *param0) {
    return new GeomVertexColumn(*param0);
}


InternalName const *
GeomVertexColumn_C_get_name_s_p(GeomVertexColumn const *param0) {
    return ((*param0).get_name)();
}


int
GeomVertexColumn_C_get_num_components_i_p(GeomVertexColumn const *param0) {
    return ((*param0).get_num_components)();
}


int
GeomVertexColumn_C_get_num_values_i_p(GeomVertexColumn const *param0) {
    return ((*param0).get_num_values)();
}


int
GeomVertexColumn_C_get_num_elements_i_p(GeomVertexColumn const *param0) {
    return ((*param0).get_num_elements)();
}


GeomEnums::NumericType
GeomVertexColumn_C_get_numeric_type_p_p(GeomVertexColumn const *param0) {
    return ((*param0).get_numeric_type)();
}


GeomEnums::Contents
GeomVertexColumn_C_get_contents_p_p(GeomVertexColumn const *param0) {
    return ((*param0).get_contents)();
}


int
GeomVertexColumn_C_get_start_i_p(GeomVertexColumn const *param0) {
    return ((*param0).get_start)();
}


int
GeomVertexColumn_C_get_column_alignment_i_p(GeomVertexColumn const *param0) {
    return ((*param0).get_column_alignment)();
}


int
GeomVertexColumn_C_get_element_stride_i_p(GeomVertexColumn const *param0) {
    return ((*param0).get_element_stride)();
}


int
GeomVertexColumn_C_get_component_bytes_i_p(GeomVertexColumn const *param0) {
    return ((*param0).get_component_bytes)();
}


int
GeomVertexColumn_C_get_total_bytes_i_p(GeomVertexColumn const *param0) {
    return ((*param0).get_total_bytes)();
}


bool
GeomVertexColumn_C_has_homogeneous_coord_B_p(GeomVertexColumn const *param0) {
    return ((*param0).has_homogeneous_coord)();
}


bool
GeomVertexColumn_C_overlaps_with_B_pii(GeomVertexColumn const *param0, int param1, int param2) {
    return ((*param0).overlaps_with)(param1, param2);
}


bool
GeomVertexColumn_C_is_bytewise_equivalent_B_pp(GeomVertexColumn const *param0, GeomVertexColumn const *param1) {
    return ((*param0).is_bytewise_equivalent)(*param1);
}


void
GeomVertexColumn_C_set_name_v_pp(GeomVertexColumn *param0, InternalName *param1) {
    ((*param0).set_name)(param1);
}


void
GeomVertexColumn_C_set_num_components_v_pi(GeomVertexColumn *param0, int param1) {
    ((*param0).set_num_components)(param1);
}


void
GeomVertexColumn_C_set_numeric_type_v_pp(GeomVertexColumn *param0, GeomEnums::NumericType param1) {
    ((*param0).set_numeric_type)(param1);
}


void
GeomVertexColumn_C_set_contents_v_pp(GeomVertexColumn *param0, GeomEnums::Contents param1) {
    ((*param0).set_contents)(param1);
}


void
GeomVertexColumn_C_set_start_v_pi(GeomVertexColumn *param0, int param1) {
    ((*param0).set_start)(param1);
}


void
GeomVertexColumn_C_set_column_alignment_v_pi(GeomVertexColumn *param0, int param1) {
    ((*param0).set_column_alignment)(param1);
}


void
GeomVertexColumn_C_output_v_pp(GeomVertexColumn const *param0, std::ostream *param1) {
    ((*param0).output)(*param1);
}


bool
GeomVertexColumn_C_is_packed_argb_B_p(GeomVertexColumn const *param0) {
    return ((*param0).is_packed_argb)();
}


bool
GeomVertexColumn_C_is_uint8_rgba_B_p(GeomVertexColumn const *param0) {
    return ((*param0).is_uint8_rgba)();
}


int
GeomVertexColumn_C_compare_to_i_pp(GeomVertexColumn const *param0, GeomVertexColumn const *param1) {
    return ((*param0).compare_to)(*param1);
}


void
GeomVertexColumn_C_write_datagram_v_ppp(GeomVertexColumn *param0, BamWriter *param1, Datagram *param2) {
    ((*param0).write_datagram)(param1, *param2);
}


void
GeomVertexColumn_C_fillin_v_ppp(GeomVertexColumn *param0, DatagramIterator *param1, BamReader *param2) {
    ((*param0).fillin)(*param1, param2);
}


// GeomVertexData


CopyOnWriteObject *
GeomVertexData_C_upcast_to_CopyOnWriteObject_p_p(GeomVertexData *param0) {
    return (CopyOnWriteObject *)param0;
}


GeomEnums *
GeomVertexData_C_upcast_to_GeomEnums_p_p(GeomVertexData *param0) {
    return (GeomEnums *)param0;
}


GeomVertexData *
GeomVertexData_C_ctor_p_p(GeomVertexData const *param0) {
    return new GeomVertexData(*param0);
}


GeomVertexData *
GeomVertexData_C_ctor_p_pp(GeomVertexData const *param0, GeomVertexFormat const *param1) {
    return new GeomVertexData(*param0, param1);
}


GeomVertexData *
GeomVertexData_C_ctor_p_spp(char const *param0, GeomVertexFormat const *param1, GeomEnums::UsageHint param2) {
    return new GeomVertexData(std::string(param0), param1, param2);
}


int
GeomVertexData_C_compare_to_i_pp(GeomVertexData const *param0, GeomVertexData const *param1) {
    return ((*param0).compare_to)(*param1);
}


char const *
GeomVertexData_C_get_name_s_p(GeomVertexData const *param0) {
    return (((*param0).get_name)()).c_str();
}


void
GeomVertexData_C_set_name_v_ps(GeomVertexData *param0, char const *param1) {
    ((*param0).set_name)(std::string(param1));
}


GeomEnums::UsageHint
GeomVertexData_C_get_usage_hint_p_p(GeomVertexData const *param0) {
    return ((*param0).get_usage_hint)();
}


void
GeomVertexData_C_set_usage_hint_v_pp(GeomVertexData *param0, GeomEnums::UsageHint param1) {
    ((*param0).set_usage_hint)(param1);
}


GeomVertexFormat const *
GeomVertexData_C_get_format_p_p(GeomVertexData const *param0) {
    return ((*param0).get_format)();
}


void
GeomVertexData_C_set_format_v_pp(GeomVertexData *param0, GeomVertexFormat const *param1) {
    ((*param0).set_format)(param1);
}


void
GeomVertexData_C_unclean_set_format_v_pp(GeomVertexData *param0, GeomVertexFormat const *param1) {
    ((*param0).unclean_set_format)(param1);
}


bool
GeomVertexData_C_has_column_B_ps(GeomVertexData const *param0, InternalName const *param1) {
    return ((*param0).has_column)(param1);
}


int
GeomVertexData_C_get_num_rows_i_p(GeomVertexData const *param0) {
    return ((*param0).get_num_rows)();
}


bool
GeomVertexData_C_set_num_rows_B_pi(GeomVertexData *param0, int param1) {
    return ((*param0).set_num_rows)(param1);
}


bool
GeomVertexData_C_unclean_set_num_rows_B_pi(GeomVertexData *param0, int param1) {
    return ((*param0).unclean_set_num_rows)(param1);
}


bool
GeomVertexData_C_reserve_num_rows_B_pi(GeomVertexData *param0, int param1) {
    return ((*param0).reserve_num_rows)(param1);
}


void
GeomVertexData_C_clear_rows_v_p(GeomVertexData *param0) {
    ((*param0).clear_rows)();
}


std::size_t
GeomVertexData_C_get_num_arrays_l_p(GeomVertexData const *param0) {
    return ((*param0).get_num_arrays)();
}


ConstPointerTo< GeomVertexArrayData > *
GeomVertexData_C_get_array_p_pl(GeomVertexData const *param0, std::size_t param1) {
    return new ConstPointerTo< GeomVertexArrayData >(((*param0).get_array)(param1));
}


ConstPointerTo< GeomVertexArrayDataHandle > *
GeomVertexData_C_get_array_handle_p_pl(GeomVertexData const *param0, std::size_t param1) {
    return new ConstPointerTo< GeomVertexArrayDataHandle >(((*param0).get_array_handle)(param1));
}


PointerTo< GeomVertexArrayData > *
GeomVertexData_C_modify_array_p_pl(GeomVertexData *param0, std::size_t param1) {
    return new PointerTo< GeomVertexArrayData >(((*param0).modify_array)(param1));
}


PointerTo< GeomVertexArrayDataHandle > *
GeomVertexData_C_modify_array_handle_p_pl(GeomVertexData *param0, std::size_t param1) {
    return new PointerTo< GeomVertexArrayDataHandle >(((*param0).modify_array_handle)(param1));
}


void
GeomVertexData_C_set_array_v_plp(GeomVertexData *param0, std::size_t param1, GeomVertexArrayData const *param2) {
    ((*param0).set_array)(param1, param2);
}


TransformTable const *
GeomVertexData_C_get_transform_table_p_p(GeomVertexData const *param0) {
    return ((*param0).get_transform_table)();
}


void
GeomVertexData_C_set_transform_table_v_pp(GeomVertexData *param0, TransformTable const *param1) {
    ((*param0).set_transform_table)(param1);
}


void
GeomVertexData_C_clear_transform_table_v_p(GeomVertexData *param0) {
    ((*param0).clear_transform_table)();
}


ConstPointerTo< TransformBlendTable > *
GeomVertexData_C_get_transform_blend_table_p_p(GeomVertexData const *param0) {
    return new ConstPointerTo< TransformBlendTable >(((*param0).get_transform_blend_table)());
}


PointerTo< TransformBlendTable > *
GeomVertexData_C_modify_transform_blend_table_p_p(GeomVertexData *param0) {
    return new PointerTo< TransformBlendTable >(((*param0).modify_transform_blend_table)());
}


void
GeomVertexData_C_set_transform_blend_table_v_pp(GeomVertexData *param0, TransformBlendTable const *param1) {
    ((*param0).set_transform_blend_table)(param1);
}


void
GeomVertexData_C_clear_transform_blend_table_v_p(GeomVertexData *param0) {
    ((*param0).clear_transform_blend_table)();
}


SliderTable const *
GeomVertexData_C_get_slider_table_p_p(GeomVertexData const *param0) {
    return ((*param0).get_slider_table)();
}


void
GeomVertexData_C_set_slider_table_v_pp(GeomVertexData *param0, SliderTable const *param1) {
    ((*param0).set_slider_table)(param1);
}


void
GeomVertexData_C_clear_slider_table_v_p(GeomVertexData *param0) {
    ((*param0).clear_slider_table)();
}


int
GeomVertexData_C_get_num_bytes_i_p(GeomVertexData const *param0) {
    return ((*param0).get_num_bytes)();
}


UpdateSeq *
GeomVertexData_C_get_modified_p_pp(GeomVertexData const *param0, Thread *param1) {
    return new UpdateSeq(((*param0).get_modified)(param1));
}


UpdateSeq *
GeomVertexData_C_get_modified_p_p(GeomVertexData const *param0) {
    return new UpdateSeq(((*param0).get_modified)());
}


bool
GeomVertexData_C_request_resident_B_p(GeomVertexData const *param0) {
    return ((*param0).request_resident)();
}


void
GeomVertexData_C_copy_from_v_ppBp(GeomVertexData *param0, GeomVertexData const *param1, bool param2, Thread *param3) {
    ((*param0).copy_from)(param1, param2, param3);
}


void
GeomVertexData_C_copy_from_v_ppB(GeomVertexData *param0, GeomVertexData const *param1, bool param2) {
    ((*param0).copy_from)(param1, param2);
}


void
GeomVertexData_C_copy_row_from_v_pipip(GeomVertexData *param0, int param1, GeomVertexData const *param2, int param3, Thread *param4) {
    ((*param0).copy_row_from)(param1, param2, param3, param4);
}


ConstPointerTo< GeomVertexData > *
GeomVertexData_C_convert_to_p_pp(GeomVertexData const *param0, GeomVertexFormat const *param1) {
    return new ConstPointerTo< GeomVertexData >(((*param0).convert_to)(param1));
}


ConstPointerTo< GeomVertexData > *
GeomVertexData_C_scale_color_p_pp(GeomVertexData const *param0, LVecBase4 const *param1) {
    return new ConstPointerTo< GeomVertexData >(((*param0).scale_color)(*param1));
}


ConstPointerTo< GeomVertexData > *
GeomVertexData_C_scale_color_p_ppipp(GeomVertexData const *param0, LVecBase4 const *param1, int param2, GeomEnums::NumericType param3, GeomEnums::Contents param4) {
    return new ConstPointerTo< GeomVertexData >(((*param0).scale_color)(*param1, param2, param3, param4));
}


ConstPointerTo< GeomVertexData > *
GeomVertexData_C_set_color_p_pp(GeomVertexData const *param0, LColor const *param1) {
    return new ConstPointerTo< GeomVertexData >(((*param0).set_color)(*param1));
}


ConstPointerTo< GeomVertexData > *
GeomVertexData_C_set_color_p_ppipp(GeomVertexData const *param0, LColor const *param1, int param2, GeomEnums::NumericType param3, GeomEnums::Contents param4) {
    return new ConstPointerTo< GeomVertexData >(((*param0).set_color)(*param1, param2, param3, param4));
}


ConstPointerTo< GeomVertexData > *
GeomVertexData_C_reverse_normals_p_p(GeomVertexData const *param0) {
    return new ConstPointerTo< GeomVertexData >(((*param0).reverse_normals)());
}


ConstPointerTo< GeomVertexData > *
GeomVertexData_C_animate_vertices_p_pBp(GeomVertexData const *param0, bool param1, Thread *param2) {
    return new ConstPointerTo< GeomVertexData >(((*param0).animate_vertices)(param1, param2));
}


void
GeomVertexData_C_clear_animated_vertices_v_p(GeomVertexData *param0) {
    ((*param0).clear_animated_vertices)();
}


void
GeomVertexData_C_transform_vertices_v_pp(GeomVertexData *param0, LMatrix4 const *param1) {
    ((*param0).transform_vertices)(*param1);
}


void
GeomVertexData_C_transform_vertices_v_ppp(GeomVertexData *param0, LMatrix4 const *param1, SparseArray const *param2) {
    ((*param0).transform_vertices)(*param1, *param2);
}


void
GeomVertexData_C_transform_vertices_v_ppii(GeomVertexData *param0, LMatrix4 const *param1, int param2, int param3) {
    ((*param0).transform_vertices)(*param1, param2, param3);
}


PointerTo< GeomVertexData > *
GeomVertexData_C_replace_column_p_ppipp(GeomVertexData const *param0, InternalName *param1, int param2, GeomEnums::NumericType param3, GeomEnums::Contents param4) {
    return new PointerTo< GeomVertexData >(((*param0).replace_column)(param1, param2, param3, param4));
}


void
GeomVertexData_C_output_v_pp(GeomVertexData const *param0, std::ostream *param1) {
    ((*param0).output)(*param1);
}


void
GeomVertexData_C_write_v_ppi(GeomVertexData const *param0, std::ostream *param1, int param2) {
    ((*param0).write)(*param1, param2);
}


void
GeomVertexData_C_write_v_pp(GeomVertexData const *param0, std::ostream *param1) {
    ((*param0).write)(*param1);
}


void
GeomVertexData_C_describe_vertex_v_ppi(GeomVertexData const *param0, std::ostream *param1, int param2) {
    ((*param0).describe_vertex)(*param1, param2);
}


void
GeomVertexData_C_clear_cache_v_p(GeomVertexData *param0) {
    ((*param0).clear_cache)();
}


void
GeomVertexData_C_clear_cache_stage_v_p(GeomVertexData *param0) {
    ((*param0).clear_cache_stage)();
}


uint32_t
GeomVertexData_C_pack_abcd_I_IIII(unsigned int param0, unsigned int param1, unsigned int param2, unsigned int param3) {
    return (GeomVertexData::pack_abcd)(param0, param1, param2, param3);
}


unsigned int
GeomVertexData_C_unpack_abcd_a_I_I(uint32_t param0) {
    return (GeomVertexData::unpack_abcd_a)(param0);
}


unsigned int
GeomVertexData_C_unpack_abcd_b_I_I(uint32_t param0) {
    return (GeomVertexData::unpack_abcd_b)(param0);
}


unsigned int
GeomVertexData_C_unpack_abcd_c_I_I(uint32_t param0) {
    return (GeomVertexData::unpack_abcd_c)(param0);
}


unsigned int
GeomVertexData_C_unpack_abcd_d_I_I(uint32_t param0) {
    return (GeomVertexData::unpack_abcd_d)(param0);
}


uint32_t
GeomVertexData_C_pack_ufloat_I_fff(float param0, float param1, float param2) {
    return (GeomVertexData::pack_ufloat)(param0, param1, param2);
}


float
GeomVertexData_C_unpack_ufloat_a_f_I(uint32_t param0) {
    return (GeomVertexData::unpack_ufloat_a)(param0);
}


float
GeomVertexData_C_unpack_ufloat_b_f_I(uint32_t param0) {
    return (GeomVertexData::unpack_ufloat_b)(param0);
}


float
GeomVertexData_C_unpack_ufloat_c_f_I(uint32_t param0) {
    return (GeomVertexData::unpack_ufloat_c)(param0);
}


void
GeomVertexData_C_register_with_read_factory_v_v() {
    (GeomVertexData::register_with_read_factory)();
}


void
GeomVertexData_C_write_datagram_v_ppp(GeomVertexData *param0, BamWriter *param1, Datagram *param2) {
    ((*param0).write_datagram)(param1, *param2);
}


bool
GeomVertexData_C_require_fully_complete_B_p(GeomVertexData const *param0) {
    return ((*param0).require_fully_complete)();
}


void
GeomVertexData_C_finalize_v_pp(GeomVertexData *param0, BamReader *param1) {
    ((*param0).finalize)(param1);
}


int
GeomVertexData_C_get_class_type_i_v() {
    return ((GeomVertexData::get_class_type)()).get_index();
}


void
GeomVertexData_C_init_type_v_v() {
    (GeomVertexData::init_type)();
}


int
GeomVertexData_C_get_type_i_p(GeomVertexData const *param0) {
    return (((*param0).get_type)()).get_index();
}


int
GeomVertexData_C_force_init_type_i_p(GeomVertexData *param0) {
    return (((*param0).force_init_type)()).get_index();
}


// GeomVertexFormat


TypedWritableReferenceCount *
GeomVertexFormat_C_upcast_to_TypedWritableReferenceCount_p_p(GeomVertexFormat *param0) {
    return (TypedWritableReferenceCount *)param0;
}


GeomEnums *
GeomVertexFormat_C_upcast_to_GeomEnums_p_p(GeomVertexFormat *param0) {
    return (GeomEnums *)param0;
}


GeomVertexFormat *
GeomVertexFormat_C_ctor_p_v() {
    return new GeomVertexFormat();
}


GeomVertexFormat *
GeomVertexFormat_C_ctor_p_p(GeomVertexArrayFormat const *param0) {
    return new GeomVertexFormat(param0);
}


GeomVertexFormat *
GeomVertexFormat_C_ctor_p_p_1_p_p(GeomVertexFormat const *param0) {
    return new GeomVertexFormat(*param0);
}


bool
GeomVertexFormat_C_unref_B_p(GeomVertexFormat const *param0) {
    return ((*param0).unref)();
}


bool
GeomVertexFormat_C_is_registered_B_p(GeomVertexFormat const *param0) {
    return ((*param0).is_registered)();
}


ConstPointerTo< GeomVertexFormat > *
GeomVertexFormat_C_register_format_p_p(GeomVertexArrayFormat const *param0) {
    return new ConstPointerTo< GeomVertexFormat >((GeomVertexFormat::register_format)(param0));
}


ConstPointerTo< GeomVertexFormat > *
GeomVertexFormat_C_register_format_p_p_1_p_p(GeomVertexFormat const *param0) {
    return new ConstPointerTo< GeomVertexFormat >((GeomVertexFormat::register_format)(param0));
}


GeomVertexAnimationSpec const *
GeomVertexFormat_C_get_animation_p_p(GeomVertexFormat const *param0) {
    return &(((*param0).get_animation)());
}


void
GeomVertexFormat_C_set_animation_v_pp(GeomVertexFormat *param0, GeomVertexAnimationSpec const *param1) {
    ((*param0).set_animation)(*param1);
}


ConstPointerTo< GeomVertexFormat > *
GeomVertexFormat_C_get_post_animated_format_p_p(GeomVertexFormat const *param0) {
    return new ConstPointerTo< GeomVertexFormat >(((*param0).get_post_animated_format)());
}


ConstPointerTo< GeomVertexFormat > *
GeomVertexFormat_C_get_union_format_p_pp(GeomVertexFormat const *param0, GeomVertexFormat const *param1) {
    return new ConstPointerTo< GeomVertexFormat >(((*param0).get_union_format)(param1));
}


std::size_t
GeomVertexFormat_C_get_num_arrays_l_p(GeomVertexFormat const *param0) {
    return ((*param0).get_num_arrays)();
}


GeomVertexArrayFormat const *
GeomVertexFormat_C_get_array_p_pl(GeomVertexFormat const *param0, std::size_t param1) {
    return ((*param0).get_array)(param1);
}


GeomVertexArrayFormat *
GeomVertexFormat_C_modify_array_p_pl(GeomVertexFormat *param0, std::size_t param1) {
    return ((*param0).modify_array)(param1);
}


void
GeomVertexFormat_C_set_array_v_plp(GeomVertexFormat *param0, std::size_t param1, GeomVertexArrayFormat const *param2) {
    ((*param0).set_array)(param1, param2);
}


void
GeomVertexFormat_C_remove_array_v_pl(GeomVertexFormat *param0, std::size_t param1) {
    ((*param0).remove_array)(param1);
}


std::size_t
GeomVertexFormat_C_add_array_l_pp(GeomVertexFormat *param0, GeomVertexArrayFormat const *param1) {
    return ((*param0).add_array)(param1);
}


void
GeomVertexFormat_C_insert_array_v_plp(GeomVertexFormat *param0, std::size_t param1, GeomVertexArrayFormat const *param2) {
    ((*param0).insert_array)(param1, param2);
}


void
GeomVertexFormat_C_clear_arrays_v_p(GeomVertexFormat *param0) {
    ((*param0).clear_arrays)();
}


void
GeomVertexFormat_C_remove_empty_arrays_v_p(GeomVertexFormat *param0) {
    ((*param0).remove_empty_arrays)();
}


std::size_t
GeomVertexFormat_C_get_num_columns_l_p(GeomVertexFormat const *param0) {
    return ((*param0).get_num_columns)();
}


int
GeomVertexFormat_C_get_array_with_i_ps(GeomVertexFormat const *param0, InternalName const *param1) {
    return ((*param0).get_array_with)(param1);
}


int
GeomVertexFormat_C_get_array_with_i_pl(GeomVertexFormat const *param0, std::size_t param1) {
    return ((*param0).get_array_with)(param1);
}


GeomVertexColumn const *
GeomVertexFormat_C_get_column_p_ps(GeomVertexFormat const *param0, InternalName const *param1) {
    return ((*param0).get_column)(param1);
}


GeomVertexColumn const *
GeomVertexFormat_C_get_column_p_pl(GeomVertexFormat const *param0, std::size_t param1) {
    return ((*param0).get_column)(param1);
}


bool
GeomVertexFormat_C_has_column_B_ps(GeomVertexFormat const *param0, InternalName const *param1) {
    return ((*param0).has_column)(param1);
}


InternalName const *
GeomVertexFormat_C_get_column_name_s_pl(GeomVertexFormat const *param0, std::size_t param1) {
    return ((*param0).get_column_name)(param1);
}


void
GeomVertexFormat_C_remove_column_v_psB(GeomVertexFormat *param0, InternalName const *param1, bool param2) {
    ((*param0).remove_column)(param1, param2);
}


void
GeomVertexFormat_C_remove_column_v_ps(GeomVertexFormat *param0, InternalName const *param1) {
    ((*param0).remove_column)(param1);
}


void
GeomVertexFormat_C_pack_columns_v_p(GeomVertexFormat *param0) {
    ((*param0).pack_columns)();
}


void
GeomVertexFormat_C_align_columns_for_animation_v_p(GeomVertexFormat *param0) {
    ((*param0).align_columns_for_animation)();
}


void
GeomVertexFormat_C_maybe_align_columns_for_animation_v_p(GeomVertexFormat *param0) {
    ((*param0).maybe_align_columns_for_animation)();
}


std::size_t
GeomVertexFormat_C_get_num_points_l_p(GeomVertexFormat const *param0) {
    return ((*param0).get_num_points)();
}


InternalName const *
GeomVertexFormat_C_get_point_s_pl(GeomVertexFormat const *param0, std::size_t param1) {
    return ((*param0).get_point)(param1);
}


std::size_t
GeomVertexFormat_C_get_num_vectors_l_p(GeomVertexFormat const *param0) {
    return ((*param0).get_num_vectors)();
}


InternalName const *
GeomVertexFormat_C_get_vector_s_pl(GeomVertexFormat const *param0, std::size_t param1) {
    return ((*param0).get_vector)(param1);
}


std::size_t
GeomVertexFormat_C_get_num_texcoords_l_p(GeomVertexFormat const *param0) {
    return ((*param0).get_num_texcoords)();
}


InternalName const *
GeomVertexFormat_C_get_texcoord_s_pl(GeomVertexFormat const *param0, std::size_t param1) {
    return ((*param0).get_texcoord)(param1);
}


std::size_t
GeomVertexFormat_C_get_num_morphs_l_p(GeomVertexFormat const *param0) {
    return ((*param0).get_num_morphs)();
}


InternalName const *
GeomVertexFormat_C_get_morph_slider_s_pl(GeomVertexFormat const *param0, std::size_t param1) {
    return ((*param0).get_morph_slider)(param1);
}


InternalName const *
GeomVertexFormat_C_get_morph_base_s_pl(GeomVertexFormat const *param0, std::size_t param1) {
    return ((*param0).get_morph_base)(param1);
}


InternalName const *
GeomVertexFormat_C_get_morph_delta_s_pl(GeomVertexFormat const *param0, std::size_t param1) {
    return ((*param0).get_morph_delta)(param1);
}


void
GeomVertexFormat_C_output_v_pp(GeomVertexFormat const *param0, std::ostream *param1) {
    ((*param0).output)(*param1);
}


void
GeomVertexFormat_C_write_v_ppi(GeomVertexFormat const *param0, std::ostream *param1, int param2) {
    ((*param0).write)(*param1, param2);
}


void
GeomVertexFormat_C_write_v_pp(GeomVertexFormat const *param0, std::ostream *param1) {
    ((*param0).write)(*param1);
}


void
GeomVertexFormat_C_write_with_data_v_ppip(GeomVertexFormat const *param0, std::ostream *param1, int param2, GeomVertexData const *param3) {
    ((*param0).write_with_data)(*param1, param2, param3);
}


GeomVertexFormat const *
GeomVertexFormat_C_get_empty_p_v() {
    return (GeomVertexFormat::get_empty)();
}


GeomVertexFormat const *
GeomVertexFormat_C_get_v3_p_v() {
    return (GeomVertexFormat::get_v3)();
}


GeomVertexFormat const *
GeomVertexFormat_C_get_v3n3_p_v() {
    return (GeomVertexFormat::get_v3n3)();
}


GeomVertexFormat const *
GeomVertexFormat_C_get_v3t2_p_v() {
    return (GeomVertexFormat::get_v3t2)();
}


GeomVertexFormat const *
GeomVertexFormat_C_get_v3n3t2_p_v() {
    return (GeomVertexFormat::get_v3n3t2)();
}


GeomVertexFormat const *
GeomVertexFormat_C_get_v3cp_p_v() {
    return (GeomVertexFormat::get_v3cp)();
}


GeomVertexFormat const *
GeomVertexFormat_C_get_v3cpt2_p_v() {
    return (GeomVertexFormat::get_v3cpt2)();
}


GeomVertexFormat const *
GeomVertexFormat_C_get_v3n3cp_p_v() {
    return (GeomVertexFormat::get_v3n3cp)();
}


GeomVertexFormat const *
GeomVertexFormat_C_get_v3n3cpt2_p_v() {
    return (GeomVertexFormat::get_v3n3cpt2)();
}


GeomVertexFormat const *
GeomVertexFormat_C_get_v3c4_p_v() {
    return (GeomVertexFormat::get_v3c4)();
}


GeomVertexFormat const *
GeomVertexFormat_C_get_v3c4t2_p_v() {
    return (GeomVertexFormat::get_v3c4t2)();
}


GeomVertexFormat const *
GeomVertexFormat_C_get_v3n3c4_p_v() {
    return (GeomVertexFormat::get_v3n3c4)();
}


GeomVertexFormat const *
GeomVertexFormat_C_get_v3n3c4t2_p_v() {
    return (GeomVertexFormat::get_v3n3c4t2)();
}


int
GeomVertexFormat_C_get_vertex_array_index_i_p(GeomVertexFormat const *param0) {
    return ((*param0).get_vertex_array_index)();
}


GeomVertexColumn const *
GeomVertexFormat_C_get_vertex_column_p_p(GeomVertexFormat const *param0) {
    return ((*param0).get_vertex_column)();
}


int
GeomVertexFormat_C_get_normal_array_index_i_p(GeomVertexFormat const *param0) {
    return ((*param0).get_normal_array_index)();
}


GeomVertexColumn const *
GeomVertexFormat_C_get_normal_column_p_p(GeomVertexFormat const *param0) {
    return ((*param0).get_normal_column)();
}


int
GeomVertexFormat_C_get_color_array_index_i_p(GeomVertexFormat const *param0) {
    return ((*param0).get_color_array_index)();
}


GeomVertexColumn const *
GeomVertexFormat_C_get_color_column_p_p(GeomVertexFormat const *param0) {
    return ((*param0).get_color_column)();
}


int
GeomVertexFormat_C_compare_to_i_pp(GeomVertexFormat const *param0, GeomVertexFormat const *param1) {
    return ((*param0).compare_to)(*param1);
}


void
GeomVertexFormat_C_register_with_read_factory_v_v() {
    (GeomVertexFormat::register_with_read_factory)();
}


void
GeomVertexFormat_C_write_datagram_v_ppp(GeomVertexFormat *param0, BamWriter *param1, Datagram *param2) {
    ((*param0).write_datagram)(param1, *param2);
}


int
GeomVertexFormat_C_get_class_type_i_v() {
    return ((GeomVertexFormat::get_class_type)()).get_index();
}


void
GeomVertexFormat_C_init_type_v_v() {
    (GeomVertexFormat::init_type)();
}


int
GeomVertexFormat_C_get_type_i_p(GeomVertexFormat const *param0) {
    return (((*param0).get_type)()).get_index();
}


int
GeomVertexFormat_C_force_init_type_i_p(GeomVertexFormat *param0) {
    return (((*param0).force_init_type)()).get_index();
}


// GeomVertexWriter


GeomVertexWriter *
GeomVertexWriter_C_ctor_p_pp(GeomVertexArrayData *param0, Thread *param1) {
    return new GeomVertexWriter(param0, param1);
}


GeomVertexWriter *
GeomVertexWriter_C_ctor_p_p(GeomVertexArrayData *param0) {
    return new GeomVertexWriter(param0);
}


GeomVertexWriter *
GeomVertexWriter_C_ctor_p_pip(GeomVertexArrayData *param0, int param1, Thread *param2) {
    return new GeomVertexWriter(param0, param1, param2);
}


GeomVertexWriter *
GeomVertexWriter_C_ctor_p_pi(GeomVertexArrayData *param0, int param1) {
    return new GeomVertexWriter(param0, param1);
}


GeomVertexWriter *
GeomVertexWriter_C_ctor_p_psp(GeomVertexData *param0, CPT_InternalName *param1, Thread *param2) {
    return new GeomVertexWriter(param0, *param1, param2);
}


GeomVertexWriter *
GeomVertexWriter_C_ctor_p_ps(GeomVertexData *param0, CPT_InternalName *param1) {
    return new GeomVertexWriter(param0, *param1);
}


GeomVertexWriter *
GeomVertexWriter_C_ctor_p_pp_1_p_pp(GeomVertexData *param0, Thread *param1) {
    return new GeomVertexWriter(param0, param1);
}


GeomVertexWriter *
GeomVertexWriter_C_ctor_p_p_1_p_p(GeomVertexData *param0) {
    return new GeomVertexWriter(param0);
}


GeomVertexWriter *
GeomVertexWriter_C_ctor_p_ps_1_p_ps(GeomVertexDataPipelineWriter *param0, InternalName const *param1) {
    return new GeomVertexWriter(param0, param1);
}


GeomVertexWriter *
GeomVertexWriter_C_ctor_p_p_1_p_p_2_p_p(GeomVertexWriter const *param0) {
    return new GeomVertexWriter(*param0);
}


GeomVertexWriter *
GeomVertexWriter_C_ctor_p_p_1_p_p_2_p_p_3_p_p(Thread *param0) {
    return new GeomVertexWriter(param0);
}


GeomVertexWriter *
GeomVertexWriter_C_ctor_p_v() {
    return new GeomVertexWriter();
}


GeomVertexData *
GeomVertexWriter_C_get_vertex_data_p_p(GeomVertexWriter const *param0) {
    return ((*param0).get_vertex_data)();
}


GeomVertexArrayData *
GeomVertexWriter_C_get_array_data_p_p(GeomVertexWriter const *param0) {
    return ((*param0).get_array_data)();
}


GeomVertexArrayDataHandle *
GeomVertexWriter_C_get_array_handle_p_p(GeomVertexWriter const *param0) {
    return ((*param0).get_array_handle)();
}


std::size_t
GeomVertexWriter_C_get_stride_l_p(GeomVertexWriter const *param0) {
    return ((*param0).get_stride)();
}


Thread *
GeomVertexWriter_C_get_current_thread_p_p(GeomVertexWriter const *param0) {
    return ((*param0).get_current_thread)();
}


bool
GeomVertexWriter_C_set_column_B_ps(GeomVertexWriter *param0, CPT_InternalName *param1) {
    return ((*param0).set_column)(*param1);
}


bool
GeomVertexWriter_C_set_column_B_pi(GeomVertexWriter *param0, int param1) {
    return ((*param0).set_column)(param1);
}


bool
GeomVertexWriter_C_set_column_B_pip(GeomVertexWriter *param0, int param1, GeomVertexColumn const *param2) {
    return ((*param0).set_column)(param1, param2);
}


void
GeomVertexWriter_C_clear_v_p(GeomVertexWriter *param0) {
    ((*param0).clear)();
}


bool
GeomVertexWriter_C_reserve_num_rows_B_pi(GeomVertexWriter *param0, int param1) {
    return ((*param0).reserve_num_rows)(param1);
}


bool
GeomVertexWriter_C_has_column_B_p(GeomVertexWriter const *param0) {
    return ((*param0).has_column)();
}


int
GeomVertexWriter_C_get_array_i_p(GeomVertexWriter const *param0) {
    return ((*param0).get_array)();
}


GeomVertexColumn const *
GeomVertexWriter_C_get_column_p_p(GeomVertexWriter const *param0) {
    return ((*param0).get_column)();
}


void
GeomVertexWriter_C_set_row_unsafe_v_pi(GeomVertexWriter *param0, int param1) {
    ((*param0).set_row_unsafe)(param1);
}


void
GeomVertexWriter_C_set_row_v_pi(GeomVertexWriter *param0, int param1) {
    ((*param0).set_row)(param1);
}


int
GeomVertexWriter_C_get_start_row_i_p(GeomVertexWriter const *param0) {
    return ((*param0).get_start_row)();
}


int
GeomVertexWriter_C_get_write_row_i_p(GeomVertexWriter const *param0) {
    return ((*param0).get_write_row)();
}


bool
GeomVertexWriter_C_is_at_end_B_p(GeomVertexWriter const *param0) {
    return ((*param0).is_at_end)();
}


void
GeomVertexWriter_C_set_data1f_v_pf(GeomVertexWriter *param0, float param1) {
    ((*param0).set_data1f)(param1);
}


void
GeomVertexWriter_C_set_data2f_v_pp(GeomVertexWriter *param0, LVecBase2f const *param1) {
    ((*param0).set_data2f)(*param1);
}


void
GeomVertexWriter_C_set_data2f_v_pff(GeomVertexWriter *param0, float param1, float param2) {
    ((*param0).set_data2f)(param1, param2);
}


void
GeomVertexWriter_C_set_data3f_v_pp(GeomVertexWriter *param0, LVecBase3f const *param1) {
    ((*param0).set_data3f)(*param1);
}


void
GeomVertexWriter_C_set_data3f_v_pfff(GeomVertexWriter *param0, float param1, float param2, float param3) {
    ((*param0).set_data3f)(param1, param2, param3);
}


void
GeomVertexWriter_C_set_data4f_v_pp(GeomVertexWriter *param0, LVecBase4f const *param1) {
    ((*param0).set_data4f)(*param1);
}


void
GeomVertexWriter_C_set_data4f_v_pffff(GeomVertexWriter *param0, float param1, float param2, float param3, float param4) {
    ((*param0).set_data4f)(param1, param2, param3, param4);
}


void
GeomVertexWriter_C_set_matrix3f_v_pp(GeomVertexWriter *param0, LMatrix3f const *param1) {
    ((*param0).set_matrix3f)(*param1);
}


void
GeomVertexWriter_C_set_matrix4f_v_pp(GeomVertexWriter *param0, LMatrix4f const *param1) {
    ((*param0).set_matrix4f)(*param1);
}


void
GeomVertexWriter_C_set_data1d_v_pd(GeomVertexWriter *param0, double param1) {
    ((*param0).set_data1d)(param1);
}


void
GeomVertexWriter_C_set_data2d_v_pp(GeomVertexWriter *param0, LVecBase2d const *param1) {
    ((*param0).set_data2d)(*param1);
}


void
GeomVertexWriter_C_set_data2d_v_pdd(GeomVertexWriter *param0, double param1, double param2) {
    ((*param0).set_data2d)(param1, param2);
}


void
GeomVertexWriter_C_set_data3d_v_pp(GeomVertexWriter *param0, LVecBase3d const *param1) {
    ((*param0).set_data3d)(*param1);
}


void
GeomVertexWriter_C_set_data3d_v_pddd(GeomVertexWriter *param0, double param1, double param2, double param3) {
    ((*param0).set_data3d)(param1, param2, param3);
}


void
GeomVertexWriter_C_set_data4d_v_pp(GeomVertexWriter *param0, LVecBase4d const *param1) {
    ((*param0).set_data4d)(*param1);
}


void
GeomVertexWriter_C_set_data4d_v_pdddd(GeomVertexWriter *param0, double param1, double param2, double param3, double param4) {
    ((*param0).set_data4d)(param1, param2, param3, param4);
}


void
GeomVertexWriter_C_set_matrix3d_v_pp(GeomVertexWriter *param0, LMatrix3d const *param1) {
    ((*param0).set_matrix3d)(*param1);
}


void
GeomVertexWriter_C_set_matrix4d_v_pp(GeomVertexWriter *param0, LMatrix4d const *param1) {
    ((*param0).set_matrix4d)(*param1);
}


void
GeomVertexWriter_C_set_data1_v_pf(GeomVertexWriter *param0, PN_stdfloat param1) {
    ((*param0).set_data1)(param1);
}


void
GeomVertexWriter_C_set_data2_v_pp(GeomVertexWriter *param0, LVecBase2 const *param1) {
    ((*param0).set_data2)(*param1);
}


void
GeomVertexWriter_C_set_data2_v_pff(GeomVertexWriter *param0, PN_stdfloat param1, PN_stdfloat param2) {
    ((*param0).set_data2)(param1, param2);
}


void
GeomVertexWriter_C_set_data3_v_pp(GeomVertexWriter *param0, LVecBase3 const *param1) {
    ((*param0).set_data3)(*param1);
}


void
GeomVertexWriter_C_set_data3_v_pfff(GeomVertexWriter *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3) {
    ((*param0).set_data3)(param1, param2, param3);
}


void
GeomVertexWriter_C_set_data4_v_pp(GeomVertexWriter *param0, LVecBase4 const *param1) {
    ((*param0).set_data4)(*param1);
}


void
GeomVertexWriter_C_set_data4_v_pffff(GeomVertexWriter *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    ((*param0).set_data4)(param1, param2, param3, param4);
}


void
GeomVertexWriter_C_set_matrix3_v_pp(GeomVertexWriter *param0, LMatrix3 const *param1) {
    ((*param0).set_matrix3)(*param1);
}


void
GeomVertexWriter_C_set_matrix4_v_pp(GeomVertexWriter *param0, LMatrix4 const *param1) {
    ((*param0).set_matrix4)(*param1);
}


void
GeomVertexWriter_C_set_data1i_v_pi(GeomVertexWriter *param0, int param1) {
    ((*param0).set_data1i)(param1);
}


void
GeomVertexWriter_C_set_data2i_v_pp(GeomVertexWriter *param0, LVecBase2i const *param1) {
    ((*param0).set_data2i)(*param1);
}


void
GeomVertexWriter_C_set_data2i_v_pii(GeomVertexWriter *param0, int param1, int param2) {
    ((*param0).set_data2i)(param1, param2);
}


void
GeomVertexWriter_C_set_data3i_v_pp(GeomVertexWriter *param0, LVecBase3i const *param1) {
    ((*param0).set_data3i)(*param1);
}


void
GeomVertexWriter_C_set_data3i_v_piii(GeomVertexWriter *param0, int param1, int param2, int param3) {
    ((*param0).set_data3i)(param1, param2, param3);
}


void
GeomVertexWriter_C_set_data4i_v_pp(GeomVertexWriter *param0, LVecBase4i const *param1) {
    ((*param0).set_data4i)(*param1);
}


void
GeomVertexWriter_C_set_data4i_v_piiii(GeomVertexWriter *param0, int param1, int param2, int param3, int param4) {
    ((*param0).set_data4i)(param1, param2, param3, param4);
}


void
GeomVertexWriter_C_add_data1f_v_pf(GeomVertexWriter *param0, float param1) {
    ((*param0).add_data1f)(param1);
}


void
GeomVertexWriter_C_add_data2f_v_pp(GeomVertexWriter *param0, LVecBase2f const *param1) {
    ((*param0).add_data2f)(*param1);
}


void
GeomVertexWriter_C_add_data2f_v_pff(GeomVertexWriter *param0, float param1, float param2) {
    ((*param0).add_data2f)(param1, param2);
}


void
GeomVertexWriter_C_add_data3f_v_pp(GeomVertexWriter *param0, LVecBase3f const *param1) {
    ((*param0).add_data3f)(*param1);
}


void
GeomVertexWriter_C_add_data3f_v_pfff(GeomVertexWriter *param0, float param1, float param2, float param3) {
    ((*param0).add_data3f)(param1, param2, param3);
}


void
GeomVertexWriter_C_add_data4f_v_pp(GeomVertexWriter *param0, LVecBase4f const *param1) {
    ((*param0).add_data4f)(*param1);
}


void
GeomVertexWriter_C_add_data4f_v_pffff(GeomVertexWriter *param0, float param1, float param2, float param3, float param4) {
    ((*param0).add_data4f)(param1, param2, param3, param4);
}


void
GeomVertexWriter_C_add_matrix3f_v_pp(GeomVertexWriter *param0, LMatrix3f const *param1) {
    ((*param0).add_matrix3f)(*param1);
}


void
GeomVertexWriter_C_add_matrix4f_v_pp(GeomVertexWriter *param0, LMatrix4f const *param1) {
    ((*param0).add_matrix4f)(*param1);
}


void
GeomVertexWriter_C_add_data1d_v_pd(GeomVertexWriter *param0, double param1) {
    ((*param0).add_data1d)(param1);
}


void
GeomVertexWriter_C_add_data2d_v_pp(GeomVertexWriter *param0, LVecBase2d const *param1) {
    ((*param0).add_data2d)(*param1);
}


void
GeomVertexWriter_C_add_data2d_v_pdd(GeomVertexWriter *param0, double param1, double param2) {
    ((*param0).add_data2d)(param1, param2);
}


void
GeomVertexWriter_C_add_data3d_v_pp(GeomVertexWriter *param0, LVecBase3d const *param1) {
    ((*param0).add_data3d)(*param1);
}


void
GeomVertexWriter_C_add_data3d_v_pddd(GeomVertexWriter *param0, double param1, double param2, double param3) {
    ((*param0).add_data3d)(param1, param2, param3);
}


void
GeomVertexWriter_C_add_data4d_v_pp(GeomVertexWriter *param0, LVecBase4d const *param1) {
    ((*param0).add_data4d)(*param1);
}


void
GeomVertexWriter_C_add_data4d_v_pdddd(GeomVertexWriter *param0, double param1, double param2, double param3, double param4) {
    ((*param0).add_data4d)(param1, param2, param3, param4);
}


void
GeomVertexWriter_C_add_matrix3d_v_pp(GeomVertexWriter *param0, LMatrix3d const *param1) {
    ((*param0).add_matrix3d)(*param1);
}


void
GeomVertexWriter_C_add_matrix4d_v_pp(GeomVertexWriter *param0, LMatrix4d const *param1) {
    ((*param0).add_matrix4d)(*param1);
}


void
GeomVertexWriter_C_add_data1_v_pf(GeomVertexWriter *param0, PN_stdfloat param1) {
    ((*param0).add_data1)(param1);
}


void
GeomVertexWriter_C_add_data2_v_pp(GeomVertexWriter *param0, LVecBase2 const *param1) {
    ((*param0).add_data2)(*param1);
}


void
GeomVertexWriter_C_add_data2_v_pff(GeomVertexWriter *param0, PN_stdfloat param1, PN_stdfloat param2) {
    ((*param0).add_data2)(param1, param2);
}


void
GeomVertexWriter_C_add_data3_v_pp(GeomVertexWriter *param0, LVecBase3 const *param1) {
    ((*param0).add_data3)(*param1);
}


void
GeomVertexWriter_C_add_data3_v_pfff(GeomVertexWriter *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3) {
    ((*param0).add_data3)(param1, param2, param3);
}


void
GeomVertexWriter_C_add_data4_v_pp(GeomVertexWriter *param0, LVecBase4 const *param1) {
    ((*param0).add_data4)(*param1);
}


void
GeomVertexWriter_C_add_data4_v_pffff(GeomVertexWriter *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    ((*param0).add_data4)(param1, param2, param3, param4);
}


void
GeomVertexWriter_C_add_matrix3_v_pp(GeomVertexWriter *param0, LMatrix3 const *param1) {
    ((*param0).add_matrix3)(*param1);
}


void
GeomVertexWriter_C_add_matrix4_v_pp(GeomVertexWriter *param0, LMatrix4 const *param1) {
    ((*param0).add_matrix4)(*param1);
}


void
GeomVertexWriter_C_add_data1i_v_pi(GeomVertexWriter *param0, int param1) {
    ((*param0).add_data1i)(param1);
}


void
GeomVertexWriter_C_add_data2i_v_pp(GeomVertexWriter *param0, LVecBase2i const *param1) {
    ((*param0).add_data2i)(*param1);
}


void
GeomVertexWriter_C_add_data2i_v_pii(GeomVertexWriter *param0, int param1, int param2) {
    ((*param0).add_data2i)(param1, param2);
}


void
GeomVertexWriter_C_add_data3i_v_pp(GeomVertexWriter *param0, LVecBase3i const *param1) {
    ((*param0).add_data3i)(*param1);
}


void
GeomVertexWriter_C_add_data3i_v_piii(GeomVertexWriter *param0, int param1, int param2, int param3) {
    ((*param0).add_data3i)(param1, param2, param3);
}


void
GeomVertexWriter_C_add_data4i_v_pp(GeomVertexWriter *param0, LVecBase4i const *param1) {
    ((*param0).add_data4i)(*param1);
}


void
GeomVertexWriter_C_add_data4i_v_piiii(GeomVertexWriter *param0, int param1, int param2, int param3, int param4) {
    ((*param0).add_data4i)(param1, param2, param3, param4);
}


void
GeomVertexWriter_C_output_v_pp(GeomVertexWriter const *param0, std::ostream *param1) {
    ((*param0).output)(*param1);
}


// GraphicsEngine


GraphicsEngine *
GraphicsEngine_C_ctor_p_p(Pipeline *param0) {
    return new GraphicsEngine(param0);
}


GraphicsEngine *
GraphicsEngine_C_ctor_p_v() {
    return new GraphicsEngine();
}


void
GraphicsEngine_C_set_threading_model_v_pp(GraphicsEngine *param0, GraphicsThreadingModel const *param1) {
    ((*param0).set_threading_model)(*param1);
}


GraphicsThreadingModel *
GraphicsEngine_C_get_threading_model_p_p(GraphicsEngine const *param0) {
    return new GraphicsThreadingModel(((*param0).get_threading_model)());
}


ReMutex const *
GraphicsEngine_C_get_render_lock_p_p(GraphicsEngine const *param0) {
    return &(((*param0).get_render_lock)());
}


void
GraphicsEngine_C_set_auto_flip_v_pB(GraphicsEngine *param0, bool param1) {
    ((*param0).set_auto_flip)(param1);
}


bool
GraphicsEngine_C_get_auto_flip_B_p(GraphicsEngine const *param0) {
    return ((*param0).get_auto_flip)();
}


void
GraphicsEngine_C_set_portal_cull_v_pB(GraphicsEngine *param0, bool param1) {
    ((*param0).set_portal_cull)(param1);
}


bool
GraphicsEngine_C_get_portal_cull_B_p(GraphicsEngine const *param0) {
    return ((*param0).get_portal_cull)();
}


void
GraphicsEngine_C_set_default_loader_v_pp(GraphicsEngine *param0, Loader *param1) {
    ((*param0).set_default_loader)(param1);
}


Loader *
GraphicsEngine_C_get_default_loader_p_p(GraphicsEngine const *param0) {
    return ((*param0).get_default_loader)();
}


GraphicsOutput *
GraphicsEngine_C_make_output_p_ppsippipp(GraphicsEngine *param0, GraphicsPipe *param1, char const *param2, int param3, FrameBufferProperties const *param4, WindowProperties const *param5, int param6, GraphicsStateGuardian *param7, GraphicsOutput *param8) {
    return ((*param0).make_output)(param1, std::string(param2), param3, *param4, *param5, param6, param7, param8);
}


GraphicsOutput *
GraphicsEngine_C_make_output_p_ppsippip(GraphicsEngine *param0, GraphicsPipe *param1, char const *param2, int param3, FrameBufferProperties const *param4, WindowProperties const *param5, int param6, GraphicsStateGuardian *param7) {
    return ((*param0).make_output)(param1, std::string(param2), param3, *param4, *param5, param6, param7);
}


GraphicsOutput *
GraphicsEngine_C_make_output_p_ppsippi(GraphicsEngine *param0, GraphicsPipe *param1, char const *param2, int param3, FrameBufferProperties const *param4, WindowProperties const *param5, int param6) {
    return ((*param0).make_output)(param1, std::string(param2), param3, *param4, *param5, param6);
}


GraphicsOutput *
GraphicsEngine_C_make_buffer_p_ppsiii(GraphicsEngine *param0, GraphicsOutput *param1, char const *param2, int param3, int param4, int param5) {
    return ((*param0).make_buffer)(param1, std::string(param2), param3, param4, param5);
}


GraphicsOutput *
GraphicsEngine_C_make_buffer_p_ppsiii_1_p_ppsiii(GraphicsEngine *param0, GraphicsStateGuardian *param1, char const *param2, int param3, int param4, int param5) {
    return ((*param0).make_buffer)(param1, std::string(param2), param3, param4, param5);
}


GraphicsOutput *
GraphicsEngine_C_make_parasite_p_ppsiii(GraphicsEngine *param0, GraphicsOutput *param1, char const *param2, int param3, int param4, int param5) {
    return ((*param0).make_parasite)(param1, std::string(param2), param3, param4, param5);
}


bool
GraphicsEngine_C_add_window_B_ppi(GraphicsEngine *param0, GraphicsOutput *param1, int param2) {
    return ((*param0).add_window)(param1, param2);
}


bool
GraphicsEngine_C_remove_window_B_pp(GraphicsEngine *param0, GraphicsOutput *param1) {
    return ((*param0).remove_window)(param1);
}


void
GraphicsEngine_C_remove_all_windows_v_p(GraphicsEngine *param0) {
    ((*param0).remove_all_windows)();
}


void
GraphicsEngine_C_reset_all_windows_v_pB(GraphicsEngine *param0, bool param1) {
    ((*param0).reset_all_windows)(param1);
}


bool
GraphicsEngine_C_is_empty_B_p(GraphicsEngine const *param0) {
    return ((*param0).is_empty)();
}


int
GraphicsEngine_C_get_num_windows_i_p(GraphicsEngine const *param0) {
    return ((*param0).get_num_windows)();
}


GraphicsOutput *
GraphicsEngine_C_get_window_p_pi(GraphicsEngine const *param0, int param1) {
    return ((*param0).get_window)(param1);
}


void
GraphicsEngine_C_render_frame_v_p(GraphicsEngine *param0) {
    ((*param0).render_frame)();
}


void
GraphicsEngine_C_open_windows_v_p(GraphicsEngine *param0) {
    ((*param0).open_windows)();
}


void
GraphicsEngine_C_sync_frame_v_p(GraphicsEngine *param0) {
    ((*param0).sync_frame)();
}


void
GraphicsEngine_C_ready_flip_v_p(GraphicsEngine *param0) {
    ((*param0).ready_flip)();
}


void
GraphicsEngine_C_flip_frame_v_p(GraphicsEngine *param0) {
    ((*param0).flip_frame)();
}


bool
GraphicsEngine_C_extract_texture_data_B_ppp(GraphicsEngine *param0, Texture *param1, GraphicsStateGuardian *param2) {
    return ((*param0).extract_texture_data)(param1, param2);
}


void
GraphicsEngine_C_dispatch_compute_v_pppp(GraphicsEngine *param0, LVecBase3i const *param1, ShaderAttrib const *param2, GraphicsStateGuardian *param3) {
    ((*param0).dispatch_compute)(*param1, param2, param3);
}


GraphicsEngine *
GraphicsEngine_C_get_global_ptr_p_v() {
    return (GraphicsEngine::get_global_ptr)();
}


void
GraphicsEngine_C_texture_uploaded_v_pp(GraphicsEngine *param0, Texture *param1) {
    ((*param0).texture_uploaded)(param1);
}


PointerTo< Texture > *
GraphicsEngine_C_do_get_screenshot_p_ppp(GraphicsEngine *param0, DisplayRegion *param1, GraphicsStateGuardian *param2) {
    return new PointerTo< Texture >(((*param0).do_get_screenshot)(param1, param2));
}


void
GraphicsEngine_C_do_cull_v_pppp(CullHandler *param0, SceneSetup *param1, GraphicsStateGuardian *param2, Thread *param3) {
    (GraphicsEngine::do_cull)(param0, param1, param2, param3);
}


// GraphicsOutput


GraphicsOutputBase *
GraphicsOutput_C_upcast_to_GraphicsOutputBase_p_p(GraphicsOutput *param0) {
    return (GraphicsOutputBase *)param0;
}


DrawableRegion *
GraphicsOutput_C_upcast_to_DrawableRegion_p_p(GraphicsOutput *param0) {
    return (DrawableRegion *)param0;
}


GraphicsStateGuardian *
GraphicsOutput_C_get_gsg_p_p(GraphicsOutput const *param0) {
    return ((*param0).get_gsg)();
}


GraphicsPipe *
GraphicsOutput_C_get_pipe_p_p(GraphicsOutput const *param0) {
    return ((*param0).get_pipe)();
}


GraphicsEngine *
GraphicsOutput_C_get_engine_p_p(GraphicsOutput const *param0) {
    return ((*param0).get_engine)();
}


char const *
GraphicsOutput_C_get_name_s_p(GraphicsOutput const *param0) {
    return (((*param0).get_name)()).c_str();
}


int
GraphicsOutput_C_count_textures_i_p(GraphicsOutput const *param0) {
    return ((*param0).count_textures)();
}


bool
GraphicsOutput_C_has_texture_B_p(GraphicsOutput const *param0) {
    return ((*param0).has_texture)();
}


Texture *
GraphicsOutput_C_get_texture_p_pi(GraphicsOutput const *param0, int param1) {
    return ((*param0).get_texture)(param1);
}


Texture *
GraphicsOutput_C_get_texture_p_p(GraphicsOutput const *param0) {
    return ((*param0).get_texture)();
}


DrawableRegion::RenderTexturePlane
GraphicsOutput_C_get_texture_plane_p_pi(GraphicsOutput const *param0, int param1) {
    return ((*param0).get_texture_plane)(param1);
}


DrawableRegion::RenderTexturePlane
GraphicsOutput_C_get_texture_plane_p_p(GraphicsOutput const *param0) {
    return ((*param0).get_texture_plane)();
}


GraphicsOutput::RenderTextureMode
GraphicsOutput_C_get_rtm_mode_p_pi(GraphicsOutput const *param0, int param1) {
    return ((*param0).get_rtm_mode)(param1);
}


GraphicsOutput::RenderTextureMode
GraphicsOutput_C_get_rtm_mode_p_p(GraphicsOutput const *param0) {
    return ((*param0).get_rtm_mode)();
}


void
GraphicsOutput_C_clear_render_textures_v_p(GraphicsOutput *param0) {
    ((*param0).clear_render_textures)();
}


void
GraphicsOutput_C_add_render_texture_v_pppp(GraphicsOutput *param0, Texture *param1, GraphicsOutput::RenderTextureMode param2, DrawableRegion::RenderTexturePlane param3) {
    ((*param0).add_render_texture)(param1, param2, param3);
}


void
GraphicsOutput_C_add_render_texture_v_ppp(GraphicsOutput *param0, Texture *param1, GraphicsOutput::RenderTextureMode param2) {
    ((*param0).add_render_texture)(param1, param2);
}


void
GraphicsOutput_C_setup_render_texture_v_ppBB(GraphicsOutput *param0, Texture *param1, bool param2, bool param3) {
    ((*param0).setup_render_texture)(param1, param2, param3);
}


LVecBase2i const *
GraphicsOutput_C_get_size_p_p(GraphicsOutput const *param0) {
    return &(((*param0).get_size)());
}


int
GraphicsOutput_C_get_x_size_i_p(GraphicsOutput const *param0) {
    return ((*param0).get_x_size)();
}


int
GraphicsOutput_C_get_y_size_i_p(GraphicsOutput const *param0) {
    return ((*param0).get_y_size)();
}


LVecBase2i *
GraphicsOutput_C_get_fb_size_p_p(GraphicsOutput const *param0) {
    return new LVecBase2i(((*param0).get_fb_size)());
}


int
GraphicsOutput_C_get_fb_x_size_i_p(GraphicsOutput const *param0) {
    return ((*param0).get_fb_x_size)();
}


int
GraphicsOutput_C_get_fb_y_size_i_p(GraphicsOutput const *param0) {
    return ((*param0).get_fb_y_size)();
}


LVecBase2i *
GraphicsOutput_C_get_sbs_left_size_p_p(GraphicsOutput const *param0) {
    return new LVecBase2i(((*param0).get_sbs_left_size)());
}


int
GraphicsOutput_C_get_sbs_left_x_size_i_p(GraphicsOutput const *param0) {
    return ((*param0).get_sbs_left_x_size)();
}


int
GraphicsOutput_C_get_sbs_left_y_size_i_p(GraphicsOutput const *param0) {
    return ((*param0).get_sbs_left_y_size)();
}


LVecBase2i *
GraphicsOutput_C_get_sbs_right_size_p_p(GraphicsOutput const *param0) {
    return new LVecBase2i(((*param0).get_sbs_right_size)());
}


int
GraphicsOutput_C_get_sbs_right_x_size_i_p(GraphicsOutput const *param0) {
    return ((*param0).get_sbs_right_x_size)();
}


int
GraphicsOutput_C_get_sbs_right_y_size_i_p(GraphicsOutput const *param0) {
    return ((*param0).get_sbs_right_y_size)();
}


bool
GraphicsOutput_C_has_size_B_p(GraphicsOutput const *param0) {
    return ((*param0).has_size)();
}


bool
GraphicsOutput_C_is_valid_B_p(GraphicsOutput const *param0) {
    return ((*param0).is_valid)();
}


bool
GraphicsOutput_C_is_nonzero_size_B_p(GraphicsOutput const *param0) {
    return ((*param0).is_nonzero_size)();
}


void
GraphicsOutput_C_set_active_v_pB(GraphicsOutput *param0, bool param1) {
    ((*param0).set_active)(param1);
}


bool
GraphicsOutput_C_is_active_B_p(GraphicsOutput const *param0) {
    return ((*param0).is_active)();
}


void
GraphicsOutput_C_set_one_shot_v_pB(GraphicsOutput *param0, bool param1) {
    ((*param0).set_one_shot)(param1);
}


bool
GraphicsOutput_C_get_one_shot_B_p(GraphicsOutput const *param0) {
    return ((*param0).get_one_shot)();
}


void
GraphicsOutput_C_set_inverted_v_pB(GraphicsOutput *param0, bool param1) {
    ((*param0).set_inverted)(param1);
}


bool
GraphicsOutput_C_get_inverted_B_p(GraphicsOutput const *param0) {
    return ((*param0).get_inverted)();
}


void
GraphicsOutput_C_set_swap_eyes_v_pB(GraphicsOutput *param0, bool param1) {
    ((*param0).set_swap_eyes)(param1);
}


bool
GraphicsOutput_C_get_swap_eyes_B_p(GraphicsOutput const *param0) {
    return ((*param0).get_swap_eyes)();
}


void
GraphicsOutput_C_set_red_blue_stereo_v_pBII(GraphicsOutput *param0, bool param1, unsigned int param2, unsigned int param3) {
    ((*param0).set_red_blue_stereo)(param1, param2, param3);
}


bool
GraphicsOutput_C_get_red_blue_stereo_B_p(GraphicsOutput const *param0) {
    return ((*param0).get_red_blue_stereo)();
}


unsigned int
GraphicsOutput_C_get_left_eye_color_mask_I_p(GraphicsOutput const *param0) {
    return ((*param0).get_left_eye_color_mask)();
}


unsigned int
GraphicsOutput_C_get_right_eye_color_mask_I_p(GraphicsOutput const *param0) {
    return ((*param0).get_right_eye_color_mask)();
}


void
GraphicsOutput_C_set_side_by_side_stereo_v_pB(GraphicsOutput *param0, bool param1) {
    ((*param0).set_side_by_side_stereo)(param1);
}


void
GraphicsOutput_C_set_side_by_side_stereo_v_pBpp(GraphicsOutput *param0, bool param1, LVecBase4 const *param2, LVecBase4 const *param3) {
    ((*param0).set_side_by_side_stereo)(param1, *param2, *param3);
}


bool
GraphicsOutput_C_get_side_by_side_stereo_B_p(GraphicsOutput const *param0) {
    return ((*param0).get_side_by_side_stereo)();
}


LVecBase4 const *
GraphicsOutput_C_get_sbs_left_dimensions_p_p(GraphicsOutput const *param0) {
    return &(((*param0).get_sbs_left_dimensions)());
}


LVecBase4 const *
GraphicsOutput_C_get_sbs_right_dimensions_p_p(GraphicsOutput const *param0) {
    return &(((*param0).get_sbs_right_dimensions)());
}


FrameBufferProperties const *
GraphicsOutput_C_get_fb_properties_p_p(GraphicsOutput const *param0) {
    return &(((*param0).get_fb_properties)());
}


bool
GraphicsOutput_C_is_stereo_B_p(GraphicsOutput const *param0) {
    return ((*param0).is_stereo)();
}


void
GraphicsOutput_C_clear_delete_flag_v_p(GraphicsOutput *param0) {
    ((*param0).clear_delete_flag)();
}


bool
GraphicsOutput_C_get_delete_flag_B_p(GraphicsOutput const *param0) {
    return ((*param0).get_delete_flag)();
}


void
GraphicsOutput_C_set_sort_v_pi(GraphicsOutput *param0, int param1) {
    ((*param0).set_sort)(param1);
}


int
GraphicsOutput_C_get_sort_i_p(GraphicsOutput const *param0) {
    return ((*param0).get_sort)();
}


void
GraphicsOutput_C_set_child_sort_v_pi(GraphicsOutput *param0, int param1) {
    ((*param0).set_child_sort)(param1);
}


void
GraphicsOutput_C_clear_child_sort_v_p(GraphicsOutput *param0) {
    ((*param0).clear_child_sort)();
}


int
GraphicsOutput_C_get_child_sort_i_p(GraphicsOutput const *param0) {
    return ((*param0).get_child_sort)();
}


AsyncFuture *
GraphicsOutput_C_trigger_copy_p_p(GraphicsOutput *param0) {
    return ((*param0).trigger_copy)();
}


DisplayRegion *
GraphicsOutput_C_make_display_region_p_p(GraphicsOutput *param0) {
    return ((*param0).make_display_region)();
}


DisplayRegion *
GraphicsOutput_C_make_display_region_p_pp(GraphicsOutput *param0, LVecBase4 const *param1) {
    return ((*param0).make_display_region)(*param1);
}


DisplayRegion *
GraphicsOutput_C_make_display_region_p_pffff(GraphicsOutput *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    return ((*param0).make_display_region)(param1, param2, param3, param4);
}


DisplayRegion *
GraphicsOutput_C_make_mono_display_region_p_p(GraphicsOutput *param0) {
    return ((*param0).make_mono_display_region)();
}


DisplayRegion *
GraphicsOutput_C_make_mono_display_region_p_pp(GraphicsOutput *param0, LVecBase4 const *param1) {
    return ((*param0).make_mono_display_region)(*param1);
}


DisplayRegion *
GraphicsOutput_C_make_mono_display_region_p_pffff(GraphicsOutput *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    return ((*param0).make_mono_display_region)(param1, param2, param3, param4);
}


StereoDisplayRegion *
GraphicsOutput_C_make_stereo_display_region_p_p(GraphicsOutput *param0) {
    return ((*param0).make_stereo_display_region)();
}


StereoDisplayRegion *
GraphicsOutput_C_make_stereo_display_region_p_pp(GraphicsOutput *param0, LVecBase4 const *param1) {
    return ((*param0).make_stereo_display_region)(*param1);
}


StereoDisplayRegion *
GraphicsOutput_C_make_stereo_display_region_p_pffff(GraphicsOutput *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    return ((*param0).make_stereo_display_region)(param1, param2, param3, param4);
}


bool
GraphicsOutput_C_remove_display_region_B_pp(GraphicsOutput *param0, DisplayRegion *param1) {
    return ((*param0).remove_display_region)(param1);
}


void
GraphicsOutput_C_remove_all_display_regions_v_p(GraphicsOutput *param0) {
    ((*param0).remove_all_display_regions)();
}


DisplayRegion *
GraphicsOutput_C_get_overlay_display_region_p_p(GraphicsOutput const *param0) {
    return ((*param0).get_overlay_display_region)();
}


void
GraphicsOutput_C_set_overlay_display_region_v_pp(GraphicsOutput *param0, DisplayRegion *param1) {
    ((*param0).set_overlay_display_region)(param1);
}


int
GraphicsOutput_C_get_num_display_regions_i_p(GraphicsOutput const *param0) {
    return ((*param0).get_num_display_regions)();
}


PointerTo< DisplayRegion > *
GraphicsOutput_C_get_display_region_p_pi(GraphicsOutput const *param0, int param1) {
    return new PointerTo< DisplayRegion >(((*param0).get_display_region)(param1));
}


int
GraphicsOutput_C_get_num_active_display_regions_i_p(GraphicsOutput const *param0) {
    return ((*param0).get_num_active_display_regions)();
}


PointerTo< DisplayRegion > *
GraphicsOutput_C_get_active_display_region_p_pi(GraphicsOutput const *param0, int param1) {
    return new PointerTo< DisplayRegion >(((*param0).get_active_display_region)(param1));
}


GraphicsOutput *
GraphicsOutput_C_make_texture_buffer_p_psiipBp(GraphicsOutput *param0, char const *param1, int param2, int param3, Texture *param4, bool param5, FrameBufferProperties *param6) {
    return ((*param0).make_texture_buffer)(std::string(param1), param2, param3, param4, param5, param6);
}


GraphicsOutput *
GraphicsOutput_C_make_texture_buffer_p_psiipB(GraphicsOutput *param0, char const *param1, int param2, int param3, Texture *param4, bool param5) {
    return ((*param0).make_texture_buffer)(std::string(param1), param2, param3, param4, param5);
}


GraphicsOutput *
GraphicsOutput_C_make_texture_buffer_p_psiip(GraphicsOutput *param0, char const *param1, int param2, int param3, Texture *param4) {
    return ((*param0).make_texture_buffer)(std::string(param1), param2, param3, param4);
}


GraphicsOutput *
GraphicsOutput_C_make_texture_buffer_p_psii(GraphicsOutput *param0, char const *param1, int param2, int param3) {
    return ((*param0).make_texture_buffer)(std::string(param1), param2, param3);
}


GraphicsOutput *
GraphicsOutput_C_make_cube_map_p_psippBp(GraphicsOutput *param0, char const *param1, int param2, NodePath *param3, DrawMask *param4, bool param5, FrameBufferProperties *param6) {
    return ((*param0).make_cube_map)(std::string(param1), param2, *param3, *param4, param5, param6);
}


GraphicsOutput *
GraphicsOutput_C_make_cube_map_p_psippB(GraphicsOutput *param0, char const *param1, int param2, NodePath *param3, DrawMask *param4, bool param5) {
    return ((*param0).make_cube_map)(std::string(param1), param2, *param3, *param4, param5);
}


GraphicsOutput *
GraphicsOutput_C_make_cube_map_p_psipp(GraphicsOutput *param0, char const *param1, int param2, NodePath *param3, DrawMask *param4) {
    return ((*param0).make_cube_map)(std::string(param1), param2, *param3, *param4);
}


GraphicsOutput *
GraphicsOutput_C_make_cube_map_p_psip(GraphicsOutput *param0, char const *param1, int param2, NodePath *param3) {
    return ((*param0).make_cube_map)(std::string(param1), param2, *param3);
}


Filename *
GraphicsOutput_C_make_screenshot_filename_p_s(char const *param0) {
    return new Filename((GraphicsOutput::make_screenshot_filename)(std::string(param0)));
}


Filename *
GraphicsOutput_C_make_screenshot_filename_p_v() {
    return new Filename((GraphicsOutput::make_screenshot_filename)());
}


Filename *
GraphicsOutput_C_save_screenshot_default_p_ps(GraphicsOutput *param0, char const *param1) {
    return new Filename(((*param0).save_screenshot_default)(std::string(param1)));
}


Filename *
GraphicsOutput_C_save_screenshot_default_p_p(GraphicsOutput *param0) {
    return new Filename(((*param0).save_screenshot_default)());
}


bool
GraphicsOutput_C_save_screenshot_B_pps(GraphicsOutput *param0, Filename const *param1, char const *param2) {
    return ((*param0).save_screenshot)(*param1, std::string(param2));
}


bool
GraphicsOutput_C_save_screenshot_B_pp(GraphicsOutput *param0, Filename const *param1) {
    return ((*param0).save_screenshot)(*param1);
}


PointerTo< Texture > *
GraphicsOutput_C_get_screenshot_p_p(GraphicsOutput *param0) {
    return new PointerTo< Texture >(((*param0).get_screenshot)());
}


bool
GraphicsOutput_C_get_screenshot_B_pp(GraphicsOutput *param0, PNMImage *param1) {
    return ((*param0).get_screenshot)(*param1);
}


NodePath *
GraphicsOutput_C_get_texture_card_p_p(GraphicsOutput *param0) {
    return new NodePath(((*param0).get_texture_card)());
}


bool
GraphicsOutput_C_share_depth_buffer_B_pp(GraphicsOutput *param0, GraphicsOutput *param1) {
    return ((*param0).share_depth_buffer)(param1);
}


void
GraphicsOutput_C_unshare_depth_buffer_v_p(GraphicsOutput *param0) {
    ((*param0).unshare_depth_buffer)();
}


bool
GraphicsOutput_C_get_supports_render_texture_B_p(GraphicsOutput const *param0) {
    return ((*param0).get_supports_render_texture)();
}


bool
GraphicsOutput_C_flip_ready_B_p(GraphicsOutput const *param0) {
    return ((*param0).flip_ready)();
}


GraphicsOutput *
GraphicsOutput_C_get_host_p_p(GraphicsOutput *param0) {
    return ((*param0).get_host)();
}


void
GraphicsOutput_C_request_open_v_p(GraphicsOutput *param0) {
    ((*param0).request_open)();
}


void
GraphicsOutput_C_request_close_v_p(GraphicsOutput *param0) {
    ((*param0).request_close)();
}


void
GraphicsOutput_C_set_close_now_v_p(GraphicsOutput *param0) {
    ((*param0).set_close_now)();
}


void
GraphicsOutput_C_reset_window_v_pB(GraphicsOutput *param0, bool param1) {
    ((*param0).reset_window)(param1);
}


void
GraphicsOutput_C_clear_pipe_v_p(GraphicsOutput *param0) {
    ((*param0).clear_pipe)();
}


void
GraphicsOutput_C_set_size_and_recalc_v_pii(GraphicsOutput *param0, int param1, int param2) {
    ((*param0).set_size_and_recalc)(param1, param2);
}


void
GraphicsOutput_C_clear_v_pp(GraphicsOutput *param0, Thread *param1) {
    ((*param0).clear)(param1);
}


bool
GraphicsOutput_C_begin_frame_B_ppp(GraphicsOutput *param0, GraphicsOutput::FrameMode param1, Thread *param2) {
    return ((*param0).begin_frame)(param1, param2);
}


void
GraphicsOutput_C_end_frame_v_ppp(GraphicsOutput *param0, GraphicsOutput::FrameMode param1, Thread *param2) {
    ((*param0).end_frame)(param1, param2);
}


void
GraphicsOutput_C_change_scenes_v_pp(GraphicsOutput *param0, DisplayRegionPipelineReader *param1) {
    ((*param0).change_scenes)(param1);
}


void
GraphicsOutput_C_select_target_tex_page_v_pi(GraphicsOutput *param0, int param1) {
    ((*param0).select_target_tex_page)(param1);
}


void
GraphicsOutput_C_begin_flip_v_p(GraphicsOutput *param0) {
    ((*param0).begin_flip)();
}


void
GraphicsOutput_C_ready_flip_v_p(GraphicsOutput *param0) {
    ((*param0).ready_flip)();
}


void
GraphicsOutput_C_end_flip_v_p(GraphicsOutput *param0) {
    ((*param0).end_flip)();
}


void
GraphicsOutput_C_process_events_v_p(GraphicsOutput *param0) {
    ((*param0).process_events)();
}


PStatCollector *
GraphicsOutput_C_get_cull_window_pcollector_p_p(GraphicsOutput *param0) {
    return &(((*param0).get_cull_window_pcollector)());
}


PStatCollector *
GraphicsOutput_C_get_draw_window_pcollector_p_p(GraphicsOutput *param0) {
    return &(((*param0).get_draw_window_pcollector)());
}


PStatCollector *
GraphicsOutput_C_get_clear_window_pcollector_p_p(GraphicsOutput *param0) {
    return &(((*param0).get_clear_window_pcollector)());
}


int
GraphicsOutput_C_get_class_type_i_v() {
    return ((GraphicsOutput::get_class_type)()).get_index();
}


void
GraphicsOutput_C_init_type_v_v() {
    (GraphicsOutput::init_type)();
}


int
GraphicsOutput_C_get_type_i_p(GraphicsOutput const *param0) {
    return (((*param0).get_type)()).get_index();
}


int
GraphicsOutput_C_force_init_type_i_p(GraphicsOutput *param0) {
    return (((*param0).force_init_type)()).get_index();
}


// GraphicsOutputBase


GraphicsOutput *
GraphicsOutputBase_C_downcast_to_GraphicsOutput_p_p(GraphicsOutputBase *param0) {
    return (GraphicsOutput *)param0;
}


// GraphicsWindow


WindowProperties const *
GraphicsWindow_C_get_properties_p_p(GraphicsWindow const *param0) {
    return new WindowProperties const(((*param0).get_properties)());
}


WindowProperties const *
GraphicsWindow_C_get_requested_properties_p_p(GraphicsWindow const *param0) {
    return new WindowProperties const(((*param0).get_requested_properties)());
}


void
GraphicsWindow_C_clear_rejected_properties_v_p(GraphicsWindow *param0) {
    ((*param0).clear_rejected_properties)();
}


WindowProperties *
GraphicsWindow_C_get_rejected_properties_p_p(GraphicsWindow const *param0) {
    return new WindowProperties(((*param0).get_rejected_properties)());
}


void
GraphicsWindow_C_request_properties_v_pp(GraphicsWindow *param0, WindowProperties const *param1) {
    ((*param0).request_properties)(*param1);
}


bool
GraphicsWindow_C_is_closed_B_p(GraphicsWindow const *param0) {
    return ((*param0).is_closed)();
}


bool
GraphicsWindow_C_is_fullscreen_B_p(GraphicsWindow const *param0) {
    return ((*param0).is_fullscreen)();
}


void
GraphicsWindow_C_set_window_event_v_ps(GraphicsWindow *param0, char const *param1) {
    ((*param0).set_window_event)(std::string(param1));
}


char const *
GraphicsWindow_C_get_window_event_s_p(GraphicsWindow const *param0) {
    static std::string string_holder = ((*param0).get_window_event)();
    return string_holder.c_str();
}


void
GraphicsWindow_C_set_close_request_event_v_ps(GraphicsWindow *param0, char const *param1) {
    ((*param0).set_close_request_event)(std::string(param1));
}


char const *
GraphicsWindow_C_get_close_request_event_s_p(GraphicsWindow const *param0) {
    static std::string string_holder = ((*param0).get_close_request_event)();
    return string_holder.c_str();
}


void
GraphicsWindow_C_set_unexposed_draw_v_pB(GraphicsWindow *param0, bool param1) {
    ((*param0).set_unexposed_draw)(param1);
}


bool
GraphicsWindow_C_get_unexposed_draw_B_p(GraphicsWindow const *param0) {
    return ((*param0).get_unexposed_draw)();
}


WindowHandle *
GraphicsWindow_C_get_window_handle_p_p(GraphicsWindow const *param0) {
    return ((*param0).get_window_handle)();
}


int
GraphicsWindow_C_get_num_input_devices_i_p(GraphicsWindow const *param0) {
    return ((*param0).get_num_input_devices)();
}


InputDevice *
GraphicsWindow_C_get_input_device_p_pi(GraphicsWindow const *param0, int param1) {
    return ((*param0).get_input_device)(param1);
}


char const *
GraphicsWindow_C_get_input_device_name_s_pi(GraphicsWindow const *param0, int param1) {
    static std::string string_holder = ((*param0).get_input_device_name)(param1);
    return string_holder.c_str();
}


bool
GraphicsWindow_C_has_pointer_B_pi(GraphicsWindow const *param0, int param1) {
    return ((*param0).has_pointer)(param1);
}


bool
GraphicsWindow_C_has_keyboard_B_pi(GraphicsWindow const *param0, int param1) {
    return ((*param0).has_keyboard)(param1);
}


ButtonMap *
GraphicsWindow_C_get_keyboard_map_p_p(GraphicsWindow const *param0) {
    return ((*param0).get_keyboard_map)();
}


void
GraphicsWindow_C_enable_pointer_events_v_pi(GraphicsWindow *param0, int param1) {
    ((*param0).enable_pointer_events)(param1);
}


void
GraphicsWindow_C_disable_pointer_events_v_pi(GraphicsWindow *param0, int param1) {
    ((*param0).disable_pointer_events)(param1);
}


MouseData *
GraphicsWindow_C_get_pointer_p_pi(GraphicsWindow const *param0, int param1) {
    return new MouseData(((*param0).get_pointer)(param1));
}


bool
GraphicsWindow_C_move_pointer_B_piii(GraphicsWindow *param0, int param1, int param2, int param3) {
    return ((*param0).move_pointer)(param1, param2, param3);
}


void
GraphicsWindow_C_close_ime_v_p(GraphicsWindow *param0) {
    ((*param0).close_ime)();
}


void
GraphicsWindow_C_add_window_proc_v_pp(GraphicsWindow *param0, GraphicsWindowProc const *param1) {
    ((*param0).add_window_proc)(param1);
}


void
GraphicsWindow_C_remove_window_proc_v_pp(GraphicsWindow *param0, GraphicsWindowProc const *param1) {
    ((*param0).remove_window_proc)(param1);
}


void
GraphicsWindow_C_clear_window_procs_v_p(GraphicsWindow *param0) {
    ((*param0).clear_window_procs)();
}


bool
GraphicsWindow_C_supports_window_procs_B_p(GraphicsWindow const *param0) {
    return ((*param0).supports_window_procs)();
}


bool
GraphicsWindow_C_is_touch_event_B_pp(GraphicsWindow *param0, GraphicsWindowProcCallbackData *param1) {
    return ((*param0).is_touch_event)(param1);
}


int
GraphicsWindow_C_get_num_touches_i_p(GraphicsWindow *param0) {
    return ((*param0).get_num_touches)();
}


TouchInfo *
GraphicsWindow_C_get_touch_info_p_pi(GraphicsWindow *param0, int param1) {
    return new TouchInfo(((*param0).get_touch_info)(param1));
}


void
GraphicsWindow_C_request_open_v_p(GraphicsWindow *param0) {
    ((*param0).request_open)();
}


void
GraphicsWindow_C_request_close_v_p(GraphicsWindow *param0) {
    ((*param0).request_close)();
}


void
GraphicsWindow_C_set_close_now_v_p(GraphicsWindow *param0) {
    ((*param0).set_close_now)();
}


void
GraphicsWindow_C_process_events_v_p(GraphicsWindow *param0) {
    ((*param0).process_events)();
}


void
GraphicsWindow_C_set_properties_now_v_pp(GraphicsWindow *param0, WindowProperties *param1) {
    ((*param0).set_properties_now)(*param1);
}


int
GraphicsWindow_C_get_class_type_i_v() {
    return ((GraphicsWindow::get_class_type)()).get_index();
}


void
GraphicsWindow_C_init_type_v_v() {
    (GraphicsWindow::init_type)();
}


int
GraphicsWindow_C_get_type_i_p(GraphicsWindow const *param0) {
    return (((*param0).get_type)()).get_index();
}


int
GraphicsWindow_C_force_init_type_i_p(GraphicsWindow *param0) {
    return (((*param0).force_init_type)()).get_index();
}


// InternalName


PointerTo< InternalName > *
InternalName_C_make_p_s(char const *param0) {
    return new PointerTo< InternalName >((InternalName::make)(std::string(param0)));
}


PointerTo< InternalName > *
InternalName_C_make_p_si(char const *param0, int param1) {
    return new PointerTo< InternalName >((InternalName::make)(std::string(param0), param1));
}


PointerTo< InternalName > *
InternalName_C_append_p_ps(InternalName *param0, char const *param1) {
    return new PointerTo< InternalName >(((*param0).append)(std::string(param1)));
}


InternalName *
InternalName_C_get_parent_p_p(InternalName const *param0) {
    return ((*param0).get_parent)();
}


char const *
InternalName_C_get_name_s_p(InternalName const *param0) {
    static std::string string_holder = ((*param0).get_name)();
    return string_holder.c_str();
}


char const *
InternalName_C_join_s_ss(InternalName const *param0, char const *param1) {
    static std::string string_holder = ((*param0).join)(std::string(param1));
    return string_holder.c_str();
}


char const *
InternalName_C_get_basename_s_p(InternalName const *param0) {
    return (((*param0).get_basename)()).c_str();
}


int
InternalName_C_find_ancestor_i_ss(InternalName const *param0, char const *param1) {
    return ((*param0).find_ancestor)(std::string(param1));
}


InternalName const *
InternalName_C_get_ancestor_s_si(InternalName const *param0, int param1) {
    return ((*param0).get_ancestor)(param1);
}


InternalName const *
InternalName_C_get_top_s_p(InternalName const *param0) {
    return ((*param0).get_top)();
}


char const *
InternalName_C_get_net_basename_s_si(InternalName const *param0, int param1) {
    static std::string string_holder = ((*param0).get_net_basename)(param1);
    return string_holder.c_str();
}


void
InternalName_C_output_v_sp(InternalName const *param0, std::ostream *param1) {
    ((*param0).output)(*param1);
}


PointerTo< InternalName > *
InternalName_C_get_root_p_v() {
    return new PointerTo< InternalName >((InternalName::get_root)());
}


PointerTo< InternalName > *
InternalName_C_get_error_p_v() {
    return new PointerTo< InternalName >((InternalName::get_error)());
}


PointerTo< InternalName > *
InternalName_C_get_vertex_p_v() {
    return new PointerTo< InternalName >((InternalName::get_vertex)());
}


PointerTo< InternalName > *
InternalName_C_get_normal_p_v() {
    return new PointerTo< InternalName >((InternalName::get_normal)());
}


PointerTo< InternalName > *
InternalName_C_get_tangent_p_v() {
    return new PointerTo< InternalName >((InternalName::get_tangent)());
}


PointerTo< InternalName > *
InternalName_C_get_tangent_name_p_s(char const *param0) {
    return new PointerTo< InternalName >((InternalName::get_tangent_name)(std::string(param0)));
}


PointerTo< InternalName > *
InternalName_C_get_binormal_p_v() {
    return new PointerTo< InternalName >((InternalName::get_binormal)());
}


PointerTo< InternalName > *
InternalName_C_get_binormal_name_p_s(char const *param0) {
    return new PointerTo< InternalName >((InternalName::get_binormal_name)(std::string(param0)));
}


PointerTo< InternalName > *
InternalName_C_get_texcoord_p_v() {
    return new PointerTo< InternalName >((InternalName::get_texcoord)());
}


PointerTo< InternalName > *
InternalName_C_get_texcoord_name_p_s(char const *param0) {
    return new PointerTo< InternalName >((InternalName::get_texcoord_name)(std::string(param0)));
}


PointerTo< InternalName > *
InternalName_C_get_color_p_v() {
    return new PointerTo< InternalName >((InternalName::get_color)());
}


PointerTo< InternalName > *
InternalName_C_get_rotate_p_v() {
    return new PointerTo< InternalName >((InternalName::get_rotate)());
}


PointerTo< InternalName > *
InternalName_C_get_size_p_v() {
    return new PointerTo< InternalName >((InternalName::get_size)());
}


PointerTo< InternalName > *
InternalName_C_get_aspect_ratio_p_v() {
    return new PointerTo< InternalName >((InternalName::get_aspect_ratio)());
}


PointerTo< InternalName > *
InternalName_C_get_transform_blend_p_v() {
    return new PointerTo< InternalName >((InternalName::get_transform_blend)());
}


PointerTo< InternalName > *
InternalName_C_get_transform_weight_p_v() {
    return new PointerTo< InternalName >((InternalName::get_transform_weight)());
}


PointerTo< InternalName > *
InternalName_C_get_transform_index_p_v() {
    return new PointerTo< InternalName >((InternalName::get_transform_index)());
}


PointerTo< InternalName > *
InternalName_C_get_morph_p_ps(InternalName *param0, char const *param1) {
    return new PointerTo< InternalName >((InternalName::get_morph)(param0, std::string(param1)));
}


PointerTo< InternalName > *
InternalName_C_get_index_p_v() {
    return new PointerTo< InternalName >((InternalName::get_index)());
}


PointerTo< InternalName > *
InternalName_C_get_world_p_v() {
    return new PointerTo< InternalName >((InternalName::get_world)());
}


PointerTo< InternalName > *
InternalName_C_get_camera_p_v() {
    return new PointerTo< InternalName >((InternalName::get_camera)());
}


PointerTo< InternalName > *
InternalName_C_get_model_p_v() {
    return new PointerTo< InternalName >((InternalName::get_model)());
}


PointerTo< InternalName > *
InternalName_C_get_view_p_v() {
    return new PointerTo< InternalName >((InternalName::get_view)());
}


void
InternalName_C_register_with_read_factory_v_v() {
    (InternalName::register_with_read_factory)();
}


void
InternalName_C_write_datagram_v_ppp(InternalName *param0, BamWriter *param1, Datagram *param2) {
    ((*param0).write_datagram)(param1, *param2);
}


void
InternalName_C_finalize_v_pp(InternalName *param0, BamReader *param1) {
    ((*param0).finalize)(param1);
}


int
InternalName_C_get_class_type_i_v() {
    return ((InternalName::get_class_type)()).get_index();
}


void
InternalName_C_init_type_v_v() {
    (InternalName::init_type)();
}


int
InternalName_C_get_type_i_p(InternalName const *param0) {
    return (((*param0).get_type)()).get_index();
}


int
InternalName_C_force_init_type_i_p(InternalName *param0) {
    return (((*param0).force_init_type)()).get_index();
}


// LPoint2d


LPoint2d *
LPoint2d_C_ctor_p_v() {
    return new LPoint2d();
}


LPoint2d *
LPoint2d_C_ctor_p_p(LPoint2d const *param0) {
    return new LPoint2d(*param0);
}


LPoint2d *
LPoint2d_C_ctor_p_p_1_p_p(LVecBase2d const *param0) {
    return new LPoint2d(*param0);
}


LPoint2d *
LPoint2d_C_ctor_p_d(double param0) {
    return new LPoint2d(param0);
}


LPoint2d *
LPoint2d_C_ctor_p_dd(double param0, double param1) {
    return new LPoint2d(param0, param1);
}


LPoint2d const *
LPoint2d_C_zero_p_v() {
    return &((LPoint2d::zero)());
}


LPoint2d const *
LPoint2d_C_unit_x_p_v() {
    return &((LPoint2d::unit_x)());
}


LPoint2d const *
LPoint2d_C_unit_y_p_v() {
    return &((LPoint2d::unit_y)());
}


LPoint2d *
LPoint2d_C_normalized_p_p(LPoint2d const *param0) {
    return new LPoint2d(((*param0).normalized)());
}


LPoint2d *
LPoint2d_C_project_p_pp(LPoint2d const *param0, LVecBase2d const *param1) {
    return new LPoint2d(((*param0).project)(*param1));
}


int
LPoint2d_C_get_class_type_i_v() {
    return ((LPoint2d::get_class_type)()).get_index();
}


void
LPoint2d_C_init_type_v_v() {
    (LPoint2d::init_type)();
}


// LPoint2f


LPoint2f *
LPoint2f_C_ctor_p_v() {
    return new LPoint2f();
}


LPoint2f *
LPoint2f_C_ctor_p_p(LPoint2f const *param0) {
    return new LPoint2f(*param0);
}


LPoint2f *
LPoint2f_C_ctor_p_p_1_p_p(LVecBase2f const *param0) {
    return new LPoint2f(*param0);
}


LPoint2f *
LPoint2f_C_ctor_p_f(float param0) {
    return new LPoint2f(param0);
}


LPoint2f *
LPoint2f_C_ctor_p_ff(float param0, float param1) {
    return new LPoint2f(param0, param1);
}


LPoint2f const *
LPoint2f_C_zero_p_v() {
    return &((LPoint2f::zero)());
}


LPoint2f const *
LPoint2f_C_unit_x_p_v() {
    return &((LPoint2f::unit_x)());
}


LPoint2f const *
LPoint2f_C_unit_y_p_v() {
    return &((LPoint2f::unit_y)());
}


LPoint2f *
LPoint2f_C_normalized_p_p(LPoint2f const *param0) {
    return new LPoint2f(((*param0).normalized)());
}


LPoint2f *
LPoint2f_C_project_p_pp(LPoint2f const *param0, LVecBase2f const *param1) {
    return new LPoint2f(((*param0).project)(*param1));
}


int
LPoint2f_C_get_class_type_i_v() {
    return ((LPoint2f::get_class_type)()).get_index();
}


void
LPoint2f_C_init_type_v_v() {
    (LPoint2f::init_type)();
}


// LPoint2i


LPoint2i *
LPoint2i_C_ctor_p_v() {
    return new LPoint2i();
}


LPoint2i *
LPoint2i_C_ctor_p_p(LPoint2i const *param0) {
    return new LPoint2i(*param0);
}


LPoint2i *
LPoint2i_C_ctor_p_p_1_p_p(LVecBase2i const *param0) {
    return new LPoint2i(*param0);
}


LPoint2i *
LPoint2i_C_ctor_p_i(int param0) {
    return new LPoint2i(param0);
}


LPoint2i *
LPoint2i_C_ctor_p_ii(int param0, int param1) {
    return new LPoint2i(param0, param1);
}


LPoint2i const *
LPoint2i_C_zero_p_v() {
    return &((LPoint2i::zero)());
}


LPoint2i const *
LPoint2i_C_unit_x_p_v() {
    return &((LPoint2i::unit_x)());
}


LPoint2i const *
LPoint2i_C_unit_y_p_v() {
    return &((LPoint2i::unit_y)());
}


int
LPoint2i_C_get_class_type_i_v() {
    return ((LPoint2i::get_class_type)()).get_index();
}


void
LPoint2i_C_init_type_v_v() {
    (LPoint2i::init_type)();
}


// LPoint3d


LPoint3d *
LPoint3d_C_ctor_p_v() {
    return new LPoint3d();
}


LPoint3d *
LPoint3d_C_ctor_p_p(LPoint3d const *param0) {
    return new LPoint3d(*param0);
}


LPoint3d *
LPoint3d_C_ctor_p_pd(LVecBase2d const *param0, double param1) {
    return new LPoint3d(*param0, param1);
}


LPoint3d *
LPoint3d_C_ctor_p_p_1_p_p(LVecBase3d const *param0) {
    return new LPoint3d(*param0);
}


LPoint3d *
LPoint3d_C_ctor_p_d(double param0) {
    return new LPoint3d(param0);
}


LPoint3d *
LPoint3d_C_ctor_p_ddd(double param0, double param1, double param2) {
    return new LPoint3d(param0, param1, param2);
}


LPoint3d const *
LPoint3d_C_zero_p_v() {
    return &((LPoint3d::zero)());
}


LPoint3d const *
LPoint3d_C_unit_x_p_v() {
    return &((LPoint3d::unit_x)());
}


LPoint3d const *
LPoint3d_C_unit_y_p_v() {
    return &((LPoint3d::unit_y)());
}


LPoint3d const *
LPoint3d_C_unit_z_p_v() {
    return &((LPoint3d::unit_z)());
}


LPoint2d *
LPoint3d_C_get_xy_p_p(LPoint3d const *param0) {
    return new LPoint2d(((*param0).get_xy)());
}


LPoint2d *
LPoint3d_C_get_xz_p_p(LPoint3d const *param0) {
    return new LPoint2d(((*param0).get_xz)());
}


LPoint2d *
LPoint3d_C_get_yz_p_p(LPoint3d const *param0) {
    return new LPoint2d(((*param0).get_yz)());
}


LPoint3d *
LPoint3d_C_cross_p_pp(LPoint3d const *param0, LVecBase3d const *param1) {
    return new LPoint3d(((*param0).cross)(*param1));
}


LPoint3d *
LPoint3d_C_normalized_p_p(LPoint3d const *param0) {
    return new LPoint3d(((*param0).normalized)());
}


LPoint3d *
LPoint3d_C_project_p_pp(LPoint3d const *param0, LVecBase3d const *param1) {
    return new LPoint3d(((*param0).project)(*param1));
}


LPoint3d const *
LPoint3d_C_origin_p_p(CoordinateSystem param0) {
    return &((LPoint3d::origin)(param0));
}


LPoint3d const *
LPoint3d_C_origin_p_v() {
    return &((LPoint3d::origin)());
}


LPoint3d *
LPoint3d_C_rfu_p_dddp(double param0, double param1, double param2, CoordinateSystem param3) {
    return new LPoint3d((LPoint3d::rfu)(param0, param1, param2, param3));
}


LPoint3d *
LPoint3d_C_rfu_p_ddd(double param0, double param1, double param2) {
    return new LPoint3d((LPoint3d::rfu)(param0, param1, param2));
}


int
LPoint3d_C_get_class_type_i_v() {
    return ((LPoint3d::get_class_type)()).get_index();
}


void
LPoint3d_C_init_type_v_v() {
    (LPoint3d::init_type)();
}


// LPoint3f


LPoint3f *
LPoint3f_C_ctor_p_v() {
    return new LPoint3f();
}


LPoint3f *
LPoint3f_C_ctor_p_p(LPoint3f const *param0) {
    return new LPoint3f(*param0);
}


LPoint3f *
LPoint3f_C_ctor_p_pf(LVecBase2f const *param0, float param1) {
    return new LPoint3f(*param0, param1);
}


LPoint3f *
LPoint3f_C_ctor_p_p_1_p_p(LVecBase3f const *param0) {
    return new LPoint3f(*param0);
}


LPoint3f *
LPoint3f_C_ctor_p_f(float param0) {
    return new LPoint3f(param0);
}


LPoint3f *
LPoint3f_C_ctor_p_fff(float param0, float param1, float param2) {
    return new LPoint3f(param0, param1, param2);
}


LPoint3f const *
LPoint3f_C_zero_p_v() {
    return &((LPoint3f::zero)());
}


LPoint3f const *
LPoint3f_C_unit_x_p_v() {
    return &((LPoint3f::unit_x)());
}


LPoint3f const *
LPoint3f_C_unit_y_p_v() {
    return &((LPoint3f::unit_y)());
}


LPoint3f const *
LPoint3f_C_unit_z_p_v() {
    return &((LPoint3f::unit_z)());
}


LPoint2f *
LPoint3f_C_get_xy_p_p(LPoint3f const *param0) {
    return new LPoint2f(((*param0).get_xy)());
}


LPoint2f *
LPoint3f_C_get_xz_p_p(LPoint3f const *param0) {
    return new LPoint2f(((*param0).get_xz)());
}


LPoint2f *
LPoint3f_C_get_yz_p_p(LPoint3f const *param0) {
    return new LPoint2f(((*param0).get_yz)());
}


LPoint3f *
LPoint3f_C_cross_p_pp(LPoint3f const *param0, LVecBase3f const *param1) {
    return new LPoint3f(((*param0).cross)(*param1));
}


LPoint3f *
LPoint3f_C_normalized_p_p(LPoint3f const *param0) {
    return new LPoint3f(((*param0).normalized)());
}


LPoint3f *
LPoint3f_C_project_p_pp(LPoint3f const *param0, LVecBase3f const *param1) {
    return new LPoint3f(((*param0).project)(*param1));
}


LPoint3f const *
LPoint3f_C_origin_p_p(CoordinateSystem param0) {
    return &((LPoint3f::origin)(param0));
}


LPoint3f const *
LPoint3f_C_origin_p_v() {
    return &((LPoint3f::origin)());
}


LPoint3f *
LPoint3f_C_rfu_p_fffp(float param0, float param1, float param2, CoordinateSystem param3) {
    return new LPoint3f((LPoint3f::rfu)(param0, param1, param2, param3));
}


LPoint3f *
LPoint3f_C_rfu_p_fff(float param0, float param1, float param2) {
    return new LPoint3f((LPoint3f::rfu)(param0, param1, param2));
}


int
LPoint3f_C_get_class_type_i_v() {
    return ((LPoint3f::get_class_type)()).get_index();
}


void
LPoint3f_C_init_type_v_v() {
    (LPoint3f::init_type)();
}


// LPoint3i


LPoint3i *
LPoint3i_C_ctor_p_v() {
    return new LPoint3i();
}


LPoint3i *
LPoint3i_C_ctor_p_p(LPoint3i const *param0) {
    return new LPoint3i(*param0);
}


LPoint3i *
LPoint3i_C_ctor_p_pi(LVecBase2i const *param0, int param1) {
    return new LPoint3i(*param0, param1);
}


LPoint3i *
LPoint3i_C_ctor_p_p_1_p_p(LVecBase3i const *param0) {
    return new LPoint3i(*param0);
}


LPoint3i *
LPoint3i_C_ctor_p_i(int param0) {
    return new LPoint3i(param0);
}


LPoint3i *
LPoint3i_C_ctor_p_iii(int param0, int param1, int param2) {
    return new LPoint3i(param0, param1, param2);
}


LPoint3i const *
LPoint3i_C_zero_p_v() {
    return &((LPoint3i::zero)());
}


LPoint3i const *
LPoint3i_C_unit_x_p_v() {
    return &((LPoint3i::unit_x)());
}


LPoint3i const *
LPoint3i_C_unit_y_p_v() {
    return &((LPoint3i::unit_y)());
}


LPoint3i const *
LPoint3i_C_unit_z_p_v() {
    return &((LPoint3i::unit_z)());
}


LPoint2i *
LPoint3i_C_get_xy_p_p(LPoint3i const *param0) {
    return new LPoint2i(((*param0).get_xy)());
}


LPoint2i *
LPoint3i_C_get_xz_p_p(LPoint3i const *param0) {
    return new LPoint2i(((*param0).get_xz)());
}


LPoint2i *
LPoint3i_C_get_yz_p_p(LPoint3i const *param0) {
    return new LPoint2i(((*param0).get_yz)());
}


LPoint3i *
LPoint3i_C_cross_p_pp(LPoint3i const *param0, LVecBase3i const *param1) {
    return new LPoint3i(((*param0).cross)(*param1));
}


LPoint3i const *
LPoint3i_C_origin_p_p(CoordinateSystem param0) {
    return &((LPoint3i::origin)(param0));
}


LPoint3i const *
LPoint3i_C_origin_p_v() {
    return &((LPoint3i::origin)());
}


LPoint3i *
LPoint3i_C_rfu_p_iiip(int param0, int param1, int param2, CoordinateSystem param3) {
    return new LPoint3i((LPoint3i::rfu)(param0, param1, param2, param3));
}


LPoint3i *
LPoint3i_C_rfu_p_iii(int param0, int param1, int param2) {
    return new LPoint3i((LPoint3i::rfu)(param0, param1, param2));
}


int
LPoint3i_C_get_class_type_i_v() {
    return ((LPoint3i::get_class_type)()).get_index();
}


void
LPoint3i_C_init_type_v_v() {
    (LPoint3i::init_type)();
}


// LPoint4d


LPoint4d *
LPoint4d_C_ctor_p_v() {
    return new LPoint4d();
}


LPoint4d *
LPoint4d_C_ctor_p_p(LPoint4d const *param0) {
    return new LPoint4d(*param0);
}


LPoint4d *
LPoint4d_C_ctor_p_pd(LVecBase3d const *param0, double param1) {
    return new LPoint4d(*param0, param1);
}


LPoint4d *
LPoint4d_C_ctor_p_p_1_p_p(LVecBase4d const *param0) {
    return new LPoint4d(*param0);
}


LPoint4d *
LPoint4d_C_ctor_p_d(double param0) {
    return new LPoint4d(param0);
}


LPoint4d *
LPoint4d_C_ctor_p_dddd(double param0, double param1, double param2, double param3) {
    return new LPoint4d(param0, param1, param2, param3);
}


LPoint4d const *
LPoint4d_C_zero_p_v() {
    return &((LPoint4d::zero)());
}


LPoint4d const *
LPoint4d_C_unit_x_p_v() {
    return &((LPoint4d::unit_x)());
}


LPoint4d const *
LPoint4d_C_unit_y_p_v() {
    return &((LPoint4d::unit_y)());
}


LPoint4d const *
LPoint4d_C_unit_z_p_v() {
    return &((LPoint4d::unit_z)());
}


LPoint4d const *
LPoint4d_C_unit_w_p_v() {
    return &((LPoint4d::unit_w)());
}


LPoint3d *
LPoint4d_C_get_xyz_p_p(LPoint4d const *param0) {
    return new LPoint3d(((*param0).get_xyz)());
}


LPoint2d *
LPoint4d_C_get_xy_p_p(LPoint4d const *param0) {
    return new LPoint2d(((*param0).get_xy)());
}


LPoint4d *
LPoint4d_C_normalized_p_p(LPoint4d const *param0) {
    return new LPoint4d(((*param0).normalized)());
}


LPoint4d *
LPoint4d_C_project_p_pp(LPoint4d const *param0, LVecBase4d const *param1) {
    return new LPoint4d(((*param0).project)(*param1));
}


int
LPoint4d_C_get_class_type_i_v() {
    return ((LPoint4d::get_class_type)()).get_index();
}


void
LPoint4d_C_init_type_v_v() {
    (LPoint4d::init_type)();
}


// LPoint4f


LPoint4f *
LPoint4f_C_ctor_p_v() {
    return new LPoint4f();
}


LPoint4f *
LPoint4f_C_ctor_p_p(LPoint4f const *param0) {
    return new LPoint4f(*param0);
}


LPoint4f *
LPoint4f_C_ctor_p_pf(LVecBase3f const *param0, float param1) {
    return new LPoint4f(*param0, param1);
}


LPoint4f *
LPoint4f_C_ctor_p_p_1_p_p(LVecBase4f const *param0) {
    return new LPoint4f(*param0);
}


LPoint4f *
LPoint4f_C_ctor_p_f(float param0) {
    return new LPoint4f(param0);
}


LPoint4f *
LPoint4f_C_ctor_p_ffff(float param0, float param1, float param2, float param3) {
    return new LPoint4f(param0, param1, param2, param3);
}


LPoint4f const *
LPoint4f_C_zero_p_v() {
    return &((LPoint4f::zero)());
}


LPoint4f const *
LPoint4f_C_unit_x_p_v() {
    return &((LPoint4f::unit_x)());
}


LPoint4f const *
LPoint4f_C_unit_y_p_v() {
    return &((LPoint4f::unit_y)());
}


LPoint4f const *
LPoint4f_C_unit_z_p_v() {
    return &((LPoint4f::unit_z)());
}


LPoint4f const *
LPoint4f_C_unit_w_p_v() {
    return &((LPoint4f::unit_w)());
}


LPoint3f *
LPoint4f_C_get_xyz_p_p(LPoint4f const *param0) {
    return new LPoint3f(((*param0).get_xyz)());
}


LPoint2f *
LPoint4f_C_get_xy_p_p(LPoint4f const *param0) {
    return new LPoint2f(((*param0).get_xy)());
}


LPoint4f *
LPoint4f_C_normalized_p_p(LPoint4f const *param0) {
    return new LPoint4f(((*param0).normalized)());
}


LPoint4f *
LPoint4f_C_project_p_pp(LPoint4f const *param0, LVecBase4f const *param1) {
    return new LPoint4f(((*param0).project)(*param1));
}


int
LPoint4f_C_get_class_type_i_v() {
    return ((LPoint4f::get_class_type)()).get_index();
}


void
LPoint4f_C_init_type_v_v() {
    (LPoint4f::init_type)();
}


// LPoint4i


LPoint4i *
LPoint4i_C_ctor_p_v() {
    return new LPoint4i();
}


LPoint4i *
LPoint4i_C_ctor_p_p(LPoint4i const *param0) {
    return new LPoint4i(*param0);
}


LPoint4i *
LPoint4i_C_ctor_p_pi(LVecBase3i const *param0, int param1) {
    return new LPoint4i(*param0, param1);
}


LPoint4i *
LPoint4i_C_ctor_p_p_1_p_p(LVecBase4i const *param0) {
    return new LPoint4i(*param0);
}


LPoint4i *
LPoint4i_C_ctor_p_i(int param0) {
    return new LPoint4i(param0);
}


LPoint4i *
LPoint4i_C_ctor_p_iiii(int param0, int param1, int param2, int param3) {
    return new LPoint4i(param0, param1, param2, param3);
}


LPoint4i const *
LPoint4i_C_zero_p_v() {
    return &((LPoint4i::zero)());
}


LPoint4i const *
LPoint4i_C_unit_x_p_v() {
    return &((LPoint4i::unit_x)());
}


LPoint4i const *
LPoint4i_C_unit_y_p_v() {
    return &((LPoint4i::unit_y)());
}


LPoint4i const *
LPoint4i_C_unit_z_p_v() {
    return &((LPoint4i::unit_z)());
}


LPoint4i const *
LPoint4i_C_unit_w_p_v() {
    return &((LPoint4i::unit_w)());
}


LPoint3i *
LPoint4i_C_get_xyz_p_p(LPoint4i const *param0) {
    return new LPoint3i(((*param0).get_xyz)());
}


LPoint2i *
LPoint4i_C_get_xy_p_p(LPoint4i const *param0) {
    return new LPoint2i(((*param0).get_xy)());
}


int
LPoint4i_C_get_class_type_i_v() {
    return ((LPoint4i::get_class_type)()).get_index();
}


void
LPoint4i_C_init_type_v_v() {
    (LPoint4i::init_type)();
}


// LVecBase2d


LVecBase2d *
LVecBase2d_C_ctor_p_v() {
    return new LVecBase2d();
}


LVecBase2d *
LVecBase2d_C_ctor_p_p(LVecBase2d const *param0) {
    return new LVecBase2d(*param0);
}


LVecBase2d *
LVecBase2d_C_ctor_p_p_1_p_p(LVecBase2d::EVector2 const *param0) {
    return new LVecBase2d(*param0);
}


LVecBase2d *
LVecBase2d_C_ctor_p_d(double param0) {
    return new LVecBase2d(param0);
}


LVecBase2d *
LVecBase2d_C_ctor_p_dd(double param0, double param1) {
    return new LVecBase2d(param0, param1);
}


LVecBase2d const *
LVecBase2d_C_zero_p_v() {
    return &((LVecBase2d::zero)());
}


LVecBase2d const *
LVecBase2d_C_unit_x_p_v() {
    return &((LVecBase2d::unit_x)());
}


LVecBase2d const *
LVecBase2d_C_unit_y_p_v() {
    return &((LVecBase2d::unit_y)());
}


int
LVecBase2d_C_size_i_v() {
    return (LVecBase2d::size)();
}


bool
LVecBase2d_C_is_nan_B_p(LVecBase2d const *param0) {
    return ((*param0).is_nan)();
}


double
LVecBase2d_C_get_cell_d_pi(LVecBase2d const *param0, int param1) {
    return ((*param0).get_cell)(param1);
}


void
LVecBase2d_C_set_cell_v_pid(LVecBase2d *param0, int param1, double param2) {
    ((*param0).set_cell)(param1, param2);
}


double
LVecBase2d_C_get_x_d_p(LVecBase2d const *param0) {
    return ((*param0).get_x)();
}


double
LVecBase2d_C_get_y_d_p(LVecBase2d const *param0) {
    return ((*param0).get_y)();
}


void
LVecBase2d_C_set_x_v_pd(LVecBase2d *param0, double param1) {
    ((*param0).set_x)(param1);
}


void
LVecBase2d_C_set_y_v_pd(LVecBase2d *param0, double param1) {
    ((*param0).set_y)(param1);
}


void
LVecBase2d_C_add_to_cell_v_pid(LVecBase2d *param0, int param1, double param2) {
    ((*param0).add_to_cell)(param1, param2);
}


void
LVecBase2d_C_add_x_v_pd(LVecBase2d *param0, double param1) {
    ((*param0).add_x)(param1);
}


void
LVecBase2d_C_add_y_v_pd(LVecBase2d *param0, double param1) {
    ((*param0).add_y)(param1);
}


void
LVecBase2d_C_get_data_v_p(LVecBase2d const *param0) {
    ((*param0).get_data)();
}


int
LVecBase2d_C_get_num_components_i_v() {
    return (LVecBase2d::get_num_components)();
}


void
LVecBase2d_C_begin_v_p(LVecBase2d *param0) {
    ((*param0).begin)();
}


void
LVecBase2d_C_begin_v_p_1_v_p(LVecBase2d const *param0) {
    ((*param0).begin)();
}


void
LVecBase2d_C_end_v_p(LVecBase2d *param0) {
    ((*param0).end)();
}


void
LVecBase2d_C_end_v_p_1_v_p(LVecBase2d const *param0) {
    ((*param0).end)();
}


void
LVecBase2d_C_fill_v_pd(LVecBase2d *param0, double param1) {
    ((*param0).fill)(param1);
}


void
LVecBase2d_C_set_v_pdd(LVecBase2d *param0, double param1, double param2) {
    ((*param0).set)(param1, param2);
}


double
LVecBase2d_C_dot_d_pp(LVecBase2d const *param0, LVecBase2d const *param1) {
    return ((*param0).dot)(*param1);
}


double
LVecBase2d_C_length_squared_d_p(LVecBase2d const *param0) {
    return ((*param0).length_squared)();
}


double
LVecBase2d_C_length_d_p(LVecBase2d const *param0) {
    return ((*param0).length)();
}


bool
LVecBase2d_C_normalize_B_p(LVecBase2d *param0) {
    return ((*param0).normalize)();
}


LVecBase2d *
LVecBase2d_C_normalized_p_p(LVecBase2d const *param0) {
    return new LVecBase2d(((*param0).normalized)());
}


LVecBase2d *
LVecBase2d_C_project_p_pp(LVecBase2d const *param0, LVecBase2d const *param1) {
    return new LVecBase2d(((*param0).project)(*param1));
}


int
LVecBase2d_C_compare_to_i_pp(LVecBase2d const *param0, LVecBase2d const *param1) {
    return ((*param0).compare_to)(*param1);
}


int
LVecBase2d_C_compare_to_i_ppd(LVecBase2d const *param0, LVecBase2d const *param1, double param2) {
    return ((*param0).compare_to)(*param1, param2);
}


std::size_t
LVecBase2d_C_get_hash_l_p(LVecBase2d const *param0) {
    return ((*param0).get_hash)();
}


std::size_t
LVecBase2d_C_get_hash_l_pd(LVecBase2d const *param0, double param1) {
    return ((*param0).get_hash)(param1);
}


std::size_t
LVecBase2d_C_add_hash_l_pl(LVecBase2d const *param0, std::size_t param1) {
    return ((*param0).add_hash)(param1);
}


std::size_t
LVecBase2d_C_add_hash_l_pld(LVecBase2d const *param0, std::size_t param1, double param2) {
    return ((*param0).add_hash)(param1, param2);
}


void
LVecBase2d_C_generate_hash_v_pp(LVecBase2d const *param0, ChecksumHashGenerator *param1) {
    ((*param0).generate_hash)(*param1);
}


void
LVecBase2d_C_generate_hash_v_ppd(LVecBase2d const *param0, ChecksumHashGenerator *param1, double param2) {
    ((*param0).generate_hash)(*param1, param2);
}


void
LVecBase2d_C_componentwise_mult_v_pp(LVecBase2d *param0, LVecBase2d const *param1) {
    ((*param0).componentwise_mult)(*param1);
}


LVecBase2d *
LVecBase2d_C_fmax_p_pp(LVecBase2d const *param0, LVecBase2d const *param1) {
    return new LVecBase2d(((*param0).fmax)(*param1));
}


LVecBase2d *
LVecBase2d_C_fmin_p_pp(LVecBase2d const *param0, LVecBase2d const *param1) {
    return new LVecBase2d(((*param0).fmin)(*param1));
}


bool
LVecBase2d_C_almost_equal_B_pp(LVecBase2d const *param0, LVecBase2d const *param1) {
    return ((*param0).almost_equal)(*param1);
}


bool
LVecBase2d_C_almost_equal_B_ppd(LVecBase2d const *param0, LVecBase2d const *param1, double param2) {
    return ((*param0).almost_equal)(*param1, param2);
}


void
LVecBase2d_C_output_v_pp(LVecBase2d const *param0, std::ostream *param1) {
    ((*param0).output)(*param1);
}


void
LVecBase2d_C_write_datagram_fixed_v_pp(LVecBase2d const *param0, Datagram *param1) {
    ((*param0).write_datagram_fixed)(*param1);
}


void
LVecBase2d_C_read_datagram_fixed_v_pp(LVecBase2d *param0, DatagramIterator *param1) {
    ((*param0).read_datagram_fixed)(*param1);
}


void
LVecBase2d_C_write_datagram_v_pp(LVecBase2d const *param0, Datagram *param1) {
    ((*param0).write_datagram)(*param1);
}


void
LVecBase2d_C_read_datagram_v_pp(LVecBase2d *param0, DatagramIterator *param1) {
    ((*param0).read_datagram)(*param1);
}


LVecBase2d::EVector2 *
LVecBase2d_C_get_v_p_p(LVecBase2d const *param0) {
    return new LVecBase2d::EVector2((param0)->_v);
}


int
LVecBase2d_C_get_class_type_i_v() {
    return ((LVecBase2d::get_class_type)()).get_index();
}


void
LVecBase2d_C_init_type_v_v() {
    (LVecBase2d::init_type)();
}


// LVecBase2f


LVecBase2f *
LVecBase2f_C_ctor_p_v() {
    return new LVecBase2f();
}


LVecBase2f *
LVecBase2f_C_ctor_p_p(LVecBase2f const *param0) {
    return new LVecBase2f(*param0);
}


LVecBase2f *
LVecBase2f_C_ctor_p_p_1_p_p(LVecBase2f::EVector2 const *param0) {
    return new LVecBase2f(*param0);
}


LVecBase2f *
LVecBase2f_C_ctor_p_f(float param0) {
    return new LVecBase2f(param0);
}


LVecBase2f *
LVecBase2f_C_ctor_p_ff(float param0, float param1) {
    return new LVecBase2f(param0, param1);
}


LVecBase2f const *
LVecBase2f_C_zero_p_v() {
    return &((LVecBase2f::zero)());
}


LVecBase2f const *
LVecBase2f_C_unit_x_p_v() {
    return &((LVecBase2f::unit_x)());
}


LVecBase2f const *
LVecBase2f_C_unit_y_p_v() {
    return &((LVecBase2f::unit_y)());
}


int
LVecBase2f_C_size_i_v() {
    return (LVecBase2f::size)();
}


bool
LVecBase2f_C_is_nan_B_p(LVecBase2f const *param0) {
    return ((*param0).is_nan)();
}


float
LVecBase2f_C_get_cell_f_pi(LVecBase2f const *param0, int param1) {
    return ((*param0).get_cell)(param1);
}


void
LVecBase2f_C_set_cell_v_pif(LVecBase2f *param0, int param1, float param2) {
    ((*param0).set_cell)(param1, param2);
}


float
LVecBase2f_C_get_x_f_p(LVecBase2f const *param0) {
    return ((*param0).get_x)();
}


float
LVecBase2f_C_get_y_f_p(LVecBase2f const *param0) {
    return ((*param0).get_y)();
}


void
LVecBase2f_C_set_x_v_pf(LVecBase2f *param0, float param1) {
    ((*param0).set_x)(param1);
}


void
LVecBase2f_C_set_y_v_pf(LVecBase2f *param0, float param1) {
    ((*param0).set_y)(param1);
}


void
LVecBase2f_C_add_to_cell_v_pif(LVecBase2f *param0, int param1, float param2) {
    ((*param0).add_to_cell)(param1, param2);
}


void
LVecBase2f_C_add_x_v_pf(LVecBase2f *param0, float param1) {
    ((*param0).add_x)(param1);
}


void
LVecBase2f_C_add_y_v_pf(LVecBase2f *param0, float param1) {
    ((*param0).add_y)(param1);
}


void
LVecBase2f_C_get_data_v_p(LVecBase2f const *param0) {
    ((*param0).get_data)();
}


int
LVecBase2f_C_get_num_components_i_v() {
    return (LVecBase2f::get_num_components)();
}


void
LVecBase2f_C_begin_v_p(LVecBase2f *param0) {
    ((*param0).begin)();
}


void
LVecBase2f_C_begin_v_p_1_v_p(LVecBase2f const *param0) {
    ((*param0).begin)();
}


void
LVecBase2f_C_end_v_p(LVecBase2f *param0) {
    ((*param0).end)();
}


void
LVecBase2f_C_end_v_p_1_v_p(LVecBase2f const *param0) {
    ((*param0).end)();
}


void
LVecBase2f_C_fill_v_pf(LVecBase2f *param0, float param1) {
    ((*param0).fill)(param1);
}


void
LVecBase2f_C_set_v_pff(LVecBase2f *param0, float param1, float param2) {
    ((*param0).set)(param1, param2);
}


float
LVecBase2f_C_dot_f_pp(LVecBase2f const *param0, LVecBase2f const *param1) {
    return ((*param0).dot)(*param1);
}


float
LVecBase2f_C_length_squared_f_p(LVecBase2f const *param0) {
    return ((*param0).length_squared)();
}


float
LVecBase2f_C_length_f_p(LVecBase2f const *param0) {
    return ((*param0).length)();
}


bool
LVecBase2f_C_normalize_B_p(LVecBase2f *param0) {
    return ((*param0).normalize)();
}


LVecBase2f *
LVecBase2f_C_normalized_p_p(LVecBase2f const *param0) {
    return new LVecBase2f(((*param0).normalized)());
}


LVecBase2f *
LVecBase2f_C_project_p_pp(LVecBase2f const *param0, LVecBase2f const *param1) {
    return new LVecBase2f(((*param0).project)(*param1));
}


int
LVecBase2f_C_compare_to_i_pp(LVecBase2f const *param0, LVecBase2f const *param1) {
    return ((*param0).compare_to)(*param1);
}


int
LVecBase2f_C_compare_to_i_ppf(LVecBase2f const *param0, LVecBase2f const *param1, float param2) {
    return ((*param0).compare_to)(*param1, param2);
}


std::size_t
LVecBase2f_C_get_hash_l_p(LVecBase2f const *param0) {
    return ((*param0).get_hash)();
}


std::size_t
LVecBase2f_C_get_hash_l_pf(LVecBase2f const *param0, float param1) {
    return ((*param0).get_hash)(param1);
}


std::size_t
LVecBase2f_C_add_hash_l_pl(LVecBase2f const *param0, std::size_t param1) {
    return ((*param0).add_hash)(param1);
}


std::size_t
LVecBase2f_C_add_hash_l_plf(LVecBase2f const *param0, std::size_t param1, float param2) {
    return ((*param0).add_hash)(param1, param2);
}


void
LVecBase2f_C_generate_hash_v_pp(LVecBase2f const *param0, ChecksumHashGenerator *param1) {
    ((*param0).generate_hash)(*param1);
}


void
LVecBase2f_C_generate_hash_v_ppf(LVecBase2f const *param0, ChecksumHashGenerator *param1, float param2) {
    ((*param0).generate_hash)(*param1, param2);
}


void
LVecBase2f_C_componentwise_mult_v_pp(LVecBase2f *param0, LVecBase2f const *param1) {
    ((*param0).componentwise_mult)(*param1);
}


LVecBase2f *
LVecBase2f_C_fmax_p_pp(LVecBase2f const *param0, LVecBase2f const *param1) {
    return new LVecBase2f(((*param0).fmax)(*param1));
}


LVecBase2f *
LVecBase2f_C_fmin_p_pp(LVecBase2f const *param0, LVecBase2f const *param1) {
    return new LVecBase2f(((*param0).fmin)(*param1));
}


bool
LVecBase2f_C_almost_equal_B_pp(LVecBase2f const *param0, LVecBase2f const *param1) {
    return ((*param0).almost_equal)(*param1);
}


bool
LVecBase2f_C_almost_equal_B_ppf(LVecBase2f const *param0, LVecBase2f const *param1, float param2) {
    return ((*param0).almost_equal)(*param1, param2);
}


void
LVecBase2f_C_output_v_pp(LVecBase2f const *param0, std::ostream *param1) {
    ((*param0).output)(*param1);
}


void
LVecBase2f_C_write_datagram_fixed_v_pp(LVecBase2f const *param0, Datagram *param1) {
    ((*param0).write_datagram_fixed)(*param1);
}


void
LVecBase2f_C_read_datagram_fixed_v_pp(LVecBase2f *param0, DatagramIterator *param1) {
    ((*param0).read_datagram_fixed)(*param1);
}


void
LVecBase2f_C_write_datagram_v_pp(LVecBase2f const *param0, Datagram *param1) {
    ((*param0).write_datagram)(*param1);
}


void
LVecBase2f_C_read_datagram_v_pp(LVecBase2f *param0, DatagramIterator *param1) {
    ((*param0).read_datagram)(*param1);
}


LVecBase2f::EVector2 *
LVecBase2f_C_get_v_p_p(LVecBase2f const *param0) {
    return new LVecBase2f::EVector2((param0)->_v);
}


int
LVecBase2f_C_get_class_type_i_v() {
    return ((LVecBase2f::get_class_type)()).get_index();
}


void
LVecBase2f_C_init_type_v_v() {
    (LVecBase2f::init_type)();
}


// LVecBase2i


LVecBase2i *
LVecBase2i_C_ctor_p_v() {
    return new LVecBase2i();
}


LVecBase2i *
LVecBase2i_C_ctor_p_p(LVecBase2i const *param0) {
    return new LVecBase2i(*param0);
}


LVecBase2i *
LVecBase2i_C_ctor_p_p_1_p_p(LVecBase2i::EVector2 const *param0) {
    return new LVecBase2i(*param0);
}


LVecBase2i *
LVecBase2i_C_ctor_p_i(int param0) {
    return new LVecBase2i(param0);
}


LVecBase2i *
LVecBase2i_C_ctor_p_ii(int param0, int param1) {
    return new LVecBase2i(param0, param1);
}


LVecBase2i const *
LVecBase2i_C_zero_p_v() {
    return &((LVecBase2i::zero)());
}


LVecBase2i const *
LVecBase2i_C_unit_x_p_v() {
    return &((LVecBase2i::unit_x)());
}


LVecBase2i const *
LVecBase2i_C_unit_y_p_v() {
    return &((LVecBase2i::unit_y)());
}


int
LVecBase2i_C_size_i_v() {
    return (LVecBase2i::size)();
}


bool
LVecBase2i_C_is_nan_B_p(LVecBase2i const *param0) {
    return ((*param0).is_nan)();
}


int
LVecBase2i_C_get_cell_i_pi(LVecBase2i const *param0, int param1) {
    return ((*param0).get_cell)(param1);
}


void
LVecBase2i_C_set_cell_v_pii(LVecBase2i *param0, int param1, int param2) {
    ((*param0).set_cell)(param1, param2);
}


int
LVecBase2i_C_get_x_i_p(LVecBase2i const *param0) {
    return ((*param0).get_x)();
}


int
LVecBase2i_C_get_y_i_p(LVecBase2i const *param0) {
    return ((*param0).get_y)();
}


void
LVecBase2i_C_set_x_v_pi(LVecBase2i *param0, int param1) {
    ((*param0).set_x)(param1);
}


void
LVecBase2i_C_set_y_v_pi(LVecBase2i *param0, int param1) {
    ((*param0).set_y)(param1);
}


void
LVecBase2i_C_add_to_cell_v_pii(LVecBase2i *param0, int param1, int param2) {
    ((*param0).add_to_cell)(param1, param2);
}


void
LVecBase2i_C_add_x_v_pi(LVecBase2i *param0, int param1) {
    ((*param0).add_x)(param1);
}


void
LVecBase2i_C_add_y_v_pi(LVecBase2i *param0, int param1) {
    ((*param0).add_y)(param1);
}


void
LVecBase2i_C_get_data_v_p(LVecBase2i const *param0) {
    ((*param0).get_data)();
}


int
LVecBase2i_C_get_num_components_i_v() {
    return (LVecBase2i::get_num_components)();
}


void
LVecBase2i_C_begin_v_p(LVecBase2i *param0) {
    ((*param0).begin)();
}


void
LVecBase2i_C_begin_v_p_1_v_p(LVecBase2i const *param0) {
    ((*param0).begin)();
}


void
LVecBase2i_C_end_v_p(LVecBase2i *param0) {
    ((*param0).end)();
}


void
LVecBase2i_C_end_v_p_1_v_p(LVecBase2i const *param0) {
    ((*param0).end)();
}


void
LVecBase2i_C_fill_v_pi(LVecBase2i *param0, int param1) {
    ((*param0).fill)(param1);
}


void
LVecBase2i_C_set_v_pii(LVecBase2i *param0, int param1, int param2) {
    ((*param0).set)(param1, param2);
}


int
LVecBase2i_C_dot_i_pp(LVecBase2i const *param0, LVecBase2i const *param1) {
    return ((*param0).dot)(*param1);
}


int
LVecBase2i_C_length_squared_i_p(LVecBase2i const *param0) {
    return ((*param0).length_squared)();
}


int
LVecBase2i_C_compare_to_i_pp(LVecBase2i const *param0, LVecBase2i const *param1) {
    return ((*param0).compare_to)(*param1);
}


std::size_t
LVecBase2i_C_get_hash_l_p(LVecBase2i const *param0) {
    return ((*param0).get_hash)();
}


std::size_t
LVecBase2i_C_add_hash_l_pl(LVecBase2i const *param0, std::size_t param1) {
    return ((*param0).add_hash)(param1);
}


void
LVecBase2i_C_generate_hash_v_pp(LVecBase2i const *param0, ChecksumHashGenerator *param1) {
    ((*param0).generate_hash)(*param1);
}


void
LVecBase2i_C_componentwise_mult_v_pp(LVecBase2i *param0, LVecBase2i const *param1) {
    ((*param0).componentwise_mult)(*param1);
}


LVecBase2i *
LVecBase2i_C_fmax_p_pp(LVecBase2i const *param0, LVecBase2i const *param1) {
    return new LVecBase2i(((*param0).fmax)(*param1));
}


LVecBase2i *
LVecBase2i_C_fmin_p_pp(LVecBase2i const *param0, LVecBase2i const *param1) {
    return new LVecBase2i(((*param0).fmin)(*param1));
}


bool
LVecBase2i_C_almost_equal_B_pp(LVecBase2i const *param0, LVecBase2i const *param1) {
    return ((*param0).almost_equal)(*param1);
}


bool
LVecBase2i_C_almost_equal_B_ppi(LVecBase2i const *param0, LVecBase2i const *param1, int param2) {
    return ((*param0).almost_equal)(*param1, param2);
}


void
LVecBase2i_C_output_v_pp(LVecBase2i const *param0, std::ostream *param1) {
    ((*param0).output)(*param1);
}


void
LVecBase2i_C_write_datagram_fixed_v_pp(LVecBase2i const *param0, Datagram *param1) {
    ((*param0).write_datagram_fixed)(*param1);
}


void
LVecBase2i_C_read_datagram_fixed_v_pp(LVecBase2i *param0, DatagramIterator *param1) {
    ((*param0).read_datagram_fixed)(*param1);
}


void
LVecBase2i_C_write_datagram_v_pp(LVecBase2i const *param0, Datagram *param1) {
    ((*param0).write_datagram)(*param1);
}


void
LVecBase2i_C_read_datagram_v_pp(LVecBase2i *param0, DatagramIterator *param1) {
    ((*param0).read_datagram)(*param1);
}


LVecBase2i::EVector2 *
LVecBase2i_C_get_v_p_p(LVecBase2i const *param0) {
    return new LVecBase2i::EVector2((param0)->_v);
}


int
LVecBase2i_C_get_class_type_i_v() {
    return ((LVecBase2i::get_class_type)()).get_index();
}


void
LVecBase2i_C_init_type_v_v() {
    (LVecBase2i::init_type)();
}


// LVecBase3d


LVecBase3d *
LVecBase3d_C_ctor_p_v() {
    return new LVecBase3d();
}


LVecBase3d *
LVecBase3d_C_ctor_p_pd(LVecBase2d const *param0, double param1) {
    return new LVecBase3d(*param0, param1);
}


LVecBase3d *
LVecBase3d_C_ctor_p_p(LVecBase3d const *param0) {
    return new LVecBase3d(*param0);
}


LVecBase3d *
LVecBase3d_C_ctor_p_p_1_p_p(LVecBase3d::EVector3 const *param0) {
    return new LVecBase3d(*param0);
}


LVecBase3d *
LVecBase3d_C_ctor_p_d(double param0) {
    return new LVecBase3d(param0);
}


LVecBase3d *
LVecBase3d_C_ctor_p_ddd(double param0, double param1, double param2) {
    return new LVecBase3d(param0, param1, param2);
}


LVecBase3d const *
LVecBase3d_C_zero_p_v() {
    return &((LVecBase3d::zero)());
}


LVecBase3d const *
LVecBase3d_C_unit_x_p_v() {
    return &((LVecBase3d::unit_x)());
}


LVecBase3d const *
LVecBase3d_C_unit_y_p_v() {
    return &((LVecBase3d::unit_y)());
}


LVecBase3d const *
LVecBase3d_C_unit_z_p_v() {
    return &((LVecBase3d::unit_z)());
}


int
LVecBase3d_C_size_i_v() {
    return (LVecBase3d::size)();
}


bool
LVecBase3d_C_is_nan_B_p(LVecBase3d const *param0) {
    return ((*param0).is_nan)();
}


double
LVecBase3d_C_get_cell_d_pi(LVecBase3d const *param0, int param1) {
    return ((*param0).get_cell)(param1);
}


double
LVecBase3d_C_get_x_d_p(LVecBase3d const *param0) {
    return ((*param0).get_x)();
}


double
LVecBase3d_C_get_y_d_p(LVecBase3d const *param0) {
    return ((*param0).get_y)();
}


double
LVecBase3d_C_get_z_d_p(LVecBase3d const *param0) {
    return ((*param0).get_z)();
}


void
LVecBase3d_C_set_cell_v_pid(LVecBase3d *param0, int param1, double param2) {
    ((*param0).set_cell)(param1, param2);
}


void
LVecBase3d_C_set_x_v_pd(LVecBase3d *param0, double param1) {
    ((*param0).set_x)(param1);
}


void
LVecBase3d_C_set_y_v_pd(LVecBase3d *param0, double param1) {
    ((*param0).set_y)(param1);
}


void
LVecBase3d_C_set_z_v_pd(LVecBase3d *param0, double param1) {
    ((*param0).set_z)(param1);
}


LVecBase2d *
LVecBase3d_C_get_xy_p_p(LVecBase3d const *param0) {
    return new LVecBase2d(((*param0).get_xy)());
}


LVecBase2d *
LVecBase3d_C_get_xz_p_p(LVecBase3d const *param0) {
    return new LVecBase2d(((*param0).get_xz)());
}


LVecBase2d *
LVecBase3d_C_get_yz_p_p(LVecBase3d const *param0) {
    return new LVecBase2d(((*param0).get_yz)());
}


void
LVecBase3d_C_add_to_cell_v_pid(LVecBase3d *param0, int param1, double param2) {
    ((*param0).add_to_cell)(param1, param2);
}


void
LVecBase3d_C_add_x_v_pd(LVecBase3d *param0, double param1) {
    ((*param0).add_x)(param1);
}


void
LVecBase3d_C_add_y_v_pd(LVecBase3d *param0, double param1) {
    ((*param0).add_y)(param1);
}


void
LVecBase3d_C_add_z_v_pd(LVecBase3d *param0, double param1) {
    ((*param0).add_z)(param1);
}


void
LVecBase3d_C_get_data_v_p(LVecBase3d const *param0) {
    ((*param0).get_data)();
}


int
LVecBase3d_C_get_num_components_i_v() {
    return (LVecBase3d::get_num_components)();
}


void
LVecBase3d_C_begin_v_p(LVecBase3d *param0) {
    ((*param0).begin)();
}


void
LVecBase3d_C_begin_v_p_1_v_p(LVecBase3d const *param0) {
    ((*param0).begin)();
}


void
LVecBase3d_C_end_v_p(LVecBase3d *param0) {
    ((*param0).end)();
}


void
LVecBase3d_C_end_v_p_1_v_p(LVecBase3d const *param0) {
    ((*param0).end)();
}


void
LVecBase3d_C_fill_v_pd(LVecBase3d *param0, double param1) {
    ((*param0).fill)(param1);
}


void
LVecBase3d_C_set_v_pddd(LVecBase3d *param0, double param1, double param2, double param3) {
    ((*param0).set)(param1, param2, param3);
}


double
LVecBase3d_C_dot_d_pp(LVecBase3d const *param0, LVecBase3d const *param1) {
    return ((*param0).dot)(*param1);
}


double
LVecBase3d_C_length_squared_d_p(LVecBase3d const *param0) {
    return ((*param0).length_squared)();
}


double
LVecBase3d_C_length_d_p(LVecBase3d const *param0) {
    return ((*param0).length)();
}


bool
LVecBase3d_C_normalize_B_p(LVecBase3d *param0) {
    return ((*param0).normalize)();
}


LVecBase3d *
LVecBase3d_C_normalized_p_p(LVecBase3d const *param0) {
    return new LVecBase3d(((*param0).normalized)());
}


LVecBase3d *
LVecBase3d_C_project_p_pp(LVecBase3d const *param0, LVecBase3d const *param1) {
    return new LVecBase3d(((*param0).project)(*param1));
}


LVecBase3d *
LVecBase3d_C_cross_p_pp(LVecBase3d const *param0, LVecBase3d const *param1) {
    return new LVecBase3d(((*param0).cross)(*param1));
}


LVecBase3d *
LVecBase3d_C_get_standardized_hpr_p_p(LVecBase3d const *param0) {
    return new LVecBase3d(((*param0).get_standardized_hpr)());
}


int
LVecBase3d_C_compare_to_i_pp(LVecBase3d const *param0, LVecBase3d const *param1) {
    return ((*param0).compare_to)(*param1);
}


int
LVecBase3d_C_compare_to_i_ppd(LVecBase3d const *param0, LVecBase3d const *param1, double param2) {
    return ((*param0).compare_to)(*param1, param2);
}


std::size_t
LVecBase3d_C_get_hash_l_p(LVecBase3d const *param0) {
    return ((*param0).get_hash)();
}


std::size_t
LVecBase3d_C_get_hash_l_pd(LVecBase3d const *param0, double param1) {
    return ((*param0).get_hash)(param1);
}


std::size_t
LVecBase3d_C_add_hash_l_pl(LVecBase3d const *param0, std::size_t param1) {
    return ((*param0).add_hash)(param1);
}


std::size_t
LVecBase3d_C_add_hash_l_pld(LVecBase3d const *param0, std::size_t param1, double param2) {
    return ((*param0).add_hash)(param1, param2);
}


void
LVecBase3d_C_generate_hash_v_pp(LVecBase3d const *param0, ChecksumHashGenerator *param1) {
    ((*param0).generate_hash)(*param1);
}


void
LVecBase3d_C_generate_hash_v_ppd(LVecBase3d const *param0, ChecksumHashGenerator *param1, double param2) {
    ((*param0).generate_hash)(*param1, param2);
}


void
LVecBase3d_C_componentwise_mult_v_pp(LVecBase3d *param0, LVecBase3d const *param1) {
    ((*param0).componentwise_mult)(*param1);
}


LVecBase3d *
LVecBase3d_C_fmax_p_pp(LVecBase3d const *param0, LVecBase3d const *param1) {
    return new LVecBase3d(((*param0).fmax)(*param1));
}


LVecBase3d *
LVecBase3d_C_fmin_p_pp(LVecBase3d const *param0, LVecBase3d const *param1) {
    return new LVecBase3d(((*param0).fmin)(*param1));
}


void
LVecBase3d_C_cross_into_v_pp(LVecBase3d *param0, LVecBase3d const *param1) {
    ((*param0).cross_into)(*param1);
}


bool
LVecBase3d_C_almost_equal_B_pp(LVecBase3d const *param0, LVecBase3d const *param1) {
    return ((*param0).almost_equal)(*param1);
}


bool
LVecBase3d_C_almost_equal_B_ppd(LVecBase3d const *param0, LVecBase3d const *param1, double param2) {
    return ((*param0).almost_equal)(*param1, param2);
}


void
LVecBase3d_C_output_v_pp(LVecBase3d const *param0, std::ostream *param1) {
    ((*param0).output)(*param1);
}


void
LVecBase3d_C_write_datagram_fixed_v_pp(LVecBase3d const *param0, Datagram *param1) {
    ((*param0).write_datagram_fixed)(*param1);
}


void
LVecBase3d_C_read_datagram_fixed_v_pp(LVecBase3d *param0, DatagramIterator *param1) {
    ((*param0).read_datagram_fixed)(*param1);
}


void
LVecBase3d_C_write_datagram_v_pp(LVecBase3d const *param0, Datagram *param1) {
    ((*param0).write_datagram)(*param1);
}


void
LVecBase3d_C_read_datagram_v_pp(LVecBase3d *param0, DatagramIterator *param1) {
    ((*param0).read_datagram)(*param1);
}


LVecBase3d::EVector3 *
LVecBase3d_C_get_v_p_p(LVecBase3d const *param0) {
    return new LVecBase3d::EVector3((param0)->_v);
}


int
LVecBase3d_C_get_class_type_i_v() {
    return ((LVecBase3d::get_class_type)()).get_index();
}


void
LVecBase3d_C_init_type_v_v() {
    (LVecBase3d::init_type)();
}


// LVecBase3f


LVecBase3f *
LVecBase3f_C_ctor_p_v() {
    return new LVecBase3f();
}


LVecBase3f *
LVecBase3f_C_ctor_p_pf(LVecBase2f const *param0, float param1) {
    return new LVecBase3f(*param0, param1);
}


LVecBase3f *
LVecBase3f_C_ctor_p_p(LVecBase3f const *param0) {
    return new LVecBase3f(*param0);
}


LVecBase3f *
LVecBase3f_C_ctor_p_p_1_p_p(LVecBase3f::EVector3 const *param0) {
    return new LVecBase3f(*param0);
}


LVecBase3f *
LVecBase3f_C_ctor_p_f(float param0) {
    return new LVecBase3f(param0);
}


LVecBase3f *
LVecBase3f_C_ctor_p_fff(float param0, float param1, float param2) {
    return new LVecBase3f(param0, param1, param2);
}


LVecBase3f const *
LVecBase3f_C_zero_p_v() {
    return &((LVecBase3f::zero)());
}


LVecBase3f const *
LVecBase3f_C_unit_x_p_v() {
    return &((LVecBase3f::unit_x)());
}


LVecBase3f const *
LVecBase3f_C_unit_y_p_v() {
    return &((LVecBase3f::unit_y)());
}


LVecBase3f const *
LVecBase3f_C_unit_z_p_v() {
    return &((LVecBase3f::unit_z)());
}


int
LVecBase3f_C_size_i_v() {
    return (LVecBase3f::size)();
}


bool
LVecBase3f_C_is_nan_B_p(LVecBase3f const *param0) {
    return ((*param0).is_nan)();
}


float
LVecBase3f_C_get_cell_f_pi(LVecBase3f const *param0, int param1) {
    return ((*param0).get_cell)(param1);
}


float
LVecBase3f_C_get_x_f_p(LVecBase3f const *param0) {
    return ((*param0).get_x)();
}


float
LVecBase3f_C_get_y_f_p(LVecBase3f const *param0) {
    return ((*param0).get_y)();
}


float
LVecBase3f_C_get_z_f_p(LVecBase3f const *param0) {
    return ((*param0).get_z)();
}


void
LVecBase3f_C_set_cell_v_pif(LVecBase3f *param0, int param1, float param2) {
    ((*param0).set_cell)(param1, param2);
}


void
LVecBase3f_C_set_x_v_pf(LVecBase3f *param0, float param1) {
    ((*param0).set_x)(param1);
}


void
LVecBase3f_C_set_y_v_pf(LVecBase3f *param0, float param1) {
    ((*param0).set_y)(param1);
}


void
LVecBase3f_C_set_z_v_pf(LVecBase3f *param0, float param1) {
    ((*param0).set_z)(param1);
}


LVecBase2f *
LVecBase3f_C_get_xy_p_p(LVecBase3f const *param0) {
    return new LVecBase2f(((*param0).get_xy)());
}


LVecBase2f *
LVecBase3f_C_get_xz_p_p(LVecBase3f const *param0) {
    return new LVecBase2f(((*param0).get_xz)());
}


LVecBase2f *
LVecBase3f_C_get_yz_p_p(LVecBase3f const *param0) {
    return new LVecBase2f(((*param0).get_yz)());
}


void
LVecBase3f_C_add_to_cell_v_pif(LVecBase3f *param0, int param1, float param2) {
    ((*param0).add_to_cell)(param1, param2);
}


void
LVecBase3f_C_add_x_v_pf(LVecBase3f *param0, float param1) {
    ((*param0).add_x)(param1);
}


void
LVecBase3f_C_add_y_v_pf(LVecBase3f *param0, float param1) {
    ((*param0).add_y)(param1);
}


void
LVecBase3f_C_add_z_v_pf(LVecBase3f *param0, float param1) {
    ((*param0).add_z)(param1);
}


void
LVecBase3f_C_get_data_v_p(LVecBase3f const *param0) {
    ((*param0).get_data)();
}


int
LVecBase3f_C_get_num_components_i_v() {
    return (LVecBase3f::get_num_components)();
}


void
LVecBase3f_C_begin_v_p(LVecBase3f *param0) {
    ((*param0).begin)();
}


void
LVecBase3f_C_begin_v_p_1_v_p(LVecBase3f const *param0) {
    ((*param0).begin)();
}


void
LVecBase3f_C_end_v_p(LVecBase3f *param0) {
    ((*param0).end)();
}


void
LVecBase3f_C_end_v_p_1_v_p(LVecBase3f const *param0) {
    ((*param0).end)();
}


void
LVecBase3f_C_fill_v_pf(LVecBase3f *param0, float param1) {
    ((*param0).fill)(param1);
}


void
LVecBase3f_C_set_v_pfff(LVecBase3f *param0, float param1, float param2, float param3) {
    ((*param0).set)(param1, param2, param3);
}


float
LVecBase3f_C_dot_f_pp(LVecBase3f const *param0, LVecBase3f const *param1) {
    return ((*param0).dot)(*param1);
}


float
LVecBase3f_C_length_squared_f_p(LVecBase3f const *param0) {
    return ((*param0).length_squared)();
}


float
LVecBase3f_C_length_f_p(LVecBase3f const *param0) {
    return ((*param0).length)();
}


bool
LVecBase3f_C_normalize_B_p(LVecBase3f *param0) {
    return ((*param0).normalize)();
}


LVecBase3f *
LVecBase3f_C_normalized_p_p(LVecBase3f const *param0) {
    return new LVecBase3f(((*param0).normalized)());
}


LVecBase3f *
LVecBase3f_C_project_p_pp(LVecBase3f const *param0, LVecBase3f const *param1) {
    return new LVecBase3f(((*param0).project)(*param1));
}


LVecBase3f *
LVecBase3f_C_cross_p_pp(LVecBase3f const *param0, LVecBase3f const *param1) {
    return new LVecBase3f(((*param0).cross)(*param1));
}


LVecBase3f *
LVecBase3f_C_get_standardized_hpr_p_p(LVecBase3f const *param0) {
    return new LVecBase3f(((*param0).get_standardized_hpr)());
}


int
LVecBase3f_C_compare_to_i_pp(LVecBase3f const *param0, LVecBase3f const *param1) {
    return ((*param0).compare_to)(*param1);
}


int
LVecBase3f_C_compare_to_i_ppf(LVecBase3f const *param0, LVecBase3f const *param1, float param2) {
    return ((*param0).compare_to)(*param1, param2);
}


std::size_t
LVecBase3f_C_get_hash_l_p(LVecBase3f const *param0) {
    return ((*param0).get_hash)();
}


std::size_t
LVecBase3f_C_get_hash_l_pf(LVecBase3f const *param0, float param1) {
    return ((*param0).get_hash)(param1);
}


std::size_t
LVecBase3f_C_add_hash_l_pl(LVecBase3f const *param0, std::size_t param1) {
    return ((*param0).add_hash)(param1);
}


std::size_t
LVecBase3f_C_add_hash_l_plf(LVecBase3f const *param0, std::size_t param1, float param2) {
    return ((*param0).add_hash)(param1, param2);
}


void
LVecBase3f_C_generate_hash_v_pp(LVecBase3f const *param0, ChecksumHashGenerator *param1) {
    ((*param0).generate_hash)(*param1);
}


void
LVecBase3f_C_generate_hash_v_ppf(LVecBase3f const *param0, ChecksumHashGenerator *param1, float param2) {
    ((*param0).generate_hash)(*param1, param2);
}


void
LVecBase3f_C_componentwise_mult_v_pp(LVecBase3f *param0, LVecBase3f const *param1) {
    ((*param0).componentwise_mult)(*param1);
}


LVecBase3f *
LVecBase3f_C_fmax_p_pp(LVecBase3f const *param0, LVecBase3f const *param1) {
    return new LVecBase3f(((*param0).fmax)(*param1));
}


LVecBase3f *
LVecBase3f_C_fmin_p_pp(LVecBase3f const *param0, LVecBase3f const *param1) {
    return new LVecBase3f(((*param0).fmin)(*param1));
}


void
LVecBase3f_C_cross_into_v_pp(LVecBase3f *param0, LVecBase3f const *param1) {
    ((*param0).cross_into)(*param1);
}


bool
LVecBase3f_C_almost_equal_B_pp(LVecBase3f const *param0, LVecBase3f const *param1) {
    return ((*param0).almost_equal)(*param1);
}


bool
LVecBase3f_C_almost_equal_B_ppf(LVecBase3f const *param0, LVecBase3f const *param1, float param2) {
    return ((*param0).almost_equal)(*param1, param2);
}


void
LVecBase3f_C_output_v_pp(LVecBase3f const *param0, std::ostream *param1) {
    ((*param0).output)(*param1);
}


void
LVecBase3f_C_write_datagram_fixed_v_pp(LVecBase3f const *param0, Datagram *param1) {
    ((*param0).write_datagram_fixed)(*param1);
}


void
LVecBase3f_C_read_datagram_fixed_v_pp(LVecBase3f *param0, DatagramIterator *param1) {
    ((*param0).read_datagram_fixed)(*param1);
}


void
LVecBase3f_C_write_datagram_v_pp(LVecBase3f const *param0, Datagram *param1) {
    ((*param0).write_datagram)(*param1);
}


void
LVecBase3f_C_read_datagram_v_pp(LVecBase3f *param0, DatagramIterator *param1) {
    ((*param0).read_datagram)(*param1);
}


LVecBase3f::EVector3 *
LVecBase3f_C_get_v_p_p(LVecBase3f const *param0) {
    return new LVecBase3f::EVector3((param0)->_v);
}


int
LVecBase3f_C_get_class_type_i_v() {
    return ((LVecBase3f::get_class_type)()).get_index();
}


void
LVecBase3f_C_init_type_v_v() {
    (LVecBase3f::init_type)();
}


// LVecBase3i


LVecBase3i *
LVecBase3i_C_ctor_p_v() {
    return new LVecBase3i();
}


LVecBase3i *
LVecBase3i_C_ctor_p_pi(LVecBase2i const *param0, int param1) {
    return new LVecBase3i(*param0, param1);
}


LVecBase3i *
LVecBase3i_C_ctor_p_p(LVecBase3i const *param0) {
    return new LVecBase3i(*param0);
}


LVecBase3i *
LVecBase3i_C_ctor_p_p_1_p_p(LVecBase3i::EVector3 const *param0) {
    return new LVecBase3i(*param0);
}


LVecBase3i *
LVecBase3i_C_ctor_p_i(int param0) {
    return new LVecBase3i(param0);
}


LVecBase3i *
LVecBase3i_C_ctor_p_iii(int param0, int param1, int param2) {
    return new LVecBase3i(param0, param1, param2);
}


LVecBase3i const *
LVecBase3i_C_zero_p_v() {
    return &((LVecBase3i::zero)());
}


LVecBase3i const *
LVecBase3i_C_unit_x_p_v() {
    return &((LVecBase3i::unit_x)());
}


LVecBase3i const *
LVecBase3i_C_unit_y_p_v() {
    return &((LVecBase3i::unit_y)());
}


LVecBase3i const *
LVecBase3i_C_unit_z_p_v() {
    return &((LVecBase3i::unit_z)());
}


int
LVecBase3i_C_size_i_v() {
    return (LVecBase3i::size)();
}


bool
LVecBase3i_C_is_nan_B_p(LVecBase3i const *param0) {
    return ((*param0).is_nan)();
}


int
LVecBase3i_C_get_cell_i_pi(LVecBase3i const *param0, int param1) {
    return ((*param0).get_cell)(param1);
}


int
LVecBase3i_C_get_x_i_p(LVecBase3i const *param0) {
    return ((*param0).get_x)();
}


int
LVecBase3i_C_get_y_i_p(LVecBase3i const *param0) {
    return ((*param0).get_y)();
}


int
LVecBase3i_C_get_z_i_p(LVecBase3i const *param0) {
    return ((*param0).get_z)();
}


void
LVecBase3i_C_set_cell_v_pii(LVecBase3i *param0, int param1, int param2) {
    ((*param0).set_cell)(param1, param2);
}


void
LVecBase3i_C_set_x_v_pi(LVecBase3i *param0, int param1) {
    ((*param0).set_x)(param1);
}


void
LVecBase3i_C_set_y_v_pi(LVecBase3i *param0, int param1) {
    ((*param0).set_y)(param1);
}


void
LVecBase3i_C_set_z_v_pi(LVecBase3i *param0, int param1) {
    ((*param0).set_z)(param1);
}


LVecBase2i *
LVecBase3i_C_get_xy_p_p(LVecBase3i const *param0) {
    return new LVecBase2i(((*param0).get_xy)());
}


LVecBase2i *
LVecBase3i_C_get_xz_p_p(LVecBase3i const *param0) {
    return new LVecBase2i(((*param0).get_xz)());
}


LVecBase2i *
LVecBase3i_C_get_yz_p_p(LVecBase3i const *param0) {
    return new LVecBase2i(((*param0).get_yz)());
}


void
LVecBase3i_C_add_to_cell_v_pii(LVecBase3i *param0, int param1, int param2) {
    ((*param0).add_to_cell)(param1, param2);
}


void
LVecBase3i_C_add_x_v_pi(LVecBase3i *param0, int param1) {
    ((*param0).add_x)(param1);
}


void
LVecBase3i_C_add_y_v_pi(LVecBase3i *param0, int param1) {
    ((*param0).add_y)(param1);
}


void
LVecBase3i_C_add_z_v_pi(LVecBase3i *param0, int param1) {
    ((*param0).add_z)(param1);
}


void
LVecBase3i_C_get_data_v_p(LVecBase3i const *param0) {
    ((*param0).get_data)();
}


int
LVecBase3i_C_get_num_components_i_v() {
    return (LVecBase3i::get_num_components)();
}


void
LVecBase3i_C_begin_v_p(LVecBase3i *param0) {
    ((*param0).begin)();
}


void
LVecBase3i_C_begin_v_p_1_v_p(LVecBase3i const *param0) {
    ((*param0).begin)();
}


void
LVecBase3i_C_end_v_p(LVecBase3i *param0) {
    ((*param0).end)();
}


void
LVecBase3i_C_end_v_p_1_v_p(LVecBase3i const *param0) {
    ((*param0).end)();
}


void
LVecBase3i_C_fill_v_pi(LVecBase3i *param0, int param1) {
    ((*param0).fill)(param1);
}


void
LVecBase3i_C_set_v_piii(LVecBase3i *param0, int param1, int param2, int param3) {
    ((*param0).set)(param1, param2, param3);
}


int
LVecBase3i_C_dot_i_pp(LVecBase3i const *param0, LVecBase3i const *param1) {
    return ((*param0).dot)(*param1);
}


int
LVecBase3i_C_length_squared_i_p(LVecBase3i const *param0) {
    return ((*param0).length_squared)();
}


LVecBase3i *
LVecBase3i_C_cross_p_pp(LVecBase3i const *param0, LVecBase3i const *param1) {
    return new LVecBase3i(((*param0).cross)(*param1));
}


int
LVecBase3i_C_compare_to_i_pp(LVecBase3i const *param0, LVecBase3i const *param1) {
    return ((*param0).compare_to)(*param1);
}


std::size_t
LVecBase3i_C_get_hash_l_p(LVecBase3i const *param0) {
    return ((*param0).get_hash)();
}


std::size_t
LVecBase3i_C_add_hash_l_pl(LVecBase3i const *param0, std::size_t param1) {
    return ((*param0).add_hash)(param1);
}


void
LVecBase3i_C_generate_hash_v_pp(LVecBase3i const *param0, ChecksumHashGenerator *param1) {
    ((*param0).generate_hash)(*param1);
}


void
LVecBase3i_C_componentwise_mult_v_pp(LVecBase3i *param0, LVecBase3i const *param1) {
    ((*param0).componentwise_mult)(*param1);
}


LVecBase3i *
LVecBase3i_C_fmax_p_pp(LVecBase3i const *param0, LVecBase3i const *param1) {
    return new LVecBase3i(((*param0).fmax)(*param1));
}


LVecBase3i *
LVecBase3i_C_fmin_p_pp(LVecBase3i const *param0, LVecBase3i const *param1) {
    return new LVecBase3i(((*param0).fmin)(*param1));
}


void
LVecBase3i_C_cross_into_v_pp(LVecBase3i *param0, LVecBase3i const *param1) {
    ((*param0).cross_into)(*param1);
}


bool
LVecBase3i_C_almost_equal_B_pp(LVecBase3i const *param0, LVecBase3i const *param1) {
    return ((*param0).almost_equal)(*param1);
}


bool
LVecBase3i_C_almost_equal_B_ppi(LVecBase3i const *param0, LVecBase3i const *param1, int param2) {
    return ((*param0).almost_equal)(*param1, param2);
}


void
LVecBase3i_C_output_v_pp(LVecBase3i const *param0, std::ostream *param1) {
    ((*param0).output)(*param1);
}


void
LVecBase3i_C_write_datagram_fixed_v_pp(LVecBase3i const *param0, Datagram *param1) {
    ((*param0).write_datagram_fixed)(*param1);
}


void
LVecBase3i_C_read_datagram_fixed_v_pp(LVecBase3i *param0, DatagramIterator *param1) {
    ((*param0).read_datagram_fixed)(*param1);
}


void
LVecBase3i_C_write_datagram_v_pp(LVecBase3i const *param0, Datagram *param1) {
    ((*param0).write_datagram)(*param1);
}


void
LVecBase3i_C_read_datagram_v_pp(LVecBase3i *param0, DatagramIterator *param1) {
    ((*param0).read_datagram)(*param1);
}


LVecBase3i::EVector3 *
LVecBase3i_C_get_v_p_p(LVecBase3i const *param0) {
    return new LVecBase3i::EVector3((param0)->_v);
}


int
LVecBase3i_C_get_class_type_i_v() {
    return ((LVecBase3i::get_class_type)()).get_index();
}


void
LVecBase3i_C_init_type_v_v() {
    (LVecBase3i::init_type)();
}


// LVecBase4d


LVecBase4d *
LVecBase4d_C_ctor_p_v() {
    return new LVecBase4d();
}


LVecBase4d *
LVecBase4d_C_ctor_p_p(LPoint3d const *param0) {
    return new LVecBase4d(*param0);
}


LVecBase4d *
LVecBase4d_C_ctor_p_pd(LVecBase3d const *param0, double param1) {
    return new LVecBase4d(*param0, param1);
}


LVecBase4d *
LVecBase4d_C_ctor_p_p_1_p_p(LVecBase4d const *param0) {
    return new LVecBase4d(*param0);
}


LVecBase4d *
LVecBase4d_C_ctor_p_p_1_p_p_2_p_p(LVecBase4d::EVector4 const *param0) {
    return new LVecBase4d(*param0);
}


LVecBase4d *
LVecBase4d_C_ctor_p_p_1_p_p_2_p_p_3_p_p(LVector3d const *param0) {
    return new LVecBase4d(*param0);
}


LVecBase4d *
LVecBase4d_C_ctor_p_p_1_p_p_2_p_p_3_p_p_4_p_p(UnalignedLVecBase4d const *param0) {
    return new LVecBase4d(*param0);
}


LVecBase4d *
LVecBase4d_C_ctor_p_d(double param0) {
    return new LVecBase4d(param0);
}


LVecBase4d *
LVecBase4d_C_ctor_p_dddd(double param0, double param1, double param2, double param3) {
    return new LVecBase4d(param0, param1, param2, param3);
}


LVecBase4d const *
LVecBase4d_C_zero_p_v() {
    return &((LVecBase4d::zero)());
}


LVecBase4d const *
LVecBase4d_C_unit_x_p_v() {
    return &((LVecBase4d::unit_x)());
}


LVecBase4d const *
LVecBase4d_C_unit_y_p_v() {
    return &((LVecBase4d::unit_y)());
}


LVecBase4d const *
LVecBase4d_C_unit_z_p_v() {
    return &((LVecBase4d::unit_z)());
}


LVecBase4d const *
LVecBase4d_C_unit_w_p_v() {
    return &((LVecBase4d::unit_w)());
}


int
LVecBase4d_C_size_i_v() {
    return (LVecBase4d::size)();
}


bool
LVecBase4d_C_is_nan_B_p(LVecBase4d const *param0) {
    return ((*param0).is_nan)();
}


double
LVecBase4d_C_get_cell_d_pi(LVecBase4d const *param0, int param1) {
    return ((*param0).get_cell)(param1);
}


void
LVecBase4d_C_set_cell_v_pid(LVecBase4d *param0, int param1, double param2) {
    ((*param0).set_cell)(param1, param2);
}


double
LVecBase4d_C_get_x_d_p(LVecBase4d const *param0) {
    return ((*param0).get_x)();
}


double
LVecBase4d_C_get_y_d_p(LVecBase4d const *param0) {
    return ((*param0).get_y)();
}


double
LVecBase4d_C_get_z_d_p(LVecBase4d const *param0) {
    return ((*param0).get_z)();
}


double
LVecBase4d_C_get_w_d_p(LVecBase4d const *param0) {
    return ((*param0).get_w)();
}


LVecBase3d *
LVecBase4d_C_get_xyz_p_p(LVecBase4d const *param0) {
    return new LVecBase3d(((*param0).get_xyz)());
}


LVecBase2d *
LVecBase4d_C_get_xy_p_p(LVecBase4d const *param0) {
    return new LVecBase2d(((*param0).get_xy)());
}


void
LVecBase4d_C_set_x_v_pd(LVecBase4d *param0, double param1) {
    ((*param0).set_x)(param1);
}


void
LVecBase4d_C_set_y_v_pd(LVecBase4d *param0, double param1) {
    ((*param0).set_y)(param1);
}


void
LVecBase4d_C_set_z_v_pd(LVecBase4d *param0, double param1) {
    ((*param0).set_z)(param1);
}


void
LVecBase4d_C_set_w_v_pd(LVecBase4d *param0, double param1) {
    ((*param0).set_w)(param1);
}


void
LVecBase4d_C_add_to_cell_v_pid(LVecBase4d *param0, int param1, double param2) {
    ((*param0).add_to_cell)(param1, param2);
}


void
LVecBase4d_C_add_x_v_pd(LVecBase4d *param0, double param1) {
    ((*param0).add_x)(param1);
}


void
LVecBase4d_C_add_y_v_pd(LVecBase4d *param0, double param1) {
    ((*param0).add_y)(param1);
}


void
LVecBase4d_C_add_z_v_pd(LVecBase4d *param0, double param1) {
    ((*param0).add_z)(param1);
}


void
LVecBase4d_C_add_w_v_pd(LVecBase4d *param0, double param1) {
    ((*param0).add_w)(param1);
}


void
LVecBase4d_C_get_data_v_p(LVecBase4d const *param0) {
    ((*param0).get_data)();
}


int
LVecBase4d_C_get_num_components_i_v() {
    return (LVecBase4d::get_num_components)();
}


void
LVecBase4d_C_begin_v_p(LVecBase4d *param0) {
    ((*param0).begin)();
}


void
LVecBase4d_C_begin_v_p_1_v_p(LVecBase4d const *param0) {
    ((*param0).begin)();
}


void
LVecBase4d_C_end_v_p(LVecBase4d *param0) {
    ((*param0).end)();
}


void
LVecBase4d_C_end_v_p_1_v_p(LVecBase4d const *param0) {
    ((*param0).end)();
}


void
LVecBase4d_C_fill_v_pd(LVecBase4d *param0, double param1) {
    ((*param0).fill)(param1);
}


void
LVecBase4d_C_set_v_pdddd(LVecBase4d *param0, double param1, double param2, double param3, double param4) {
    ((*param0).set)(param1, param2, param3, param4);
}


double
LVecBase4d_C_dot_d_pp(LVecBase4d const *param0, LVecBase4d const *param1) {
    return ((*param0).dot)(*param1);
}


double
LVecBase4d_C_length_squared_d_p(LVecBase4d const *param0) {
    return ((*param0).length_squared)();
}


double
LVecBase4d_C_length_d_p(LVecBase4d const *param0) {
    return ((*param0).length)();
}


bool
LVecBase4d_C_normalize_B_p(LVecBase4d *param0) {
    return ((*param0).normalize)();
}


LVecBase4d *
LVecBase4d_C_normalized_p_p(LVecBase4d const *param0) {
    return new LVecBase4d(((*param0).normalized)());
}


LVecBase4d *
LVecBase4d_C_project_p_pp(LVecBase4d const *param0, LVecBase4d const *param1) {
    return new LVecBase4d(((*param0).project)(*param1));
}


int
LVecBase4d_C_compare_to_i_pp(LVecBase4d const *param0, LVecBase4d const *param1) {
    return ((*param0).compare_to)(*param1);
}


int
LVecBase4d_C_compare_to_i_ppd(LVecBase4d const *param0, LVecBase4d const *param1, double param2) {
    return ((*param0).compare_to)(*param1, param2);
}


std::size_t
LVecBase4d_C_get_hash_l_p(LVecBase4d const *param0) {
    return ((*param0).get_hash)();
}


std::size_t
LVecBase4d_C_get_hash_l_pd(LVecBase4d const *param0, double param1) {
    return ((*param0).get_hash)(param1);
}


std::size_t
LVecBase4d_C_add_hash_l_pl(LVecBase4d const *param0, std::size_t param1) {
    return ((*param0).add_hash)(param1);
}


std::size_t
LVecBase4d_C_add_hash_l_pld(LVecBase4d const *param0, std::size_t param1, double param2) {
    return ((*param0).add_hash)(param1, param2);
}


void
LVecBase4d_C_generate_hash_v_pp(LVecBase4d const *param0, ChecksumHashGenerator *param1) {
    ((*param0).generate_hash)(*param1);
}


void
LVecBase4d_C_generate_hash_v_ppd(LVecBase4d const *param0, ChecksumHashGenerator *param1, double param2) {
    ((*param0).generate_hash)(*param1, param2);
}


void
LVecBase4d_C_componentwise_mult_v_pp(LVecBase4d *param0, LVecBase4d const *param1) {
    ((*param0).componentwise_mult)(*param1);
}


LVecBase4d *
LVecBase4d_C_fmax_p_pp(LVecBase4d const *param0, LVecBase4d const *param1) {
    return new LVecBase4d(((*param0).fmax)(*param1));
}


LVecBase4d *
LVecBase4d_C_fmin_p_pp(LVecBase4d const *param0, LVecBase4d const *param1) {
    return new LVecBase4d(((*param0).fmin)(*param1));
}


bool
LVecBase4d_C_almost_equal_B_pp(LVecBase4d const *param0, LVecBase4d const *param1) {
    return ((*param0).almost_equal)(*param1);
}


bool
LVecBase4d_C_almost_equal_B_ppd(LVecBase4d const *param0, LVecBase4d const *param1, double param2) {
    return ((*param0).almost_equal)(*param1, param2);
}


void
LVecBase4d_C_output_v_pp(LVecBase4d const *param0, std::ostream *param1) {
    ((*param0).output)(*param1);
}


void
LVecBase4d_C_write_datagram_fixed_v_pp(LVecBase4d const *param0, Datagram *param1) {
    ((*param0).write_datagram_fixed)(*param1);
}


void
LVecBase4d_C_read_datagram_fixed_v_pp(LVecBase4d *param0, DatagramIterator *param1) {
    ((*param0).read_datagram_fixed)(*param1);
}


void
LVecBase4d_C_write_datagram_v_pp(LVecBase4d const *param0, Datagram *param1) {
    ((*param0).write_datagram)(*param1);
}


void
LVecBase4d_C_read_datagram_v_pp(LVecBase4d *param0, DatagramIterator *param1) {
    ((*param0).read_datagram)(*param1);
}


LVecBase4d::EVector4 *
LVecBase4d_C_get_v_p_p(LVecBase4d const *param0) {
    return new LVecBase4d::EVector4((param0)->_v);
}


int
LVecBase4d_C_get_class_type_i_v() {
    return ((LVecBase4d::get_class_type)()).get_index();
}


void
LVecBase4d_C_init_type_v_v() {
    (LVecBase4d::init_type)();
}


// LVecBase4f


LVecBase4f *
LVecBase4f_C_ctor_p_v() {
    return new LVecBase4f();
}


LVecBase4f *
LVecBase4f_C_ctor_p_p(LPoint3f const *param0) {
    return new LVecBase4f(*param0);
}


LVecBase4f *
LVecBase4f_C_ctor_p_pf(LVecBase3f const *param0, float param1) {
    return new LVecBase4f(*param0, param1);
}


LVecBase4f *
LVecBase4f_C_ctor_p_p_1_p_p(LVecBase4f const *param0) {
    return new LVecBase4f(*param0);
}


LVecBase4f *
LVecBase4f_C_ctor_p_p_1_p_p_2_p_p(LVecBase4f::EVector4 const *param0) {
    return new LVecBase4f(*param0);
}


LVecBase4f *
LVecBase4f_C_ctor_p_p_1_p_p_2_p_p_3_p_p(LVector3f const *param0) {
    return new LVecBase4f(*param0);
}


LVecBase4f *
LVecBase4f_C_ctor_p_p_1_p_p_2_p_p_3_p_p_4_p_p(UnalignedLVecBase4f const *param0) {
    return new LVecBase4f(*param0);
}


LVecBase4f *
LVecBase4f_C_ctor_p_f(float param0) {
    return new LVecBase4f(param0);
}


LVecBase4f *
LVecBase4f_C_ctor_p_ffff(float param0, float param1, float param2, float param3) {
    return new LVecBase4f(param0, param1, param2, param3);
}


LVecBase4f const *
LVecBase4f_C_zero_p_v() {
    return &((LVecBase4f::zero)());
}


LVecBase4f const *
LVecBase4f_C_unit_x_p_v() {
    return &((LVecBase4f::unit_x)());
}


LVecBase4f const *
LVecBase4f_C_unit_y_p_v() {
    return &((LVecBase4f::unit_y)());
}


LVecBase4f const *
LVecBase4f_C_unit_z_p_v() {
    return &((LVecBase4f::unit_z)());
}


LVecBase4f const *
LVecBase4f_C_unit_w_p_v() {
    return &((LVecBase4f::unit_w)());
}


int
LVecBase4f_C_size_i_v() {
    return (LVecBase4f::size)();
}


bool
LVecBase4f_C_is_nan_B_p(LVecBase4f const *param0) {
    return ((*param0).is_nan)();
}


float
LVecBase4f_C_get_cell_f_pi(LVecBase4f const *param0, int param1) {
    return ((*param0).get_cell)(param1);
}


void
LVecBase4f_C_set_cell_v_pif(LVecBase4f *param0, int param1, float param2) {
    ((*param0).set_cell)(param1, param2);
}


float
LVecBase4f_C_get_x_f_p(LVecBase4f const *param0) {
    return ((*param0).get_x)();
}


float
LVecBase4f_C_get_y_f_p(LVecBase4f const *param0) {
    return ((*param0).get_y)();
}


float
LVecBase4f_C_get_z_f_p(LVecBase4f const *param0) {
    return ((*param0).get_z)();
}


float
LVecBase4f_C_get_w_f_p(LVecBase4f const *param0) {
    return ((*param0).get_w)();
}


LVecBase3f *
LVecBase4f_C_get_xyz_p_p(LVecBase4f const *param0) {
    return new LVecBase3f(((*param0).get_xyz)());
}


LVecBase2f *
LVecBase4f_C_get_xy_p_p(LVecBase4f const *param0) {
    return new LVecBase2f(((*param0).get_xy)());
}


void
LVecBase4f_C_set_x_v_pf(LVecBase4f *param0, float param1) {
    ((*param0).set_x)(param1);
}


void
LVecBase4f_C_set_y_v_pf(LVecBase4f *param0, float param1) {
    ((*param0).set_y)(param1);
}


void
LVecBase4f_C_set_z_v_pf(LVecBase4f *param0, float param1) {
    ((*param0).set_z)(param1);
}


void
LVecBase4f_C_set_w_v_pf(LVecBase4f *param0, float param1) {
    ((*param0).set_w)(param1);
}


void
LVecBase4f_C_add_to_cell_v_pif(LVecBase4f *param0, int param1, float param2) {
    ((*param0).add_to_cell)(param1, param2);
}


void
LVecBase4f_C_add_x_v_pf(LVecBase4f *param0, float param1) {
    ((*param0).add_x)(param1);
}


void
LVecBase4f_C_add_y_v_pf(LVecBase4f *param0, float param1) {
    ((*param0).add_y)(param1);
}


void
LVecBase4f_C_add_z_v_pf(LVecBase4f *param0, float param1) {
    ((*param0).add_z)(param1);
}


void
LVecBase4f_C_add_w_v_pf(LVecBase4f *param0, float param1) {
    ((*param0).add_w)(param1);
}


void
LVecBase4f_C_get_data_v_p(LVecBase4f const *param0) {
    ((*param0).get_data)();
}


int
LVecBase4f_C_get_num_components_i_v() {
    return (LVecBase4f::get_num_components)();
}


void
LVecBase4f_C_begin_v_p(LVecBase4f *param0) {
    ((*param0).begin)();
}


void
LVecBase4f_C_begin_v_p_1_v_p(LVecBase4f const *param0) {
    ((*param0).begin)();
}


void
LVecBase4f_C_end_v_p(LVecBase4f *param0) {
    ((*param0).end)();
}


void
LVecBase4f_C_end_v_p_1_v_p(LVecBase4f const *param0) {
    ((*param0).end)();
}


void
LVecBase4f_C_fill_v_pf(LVecBase4f *param0, float param1) {
    ((*param0).fill)(param1);
}


void
LVecBase4f_C_set_v_pffff(LVecBase4f *param0, float param1, float param2, float param3, float param4) {
    ((*param0).set)(param1, param2, param3, param4);
}


float
LVecBase4f_C_dot_f_pp(LVecBase4f const *param0, LVecBase4f const *param1) {
    return ((*param0).dot)(*param1);
}


float
LVecBase4f_C_length_squared_f_p(LVecBase4f const *param0) {
    return ((*param0).length_squared)();
}


float
LVecBase4f_C_length_f_p(LVecBase4f const *param0) {
    return ((*param0).length)();
}


bool
LVecBase4f_C_normalize_B_p(LVecBase4f *param0) {
    return ((*param0).normalize)();
}


LVecBase4f *
LVecBase4f_C_normalized_p_p(LVecBase4f const *param0) {
    return new LVecBase4f(((*param0).normalized)());
}


LVecBase4f *
LVecBase4f_C_project_p_pp(LVecBase4f const *param0, LVecBase4f const *param1) {
    return new LVecBase4f(((*param0).project)(*param1));
}


int
LVecBase4f_C_compare_to_i_pp(LVecBase4f const *param0, LVecBase4f const *param1) {
    return ((*param0).compare_to)(*param1);
}


int
LVecBase4f_C_compare_to_i_ppf(LVecBase4f const *param0, LVecBase4f const *param1, float param2) {
    return ((*param0).compare_to)(*param1, param2);
}


std::size_t
LVecBase4f_C_get_hash_l_p(LVecBase4f const *param0) {
    return ((*param0).get_hash)();
}


std::size_t
LVecBase4f_C_get_hash_l_pf(LVecBase4f const *param0, float param1) {
    return ((*param0).get_hash)(param1);
}


std::size_t
LVecBase4f_C_add_hash_l_pl(LVecBase4f const *param0, std::size_t param1) {
    return ((*param0).add_hash)(param1);
}


std::size_t
LVecBase4f_C_add_hash_l_plf(LVecBase4f const *param0, std::size_t param1, float param2) {
    return ((*param0).add_hash)(param1, param2);
}


void
LVecBase4f_C_generate_hash_v_pp(LVecBase4f const *param0, ChecksumHashGenerator *param1) {
    ((*param0).generate_hash)(*param1);
}


void
LVecBase4f_C_generate_hash_v_ppf(LVecBase4f const *param0, ChecksumHashGenerator *param1, float param2) {
    ((*param0).generate_hash)(*param1, param2);
}


void
LVecBase4f_C_componentwise_mult_v_pp(LVecBase4f *param0, LVecBase4f const *param1) {
    ((*param0).componentwise_mult)(*param1);
}


LVecBase4f *
LVecBase4f_C_fmax_p_pp(LVecBase4f const *param0, LVecBase4f const *param1) {
    return new LVecBase4f(((*param0).fmax)(*param1));
}


LVecBase4f *
LVecBase4f_C_fmin_p_pp(LVecBase4f const *param0, LVecBase4f const *param1) {
    return new LVecBase4f(((*param0).fmin)(*param1));
}


bool
LVecBase4f_C_almost_equal_B_pp(LVecBase4f const *param0, LVecBase4f const *param1) {
    return ((*param0).almost_equal)(*param1);
}


bool
LVecBase4f_C_almost_equal_B_ppf(LVecBase4f const *param0, LVecBase4f const *param1, float param2) {
    return ((*param0).almost_equal)(*param1, param2);
}


void
LVecBase4f_C_output_v_pp(LVecBase4f const *param0, std::ostream *param1) {
    ((*param0).output)(*param1);
}


void
LVecBase4f_C_write_datagram_fixed_v_pp(LVecBase4f const *param0, Datagram *param1) {
    ((*param0).write_datagram_fixed)(*param1);
}


void
LVecBase4f_C_read_datagram_fixed_v_pp(LVecBase4f *param0, DatagramIterator *param1) {
    ((*param0).read_datagram_fixed)(*param1);
}


void
LVecBase4f_C_write_datagram_v_pp(LVecBase4f const *param0, Datagram *param1) {
    ((*param0).write_datagram)(*param1);
}


void
LVecBase4f_C_read_datagram_v_pp(LVecBase4f *param0, DatagramIterator *param1) {
    ((*param0).read_datagram)(*param1);
}


LVecBase4f::EVector4 *
LVecBase4f_C_get_v_p_p(LVecBase4f const *param0) {
    return new LVecBase4f::EVector4((param0)->_v);
}


int
LVecBase4f_C_get_class_type_i_v() {
    return ((LVecBase4f::get_class_type)()).get_index();
}


void
LVecBase4f_C_init_type_v_v() {
    (LVecBase4f::init_type)();
}


// LVecBase4i


LVecBase4i *
LVecBase4i_C_ctor_p_v() {
    return new LVecBase4i();
}


LVecBase4i *
LVecBase4i_C_ctor_p_p(LPoint3i const *param0) {
    return new LVecBase4i(*param0);
}


LVecBase4i *
LVecBase4i_C_ctor_p_pi(LVecBase3i const *param0, int param1) {
    return new LVecBase4i(*param0, param1);
}


LVecBase4i *
LVecBase4i_C_ctor_p_p_1_p_p(LVecBase4i const *param0) {
    return new LVecBase4i(*param0);
}


LVecBase4i *
LVecBase4i_C_ctor_p_p_1_p_p_2_p_p(LVecBase4i::EVector4 const *param0) {
    return new LVecBase4i(*param0);
}


LVecBase4i *
LVecBase4i_C_ctor_p_p_1_p_p_2_p_p_3_p_p(LVector3i const *param0) {
    return new LVecBase4i(*param0);
}


LVecBase4i *
LVecBase4i_C_ctor_p_p_1_p_p_2_p_p_3_p_p_4_p_p(UnalignedLVecBase4i const *param0) {
    return new LVecBase4i(*param0);
}


LVecBase4i *
LVecBase4i_C_ctor_p_i(int param0) {
    return new LVecBase4i(param0);
}


LVecBase4i *
LVecBase4i_C_ctor_p_iiii(int param0, int param1, int param2, int param3) {
    return new LVecBase4i(param0, param1, param2, param3);
}


LVecBase4i const *
LVecBase4i_C_zero_p_v() {
    return &((LVecBase4i::zero)());
}


LVecBase4i const *
LVecBase4i_C_unit_x_p_v() {
    return &((LVecBase4i::unit_x)());
}


LVecBase4i const *
LVecBase4i_C_unit_y_p_v() {
    return &((LVecBase4i::unit_y)());
}


LVecBase4i const *
LVecBase4i_C_unit_z_p_v() {
    return &((LVecBase4i::unit_z)());
}


LVecBase4i const *
LVecBase4i_C_unit_w_p_v() {
    return &((LVecBase4i::unit_w)());
}


int
LVecBase4i_C_size_i_v() {
    return (LVecBase4i::size)();
}


bool
LVecBase4i_C_is_nan_B_p(LVecBase4i const *param0) {
    return ((*param0).is_nan)();
}


int
LVecBase4i_C_get_cell_i_pi(LVecBase4i const *param0, int param1) {
    return ((*param0).get_cell)(param1);
}


void
LVecBase4i_C_set_cell_v_pii(LVecBase4i *param0, int param1, int param2) {
    ((*param0).set_cell)(param1, param2);
}


int
LVecBase4i_C_get_x_i_p(LVecBase4i const *param0) {
    return ((*param0).get_x)();
}


int
LVecBase4i_C_get_y_i_p(LVecBase4i const *param0) {
    return ((*param0).get_y)();
}


int
LVecBase4i_C_get_z_i_p(LVecBase4i const *param0) {
    return ((*param0).get_z)();
}


int
LVecBase4i_C_get_w_i_p(LVecBase4i const *param0) {
    return ((*param0).get_w)();
}


LVecBase3i *
LVecBase4i_C_get_xyz_p_p(LVecBase4i const *param0) {
    return new LVecBase3i(((*param0).get_xyz)());
}


LVecBase2i *
LVecBase4i_C_get_xy_p_p(LVecBase4i const *param0) {
    return new LVecBase2i(((*param0).get_xy)());
}


void
LVecBase4i_C_set_x_v_pi(LVecBase4i *param0, int param1) {
    ((*param0).set_x)(param1);
}


void
LVecBase4i_C_set_y_v_pi(LVecBase4i *param0, int param1) {
    ((*param0).set_y)(param1);
}


void
LVecBase4i_C_set_z_v_pi(LVecBase4i *param0, int param1) {
    ((*param0).set_z)(param1);
}


void
LVecBase4i_C_set_w_v_pi(LVecBase4i *param0, int param1) {
    ((*param0).set_w)(param1);
}


void
LVecBase4i_C_add_to_cell_v_pii(LVecBase4i *param0, int param1, int param2) {
    ((*param0).add_to_cell)(param1, param2);
}


void
LVecBase4i_C_add_x_v_pi(LVecBase4i *param0, int param1) {
    ((*param0).add_x)(param1);
}


void
LVecBase4i_C_add_y_v_pi(LVecBase4i *param0, int param1) {
    ((*param0).add_y)(param1);
}


void
LVecBase4i_C_add_z_v_pi(LVecBase4i *param0, int param1) {
    ((*param0).add_z)(param1);
}


void
LVecBase4i_C_add_w_v_pi(LVecBase4i *param0, int param1) {
    ((*param0).add_w)(param1);
}


void
LVecBase4i_C_get_data_v_p(LVecBase4i const *param0) {
    ((*param0).get_data)();
}


int
LVecBase4i_C_get_num_components_i_v() {
    return (LVecBase4i::get_num_components)();
}


void
LVecBase4i_C_begin_v_p(LVecBase4i *param0) {
    ((*param0).begin)();
}


void
LVecBase4i_C_begin_v_p_1_v_p(LVecBase4i const *param0) {
    ((*param0).begin)();
}


void
LVecBase4i_C_end_v_p(LVecBase4i *param0) {
    ((*param0).end)();
}


void
LVecBase4i_C_end_v_p_1_v_p(LVecBase4i const *param0) {
    ((*param0).end)();
}


void
LVecBase4i_C_fill_v_pi(LVecBase4i *param0, int param1) {
    ((*param0).fill)(param1);
}


void
LVecBase4i_C_set_v_piiii(LVecBase4i *param0, int param1, int param2, int param3, int param4) {
    ((*param0).set)(param1, param2, param3, param4);
}


int
LVecBase4i_C_dot_i_pp(LVecBase4i const *param0, LVecBase4i const *param1) {
    return ((*param0).dot)(*param1);
}


int
LVecBase4i_C_length_squared_i_p(LVecBase4i const *param0) {
    return ((*param0).length_squared)();
}


int
LVecBase4i_C_compare_to_i_pp(LVecBase4i const *param0, LVecBase4i const *param1) {
    return ((*param0).compare_to)(*param1);
}


std::size_t
LVecBase4i_C_get_hash_l_p(LVecBase4i const *param0) {
    return ((*param0).get_hash)();
}


std::size_t
LVecBase4i_C_add_hash_l_pl(LVecBase4i const *param0, std::size_t param1) {
    return ((*param0).add_hash)(param1);
}


void
LVecBase4i_C_generate_hash_v_pp(LVecBase4i const *param0, ChecksumHashGenerator *param1) {
    ((*param0).generate_hash)(*param1);
}


void
LVecBase4i_C_componentwise_mult_v_pp(LVecBase4i *param0, LVecBase4i const *param1) {
    ((*param0).componentwise_mult)(*param1);
}


LVecBase4i *
LVecBase4i_C_fmax_p_pp(LVecBase4i const *param0, LVecBase4i const *param1) {
    return new LVecBase4i(((*param0).fmax)(*param1));
}


LVecBase4i *
LVecBase4i_C_fmin_p_pp(LVecBase4i const *param0, LVecBase4i const *param1) {
    return new LVecBase4i(((*param0).fmin)(*param1));
}


bool
LVecBase4i_C_almost_equal_B_pp(LVecBase4i const *param0, LVecBase4i const *param1) {
    return ((*param0).almost_equal)(*param1);
}


bool
LVecBase4i_C_almost_equal_B_ppi(LVecBase4i const *param0, LVecBase4i const *param1, int param2) {
    return ((*param0).almost_equal)(*param1, param2);
}


void
LVecBase4i_C_output_v_pp(LVecBase4i const *param0, std::ostream *param1) {
    ((*param0).output)(*param1);
}


void
LVecBase4i_C_write_datagram_fixed_v_pp(LVecBase4i const *param0, Datagram *param1) {
    ((*param0).write_datagram_fixed)(*param1);
}


void
LVecBase4i_C_read_datagram_fixed_v_pp(LVecBase4i *param0, DatagramIterator *param1) {
    ((*param0).read_datagram_fixed)(*param1);
}


void
LVecBase4i_C_write_datagram_v_pp(LVecBase4i const *param0, Datagram *param1) {
    ((*param0).write_datagram)(*param1);
}


void
LVecBase4i_C_read_datagram_v_pp(LVecBase4i *param0, DatagramIterator *param1) {
    ((*param0).read_datagram)(*param1);
}


LVecBase4i::EVector4 *
LVecBase4i_C_get_v_p_p(LVecBase4i const *param0) {
    return new LVecBase4i::EVector4((param0)->_v);
}


int
LVecBase4i_C_get_class_type_i_v() {
    return ((LVecBase4i::get_class_type)()).get_index();
}


void
LVecBase4i_C_init_type_v_v() {
    (LVecBase4i::init_type)();
}


// LVector2d


LVector2d *
LVector2d_C_ctor_p_v() {
    return new LVector2d();
}


LVector2d *
LVector2d_C_ctor_p_p(LVecBase2d const *param0) {
    return new LVector2d(*param0);
}


LVector2d *
LVector2d_C_ctor_p_p_1_p_p(LVector2d const *param0) {
    return new LVector2d(*param0);
}


LVector2d *
LVector2d_C_ctor_p_d(double param0) {
    return new LVector2d(param0);
}


LVector2d *
LVector2d_C_ctor_p_dd(double param0, double param1) {
    return new LVector2d(param0, param1);
}


LVector2d const *
LVector2d_C_zero_p_v() {
    return &((LVector2d::zero)());
}


LVector2d const *
LVector2d_C_unit_x_p_v() {
    return &((LVector2d::unit_x)());
}


LVector2d const *
LVector2d_C_unit_y_p_v() {
    return &((LVector2d::unit_y)());
}


LVector2d *
LVector2d_C_normalized_p_p(LVector2d const *param0) {
    return new LVector2d(((*param0).normalized)());
}


LVector2d *
LVector2d_C_project_p_pp(LVector2d const *param0, LVecBase2d const *param1) {
    return new LVector2d(((*param0).project)(*param1));
}


double
LVector2d_C_signed_angle_rad_d_pp(LVector2d const *param0, LVector2d const *param1) {
    return ((*param0).signed_angle_rad)(*param1);
}


double
LVector2d_C_signed_angle_deg_d_pp(LVector2d const *param0, LVector2d const *param1) {
    return ((*param0).signed_angle_deg)(*param1);
}


int
LVector2d_C_get_class_type_i_v() {
    return ((LVector2d::get_class_type)()).get_index();
}


void
LVector2d_C_init_type_v_v() {
    (LVector2d::init_type)();
}


// LVector2f


LVector2f *
LVector2f_C_ctor_p_v() {
    return new LVector2f();
}


LVector2f *
LVector2f_C_ctor_p_p(LVecBase2f const *param0) {
    return new LVector2f(*param0);
}


LVector2f *
LVector2f_C_ctor_p_p_1_p_p(LVector2f const *param0) {
    return new LVector2f(*param0);
}


LVector2f *
LVector2f_C_ctor_p_f(float param0) {
    return new LVector2f(param0);
}


LVector2f *
LVector2f_C_ctor_p_ff(float param0, float param1) {
    return new LVector2f(param0, param1);
}


LVector2f const *
LVector2f_C_zero_p_v() {
    return &((LVector2f::zero)());
}


LVector2f const *
LVector2f_C_unit_x_p_v() {
    return &((LVector2f::unit_x)());
}


LVector2f const *
LVector2f_C_unit_y_p_v() {
    return &((LVector2f::unit_y)());
}


LVector2f *
LVector2f_C_normalized_p_p(LVector2f const *param0) {
    return new LVector2f(((*param0).normalized)());
}


LVector2f *
LVector2f_C_project_p_pp(LVector2f const *param0, LVecBase2f const *param1) {
    return new LVector2f(((*param0).project)(*param1));
}


float
LVector2f_C_signed_angle_rad_f_pp(LVector2f const *param0, LVector2f const *param1) {
    return ((*param0).signed_angle_rad)(*param1);
}


float
LVector2f_C_signed_angle_deg_f_pp(LVector2f const *param0, LVector2f const *param1) {
    return ((*param0).signed_angle_deg)(*param1);
}


int
LVector2f_C_get_class_type_i_v() {
    return ((LVector2f::get_class_type)()).get_index();
}


void
LVector2f_C_init_type_v_v() {
    (LVector2f::init_type)();
}


// LVector2i


LVector2i *
LVector2i_C_ctor_p_v() {
    return new LVector2i();
}


LVector2i *
LVector2i_C_ctor_p_p(LVecBase2i const *param0) {
    return new LVector2i(*param0);
}


LVector2i *
LVector2i_C_ctor_p_p_1_p_p(LVector2i const *param0) {
    return new LVector2i(*param0);
}


LVector2i *
LVector2i_C_ctor_p_i(int param0) {
    return new LVector2i(param0);
}


LVector2i *
LVector2i_C_ctor_p_ii(int param0, int param1) {
    return new LVector2i(param0, param1);
}


LVector2i const *
LVector2i_C_zero_p_v() {
    return &((LVector2i::zero)());
}


LVector2i const *
LVector2i_C_unit_x_p_v() {
    return &((LVector2i::unit_x)());
}


LVector2i const *
LVector2i_C_unit_y_p_v() {
    return &((LVector2i::unit_y)());
}


int
LVector2i_C_get_class_type_i_v() {
    return ((LVector2i::get_class_type)()).get_index();
}


void
LVector2i_C_init_type_v_v() {
    (LVector2i::init_type)();
}


// LVector3d


LVector3d *
LVector3d_C_ctor_p_v() {
    return new LVector3d();
}


LVector3d *
LVector3d_C_ctor_p_pd(LVecBase2d const *param0, double param1) {
    return new LVector3d(*param0, param1);
}


LVector3d *
LVector3d_C_ctor_p_p(LVecBase3d const *param0) {
    return new LVector3d(*param0);
}


LVector3d *
LVector3d_C_ctor_p_p_1_p_p(LVector3d const *param0) {
    return new LVector3d(*param0);
}


LVector3d *
LVector3d_C_ctor_p_d(double param0) {
    return new LVector3d(param0);
}


LVector3d *
LVector3d_C_ctor_p_ddd(double param0, double param1, double param2) {
    return new LVector3d(param0, param1, param2);
}


LVector3d const *
LVector3d_C_zero_p_v() {
    return &((LVector3d::zero)());
}


LVector3d const *
LVector3d_C_unit_x_p_v() {
    return &((LVector3d::unit_x)());
}


LVector3d const *
LVector3d_C_unit_y_p_v() {
    return &((LVector3d::unit_y)());
}


LVector3d const *
LVector3d_C_unit_z_p_v() {
    return &((LVector3d::unit_z)());
}


LVector2d *
LVector3d_C_get_xy_p_p(LVector3d const *param0) {
    return new LVector2d(((*param0).get_xy)());
}


LVector2d *
LVector3d_C_get_xz_p_p(LVector3d const *param0) {
    return new LVector2d(((*param0).get_xz)());
}


LVector2d *
LVector3d_C_get_yz_p_p(LVector3d const *param0) {
    return new LVector2d(((*param0).get_yz)());
}


LVector3d *
LVector3d_C_cross_p_pp(LVector3d const *param0, LVecBase3d const *param1) {
    return new LVector3d(((*param0).cross)(*param1));
}


LVector3d *
LVector3d_C_normalized_p_p(LVector3d const *param0) {
    return new LVector3d(((*param0).normalized)());
}


LVector3d *
LVector3d_C_project_p_pp(LVector3d const *param0, LVecBase3d const *param1) {
    return new LVector3d(((*param0).project)(*param1));
}


double
LVector3d_C_angle_rad_d_pp(LVector3d const *param0, LVector3d const *param1) {
    return ((*param0).angle_rad)(*param1);
}


double
LVector3d_C_angle_deg_d_pp(LVector3d const *param0, LVector3d const *param1) {
    return ((*param0).angle_deg)(*param1);
}


double
LVector3d_C_signed_angle_rad_d_ppp(LVector3d const *param0, LVector3d const *param1, LVector3d const *param2) {
    return ((*param0).signed_angle_rad)(*param1, *param2);
}


double
LVector3d_C_signed_angle_deg_d_ppp(LVector3d const *param0, LVector3d const *param1, LVector3d const *param2) {
    return ((*param0).signed_angle_deg)(*param1, *param2);
}


double
LVector3d_C_relative_angle_rad_d_pp(LVector3d const *param0, LVector3d const *param1) {
    return ((*param0).relative_angle_rad)(*param1);
}


double
LVector3d_C_relative_angle_deg_d_pp(LVector3d const *param0, LVector3d const *param1) {
    return ((*param0).relative_angle_deg)(*param1);
}


LVector3d *
LVector3d_C_up_p_p(CoordinateSystem param0) {
    return new LVector3d((LVector3d::up)(param0));
}


LVector3d *
LVector3d_C_up_p_v() {
    return new LVector3d((LVector3d::up)());
}


LVector3d *
LVector3d_C_right_p_p(CoordinateSystem param0) {
    return new LVector3d((LVector3d::right)(param0));
}


LVector3d *
LVector3d_C_right_p_v() {
    return new LVector3d((LVector3d::right)());
}


LVector3d *
LVector3d_C_forward_p_p(CoordinateSystem param0) {
    return new LVector3d((LVector3d::forward)(param0));
}


LVector3d *
LVector3d_C_forward_p_v() {
    return new LVector3d((LVector3d::forward)());
}


LVector3d *
LVector3d_C_down_p_p(CoordinateSystem param0) {
    return new LVector3d((LVector3d::down)(param0));
}


LVector3d *
LVector3d_C_down_p_v() {
    return new LVector3d((LVector3d::down)());
}


LVector3d *
LVector3d_C_left_p_p(CoordinateSystem param0) {
    return new LVector3d((LVector3d::left)(param0));
}


LVector3d *
LVector3d_C_left_p_v() {
    return new LVector3d((LVector3d::left)());
}


LVector3d *
LVector3d_C_back_p_p(CoordinateSystem param0) {
    return new LVector3d((LVector3d::back)(param0));
}


LVector3d *
LVector3d_C_back_p_v() {
    return new LVector3d((LVector3d::back)());
}


LVector3d *
LVector3d_C_rfu_p_dddp(double param0, double param1, double param2, CoordinateSystem param3) {
    return new LVector3d((LVector3d::rfu)(param0, param1, param2, param3));
}


LVector3d *
LVector3d_C_rfu_p_ddd(double param0, double param1, double param2) {
    return new LVector3d((LVector3d::rfu)(param0, param1, param2));
}


int
LVector3d_C_get_class_type_i_v() {
    return ((LVector3d::get_class_type)()).get_index();
}


void
LVector3d_C_init_type_v_v() {
    (LVector3d::init_type)();
}


// LVector3f


LVector3f *
LVector3f_C_ctor_p_v() {
    return new LVector3f();
}


LVector3f *
LVector3f_C_ctor_p_pf(LVecBase2f const *param0, float param1) {
    return new LVector3f(*param0, param1);
}


LVector3f *
LVector3f_C_ctor_p_p(LVecBase3f const *param0) {
    return new LVector3f(*param0);
}


LVector3f *
LVector3f_C_ctor_p_p_1_p_p(LVector3f const *param0) {
    return new LVector3f(*param0);
}


LVector3f *
LVector3f_C_ctor_p_f(float param0) {
    return new LVector3f(param0);
}


LVector3f *
LVector3f_C_ctor_p_fff(float param0, float param1, float param2) {
    return new LVector3f(param0, param1, param2);
}


LVector3f const *
LVector3f_C_zero_p_v() {
    return &((LVector3f::zero)());
}


LVector3f const *
LVector3f_C_unit_x_p_v() {
    return &((LVector3f::unit_x)());
}


LVector3f const *
LVector3f_C_unit_y_p_v() {
    return &((LVector3f::unit_y)());
}


LVector3f const *
LVector3f_C_unit_z_p_v() {
    return &((LVector3f::unit_z)());
}


LVector2f *
LVector3f_C_get_xy_p_p(LVector3f const *param0) {
    return new LVector2f(((*param0).get_xy)());
}


LVector2f *
LVector3f_C_get_xz_p_p(LVector3f const *param0) {
    return new LVector2f(((*param0).get_xz)());
}


LVector2f *
LVector3f_C_get_yz_p_p(LVector3f const *param0) {
    return new LVector2f(((*param0).get_yz)());
}


LVector3f *
LVector3f_C_cross_p_pp(LVector3f const *param0, LVecBase3f const *param1) {
    return new LVector3f(((*param0).cross)(*param1));
}


LVector3f *
LVector3f_C_normalized_p_p(LVector3f const *param0) {
    return new LVector3f(((*param0).normalized)());
}


LVector3f *
LVector3f_C_project_p_pp(LVector3f const *param0, LVecBase3f const *param1) {
    return new LVector3f(((*param0).project)(*param1));
}


float
LVector3f_C_angle_rad_f_pp(LVector3f const *param0, LVector3f const *param1) {
    return ((*param0).angle_rad)(*param1);
}


float
LVector3f_C_angle_deg_f_pp(LVector3f const *param0, LVector3f const *param1) {
    return ((*param0).angle_deg)(*param1);
}


float
LVector3f_C_signed_angle_rad_f_ppp(LVector3f const *param0, LVector3f const *param1, LVector3f const *param2) {
    return ((*param0).signed_angle_rad)(*param1, *param2);
}


float
LVector3f_C_signed_angle_deg_f_ppp(LVector3f const *param0, LVector3f const *param1, LVector3f const *param2) {
    return ((*param0).signed_angle_deg)(*param1, *param2);
}


float
LVector3f_C_relative_angle_rad_f_pp(LVector3f const *param0, LVector3f const *param1) {
    return ((*param0).relative_angle_rad)(*param1);
}


float
LVector3f_C_relative_angle_deg_f_pp(LVector3f const *param0, LVector3f const *param1) {
    return ((*param0).relative_angle_deg)(*param1);
}


LVector3f *
LVector3f_C_up_p_p(CoordinateSystem param0) {
    return new LVector3f((LVector3f::up)(param0));
}


LVector3f *
LVector3f_C_up_p_v() {
    return new LVector3f((LVector3f::up)());
}


LVector3f *
LVector3f_C_right_p_p(CoordinateSystem param0) {
    return new LVector3f((LVector3f::right)(param0));
}


LVector3f *
LVector3f_C_right_p_v() {
    return new LVector3f((LVector3f::right)());
}


LVector3f *
LVector3f_C_forward_p_p(CoordinateSystem param0) {
    return new LVector3f((LVector3f::forward)(param0));
}


LVector3f *
LVector3f_C_forward_p_v() {
    return new LVector3f((LVector3f::forward)());
}


LVector3f *
LVector3f_C_down_p_p(CoordinateSystem param0) {
    return new LVector3f((LVector3f::down)(param0));
}


LVector3f *
LVector3f_C_down_p_v() {
    return new LVector3f((LVector3f::down)());
}


LVector3f *
LVector3f_C_left_p_p(CoordinateSystem param0) {
    return new LVector3f((LVector3f::left)(param0));
}


LVector3f *
LVector3f_C_left_p_v() {
    return new LVector3f((LVector3f::left)());
}


LVector3f *
LVector3f_C_back_p_p(CoordinateSystem param0) {
    return new LVector3f((LVector3f::back)(param0));
}


LVector3f *
LVector3f_C_back_p_v() {
    return new LVector3f((LVector3f::back)());
}


LVector3f *
LVector3f_C_rfu_p_fffp(float param0, float param1, float param2, CoordinateSystem param3) {
    return new LVector3f((LVector3f::rfu)(param0, param1, param2, param3));
}


LVector3f *
LVector3f_C_rfu_p_fff(float param0, float param1, float param2) {
    return new LVector3f((LVector3f::rfu)(param0, param1, param2));
}


int
LVector3f_C_get_class_type_i_v() {
    return ((LVector3f::get_class_type)()).get_index();
}


void
LVector3f_C_init_type_v_v() {
    (LVector3f::init_type)();
}


// LVector3i


LVector3i *
LVector3i_C_ctor_p_v() {
    return new LVector3i();
}


LVector3i *
LVector3i_C_ctor_p_pi(LVecBase2i const *param0, int param1) {
    return new LVector3i(*param0, param1);
}


LVector3i *
LVector3i_C_ctor_p_p(LVecBase3i const *param0) {
    return new LVector3i(*param0);
}


LVector3i *
LVector3i_C_ctor_p_p_1_p_p(LVector3i const *param0) {
    return new LVector3i(*param0);
}


LVector3i *
LVector3i_C_ctor_p_i(int param0) {
    return new LVector3i(param0);
}


LVector3i *
LVector3i_C_ctor_p_iii(int param0, int param1, int param2) {
    return new LVector3i(param0, param1, param2);
}


LVector3i const *
LVector3i_C_zero_p_v() {
    return &((LVector3i::zero)());
}


LVector3i const *
LVector3i_C_unit_x_p_v() {
    return &((LVector3i::unit_x)());
}


LVector3i const *
LVector3i_C_unit_y_p_v() {
    return &((LVector3i::unit_y)());
}


LVector3i const *
LVector3i_C_unit_z_p_v() {
    return &((LVector3i::unit_z)());
}


LVector2i *
LVector3i_C_get_xy_p_p(LVector3i const *param0) {
    return new LVector2i(((*param0).get_xy)());
}


LVector2i *
LVector3i_C_get_xz_p_p(LVector3i const *param0) {
    return new LVector2i(((*param0).get_xz)());
}


LVector2i *
LVector3i_C_get_yz_p_p(LVector3i const *param0) {
    return new LVector2i(((*param0).get_yz)());
}


LVector3i *
LVector3i_C_cross_p_pp(LVector3i const *param0, LVecBase3i const *param1) {
    return new LVector3i(((*param0).cross)(*param1));
}


LVector3i *
LVector3i_C_up_p_p(CoordinateSystem param0) {
    return new LVector3i((LVector3i::up)(param0));
}


LVector3i *
LVector3i_C_up_p_v() {
    return new LVector3i((LVector3i::up)());
}


LVector3i *
LVector3i_C_right_p_p(CoordinateSystem param0) {
    return new LVector3i((LVector3i::right)(param0));
}


LVector3i *
LVector3i_C_right_p_v() {
    return new LVector3i((LVector3i::right)());
}


LVector3i *
LVector3i_C_forward_p_p(CoordinateSystem param0) {
    return new LVector3i((LVector3i::forward)(param0));
}


LVector3i *
LVector3i_C_forward_p_v() {
    return new LVector3i((LVector3i::forward)());
}


LVector3i *
LVector3i_C_down_p_p(CoordinateSystem param0) {
    return new LVector3i((LVector3i::down)(param0));
}


LVector3i *
LVector3i_C_down_p_v() {
    return new LVector3i((LVector3i::down)());
}


LVector3i *
LVector3i_C_left_p_p(CoordinateSystem param0) {
    return new LVector3i((LVector3i::left)(param0));
}


LVector3i *
LVector3i_C_left_p_v() {
    return new LVector3i((LVector3i::left)());
}


LVector3i *
LVector3i_C_back_p_p(CoordinateSystem param0) {
    return new LVector3i((LVector3i::back)(param0));
}


LVector3i *
LVector3i_C_back_p_v() {
    return new LVector3i((LVector3i::back)());
}


LVector3i *
LVector3i_C_rfu_p_iiip(int param0, int param1, int param2, CoordinateSystem param3) {
    return new LVector3i((LVector3i::rfu)(param0, param1, param2, param3));
}


LVector3i *
LVector3i_C_rfu_p_iii(int param0, int param1, int param2) {
    return new LVector3i((LVector3i::rfu)(param0, param1, param2));
}


int
LVector3i_C_get_class_type_i_v() {
    return ((LVector3i::get_class_type)()).get_index();
}


void
LVector3i_C_init_type_v_v() {
    (LVector3i::init_type)();
}


// LVector4d


LVector4d *
LVector4d_C_ctor_p_v() {
    return new LVector4d();
}


LVector4d *
LVector4d_C_ctor_p_pd(LVecBase3d const *param0, double param1) {
    return new LVector4d(*param0, param1);
}


LVector4d *
LVector4d_C_ctor_p_p(LVecBase4d const *param0) {
    return new LVector4d(*param0);
}


LVector4d *
LVector4d_C_ctor_p_p_1_p_p(LVector4d const *param0) {
    return new LVector4d(*param0);
}


LVector4d *
LVector4d_C_ctor_p_d(double param0) {
    return new LVector4d(param0);
}


LVector4d *
LVector4d_C_ctor_p_dddd(double param0, double param1, double param2, double param3) {
    return new LVector4d(param0, param1, param2, param3);
}


LVector4d const *
LVector4d_C_zero_p_v() {
    return &((LVector4d::zero)());
}


LVector4d const *
LVector4d_C_unit_x_p_v() {
    return &((LVector4d::unit_x)());
}


LVector4d const *
LVector4d_C_unit_y_p_v() {
    return &((LVector4d::unit_y)());
}


LVector4d const *
LVector4d_C_unit_z_p_v() {
    return &((LVector4d::unit_z)());
}


LVector4d const *
LVector4d_C_unit_w_p_v() {
    return &((LVector4d::unit_w)());
}


LVector3d *
LVector4d_C_get_xyz_p_p(LVector4d const *param0) {
    return new LVector3d(((*param0).get_xyz)());
}


LVector2d *
LVector4d_C_get_xy_p_p(LVector4d const *param0) {
    return new LVector2d(((*param0).get_xy)());
}


LVector4d *
LVector4d_C_normalized_p_p(LVector4d const *param0) {
    return new LVector4d(((*param0).normalized)());
}


LVector4d *
LVector4d_C_project_p_pp(LVector4d const *param0, LVecBase4d const *param1) {
    return new LVector4d(((*param0).project)(*param1));
}


int
LVector4d_C_get_class_type_i_v() {
    return ((LVector4d::get_class_type)()).get_index();
}


void
LVector4d_C_init_type_v_v() {
    (LVector4d::init_type)();
}


// LVector4f


LVector4f *
LVector4f_C_ctor_p_v() {
    return new LVector4f();
}


LVector4f *
LVector4f_C_ctor_p_pf(LVecBase3f const *param0, float param1) {
    return new LVector4f(*param0, param1);
}


LVector4f *
LVector4f_C_ctor_p_p(LVecBase4f const *param0) {
    return new LVector4f(*param0);
}


LVector4f *
LVector4f_C_ctor_p_p_1_p_p(LVector4f const *param0) {
    return new LVector4f(*param0);
}


LVector4f *
LVector4f_C_ctor_p_f(float param0) {
    return new LVector4f(param0);
}


LVector4f *
LVector4f_C_ctor_p_ffff(float param0, float param1, float param2, float param3) {
    return new LVector4f(param0, param1, param2, param3);
}


LVector4f const *
LVector4f_C_zero_p_v() {
    return &((LVector4f::zero)());
}


LVector4f const *
LVector4f_C_unit_x_p_v() {
    return &((LVector4f::unit_x)());
}


LVector4f const *
LVector4f_C_unit_y_p_v() {
    return &((LVector4f::unit_y)());
}


LVector4f const *
LVector4f_C_unit_z_p_v() {
    return &((LVector4f::unit_z)());
}


LVector4f const *
LVector4f_C_unit_w_p_v() {
    return &((LVector4f::unit_w)());
}


LVector3f *
LVector4f_C_get_xyz_p_p(LVector4f const *param0) {
    return new LVector3f(((*param0).get_xyz)());
}


LVector2f *
LVector4f_C_get_xy_p_p(LVector4f const *param0) {
    return new LVector2f(((*param0).get_xy)());
}


LVector4f *
LVector4f_C_normalized_p_p(LVector4f const *param0) {
    return new LVector4f(((*param0).normalized)());
}


LVector4f *
LVector4f_C_project_p_pp(LVector4f const *param0, LVecBase4f const *param1) {
    return new LVector4f(((*param0).project)(*param1));
}


int
LVector4f_C_get_class_type_i_v() {
    return ((LVector4f::get_class_type)()).get_index();
}


void
LVector4f_C_init_type_v_v() {
    (LVector4f::init_type)();
}


// LVector4i


LVector4i *
LVector4i_C_ctor_p_v() {
    return new LVector4i();
}


LVector4i *
LVector4i_C_ctor_p_pi(LVecBase3i const *param0, int param1) {
    return new LVector4i(*param0, param1);
}


LVector4i *
LVector4i_C_ctor_p_p(LVecBase4i const *param0) {
    return new LVector4i(*param0);
}


LVector4i *
LVector4i_C_ctor_p_p_1_p_p(LVector4i const *param0) {
    return new LVector4i(*param0);
}


LVector4i *
LVector4i_C_ctor_p_i(int param0) {
    return new LVector4i(param0);
}


LVector4i *
LVector4i_C_ctor_p_iiii(int param0, int param1, int param2, int param3) {
    return new LVector4i(param0, param1, param2, param3);
}


LVector4i const *
LVector4i_C_zero_p_v() {
    return &((LVector4i::zero)());
}


LVector4i const *
LVector4i_C_unit_x_p_v() {
    return &((LVector4i::unit_x)());
}


LVector4i const *
LVector4i_C_unit_y_p_v() {
    return &((LVector4i::unit_y)());
}


LVector4i const *
LVector4i_C_unit_z_p_v() {
    return &((LVector4i::unit_z)());
}


LVector4i const *
LVector4i_C_unit_w_p_v() {
    return &((LVector4i::unit_w)());
}


LVector3i *
LVector4i_C_get_xyz_p_p(LVector4i const *param0) {
    return new LVector3i(((*param0).get_xyz)());
}


LVector2i *
LVector4i_C_get_xy_p_p(LVector4i const *param0) {
    return new LVector2i(((*param0).get_xy)());
}


int
LVector4i_C_get_class_type_i_v() {
    return ((LVector4i::get_class_type)()).get_index();
}


void
LVector4i_C_init_type_v_v() {
    (LVector4i::init_type)();
}


// Lens


PointerTo< Lens > *
Lens_C_make_copy_p_p(Lens const *param0) {
    return new PointerTo< Lens >(((*param0).make_copy)());
}


bool
Lens_C_extrude_B_pppp(Lens const *param0, LPoint2 const *param1, LPoint3 *param2, LPoint3 *param3) {
    return ((*param0).extrude)(*param1, *param2, *param3);
}


bool
Lens_C_extrude_B_pppp_1_B_pppp(Lens const *param0, LPoint3 const *param1, LPoint3 *param2, LPoint3 *param3) {
    return ((*param0).extrude)(*param1, *param2, *param3);
}


bool
Lens_C_extrude_depth_B_ppp(Lens const *param0, LPoint3 const *param1, LPoint3 *param2) {
    return ((*param0).extrude_depth)(*param1, *param2);
}


bool
Lens_C_extrude_vec_B_ppp(Lens const *param0, LPoint2 const *param1, LVector3 *param2) {
    return ((*param0).extrude_vec)(*param1, *param2);
}


bool
Lens_C_extrude_vec_B_ppp_1_B_ppp(Lens const *param0, LPoint3 const *param1, LVector3 *param2) {
    return ((*param0).extrude_vec)(*param1, *param2);
}


bool
Lens_C_project_B_ppp(Lens const *param0, LPoint3 const *param1, LPoint2 *param2) {
    return ((*param0).project)(*param1, *param2);
}


bool
Lens_C_project_B_ppp_1_B_ppp(Lens const *param0, LPoint3 const *param1, LPoint3 *param2) {
    return ((*param0).project)(*param1, *param2);
}


void
Lens_C_set_change_event_v_ps(Lens *param0, char const *param1) {
    ((*param0).set_change_event)(std::string(param1));
}


char const *
Lens_C_get_change_event_s_p(Lens const *param0) {
    return (((*param0).get_change_event)()).c_str();
}


void
Lens_C_set_coordinate_system_v_pp(Lens *param0, CoordinateSystem param1) {
    ((*param0).set_coordinate_system)(param1);
}


CoordinateSystem
Lens_C_get_coordinate_system_p_p(Lens const *param0) {
    return ((*param0).get_coordinate_system)();
}


void
Lens_C_clear_v_p(Lens *param0) {
    ((*param0).clear)();
}


void
Lens_C_set_film_size_v_pp(Lens *param0, LVecBase2 const *param1) {
    ((*param0).set_film_size)(*param1);
}


void
Lens_C_set_film_size_v_pf(Lens *param0, PN_stdfloat param1) {
    ((*param0).set_film_size)(param1);
}


void
Lens_C_set_film_size_v_pff(Lens *param0, PN_stdfloat param1, PN_stdfloat param2) {
    ((*param0).set_film_size)(param1, param2);
}


LVecBase2 const *
Lens_C_get_film_size_p_p(Lens const *param0) {
    return &(((*param0).get_film_size)());
}


void
Lens_C_set_film_offset_v_pp(Lens *param0, LVecBase2 const *param1) {
    ((*param0).set_film_offset)(*param1);
}


void
Lens_C_set_film_offset_v_pff(Lens *param0, PN_stdfloat param1, PN_stdfloat param2) {
    ((*param0).set_film_offset)(param1, param2);
}


LVector2 const *
Lens_C_get_film_offset_p_p(Lens const *param0) {
    return &(((*param0).get_film_offset)());
}


void
Lens_C_set_focal_length_v_pf(Lens *param0, PN_stdfloat param1) {
    ((*param0).set_focal_length)(param1);
}


PN_stdfloat
Lens_C_get_focal_length_f_p(Lens const *param0) {
    return ((*param0).get_focal_length)();
}


void
Lens_C_set_min_fov_v_pf(Lens *param0, PN_stdfloat param1) {
    ((*param0).set_min_fov)(param1);
}


void
Lens_C_set_fov_v_pp(Lens *param0, LVecBase2 const *param1) {
    ((*param0).set_fov)(*param1);
}


void
Lens_C_set_fov_v_pf(Lens *param0, PN_stdfloat param1) {
    ((*param0).set_fov)(param1);
}


void
Lens_C_set_fov_v_pff(Lens *param0, PN_stdfloat param1, PN_stdfloat param2) {
    ((*param0).set_fov)(param1, param2);
}


LVecBase2 const *
Lens_C_get_fov_p_p(Lens const *param0) {
    return &(((*param0).get_fov)());
}


PN_stdfloat
Lens_C_get_hfov_f_p(Lens const *param0) {
    return ((*param0).get_hfov)();
}


PN_stdfloat
Lens_C_get_vfov_f_p(Lens const *param0) {
    return ((*param0).get_vfov)();
}


PN_stdfloat
Lens_C_get_min_fov_f_p(Lens const *param0) {
    return ((*param0).get_min_fov)();
}


void
Lens_C_set_aspect_ratio_v_pf(Lens *param0, PN_stdfloat param1) {
    ((*param0).set_aspect_ratio)(param1);
}


PN_stdfloat
Lens_C_get_aspect_ratio_f_p(Lens const *param0) {
    return ((*param0).get_aspect_ratio)();
}


void
Lens_C_set_near_v_pf(Lens *param0, PN_stdfloat param1) {
    ((*param0).set_near)(param1);
}


PN_stdfloat
Lens_C_get_near_f_p(Lens const *param0) {
    return ((*param0).get_near)();
}


void
Lens_C_set_far_v_pf(Lens *param0, PN_stdfloat param1) {
    ((*param0).set_far)(param1);
}


PN_stdfloat
Lens_C_get_far_f_p(Lens const *param0) {
    return ((*param0).get_far)();
}


void
Lens_C_set_near_far_v_pff(Lens *param0, PN_stdfloat param1, PN_stdfloat param2) {
    ((*param0).set_near_far)(param1, param2);
}


PN_stdfloat
Lens_C_get_default_near_f_v() {
    return (Lens::get_default_near)();
}


PN_stdfloat
Lens_C_get_default_far_f_v() {
    return (Lens::get_default_far)();
}


void
Lens_C_set_view_hpr_v_pp(Lens *param0, LVecBase3 const *param1) {
    ((*param0).set_view_hpr)(*param1);
}


void
Lens_C_set_view_hpr_v_pfff(Lens *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3) {
    ((*param0).set_view_hpr)(param1, param2, param3);
}


LVecBase3 const *
Lens_C_get_view_hpr_p_p(Lens const *param0) {
    return &(((*param0).get_view_hpr)());
}


void
Lens_C_set_view_vector_v_ppp(Lens *param0, LVector3 const *param1, LVector3 const *param2) {
    ((*param0).set_view_vector)(*param1, *param2);
}


void
Lens_C_set_view_vector_v_pffffff(Lens *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5, PN_stdfloat param6) {
    ((*param0).set_view_vector)(param1, param2, param3, param4, param5, param6);
}


LVector3 const *
Lens_C_get_view_vector_p_p(Lens const *param0) {
    return &(((*param0).get_view_vector)());
}


LVector3 const *
Lens_C_get_up_vector_p_p(Lens const *param0) {
    return &(((*param0).get_up_vector)());
}


LPoint3 *
Lens_C_get_nodal_point_p_p(Lens const *param0) {
    return new LPoint3(((*param0).get_nodal_point)());
}


void
Lens_C_set_interocular_distance_v_pf(Lens *param0, PN_stdfloat param1) {
    ((*param0).set_interocular_distance)(param1);
}


PN_stdfloat
Lens_C_get_interocular_distance_f_p(Lens const *param0) {
    return ((*param0).get_interocular_distance)();
}


void
Lens_C_set_convergence_distance_v_pf(Lens *param0, PN_stdfloat param1) {
    ((*param0).set_convergence_distance)(param1);
}


PN_stdfloat
Lens_C_get_convergence_distance_f_p(Lens const *param0) {
    return ((*param0).get_convergence_distance)();
}


void
Lens_C_set_view_mat_v_pp(Lens *param0, LMatrix4 const *param1) {
    ((*param0).set_view_mat)(*param1);
}


LMatrix4 const *
Lens_C_get_view_mat_p_p(Lens const *param0) {
    return &(((*param0).get_view_mat)());
}


void
Lens_C_clear_view_mat_v_p(Lens *param0) {
    ((*param0).clear_view_mat)();
}


void
Lens_C_set_keystone_v_pp(Lens *param0, LVecBase2 const *param1) {
    ((*param0).set_keystone)(*param1);
}


LVecBase2 const *
Lens_C_get_keystone_p_p(Lens const *param0) {
    return &(((*param0).get_keystone)());
}


void
Lens_C_clear_keystone_v_p(Lens *param0) {
    ((*param0).clear_keystone)();
}


void
Lens_C_set_custom_film_mat_v_pp(Lens *param0, LMatrix4 const *param1) {
    ((*param0).set_custom_film_mat)(*param1);
}


LMatrix4 const *
Lens_C_get_custom_film_mat_p_p(Lens const *param0) {
    return &(((*param0).get_custom_film_mat)());
}


void
Lens_C_clear_custom_film_mat_v_p(Lens *param0) {
    ((*param0).clear_custom_film_mat)();
}


void
Lens_C_set_frustum_from_corners_v_pppppi(Lens *param0, LVecBase3 const *param1, LVecBase3 const *param2, LVecBase3 const *param3, LVecBase3 const *param4, int param5) {
    ((*param0).set_frustum_from_corners)(*param1, *param2, *param3, *param4, param5);
}


void
Lens_C_recompute_all_v_p(Lens *param0) {
    ((*param0).recompute_all)();
}


bool
Lens_C_is_linear_B_p(Lens const *param0) {
    return ((*param0).is_linear)();
}


bool
Lens_C_is_perspective_B_p(Lens const *param0) {
    return ((*param0).is_perspective)();
}


bool
Lens_C_is_orthographic_B_p(Lens const *param0) {
    return ((*param0).is_orthographic)();
}


PointerTo< Geom > *
Lens_C_make_geometry_p_p(Lens *param0) {
    return new PointerTo< Geom >(((*param0).make_geometry)());
}


PointerTo< BoundingVolume > *
Lens_C_make_bounds_p_p(Lens const *param0) {
    return new PointerTo< BoundingVolume >(((*param0).make_bounds)());
}


LMatrix4 const *
Lens_C_get_projection_mat_p_pp(Lens const *param0, Lens::StereoChannel param1) {
    return &(((*param0).get_projection_mat)(param1));
}


LMatrix4 const *
Lens_C_get_projection_mat_p_p(Lens const *param0) {
    return &(((*param0).get_projection_mat)());
}


LMatrix4 const *
Lens_C_get_projection_mat_inv_p_pp(Lens const *param0, Lens::StereoChannel param1) {
    return &(((*param0).get_projection_mat_inv)(param1));
}


LMatrix4 const *
Lens_C_get_projection_mat_inv_p_p(Lens const *param0) {
    return &(((*param0).get_projection_mat_inv)());
}


LMatrix4 const *
Lens_C_get_film_mat_p_p(Lens const *param0) {
    return &(((*param0).get_film_mat)());
}


LMatrix4 const *
Lens_C_get_film_mat_inv_p_p(Lens const *param0) {
    return &(((*param0).get_film_mat_inv)());
}


LMatrix4 const *
Lens_C_get_lens_mat_p_p(Lens const *param0) {
    return &(((*param0).get_lens_mat)());
}


LMatrix4 const *
Lens_C_get_lens_mat_inv_p_p(Lens const *param0) {
    return &(((*param0).get_lens_mat_inv)());
}


void
Lens_C_output_v_pp(Lens const *param0, std::ostream *param1) {
    ((*param0).output)(*param1);
}


void
Lens_C_write_v_ppi(Lens const *param0, std::ostream *param1, int param2) {
    ((*param0).write)(*param1, param2);
}


void
Lens_C_write_v_pp(Lens const *param0, std::ostream *param1) {
    ((*param0).write)(*param1);
}


UpdateSeq *
Lens_C_get_last_change_p_p(Lens const *param0) {
    return new UpdateSeq(((*param0).get_last_change)());
}


void
Lens_C_write_datagram_v_ppp(Lens *param0, BamWriter *param1, Datagram *param2) {
    ((*param0).write_datagram)(param1, *param2);
}


int
Lens_C_get_type_i_p(Lens const *param0) {
    return (((*param0).get_type)()).get_index();
}


int
Lens_C_force_init_type_i_p(Lens *param0) {
    return (((*param0).force_init_type)()).get_index();
}


int
Lens_C_get_class_type_i_v() {
    return ((Lens::get_class_type)()).get_index();
}


void
Lens_C_init_type_v_v() {
    (Lens::init_type)();
}


// LensNode


LensNode *
LensNode_C_ctor_p_sp(char const *param0, Lens *param1) {
    return new LensNode(std::string(param0), param1);
}


LensNode *
LensNode_C_ctor_p_s(char const *param0) {
    return new LensNode(std::string(param0));
}


void
LensNode_C_xform_v_pp(LensNode *param0, LMatrix4 const *param1) {
    ((*param0).xform)(*param1);
}


void
LensNode_C_copy_lens_v_pp(LensNode *param0, Lens const *param1) {
    ((*param0).copy_lens)(*param1);
}


void
LensNode_C_copy_lens_v_pip(LensNode *param0, int param1, Lens const *param2) {
    ((*param0).copy_lens)(param1, *param2);
}


void
LensNode_C_set_lens_v_pp(LensNode *param0, Lens *param1) {
    ((*param0).set_lens)(param1);
}


void
LensNode_C_set_lens_v_pip(LensNode *param0, int param1, Lens *param2) {
    ((*param0).set_lens)(param1, param2);
}


Lens *
LensNode_C_get_lens_p_pi(LensNode const *param0, int param1) {
    return ((*param0).get_lens)(param1);
}


Lens *
LensNode_C_get_lens_p_p(LensNode const *param0) {
    return ((*param0).get_lens)();
}


bool
LensNode_C_set_lens_active_B_piB(LensNode *param0, int param1, bool param2) {
    return ((*param0).set_lens_active)(param1, param2);
}


bool
LensNode_C_get_lens_active_B_pi(LensNode const *param0, int param1) {
    return ((*param0).get_lens_active)(param1);
}


bool
LensNode_C_activate_lens_B_pi(LensNode *param0, int param1) {
    return ((*param0).activate_lens)(param1);
}


bool
LensNode_C_deactivate_lens_B_pi(LensNode *param0, int param1) {
    return ((*param0).deactivate_lens)(param1);
}


bool
LensNode_C_is_in_view_B_pp(LensNode *param0, LPoint3 const *param1) {
    return ((*param0).is_in_view)(*param1);
}


bool
LensNode_C_is_in_view_B_pip(LensNode *param0, int param1, LPoint3 const *param2) {
    return ((*param0).is_in_view)(param1, *param2);
}


void
LensNode_C_show_frustum_v_p(LensNode *param0) {
    ((*param0).show_frustum)();
}


void
LensNode_C_hide_frustum_v_p(LensNode *param0) {
    ((*param0).hide_frustum)();
}


void
LensNode_C_register_with_read_factory_v_v() {
    (LensNode::register_with_read_factory)();
}


void
LensNode_C_write_datagram_v_ppp(LensNode *param0, BamWriter *param1, Datagram *param2) {
    ((*param0).write_datagram)(param1, *param2);
}


int
LensNode_C_get_class_type_i_v() {
    return ((LensNode::get_class_type)()).get_index();
}


void
LensNode_C_init_type_v_v() {
    (LensNode::init_type)();
}


int
LensNode_C_get_type_i_p(LensNode const *param0) {
    return (((*param0).get_type)()).get_index();
}


int
LensNode_C_force_init_type_i_p(LensNode *param0) {
    return (((*param0).force_init_type)()).get_index();
}


// LinkedListNode


PandaNode *
LinkedListNode_C_downcast_to_PandaNode_p_p(LinkedListNode *param0) {
    return (PandaNode *)param0;
}


// Loader


TypedReferenceCount *
Loader_C_upcast_to_TypedReferenceCount_p_p(Loader *param0) {
    return (TypedReferenceCount *)param0;
}


Namable *
Loader_C_upcast_to_Namable_p_p(Loader *param0) {
    return (Namable *)param0;
}


Loader *
Loader_C_ctor_p_p(Loader const *param0) {
    return new Loader(*param0);
}


Loader *
Loader_C_ctor_p_s(char const *param0) {
    return new Loader(std::string(param0));
}


Loader *
Loader_C_ctor_p_v() {
    return new Loader();
}


void
Loader_C_set_task_manager_v_pp(Loader *param0, AsyncTaskManager *param1) {
    ((*param0).set_task_manager)(param1);
}


AsyncTaskManager *
Loader_C_get_task_manager_p_p(Loader const *param0) {
    return ((*param0).get_task_manager)();
}


void
Loader_C_set_task_chain_v_ps(Loader *param0, char const *param1) {
    ((*param0).set_task_chain)(std::string(param1));
}


char const *
Loader_C_get_task_chain_s_p(Loader const *param0) {
    return (((*param0).get_task_chain)()).c_str();
}


void
Loader_C_stop_threads_v_p(Loader *param0) {
    ((*param0).stop_threads)();
}


bool
Loader_C_remove_B_pp(Loader *param0, AsyncTask *param1) {
    return ((*param0).remove)(param1);
}


PointerTo< PandaNode > *
Loader_C_load_sync_p_ppp(Loader const *param0, Filename const *param1, LoaderOptions const *param2) {
    return new PointerTo< PandaNode >(((*param0).load_sync)(*param1, *param2));
}


PointerTo< PandaNode > *
Loader_C_load_sync_p_pp(Loader const *param0, Filename const *param1) {
    return new PointerTo< PandaNode >(((*param0).load_sync)(*param1));
}


PointerTo< AsyncTask > *
Loader_C_make_async_request_p_ppp(Loader *param0, Filename const *param1, LoaderOptions const *param2) {
    return new PointerTo< AsyncTask >(((*param0).make_async_request)(*param1, *param2));
}


PointerTo< AsyncTask > *
Loader_C_make_async_request_p_pp(Loader *param0, Filename const *param1) {
    return new PointerTo< AsyncTask >(((*param0).make_async_request)(*param1));
}


void
Loader_C_load_async_v_pp(Loader *param0, AsyncTask *param1) {
    ((*param0).load_async)(param1);
}


bool
Loader_C_save_sync_B_pppp(Loader const *param0, Filename const *param1, LoaderOptions const *param2, PandaNode *param3) {
    return ((*param0).save_sync)(*param1, *param2, param3);
}


PointerTo< AsyncTask > *
Loader_C_make_async_save_request_p_pppp(Loader *param0, Filename const *param1, LoaderOptions const *param2, PandaNode *param3) {
    return new PointerTo< AsyncTask >(((*param0).make_async_save_request)(*param1, *param2, param3));
}


void
Loader_C_save_async_v_pp(Loader *param0, AsyncTask *param1) {
    ((*param0).save_async)(param1);
}


PointerTo< PandaNode > *
Loader_C_load_bam_stream_p_pp(Loader *param0, std::istream *param1) {
    return new PointerTo< PandaNode >(((*param0).load_bam_stream)(*param1));
}


void
Loader_C_output_v_pp(Loader const *param0, std::ostream *param1) {
    ((*param0).output)(*param1);
}


Loader *
Loader_C_get_global_ptr_p_v() {
    return (Loader::get_global_ptr)();
}


int
Loader_C_get_class_type_i_v() {
    return ((Loader::get_class_type)()).get_index();
}


void
Loader_C_init_type_v_v() {
    (Loader::init_type)();
}


int
Loader_C_get_type_i_p(Loader const *param0) {
    return (((*param0).get_type)()).get_index();
}


int
Loader_C_force_init_type_i_p(Loader *param0) {
    return (((*param0).force_init_type)()).get_index();
}


// LoaderOptions


LoaderOptions *
LoaderOptions_C_ctor_p_p(LoaderOptions const *param0) {
    return new LoaderOptions(*param0);
}


LoaderOptions *
LoaderOptions_C_ctor_p_i(int param0) {
    return new LoaderOptions(param0);
}


LoaderOptions *
LoaderOptions_C_ctor_p_v() {
    return new LoaderOptions();
}


LoaderOptions *
LoaderOptions_C_ctor_p_ii(int param0, int param1) {
    return new LoaderOptions(param0, param1);
}


void
LoaderOptions_C_set_flags_v_pi(LoaderOptions *param0, int param1) {
    ((*param0).set_flags)(param1);
}


int
LoaderOptions_C_get_flags_i_p(LoaderOptions const *param0) {
    return ((*param0).get_flags)();
}


void
LoaderOptions_C_set_texture_flags_v_pi(LoaderOptions *param0, int param1) {
    ((*param0).set_texture_flags)(param1);
}


int
LoaderOptions_C_get_texture_flags_i_p(LoaderOptions const *param0) {
    return ((*param0).get_texture_flags)();
}


void
LoaderOptions_C_set_texture_num_views_v_pi(LoaderOptions *param0, int param1) {
    ((*param0).set_texture_num_views)(param1);
}


int
LoaderOptions_C_get_texture_num_views_i_p(LoaderOptions const *param0) {
    return ((*param0).get_texture_num_views)();
}


void
LoaderOptions_C_set_auto_texture_scale_v_pp(LoaderOptions *param0, AutoTextureScale param1) {
    ((*param0).set_auto_texture_scale)(param1);
}


AutoTextureScale
LoaderOptions_C_get_auto_texture_scale_p_p(LoaderOptions const *param0) {
    return ((*param0).get_auto_texture_scale)();
}


void
LoaderOptions_C_output_v_pp(LoaderOptions const *param0, std::ostream *param1) {
    ((*param0).output)(*param1);
}


// MemoryBase


MemoryBase *
MemoryBase_C_ctor_p_v() {
    return new MemoryBase();
}


MemoryBase *
MemoryBase_C_ctor_p_p(MemoryBase const *param0) {
    return new MemoryBase(*param0);
}


ReferenceCount *
MemoryBase_C_downcast_to_ReferenceCount_p_p(MemoryBase *param0) {
    return (ReferenceCount *)param0;
}


TypedObject *
MemoryBase_C_downcast_to_TypedObject_p_p(MemoryBase *param0) {
    return (TypedObject *)param0;
}


// Namable


PandaNode *
Namable_C_downcast_to_PandaNode_p_p(Namable *param0) {
    return (PandaNode *)param0;
}


Loader *
Namable_C_downcast_to_Loader_p_p(Namable *param0) {
    return (Loader *)param0;
}


TextFont *
Namable_C_downcast_to_TextFont_p_p(Namable *param0) {
    return (TextFont *)param0;
}


Texture *
Namable_C_downcast_to_Texture_p_p(Namable *param0) {
    return (Texture *)param0;
}


Thread *
Namable_C_downcast_to_Thread_p_p(Namable *param0) {
    return (Thread *)param0;
}


// NodeCachedReferenceCount


int
NodeCachedReferenceCount_C_get_node_ref_count_i_p(NodeCachedReferenceCount const *param0) {
    return ((*param0).get_node_ref_count)();
}


void
NodeCachedReferenceCount_C_node_ref_v_p(NodeCachedReferenceCount const *param0) {
    ((*param0).node_ref)();
}


bool
NodeCachedReferenceCount_C_node_unref_B_p(NodeCachedReferenceCount const *param0) {
    return ((*param0).node_unref)();
}


bool
NodeCachedReferenceCount_C_test_ref_count_integrity_B_p(NodeCachedReferenceCount const *param0) {
    return ((*param0).test_ref_count_integrity)();
}


int
NodeCachedReferenceCount_C_get_referenced_bits_i_p(NodeCachedReferenceCount const *param0) {
    return ((*param0).get_referenced_bits)();
}


int
NodeCachedReferenceCount_C_get_class_type_i_v() {
    return ((NodeCachedReferenceCount::get_class_type)()).get_index();
}


void
NodeCachedReferenceCount_C_init_type_v_v() {
    (NodeCachedReferenceCount::init_type)();
}


// NodePath


NodePath *
NodePath_C_ctor_p_v() {
    return new NodePath();
}


NodePath *
NodePath_C_ctor_p_p(NodePath *param0) {
    return new NodePath(*param0);
}


NodePath *
NodePath_C_ctor_p_p_1_p_p(NodePath const *param0) {
    return new NodePath(*param0);
}


NodePath *
NodePath_C_ctor_p_ppp(NodePath const *param0, PandaNode *param1, Thread *param2) {
    return new NodePath(*param0, param1, param2);
}


NodePath *
NodePath_C_ctor_p_pp(NodePath const *param0, PandaNode *param1) {
    return new NodePath(*param0, param1);
}


NodePath *
NodePath_C_ctor_p_pp_1_p_pp(PandaNode *param0, Thread *param1) {
    return new NodePath(param0, param1);
}


NodePath *
NodePath_C_ctor_p_p_1_p_p_2_p_p(PandaNode *param0) {
    return new NodePath(param0);
}


NodePath *
NodePath_C_ctor_p_sp(char const *param0, Thread *param1) {
    return new NodePath(std::string(param0), param1);
}


NodePath *
NodePath_C_ctor_p_s(char const *param0) {
    return new NodePath(std::string(param0));
}


NodePath *
NodePath_C_any_path_p_pp(PandaNode *param0, Thread *param1) {
    return new NodePath((NodePath::any_path)(param0, param1));
}


NodePath *
NodePath_C_any_path_p_p(PandaNode *param0) {
    return new NodePath((NodePath::any_path)(param0));
}


void
NodePath_C_clear_v_p(NodePath *param0) {
    ((*param0).clear)();
}


NodePath *
NodePath_C_not_found_p_v() {
    return new NodePath((NodePath::not_found)());
}


NodePath *
NodePath_C_removed_p_v() {
    return new NodePath((NodePath::removed)());
}


NodePath *
NodePath_C_fail_p_v() {
    return new NodePath((NodePath::fail)());
}


void
NodePath_C_set_max_search_depth_v_i(int param0) {
    (NodePath::set_max_search_depth)(param0);
}


int
NodePath_C_get_max_search_depth_i_v() {
    return (NodePath::get_max_search_depth)();
}


bool
NodePath_C_is_empty_B_p(NodePath const *param0) {
    return ((*param0).is_empty)();
}


bool
NodePath_C_is_singleton_B_pp(NodePath const *param0, Thread *param1) {
    return ((*param0).is_singleton)(param1);
}


bool
NodePath_C_is_singleton_B_p(NodePath const *param0) {
    return ((*param0).is_singleton)();
}


int
NodePath_C_get_num_nodes_i_pp(NodePath const *param0, Thread *param1) {
    return ((*param0).get_num_nodes)(param1);
}


int
NodePath_C_get_num_nodes_i_p(NodePath const *param0) {
    return ((*param0).get_num_nodes)();
}


PandaNode *
NodePath_C_get_node_p_pip(NodePath const *param0, int param1, Thread *param2) {
    return ((*param0).get_node)(param1, param2);
}


PandaNode *
NodePath_C_get_node_p_pi(NodePath const *param0, int param1) {
    return ((*param0).get_node)(param1);
}


NodePath *
NodePath_C_get_ancestor_p_pip(NodePath const *param0, int param1, Thread *param2) {
    return new NodePath(((*param0).get_ancestor)(param1, param2));
}


NodePath *
NodePath_C_get_ancestor_p_pi(NodePath const *param0, int param1) {
    return new NodePath(((*param0).get_ancestor)(param1));
}


NodePath::ErrorType
NodePath_C_get_error_type_p_p(NodePath const *param0) {
    return ((*param0).get_error_type)();
}


PandaNode *
NodePath_C_get_top_node_p_pp(NodePath const *param0, Thread *param1) {
    return ((*param0).get_top_node)(param1);
}


PandaNode *
NodePath_C_get_top_node_p_p(NodePath const *param0) {
    return ((*param0).get_top_node)();
}


NodePath *
NodePath_C_get_top_p_pp(NodePath const *param0, Thread *param1) {
    return new NodePath(((*param0).get_top)(param1));
}


NodePath *
NodePath_C_get_top_p_p(NodePath const *param0) {
    return new NodePath(((*param0).get_top)());
}


PandaNode *
NodePath_C_node_p_p(NodePath const *param0) {
    return ((*param0).node)();
}


int
NodePath_C_get_key_i_p(NodePath const *param0) {
    return ((*param0).get_key)();
}


std::size_t
NodePath_C_add_hash_l_pl(NodePath const *param0, std::size_t param1) {
    return ((*param0).add_hash)(param1);
}


bool
NodePath_C_is_same_graph_B_ppp(NodePath const *param0, NodePath const *param1, Thread *param2) {
    return ((*param0).is_same_graph)(*param1, param2);
}


bool
NodePath_C_is_same_graph_B_pp(NodePath const *param0, NodePath const *param1) {
    return ((*param0).is_same_graph)(*param1);
}


bool
NodePath_C_is_ancestor_of_B_ppp(NodePath const *param0, NodePath const *param1, Thread *param2) {
    return ((*param0).is_ancestor_of)(*param1, param2);
}


bool
NodePath_C_is_ancestor_of_B_pp(NodePath const *param0, NodePath const *param1) {
    return ((*param0).is_ancestor_of)(*param1);
}


NodePath *
NodePath_C_get_common_ancestor_p_ppp(NodePath const *param0, NodePath const *param1, Thread *param2) {
    return new NodePath(((*param0).get_common_ancestor)(*param1, param2));
}


NodePath *
NodePath_C_get_common_ancestor_p_pp(NodePath const *param0, NodePath const *param1) {
    return new NodePath(((*param0).get_common_ancestor)(*param1));
}


NodePathCollection *
NodePath_C_get_children_p_pp(NodePath const *param0, Thread *param1) {
    return new NodePathCollection(((*param0).get_children)(param1));
}


NodePathCollection *
NodePath_C_get_children_p_p(NodePath const *param0) {
    return new NodePathCollection(((*param0).get_children)());
}


int
NodePath_C_get_num_children_i_pp(NodePath const *param0, Thread *param1) {
    return ((*param0).get_num_children)(param1);
}


int
NodePath_C_get_num_children_i_p(NodePath const *param0) {
    return ((*param0).get_num_children)();
}


NodePath *
NodePath_C_get_child_p_pip(NodePath const *param0, int param1, Thread *param2) {
    return new NodePath(((*param0).get_child)(param1, param2));
}


NodePath *
NodePath_C_get_child_p_pi(NodePath const *param0, int param1) {
    return new NodePath(((*param0).get_child)(param1));
}


NodePathCollection *
NodePath_C_get_stashed_children_p_pp(NodePath const *param0, Thread *param1) {
    return new NodePathCollection(((*param0).get_stashed_children)(param1));
}


NodePathCollection *
NodePath_C_get_stashed_children_p_p(NodePath const *param0) {
    return new NodePathCollection(((*param0).get_stashed_children)());
}


int
NodePath_C_count_num_descendants_i_p(NodePath const *param0) {
    return ((*param0).count_num_descendants)();
}


bool
NodePath_C_has_parent_B_pp(NodePath const *param0, Thread *param1) {
    return ((*param0).has_parent)(param1);
}


bool
NodePath_C_has_parent_B_p(NodePath const *param0) {
    return ((*param0).has_parent)();
}


NodePath *
NodePath_C_get_parent_p_pp(NodePath const *param0, Thread *param1) {
    return new NodePath(((*param0).get_parent)(param1));
}


NodePath *
NodePath_C_get_parent_p_p(NodePath const *param0) {
    return new NodePath(((*param0).get_parent)());
}


int
NodePath_C_get_sort_i_pp(NodePath const *param0, Thread *param1) {
    return ((*param0).get_sort)(param1);
}


int
NodePath_C_get_sort_i_p(NodePath const *param0) {
    return ((*param0).get_sort)();
}


NodePath *
NodePath_C_find_p_ps(NodePath const *param0, char const *param1) {
    return new NodePath(((*param0).find)(std::string(param1)));
}


NodePath *
NodePath_C_find_path_to_p_pp(NodePath const *param0, PandaNode *param1) {
    return new NodePath(((*param0).find_path_to)(param1));
}


NodePathCollection *
NodePath_C_find_all_matches_p_ps(NodePath const *param0, char const *param1) {
    return new NodePathCollection(((*param0).find_all_matches)(std::string(param1)));
}


NodePathCollection *
NodePath_C_find_all_paths_to_p_pp(NodePath const *param0, PandaNode *param1) {
    return new NodePathCollection(((*param0).find_all_paths_to)(param1));
}


void
NodePath_C_reparent_to_v_ppip(NodePath *param0, NodePath const *param1, int param2, Thread *param3) {
    ((*param0).reparent_to)(*param1, param2, param3);
}


void
NodePath_C_reparent_to_v_ppi(NodePath *param0, NodePath const *param1, int param2) {
    ((*param0).reparent_to)(*param1, param2);
}


void
NodePath_C_reparent_to_v_pp(NodePath *param0, NodePath const *param1) {
    ((*param0).reparent_to)(*param1);
}


void
NodePath_C_stash_to_v_ppip(NodePath *param0, NodePath const *param1, int param2, Thread *param3) {
    ((*param0).stash_to)(*param1, param2, param3);
}


void
NodePath_C_stash_to_v_ppi(NodePath *param0, NodePath const *param1, int param2) {
    ((*param0).stash_to)(*param1, param2);
}


void
NodePath_C_stash_to_v_pp(NodePath *param0, NodePath const *param1) {
    ((*param0).stash_to)(*param1);
}


void
NodePath_C_wrt_reparent_to_v_ppip(NodePath *param0, NodePath const *param1, int param2, Thread *param3) {
    ((*param0).wrt_reparent_to)(*param1, param2, param3);
}


void
NodePath_C_wrt_reparent_to_v_ppi(NodePath *param0, NodePath const *param1, int param2) {
    ((*param0).wrt_reparent_to)(*param1, param2);
}


void
NodePath_C_wrt_reparent_to_v_pp(NodePath *param0, NodePath const *param1) {
    ((*param0).wrt_reparent_to)(*param1);
}


NodePath *
NodePath_C_instance_to_p_ppip(NodePath const *param0, NodePath const *param1, int param2, Thread *param3) {
    return new NodePath(((*param0).instance_to)(*param1, param2, param3));
}


NodePath *
NodePath_C_instance_to_p_ppi(NodePath const *param0, NodePath const *param1, int param2) {
    return new NodePath(((*param0).instance_to)(*param1, param2));
}


NodePath *
NodePath_C_instance_to_p_pp(NodePath const *param0, NodePath const *param1) {
    return new NodePath(((*param0).instance_to)(*param1));
}


NodePath *
NodePath_C_instance_under_node_p_ppsip(NodePath const *param0, NodePath const *param1, char const *param2, int param3, Thread *param4) {
    return new NodePath(((*param0).instance_under_node)(*param1, std::string(param2), param3, param4));
}


NodePath *
NodePath_C_instance_under_node_p_ppsi(NodePath const *param0, NodePath const *param1, char const *param2, int param3) {
    return new NodePath(((*param0).instance_under_node)(*param1, std::string(param2), param3));
}


NodePath *
NodePath_C_instance_under_node_p_pps(NodePath const *param0, NodePath const *param1, char const *param2) {
    return new NodePath(((*param0).instance_under_node)(*param1, std::string(param2)));
}


NodePath *
NodePath_C_copy_to_p_ppip(NodePath const *param0, NodePath const *param1, int param2, Thread *param3) {
    return new NodePath(((*param0).copy_to)(*param1, param2, param3));
}


NodePath *
NodePath_C_copy_to_p_ppi(NodePath const *param0, NodePath const *param1, int param2) {
    return new NodePath(((*param0).copy_to)(*param1, param2));
}


NodePath *
NodePath_C_copy_to_p_pp(NodePath const *param0, NodePath const *param1) {
    return new NodePath(((*param0).copy_to)(*param1));
}


NodePath *
NodePath_C_attach_new_node_p_ppip(NodePath const *param0, PandaNode *param1, int param2, Thread *param3) {
    return new NodePath(((*param0).attach_new_node)(param1, param2, param3));
}


NodePath *
NodePath_C_attach_new_node_p_ppi(NodePath const *param0, PandaNode *param1, int param2) {
    return new NodePath(((*param0).attach_new_node)(param1, param2));
}


NodePath *
NodePath_C_attach_new_node_p_pp(NodePath const *param0, PandaNode *param1) {
    return new NodePath(((*param0).attach_new_node)(param1));
}


NodePath *
NodePath_C_attach_new_node_p_psip(NodePath const *param0, char const *param1, int param2, Thread *param3) {
    return new NodePath(((*param0).attach_new_node)(std::string(param1), param2, param3));
}


NodePath *
NodePath_C_attach_new_node_p_psi(NodePath const *param0, char const *param1, int param2) {
    return new NodePath(((*param0).attach_new_node)(std::string(param1), param2));
}


NodePath *
NodePath_C_attach_new_node_p_ps(NodePath const *param0, char const *param1) {
    return new NodePath(((*param0).attach_new_node)(std::string(param1)));
}


void
NodePath_C_remove_node_v_pp(NodePath *param0, Thread *param1) {
    ((*param0).remove_node)(param1);
}


void
NodePath_C_remove_node_v_p(NodePath *param0) {
    ((*param0).remove_node)();
}


void
NodePath_C_detach_node_v_pp(NodePath *param0, Thread *param1) {
    ((*param0).detach_node)(param1);
}


void
NodePath_C_detach_node_v_p(NodePath *param0) {
    ((*param0).detach_node)();
}


void
NodePath_C_output_v_pp(NodePath const *param0, std::ostream *param1) {
    ((*param0).output)(*param1);
}


void
NodePath_C_ls_v_p(NodePath const *param0) {
    ((*param0).ls)();
}


void
NodePath_C_ls_v_ppi(NodePath const *param0, std::ostream *param1, int param2) {
    ((*param0).ls)(*param1, param2);
}


void
NodePath_C_ls_v_pp(NodePath const *param0, std::ostream *param1) {
    ((*param0).ls)(*param1);
}


void
NodePath_C_reverse_ls_v_p(NodePath const *param0) {
    ((*param0).reverse_ls)();
}


int
NodePath_C_reverse_ls_i_ppi(NodePath const *param0, std::ostream *param1, int param2) {
    return ((*param0).reverse_ls)(*param1, param2);
}


int
NodePath_C_reverse_ls_i_pp(NodePath const *param0, std::ostream *param1) {
    return ((*param0).reverse_ls)(*param1);
}


ConstPointerTo< RenderState > *
NodePath_C_get_state_p_ppp(NodePath const *param0, NodePath const *param1, Thread *param2) {
    return new ConstPointerTo< RenderState >(((*param0).get_state)(*param1, param2));
}


ConstPointerTo< RenderState > *
NodePath_C_get_state_p_pp(NodePath const *param0, NodePath const *param1) {
    return new ConstPointerTo< RenderState >(((*param0).get_state)(*param1));
}


RenderState const *
NodePath_C_get_state_p_pp_1_p_pp(NodePath const *param0, Thread *param1) {
    return ((*param0).get_state)(param1);
}


RenderState const *
NodePath_C_get_state_p_p(NodePath const *param0) {
    return ((*param0).get_state)();
}


void
NodePath_C_set_state_v_pppp(NodePath *param0, NodePath const *param1, RenderState const *param2, Thread *param3) {
    ((*param0).set_state)(*param1, param2, param3);
}


void
NodePath_C_set_state_v_ppp(NodePath *param0, NodePath const *param1, RenderState const *param2) {
    ((*param0).set_state)(*param1, param2);
}


void
NodePath_C_set_state_v_ppp_1_v_ppp(NodePath *param0, RenderState const *param1, Thread *param2) {
    ((*param0).set_state)(param1, param2);
}


void
NodePath_C_set_state_v_pp(NodePath *param0, RenderState const *param1) {
    ((*param0).set_state)(param1);
}


ConstPointerTo< RenderState > *
NodePath_C_get_net_state_p_pp(NodePath const *param0, Thread *param1) {
    return new ConstPointerTo< RenderState >(((*param0).get_net_state)(param1));
}


ConstPointerTo< RenderState > *
NodePath_C_get_net_state_p_p(NodePath const *param0) {
    return new ConstPointerTo< RenderState >(((*param0).get_net_state)());
}


void
NodePath_C_set_attrib_v_ppi(NodePath *param0, RenderAttrib const *param1, int param2) {
    ((*param0).set_attrib)(param1, param2);
}


void
NodePath_C_set_attrib_v_pp(NodePath *param0, RenderAttrib const *param1) {
    ((*param0).set_attrib)(param1);
}


RenderAttrib const *
NodePath_C_get_attrib_p_pi(NodePath const *param0, int param1) {
    return ((*param0).get_attrib)(TypeHandle::from_index(param1));
}


bool
NodePath_C_has_attrib_B_pi(NodePath const *param0, int param1) {
    return ((*param0).has_attrib)(TypeHandle::from_index(param1));
}


void
NodePath_C_clear_attrib_v_pi(NodePath *param0, int param1) {
    ((*param0).clear_attrib)(TypeHandle::from_index(param1));
}


void
NodePath_C_set_effect_v_pp(NodePath *param0, RenderEffect const *param1) {
    ((*param0).set_effect)(param1);
}


RenderEffect const *
NodePath_C_get_effect_p_pi(NodePath const *param0, int param1) {
    return ((*param0).get_effect)(TypeHandle::from_index(param1));
}


bool
NodePath_C_has_effect_B_pi(NodePath const *param0, int param1) {
    return ((*param0).has_effect)(TypeHandle::from_index(param1));
}


void
NodePath_C_clear_effect_v_pi(NodePath *param0, int param1) {
    ((*param0).clear_effect)(TypeHandle::from_index(param1));
}


void
NodePath_C_set_effects_v_pp(NodePath *param0, RenderEffects const *param1) {
    ((*param0).set_effects)(param1);
}


RenderEffects const *
NodePath_C_get_effects_p_p(NodePath const *param0) {
    return ((*param0).get_effects)();
}


void
NodePath_C_clear_effects_v_p(NodePath *param0) {
    ((*param0).clear_effects)();
}


ConstPointerTo< TransformState > *
NodePath_C_get_transform_p_ppp(NodePath const *param0, NodePath const *param1, Thread *param2) {
    return new ConstPointerTo< TransformState >(((*param0).get_transform)(*param1, param2));
}


ConstPointerTo< TransformState > *
NodePath_C_get_transform_p_pp(NodePath const *param0, NodePath const *param1) {
    return new ConstPointerTo< TransformState >(((*param0).get_transform)(*param1));
}


TransformState const *
NodePath_C_get_transform_p_pp_1_p_pp(NodePath const *param0, Thread *param1) {
    return ((*param0).get_transform)(param1);
}


TransformState const *
NodePath_C_get_transform_p_p(NodePath const *param0) {
    return ((*param0).get_transform)();
}


void
NodePath_C_clear_transform_v_ppp(NodePath *param0, NodePath const *param1, Thread *param2) {
    ((*param0).clear_transform)(*param1, param2);
}


void
NodePath_C_clear_transform_v_pp(NodePath *param0, NodePath const *param1) {
    ((*param0).clear_transform)(*param1);
}


void
NodePath_C_clear_transform_v_pp_1_v_pp(NodePath *param0, Thread *param1) {
    ((*param0).clear_transform)(param1);
}


void
NodePath_C_clear_transform_v_p(NodePath *param0) {
    ((*param0).clear_transform)();
}


void
NodePath_C_set_transform_v_pppp(NodePath *param0, NodePath const *param1, TransformState const *param2, Thread *param3) {
    ((*param0).set_transform)(*param1, param2, param3);
}


void
NodePath_C_set_transform_v_ppp(NodePath *param0, NodePath const *param1, TransformState const *param2) {
    ((*param0).set_transform)(*param1, param2);
}


void
NodePath_C_set_transform_v_ppp_1_v_ppp(NodePath *param0, TransformState const *param1, Thread *param2) {
    ((*param0).set_transform)(param1, param2);
}


void
NodePath_C_set_transform_v_pp(NodePath *param0, TransformState const *param1) {
    ((*param0).set_transform)(param1);
}


ConstPointerTo< TransformState > *
NodePath_C_get_net_transform_p_pp(NodePath const *param0, Thread *param1) {
    return new ConstPointerTo< TransformState >(((*param0).get_net_transform)(param1));
}


ConstPointerTo< TransformState > *
NodePath_C_get_net_transform_p_p(NodePath const *param0) {
    return new ConstPointerTo< TransformState >(((*param0).get_net_transform)());
}


ConstPointerTo< TransformState > *
NodePath_C_get_prev_transform_p_ppp(NodePath const *param0, NodePath const *param1, Thread *param2) {
    return new ConstPointerTo< TransformState >(((*param0).get_prev_transform)(*param1, param2));
}


ConstPointerTo< TransformState > *
NodePath_C_get_prev_transform_p_pp(NodePath const *param0, NodePath const *param1) {
    return new ConstPointerTo< TransformState >(((*param0).get_prev_transform)(*param1));
}


TransformState const *
NodePath_C_get_prev_transform_p_pp_1_p_pp(NodePath const *param0, Thread *param1) {
    return ((*param0).get_prev_transform)(param1);
}


TransformState const *
NodePath_C_get_prev_transform_p_p(NodePath const *param0) {
    return ((*param0).get_prev_transform)();
}


void
NodePath_C_set_prev_transform_v_pppp(NodePath *param0, NodePath const *param1, TransformState const *param2, Thread *param3) {
    ((*param0).set_prev_transform)(*param1, param2, param3);
}


void
NodePath_C_set_prev_transform_v_ppp(NodePath *param0, NodePath const *param1, TransformState const *param2) {
    ((*param0).set_prev_transform)(*param1, param2);
}


void
NodePath_C_set_prev_transform_v_ppp_1_v_ppp(NodePath *param0, TransformState const *param1, Thread *param2) {
    ((*param0).set_prev_transform)(param1, param2);
}


void
NodePath_C_set_prev_transform_v_pp(NodePath *param0, TransformState const *param1) {
    ((*param0).set_prev_transform)(param1);
}


ConstPointerTo< TransformState > *
NodePath_C_get_net_prev_transform_p_pp(NodePath const *param0, Thread *param1) {
    return new ConstPointerTo< TransformState >(((*param0).get_net_prev_transform)(param1));
}


ConstPointerTo< TransformState > *
NodePath_C_get_net_prev_transform_p_p(NodePath const *param0) {
    return new ConstPointerTo< TransformState >(((*param0).get_net_prev_transform)());
}


void
NodePath_C_set_pos_v_pp(NodePath *param0, LVecBase3 const *param1) {
    ((*param0).set_pos)(*param1);
}


void
NodePath_C_set_pos_v_ppp(NodePath *param0, NodePath const *param1, LVecBase3 const *param2) {
    ((*param0).set_pos)(*param1, *param2);
}


void
NodePath_C_set_pos_v_ppfff(NodePath *param0, NodePath const *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    ((*param0).set_pos)(*param1, param2, param3, param4);
}


void
NodePath_C_set_pos_v_pfff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3) {
    ((*param0).set_pos)(param1, param2, param3);
}


void
NodePath_C_set_x_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2) {
    ((*param0).set_x)(*param1, param2);
}


void
NodePath_C_set_x_v_pf(NodePath *param0, PN_stdfloat param1) {
    ((*param0).set_x)(param1);
}


void
NodePath_C_set_y_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2) {
    ((*param0).set_y)(*param1, param2);
}


void
NodePath_C_set_y_v_pf(NodePath *param0, PN_stdfloat param1) {
    ((*param0).set_y)(param1);
}


void
NodePath_C_set_z_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2) {
    ((*param0).set_z)(*param1, param2);
}


void
NodePath_C_set_z_v_pf(NodePath *param0, PN_stdfloat param1) {
    ((*param0).set_z)(param1);
}


void
NodePath_C_set_fluid_pos_v_pp(NodePath *param0, LVecBase3 const *param1) {
    ((*param0).set_fluid_pos)(*param1);
}


void
NodePath_C_set_fluid_pos_v_ppp(NodePath *param0, NodePath const *param1, LVecBase3 const *param2) {
    ((*param0).set_fluid_pos)(*param1, *param2);
}


void
NodePath_C_set_fluid_pos_v_ppfff(NodePath *param0, NodePath const *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    ((*param0).set_fluid_pos)(*param1, param2, param3, param4);
}


void
NodePath_C_set_fluid_pos_v_pfff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3) {
    ((*param0).set_fluid_pos)(param1, param2, param3);
}


void
NodePath_C_set_fluid_x_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2) {
    ((*param0).set_fluid_x)(*param1, param2);
}


void
NodePath_C_set_fluid_x_v_pf(NodePath *param0, PN_stdfloat param1) {
    ((*param0).set_fluid_x)(param1);
}


void
NodePath_C_set_fluid_y_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2) {
    ((*param0).set_fluid_y)(*param1, param2);
}


void
NodePath_C_set_fluid_y_v_pf(NodePath *param0, PN_stdfloat param1) {
    ((*param0).set_fluid_y)(param1);
}


void
NodePath_C_set_fluid_z_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2) {
    ((*param0).set_fluid_z)(*param1, param2);
}


void
NodePath_C_set_fluid_z_v_pf(NodePath *param0, PN_stdfloat param1) {
    ((*param0).set_fluid_z)(param1);
}


LPoint3 *
NodePath_C_get_pos_p_p(NodePath const *param0) {
    return new LPoint3(((*param0).get_pos)());
}


LPoint3 *
NodePath_C_get_pos_p_pp(NodePath const *param0, NodePath const *param1) {
    return new LPoint3(((*param0).get_pos)(*param1));
}


PN_stdfloat
NodePath_C_get_x_f_p(NodePath const *param0) {
    return ((*param0).get_x)();
}


PN_stdfloat
NodePath_C_get_x_f_pp(NodePath const *param0, NodePath const *param1) {
    return ((*param0).get_x)(*param1);
}


PN_stdfloat
NodePath_C_get_y_f_p(NodePath const *param0) {
    return ((*param0).get_y)();
}


PN_stdfloat
NodePath_C_get_y_f_pp(NodePath const *param0, NodePath const *param1) {
    return ((*param0).get_y)(*param1);
}


PN_stdfloat
NodePath_C_get_z_f_p(NodePath const *param0) {
    return ((*param0).get_z)();
}


PN_stdfloat
NodePath_C_get_z_f_pp(NodePath const *param0, NodePath const *param1) {
    return ((*param0).get_z)(*param1);
}


LVector3 *
NodePath_C_get_pos_delta_p_p(NodePath const *param0) {
    return new LVector3(((*param0).get_pos_delta)());
}


LVector3 *
NodePath_C_get_pos_delta_p_pp(NodePath const *param0, NodePath const *param1) {
    return new LVector3(((*param0).get_pos_delta)(*param1));
}


void
NodePath_C_set_hpr_v_pp(NodePath *param0, LVecBase3 const *param1) {
    ((*param0).set_hpr)(*param1);
}


void
NodePath_C_set_hpr_v_ppp(NodePath *param0, NodePath const *param1, LVecBase3 const *param2) {
    ((*param0).set_hpr)(*param1, *param2);
}


void
NodePath_C_set_hpr_v_ppfff(NodePath *param0, NodePath const *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    ((*param0).set_hpr)(*param1, param2, param3, param4);
}


void
NodePath_C_set_hpr_v_pfff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3) {
    ((*param0).set_hpr)(param1, param2, param3);
}


void
NodePath_C_set_h_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2) {
    ((*param0).set_h)(*param1, param2);
}


void
NodePath_C_set_h_v_pf(NodePath *param0, PN_stdfloat param1) {
    ((*param0).set_h)(param1);
}


void
NodePath_C_set_p_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2) {
    ((*param0).set_p)(*param1, param2);
}


void
NodePath_C_set_p_v_pf(NodePath *param0, PN_stdfloat param1) {
    ((*param0).set_p)(param1);
}


void
NodePath_C_set_r_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2) {
    ((*param0).set_r)(*param1, param2);
}


void
NodePath_C_set_r_v_pf(NodePath *param0, PN_stdfloat param1) {
    ((*param0).set_r)(param1);
}


LVecBase3 *
NodePath_C_get_hpr_p_p(NodePath const *param0) {
    return new LVecBase3(((*param0).get_hpr)());
}


LVecBase3 *
NodePath_C_get_hpr_p_pp(NodePath const *param0, NodePath const *param1) {
    return new LVecBase3(((*param0).get_hpr)(*param1));
}


PN_stdfloat
NodePath_C_get_h_f_p(NodePath const *param0) {
    return ((*param0).get_h)();
}


PN_stdfloat
NodePath_C_get_h_f_pp(NodePath const *param0, NodePath const *param1) {
    return ((*param0).get_h)(*param1);
}


PN_stdfloat
NodePath_C_get_p_f_p(NodePath const *param0) {
    return ((*param0).get_p)();
}


PN_stdfloat
NodePath_C_get_p_f_pp(NodePath const *param0, NodePath const *param1) {
    return ((*param0).get_p)(*param1);
}


PN_stdfloat
NodePath_C_get_r_f_p(NodePath const *param0) {
    return ((*param0).get_r)();
}


PN_stdfloat
NodePath_C_get_r_f_pp(NodePath const *param0, NodePath const *param1) {
    return ((*param0).get_r)(*param1);
}


void
NodePath_C_set_quat_v_pp(NodePath *param0, LQuaternion const *param1) {
    ((*param0).set_quat)(*param1);
}


void
NodePath_C_set_quat_v_ppp(NodePath *param0, NodePath const *param1, LQuaternion const *param2) {
    ((*param0).set_quat)(*param1, *param2);
}


LQuaternion *
NodePath_C_get_quat_p_p(NodePath const *param0) {
    return new LQuaternion(((*param0).get_quat)());
}


LQuaternion *
NodePath_C_get_quat_p_pp(NodePath const *param0, NodePath const *param1) {
    return new LQuaternion(((*param0).get_quat)(*param1));
}


void
NodePath_C_set_scale_v_pp(NodePath *param0, LVecBase3 const *param1) {
    ((*param0).set_scale)(*param1);
}


void
NodePath_C_set_scale_v_ppp(NodePath *param0, NodePath const *param1, LVecBase3 const *param2) {
    ((*param0).set_scale)(*param1, *param2);
}


void
NodePath_C_set_scale_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2) {
    ((*param0).set_scale)(*param1, param2);
}


void
NodePath_C_set_scale_v_ppfff(NodePath *param0, NodePath const *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    ((*param0).set_scale)(*param1, param2, param3, param4);
}


void
NodePath_C_set_scale_v_pf(NodePath *param0, PN_stdfloat param1) {
    ((*param0).set_scale)(param1);
}


void
NodePath_C_set_scale_v_pfff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3) {
    ((*param0).set_scale)(param1, param2, param3);
}


void
NodePath_C_set_sx_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2) {
    ((*param0).set_sx)(*param1, param2);
}


void
NodePath_C_set_sx_v_pf(NodePath *param0, PN_stdfloat param1) {
    ((*param0).set_sx)(param1);
}


void
NodePath_C_set_sy_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2) {
    ((*param0).set_sy)(*param1, param2);
}


void
NodePath_C_set_sy_v_pf(NodePath *param0, PN_stdfloat param1) {
    ((*param0).set_sy)(param1);
}


void
NodePath_C_set_sz_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2) {
    ((*param0).set_sz)(*param1, param2);
}


void
NodePath_C_set_sz_v_pf(NodePath *param0, PN_stdfloat param1) {
    ((*param0).set_sz)(param1);
}


LVecBase3 *
NodePath_C_get_scale_p_p(NodePath const *param0) {
    return new LVecBase3(((*param0).get_scale)());
}


LVecBase3 *
NodePath_C_get_scale_p_pp(NodePath const *param0, NodePath const *param1) {
    return new LVecBase3(((*param0).get_scale)(*param1));
}


PN_stdfloat
NodePath_C_get_sx_f_p(NodePath const *param0) {
    return ((*param0).get_sx)();
}


PN_stdfloat
NodePath_C_get_sx_f_pp(NodePath const *param0, NodePath const *param1) {
    return ((*param0).get_sx)(*param1);
}


PN_stdfloat
NodePath_C_get_sy_f_p(NodePath const *param0) {
    return ((*param0).get_sy)();
}


PN_stdfloat
NodePath_C_get_sy_f_pp(NodePath const *param0, NodePath const *param1) {
    return ((*param0).get_sy)(*param1);
}


PN_stdfloat
NodePath_C_get_sz_f_p(NodePath const *param0) {
    return ((*param0).get_sz)();
}


PN_stdfloat
NodePath_C_get_sz_f_pp(NodePath const *param0, NodePath const *param1) {
    return ((*param0).get_sz)(*param1);
}


void
NodePath_C_set_shear_v_pp(NodePath *param0, LVecBase3 const *param1) {
    ((*param0).set_shear)(*param1);
}


void
NodePath_C_set_shear_v_ppp(NodePath *param0, NodePath const *param1, LVecBase3 const *param2) {
    ((*param0).set_shear)(*param1, *param2);
}


void
NodePath_C_set_shear_v_ppfff(NodePath *param0, NodePath const *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    ((*param0).set_shear)(*param1, param2, param3, param4);
}


void
NodePath_C_set_shear_v_pfff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3) {
    ((*param0).set_shear)(param1, param2, param3);
}


void
NodePath_C_set_shxy_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2) {
    ((*param0).set_shxy)(*param1, param2);
}


void
NodePath_C_set_shxy_v_pf(NodePath *param0, PN_stdfloat param1) {
    ((*param0).set_shxy)(param1);
}


void
NodePath_C_set_shxz_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2) {
    ((*param0).set_shxz)(*param1, param2);
}


void
NodePath_C_set_shxz_v_pf(NodePath *param0, PN_stdfloat param1) {
    ((*param0).set_shxz)(param1);
}


void
NodePath_C_set_shyz_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2) {
    ((*param0).set_shyz)(*param1, param2);
}


void
NodePath_C_set_shyz_v_pf(NodePath *param0, PN_stdfloat param1) {
    ((*param0).set_shyz)(param1);
}


LVecBase3 *
NodePath_C_get_shear_p_p(NodePath const *param0) {
    return new LVecBase3(((*param0).get_shear)());
}


LVecBase3 *
NodePath_C_get_shear_p_pp(NodePath const *param0, NodePath const *param1) {
    return new LVecBase3(((*param0).get_shear)(*param1));
}


PN_stdfloat
NodePath_C_get_shxy_f_p(NodePath const *param0) {
    return ((*param0).get_shxy)();
}


PN_stdfloat
NodePath_C_get_shxy_f_pp(NodePath const *param0, NodePath const *param1) {
    return ((*param0).get_shxy)(*param1);
}


PN_stdfloat
NodePath_C_get_shxz_f_p(NodePath const *param0) {
    return ((*param0).get_shxz)();
}


PN_stdfloat
NodePath_C_get_shxz_f_pp(NodePath const *param0, NodePath const *param1) {
    return ((*param0).get_shxz)(*param1);
}


PN_stdfloat
NodePath_C_get_shyz_f_p(NodePath const *param0) {
    return ((*param0).get_shyz)();
}


PN_stdfloat
NodePath_C_get_shyz_f_pp(NodePath const *param0, NodePath const *param1) {
    return ((*param0).get_shyz)(*param1);
}


void
NodePath_C_set_pos_hpr_v_ppp(NodePath *param0, LVecBase3 const *param1, LVecBase3 const *param2) {
    ((*param0).set_pos_hpr)(*param1, *param2);
}


void
NodePath_C_set_pos_hpr_v_pppp(NodePath *param0, NodePath const *param1, LVecBase3 const *param2, LVecBase3 const *param3) {
    ((*param0).set_pos_hpr)(*param1, *param2, *param3);
}


void
NodePath_C_set_pos_hpr_v_ppffffff(NodePath *param0, NodePath const *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5, PN_stdfloat param6, PN_stdfloat param7) {
    ((*param0).set_pos_hpr)(*param1, param2, param3, param4, param5, param6, param7);
}


void
NodePath_C_set_pos_hpr_v_pffffff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5, PN_stdfloat param6) {
    ((*param0).set_pos_hpr)(param1, param2, param3, param4, param5, param6);
}


void
NodePath_C_set_pos_quat_v_ppp(NodePath *param0, LVecBase3 const *param1, LQuaternion const *param2) {
    ((*param0).set_pos_quat)(*param1, *param2);
}


void
NodePath_C_set_pos_quat_v_pppp(NodePath *param0, NodePath const *param1, LVecBase3 const *param2, LQuaternion const *param3) {
    ((*param0).set_pos_quat)(*param1, *param2, *param3);
}


void
NodePath_C_set_hpr_scale_v_ppp(NodePath *param0, LVecBase3 const *param1, LVecBase3 const *param2) {
    ((*param0).set_hpr_scale)(*param1, *param2);
}


void
NodePath_C_set_hpr_scale_v_pppp(NodePath *param0, NodePath const *param1, LVecBase3 const *param2, LVecBase3 const *param3) {
    ((*param0).set_hpr_scale)(*param1, *param2, *param3);
}


void
NodePath_C_set_hpr_scale_v_ppffffff(NodePath *param0, NodePath const *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5, PN_stdfloat param6, PN_stdfloat param7) {
    ((*param0).set_hpr_scale)(*param1, param2, param3, param4, param5, param6, param7);
}


void
NodePath_C_set_hpr_scale_v_pffffff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5, PN_stdfloat param6) {
    ((*param0).set_hpr_scale)(param1, param2, param3, param4, param5, param6);
}


void
NodePath_C_set_quat_scale_v_ppp(NodePath *param0, LQuaternion const *param1, LVecBase3 const *param2) {
    ((*param0).set_quat_scale)(*param1, *param2);
}


void
NodePath_C_set_quat_scale_v_pppp(NodePath *param0, NodePath const *param1, LQuaternion const *param2, LVecBase3 const *param3) {
    ((*param0).set_quat_scale)(*param1, *param2, *param3);
}


void
NodePath_C_set_pos_hpr_scale_v_pppp(NodePath *param0, LVecBase3 const *param1, LVecBase3 const *param2, LVecBase3 const *param3) {
    ((*param0).set_pos_hpr_scale)(*param1, *param2, *param3);
}


void
NodePath_C_set_pos_hpr_scale_v_ppppp(NodePath *param0, NodePath const *param1, LVecBase3 const *param2, LVecBase3 const *param3, LVecBase3 const *param4) {
    ((*param0).set_pos_hpr_scale)(*param1, *param2, *param3, *param4);
}


void
NodePath_C_set_pos_hpr_scale_v_ppfffffffff(NodePath *param0, NodePath const *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5, PN_stdfloat param6, PN_stdfloat param7, PN_stdfloat param8, PN_stdfloat param9, PN_stdfloat param10) {
    ((*param0).set_pos_hpr_scale)(*param1, param2, param3, param4, param5, param6, param7, param8, param9, param10);
}


void
NodePath_C_set_pos_hpr_scale_v_pfffffffff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5, PN_stdfloat param6, PN_stdfloat param7, PN_stdfloat param8, PN_stdfloat param9) {
    ((*param0).set_pos_hpr_scale)(param1, param2, param3, param4, param5, param6, param7, param8, param9);
}


void
NodePath_C_set_pos_quat_scale_v_pppp(NodePath *param0, LVecBase3 const *param1, LQuaternion const *param2, LVecBase3 const *param3) {
    ((*param0).set_pos_quat_scale)(*param1, *param2, *param3);
}


void
NodePath_C_set_pos_quat_scale_v_ppppp(NodePath *param0, NodePath const *param1, LVecBase3 const *param2, LQuaternion const *param3, LVecBase3 const *param4) {
    ((*param0).set_pos_quat_scale)(*param1, *param2, *param3, *param4);
}


void
NodePath_C_set_pos_hpr_scale_shear_v_ppppp(NodePath *param0, LVecBase3 const *param1, LVecBase3 const *param2, LVecBase3 const *param3, LVecBase3 const *param4) {
    ((*param0).set_pos_hpr_scale_shear)(*param1, *param2, *param3, *param4);
}


void
NodePath_C_set_pos_hpr_scale_shear_v_pppppp(NodePath *param0, NodePath const *param1, LVecBase3 const *param2, LVecBase3 const *param3, LVecBase3 const *param4, LVecBase3 const *param5) {
    ((*param0).set_pos_hpr_scale_shear)(*param1, *param2, *param3, *param4, *param5);
}


void
NodePath_C_set_pos_quat_scale_shear_v_ppppp(NodePath *param0, LVecBase3 const *param1, LQuaternion const *param2, LVecBase3 const *param3, LVecBase3 const *param4) {
    ((*param0).set_pos_quat_scale_shear)(*param1, *param2, *param3, *param4);
}


void
NodePath_C_set_pos_quat_scale_shear_v_pppppp(NodePath *param0, NodePath const *param1, LVecBase3 const *param2, LQuaternion const *param3, LVecBase3 const *param4, LVecBase3 const *param5) {
    ((*param0).set_pos_quat_scale_shear)(*param1, *param2, *param3, *param4, *param5);
}


void
NodePath_C_set_mat_v_pp(NodePath *param0, LMatrix4 const *param1) {
    ((*param0).set_mat)(*param1);
}


void
NodePath_C_set_mat_v_ppp(NodePath *param0, NodePath const *param1, LMatrix4 const *param2) {
    ((*param0).set_mat)(*param1, *param2);
}


void
NodePath_C_clear_mat_v_p(NodePath *param0) {
    ((*param0).clear_mat)();
}


bool
NodePath_C_has_mat_B_p(NodePath const *param0) {
    return ((*param0).has_mat)();
}


LMatrix4 const *
NodePath_C_get_mat_p_p(NodePath const *param0) {
    return &(((*param0).get_mat)());
}


LMatrix4 *
NodePath_C_get_mat_p_pp(NodePath const *param0, NodePath const *param1) {
    return new LMatrix4(((*param0).get_mat)(*param1));
}


void
NodePath_C_look_at_v_ppp(NodePath *param0, LPoint3 const *param1, LVector3 const *param2) {
    ((*param0).look_at)(*param1, *param2);
}


void
NodePath_C_look_at_v_pp(NodePath *param0, LPoint3 const *param1) {
    ((*param0).look_at)(*param1);
}


void
NodePath_C_look_at_v_pppp(NodePath *param0, NodePath const *param1, LPoint3 const *param2, LVector3 const *param3) {
    ((*param0).look_at)(*param1, *param2, *param3);
}


void
NodePath_C_look_at_v_ppp_1_v_ppp(NodePath *param0, NodePath const *param1, LPoint3 const *param2) {
    ((*param0).look_at)(*param1, *param2);
}


void
NodePath_C_look_at_v_pp_1_v_pp(NodePath *param0, NodePath const *param1) {
    ((*param0).look_at)(*param1);
}


void
NodePath_C_look_at_v_ppfff(NodePath *param0, NodePath const *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    ((*param0).look_at)(*param1, param2, param3, param4);
}


void
NodePath_C_look_at_v_pfff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3) {
    ((*param0).look_at)(param1, param2, param3);
}


void
NodePath_C_heads_up_v_ppp(NodePath *param0, LPoint3 const *param1, LVector3 const *param2) {
    ((*param0).heads_up)(*param1, *param2);
}


void
NodePath_C_heads_up_v_pp(NodePath *param0, LPoint3 const *param1) {
    ((*param0).heads_up)(*param1);
}


void
NodePath_C_heads_up_v_pppp(NodePath *param0, NodePath const *param1, LPoint3 const *param2, LVector3 const *param3) {
    ((*param0).heads_up)(*param1, *param2, *param3);
}


void
NodePath_C_heads_up_v_ppp_1_v_ppp(NodePath *param0, NodePath const *param1, LPoint3 const *param2) {
    ((*param0).heads_up)(*param1, *param2);
}


void
NodePath_C_heads_up_v_pp_1_v_pp(NodePath *param0, NodePath const *param1) {
    ((*param0).heads_up)(*param1);
}


void
NodePath_C_heads_up_v_ppfff(NodePath *param0, NodePath const *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    ((*param0).heads_up)(*param1, param2, param3, param4);
}


void
NodePath_C_heads_up_v_pfff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3) {
    ((*param0).heads_up)(param1, param2, param3);
}


LPoint3 *
NodePath_C_get_relative_point_p_ppp(NodePath const *param0, NodePath const *param1, LVecBase3 const *param2) {
    return new LPoint3(((*param0).get_relative_point)(*param1, *param2));
}


LVector3 *
NodePath_C_get_relative_vector_p_ppp(NodePath const *param0, NodePath const *param1, LVecBase3 const *param2) {
    return new LVector3(((*param0).get_relative_vector)(*param1, *param2));
}


PN_stdfloat
NodePath_C_get_distance_f_pp(NodePath const *param0, NodePath const *param1) {
    return ((*param0).get_distance)(*param1);
}


void
NodePath_C_set_color_v_ppi(NodePath *param0, LColor const *param1, int param2) {
    ((*param0).set_color)(*param1, param2);
}


void
NodePath_C_set_color_v_pp(NodePath *param0, LColor const *param1) {
    ((*param0).set_color)(*param1);
}


void
NodePath_C_set_color_v_pffffi(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, int param5) {
    ((*param0).set_color)(param1, param2, param3, param4, param5);
}


void
NodePath_C_set_color_v_pffff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    ((*param0).set_color)(param1, param2, param3, param4);
}


void
NodePath_C_set_color_v_pfff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3) {
    ((*param0).set_color)(param1, param2, param3);
}


void
NodePath_C_set_color_off_v_pi(NodePath *param0, int param1) {
    ((*param0).set_color_off)(param1);
}


void
NodePath_C_set_color_off_v_p(NodePath *param0) {
    ((*param0).set_color_off)();
}


void
NodePath_C_clear_color_v_p(NodePath *param0) {
    ((*param0).clear_color)();
}


bool
NodePath_C_has_color_B_p(NodePath const *param0) {
    return ((*param0).has_color)();
}


LColor *
NodePath_C_get_color_p_p(NodePath const *param0) {
    return new LColor(((*param0).get_color)());
}


bool
NodePath_C_has_color_scale_B_p(NodePath const *param0) {
    return ((*param0).has_color_scale)();
}


void
NodePath_C_clear_color_scale_v_p(NodePath *param0) {
    ((*param0).clear_color_scale)();
}


void
NodePath_C_set_color_scale_v_ppi(NodePath *param0, LVecBase4 const *param1, int param2) {
    ((*param0).set_color_scale)(*param1, param2);
}


void
NodePath_C_set_color_scale_v_pp(NodePath *param0, LVecBase4 const *param1) {
    ((*param0).set_color_scale)(*param1);
}


void
NodePath_C_set_color_scale_v_pffffi(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, int param5) {
    ((*param0).set_color_scale)(param1, param2, param3, param4, param5);
}


void
NodePath_C_set_color_scale_v_pffff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    ((*param0).set_color_scale)(param1, param2, param3, param4);
}


void
NodePath_C_compose_color_scale_v_ppi(NodePath *param0, LVecBase4 const *param1, int param2) {
    ((*param0).compose_color_scale)(*param1, param2);
}


void
NodePath_C_compose_color_scale_v_pp(NodePath *param0, LVecBase4 const *param1) {
    ((*param0).compose_color_scale)(*param1);
}


void
NodePath_C_compose_color_scale_v_pffffi(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, int param5) {
    ((*param0).compose_color_scale)(param1, param2, param3, param4, param5);
}


void
NodePath_C_compose_color_scale_v_pffff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    ((*param0).compose_color_scale)(param1, param2, param3, param4);
}


void
NodePath_C_set_color_scale_off_v_pi(NodePath *param0, int param1) {
    ((*param0).set_color_scale_off)(param1);
}


void
NodePath_C_set_color_scale_off_v_p(NodePath *param0) {
    ((*param0).set_color_scale_off)();
}


void
NodePath_C_set_alpha_scale_v_pfi(NodePath *param0, PN_stdfloat param1, int param2) {
    ((*param0).set_alpha_scale)(param1, param2);
}


void
NodePath_C_set_alpha_scale_v_pf(NodePath *param0, PN_stdfloat param1) {
    ((*param0).set_alpha_scale)(param1);
}


void
NodePath_C_set_all_color_scale_v_pfi(NodePath *param0, PN_stdfloat param1, int param2) {
    ((*param0).set_all_color_scale)(param1, param2);
}


void
NodePath_C_set_all_color_scale_v_pf(NodePath *param0, PN_stdfloat param1) {
    ((*param0).set_all_color_scale)(param1);
}


void
NodePath_C_set_sr_v_pf(NodePath *param0, PN_stdfloat param1) {
    ((*param0).set_sr)(param1);
}


void
NodePath_C_set_sg_v_pf(NodePath *param0, PN_stdfloat param1) {
    ((*param0).set_sg)(param1);
}


void
NodePath_C_set_sb_v_pf(NodePath *param0, PN_stdfloat param1) {
    ((*param0).set_sb)(param1);
}


void
NodePath_C_set_sa_v_pf(NodePath *param0, PN_stdfloat param1) {
    ((*param0).set_sa)(param1);
}


LVecBase4 const *
NodePath_C_get_color_scale_p_p(NodePath const *param0) {
    return &(((*param0).get_color_scale)());
}


PN_stdfloat
NodePath_C_get_sr_f_p(NodePath const *param0) {
    return ((*param0).get_sr)();
}


PN_stdfloat
NodePath_C_get_sg_f_p(NodePath const *param0) {
    return ((*param0).get_sg)();
}


PN_stdfloat
NodePath_C_get_sb_f_p(NodePath const *param0) {
    return ((*param0).get_sb)();
}


PN_stdfloat
NodePath_C_get_sa_f_p(NodePath const *param0) {
    return ((*param0).get_sa)();
}


void
NodePath_C_set_light_v_ppi(NodePath *param0, NodePath const *param1, int param2) {
    ((*param0).set_light)(*param1, param2);
}


void
NodePath_C_set_light_v_pp(NodePath *param0, NodePath const *param1) {
    ((*param0).set_light)(*param1);
}


void
NodePath_C_set_light_off_v_ppi(NodePath *param0, NodePath const *param1, int param2) {
    ((*param0).set_light_off)(*param1, param2);
}


void
NodePath_C_set_light_off_v_pp(NodePath *param0, NodePath const *param1) {
    ((*param0).set_light_off)(*param1);
}


void
NodePath_C_set_light_off_v_pi(NodePath *param0, int param1) {
    ((*param0).set_light_off)(param1);
}


void
NodePath_C_set_light_off_v_p(NodePath *param0) {
    ((*param0).set_light_off)();
}


void
NodePath_C_clear_light_v_p(NodePath *param0) {
    ((*param0).clear_light)();
}


void
NodePath_C_clear_light_v_pp(NodePath *param0, NodePath const *param1) {
    ((*param0).clear_light)(*param1);
}


bool
NodePath_C_has_light_B_pp(NodePath const *param0, NodePath const *param1) {
    return ((*param0).has_light)(*param1);
}


bool
NodePath_C_has_light_off_B_p(NodePath const *param0) {
    return ((*param0).has_light_off)();
}


bool
NodePath_C_has_light_off_B_pp(NodePath const *param0, NodePath const *param1) {
    return ((*param0).has_light_off)(*param1);
}


void
NodePath_C_set_clip_plane_v_ppi(NodePath *param0, NodePath const *param1, int param2) {
    ((*param0).set_clip_plane)(*param1, param2);
}


void
NodePath_C_set_clip_plane_v_pp(NodePath *param0, NodePath const *param1) {
    ((*param0).set_clip_plane)(*param1);
}


void
NodePath_C_set_clip_plane_off_v_ppi(NodePath *param0, NodePath const *param1, int param2) {
    ((*param0).set_clip_plane_off)(*param1, param2);
}


void
NodePath_C_set_clip_plane_off_v_pp(NodePath *param0, NodePath const *param1) {
    ((*param0).set_clip_plane_off)(*param1);
}


void
NodePath_C_set_clip_plane_off_v_pi(NodePath *param0, int param1) {
    ((*param0).set_clip_plane_off)(param1);
}


void
NodePath_C_set_clip_plane_off_v_p(NodePath *param0) {
    ((*param0).set_clip_plane_off)();
}


void
NodePath_C_clear_clip_plane_v_p(NodePath *param0) {
    ((*param0).clear_clip_plane)();
}


void
NodePath_C_clear_clip_plane_v_pp(NodePath *param0, NodePath const *param1) {
    ((*param0).clear_clip_plane)(*param1);
}


bool
NodePath_C_has_clip_plane_B_pp(NodePath const *param0, NodePath const *param1) {
    return ((*param0).has_clip_plane)(*param1);
}


bool
NodePath_C_has_clip_plane_off_B_p(NodePath const *param0) {
    return ((*param0).has_clip_plane_off)();
}


bool
NodePath_C_has_clip_plane_off_B_pp(NodePath const *param0, NodePath const *param1) {
    return ((*param0).has_clip_plane_off)(*param1);
}


void
NodePath_C_set_scissor_v_ppp(NodePath *param0, LPoint3 const *param1, LPoint3 const *param2) {
    ((*param0).set_scissor)(*param1, *param2);
}


void
NodePath_C_set_scissor_v_ppppp(NodePath *param0, LPoint3 const *param1, LPoint3 const *param2, LPoint3 const *param3, LPoint3 const *param4) {
    ((*param0).set_scissor)(*param1, *param2, *param3, *param4);
}


void
NodePath_C_set_scissor_v_pppp(NodePath *param0, NodePath const *param1, LPoint3 const *param2, LPoint3 const *param3) {
    ((*param0).set_scissor)(*param1, *param2, *param3);
}


void
NodePath_C_set_scissor_v_pppppp(NodePath *param0, NodePath const *param1, LPoint3 const *param2, LPoint3 const *param3, LPoint3 const *param4, LPoint3 const *param5) {
    ((*param0).set_scissor)(*param1, *param2, *param3, *param4, *param5);
}


void
NodePath_C_set_scissor_v_pffff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    ((*param0).set_scissor)(param1, param2, param3, param4);
}


void
NodePath_C_clear_scissor_v_p(NodePath *param0) {
    ((*param0).clear_scissor)();
}


bool
NodePath_C_has_scissor_B_p(NodePath const *param0) {
    return ((*param0).has_scissor)();
}


void
NodePath_C_set_occluder_v_pp(NodePath *param0, NodePath const *param1) {
    ((*param0).set_occluder)(*param1);
}


void
NodePath_C_clear_occluder_v_p(NodePath *param0) {
    ((*param0).clear_occluder)();
}


void
NodePath_C_clear_occluder_v_pp(NodePath *param0, NodePath const *param1) {
    ((*param0).clear_occluder)(*param1);
}


bool
NodePath_C_has_occluder_B_pp(NodePath const *param0, NodePath const *param1) {
    return ((*param0).has_occluder)(*param1);
}


void
NodePath_C_set_bin_v_psii(NodePath *param0, char const *param1, int param2, int param3) {
    ((*param0).set_bin)(std::string(param1), param2, param3);
}


void
NodePath_C_set_bin_v_psi(NodePath *param0, char const *param1, int param2) {
    ((*param0).set_bin)(std::string(param1), param2);
}


void
NodePath_C_clear_bin_v_p(NodePath *param0) {
    ((*param0).clear_bin)();
}


bool
NodePath_C_has_bin_B_p(NodePath const *param0) {
    return ((*param0).has_bin)();
}


char const *
NodePath_C_get_bin_name_s_p(NodePath const *param0) {
    static std::string string_holder = ((*param0).get_bin_name)();
    return string_holder.c_str();
}


int
NodePath_C_get_bin_draw_order_i_p(NodePath const *param0) {
    return ((*param0).get_bin_draw_order)();
}


void
NodePath_C_set_texture_v_pppi(NodePath *param0, Texture *param1, SamplerState const *param2, int param3) {
    ((*param0).set_texture)(param1, *param2, param3);
}


void
NodePath_C_set_texture_v_ppp(NodePath *param0, Texture *param1, SamplerState const *param2) {
    ((*param0).set_texture)(param1, *param2);
}


void
NodePath_C_set_texture_v_ppi(NodePath *param0, Texture *param1, int param2) {
    ((*param0).set_texture)(param1, param2);
}


void
NodePath_C_set_texture_v_pp(NodePath *param0, Texture *param1) {
    ((*param0).set_texture)(param1);
}


void
NodePath_C_set_texture_v_ppppi(NodePath *param0, TextureStage *param1, Texture *param2, SamplerState const *param3, int param4) {
    ((*param0).set_texture)(param1, param2, *param3, param4);
}


void
NodePath_C_set_texture_v_pppp(NodePath *param0, TextureStage *param1, Texture *param2, SamplerState const *param3) {
    ((*param0).set_texture)(param1, param2, *param3);
}


void
NodePath_C_set_texture_v_pppi_1_v_pppi(NodePath *param0, TextureStage *param1, Texture *param2, int param3) {
    ((*param0).set_texture)(param1, param2, param3);
}


void
NodePath_C_set_texture_v_ppp_1_v_ppp(NodePath *param0, TextureStage *param1, Texture *param2) {
    ((*param0).set_texture)(param1, param2);
}


void
NodePath_C_set_texture_off_v_ppi(NodePath *param0, TextureStage *param1, int param2) {
    ((*param0).set_texture_off)(param1, param2);
}


void
NodePath_C_set_texture_off_v_pp(NodePath *param0, TextureStage *param1) {
    ((*param0).set_texture_off)(param1);
}


void
NodePath_C_set_texture_off_v_pi(NodePath *param0, int param1) {
    ((*param0).set_texture_off)(param1);
}


void
NodePath_C_set_texture_off_v_p(NodePath *param0) {
    ((*param0).set_texture_off)();
}


void
NodePath_C_clear_texture_v_p(NodePath *param0) {
    ((*param0).clear_texture)();
}


void
NodePath_C_clear_texture_v_pp(NodePath *param0, TextureStage *param1) {
    ((*param0).clear_texture)(param1);
}


bool
NodePath_C_has_texture_B_p(NodePath const *param0) {
    return ((*param0).has_texture)();
}


bool
NodePath_C_has_texture_B_pp(NodePath const *param0, TextureStage *param1) {
    return ((*param0).has_texture)(param1);
}


bool
NodePath_C_has_texture_off_B_p(NodePath const *param0) {
    return ((*param0).has_texture_off)();
}


bool
NodePath_C_has_texture_off_B_pp(NodePath const *param0, TextureStage *param1) {
    return ((*param0).has_texture_off)(param1);
}


Texture *
NodePath_C_get_texture_p_p(NodePath const *param0) {
    return ((*param0).get_texture)();
}


Texture *
NodePath_C_get_texture_p_pp(NodePath const *param0, TextureStage *param1) {
    return ((*param0).get_texture)(param1);
}


void
NodePath_C_replace_texture_v_ppp(NodePath *param0, Texture *param1, Texture *param2) {
    ((*param0).replace_texture)(param1, param2);
}


SamplerState const *
NodePath_C_get_texture_sampler_p_p(NodePath const *param0) {
    return &(((*param0).get_texture_sampler)());
}


SamplerState const *
NodePath_C_get_texture_sampler_p_pp(NodePath const *param0, TextureStage *param1) {
    return &(((*param0).get_texture_sampler)(param1));
}


void
NodePath_C_set_shader_v_ppi(NodePath *param0, Shader const *param1, int param2) {
    ((*param0).set_shader)(param1, param2);
}


void
NodePath_C_set_shader_v_pp(NodePath *param0, Shader const *param1) {
    ((*param0).set_shader)(param1);
}


void
NodePath_C_set_shader_off_v_pi(NodePath *param0, int param1) {
    ((*param0).set_shader_off)(param1);
}


void
NodePath_C_set_shader_off_v_p(NodePath *param0) {
    ((*param0).set_shader_off)();
}


void
NodePath_C_set_shader_auto_v_ppi(NodePath *param0, BitMask32 *param1, int param2) {
    ((*param0).set_shader_auto)(*param1, param2);
}


void
NodePath_C_set_shader_auto_v_pp(NodePath *param0, BitMask32 *param1) {
    ((*param0).set_shader_auto)(*param1);
}


void
NodePath_C_set_shader_auto_v_pi(NodePath *param0, int param1) {
    ((*param0).set_shader_auto)(param1);
}


void
NodePath_C_set_shader_auto_v_p(NodePath *param0) {
    ((*param0).set_shader_auto)();
}


void
NodePath_C_clear_shader_v_p(NodePath *param0) {
    ((*param0).clear_shader)();
}


void
NodePath_C_set_shader_input_v_pspi(NodePath *param0, CPT_InternalName *param1, LMatrix3 const *param2, int param3) {
    ((*param0).set_shader_input)(*param1, *param2, param3);
}


void
NodePath_C_set_shader_input_v_psp(NodePath *param0, CPT_InternalName *param1, LMatrix3 const *param2) {
    ((*param0).set_shader_input)(*param1, *param2);
}


void
NodePath_C_set_shader_input_v_pspi_1_v_pspi(NodePath *param0, CPT_InternalName *param1, LMatrix4 const *param2, int param3) {
    ((*param0).set_shader_input)(*param1, *param2, param3);
}


void
NodePath_C_set_shader_input_v_psp_1_v_psp(NodePath *param0, CPT_InternalName *param1, LMatrix4 const *param2) {
    ((*param0).set_shader_input)(*param1, *param2);
}


void
NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi(NodePath *param0, CPT_InternalName *param1, LVecBase2 const *param2, int param3) {
    ((*param0).set_shader_input)(*param1, *param2, param3);
}


void
NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp(NodePath *param0, CPT_InternalName *param1, LVecBase2 const *param2) {
    ((*param0).set_shader_input)(*param1, *param2);
}


void
NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi(NodePath *param0, CPT_InternalName *param1, LVecBase2i const *param2, int param3) {
    ((*param0).set_shader_input)(*param1, *param2, param3);
}


void
NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp(NodePath *param0, CPT_InternalName *param1, LVecBase2i const *param2) {
    ((*param0).set_shader_input)(*param1, *param2);
}


void
NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi(NodePath *param0, CPT_InternalName *param1, LVecBase3 const *param2, int param3) {
    ((*param0).set_shader_input)(*param1, *param2, param3);
}


void
NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp(NodePath *param0, CPT_InternalName *param1, LVecBase3 const *param2) {
    ((*param0).set_shader_input)(*param1, *param2);
}


void
NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi(NodePath *param0, CPT_InternalName *param1, LVecBase3i const *param2, int param3) {
    ((*param0).set_shader_input)(*param1, *param2, param3);
}


void
NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp(NodePath *param0, CPT_InternalName *param1, LVecBase3i const *param2) {
    ((*param0).set_shader_input)(*param1, *param2);
}


void
NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi(NodePath *param0, CPT_InternalName *param1, LVecBase4 const *param2, int param3) {
    ((*param0).set_shader_input)(*param1, *param2, param3);
}


void
NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp(NodePath *param0, CPT_InternalName *param1, LVecBase4 const *param2) {
    ((*param0).set_shader_input)(*param1, *param2);
}


void
NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi_7_v_pspi(NodePath *param0, CPT_InternalName *param1, LVecBase4i const *param2, int param3) {
    ((*param0).set_shader_input)(*param1, *param2, param3);
}


void
NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp_7_v_psp(NodePath *param0, CPT_InternalName *param1, LVecBase4i const *param2) {
    ((*param0).set_shader_input)(*param1, *param2);
}


void
NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi_7_v_pspi_8_v_pspi(NodePath *param0, CPT_InternalName *param1, NodePath const *param2, int param3) {
    ((*param0).set_shader_input)(*param1, *param2, param3);
}


void
NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp_7_v_psp_8_v_psp(NodePath *param0, CPT_InternalName *param1, NodePath const *param2) {
    ((*param0).set_shader_input)(*param1, *param2);
}


void
NodePath_C_set_shader_input_v_psffffi(NodePath *param0, CPT_InternalName *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5, int param6) {
    ((*param0).set_shader_input)(*param1, param2, param3, param4, param5, param6);
}


void
NodePath_C_set_shader_input_v_psffff(NodePath *param0, CPT_InternalName *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5) {
    ((*param0).set_shader_input)(*param1, param2, param3, param4, param5);
}


void
NodePath_C_set_shader_input_v_psfff(NodePath *param0, CPT_InternalName *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    ((*param0).set_shader_input)(*param1, param2, param3, param4);
}


void
NodePath_C_set_shader_input_v_psff(NodePath *param0, CPT_InternalName *param1, PN_stdfloat param2, PN_stdfloat param3) {
    ((*param0).set_shader_input)(*param1, param2, param3);
}


void
NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi_7_v_pspi_8_v_pspi_9_v_pspi(NodePath *param0, CPT_InternalName *param1, PTA_LMatrix3 const *param2, int param3) {
    ((*param0).set_shader_input)(*param1, *param2, param3);
}


void
NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp_7_v_psp_8_v_psp_9_v_psp(NodePath *param0, CPT_InternalName *param1, PTA_LMatrix3 const *param2) {
    ((*param0).set_shader_input)(*param1, *param2);
}


void
NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi_7_v_pspi_8_v_pspi_9_v_pspi_10_v_pspi(NodePath *param0, CPT_InternalName *param1, PTA_LMatrix4 const *param2, int param3) {
    ((*param0).set_shader_input)(*param1, *param2, param3);
}


void
NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp_7_v_psp_8_v_psp_9_v_psp_10_v_psp(NodePath *param0, CPT_InternalName *param1, PTA_LMatrix4 const *param2) {
    ((*param0).set_shader_input)(*param1, *param2);
}


void
NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi_7_v_pspi_8_v_pspi_9_v_pspi_10_v_pspi_11_v_pspi(NodePath *param0, CPT_InternalName *param1, PTA_LVecBase2 const *param2, int param3) {
    ((*param0).set_shader_input)(*param1, *param2, param3);
}


void
NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp_7_v_psp_8_v_psp_9_v_psp_10_v_psp_11_v_psp(NodePath *param0, CPT_InternalName *param1, PTA_LVecBase2 const *param2) {
    ((*param0).set_shader_input)(*param1, *param2);
}


void
NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi_7_v_pspi_8_v_pspi_9_v_pspi_10_v_pspi_11_v_pspi_12_v_pspi(NodePath *param0, CPT_InternalName *param1, PTA_LVecBase2i const *param2, int param3) {
    ((*param0).set_shader_input)(*param1, *param2, param3);
}


void
NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp_7_v_psp_8_v_psp_9_v_psp_10_v_psp_11_v_psp_12_v_psp(NodePath *param0, CPT_InternalName *param1, PTA_LVecBase2i const *param2) {
    ((*param0).set_shader_input)(*param1, *param2);
}


void
NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi_7_v_pspi_8_v_pspi_9_v_pspi_10_v_pspi_11_v_pspi_12_v_pspi_13_v_pspi(NodePath *param0, CPT_InternalName *param1, PTA_LVecBase3 const *param2, int param3) {
    ((*param0).set_shader_input)(*param1, *param2, param3);
}


void
NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp_7_v_psp_8_v_psp_9_v_psp_10_v_psp_11_v_psp_12_v_psp_13_v_psp(NodePath *param0, CPT_InternalName *param1, PTA_LVecBase3 const *param2) {
    ((*param0).set_shader_input)(*param1, *param2);
}


void
NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi_7_v_pspi_8_v_pspi_9_v_pspi_10_v_pspi_11_v_pspi_12_v_pspi_13_v_pspi_14_v_pspi(NodePath *param0, CPT_InternalName *param1, PTA_LVecBase3i const *param2, int param3) {
    ((*param0).set_shader_input)(*param1, *param2, param3);
}


void
NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp_7_v_psp_8_v_psp_9_v_psp_10_v_psp_11_v_psp_12_v_psp_13_v_psp_14_v_psp(NodePath *param0, CPT_InternalName *param1, PTA_LVecBase3i const *param2) {
    ((*param0).set_shader_input)(*param1, *param2);
}


void
NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi_7_v_pspi_8_v_pspi_9_v_pspi_10_v_pspi_11_v_pspi_12_v_pspi_13_v_pspi_14_v_pspi_15_v_pspi(NodePath *param0, CPT_InternalName *param1, PTA_LVecBase4 const *param2, int param3) {
    ((*param0).set_shader_input)(*param1, *param2, param3);
}


void
NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp_7_v_psp_8_v_psp_9_v_psp_10_v_psp_11_v_psp_12_v_psp_13_v_psp_14_v_psp_15_v_psp(NodePath *param0, CPT_InternalName *param1, PTA_LVecBase4 const *param2) {
    ((*param0).set_shader_input)(*param1, *param2);
}


void
NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi_7_v_pspi_8_v_pspi_9_v_pspi_10_v_pspi_11_v_pspi_12_v_pspi_13_v_pspi_14_v_pspi_15_v_pspi_16_v_pspi(NodePath *param0, CPT_InternalName *param1, PTA_LVecBase4i const *param2, int param3) {
    ((*param0).set_shader_input)(*param1, *param2, param3);
}


void
NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp_7_v_psp_8_v_psp_9_v_psp_10_v_psp_11_v_psp_12_v_psp_13_v_psp_14_v_psp_15_v_psp_16_v_psp(NodePath *param0, CPT_InternalName *param1, PTA_LVecBase4i const *param2) {
    ((*param0).set_shader_input)(*param1, *param2);
}


void
NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi_7_v_pspi_8_v_pspi_9_v_pspi_10_v_pspi_11_v_pspi_12_v_pspi_13_v_pspi_14_v_pspi_15_v_pspi_16_v_pspi_17_v_pspi(NodePath *param0, CPT_InternalName *param1, PTA_double const *param2, int param3) {
    ((*param0).set_shader_input)(*param1, *param2, param3);
}


void
NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp_7_v_psp_8_v_psp_9_v_psp_10_v_psp_11_v_psp_12_v_psp_13_v_psp_14_v_psp_15_v_psp_16_v_psp_17_v_psp(NodePath *param0, CPT_InternalName *param1, PTA_double const *param2) {
    ((*param0).set_shader_input)(*param1, *param2);
}


void
NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi_7_v_pspi_8_v_pspi_9_v_pspi_10_v_pspi_11_v_pspi_12_v_pspi_13_v_pspi_14_v_pspi_15_v_pspi_16_v_pspi_17_v_pspi_18_v_pspi(NodePath *param0, CPT_InternalName *param1, PTA_float const *param2, int param3) {
    ((*param0).set_shader_input)(*param1, *param2, param3);
}


void
NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp_7_v_psp_8_v_psp_9_v_psp_10_v_psp_11_v_psp_12_v_psp_13_v_psp_14_v_psp_15_v_psp_16_v_psp_17_v_psp_18_v_psp(NodePath *param0, CPT_InternalName *param1, PTA_float const *param2) {
    ((*param0).set_shader_input)(*param1, *param2);
}


void
NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi_7_v_pspi_8_v_pspi_9_v_pspi_10_v_pspi_11_v_pspi_12_v_pspi_13_v_pspi_14_v_pspi_15_v_pspi_16_v_pspi_17_v_pspi_18_v_pspi_19_v_pspi(NodePath *param0, CPT_InternalName *param1, PTA_int const *param2, int param3) {
    ((*param0).set_shader_input)(*param1, *param2, param3);
}


void
NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp_7_v_psp_8_v_psp_9_v_psp_10_v_psp_11_v_psp_12_v_psp_13_v_psp_14_v_psp_15_v_psp_16_v_psp_17_v_psp_18_v_psp_19_v_psp(NodePath *param0, CPT_InternalName *param1, PTA_int const *param2) {
    ((*param0).set_shader_input)(*param1, *param2);
}


void
NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi_7_v_pspi_8_v_pspi_9_v_pspi_10_v_pspi_11_v_pspi_12_v_pspi_13_v_pspi_14_v_pspi_15_v_pspi_16_v_pspi_17_v_pspi_18_v_pspi_19_v_pspi_20_v_pspi(NodePath *param0, CPT_InternalName *param1, ShaderBuffer *param2, int param3) {
    ((*param0).set_shader_input)(*param1, param2, param3);
}


void
NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp_7_v_psp_8_v_psp_9_v_psp_10_v_psp_11_v_psp_12_v_psp_13_v_psp_14_v_psp_15_v_psp_16_v_psp_17_v_psp_18_v_psp_19_v_psp_20_v_psp(NodePath *param0, CPT_InternalName *param1, ShaderBuffer *param2) {
    ((*param0).set_shader_input)(*param1, param2);
}


void
NodePath_C_set_shader_input_v_psppi(NodePath *param0, CPT_InternalName *param1, Texture *param2, SamplerState const *param3, int param4) {
    ((*param0).set_shader_input)(*param1, param2, *param3, param4);
}


void
NodePath_C_set_shader_input_v_pspp(NodePath *param0, CPT_InternalName *param1, Texture *param2, SamplerState const *param3) {
    ((*param0).set_shader_input)(*param1, param2, *param3);
}


void
NodePath_C_set_shader_input_v_pspBBiii(NodePath *param0, CPT_InternalName *param1, Texture *param2, bool param3, bool param4, int param5, int param6, int param7) {
    ((*param0).set_shader_input)(*param1, param2, param3, param4, param5, param6, param7);
}


void
NodePath_C_set_shader_input_v_pspBBii(NodePath *param0, CPT_InternalName *param1, Texture *param2, bool param3, bool param4, int param5, int param6) {
    ((*param0).set_shader_input)(*param1, param2, param3, param4, param5, param6);
}


void
NodePath_C_set_shader_input_v_pspBBi(NodePath *param0, CPT_InternalName *param1, Texture *param2, bool param3, bool param4, int param5) {
    ((*param0).set_shader_input)(*param1, param2, param3, param4, param5);
}


void
NodePath_C_set_shader_input_v_pspBB(NodePath *param0, CPT_InternalName *param1, Texture *param2, bool param3, bool param4) {
    ((*param0).set_shader_input)(*param1, param2, param3, param4);
}


void
NodePath_C_set_shader_input_v_pspi_1_v_pspi_2_v_pspi_3_v_pspi_4_v_pspi_5_v_pspi_6_v_pspi_7_v_pspi_8_v_pspi_9_v_pspi_10_v_pspi_11_v_pspi_12_v_pspi_13_v_pspi_14_v_pspi_15_v_pspi_16_v_pspi_17_v_pspi_18_v_pspi_19_v_pspi_20_v_pspi_21_v_pspi(NodePath *param0, CPT_InternalName *param1, Texture *param2, int param3) {
    ((*param0).set_shader_input)(*param1, param2, param3);
}


void
NodePath_C_set_shader_input_v_psp_1_v_psp_2_v_psp_3_v_psp_4_v_psp_5_v_psp_6_v_psp_7_v_psp_8_v_psp_9_v_psp_10_v_psp_11_v_psp_12_v_psp_13_v_psp_14_v_psp_15_v_psp_16_v_psp_17_v_psp_18_v_psp_19_v_psp_20_v_psp_21_v_psp(NodePath *param0, CPT_InternalName *param1, Texture *param2) {
    ((*param0).set_shader_input)(*param1, param2);
}


void
NodePath_C_set_shader_input_v_psiiiii(NodePath *param0, CPT_InternalName *param1, int param2, int param3, int param4, int param5, int param6) {
    ((*param0).set_shader_input)(*param1, param2, param3, param4, param5, param6);
}


void
NodePath_C_set_shader_input_v_psiiii(NodePath *param0, CPT_InternalName *param1, int param2, int param3, int param4, int param5) {
    ((*param0).set_shader_input)(*param1, param2, param3, param4, param5);
}


void
NodePath_C_set_shader_input_v_psiii(NodePath *param0, CPT_InternalName *param1, int param2, int param3, int param4) {
    ((*param0).set_shader_input)(*param1, param2, param3, param4);
}


void
NodePath_C_set_shader_input_v_psii(NodePath *param0, CPT_InternalName *param1, int param2, int param3) {
    ((*param0).set_shader_input)(*param1, param2, param3);
}


void
NodePath_C_set_shader_input_v_pp(NodePath *param0, ShaderInput *param1) {
    ((*param0).set_shader_input)(*param1);
}


void
NodePath_C_set_shader_input_v_pp_1_v_pp(NodePath *param0, ShaderInput const *param1) {
    ((*param0).set_shader_input)(*param1);
}


void
NodePath_C_clear_shader_input_v_ps(NodePath *param0, CPT_InternalName *param1) {
    ((*param0).clear_shader_input)(*param1);
}


void
NodePath_C_set_instance_count_v_pi(NodePath *param0, int param1) {
    ((*param0).set_instance_count)(param1);
}


Shader const *
NodePath_C_get_shader_p_p(NodePath const *param0) {
    return ((*param0).get_shader)();
}


ShaderInput *
NodePath_C_get_shader_input_p_ps(NodePath const *param0, CPT_InternalName *param1) {
    return new ShaderInput(((*param0).get_shader_input)(*param1));
}


int
NodePath_C_get_instance_count_i_p(NodePath const *param0) {
    return ((*param0).get_instance_count)();
}


void
NodePath_C_set_tex_transform_v_pppp(NodePath *param0, NodePath const *param1, TextureStage *param2, TransformState const *param3) {
    ((*param0).set_tex_transform)(*param1, param2, param3);
}


void
NodePath_C_set_tex_transform_v_ppp(NodePath *param0, TextureStage *param1, TransformState const *param2) {
    ((*param0).set_tex_transform)(param1, param2);
}


void
NodePath_C_clear_tex_transform_v_p(NodePath *param0) {
    ((*param0).clear_tex_transform)();
}


void
NodePath_C_clear_tex_transform_v_pp(NodePath *param0, TextureStage *param1) {
    ((*param0).clear_tex_transform)(param1);
}


bool
NodePath_C_has_tex_transform_B_pp(NodePath const *param0, TextureStage *param1) {
    return ((*param0).has_tex_transform)(param1);
}


ConstPointerTo< TransformState > *
NodePath_C_get_tex_transform_p_ppp(NodePath const *param0, NodePath const *param1, TextureStage *param2) {
    return new ConstPointerTo< TransformState >(((*param0).get_tex_transform)(*param1, param2));
}


ConstPointerTo< TransformState > *
NodePath_C_get_tex_transform_p_pp(NodePath const *param0, TextureStage *param1) {
    return new ConstPointerTo< TransformState >(((*param0).get_tex_transform)(param1));
}


void
NodePath_C_set_tex_offset_v_pppp(NodePath *param0, NodePath const *param1, TextureStage *param2, LVecBase2 const *param3) {
    ((*param0).set_tex_offset)(*param1, param2, *param3);
}


void
NodePath_C_set_tex_offset_v_pppff(NodePath *param0, NodePath const *param1, TextureStage *param2, PN_stdfloat param3, PN_stdfloat param4) {
    ((*param0).set_tex_offset)(*param1, param2, param3, param4);
}


void
NodePath_C_set_tex_offset_v_ppp(NodePath *param0, TextureStage *param1, LVecBase2 const *param2) {
    ((*param0).set_tex_offset)(param1, *param2);
}


void
NodePath_C_set_tex_offset_v_ppff(NodePath *param0, TextureStage *param1, PN_stdfloat param2, PN_stdfloat param3) {
    ((*param0).set_tex_offset)(param1, param2, param3);
}


void
NodePath_C_set_tex_rotate_v_pppf(NodePath *param0, NodePath const *param1, TextureStage *param2, PN_stdfloat param3) {
    ((*param0).set_tex_rotate)(*param1, param2, param3);
}


void
NodePath_C_set_tex_rotate_v_ppf(NodePath *param0, TextureStage *param1, PN_stdfloat param2) {
    ((*param0).set_tex_rotate)(param1, param2);
}


void
NodePath_C_set_tex_scale_v_pppp(NodePath *param0, NodePath const *param1, TextureStage *param2, LVecBase2 const *param3) {
    ((*param0).set_tex_scale)(*param1, param2, *param3);
}


void
NodePath_C_set_tex_scale_v_pppp_1_v_pppp(NodePath *param0, NodePath const *param1, TextureStage *param2, LVecBase3 const *param3) {
    ((*param0).set_tex_scale)(*param1, param2, *param3);
}


void
NodePath_C_set_tex_scale_v_pppf(NodePath *param0, NodePath const *param1, TextureStage *param2, PN_stdfloat param3) {
    ((*param0).set_tex_scale)(*param1, param2, param3);
}


void
NodePath_C_set_tex_scale_v_pppff(NodePath *param0, NodePath const *param1, TextureStage *param2, PN_stdfloat param3, PN_stdfloat param4) {
    ((*param0).set_tex_scale)(*param1, param2, param3, param4);
}


void
NodePath_C_set_tex_scale_v_pppfff(NodePath *param0, NodePath const *param1, TextureStage *param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5) {
    ((*param0).set_tex_scale)(*param1, param2, param3, param4, param5);
}


void
NodePath_C_set_tex_scale_v_ppp(NodePath *param0, TextureStage *param1, LVecBase2 const *param2) {
    ((*param0).set_tex_scale)(param1, *param2);
}


void
NodePath_C_set_tex_scale_v_ppp_1_v_ppp(NodePath *param0, TextureStage *param1, LVecBase3 const *param2) {
    ((*param0).set_tex_scale)(param1, *param2);
}


void
NodePath_C_set_tex_scale_v_ppf(NodePath *param0, TextureStage *param1, PN_stdfloat param2) {
    ((*param0).set_tex_scale)(param1, param2);
}


void
NodePath_C_set_tex_scale_v_ppff(NodePath *param0, TextureStage *param1, PN_stdfloat param2, PN_stdfloat param3) {
    ((*param0).set_tex_scale)(param1, param2, param3);
}


void
NodePath_C_set_tex_scale_v_ppfff(NodePath *param0, TextureStage *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    ((*param0).set_tex_scale)(param1, param2, param3, param4);
}


LVecBase2 *
NodePath_C_get_tex_offset_p_ppp(NodePath const *param0, NodePath const *param1, TextureStage *param2) {
    return new LVecBase2(((*param0).get_tex_offset)(*param1, param2));
}


LVecBase2 *
NodePath_C_get_tex_offset_p_pp(NodePath const *param0, TextureStage *param1) {
    return new LVecBase2(((*param0).get_tex_offset)(param1));
}


PN_stdfloat
NodePath_C_get_tex_rotate_f_ppp(NodePath const *param0, NodePath const *param1, TextureStage *param2) {
    return ((*param0).get_tex_rotate)(*param1, param2);
}


PN_stdfloat
NodePath_C_get_tex_rotate_f_pp(NodePath const *param0, TextureStage *param1) {
    return ((*param0).get_tex_rotate)(param1);
}


LVecBase2 *
NodePath_C_get_tex_scale_p_ppp(NodePath const *param0, NodePath const *param1, TextureStage *param2) {
    return new LVecBase2(((*param0).get_tex_scale)(*param1, param2));
}


LVecBase2 *
NodePath_C_get_tex_scale_p_pp(NodePath const *param0, TextureStage *param1) {
    return new LVecBase2(((*param0).get_tex_scale)(param1));
}


void
NodePath_C_set_tex_pos_v_pppp(NodePath *param0, NodePath const *param1, TextureStage *param2, LVecBase3 const *param3) {
    ((*param0).set_tex_pos)(*param1, param2, *param3);
}


void
NodePath_C_set_tex_pos_v_pppfff(NodePath *param0, NodePath const *param1, TextureStage *param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5) {
    ((*param0).set_tex_pos)(*param1, param2, param3, param4, param5);
}


void
NodePath_C_set_tex_pos_v_ppp(NodePath *param0, TextureStage *param1, LVecBase3 const *param2) {
    ((*param0).set_tex_pos)(param1, *param2);
}


void
NodePath_C_set_tex_pos_v_ppfff(NodePath *param0, TextureStage *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    ((*param0).set_tex_pos)(param1, param2, param3, param4);
}


void
NodePath_C_set_tex_hpr_v_pppp(NodePath *param0, NodePath const *param1, TextureStage *param2, LVecBase3 const *param3) {
    ((*param0).set_tex_hpr)(*param1, param2, *param3);
}


void
NodePath_C_set_tex_hpr_v_pppfff(NodePath *param0, NodePath const *param1, TextureStage *param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5) {
    ((*param0).set_tex_hpr)(*param1, param2, param3, param4, param5);
}


void
NodePath_C_set_tex_hpr_v_ppp(NodePath *param0, TextureStage *param1, LVecBase3 const *param2) {
    ((*param0).set_tex_hpr)(param1, *param2);
}


void
NodePath_C_set_tex_hpr_v_ppfff(NodePath *param0, TextureStage *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    ((*param0).set_tex_hpr)(param1, param2, param3, param4);
}


LVecBase3 *
NodePath_C_get_tex_pos_p_ppp(NodePath const *param0, NodePath const *param1, TextureStage *param2) {
    return new LVecBase3(((*param0).get_tex_pos)(*param1, param2));
}


LVecBase3 *
NodePath_C_get_tex_pos_p_pp(NodePath const *param0, TextureStage *param1) {
    return new LVecBase3(((*param0).get_tex_pos)(param1));
}


LVecBase3 *
NodePath_C_get_tex_hpr_p_ppp(NodePath const *param0, NodePath const *param1, TextureStage *param2) {
    return new LVecBase3(((*param0).get_tex_hpr)(*param1, param2));
}


LVecBase3 *
NodePath_C_get_tex_hpr_p_pp(NodePath const *param0, TextureStage *param1) {
    return new LVecBase3(((*param0).get_tex_hpr)(param1));
}


LVecBase3 *
NodePath_C_get_tex_scale_3d_p_ppp(NodePath const *param0, NodePath const *param1, TextureStage *param2) {
    return new LVecBase3(((*param0).get_tex_scale_3d)(*param1, param2));
}


LVecBase3 *
NodePath_C_get_tex_scale_3d_p_pp(NodePath const *param0, TextureStage *param1) {
    return new LVecBase3(((*param0).get_tex_scale_3d)(param1));
}


void
NodePath_C_set_tex_gen_v_ppppi(NodePath *param0, TextureStage *param1, RenderAttrib::TexGenMode param2, LTexCoord3 const *param3, int param4) {
    ((*param0).set_tex_gen)(param1, param2, *param3, param4);
}


void
NodePath_C_set_tex_gen_v_pppp(NodePath *param0, TextureStage *param1, RenderAttrib::TexGenMode param2, LTexCoord3 const *param3) {
    ((*param0).set_tex_gen)(param1, param2, *param3);
}


void
NodePath_C_set_tex_gen_v_pppi(NodePath *param0, TextureStage *param1, RenderAttrib::TexGenMode param2, int param3) {
    ((*param0).set_tex_gen)(param1, param2, param3);
}


void
NodePath_C_set_tex_gen_v_ppp(NodePath *param0, TextureStage *param1, RenderAttrib::TexGenMode param2) {
    ((*param0).set_tex_gen)(param1, param2);
}


void
NodePath_C_clear_tex_gen_v_p(NodePath *param0) {
    ((*param0).clear_tex_gen)();
}


void
NodePath_C_clear_tex_gen_v_pp(NodePath *param0, TextureStage *param1) {
    ((*param0).clear_tex_gen)(param1);
}


bool
NodePath_C_has_tex_gen_B_pp(NodePath const *param0, TextureStage *param1) {
    return ((*param0).has_tex_gen)(param1);
}


RenderAttrib::TexGenMode
NodePath_C_get_tex_gen_p_pp(NodePath const *param0, TextureStage *param1) {
    return ((*param0).get_tex_gen)(param1);
}


void
NodePath_C_set_tex_projector_v_ppppi(NodePath *param0, TextureStage *param1, NodePath const *param2, NodePath const *param3, int param4) {
    ((*param0).set_tex_projector)(param1, *param2, *param3, param4);
}


void
NodePath_C_set_tex_projector_v_pppp(NodePath *param0, TextureStage *param1, NodePath const *param2, NodePath const *param3) {
    ((*param0).set_tex_projector)(param1, *param2, *param3);
}


void
NodePath_C_clear_tex_projector_v_p(NodePath *param0) {
    ((*param0).clear_tex_projector)();
}


void
NodePath_C_clear_tex_projector_v_pp(NodePath *param0, TextureStage *param1) {
    ((*param0).clear_tex_projector)(param1);
}


bool
NodePath_C_has_tex_projector_B_pp(NodePath const *param0, TextureStage *param1) {
    return ((*param0).has_tex_projector)(param1);
}


NodePath *
NodePath_C_get_tex_projector_from_p_pp(NodePath const *param0, TextureStage *param1) {
    return new NodePath(((*param0).get_tex_projector_from)(param1));
}


NodePath *
NodePath_C_get_tex_projector_to_p_pp(NodePath const *param0, TextureStage *param1) {
    return new NodePath(((*param0).get_tex_projector_to)(param1));
}


void
NodePath_C_project_texture_v_pppp(NodePath *param0, TextureStage *param1, Texture *param2, NodePath const *param3) {
    ((*param0).project_texture)(param1, param2, *param3);
}


void
NodePath_C_clear_project_texture_v_pp(NodePath *param0, TextureStage *param1) {
    ((*param0).clear_project_texture)(param1);
}


bool
NodePath_C_has_texcoord_B_ps(NodePath const *param0, char const *param1) {
    return ((*param0).has_texcoord)(std::string(param1));
}


bool
NodePath_C_has_vertex_column_B_ps(NodePath const *param0, InternalName const *param1) {
    return ((*param0).has_vertex_column)(param1);
}


InternalNameCollection *
NodePath_C_find_all_vertex_columns_p_p(NodePath const *param0) {
    return new InternalNameCollection(((*param0).find_all_vertex_columns)());
}


InternalNameCollection *
NodePath_C_find_all_vertex_columns_p_ps(NodePath const *param0, char const *param1) {
    return new InternalNameCollection(((*param0).find_all_vertex_columns)(std::string(param1)));
}


InternalNameCollection *
NodePath_C_find_all_texcoords_p_p(NodePath const *param0) {
    return new InternalNameCollection(((*param0).find_all_texcoords)());
}


InternalNameCollection *
NodePath_C_find_all_texcoords_p_ps(NodePath const *param0, char const *param1) {
    return new InternalNameCollection(((*param0).find_all_texcoords)(std::string(param1)));
}


Texture *
NodePath_C_find_texture_p_pp(NodePath const *param0, TextureStage *param1) {
    return ((*param0).find_texture)(param1);
}


Texture *
NodePath_C_find_texture_p_ps(NodePath const *param0, char const *param1) {
    return ((*param0).find_texture)(std::string(param1));
}


TextureCollection *
NodePath_C_find_all_textures_p_p(NodePath const *param0) {
    return new TextureCollection(((*param0).find_all_textures)());
}


TextureCollection *
NodePath_C_find_all_textures_p_pp(NodePath const *param0, TextureStage *param1) {
    return new TextureCollection(((*param0).find_all_textures)(param1));
}


TextureCollection *
NodePath_C_find_all_textures_p_ps(NodePath const *param0, char const *param1) {
    return new TextureCollection(((*param0).find_all_textures)(std::string(param1)));
}


TextureStage *
NodePath_C_find_texture_stage_p_ps(NodePath const *param0, char const *param1) {
    return ((*param0).find_texture_stage)(std::string(param1));
}


TextureStageCollection *
NodePath_C_find_all_texture_stages_p_p(NodePath const *param0) {
    return new TextureStageCollection(((*param0).find_all_texture_stages)());
}


TextureStageCollection *
NodePath_C_find_all_texture_stages_p_ps(NodePath const *param0, char const *param1) {
    return new TextureStageCollection(((*param0).find_all_texture_stages)(std::string(param1)));
}


void
NodePath_C_unify_texture_stages_v_pp(NodePath *param0, TextureStage *param1) {
    ((*param0).unify_texture_stages)(param1);
}


Material *
NodePath_C_find_material_p_ps(NodePath const *param0, char const *param1) {
    return ((*param0).find_material)(std::string(param1));
}


MaterialCollection *
NodePath_C_find_all_materials_p_p(NodePath const *param0) {
    return new MaterialCollection(((*param0).find_all_materials)());
}


MaterialCollection *
NodePath_C_find_all_materials_p_ps(NodePath const *param0, char const *param1) {
    return new MaterialCollection(((*param0).find_all_materials)(std::string(param1)));
}


void
NodePath_C_set_material_v_ppi(NodePath *param0, Material *param1, int param2) {
    ((*param0).set_material)(param1, param2);
}


void
NodePath_C_set_material_v_pp(NodePath *param0, Material *param1) {
    ((*param0).set_material)(param1);
}


void
NodePath_C_set_material_off_v_pi(NodePath *param0, int param1) {
    ((*param0).set_material_off)(param1);
}


void
NodePath_C_set_material_off_v_p(NodePath *param0) {
    ((*param0).set_material_off)();
}


void
NodePath_C_clear_material_v_p(NodePath *param0) {
    ((*param0).clear_material)();
}


bool
NodePath_C_has_material_B_p(NodePath const *param0) {
    return ((*param0).has_material)();
}


PointerTo< Material > *
NodePath_C_get_material_p_p(NodePath const *param0) {
    return new PointerTo< Material >(((*param0).get_material)());
}


void
NodePath_C_replace_material_v_ppp(NodePath *param0, Material *param1, Material *param2) {
    ((*param0).replace_material)(param1, param2);
}


void
NodePath_C_set_fog_v_ppi(NodePath *param0, Fog *param1, int param2) {
    ((*param0).set_fog)(param1, param2);
}


void
NodePath_C_set_fog_v_pp(NodePath *param0, Fog *param1) {
    ((*param0).set_fog)(param1);
}


void
NodePath_C_set_fog_off_v_pi(NodePath *param0, int param1) {
    ((*param0).set_fog_off)(param1);
}


void
NodePath_C_set_fog_off_v_p(NodePath *param0) {
    ((*param0).set_fog_off)();
}


void
NodePath_C_clear_fog_v_p(NodePath *param0) {
    ((*param0).clear_fog)();
}


bool
NodePath_C_has_fog_B_p(NodePath const *param0) {
    return ((*param0).has_fog)();
}


bool
NodePath_C_has_fog_off_B_p(NodePath const *param0) {
    return ((*param0).has_fog_off)();
}


Fog *
NodePath_C_get_fog_p_p(NodePath const *param0) {
    return ((*param0).get_fog)();
}


void
NodePath_C_set_render_mode_wireframe_v_pi(NodePath *param0, int param1) {
    ((*param0).set_render_mode_wireframe)(param1);
}


void
NodePath_C_set_render_mode_wireframe_v_p(NodePath *param0) {
    ((*param0).set_render_mode_wireframe)();
}


void
NodePath_C_set_render_mode_filled_v_pi(NodePath *param0, int param1) {
    ((*param0).set_render_mode_filled)(param1);
}


void
NodePath_C_set_render_mode_filled_v_p(NodePath *param0) {
    ((*param0).set_render_mode_filled)();
}


void
NodePath_C_set_render_mode_filled_wireframe_v_ppi(NodePath *param0, LColor const *param1, int param2) {
    ((*param0).set_render_mode_filled_wireframe)(*param1, param2);
}


void
NodePath_C_set_render_mode_filled_wireframe_v_pp(NodePath *param0, LColor const *param1) {
    ((*param0).set_render_mode_filled_wireframe)(*param1);
}


void
NodePath_C_set_render_mode_thickness_v_pfi(NodePath *param0, PN_stdfloat param1, int param2) {
    ((*param0).set_render_mode_thickness)(param1, param2);
}


void
NodePath_C_set_render_mode_thickness_v_pf(NodePath *param0, PN_stdfloat param1) {
    ((*param0).set_render_mode_thickness)(param1);
}


void
NodePath_C_set_render_mode_perspective_v_pBi(NodePath *param0, bool param1, int param2) {
    ((*param0).set_render_mode_perspective)(param1, param2);
}


void
NodePath_C_set_render_mode_perspective_v_pB(NodePath *param0, bool param1) {
    ((*param0).set_render_mode_perspective)(param1);
}


void
NodePath_C_set_render_mode_v_ppfi(NodePath *param0, RenderModeAttrib::Mode param1, PN_stdfloat param2, int param3) {
    ((*param0).set_render_mode)(param1, param2, param3);
}


void
NodePath_C_set_render_mode_v_ppf(NodePath *param0, RenderModeAttrib::Mode param1, PN_stdfloat param2) {
    ((*param0).set_render_mode)(param1, param2);
}


void
NodePath_C_clear_render_mode_v_p(NodePath *param0) {
    ((*param0).clear_render_mode)();
}


bool
NodePath_C_has_render_mode_B_p(NodePath const *param0) {
    return ((*param0).has_render_mode)();
}


RenderModeAttrib::Mode
NodePath_C_get_render_mode_p_p(NodePath const *param0) {
    return ((*param0).get_render_mode)();
}


PN_stdfloat
NodePath_C_get_render_mode_thickness_f_p(NodePath const *param0) {
    return ((*param0).get_render_mode_thickness)();
}


bool
NodePath_C_get_render_mode_perspective_B_p(NodePath const *param0) {
    return ((*param0).get_render_mode_perspective)();
}


void
NodePath_C_set_two_sided_v_pBi(NodePath *param0, bool param1, int param2) {
    ((*param0).set_two_sided)(param1, param2);
}


void
NodePath_C_set_two_sided_v_pB(NodePath *param0, bool param1) {
    ((*param0).set_two_sided)(param1);
}


void
NodePath_C_clear_two_sided_v_p(NodePath *param0) {
    ((*param0).clear_two_sided)();
}


bool
NodePath_C_has_two_sided_B_p(NodePath const *param0) {
    return ((*param0).has_two_sided)();
}


bool
NodePath_C_get_two_sided_B_p(NodePath const *param0) {
    return ((*param0).get_two_sided)();
}


void
NodePath_C_set_depth_test_v_pBi(NodePath *param0, bool param1, int param2) {
    ((*param0).set_depth_test)(param1, param2);
}


void
NodePath_C_set_depth_test_v_pB(NodePath *param0, bool param1) {
    ((*param0).set_depth_test)(param1);
}


void
NodePath_C_clear_depth_test_v_p(NodePath *param0) {
    ((*param0).clear_depth_test)();
}


bool
NodePath_C_has_depth_test_B_p(NodePath const *param0) {
    return ((*param0).has_depth_test)();
}


bool
NodePath_C_get_depth_test_B_p(NodePath const *param0) {
    return ((*param0).get_depth_test)();
}


void
NodePath_C_set_depth_write_v_pBi(NodePath *param0, bool param1, int param2) {
    ((*param0).set_depth_write)(param1, param2);
}


void
NodePath_C_set_depth_write_v_pB(NodePath *param0, bool param1) {
    ((*param0).set_depth_write)(param1);
}


void
NodePath_C_clear_depth_write_v_p(NodePath *param0) {
    ((*param0).clear_depth_write)();
}


bool
NodePath_C_has_depth_write_B_p(NodePath const *param0) {
    return ((*param0).has_depth_write)();
}


bool
NodePath_C_get_depth_write_B_p(NodePath const *param0) {
    return ((*param0).get_depth_write)();
}


void
NodePath_C_set_depth_offset_v_pii(NodePath *param0, int param1, int param2) {
    ((*param0).set_depth_offset)(param1, param2);
}


void
NodePath_C_set_depth_offset_v_pi(NodePath *param0, int param1) {
    ((*param0).set_depth_offset)(param1);
}


void
NodePath_C_clear_depth_offset_v_p(NodePath *param0) {
    ((*param0).clear_depth_offset)();
}


bool
NodePath_C_has_depth_offset_B_p(NodePath const *param0) {
    return ((*param0).has_depth_offset)();
}


int
NodePath_C_get_depth_offset_i_p(NodePath const *param0) {
    return ((*param0).get_depth_offset)();
}


void
NodePath_C_do_billboard_axis_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2) {
    ((*param0).do_billboard_axis)(*param1, param2);
}


void
NodePath_C_do_billboard_point_eye_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2) {
    ((*param0).do_billboard_point_eye)(*param1, param2);
}


void
NodePath_C_do_billboard_point_world_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2) {
    ((*param0).do_billboard_point_world)(*param1, param2);
}


void
NodePath_C_set_billboard_axis_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2) {
    ((*param0).set_billboard_axis)(*param1, param2);
}


void
NodePath_C_set_billboard_axis_v_pf(NodePath *param0, PN_stdfloat param1) {
    ((*param0).set_billboard_axis)(param1);
}


void
NodePath_C_set_billboard_axis_v_p(NodePath *param0) {
    ((*param0).set_billboard_axis)();
}


void
NodePath_C_set_billboard_point_eye_v_ppfB(NodePath *param0, NodePath const *param1, PN_stdfloat param2, bool param3) {
    ((*param0).set_billboard_point_eye)(*param1, param2, param3);
}


void
NodePath_C_set_billboard_point_eye_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2) {
    ((*param0).set_billboard_point_eye)(*param1, param2);
}


void
NodePath_C_set_billboard_point_eye_v_pfB(NodePath *param0, PN_stdfloat param1, bool param2) {
    ((*param0).set_billboard_point_eye)(param1, param2);
}


void
NodePath_C_set_billboard_point_eye_v_pf(NodePath *param0, PN_stdfloat param1) {
    ((*param0).set_billboard_point_eye)(param1);
}


void
NodePath_C_set_billboard_point_eye_v_p(NodePath *param0) {
    ((*param0).set_billboard_point_eye)();
}


void
NodePath_C_set_billboard_point_world_v_ppf(NodePath *param0, NodePath const *param1, PN_stdfloat param2) {
    ((*param0).set_billboard_point_world)(*param1, param2);
}


void
NodePath_C_set_billboard_point_world_v_pf(NodePath *param0, PN_stdfloat param1) {
    ((*param0).set_billboard_point_world)(param1);
}


void
NodePath_C_set_billboard_point_world_v_p(NodePath *param0) {
    ((*param0).set_billboard_point_world)();
}


void
NodePath_C_clear_billboard_v_p(NodePath *param0) {
    ((*param0).clear_billboard)();
}


bool
NodePath_C_has_billboard_B_p(NodePath const *param0) {
    return ((*param0).has_billboard)();
}


void
NodePath_C_set_compass_v_pp(NodePath *param0, NodePath const *param1) {
    ((*param0).set_compass)(*param1);
}


void
NodePath_C_set_compass_v_p(NodePath *param0) {
    ((*param0).set_compass)();
}


void
NodePath_C_clear_compass_v_p(NodePath *param0) {
    ((*param0).clear_compass)();
}


bool
NodePath_C_has_compass_B_p(NodePath const *param0) {
    return ((*param0).has_compass)();
}


void
NodePath_C_set_transparency_v_ppi(NodePath *param0, TransparencyAttrib::Mode param1, int param2) {
    ((*param0).set_transparency)(param1, param2);
}


void
NodePath_C_set_transparency_v_pp(NodePath *param0, TransparencyAttrib::Mode param1) {
    ((*param0).set_transparency)(param1);
}


void
NodePath_C_clear_transparency_v_p(NodePath *param0) {
    ((*param0).clear_transparency)();
}


bool
NodePath_C_has_transparency_B_p(NodePath const *param0) {
    return ((*param0).has_transparency)();
}


TransparencyAttrib::Mode
NodePath_C_get_transparency_p_p(NodePath const *param0) {
    return ((*param0).get_transparency)();
}


void
NodePath_C_set_logic_op_v_ppi(NodePath *param0, LogicOpAttrib::Operation param1, int param2) {
    ((*param0).set_logic_op)(param1, param2);
}


void
NodePath_C_set_logic_op_v_pp(NodePath *param0, LogicOpAttrib::Operation param1) {
    ((*param0).set_logic_op)(param1);
}


void
NodePath_C_clear_logic_op_v_p(NodePath *param0) {
    ((*param0).clear_logic_op)();
}


bool
NodePath_C_has_logic_op_B_p(NodePath const *param0) {
    return ((*param0).has_logic_op)();
}


LogicOpAttrib::Operation
NodePath_C_get_logic_op_p_p(NodePath const *param0) {
    return ((*param0).get_logic_op)();
}


void
NodePath_C_set_antialias_v_pHi(NodePath *param0, unsigned short int param1, int param2) {
    ((*param0).set_antialias)(param1, param2);
}


void
NodePath_C_set_antialias_v_pH(NodePath *param0, unsigned short int param1) {
    ((*param0).set_antialias)(param1);
}


void
NodePath_C_clear_antialias_v_p(NodePath *param0) {
    ((*param0).clear_antialias)();
}


bool
NodePath_C_has_antialias_B_p(NodePath const *param0) {
    return ((*param0).has_antialias)();
}


unsigned short int
NodePath_C_get_antialias_H_p(NodePath const *param0) {
    return ((*param0).get_antialias)();
}


bool
NodePath_C_has_audio_volume_B_p(NodePath const *param0) {
    return ((*param0).has_audio_volume)();
}


void
NodePath_C_clear_audio_volume_v_p(NodePath *param0) {
    ((*param0).clear_audio_volume)();
}


void
NodePath_C_set_audio_volume_v_pfi(NodePath *param0, PN_stdfloat param1, int param2) {
    ((*param0).set_audio_volume)(param1, param2);
}


void
NodePath_C_set_audio_volume_v_pf(NodePath *param0, PN_stdfloat param1) {
    ((*param0).set_audio_volume)(param1);
}


void
NodePath_C_set_audio_volume_off_v_pi(NodePath *param0, int param1) {
    ((*param0).set_audio_volume_off)(param1);
}


void
NodePath_C_set_audio_volume_off_v_p(NodePath *param0) {
    ((*param0).set_audio_volume_off)();
}


PN_stdfloat
NodePath_C_get_audio_volume_f_p(NodePath const *param0) {
    return ((*param0).get_audio_volume)();
}


PN_stdfloat
NodePath_C_get_net_audio_volume_f_p(NodePath const *param0) {
    return ((*param0).get_net_audio_volume)();
}


void
NodePath_C_adjust_all_priorities_v_pi(NodePath *param0, int param1) {
    ((*param0).adjust_all_priorities)(param1);
}


void
NodePath_C_show_v_p(NodePath *param0) {
    ((*param0).show)();
}


void
NodePath_C_show_v_pp(NodePath *param0, DrawMask *param1) {
    ((*param0).show)(*param1);
}


void
NodePath_C_show_through_v_p(NodePath *param0) {
    ((*param0).show_through)();
}


void
NodePath_C_show_through_v_pp(NodePath *param0, DrawMask *param1) {
    ((*param0).show_through)(*param1);
}


void
NodePath_C_hide_v_p(NodePath *param0) {
    ((*param0).hide)();
}


void
NodePath_C_hide_v_pp(NodePath *param0, DrawMask *param1) {
    ((*param0).hide)(*param1);
}


bool
NodePath_C_is_hidden_B_pp(NodePath const *param0, DrawMask *param1) {
    return ((*param0).is_hidden)(*param1);
}


bool
NodePath_C_is_hidden_B_p(NodePath const *param0) {
    return ((*param0).is_hidden)();
}


NodePath *
NodePath_C_get_hidden_ancestor_p_ppp(NodePath const *param0, DrawMask *param1, Thread *param2) {
    return new NodePath(((*param0).get_hidden_ancestor)(*param1, param2));
}


NodePath *
NodePath_C_get_hidden_ancestor_p_pp(NodePath const *param0, DrawMask *param1) {
    return new NodePath(((*param0).get_hidden_ancestor)(*param1));
}


NodePath *
NodePath_C_get_hidden_ancestor_p_p(NodePath const *param0) {
    return new NodePath(((*param0).get_hidden_ancestor)());
}


void
NodePath_C_stash_v_pip(NodePath *param0, int param1, Thread *param2) {
    ((*param0).stash)(param1, param2);
}


void
NodePath_C_stash_v_pi(NodePath *param0, int param1) {
    ((*param0).stash)(param1);
}


void
NodePath_C_stash_v_p(NodePath *param0) {
    ((*param0).stash)();
}


void
NodePath_C_unstash_v_pip(NodePath *param0, int param1, Thread *param2) {
    ((*param0).unstash)(param1, param2);
}


void
NodePath_C_unstash_v_pi(NodePath *param0, int param1) {
    ((*param0).unstash)(param1);
}


void
NodePath_C_unstash_v_p(NodePath *param0) {
    ((*param0).unstash)();
}


void
NodePath_C_unstash_all_v_pp(NodePath *param0, Thread *param1) {
    ((*param0).unstash_all)(param1);
}


void
NodePath_C_unstash_all_v_p(NodePath *param0) {
    ((*param0).unstash_all)();
}


bool
NodePath_C_is_stashed_B_p(NodePath const *param0) {
    return ((*param0).is_stashed)();
}


NodePath *
NodePath_C_get_stashed_ancestor_p_pp(NodePath const *param0, Thread *param1) {
    return new NodePath(((*param0).get_stashed_ancestor)(param1));
}


NodePath *
NodePath_C_get_stashed_ancestor_p_p(NodePath const *param0) {
    return new NodePath(((*param0).get_stashed_ancestor)());
}


CollideMask *
NodePath_C_get_collide_mask_p_p(NodePath const *param0) {
    return new CollideMask(((*param0).get_collide_mask)());
}


void
NodePath_C_set_collide_mask_v_pppi(NodePath *param0, CollideMask *param1, CollideMask *param2, int param3) {
    ((*param0).set_collide_mask)(*param1, *param2, TypeHandle::from_index(param3));
}


void
NodePath_C_set_collide_mask_v_ppp(NodePath *param0, CollideMask *param1, CollideMask *param2) {
    ((*param0).set_collide_mask)(*param1, *param2);
}


void
NodePath_C_set_collide_mask_v_pp(NodePath *param0, CollideMask *param1) {
    ((*param0).set_collide_mask)(*param1);
}


int
NodePath_C_compare_to_i_pp(NodePath const *param0, NodePath const *param1) {
    return ((*param0).compare_to)(*param1);
}


int
NodePath_C_compare_to_i_pp_1_i_pp(NodePath const *param0, WeakNodePath const *param1) {
    return ((*param0).compare_to)(*param1);
}


bool
NodePath_C_verify_complete_B_pp(NodePath const *param0, Thread *param1) {
    return ((*param0).verify_complete)(param1);
}


bool
NodePath_C_verify_complete_B_p(NodePath const *param0) {
    return ((*param0).verify_complete)();
}


void
NodePath_C_premunge_scene_v_pp(NodePath *param0, GraphicsStateGuardianBase *param1) {
    ((*param0).premunge_scene)(param1);
}


void
NodePath_C_premunge_scene_v_p(NodePath *param0) {
    ((*param0).premunge_scene)();
}


void
NodePath_C_prepare_scene_v_pp(NodePath *param0, GraphicsStateGuardianBase *param1) {
    ((*param0).prepare_scene)(param1);
}


void
NodePath_C_show_bounds_v_p(NodePath *param0) {
    ((*param0).show_bounds)();
}


void
NodePath_C_show_tight_bounds_v_p(NodePath *param0) {
    ((*param0).show_tight_bounds)();
}


void
NodePath_C_hide_bounds_v_p(NodePath *param0) {
    ((*param0).hide_bounds)();
}


PointerTo< BoundingVolume > *
NodePath_C_get_bounds_p_pp(NodePath const *param0, Thread *param1) {
    return new PointerTo< BoundingVolume >(((*param0).get_bounds)(param1));
}


PointerTo< BoundingVolume > *
NodePath_C_get_bounds_p_p(NodePath const *param0) {
    return new PointerTo< BoundingVolume >(((*param0).get_bounds)());
}


void
NodePath_C_force_recompute_bounds_v_p(NodePath *param0) {
    ((*param0).force_recompute_bounds)();
}


void
NodePath_C_write_bounds_v_pp(NodePath const *param0, std::ostream *param1) {
    ((*param0).write_bounds)(*param1);
}


bool
NodePath_C_calc_tight_bounds_B_ppppp(NodePath const *param0, LPoint3 *param1, LPoint3 *param2, NodePath const *param3, Thread *param4) {
    return ((*param0).calc_tight_bounds)(*param1, *param2, *param3, param4);
}


bool
NodePath_C_calc_tight_bounds_B_pppp(NodePath const *param0, LPoint3 *param1, LPoint3 *param2, NodePath const *param3) {
    return ((*param0).calc_tight_bounds)(*param1, *param2, *param3);
}


bool
NodePath_C_calc_tight_bounds_B_ppp(NodePath const *param0, LPoint3 *param1, LPoint3 *param2) {
    return ((*param0).calc_tight_bounds)(*param1, *param2);
}


int
NodePath_C_flatten_light_i_p(NodePath *param0) {
    return ((*param0).flatten_light)();
}


int
NodePath_C_flatten_medium_i_p(NodePath *param0) {
    return ((*param0).flatten_medium)();
}


int
NodePath_C_flatten_strong_i_p(NodePath *param0) {
    return ((*param0).flatten_strong)();
}


void
NodePath_C_apply_texture_colors_v_p(NodePath *param0) {
    ((*param0).apply_texture_colors)();
}


int
NodePath_C_clear_model_nodes_i_p(NodePath *param0) {
    return ((*param0).clear_model_nodes)();
}


void
NodePath_C_set_tag_v_pss(NodePath *param0, char const *param1, char const *param2) {
    ((*param0).set_tag)(std::string(param1), std::string(param2));
}


char const *
NodePath_C_get_tag_s_ps(NodePath const *param0, char const *param1) {
    static std::string string_holder = ((*param0).get_tag)(std::string(param1));
    return string_holder.c_str();
}


void
NodePath_C_get_tag_keys_v_pp(NodePath const *param0, vector_string *param1) {
    ((*param0).get_tag_keys)(*param1);
}


bool
NodePath_C_has_tag_B_ps(NodePath const *param0, char const *param1) {
    return ((*param0).has_tag)(std::string(param1));
}


void
NodePath_C_clear_tag_v_ps(NodePath *param0, char const *param1) {
    ((*param0).clear_tag)(std::string(param1));
}


char const *
NodePath_C_get_net_tag_s_ps(NodePath const *param0, char const *param1) {
    static std::string string_holder = ((*param0).get_net_tag)(std::string(param1));
    return string_holder.c_str();
}


bool
NodePath_C_has_net_tag_B_ps(NodePath const *param0, char const *param1) {
    return ((*param0).has_net_tag)(std::string(param1));
}


NodePath *
NodePath_C_find_net_tag_p_ps(NodePath const *param0, char const *param1) {
    return new NodePath(((*param0).find_net_tag)(std::string(param1)));
}


void
NodePath_C_list_tags_v_p(NodePath const *param0) {
    ((*param0).list_tags)();
}


void
NodePath_C_set_name_v_ps(NodePath *param0, char const *param1) {
    ((*param0).set_name)(std::string(param1));
}


char const *
NodePath_C_get_name_s_p(NodePath const *param0) {
    static std::string string_holder = ((*param0).get_name)();
    return string_holder.c_str();
}


bool
NodePath_C_write_bam_file_B_pp(NodePath const *param0, Filename const *param1) {
    return ((*param0).write_bam_file)(*param1);
}


bool
NodePath_C_write_bam_stream_B_pp(NodePath const *param0, std::ostream *param1) {
    return ((*param0).write_bam_stream)(*param1);
}


vector_uchar
NodePath_C_encode_to_bam_stream_p_p(NodePath const *param0) {
    return ((*param0).encode_to_bam_stream)();
}


bool
NodePath_C_encode_to_bam_stream_B_ppp(NodePath const *param0, vector_uchar *param1, BamWriter *param2) {
    return ((*param0).encode_to_bam_stream)(*param1, param2);
}


bool
NodePath_C_encode_to_bam_stream_B_pp(NodePath const *param0, vector_uchar *param1) {
    return ((*param0).encode_to_bam_stream)(*param1);
}


NodePath *
NodePath_C_decode_from_bam_stream_p_pp(vector_uchar param0, BamReader *param1) {
    return new NodePath((NodePath::decode_from_bam_stream)(param0, param1));
}


NodePath *
NodePath_C_decode_from_bam_stream_p_p(vector_uchar param0) {
    return new NodePath((NodePath::decode_from_bam_stream)(param0));
}


void
NodePath_C_write_datagram_v_ppp(NodePath const *param0, BamWriter *param1, Datagram *param2) {
    ((*param0).write_datagram)(param1, *param2);
}


void
NodePath_C_fillin_v_ppp(NodePath *param0, DatagramIterator *param1, BamReader *param2) {
    ((*param0).fillin)(*param1, param2);
}


int
NodePath_C_get_class_type_i_v() {
    return ((NodePath::get_class_type)()).get_index();
}


void
NodePath_C_init_type_v_v() {
    (NodePath::init_type)();
}


CActor *
NodePath_C_downcast_to_CActor_p_p(NodePath *param0) {
    return (CActor *)param0;
}


// NodePathCollection


NodePathCollection *
NodePathCollection_C_ctor_p_v() {
    return new NodePathCollection();
}


NodePathCollection *
NodePathCollection_C_ctor_p_p(NodePathCollection const *param0) {
    return new NodePathCollection(*param0);
}


void
NodePathCollection_C_add_path_v_pp(NodePathCollection *param0, NodePath const *param1) {
    ((*param0).add_path)(*param1);
}


bool
NodePathCollection_C_remove_path_B_pp(NodePathCollection *param0, NodePath const *param1) {
    return ((*param0).remove_path)(*param1);
}


void
NodePathCollection_C_add_paths_from_v_pp(NodePathCollection *param0, NodePathCollection const *param1) {
    ((*param0).add_paths_from)(*param1);
}


void
NodePathCollection_C_remove_paths_from_v_pp(NodePathCollection *param0, NodePathCollection const *param1) {
    ((*param0).remove_paths_from)(*param1);
}


void
NodePathCollection_C_remove_duplicate_paths_v_p(NodePathCollection *param0) {
    ((*param0).remove_duplicate_paths)();
}


bool
NodePathCollection_C_has_path_B_pp(NodePathCollection const *param0, NodePath const *param1) {
    return ((*param0).has_path)(*param1);
}


void
NodePathCollection_C_clear_v_p(NodePathCollection *param0) {
    ((*param0).clear)();
}


void
NodePathCollection_C_reserve_v_pl(NodePathCollection *param0, std::size_t param1) {
    ((*param0).reserve)(param1);
}


bool
NodePathCollection_C_is_empty_B_p(NodePathCollection const *param0) {
    return ((*param0).is_empty)();
}


int
NodePathCollection_C_get_num_paths_i_p(NodePathCollection const *param0) {
    return ((*param0).get_num_paths)();
}


NodePath *
NodePathCollection_C_get_path_p_pi(NodePathCollection const *param0, int param1) {
    return new NodePath(((*param0).get_path)(param1));
}


std::size_t
NodePathCollection_C_size_l_p(NodePathCollection const *param0) {
    return ((*param0).size)();
}


void
NodePathCollection_C_append_v_pp(NodePathCollection *param0, NodePath const *param1) {
    ((*param0).append)(*param1);
}


void
NodePathCollection_C_extend_v_pp(NodePathCollection *param0, NodePathCollection const *param1) {
    ((*param0).extend)(*param1);
}


void
NodePathCollection_C_ls_v_p(NodePathCollection const *param0) {
    ((*param0).ls)();
}


void
NodePathCollection_C_ls_v_ppi(NodePathCollection const *param0, std::ostream *param1, int param2) {
    ((*param0).ls)(*param1, param2);
}


void
NodePathCollection_C_ls_v_pp(NodePathCollection const *param0, std::ostream *param1) {
    ((*param0).ls)(*param1);
}


NodePathCollection *
NodePathCollection_C_find_all_matches_p_ps(NodePathCollection const *param0, char const *param1) {
    return new NodePathCollection(((*param0).find_all_matches)(std::string(param1)));
}


void
NodePathCollection_C_reparent_to_v_pp(NodePathCollection *param0, NodePath const *param1) {
    ((*param0).reparent_to)(*param1);
}


void
NodePathCollection_C_wrt_reparent_to_v_pp(NodePathCollection *param0, NodePath const *param1) {
    ((*param0).wrt_reparent_to)(*param1);
}


void
NodePathCollection_C_show_v_p(NodePathCollection *param0) {
    ((*param0).show)();
}


void
NodePathCollection_C_hide_v_p(NodePathCollection *param0) {
    ((*param0).hide)();
}


void
NodePathCollection_C_stash_v_p(NodePathCollection *param0) {
    ((*param0).stash)();
}


void
NodePathCollection_C_unstash_v_p(NodePathCollection *param0) {
    ((*param0).unstash)();
}


void
NodePathCollection_C_detach_v_p(NodePathCollection *param0) {
    ((*param0).detach)();
}


CollideMask *
NodePathCollection_C_get_collide_mask_p_p(NodePathCollection const *param0) {
    return new CollideMask(((*param0).get_collide_mask)());
}


void
NodePathCollection_C_set_collide_mask_v_pppi(NodePathCollection *param0, CollideMask *param1, CollideMask *param2, int param3) {
    ((*param0).set_collide_mask)(*param1, *param2, TypeHandle::from_index(param3));
}


void
NodePathCollection_C_set_collide_mask_v_ppp(NodePathCollection *param0, CollideMask *param1, CollideMask *param2) {
    ((*param0).set_collide_mask)(*param1, *param2);
}


void
NodePathCollection_C_set_collide_mask_v_pp(NodePathCollection *param0, CollideMask *param1) {
    ((*param0).set_collide_mask)(*param1);
}


bool
NodePathCollection_C_calc_tight_bounds_B_ppp(NodePathCollection const *param0, LPoint3 *param1, LPoint3 *param2) {
    return ((*param0).calc_tight_bounds)(*param1, *param2);
}


void
NodePathCollection_C_set_texture_v_ppi(NodePathCollection *param0, Texture *param1, int param2) {
    ((*param0).set_texture)(param1, param2);
}


void
NodePathCollection_C_set_texture_v_pp(NodePathCollection *param0, Texture *param1) {
    ((*param0).set_texture)(param1);
}


void
NodePathCollection_C_set_texture_v_pppi(NodePathCollection *param0, TextureStage *param1, Texture *param2, int param3) {
    ((*param0).set_texture)(param1, param2, param3);
}


void
NodePathCollection_C_set_texture_v_ppp(NodePathCollection *param0, TextureStage *param1, Texture *param2) {
    ((*param0).set_texture)(param1, param2);
}


void
NodePathCollection_C_set_texture_off_v_ppi(NodePathCollection *param0, TextureStage *param1, int param2) {
    ((*param0).set_texture_off)(param1, param2);
}


void
NodePathCollection_C_set_texture_off_v_pp(NodePathCollection *param0, TextureStage *param1) {
    ((*param0).set_texture_off)(param1);
}


void
NodePathCollection_C_set_texture_off_v_pi(NodePathCollection *param0, int param1) {
    ((*param0).set_texture_off)(param1);
}


void
NodePathCollection_C_set_texture_off_v_p(NodePathCollection *param0) {
    ((*param0).set_texture_off)();
}


void
NodePathCollection_C_set_color_v_ppi(NodePathCollection *param0, LColor const *param1, int param2) {
    ((*param0).set_color)(*param1, param2);
}


void
NodePathCollection_C_set_color_v_pp(NodePathCollection *param0, LColor const *param1) {
    ((*param0).set_color)(*param1);
}


void
NodePathCollection_C_set_color_v_pffffi(NodePathCollection *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, int param5) {
    ((*param0).set_color)(param1, param2, param3, param4, param5);
}


void
NodePathCollection_C_set_color_v_pffff(NodePathCollection *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    ((*param0).set_color)(param1, param2, param3, param4);
}


void
NodePathCollection_C_set_color_v_pfff(NodePathCollection *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3) {
    ((*param0).set_color)(param1, param2, param3);
}


void
NodePathCollection_C_set_color_scale_v_ppi(NodePathCollection *param0, LVecBase4 const *param1, int param2) {
    ((*param0).set_color_scale)(*param1, param2);
}


void
NodePathCollection_C_set_color_scale_v_pp(NodePathCollection *param0, LVecBase4 const *param1) {
    ((*param0).set_color_scale)(*param1);
}


void
NodePathCollection_C_set_color_scale_v_pffffi(NodePathCollection *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, int param5) {
    ((*param0).set_color_scale)(param1, param2, param3, param4, param5);
}


void
NodePathCollection_C_set_color_scale_v_pffff(NodePathCollection *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    ((*param0).set_color_scale)(param1, param2, param3, param4);
}


void
NodePathCollection_C_set_color_scale_v_pfff(NodePathCollection *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3) {
    ((*param0).set_color_scale)(param1, param2, param3);
}


void
NodePathCollection_C_compose_color_scale_v_ppi(NodePathCollection *param0, LVecBase4 const *param1, int param2) {
    ((*param0).compose_color_scale)(*param1, param2);
}


void
NodePathCollection_C_compose_color_scale_v_pp(NodePathCollection *param0, LVecBase4 const *param1) {
    ((*param0).compose_color_scale)(*param1);
}


void
NodePathCollection_C_compose_color_scale_v_pffffi(NodePathCollection *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, int param5) {
    ((*param0).compose_color_scale)(param1, param2, param3, param4, param5);
}


void
NodePathCollection_C_compose_color_scale_v_pffff(NodePathCollection *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    ((*param0).compose_color_scale)(param1, param2, param3, param4);
}


void
NodePathCollection_C_compose_color_scale_v_pfff(NodePathCollection *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3) {
    ((*param0).compose_color_scale)(param1, param2, param3);
}


void
NodePathCollection_C_set_attrib_v_ppi(NodePathCollection *param0, RenderAttrib const *param1, int param2) {
    ((*param0).set_attrib)(param1, param2);
}


void
NodePathCollection_C_set_attrib_v_pp(NodePathCollection *param0, RenderAttrib const *param1) {
    ((*param0).set_attrib)(param1);
}


void
NodePathCollection_C_output_v_pp(NodePathCollection const *param0, std::ostream *param1) {
    ((*param0).output)(*param1);
}


void
NodePathCollection_C_write_v_ppi(NodePathCollection const *param0, std::ostream *param1, int param2) {
    ((*param0).write)(*param1, param2);
}


void
NodePathCollection_C_write_v_pp(NodePathCollection const *param0, std::ostream *param1) {
    ((*param0).write)(*param1);
}


// PandaFramework


PandaFramework *
PandaFramework_C_ctor_p_v() {
    return new PandaFramework();
}


PandaFramework *
PandaFramework_C_ctor_p_p(PandaFramework const *param0) {
    return new PandaFramework(*param0);
}


void
PandaFramework_C_open_framework_v_p(PandaFramework *param0) {
    ((*param0).open_framework)();
}


void
PandaFramework_C_close_framework_v_p(PandaFramework *param0) {
    ((*param0).close_framework)();
}


GraphicsPipe *
PandaFramework_C_get_default_pipe_p_p(PandaFramework *param0) {
    return ((*param0).get_default_pipe)();
}


GraphicsEngine *
PandaFramework_C_get_graphics_engine_p_p(PandaFramework *param0) {
    return ((*param0).get_graphics_engine)();
}


NodePath const *
PandaFramework_C_get_data_root_p_p(PandaFramework const *param0) {
    return &(((*param0).get_data_root)());
}


EventHandler *
PandaFramework_C_get_event_handler_p_p(PandaFramework *param0) {
    return &(((*param0).get_event_handler)());
}


AsyncTaskManager *
PandaFramework_C_get_task_mgr_p_p(PandaFramework *param0) {
    return &(((*param0).get_task_mgr)());
}


NodePath *
PandaFramework_C_get_mouse_p_pp(PandaFramework *param0, GraphicsOutput *param1) {
    return new NodePath(((*param0).get_mouse)(param1));
}


void
PandaFramework_C_remove_mouse_v_pp(PandaFramework *param0, GraphicsOutput const *param1) {
    ((*param0).remove_mouse)(param1);
}


void
PandaFramework_C_set_window_title_v_ps(PandaFramework *param0, char const *param1) {
    ((*param0).set_window_title)(std::string(param1));
}


void
PandaFramework_C_get_default_window_props_v_pp(PandaFramework *param0, WindowProperties *param1) {
    ((*param0).get_default_window_props)(*param1);
}


WindowFramework *
PandaFramework_C_open_window_p_p(PandaFramework *param0) {
    return ((*param0).open_window)();
}


WindowFramework *
PandaFramework_C_open_window_p_ppp(PandaFramework *param0, GraphicsPipe *param1, GraphicsStateGuardian *param2) {
    return ((*param0).open_window)(param1, param2);
}


WindowFramework *
PandaFramework_C_open_window_p_pp(PandaFramework *param0, GraphicsPipe *param1) {
    return ((*param0).open_window)(param1);
}


WindowFramework *
PandaFramework_C_open_window_p_ppipp(PandaFramework *param0, WindowProperties const *param1, int param2, GraphicsPipe *param3, GraphicsStateGuardian *param4) {
    return ((*param0).open_window)(*param1, param2, param3, param4);
}


WindowFramework *
PandaFramework_C_open_window_p_ppip(PandaFramework *param0, WindowProperties const *param1, int param2, GraphicsPipe *param3) {
    return ((*param0).open_window)(*param1, param2, param3);
}


WindowFramework *
PandaFramework_C_open_window_p_ppi(PandaFramework *param0, WindowProperties const *param1, int param2) {
    return ((*param0).open_window)(*param1, param2);
}


int
PandaFramework_C_get_num_windows_i_p(PandaFramework const *param0) {
    return ((*param0).get_num_windows)();
}


WindowFramework *
PandaFramework_C_get_window_p_pi(PandaFramework const *param0, int param1) {
    return ((*param0).get_window)(param1);
}


int
PandaFramework_C_find_window_i_pp(PandaFramework const *param0, GraphicsOutput const *param1) {
    return ((*param0).find_window)(param1);
}


int
PandaFramework_C_find_window_i_pp_1_i_pp(PandaFramework const *param0, WindowFramework const *param1) {
    return ((*param0).find_window)(param1);
}


void
PandaFramework_C_close_window_v_pp(PandaFramework *param0, WindowFramework *param1) {
    ((*param0).close_window)(param1);
}


void
PandaFramework_C_close_window_v_pi(PandaFramework *param0, int param1) {
    ((*param0).close_window)(param1);
}


void
PandaFramework_C_close_all_windows_v_p(PandaFramework *param0) {
    ((*param0).close_all_windows)();
}


bool
PandaFramework_C_all_windows_closed_B_p(PandaFramework const *param0) {
    return ((*param0).all_windows_closed)();
}


NodePath *
PandaFramework_C_get_models_p_p(PandaFramework *param0) {
    return &(((*param0).get_models)());
}


void
PandaFramework_C_report_frame_rate_v_pp(PandaFramework const *param0, std::ostream *param1) {
    ((*param0).report_frame_rate)(*param1);
}


void
PandaFramework_C_reset_frame_rate_v_p(PandaFramework *param0) {
    ((*param0).reset_frame_rate)();
}


void
PandaFramework_C_set_wireframe_v_pB(PandaFramework *param0, bool param1) {
    ((*param0).set_wireframe)(param1);
}


void
PandaFramework_C_set_texture_v_pB(PandaFramework *param0, bool param1) {
    ((*param0).set_texture)(param1);
}


void
PandaFramework_C_set_two_sided_v_pB(PandaFramework *param0, bool param1) {
    ((*param0).set_two_sided)(param1);
}


void
PandaFramework_C_set_lighting_v_pB(PandaFramework *param0, bool param1) {
    ((*param0).set_lighting)(param1);
}


void
PandaFramework_C_set_perpixel_v_pB(PandaFramework *param0, bool param1) {
    ((*param0).set_perpixel)(param1);
}


void
PandaFramework_C_set_background_type_v_pp(PandaFramework *param0, WindowFramework::BackgroundType param1) {
    ((*param0).set_background_type)(param1);
}


bool
PandaFramework_C_get_wireframe_B_p(PandaFramework const *param0) {
    return ((*param0).get_wireframe)();
}


bool
PandaFramework_C_get_texture_B_p(PandaFramework const *param0) {
    return ((*param0).get_texture)();
}


bool
PandaFramework_C_get_two_sided_B_p(PandaFramework const *param0) {
    return ((*param0).get_two_sided)();
}


bool
PandaFramework_C_get_lighting_B_p(PandaFramework const *param0) {
    return ((*param0).get_lighting)();
}


bool
PandaFramework_C_get_perpixel_B_p(PandaFramework const *param0) {
    return ((*param0).get_perpixel)();
}


WindowFramework::BackgroundType
PandaFramework_C_get_background_type_p_p(PandaFramework const *param0) {
    return ((*param0).get_background_type)();
}


int
PandaFramework_C_hide_collision_solids_i_p(NodePath *param0) {
    return (PandaFramework::hide_collision_solids)(*param0);
}


int
PandaFramework_C_show_collision_solids_i_p(NodePath *param0) {
    return (PandaFramework::show_collision_solids)(*param0);
}


void
PandaFramework_C_set_highlight_v_pp(PandaFramework *param0, NodePath const *param1) {
    ((*param0).set_highlight)(*param1);
}


void
PandaFramework_C_clear_highlight_v_p(PandaFramework *param0) {
    ((*param0).clear_highlight)();
}


bool
PandaFramework_C_has_highlight_B_p(PandaFramework const *param0) {
    return ((*param0).has_highlight)();
}


NodePath const *
PandaFramework_C_get_highlight_p_p(PandaFramework const *param0) {
    return &(((*param0).get_highlight)());
}


RecorderController *
PandaFramework_C_get_recorder_p_p(PandaFramework const *param0) {
    return ((*param0).get_recorder)();
}


void
PandaFramework_C_set_recorder_v_pp(PandaFramework *param0, RecorderController *param1) {
    ((*param0).set_recorder)(param1);
}


void
PandaFramework_C_enable_default_keys_v_p(PandaFramework *param0) {
    ((*param0).enable_default_keys)();
}


bool
PandaFramework_C_do_frame_B_pp(PandaFramework *param0, Thread *param1) {
    return ((*param0).do_frame)(param1);
}


void
PandaFramework_C_main_loop_v_p(PandaFramework *param0) {
    ((*param0).main_loop)();
}


void
PandaFramework_C_set_exit_flag_v_p(PandaFramework *param0) {
    ((*param0).set_exit_flag)();
}


void
PandaFramework_C_clear_exit_flag_v_p(PandaFramework *param0) {
    ((*param0).clear_exit_flag)();
}


// PandaNode


TypedWritableReferenceCount *
PandaNode_C_upcast_to_TypedWritableReferenceCount_p_p(PandaNode *param0) {
    return (TypedWritableReferenceCount *)param0;
}


Namable *
PandaNode_C_upcast_to_Namable_p_p(PandaNode *param0) {
    return (Namable *)param0;
}


LinkedListNode *
PandaNode_C_upcast_to_LinkedListNode_p_p(PandaNode *param0) {
    return (LinkedListNode *)param0;
}


PandaNode *
PandaNode_C_ctor_p_s(char const *param0) {
    return new PandaNode(std::string(param0));
}


PandaNode *
PandaNode_C_combine_with_p_pp(PandaNode *param0, PandaNode *param1) {
    return ((*param0).combine_with)(param1);
}


PandaNode *
PandaNode_C_dupe_for_flatten_p_p(PandaNode const *param0) {
    return ((*param0).dupe_for_flatten)();
}


bool
PandaNode_C_safe_to_flatten_B_p(PandaNode const *param0) {
    return ((*param0).safe_to_flatten)();
}


bool
PandaNode_C_safe_to_transform_B_p(PandaNode const *param0) {
    return ((*param0).safe_to_transform)();
}


bool
PandaNode_C_safe_to_modify_transform_B_p(PandaNode const *param0) {
    return ((*param0).safe_to_modify_transform)();
}


bool
PandaNode_C_safe_to_combine_B_p(PandaNode const *param0) {
    return ((*param0).safe_to_combine)();
}


bool
PandaNode_C_safe_to_combine_children_B_p(PandaNode const *param0) {
    return ((*param0).safe_to_combine_children)();
}


bool
PandaNode_C_safe_to_flatten_below_B_p(PandaNode const *param0) {
    return ((*param0).safe_to_flatten_below)();
}


bool
PandaNode_C_preserve_name_B_p(PandaNode const *param0) {
    return ((*param0).preserve_name)();
}


int
PandaNode_C_get_unsafe_to_apply_attribs_i_p(PandaNode const *param0) {
    return ((*param0).get_unsafe_to_apply_attribs)();
}


void
PandaNode_C_apply_attribs_to_vertices_v_ppip(PandaNode *param0, AccumulatedAttribs const *param1, int param2, GeomTransformer *param3) {
    ((*param0).apply_attribs_to_vertices)(*param1, param2, *param3);
}


void
PandaNode_C_xform_v_pp(PandaNode *param0, LMatrix4 const *param1) {
    ((*param0).xform)(*param1);
}


bool
PandaNode_C_cull_callback_B_ppp(PandaNode *param0, CullTraverser *param1, CullTraverserData *param2) {
    return ((*param0).cull_callback)(param1, *param2);
}


bool
PandaNode_C_has_selective_visibility_B_p(PandaNode const *param0) {
    return ((*param0).has_selective_visibility)();
}


int
PandaNode_C_get_first_visible_child_i_p(PandaNode const *param0) {
    return ((*param0).get_first_visible_child)();
}


int
PandaNode_C_get_next_visible_child_i_pi(PandaNode const *param0, int param1) {
    return ((*param0).get_next_visible_child)(param1);
}


bool
PandaNode_C_has_single_child_visibility_B_p(PandaNode const *param0) {
    return ((*param0).has_single_child_visibility)();
}


int
PandaNode_C_get_visible_child_i_p(PandaNode const *param0) {
    return ((*param0).get_visible_child)();
}


bool
PandaNode_C_is_renderable_B_p(PandaNode const *param0) {
    return ((*param0).is_renderable)();
}


void
PandaNode_C_add_for_draw_v_ppp(PandaNode *param0, CullTraverser *param1, CullTraverserData *param2) {
    ((*param0).add_for_draw)(param1, *param2);
}


PandaNode *
PandaNode_C_make_copy_p_p(PandaNode const *param0) {
    return ((*param0).make_copy)();
}


PointerTo< PandaNode > *
PandaNode_C_copy_subgraph_p_pp(PandaNode const *param0, Thread *param1) {
    return new PointerTo< PandaNode >(((*param0).copy_subgraph)(param1));
}


PointerTo< PandaNode > *
PandaNode_C_copy_subgraph_p_p(PandaNode const *param0) {
    return new PointerTo< PandaNode >(((*param0).copy_subgraph)());
}


int
PandaNode_C_get_num_parents_i_pp(PandaNode const *param0, Thread *param1) {
    return ((*param0).get_num_parents)(param1);
}


int
PandaNode_C_get_num_parents_i_p(PandaNode const *param0) {
    return ((*param0).get_num_parents)();
}


PandaNode *
PandaNode_C_get_parent_p_pip(PandaNode const *param0, int param1, Thread *param2) {
    return ((*param0).get_parent)(param1, param2);
}


PandaNode *
PandaNode_C_get_parent_p_pi(PandaNode const *param0, int param1) {
    return ((*param0).get_parent)(param1);
}


int
PandaNode_C_find_parent_i_ppp(PandaNode const *param0, PandaNode *param1, Thread *param2) {
    return ((*param0).find_parent)(param1, param2);
}


int
PandaNode_C_find_parent_i_pp(PandaNode const *param0, PandaNode *param1) {
    return ((*param0).find_parent)(param1);
}


int
PandaNode_C_get_num_children_i_pp(PandaNode const *param0, Thread *param1) {
    return ((*param0).get_num_children)(param1);
}


int
PandaNode_C_get_num_children_i_p(PandaNode const *param0) {
    return ((*param0).get_num_children)();
}


PandaNode *
PandaNode_C_get_child_p_pip(PandaNode const *param0, int param1, Thread *param2) {
    return ((*param0).get_child)(param1, param2);
}


PandaNode *
PandaNode_C_get_child_p_pi(PandaNode const *param0, int param1) {
    return ((*param0).get_child)(param1);
}


int
PandaNode_C_get_child_sort_i_pip(PandaNode const *param0, int param1, Thread *param2) {
    return ((*param0).get_child_sort)(param1, param2);
}


int
PandaNode_C_get_child_sort_i_pi(PandaNode const *param0, int param1) {
    return ((*param0).get_child_sort)(param1);
}


int
PandaNode_C_find_child_i_ppp(PandaNode const *param0, PandaNode *param1, Thread *param2) {
    return ((*param0).find_child)(param1, param2);
}


int
PandaNode_C_find_child_i_pp(PandaNode const *param0, PandaNode *param1) {
    return ((*param0).find_child)(param1);
}


int
PandaNode_C_count_num_descendants_i_p(PandaNode const *param0) {
    return ((*param0).count_num_descendants)();
}


void
PandaNode_C_add_child_v_ppip(PandaNode *param0, PandaNode *param1, int param2, Thread *param3) {
    ((*param0).add_child)(param1, param2, param3);
}


void
PandaNode_C_add_child_v_ppi(PandaNode *param0, PandaNode *param1, int param2) {
    ((*param0).add_child)(param1, param2);
}


void
PandaNode_C_add_child_v_pp(PandaNode *param0, PandaNode *param1) {
    ((*param0).add_child)(param1);
}


bool
PandaNode_C_remove_child_B_ppp(PandaNode *param0, PandaNode *param1, Thread *param2) {
    return ((*param0).remove_child)(param1, param2);
}


bool
PandaNode_C_remove_child_B_pp(PandaNode *param0, PandaNode *param1) {
    return ((*param0).remove_child)(param1);
}


void
PandaNode_C_remove_child_v_pip(PandaNode *param0, int param1, Thread *param2) {
    ((*param0).remove_child)(param1, param2);
}


void
PandaNode_C_remove_child_v_pi(PandaNode *param0, int param1) {
    ((*param0).remove_child)(param1);
}


bool
PandaNode_C_replace_child_B_pppp(PandaNode *param0, PandaNode *param1, PandaNode *param2, Thread *param3) {
    return ((*param0).replace_child)(param1, param2, param3);
}


bool
PandaNode_C_replace_child_B_ppp(PandaNode *param0, PandaNode *param1, PandaNode *param2) {
    return ((*param0).replace_child)(param1, param2);
}


bool
PandaNode_C_stash_child_B_ppp(PandaNode *param0, PandaNode *param1, Thread *param2) {
    return ((*param0).stash_child)(param1, param2);
}


bool
PandaNode_C_stash_child_B_pp(PandaNode *param0, PandaNode *param1) {
    return ((*param0).stash_child)(param1);
}


void
PandaNode_C_stash_child_v_pip(PandaNode *param0, int param1, Thread *param2) {
    ((*param0).stash_child)(param1, param2);
}


void
PandaNode_C_stash_child_v_pi(PandaNode *param0, int param1) {
    ((*param0).stash_child)(param1);
}


bool
PandaNode_C_unstash_child_B_ppp(PandaNode *param0, PandaNode *param1, Thread *param2) {
    return ((*param0).unstash_child)(param1, param2);
}


bool
PandaNode_C_unstash_child_B_pp(PandaNode *param0, PandaNode *param1) {
    return ((*param0).unstash_child)(param1);
}


void
PandaNode_C_unstash_child_v_pip(PandaNode *param0, int param1, Thread *param2) {
    ((*param0).unstash_child)(param1, param2);
}


void
PandaNode_C_unstash_child_v_pi(PandaNode *param0, int param1) {
    ((*param0).unstash_child)(param1);
}


int
PandaNode_C_get_num_stashed_i_pp(PandaNode const *param0, Thread *param1) {
    return ((*param0).get_num_stashed)(param1);
}


int
PandaNode_C_get_num_stashed_i_p(PandaNode const *param0) {
    return ((*param0).get_num_stashed)();
}


PandaNode::Stashed *
PandaNode_C_get_stashed_p_pp(PandaNode const *param0, Thread *param1) {
    return new PandaNode::Stashed(((*param0).get_stashed)(param1));
}


PandaNode::Stashed *
PandaNode_C_get_stashed_p_p(PandaNode const *param0) {
    return new PandaNode::Stashed(((*param0).get_stashed)());
}


PandaNode *
PandaNode_C_get_stashed_p_pip(PandaNode const *param0, int param1, Thread *param2) {
    return ((*param0).get_stashed)(param1, param2);
}


PandaNode *
PandaNode_C_get_stashed_p_pi(PandaNode const *param0, int param1) {
    return ((*param0).get_stashed)(param1);
}


int
PandaNode_C_get_stashed_sort_i_pip(PandaNode const *param0, int param1, Thread *param2) {
    return ((*param0).get_stashed_sort)(param1, param2);
}


int
PandaNode_C_get_stashed_sort_i_pi(PandaNode const *param0, int param1) {
    return ((*param0).get_stashed_sort)(param1);
}


int
PandaNode_C_find_stashed_i_ppp(PandaNode const *param0, PandaNode *param1, Thread *param2) {
    return ((*param0).find_stashed)(param1, param2);
}


int
PandaNode_C_find_stashed_i_pp(PandaNode const *param0, PandaNode *param1) {
    return ((*param0).find_stashed)(param1);
}


void
PandaNode_C_add_stashed_v_ppip(PandaNode *param0, PandaNode *param1, int param2, Thread *param3) {
    ((*param0).add_stashed)(param1, param2, param3);
}


void
PandaNode_C_add_stashed_v_ppi(PandaNode *param0, PandaNode *param1, int param2) {
    ((*param0).add_stashed)(param1, param2);
}


void
PandaNode_C_add_stashed_v_pp(PandaNode *param0, PandaNode *param1) {
    ((*param0).add_stashed)(param1);
}


void
PandaNode_C_remove_stashed_v_pip(PandaNode *param0, int param1, Thread *param2) {
    ((*param0).remove_stashed)(param1, param2);
}


void
PandaNode_C_remove_stashed_v_pi(PandaNode *param0, int param1) {
    ((*param0).remove_stashed)(param1);
}


void
PandaNode_C_remove_all_children_v_pp(PandaNode *param0, Thread *param1) {
    ((*param0).remove_all_children)(param1);
}


void
PandaNode_C_remove_all_children_v_p(PandaNode *param0) {
    ((*param0).remove_all_children)();
}


void
PandaNode_C_steal_children_v_ppp(PandaNode *param0, PandaNode *param1, Thread *param2) {
    ((*param0).steal_children)(param1, param2);
}


void
PandaNode_C_steal_children_v_pp(PandaNode *param0, PandaNode *param1) {
    ((*param0).steal_children)(param1);
}


void
PandaNode_C_copy_children_v_ppp(PandaNode *param0, PandaNode *param1, Thread *param2) {
    ((*param0).copy_children)(param1, param2);
}


void
PandaNode_C_copy_children_v_pp(PandaNode *param0, PandaNode *param1) {
    ((*param0).copy_children)(param1);
}


void
PandaNode_C_set_attrib_v_ppi(PandaNode *param0, RenderAttrib const *param1, int param2) {
    ((*param0).set_attrib)(param1, param2);
}


void
PandaNode_C_set_attrib_v_pp(PandaNode *param0, RenderAttrib const *param1) {
    ((*param0).set_attrib)(param1);
}


ConstPointerTo< RenderAttrib > *
PandaNode_C_get_attrib_p_pi(PandaNode const *param0, int param1) {
    return new ConstPointerTo< RenderAttrib >(((*param0).get_attrib)(TypeHandle::from_index(param1)));
}


ConstPointerTo< RenderAttrib > *
PandaNode_C_get_attrib_p_pi_1_p_pi(PandaNode const *param0, int param1) {
    return new ConstPointerTo< RenderAttrib >(((*param0).get_attrib)(param1));
}


bool
PandaNode_C_has_attrib_B_pi(PandaNode const *param0, int param1) {
    return ((*param0).has_attrib)(TypeHandle::from_index(param1));
}


bool
PandaNode_C_has_attrib_B_pi_1_B_pi(PandaNode const *param0, int param1) {
    return ((*param0).has_attrib)(param1);
}


void
PandaNode_C_clear_attrib_v_pi(PandaNode *param0, int param1) {
    ((*param0).clear_attrib)(TypeHandle::from_index(param1));
}


void
PandaNode_C_clear_attrib_v_pi_1_v_pi(PandaNode *param0, int param1) {
    ((*param0).clear_attrib)(param1);
}


void
PandaNode_C_set_effect_v_pp(PandaNode *param0, RenderEffect const *param1) {
    ((*param0).set_effect)(param1);
}


ConstPointerTo< RenderEffect > *
PandaNode_C_get_effect_p_pi(PandaNode const *param0, int param1) {
    return new ConstPointerTo< RenderEffect >(((*param0).get_effect)(TypeHandle::from_index(param1)));
}


bool
PandaNode_C_has_effect_B_pi(PandaNode const *param0, int param1) {
    return ((*param0).has_effect)(TypeHandle::from_index(param1));
}


void
PandaNode_C_clear_effect_v_pi(PandaNode *param0, int param1) {
    ((*param0).clear_effect)(TypeHandle::from_index(param1));
}


void
PandaNode_C_set_state_v_ppp(PandaNode *param0, RenderState const *param1, Thread *param2) {
    ((*param0).set_state)(param1, param2);
}


void
PandaNode_C_set_state_v_pp(PandaNode *param0, RenderState const *param1) {
    ((*param0).set_state)(param1);
}


ConstPointerTo< RenderState > *
PandaNode_C_get_state_p_pp(PandaNode const *param0, Thread *param1) {
    return new ConstPointerTo< RenderState >(((*param0).get_state)(param1));
}


ConstPointerTo< RenderState > *
PandaNode_C_get_state_p_p(PandaNode const *param0) {
    return new ConstPointerTo< RenderState >(((*param0).get_state)());
}


void
PandaNode_C_clear_state_v_pp(PandaNode *param0, Thread *param1) {
    ((*param0).clear_state)(param1);
}


void
PandaNode_C_clear_state_v_p(PandaNode *param0) {
    ((*param0).clear_state)();
}


void
PandaNode_C_set_effects_v_ppp(PandaNode *param0, RenderEffects const *param1, Thread *param2) {
    ((*param0).set_effects)(param1, param2);
}


void
PandaNode_C_set_effects_v_pp(PandaNode *param0, RenderEffects const *param1) {
    ((*param0).set_effects)(param1);
}


ConstPointerTo< RenderEffects > *
PandaNode_C_get_effects_p_pp(PandaNode const *param0, Thread *param1) {
    return new ConstPointerTo< RenderEffects >(((*param0).get_effects)(param1));
}


ConstPointerTo< RenderEffects > *
PandaNode_C_get_effects_p_p(PandaNode const *param0) {
    return new ConstPointerTo< RenderEffects >(((*param0).get_effects)());
}


void
PandaNode_C_clear_effects_v_pp(PandaNode *param0, Thread *param1) {
    ((*param0).clear_effects)(param1);
}


void
PandaNode_C_clear_effects_v_p(PandaNode *param0) {
    ((*param0).clear_effects)();
}


void
PandaNode_C_set_transform_v_ppp(PandaNode *param0, TransformState const *param1, Thread *param2) {
    ((*param0).set_transform)(param1, param2);
}


void
PandaNode_C_set_transform_v_pp(PandaNode *param0, TransformState const *param1) {
    ((*param0).set_transform)(param1);
}


ConstPointerTo< TransformState > *
PandaNode_C_get_transform_p_pp(PandaNode const *param0, Thread *param1) {
    return new ConstPointerTo< TransformState >(((*param0).get_transform)(param1));
}


ConstPointerTo< TransformState > *
PandaNode_C_get_transform_p_p(PandaNode const *param0) {
    return new ConstPointerTo< TransformState >(((*param0).get_transform)());
}


void
PandaNode_C_clear_transform_v_pp(PandaNode *param0, Thread *param1) {
    ((*param0).clear_transform)(param1);
}


void
PandaNode_C_clear_transform_v_p(PandaNode *param0) {
    ((*param0).clear_transform)();
}


void
PandaNode_C_set_prev_transform_v_ppp(PandaNode *param0, TransformState const *param1, Thread *param2) {
    ((*param0).set_prev_transform)(param1, param2);
}


void
PandaNode_C_set_prev_transform_v_pp(PandaNode *param0, TransformState const *param1) {
    ((*param0).set_prev_transform)(param1);
}


ConstPointerTo< TransformState > *
PandaNode_C_get_prev_transform_p_pp(PandaNode const *param0, Thread *param1) {
    return new ConstPointerTo< TransformState >(((*param0).get_prev_transform)(param1));
}


ConstPointerTo< TransformState > *
PandaNode_C_get_prev_transform_p_p(PandaNode const *param0) {
    return new ConstPointerTo< TransformState >(((*param0).get_prev_transform)());
}


void
PandaNode_C_reset_prev_transform_v_pp(PandaNode *param0, Thread *param1) {
    ((*param0).reset_prev_transform)(param1);
}


void
PandaNode_C_reset_prev_transform_v_p(PandaNode *param0) {
    ((*param0).reset_prev_transform)();
}


bool
PandaNode_C_has_dirty_prev_transform_B_p(PandaNode const *param0) {
    return ((*param0).has_dirty_prev_transform)();
}


void
PandaNode_C_reset_all_prev_transform_v_p(Thread *param0) {
    (PandaNode::reset_all_prev_transform)(param0);
}


void
PandaNode_C_reset_all_prev_transform_v_v() {
    (PandaNode::reset_all_prev_transform)();
}


void
PandaNode_C_set_tag_v_pssp(PandaNode *param0, char const *param1, char const *param2, Thread *param3) {
    ((*param0).set_tag)(std::string(param1), std::string(param2), param3);
}


void
PandaNode_C_set_tag_v_pss(PandaNode *param0, char const *param1, char const *param2) {
    ((*param0).set_tag)(std::string(param1), std::string(param2));
}


char const *
PandaNode_C_get_tag_s_psp(PandaNode const *param0, char const *param1, Thread *param2) {
    static std::string string_holder = ((*param0).get_tag)(std::string(param1), param2);
    return string_holder.c_str();
}


char const *
PandaNode_C_get_tag_s_ps(PandaNode const *param0, char const *param1) {
    static std::string string_holder = ((*param0).get_tag)(std::string(param1));
    return string_holder.c_str();
}


bool
PandaNode_C_has_tag_B_psp(PandaNode const *param0, char const *param1, Thread *param2) {
    return ((*param0).has_tag)(std::string(param1), param2);
}


bool
PandaNode_C_has_tag_B_ps(PandaNode const *param0, char const *param1) {
    return ((*param0).has_tag)(std::string(param1));
}


void
PandaNode_C_clear_tag_v_psp(PandaNode *param0, char const *param1, Thread *param2) {
    ((*param0).clear_tag)(std::string(param1), param2);
}


void
PandaNode_C_clear_tag_v_ps(PandaNode *param0, char const *param1) {
    ((*param0).clear_tag)(std::string(param1));
}


void
PandaNode_C_get_tag_keys_v_pp(PandaNode const *param0, vector_string *param1) {
    ((*param0).get_tag_keys)(*param1);
}


std::size_t
PandaNode_C_get_num_tags_l_p(PandaNode const *param0) {
    return ((*param0).get_num_tags)();
}


char const *
PandaNode_C_get_tag_key_s_pl(PandaNode const *param0, std::size_t param1) {
    static std::string string_holder = ((*param0).get_tag_key)(param1);
    return string_holder.c_str();
}


bool
PandaNode_C_has_tags_B_p(PandaNode const *param0) {
    return ((*param0).has_tags)();
}


void
PandaNode_C_copy_tags_v_pp(PandaNode *param0, PandaNode *param1) {
    ((*param0).copy_tags)(param1);
}


void
PandaNode_C_list_tags_v_pps(PandaNode const *param0, std::ostream *param1, char const *param2) {
    ((*param0).list_tags)(*param1, std::string(param2));
}


void
PandaNode_C_list_tags_v_pp(PandaNode const *param0, std::ostream *param1) {
    ((*param0).list_tags)(*param1);
}


int
PandaNode_C_compare_tags_i_pp(PandaNode const *param0, PandaNode const *param1) {
    return ((*param0).compare_tags)(param1);
}


void
PandaNode_C_copy_all_properties_v_pp(PandaNode *param0, PandaNode *param1) {
    ((*param0).copy_all_properties)(param1);
}


void
PandaNode_C_replace_node_v_pp(PandaNode *param0, PandaNode *param1) {
    ((*param0).replace_node)(param1);
}


void
PandaNode_C_set_unexpected_change_v_pI(PandaNode *param0, unsigned int param1) {
    ((*param0).set_unexpected_change)(param1);
}


unsigned int
PandaNode_C_get_unexpected_change_I_pI(PandaNode const *param0, unsigned int param1) {
    return ((*param0).get_unexpected_change)(param1);
}


void
PandaNode_C_clear_unexpected_change_v_pI(PandaNode *param0, unsigned int param1) {
    ((*param0).clear_unexpected_change)(param1);
}


DrawMask *
PandaNode_C_get_overall_bit_p_v() {
    return new DrawMask((PandaNode::get_overall_bit)());
}


DrawMask *
PandaNode_C_get_all_camera_mask_p_v() {
    return new DrawMask((PandaNode::get_all_camera_mask)());
}


bool
PandaNode_C_is_overall_hidden_B_p(PandaNode const *param0) {
    return ((*param0).is_overall_hidden)();
}


void
PandaNode_C_set_overall_hidden_v_pB(PandaNode *param0, bool param1) {
    ((*param0).set_overall_hidden)(param1);
}


void
PandaNode_C_adjust_draw_mask_v_pppp(PandaNode *param0, DrawMask *param1, DrawMask *param2, DrawMask *param3) {
    ((*param0).adjust_draw_mask)(*param1, *param2, *param3);
}


DrawMask *
PandaNode_C_get_draw_control_mask_p_p(PandaNode const *param0) {
    return new DrawMask(((*param0).get_draw_control_mask)());
}


DrawMask *
PandaNode_C_get_draw_show_mask_p_p(PandaNode const *param0) {
    return new DrawMask(((*param0).get_draw_show_mask)());
}


DrawMask *
PandaNode_C_get_net_draw_control_mask_p_p(PandaNode const *param0) {
    return new DrawMask(((*param0).get_net_draw_control_mask)());
}


DrawMask *
PandaNode_C_get_net_draw_show_mask_p_p(PandaNode const *param0) {
    return new DrawMask(((*param0).get_net_draw_show_mask)());
}


void
PandaNode_C_set_into_collide_mask_v_pp(PandaNode *param0, CollideMask *param1) {
    ((*param0).set_into_collide_mask)(*param1);
}


CollideMask *
PandaNode_C_get_into_collide_mask_p_p(PandaNode const *param0) {
    return new CollideMask(((*param0).get_into_collide_mask)());
}


CollideMask *
PandaNode_C_get_legal_collide_mask_p_p(PandaNode const *param0) {
    return new CollideMask(((*param0).get_legal_collide_mask)());
}


CollideMask *
PandaNode_C_get_net_collide_mask_p_pp(PandaNode const *param0, Thread *param1) {
    return new CollideMask(((*param0).get_net_collide_mask)(param1));
}


CollideMask *
PandaNode_C_get_net_collide_mask_p_p(PandaNode const *param0) {
    return new CollideMask(((*param0).get_net_collide_mask)());
}


ConstPointerTo< RenderAttrib > *
PandaNode_C_get_off_clip_planes_p_pp(PandaNode const *param0, Thread *param1) {
    return new ConstPointerTo< RenderAttrib >(((*param0).get_off_clip_planes)(param1));
}


ConstPointerTo< RenderAttrib > *
PandaNode_C_get_off_clip_planes_p_p(PandaNode const *param0) {
    return new ConstPointerTo< RenderAttrib >(((*param0).get_off_clip_planes)());
}


void
PandaNode_C_prepare_scene_v_ppp(PandaNode *param0, GraphicsStateGuardianBase *param1, RenderState const *param2) {
    ((*param0).prepare_scene)(param1, param2);
}


bool
PandaNode_C_is_scene_root_B_p(PandaNode const *param0) {
    return ((*param0).is_scene_root)();
}


bool
PandaNode_C_is_under_scene_root_B_p(PandaNode const *param0) {
    return ((*param0).is_under_scene_root)();
}


void
PandaNode_C_output_v_pp(PandaNode const *param0, std::ostream *param1) {
    ((*param0).output)(*param1);
}


void
PandaNode_C_write_v_ppi(PandaNode const *param0, std::ostream *param1, int param2) {
    ((*param0).write)(*param1, param2);
}


void
PandaNode_C_ls_v_ppi(PandaNode const *param0, std::ostream *param1, int param2) {
    ((*param0).ls)(*param1, param2);
}


void
PandaNode_C_set_bounds_type_v_pp(PandaNode *param0, BoundingVolume::BoundsType param1) {
    ((*param0).set_bounds_type)(param1);
}


BoundingVolume::BoundsType
PandaNode_C_get_bounds_type_p_p(PandaNode const *param0) {
    return ((*param0).get_bounds_type)();
}


void
PandaNode_C_set_bounds_v_pp(PandaNode *param0, BoundingVolume const *param1) {
    ((*param0).set_bounds)(param1);
}


void
PandaNode_C_set_bound_v_pp(PandaNode *param0, BoundingVolume const *param1) {
    ((*param0).set_bound)(param1);
}


void
PandaNode_C_clear_bounds_v_p(PandaNode *param0) {
    ((*param0).clear_bounds)();
}


ConstPointerTo< BoundingVolume > *
PandaNode_C_get_bounds_p_pp(PandaNode const *param0, Thread *param1) {
    return new ConstPointerTo< BoundingVolume >(((*param0).get_bounds)(param1));
}


ConstPointerTo< BoundingVolume > *
PandaNode_C_get_bounds_p_p(PandaNode const *param0) {
    return new ConstPointerTo< BoundingVolume >(((*param0).get_bounds)());
}


ConstPointerTo< BoundingVolume > *
PandaNode_C_get_bounds_p_ppp(PandaNode const *param0, UpdateSeq *param1, Thread *param2) {
    return new ConstPointerTo< BoundingVolume >(((*param0).get_bounds)(*param1, param2));
}


ConstPointerTo< BoundingVolume > *
PandaNode_C_get_bounds_p_pp_1_p_pp(PandaNode const *param0, UpdateSeq *param1) {
    return new ConstPointerTo< BoundingVolume >(((*param0).get_bounds)(*param1));
}


int
PandaNode_C_get_nested_vertices_i_pp(PandaNode const *param0, Thread *param1) {
    return ((*param0).get_nested_vertices)(param1);
}


int
PandaNode_C_get_nested_vertices_i_p(PandaNode const *param0) {
    return ((*param0).get_nested_vertices)();
}


ConstPointerTo< BoundingVolume > *
PandaNode_C_get_internal_bounds_p_pp(PandaNode const *param0, Thread *param1) {
    return new ConstPointerTo< BoundingVolume >(((*param0).get_internal_bounds)(param1));
}


ConstPointerTo< BoundingVolume > *
PandaNode_C_get_internal_bounds_p_p(PandaNode const *param0) {
    return new ConstPointerTo< BoundingVolume >(((*param0).get_internal_bounds)());
}


int
PandaNode_C_get_internal_vertices_i_pp(PandaNode const *param0, Thread *param1) {
    return ((*param0).get_internal_vertices)(param1);
}


int
PandaNode_C_get_internal_vertices_i_p(PandaNode const *param0) {
    return ((*param0).get_internal_vertices)();
}


void
PandaNode_C_mark_bounds_stale_v_pp(PandaNode const *param0, Thread *param1) {
    ((*param0).mark_bounds_stale)(param1);
}


void
PandaNode_C_mark_bounds_stale_v_p(PandaNode const *param0) {
    ((*param0).mark_bounds_stale)();
}


void
PandaNode_C_mark_internal_bounds_stale_v_pp(PandaNode *param0, Thread *param1) {
    ((*param0).mark_internal_bounds_stale)(param1);
}


void
PandaNode_C_mark_internal_bounds_stale_v_p(PandaNode *param0) {
    ((*param0).mark_internal_bounds_stale)();
}


bool
PandaNode_C_is_bounds_stale_B_p(PandaNode const *param0) {
    return ((*param0).is_bounds_stale)();
}


void
PandaNode_C_set_final_v_pB(PandaNode *param0, bool param1) {
    ((*param0).set_final)(param1);
}


bool
PandaNode_C_is_final_B_pp(PandaNode const *param0, Thread *param1) {
    return ((*param0).is_final)(param1);
}


bool
PandaNode_C_is_final_B_p(PandaNode const *param0) {
    return ((*param0).is_final)();
}


bool
PandaNode_C_is_geom_node_B_p(PandaNode const *param0) {
    return ((*param0).is_geom_node)();
}


bool
PandaNode_C_is_lod_node_B_p(PandaNode const *param0) {
    return ((*param0).is_lod_node)();
}


bool
PandaNode_C_is_collision_node_B_p(PandaNode const *param0) {
    return ((*param0).is_collision_node)();
}


Light *
PandaNode_C_as_light_p_p(PandaNode *param0) {
    return ((*param0).as_light)();
}


bool
PandaNode_C_is_ambient_light_B_p(PandaNode const *param0) {
    return ((*param0).is_ambient_light)();
}


int
PandaNode_C_get_fancy_bits_i_pp(PandaNode const *param0, Thread *param1) {
    return ((*param0).get_fancy_bits)(param1);
}


int
PandaNode_C_get_fancy_bits_i_p(PandaNode const *param0) {
    return ((*param0).get_fancy_bits)();
}


PointerTo< PandaNode > *
PandaNode_C_decode_from_bam_stream_p_pp(vector_uchar param0, BamReader *param1) {
    return new PointerTo< PandaNode >((PandaNode::decode_from_bam_stream)(param0, param1));
}


PointerTo< PandaNode > *
PandaNode_C_decode_from_bam_stream_p_p(vector_uchar param0) {
    return new PointerTo< PandaNode >((PandaNode::decode_from_bam_stream)(param0));
}


void
PandaNode_C_r_prepare_scene_v_ppppp(PandaNode *param0, GraphicsStateGuardianBase *param1, RenderState const *param2, GeomTransformer *param3, Thread *param4) {
    ((*param0).r_prepare_scene)(param1, param2, *param3, param4);
}


PandaNode::Children *
PandaNode_C_get_children_p_pp(PandaNode const *param0, Thread *param1) {
    return new PandaNode::Children(((*param0).get_children)(param1));
}


PandaNode::Children *
PandaNode_C_get_children_p_p(PandaNode const *param0) {
    return new PandaNode::Children(((*param0).get_children)());
}


PandaNode::Parents *
PandaNode_C_get_parents_p_pp(PandaNode const *param0, Thread *param1) {
    return new PandaNode::Parents(((*param0).get_parents)(param1));
}


PandaNode::Parents *
PandaNode_C_get_parents_p_p(PandaNode const *param0) {
    return new PandaNode::Parents(((*param0).get_parents)());
}


void
PandaNode_C_register_with_read_factory_v_v() {
    (PandaNode::register_with_read_factory)();
}


void
PandaNode_C_write_datagram_v_ppp(PandaNode *param0, BamWriter *param1, Datagram *param2) {
    ((*param0).write_datagram)(param1, *param2);
}


void
PandaNode_C_update_bam_nested_v_pp(PandaNode *param0, BamWriter *param1) {
    ((*param0).update_bam_nested)(param1);
}


void
PandaNode_C_write_recorder_v_ppp(PandaNode *param0, BamWriter *param1, Datagram *param2) {
    ((*param0).write_recorder)(param1, *param2);
}


int
PandaNode_C_get_class_type_i_v() {
    return ((PandaNode::get_class_type)()).get_index();
}


void
PandaNode_C_init_type_v_v() {
    (PandaNode::init_type)();
}


int
PandaNode_C_get_type_i_p(PandaNode const *param0) {
    return (((*param0).get_type)()).get_index();
}


int
PandaNode_C_force_init_type_i_p(PandaNode *param0) {
    return (((*param0).force_init_type)()).get_index();
}


TextNode *
PandaNode_C_downcast_to_TextNode_p_p(PandaNode *param0) {
    return (TextNode *)param0;
}


// PandaSystem


char const *
PandaSystem_C_get_version_string_s_v() {
    static std::string string_holder = (PandaSystem::get_version_string)();
    return string_holder.c_str();
}


int
PandaSystem_C_get_major_version_i_v() {
    return (PandaSystem::get_major_version)();
}


int
PandaSystem_C_get_minor_version_i_v() {
    return (PandaSystem::get_minor_version)();
}


int
PandaSystem_C_get_sequence_version_i_v() {
    return (PandaSystem::get_sequence_version)();
}


bool
PandaSystem_C_is_official_version_B_v() {
    return (PandaSystem::is_official_version)();
}


int
PandaSystem_C_get_memory_alignment_i_v() {
    return (PandaSystem::get_memory_alignment)();
}


char const *
PandaSystem_C_get_distributor_s_v() {
    static std::string string_holder = (PandaSystem::get_distributor)();
    return string_holder.c_str();
}


char const *
PandaSystem_C_get_compiler_s_v() {
    static std::string string_holder = (PandaSystem::get_compiler)();
    return string_holder.c_str();
}


char const *
PandaSystem_C_get_build_date_s_v() {
    static std::string string_holder = (PandaSystem::get_build_date)();
    return string_holder.c_str();
}


char const *
PandaSystem_C_get_git_commit_s_v() {
    static std::string string_holder = (PandaSystem::get_git_commit)();
    return string_holder.c_str();
}


char const *
PandaSystem_C_get_platform_s_v() {
    static std::string string_holder = (PandaSystem::get_platform)();
    return string_holder.c_str();
}


bool
PandaSystem_C_has_system_B_ps(PandaSystem const *param0, char const *param1) {
    return ((*param0).has_system)(std::string(param1));
}


std::size_t
PandaSystem_C_get_num_systems_l_p(PandaSystem const *param0) {
    return ((*param0).get_num_systems)();
}


char const *
PandaSystem_C_get_system_s_pl(PandaSystem const *param0, std::size_t param1) {
    static std::string string_holder = ((*param0).get_system)(param1);
    return string_holder.c_str();
}


char const *
PandaSystem_C_get_system_tag_s_pss(PandaSystem const *param0, char const *param1, char const *param2) {
    static std::string string_holder = ((*param0).get_system_tag)(std::string(param1), std::string(param2));
    return string_holder.c_str();
}


void
PandaSystem_C_add_system_v_ps(PandaSystem *param0, char const *param1) {
    ((*param0).add_system)(std::string(param1));
}


void
PandaSystem_C_set_system_tag_v_psss(PandaSystem *param0, char const *param1, char const *param2, char const *param3) {
    ((*param0).set_system_tag)(std::string(param1), std::string(param2), std::string(param3));
}


bool
PandaSystem_C_heap_trim_B_pl(PandaSystem *param0, std::size_t param1) {
    return ((*param0).heap_trim)(param1);
}


void
PandaSystem_C_output_v_pp(PandaSystem const *param0, std::ostream *param1) {
    ((*param0).output)(*param1);
}


void
PandaSystem_C_write_v_pp(PandaSystem const *param0, std::ostream *param1) {
    ((*param0).write)(*param1);
}


PandaSystem *
PandaSystem_C_get_global_ptr_p_v() {
    return (PandaSystem::get_global_ptr)();
}


int
PandaSystem_C_get_class_type_i_v() {
    return ((PandaSystem::get_class_type)()).get_index();
}


void
PandaSystem_C_init_type_v_v() {
    (PandaSystem::init_type)();
}


// ReferenceCount


MemoryBase *
ReferenceCount_C_upcast_to_MemoryBase_p_p(ReferenceCount *param0) {
    return (MemoryBase *)param0;
}


int
ReferenceCount_C_get_ref_count_i_p(ReferenceCount const *param0) {
    return ((*param0).get_ref_count)();
}


void
ReferenceCount_C_ref_v_p(ReferenceCount const *param0) {
    ((*param0).ref)();
}


bool
ReferenceCount_C_unref_B_p(ReferenceCount const *param0) {
    return ((*param0).unref)();
}


bool
ReferenceCount_C_test_ref_count_integrity_B_p(ReferenceCount const *param0) {
    return ((*param0).test_ref_count_integrity)();
}


bool
ReferenceCount_C_test_ref_count_nonzero_B_p(ReferenceCount const *param0) {
    return ((*param0).test_ref_count_nonzero)();
}


void
ReferenceCount_C_local_object_v_p(ReferenceCount *param0) {
    ((*param0).local_object)();
}


bool
ReferenceCount_C_has_weak_list_B_p(ReferenceCount const *param0) {
    return ((*param0).has_weak_list)();
}


WeakReferenceList *
ReferenceCount_C_get_weak_list_p_p(ReferenceCount const *param0) {
    return ((*param0).get_weak_list)();
}


WeakReferenceList *
ReferenceCount_C_weak_ref_p_p(ReferenceCount *param0) {
    return ((*param0).weak_ref)();
}


void
ReferenceCount_C_weak_unref_v_p(ReferenceCount *param0) {
    ((*param0).weak_unref)();
}


bool
ReferenceCount_C_ref_if_nonzero_B_p(ReferenceCount const *param0) {
    return ((*param0).ref_if_nonzero)();
}


bool
ReferenceCount_C_unref_if_one_B_p(ReferenceCount const *param0) {
    return ((*param0).unref_if_one)();
}


int
ReferenceCount_C_get_class_type_i_v() {
    return ((ReferenceCount::get_class_type)()).get_index();
}


void
ReferenceCount_C_init_type_v_v() {
    (ReferenceCount::init_type)();
}


GeomVertexArrayDataHandle *
ReferenceCount_C_downcast_to_GeomVertexArrayDataHandle_p_p(ReferenceCount *param0) {
    return (GeomVertexArrayDataHandle *)param0;
}


// RenderEffect


bool
RenderEffect_C_safe_to_transform_B_p(RenderEffect const *param0) {
    return ((*param0).safe_to_transform)();
}


ConstPointerTo< TransformState > *
RenderEffect_C_prepare_flatten_transform_p_pp(RenderEffect const *param0, TransformState const *param1) {
    return new ConstPointerTo< TransformState >(((*param0).prepare_flatten_transform)(param1));
}


bool
RenderEffect_C_safe_to_combine_B_p(RenderEffect const *param0) {
    return ((*param0).safe_to_combine)();
}


ConstPointerTo< RenderEffect > *
RenderEffect_C_xform_p_pp(RenderEffect const *param0, LMatrix4 const *param1) {
    return new ConstPointerTo< RenderEffect >(((*param0).xform)(*param1));
}


bool
RenderEffect_C_has_cull_callback_B_p(RenderEffect const *param0) {
    return ((*param0).has_cull_callback)();
}


void
RenderEffect_C_cull_callback_v_ppppp(RenderEffect const *param0, CullTraverser *param1, CullTraverserData *param2, ConstPointerTo< TransformState > *param3, ConstPointerTo< RenderState > *param4) {
    ((*param0).cull_callback)(param1, *param2, *param3, *param4);
}


bool
RenderEffect_C_has_adjust_transform_B_p(RenderEffect const *param0) {
    return ((*param0).has_adjust_transform)();
}


void
RenderEffect_C_adjust_transform_v_pppp(RenderEffect const *param0, ConstPointerTo< TransformState > *param1, ConstPointerTo< TransformState > *param2, PandaNode const *param3) {
    ((*param0).adjust_transform)(*param1, *param2, param3);
}


int
RenderEffect_C_compare_to_i_pp(RenderEffect const *param0, RenderEffect const *param1) {
    return ((*param0).compare_to)(*param1);
}


void
RenderEffect_C_output_v_pp(RenderEffect const *param0, std::ostream *param1) {
    ((*param0).output)(*param1);
}


void
RenderEffect_C_write_v_ppi(RenderEffect const *param0, std::ostream *param1, int param2) {
    ((*param0).write)(*param1, param2);
}


int
RenderEffect_C_get_num_effects_i_v() {
    return (RenderEffect::get_num_effects)();
}


void
RenderEffect_C_list_effects_v_p(std::ostream *param0) {
    (RenderEffect::list_effects)(*param0);
}


bool
RenderEffect_C_validate_effects_B_v() {
    return (RenderEffect::validate_effects)();
}


void
RenderEffect_C_write_datagram_v_ppp(RenderEffect *param0, BamWriter *param1, Datagram *param2) {
    ((*param0).write_datagram)(param1, *param2);
}


TypedWritable *
RenderEffect_C_change_this_p_pp(TypedWritable *param0, BamReader *param1) {
    return (RenderEffect::change_this)(param0, param1);
}


void
RenderEffect_C_finalize_v_pp(RenderEffect *param0, BamReader *param1) {
    ((*param0).finalize)(param1);
}


int
RenderEffect_C_get_class_type_i_v() {
    return ((RenderEffect::get_class_type)()).get_index();
}


void
RenderEffect_C_init_type_v_v() {
    (RenderEffect::init_type)();
}


int
RenderEffect_C_get_type_i_p(RenderEffect const *param0) {
    return (((*param0).get_type)()).get_index();
}


int
RenderEffect_C_force_init_type_i_p(RenderEffect *param0) {
    return (((*param0).force_init_type)()).get_index();
}


// RenderState


int
RenderState_C_compare_to_i_pp(RenderState const *param0, RenderState const *param1) {
    return ((*param0).compare_to)(*param1);
}


int
RenderState_C_compare_sort_i_pp(RenderState const *param0, RenderState const *param1) {
    return ((*param0).compare_sort)(*param1);
}


int
RenderState_C_compare_mask_i_ppp(RenderState const *param0, RenderState const *param1, RenderState::SlotMask *param2) {
    return ((*param0).compare_mask)(*param1, *param2);
}


std::size_t
RenderState_C_get_hash_l_p(RenderState const *param0) {
    return ((*param0).get_hash)();
}


bool
RenderState_C_is_empty_B_p(RenderState const *param0) {
    return ((*param0).is_empty)();
}


bool
RenderState_C_has_cull_callback_B_p(RenderState const *param0) {
    return ((*param0).has_cull_callback)();
}


bool
RenderState_C_cull_callback_B_ppp(RenderState const *param0, CullTraverser *param1, CullTraverserData const *param2) {
    return ((*param0).cull_callback)(param1, *param2);
}


ConstPointerTo< RenderState > *
RenderState_C_make_empty_p_v() {
    return new ConstPointerTo< RenderState >((RenderState::make_empty)());
}


ConstPointerTo< RenderState > *
RenderState_C_make_p_pppppi(RenderAttrib const *param0, RenderAttrib const *param1, RenderAttrib const *param2, RenderAttrib const *param3, RenderAttrib const *param4, int param5) {
    return new ConstPointerTo< RenderState >((RenderState::make)(param0, param1, param2, param3, param4, param5));
}


ConstPointerTo< RenderState > *
RenderState_C_make_p_ppppp(RenderAttrib const *param0, RenderAttrib const *param1, RenderAttrib const *param2, RenderAttrib const *param3, RenderAttrib const *param4) {
    return new ConstPointerTo< RenderState >((RenderState::make)(param0, param1, param2, param3, param4));
}


ConstPointerTo< RenderState > *
RenderState_C_make_p_ppppi(RenderAttrib const *param0, RenderAttrib const *param1, RenderAttrib const *param2, RenderAttrib const *param3, int param4) {
    return new ConstPointerTo< RenderState >((RenderState::make)(param0, param1, param2, param3, param4));
}


ConstPointerTo< RenderState > *
RenderState_C_make_p_pppp(RenderAttrib const *param0, RenderAttrib const *param1, RenderAttrib const *param2, RenderAttrib const *param3) {
    return new ConstPointerTo< RenderState >((RenderState::make)(param0, param1, param2, param3));
}


ConstPointerTo< RenderState > *
RenderState_C_make_p_pppi(RenderAttrib const *param0, RenderAttrib const *param1, RenderAttrib const *param2, int param3) {
    return new ConstPointerTo< RenderState >((RenderState::make)(param0, param1, param2, param3));
}


ConstPointerTo< RenderState > *
RenderState_C_make_p_ppp(RenderAttrib const *param0, RenderAttrib const *param1, RenderAttrib const *param2) {
    return new ConstPointerTo< RenderState >((RenderState::make)(param0, param1, param2));
}


ConstPointerTo< RenderState > *
RenderState_C_make_p_ppi(RenderAttrib const *param0, RenderAttrib const *param1, int param2) {
    return new ConstPointerTo< RenderState >((RenderState::make)(param0, param1, param2));
}


ConstPointerTo< RenderState > *
RenderState_C_make_p_pp(RenderAttrib const *param0, RenderAttrib const *param1) {
    return new ConstPointerTo< RenderState >((RenderState::make)(param0, param1));
}


ConstPointerTo< RenderState > *
RenderState_C_make_p_pi(RenderAttrib const *param0, int param1) {
    return new ConstPointerTo< RenderState >((RenderState::make)(param0, param1));
}


ConstPointerTo< RenderState > *
RenderState_C_make_p_p(RenderAttrib const *param0) {
    return new ConstPointerTo< RenderState >((RenderState::make)(param0));
}


ConstPointerTo< RenderState > *
RenderState_C_compose_p_pp(RenderState const *param0, RenderState const *param1) {
    return new ConstPointerTo< RenderState >(((*param0).compose)(param1));
}


ConstPointerTo< RenderState > *
RenderState_C_invert_compose_p_pp(RenderState const *param0, RenderState const *param1) {
    return new ConstPointerTo< RenderState >(((*param0).invert_compose)(param1));
}


ConstPointerTo< RenderState > *
RenderState_C_add_attrib_p_ppi(RenderState const *param0, RenderAttrib const *param1, int param2) {
    return new ConstPointerTo< RenderState >(((*param0).add_attrib)(param1, param2));
}


ConstPointerTo< RenderState > *
RenderState_C_add_attrib_p_pp(RenderState const *param0, RenderAttrib const *param1) {
    return new ConstPointerTo< RenderState >(((*param0).add_attrib)(param1));
}


ConstPointerTo< RenderState > *
RenderState_C_set_attrib_p_pp(RenderState const *param0, RenderAttrib const *param1) {
    return new ConstPointerTo< RenderState >(((*param0).set_attrib)(param1));
}


ConstPointerTo< RenderState > *
RenderState_C_set_attrib_p_ppi(RenderState const *param0, RenderAttrib const *param1, int param2) {
    return new ConstPointerTo< RenderState >(((*param0).set_attrib)(param1, param2));
}


ConstPointerTo< RenderState > *
RenderState_C_remove_attrib_p_pi(RenderState const *param0, int param1) {
    return new ConstPointerTo< RenderState >(((*param0).remove_attrib)(TypeHandle::from_index(param1)));
}


ConstPointerTo< RenderState > *
RenderState_C_remove_attrib_p_pi_1_p_pi(RenderState const *param0, int param1) {
    return new ConstPointerTo< RenderState >(((*param0).remove_attrib)(param1));
}


ConstPointerTo< RenderState > *
RenderState_C_adjust_all_priorities_p_pi(RenderState const *param0, int param1) {
    return new ConstPointerTo< RenderState >(((*param0).adjust_all_priorities)(param1));
}


bool
RenderState_C_has_attrib_B_pi(RenderState const *param0, int param1) {
    return ((*param0).has_attrib)(TypeHandle::from_index(param1));
}


bool
RenderState_C_has_attrib_B_pi_1_B_pi(RenderState const *param0, int param1) {
    return ((*param0).has_attrib)(param1);
}


RenderAttrib const *
RenderState_C_get_attrib_p_pi(RenderState const *param0, int param1) {
    return ((*param0).get_attrib)(TypeHandle::from_index(param1));
}


RenderAttrib const *
RenderState_C_get_attrib_p_pi_1_p_pi(RenderState const *param0, int param1) {
    return ((*param0).get_attrib)(param1);
}


RenderAttrib const *
RenderState_C_get_attrib_def_p_pi(RenderState const *param0, int param1) {
    return ((*param0).get_attrib_def)(param1);
}


int
RenderState_C_get_override_i_pi(RenderState const *param0, int param1) {
    return ((*param0).get_override)(TypeHandle::from_index(param1));
}


int
RenderState_C_get_override_i_pi_1_i_pi(RenderState const *param0, int param1) {
    return ((*param0).get_override)(param1);
}


ConstPointerTo< RenderState > *
RenderState_C_get_unique_p_p(RenderState const *param0) {
    return new ConstPointerTo< RenderState >(((*param0).get_unique)());
}


void
RenderState_C_cache_ref_v_p(RenderState const *param0) {
    ((*param0).cache_ref)();
}


bool
RenderState_C_cache_unref_B_p(RenderState const *param0) {
    return ((*param0).cache_unref)();
}


void
RenderState_C_node_ref_v_p(RenderState const *param0) {
    ((*param0).node_ref)();
}


bool
RenderState_C_node_unref_B_p(RenderState const *param0) {
    return ((*param0).node_unref)();
}


std::size_t
RenderState_C_get_composition_cache_num_entries_l_p(RenderState const *param0) {
    return ((*param0).get_composition_cache_num_entries)();
}


std::size_t
RenderState_C_get_invert_composition_cache_num_entries_l_p(RenderState const *param0) {
    return ((*param0).get_invert_composition_cache_num_entries)();
}


std::size_t
RenderState_C_get_composition_cache_size_l_p(RenderState const *param0) {
    return ((*param0).get_composition_cache_size)();
}


RenderState const *
RenderState_C_get_composition_cache_source_p_pl(RenderState const *param0, std::size_t param1) {
    return ((*param0).get_composition_cache_source)(param1);
}


RenderState const *
RenderState_C_get_composition_cache_result_p_pl(RenderState const *param0, std::size_t param1) {
    return ((*param0).get_composition_cache_result)(param1);
}


std::size_t
RenderState_C_get_invert_composition_cache_size_l_p(RenderState const *param0) {
    return ((*param0).get_invert_composition_cache_size)();
}


RenderState const *
RenderState_C_get_invert_composition_cache_source_p_pl(RenderState const *param0, std::size_t param1) {
    return ((*param0).get_invert_composition_cache_source)(param1);
}


RenderState const *
RenderState_C_get_invert_composition_cache_result_p_pl(RenderState const *param0, std::size_t param1) {
    return ((*param0).get_invert_composition_cache_result)(param1);
}


void
RenderState_C_output_v_pp(RenderState const *param0, std::ostream *param1) {
    ((*param0).output)(*param1);
}


void
RenderState_C_write_v_ppi(RenderState const *param0, std::ostream *param1, int param2) {
    ((*param0).write)(*param1, param2);
}


int
RenderState_C_get_max_priority_i_v() {
    return (RenderState::get_max_priority)();
}


int
RenderState_C_get_num_states_i_v() {
    return (RenderState::get_num_states)();
}


int
RenderState_C_get_num_unused_states_i_v() {
    return (RenderState::get_num_unused_states)();
}


int
RenderState_C_clear_cache_i_v() {
    return (RenderState::clear_cache)();
}


void
RenderState_C_clear_munger_cache_v_v() {
    (RenderState::clear_munger_cache)();
}


int
RenderState_C_garbage_collect_i_v() {
    return (RenderState::garbage_collect)();
}


void
RenderState_C_list_cycles_v_p(std::ostream *param0) {
    (RenderState::list_cycles)(*param0);
}


void
RenderState_C_list_states_v_p(std::ostream *param0) {
    (RenderState::list_states)(*param0);
}


bool
RenderState_C_validate_states_B_v() {
    return (RenderState::validate_states)();
}


int
RenderState_C_get_draw_order_i_p(RenderState const *param0) {
    return ((*param0).get_draw_order)();
}


int
RenderState_C_get_bin_index_i_p(RenderState const *param0) {
    return ((*param0).get_bin_index)();
}


int
RenderState_C_get_geom_rendering_i_pi(RenderState const *param0, int param1) {
    return ((*param0).get_geom_rendering)(param1);
}


void
RenderState_C_bin_removed_v_i(int param0) {
    (RenderState::bin_removed)(param0);
}


void
RenderState_C_flush_level_v_v() {
    (RenderState::flush_level)();
}


void
RenderState_C_cache_ref_only_v_p(RenderState const *param0) {
    ((*param0).cache_ref_only)();
}


void
RenderState_C_init_states_v_v() {
    (RenderState::init_states)();
}


ConstPointerTo< RenderAttrib > const *
RenderState_C_get_generated_shader_p_p(RenderState const *param0) {
    return &((param0)->_generated_shader);
}


UpdateSeq const *
RenderState_C_get_generated_shader_seq_p_p(RenderState const *param0) {
    return &((param0)->_generated_shader_seq);
}


void
RenderState_C_register_with_read_factory_v_v() {
    (RenderState::register_with_read_factory)();
}


void
RenderState_C_write_datagram_v_ppp(RenderState *param0, BamWriter *param1, Datagram *param2) {
    ((*param0).write_datagram)(param1, *param2);
}


TypedWritable *
RenderState_C_change_this_p_pp(TypedWritable *param0, BamReader *param1) {
    return (RenderState::change_this)(param0, param1);
}


void
RenderState_C_finalize_v_pp(RenderState *param0, BamReader *param1) {
    ((*param0).finalize)(param1);
}


int
RenderState_C_get_class_type_i_v() {
    return ((RenderState::get_class_type)()).get_index();
}


void
RenderState_C_init_type_v_v() {
    (RenderState::init_type)();
}


int
RenderState_C_get_type_i_p(RenderState const *param0) {
    return (((*param0).get_type)()).get_index();
}


int
RenderState_C_force_init_type_i_p(RenderState *param0) {
    return (((*param0).force_init_type)()).get_index();
}


// Shader


PointerTo< Shader > *
Shader_C_load_p_pp(Filename const *param0, Shader::ShaderLanguage param1) {
    return new PointerTo< Shader >((Shader::load)(*param0, param1));
}


PointerTo< Shader > *
Shader_C_load_p_p(Filename const *param0) {
    return new PointerTo< Shader >((Shader::load)(*param0));
}


PointerTo< Shader > *
Shader_C_load_p_pppppp(Shader::ShaderLanguage param0, Filename const *param1, Filename const *param2, Filename const *param3, Filename const *param4, Filename const *param5) {
    return new PointerTo< Shader >((Shader::load)(param0, *param1, *param2, *param3, *param4, *param5));
}


PointerTo< Shader > *
Shader_C_load_p_ppppp(Shader::ShaderLanguage param0, Filename const *param1, Filename const *param2, Filename const *param3, Filename const *param4) {
    return new PointerTo< Shader >((Shader::load)(param0, *param1, *param2, *param3, *param4));
}


PointerTo< Shader > *
Shader_C_load_p_pppp(Shader::ShaderLanguage param0, Filename const *param1, Filename const *param2, Filename const *param3) {
    return new PointerTo< Shader >((Shader::load)(param0, *param1, *param2, *param3));
}


PointerTo< Shader > *
Shader_C_load_p_ppp(Shader::ShaderLanguage param0, Filename const *param1, Filename const *param2) {
    return new PointerTo< Shader >((Shader::load)(param0, *param1, *param2));
}


PointerTo< Shader > *
Shader_C_make_p_psssss(Shader::ShaderLanguage param0, char const *param1, char const *param2, char const *param3, char const *param4, char const *param5) {
    return new PointerTo< Shader >((Shader::make)(param0, std::string(param1), std::string(param2), std::string(param3), std::string(param4), std::string(param5)));
}


PointerTo< Shader > *
Shader_C_make_p_pssss(Shader::ShaderLanguage param0, char const *param1, char const *param2, char const *param3, char const *param4) {
    return new PointerTo< Shader >((Shader::make)(param0, std::string(param1), std::string(param2), std::string(param3), std::string(param4)));
}


PointerTo< Shader > *
Shader_C_make_p_psss(Shader::ShaderLanguage param0, char const *param1, char const *param2, char const *param3) {
    return new PointerTo< Shader >((Shader::make)(param0, std::string(param1), std::string(param2), std::string(param3)));
}


PointerTo< Shader > *
Shader_C_make_p_pss(Shader::ShaderLanguage param0, char const *param1, char const *param2) {
    return new PointerTo< Shader >((Shader::make)(param0, std::string(param1), std::string(param2)));
}


PointerTo< Shader > *
Shader_C_make_p_sp(char const *param0, Shader::ShaderLanguage param1) {
    return new PointerTo< Shader >((Shader::make)(std::string(param0), param1));
}


PointerTo< Shader > *
Shader_C_make_p_s(char const *param0) {
    return new PointerTo< Shader >((Shader::make)(std::string(param0)));
}


PointerTo< Shader > *
Shader_C_load_compute_p_pp(Shader::ShaderLanguage param0, Filename const *param1) {
    return new PointerTo< Shader >((Shader::load_compute)(param0, *param1));
}


PointerTo< Shader > *
Shader_C_make_compute_p_ps(Shader::ShaderLanguage param0, char const *param1) {
    return new PointerTo< Shader >((Shader::make_compute)(param0, std::string(param1)));
}


Filename *
Shader_C_get_filename_p_pp(Shader const *param0, Shader::ShaderType param1) {
    return new Filename(((*param0).get_filename)(param1));
}


Filename *
Shader_C_get_filename_p_p(Shader const *param0) {
    return new Filename(((*param0).get_filename)());
}


void
Shader_C_set_filename_v_ppp(Shader *param0, Shader::ShaderType param1, Filename const *param2) {
    ((*param0).set_filename)(param1, *param2);
}


char const *
Shader_C_get_text_s_pp(Shader const *param0, Shader::ShaderType param1) {
    return (((*param0).get_text)(param1)).c_str();
}


char const *
Shader_C_get_text_s_p(Shader const *param0) {
    return (((*param0).get_text)()).c_str();
}


bool
Shader_C_get_error_flag_B_p(Shader const *param0) {
    return ((*param0).get_error_flag)();
}


Shader::ShaderLanguage
Shader_C_get_language_p_p(Shader const *param0) {
    return ((*param0).get_language)();
}


bool
Shader_C_has_fullpath_B_p(Shader const *param0) {
    return ((*param0).has_fullpath)();
}


Filename const *
Shader_C_get_fullpath_p_p(Shader const *param0) {
    return &(((*param0).get_fullpath)());
}


bool
Shader_C_get_cache_compiled_shader_B_p(Shader const *param0) {
    return ((*param0).get_cache_compiled_shader)();
}


void
Shader_C_set_cache_compiled_shader_v_pB(Shader *param0, bool param1) {
    ((*param0).set_cache_compiled_shader)(param1);
}


PointerTo< AsyncFuture > *
Shader_C_prepare_p_pp(Shader *param0, PreparedGraphicsObjects *param1) {
    return new PointerTo< AsyncFuture >(((*param0).prepare)(param1));
}


bool
Shader_C_is_prepared_B_pp(Shader const *param0, PreparedGraphicsObjects *param1) {
    return ((*param0).is_prepared)(param1);
}


bool
Shader_C_release_B_pp(Shader *param0, PreparedGraphicsObjects *param1) {
    return ((*param0).release)(param1);
}


int
Shader_C_release_all_i_p(Shader *param0) {
    return ((*param0).release_all)();
}


ShaderContext *
Shader_C_prepare_now_p_ppp(Shader *param0, PreparedGraphicsObjects *param1, GraphicsStateGuardianBase *param2) {
    return ((*param0).prepare_now)(param1, param2);
}


void
Shader_C_parse_init_v_p(Shader *param0) {
    ((*param0).parse_init)();
}


bool
Shader_C_parse_eof_B_p(Shader *param0) {
    return ((*param0).parse_eof)();
}


void
Shader_C_cp_report_error_v_pps(Shader *param0, Shader::ShaderArgInfo *param1, char const *param2) {
    ((*param0).cp_report_error)(*param1, std::string(param2));
}


bool
Shader_C_cp_errchk_parameter_words_B_ppi(Shader *param0, Shader::ShaderArgInfo *param1, int param2) {
    return ((*param0).cp_errchk_parameter_words)(*param1, param2);
}


bool
Shader_C_cp_errchk_parameter_in_B_pp(Shader *param0, Shader::ShaderArgInfo *param1) {
    return ((*param0).cp_errchk_parameter_in)(*param1);
}


bool
Shader_C_cp_errchk_parameter_ptr_B_pp(Shader *param0, Shader::ShaderArgInfo *param1) {
    return ((*param0).cp_errchk_parameter_ptr)(*param1);
}


bool
Shader_C_cp_errchk_parameter_varying_B_pp(Shader *param0, Shader::ShaderArgInfo *param1) {
    return ((*param0).cp_errchk_parameter_varying)(*param1);
}


bool
Shader_C_cp_errchk_parameter_uniform_B_pp(Shader *param0, Shader::ShaderArgInfo *param1) {
    return ((*param0).cp_errchk_parameter_uniform)(*param1);
}


bool
Shader_C_cp_errchk_parameter_float_B_ppii(Shader *param0, Shader::ShaderArgInfo *param1, int param2, int param3) {
    return ((*param0).cp_errchk_parameter_float)(*param1, param2, param3);
}


bool
Shader_C_cp_errchk_parameter_sampler_B_pp(Shader *param0, Shader::ShaderArgInfo *param1) {
    return ((*param0).cp_errchk_parameter_sampler)(*param1);
}


int
Shader_C_cp_dependency_i_pp(Shader *param0, Shader::ShaderMatInput param1) {
    return ((*param0).cp_dependency)(param1);
}


void
Shader_C_cp_add_mat_spec_v_pp(Shader *param0, Shader::ShaderMatSpec *param1) {
    ((*param0).cp_add_mat_spec)(*param1);
}


std::size_t
Shader_C_cp_get_mat_cache_size_l_p(Shader const *param0) {
    return ((*param0).cp_get_mat_cache_size)();
}


void
Shader_C_clear_parameters_v_p(Shader *param0) {
    ((*param0).clear_parameters)();
}


void
Shader_C_set_compiled_v_pIsl(Shader *param0, unsigned int param1, char const *param2, std::size_t param3) {
    ((*param0).set_compiled)(param1, param2, param3);
}


void
Shader_C_set_default_caps_v_p(Shader::ShaderCaps const *param0) {
    (Shader::set_default_caps)(*param0);
}


PStatCollector *
Shader_C_get_prepare_shader_pcollector_p_p(Shader *param0) {
    return &(((*param0).get_prepare_shader_pcollector)());
}


char const *
Shader_C_get_debug_name_s_p(Shader const *param0) {
    return (((*param0).get_debug_name)()).c_str();
}


pvector< Shader::ShaderPtrSpec > *
Shader_C_get_ptr_spec_p_p(Shader const *param0) {
    return new pvector< Shader::ShaderPtrSpec >((param0)->_ptr_spec);
}


pvector< Shader::ShaderMatSpec > *
Shader_C_get_mat_spec_p_p(Shader const *param0) {
    return new pvector< Shader::ShaderMatSpec >((param0)->_mat_spec);
}


pvector< Shader::ShaderTexSpec > *
Shader_C_get_tex_spec_p_p(Shader const *param0) {
    return new pvector< Shader::ShaderTexSpec >((param0)->_tex_spec);
}


pvector< Shader::ShaderVarSpec > *
Shader_C_get_var_spec_p_p(Shader const *param0) {
    return new pvector< Shader::ShaderVarSpec >((param0)->_var_spec);
}


pvector< Shader::ShaderMatPart > *
Shader_C_get_mat_parts_p_p(Shader const *param0) {
    return new pvector< Shader::ShaderMatPart >((param0)->_mat_parts);
}


int
Shader_C_get_mat_deps_i_p(Shader const *param0) {
    return (param0)->_mat_deps;
}


void
Shader_C_set_mat_deps_v_pi(Shader *param0, int param1) {
    (param0)->_mat_deps = param1;
}


int
Shader_C_get_mat_cache_size_i_p(Shader const *param0) {
    return (param0)->_mat_cache_size;
}


void
Shader_C_set_mat_cache_size_v_pi(Shader *param0, int param1) {
    (param0)->_mat_cache_size = param1;
}


void
Shader_C_set_error_flag_v_pB(Shader *param0, bool param1) {
    (param0)->_error_flag = param1;
}


Filename *
Shader_C_get_filename_from_index_p_pip(Shader const *param0, int param1, Shader::ShaderType param2) {
    return new Filename(((*param0).get_filename_from_index)(param1, param2));
}


void
Shader_C_register_with_read_factory_v_v() {
    (Shader::register_with_read_factory)();
}


void
Shader_C_write_datagram_v_ppp(Shader *param0, BamWriter *param1, Datagram *param2) {
    ((*param0).write_datagram)(param1, *param2);
}


int
Shader_C_get_class_type_i_v() {
    return ((Shader::get_class_type)()).get_index();
}


void
Shader_C_init_type_v_v() {
    (Shader::init_type)();
}


int
Shader_C_get_type_i_p(Shader const *param0) {
    return (((*param0).get_type)()).get_index();
}


int
Shader_C_force_init_type_i_p(Shader *param0) {
    return (((*param0).force_init_type)()).get_index();
}


Shader *
Shader_C_ctor_p_p(Shader const *param0) {
    return new Shader(*param0);
}


// ShaderInput


ShaderInput const *
ShaderInput_C_get_blank_p_v() {
    return &((ShaderInput::get_blank)());
}


ShaderInput *
ShaderInput_C_ctor_p_v() {
    return new ShaderInput();
}


ShaderInput *
ShaderInput_C_ctor_p_spi(CPT_InternalName *param0, LMatrix3d const *param1, int param2) {
    return new ShaderInput(*param0, *param1, param2);
}


ShaderInput *
ShaderInput_C_ctor_p_sp(CPT_InternalName *param0, LMatrix3d const *param1) {
    return new ShaderInput(*param0, *param1);
}


ShaderInput *
ShaderInput_C_ctor_p_spi_1_p_spi(CPT_InternalName *param0, LMatrix3f const *param1, int param2) {
    return new ShaderInput(*param0, *param1, param2);
}


ShaderInput *
ShaderInput_C_ctor_p_sp_1_p_sp(CPT_InternalName *param0, LMatrix3f const *param1) {
    return new ShaderInput(*param0, *param1);
}


ShaderInput *
ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi(CPT_InternalName *param0, LMatrix4d const *param1, int param2) {
    return new ShaderInput(*param0, *param1, param2);
}


ShaderInput *
ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp(CPT_InternalName *param0, LMatrix4d const *param1) {
    return new ShaderInput(*param0, *param1);
}


ShaderInput *
ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi_3_p_spi(CPT_InternalName *param0, LMatrix4f const *param1, int param2) {
    return new ShaderInput(*param0, *param1, param2);
}


ShaderInput *
ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp_3_p_sp(CPT_InternalName *param0, LMatrix4f const *param1) {
    return new ShaderInput(*param0, *param1);
}


ShaderInput *
ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi_3_p_spi_4_p_spi(CPT_InternalName *param0, LVecBase2d const *param1, int param2) {
    return new ShaderInput(*param0, *param1, param2);
}


ShaderInput *
ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp_3_p_sp_4_p_sp(CPT_InternalName *param0, LVecBase2d const *param1) {
    return new ShaderInput(*param0, *param1);
}


ShaderInput *
ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi_3_p_spi_4_p_spi_5_p_spi(CPT_InternalName *param0, LVecBase2f const *param1, int param2) {
    return new ShaderInput(*param0, *param1, param2);
}


ShaderInput *
ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp_3_p_sp_4_p_sp_5_p_sp(CPT_InternalName *param0, LVecBase2f const *param1) {
    return new ShaderInput(*param0, *param1);
}


ShaderInput *
ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi_3_p_spi_4_p_spi_5_p_spi_6_p_spi(CPT_InternalName *param0, LVecBase2i const *param1, int param2) {
    return new ShaderInput(*param0, *param1, param2);
}


ShaderInput *
ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp_3_p_sp_4_p_sp_5_p_sp_6_p_sp(CPT_InternalName *param0, LVecBase2i const *param1) {
    return new ShaderInput(*param0, *param1);
}


ShaderInput *
ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi_3_p_spi_4_p_spi_5_p_spi_6_p_spi_7_p_spi(CPT_InternalName *param0, LVecBase3d const *param1, int param2) {
    return new ShaderInput(*param0, *param1, param2);
}


ShaderInput *
ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp_3_p_sp_4_p_sp_5_p_sp_6_p_sp_7_p_sp(CPT_InternalName *param0, LVecBase3d const *param1) {
    return new ShaderInput(*param0, *param1);
}


ShaderInput *
ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi_3_p_spi_4_p_spi_5_p_spi_6_p_spi_7_p_spi_8_p_spi(CPT_InternalName *param0, LVecBase3f const *param1, int param2) {
    return new ShaderInput(*param0, *param1, param2);
}


ShaderInput *
ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp_3_p_sp_4_p_sp_5_p_sp_6_p_sp_7_p_sp_8_p_sp(CPT_InternalName *param0, LVecBase3f const *param1) {
    return new ShaderInput(*param0, *param1);
}


ShaderInput *
ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi_3_p_spi_4_p_spi_5_p_spi_6_p_spi_7_p_spi_8_p_spi_9_p_spi(CPT_InternalName *param0, LVecBase3i const *param1, int param2) {
    return new ShaderInput(*param0, *param1, param2);
}


ShaderInput *
ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp_3_p_sp_4_p_sp_5_p_sp_6_p_sp_7_p_sp_8_p_sp_9_p_sp(CPT_InternalName *param0, LVecBase3i const *param1) {
    return new ShaderInput(*param0, *param1);
}


ShaderInput *
ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi_3_p_spi_4_p_spi_5_p_spi_6_p_spi_7_p_spi_8_p_spi_9_p_spi_10_p_spi(CPT_InternalName *param0, LVecBase4d const *param1, int param2) {
    return new ShaderInput(*param0, *param1, param2);
}


ShaderInput *
ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp_3_p_sp_4_p_sp_5_p_sp_6_p_sp_7_p_sp_8_p_sp_9_p_sp_10_p_sp(CPT_InternalName *param0, LVecBase4d const *param1) {
    return new ShaderInput(*param0, *param1);
}


ShaderInput *
ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi_3_p_spi_4_p_spi_5_p_spi_6_p_spi_7_p_spi_8_p_spi_9_p_spi_10_p_spi_11_p_spi(CPT_InternalName *param0, LVecBase4f const *param1, int param2) {
    return new ShaderInput(*param0, *param1, param2);
}


ShaderInput *
ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp_3_p_sp_4_p_sp_5_p_sp_6_p_sp_7_p_sp_8_p_sp_9_p_sp_10_p_sp_11_p_sp(CPT_InternalName *param0, LVecBase4f const *param1) {
    return new ShaderInput(*param0, *param1);
}


ShaderInput *
ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi_3_p_spi_4_p_spi_5_p_spi_6_p_spi_7_p_spi_8_p_spi_9_p_spi_10_p_spi_11_p_spi_12_p_spi(CPT_InternalName *param0, LVecBase4i const *param1, int param2) {
    return new ShaderInput(*param0, *param1, param2);
}


ShaderInput *
ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp_3_p_sp_4_p_sp_5_p_sp_6_p_sp_7_p_sp_8_p_sp_9_p_sp_10_p_sp_11_p_sp_12_p_sp(CPT_InternalName *param0, LVecBase4i const *param1) {
    return new ShaderInput(*param0, *param1);
}


ShaderInput *
ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi_3_p_spi_4_p_spi_5_p_spi_6_p_spi_7_p_spi_8_p_spi_9_p_spi_10_p_spi_11_p_spi_12_p_spi_13_p_spi(CPT_InternalName *param0, NodePath const *param1, int param2) {
    return new ShaderInput(*param0, *param1, param2);
}


ShaderInput *
ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp_3_p_sp_4_p_sp_5_p_sp_6_p_sp_7_p_sp_8_p_sp_9_p_sp_10_p_sp_11_p_sp_12_p_sp_13_p_sp(CPT_InternalName *param0, NodePath const *param1) {
    return new ShaderInput(*param0, *param1);
}


ShaderInput *
ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi_3_p_spi_4_p_spi_5_p_spi_6_p_spi_7_p_spi_8_p_spi_9_p_spi_10_p_spi_11_p_spi_12_p_spi_13_p_spi_14_p_spi(CPT_InternalName *param0, PTA_LMatrix3d const *param1, int param2) {
    return new ShaderInput(*param0, *param1, param2);
}


ShaderInput *
ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp_3_p_sp_4_p_sp_5_p_sp_6_p_sp_7_p_sp_8_p_sp_9_p_sp_10_p_sp_11_p_sp_12_p_sp_13_p_sp_14_p_sp(CPT_InternalName *param0, PTA_LMatrix3d const *param1) {
    return new ShaderInput(*param0, *param1);
}


ShaderInput *
ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi_3_p_spi_4_p_spi_5_p_spi_6_p_spi_7_p_spi_8_p_spi_9_p_spi_10_p_spi_11_p_spi_12_p_spi_13_p_spi_14_p_spi_15_p_spi(CPT_InternalName *param0, PTA_LMatrix3f const *param1, int param2) {
    return new ShaderInput(*param0, *param1, param2);
}


ShaderInput *
ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp_3_p_sp_4_p_sp_5_p_sp_6_p_sp_7_p_sp_8_p_sp_9_p_sp_10_p_sp_11_p_sp_12_p_sp_13_p_sp_14_p_sp_15_p_sp(CPT_InternalName *param0, PTA_LMatrix3f const *param1) {
    return new ShaderInput(*param0, *param1);
}


ShaderInput *
ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi_3_p_spi_4_p_spi_5_p_spi_6_p_spi_7_p_spi_8_p_spi_9_p_spi_10_p_spi_11_p_spi_12_p_spi_13_p_spi_14_p_spi_15_p_spi_16_p_spi(CPT_InternalName *param0, PTA_LMatrix4d const *param1, int param2) {
    return new ShaderInput(*param0, *param1, param2);
}


ShaderInput *
ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp_3_p_sp_4_p_sp_5_p_sp_6_p_sp_7_p_sp_8_p_sp_9_p_sp_10_p_sp_11_p_sp_12_p_sp_13_p_sp_14_p_sp_15_p_sp_16_p_sp(CPT_InternalName *param0, PTA_LMatrix4d const *param1) {
    return new ShaderInput(*param0, *param1);
}


ShaderInput *
ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi_3_p_spi_4_p_spi_5_p_spi_6_p_spi_7_p_spi_8_p_spi_9_p_spi_10_p_spi_11_p_spi_12_p_spi_13_p_spi_14_p_spi_15_p_spi_16_p_spi_17_p_spi(CPT_InternalName *param0, PTA_LMatrix4f const *param1, int param2) {
    return new ShaderInput(*param0, *param1, param2);
}


ShaderInput *
ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp_3_p_sp_4_p_sp_5_p_sp_6_p_sp_7_p_sp_8_p_sp_9_p_sp_10_p_sp_11_p_sp_12_p_sp_13_p_sp_14_p_sp_15_p_sp_16_p_sp_17_p_sp(CPT_InternalName *param0, PTA_LMatrix4f const *param1) {
    return new ShaderInput(*param0, *param1);
}


ShaderInput *
ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi_3_p_spi_4_p_spi_5_p_spi_6_p_spi_7_p_spi_8_p_spi_9_p_spi_10_p_spi_11_p_spi_12_p_spi_13_p_spi_14_p_spi_15_p_spi_16_p_spi_17_p_spi_18_p_spi(CPT_InternalName *param0, PTA_LVecBase2d const *param1, int param2) {
    return new ShaderInput(*param0, *param1, param2);
}


ShaderInput *
ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp_3_p_sp_4_p_sp_5_p_sp_6_p_sp_7_p_sp_8_p_sp_9_p_sp_10_p_sp_11_p_sp_12_p_sp_13_p_sp_14_p_sp_15_p_sp_16_p_sp_17_p_sp_18_p_sp(CPT_InternalName *param0, PTA_LVecBase2d const *param1) {
    return new ShaderInput(*param0, *param1);
}


ShaderInput *
ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi_3_p_spi_4_p_spi_5_p_spi_6_p_spi_7_p_spi_8_p_spi_9_p_spi_10_p_spi_11_p_spi_12_p_spi_13_p_spi_14_p_spi_15_p_spi_16_p_spi_17_p_spi_18_p_spi_19_p_spi(CPT_InternalName *param0, PTA_LVecBase2f const *param1, int param2) {
    return new ShaderInput(*param0, *param1, param2);
}


ShaderInput *
ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp_3_p_sp_4_p_sp_5_p_sp_6_p_sp_7_p_sp_8_p_sp_9_p_sp_10_p_sp_11_p_sp_12_p_sp_13_p_sp_14_p_sp_15_p_sp_16_p_sp_17_p_sp_18_p_sp_19_p_sp(CPT_InternalName *param0, PTA_LVecBase2f const *param1) {
    return new ShaderInput(*param0, *param1);
}


ShaderInput *
ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi_3_p_spi_4_p_spi_5_p_spi_6_p_spi_7_p_spi_8_p_spi_9_p_spi_10_p_spi_11_p_spi_12_p_spi_13_p_spi_14_p_spi_15_p_spi_16_p_spi_17_p_spi_18_p_spi_19_p_spi_20_p_spi(CPT_InternalName *param0, PTA_LVecBase2i const *param1, int param2) {
    return new ShaderInput(*param0, *param1, param2);
}


ShaderInput *
ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp_3_p_sp_4_p_sp_5_p_sp_6_p_sp_7_p_sp_8_p_sp_9_p_sp_10_p_sp_11_p_sp_12_p_sp_13_p_sp_14_p_sp_15_p_sp_16_p_sp_17_p_sp_18_p_sp_19_p_sp_20_p_sp(CPT_InternalName *param0, PTA_LVecBase2i const *param1) {
    return new ShaderInput(*param0, *param1);
}


ShaderInput *
ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi_3_p_spi_4_p_spi_5_p_spi_6_p_spi_7_p_spi_8_p_spi_9_p_spi_10_p_spi_11_p_spi_12_p_spi_13_p_spi_14_p_spi_15_p_spi_16_p_spi_17_p_spi_18_p_spi_19_p_spi_20_p_spi_21_p_spi(CPT_InternalName *param0, PTA_LVecBase3d const *param1, int param2) {
    return new ShaderInput(*param0, *param1, param2);
}


ShaderInput *
ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp_3_p_sp_4_p_sp_5_p_sp_6_p_sp_7_p_sp_8_p_sp_9_p_sp_10_p_sp_11_p_sp_12_p_sp_13_p_sp_14_p_sp_15_p_sp_16_p_sp_17_p_sp_18_p_sp_19_p_sp_20_p_sp_21_p_sp(CPT_InternalName *param0, PTA_LVecBase3d const *param1) {
    return new ShaderInput(*param0, *param1);
}


ShaderInput *
ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi_3_p_spi_4_p_spi_5_p_spi_6_p_spi_7_p_spi_8_p_spi_9_p_spi_10_p_spi_11_p_spi_12_p_spi_13_p_spi_14_p_spi_15_p_spi_16_p_spi_17_p_spi_18_p_spi_19_p_spi_20_p_spi_21_p_spi_22_p_spi(CPT_InternalName *param0, PTA_LVecBase3f const *param1, int param2) {
    return new ShaderInput(*param0, *param1, param2);
}


ShaderInput *
ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp_3_p_sp_4_p_sp_5_p_sp_6_p_sp_7_p_sp_8_p_sp_9_p_sp_10_p_sp_11_p_sp_12_p_sp_13_p_sp_14_p_sp_15_p_sp_16_p_sp_17_p_sp_18_p_sp_19_p_sp_20_p_sp_21_p_sp_22_p_sp(CPT_InternalName *param0, PTA_LVecBase3f const *param1) {
    return new ShaderInput(*param0, *param1);
}


ShaderInput *
ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi_3_p_spi_4_p_spi_5_p_spi_6_p_spi_7_p_spi_8_p_spi_9_p_spi_10_p_spi_11_p_spi_12_p_spi_13_p_spi_14_p_spi_15_p_spi_16_p_spi_17_p_spi_18_p_spi_19_p_spi_20_p_spi_21_p_spi_22_p_spi_23_p_spi(CPT_InternalName *param0, PTA_LVecBase3i const *param1, int param2) {
    return new ShaderInput(*param0, *param1, param2);
}


ShaderInput *
ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp_3_p_sp_4_p_sp_5_p_sp_6_p_sp_7_p_sp_8_p_sp_9_p_sp_10_p_sp_11_p_sp_12_p_sp_13_p_sp_14_p_sp_15_p_sp_16_p_sp_17_p_sp_18_p_sp_19_p_sp_20_p_sp_21_p_sp_22_p_sp_23_p_sp(CPT_InternalName *param0, PTA_LVecBase3i const *param1) {
    return new ShaderInput(*param0, *param1);
}


ShaderInput *
ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi_3_p_spi_4_p_spi_5_p_spi_6_p_spi_7_p_spi_8_p_spi_9_p_spi_10_p_spi_11_p_spi_12_p_spi_13_p_spi_14_p_spi_15_p_spi_16_p_spi_17_p_spi_18_p_spi_19_p_spi_20_p_spi_21_p_spi_22_p_spi_23_p_spi_24_p_spi(CPT_InternalName *param0, PTA_LVecBase4d const *param1, int param2) {
    return new ShaderInput(*param0, *param1, param2);
}


ShaderInput *
ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp_3_p_sp_4_p_sp_5_p_sp_6_p_sp_7_p_sp_8_p_sp_9_p_sp_10_p_sp_11_p_sp_12_p_sp_13_p_sp_14_p_sp_15_p_sp_16_p_sp_17_p_sp_18_p_sp_19_p_sp_20_p_sp_21_p_sp_22_p_sp_23_p_sp_24_p_sp(CPT_InternalName *param0, PTA_LVecBase4d const *param1) {
    return new ShaderInput(*param0, *param1);
}


ShaderInput *
ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi_3_p_spi_4_p_spi_5_p_spi_6_p_spi_7_p_spi_8_p_spi_9_p_spi_10_p_spi_11_p_spi_12_p_spi_13_p_spi_14_p_spi_15_p_spi_16_p_spi_17_p_spi_18_p_spi_19_p_spi_20_p_spi_21_p_spi_22_p_spi_23_p_spi_24_p_spi_25_p_spi(CPT_InternalName *param0, PTA_LVecBase4f const *param1, int param2) {
    return new ShaderInput(*param0, *param1, param2);
}


ShaderInput *
ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp_3_p_sp_4_p_sp_5_p_sp_6_p_sp_7_p_sp_8_p_sp_9_p_sp_10_p_sp_11_p_sp_12_p_sp_13_p_sp_14_p_sp_15_p_sp_16_p_sp_17_p_sp_18_p_sp_19_p_sp_20_p_sp_21_p_sp_22_p_sp_23_p_sp_24_p_sp_25_p_sp(CPT_InternalName *param0, PTA_LVecBase4f const *param1) {
    return new ShaderInput(*param0, *param1);
}


ShaderInput *
ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi_3_p_spi_4_p_spi_5_p_spi_6_p_spi_7_p_spi_8_p_spi_9_p_spi_10_p_spi_11_p_spi_12_p_spi_13_p_spi_14_p_spi_15_p_spi_16_p_spi_17_p_spi_18_p_spi_19_p_spi_20_p_spi_21_p_spi_22_p_spi_23_p_spi_24_p_spi_25_p_spi_26_p_spi(CPT_InternalName *param0, PTA_LVecBase4i const *param1, int param2) {
    return new ShaderInput(*param0, *param1, param2);
}


ShaderInput *
ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp_3_p_sp_4_p_sp_5_p_sp_6_p_sp_7_p_sp_8_p_sp_9_p_sp_10_p_sp_11_p_sp_12_p_sp_13_p_sp_14_p_sp_15_p_sp_16_p_sp_17_p_sp_18_p_sp_19_p_sp_20_p_sp_21_p_sp_22_p_sp_23_p_sp_24_p_sp_25_p_sp_26_p_sp(CPT_InternalName *param0, PTA_LVecBase4i const *param1) {
    return new ShaderInput(*param0, *param1);
}


ShaderInput *
ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi_3_p_spi_4_p_spi_5_p_spi_6_p_spi_7_p_spi_8_p_spi_9_p_spi_10_p_spi_11_p_spi_12_p_spi_13_p_spi_14_p_spi_15_p_spi_16_p_spi_17_p_spi_18_p_spi_19_p_spi_20_p_spi_21_p_spi_22_p_spi_23_p_spi_24_p_spi_25_p_spi_26_p_spi_27_p_spi(CPT_InternalName *param0, PTA_double const *param1, int param2) {
    return new ShaderInput(*param0, *param1, param2);
}


ShaderInput *
ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp_3_p_sp_4_p_sp_5_p_sp_6_p_sp_7_p_sp_8_p_sp_9_p_sp_10_p_sp_11_p_sp_12_p_sp_13_p_sp_14_p_sp_15_p_sp_16_p_sp_17_p_sp_18_p_sp_19_p_sp_20_p_sp_21_p_sp_22_p_sp_23_p_sp_24_p_sp_25_p_sp_26_p_sp_27_p_sp(CPT_InternalName *param0, PTA_double const *param1) {
    return new ShaderInput(*param0, *param1);
}


ShaderInput *
ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi_3_p_spi_4_p_spi_5_p_spi_6_p_spi_7_p_spi_8_p_spi_9_p_spi_10_p_spi_11_p_spi_12_p_spi_13_p_spi_14_p_spi_15_p_spi_16_p_spi_17_p_spi_18_p_spi_19_p_spi_20_p_spi_21_p_spi_22_p_spi_23_p_spi_24_p_spi_25_p_spi_26_p_spi_27_p_spi_28_p_spi(CPT_InternalName *param0, PTA_float const *param1, int param2) {
    return new ShaderInput(*param0, *param1, param2);
}


ShaderInput *
ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp_3_p_sp_4_p_sp_5_p_sp_6_p_sp_7_p_sp_8_p_sp_9_p_sp_10_p_sp_11_p_sp_12_p_sp_13_p_sp_14_p_sp_15_p_sp_16_p_sp_17_p_sp_18_p_sp_19_p_sp_20_p_sp_21_p_sp_22_p_sp_23_p_sp_24_p_sp_25_p_sp_26_p_sp_27_p_sp_28_p_sp(CPT_InternalName *param0, PTA_float const *param1) {
    return new ShaderInput(*param0, *param1);
}


ShaderInput *
ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi_3_p_spi_4_p_spi_5_p_spi_6_p_spi_7_p_spi_8_p_spi_9_p_spi_10_p_spi_11_p_spi_12_p_spi_13_p_spi_14_p_spi_15_p_spi_16_p_spi_17_p_spi_18_p_spi_19_p_spi_20_p_spi_21_p_spi_22_p_spi_23_p_spi_24_p_spi_25_p_spi_26_p_spi_27_p_spi_28_p_spi_29_p_spi(CPT_InternalName *param0, PTA_int const *param1, int param2) {
    return new ShaderInput(*param0, *param1, param2);
}


ShaderInput *
ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp_3_p_sp_4_p_sp_5_p_sp_6_p_sp_7_p_sp_8_p_sp_9_p_sp_10_p_sp_11_p_sp_12_p_sp_13_p_sp_14_p_sp_15_p_sp_16_p_sp_17_p_sp_18_p_sp_19_p_sp_20_p_sp_21_p_sp_22_p_sp_23_p_sp_24_p_sp_25_p_sp_26_p_sp_27_p_sp_28_p_sp_29_p_sp(CPT_InternalName *param0, PTA_int const *param1) {
    return new ShaderInput(*param0, *param1);
}


ShaderInput *
ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi_3_p_spi_4_p_spi_5_p_spi_6_p_spi_7_p_spi_8_p_spi_9_p_spi_10_p_spi_11_p_spi_12_p_spi_13_p_spi_14_p_spi_15_p_spi_16_p_spi_17_p_spi_18_p_spi_19_p_spi_20_p_spi_21_p_spi_22_p_spi_23_p_spi_24_p_spi_25_p_spi_26_p_spi_27_p_spi_28_p_spi_29_p_spi_30_p_spi(CPT_InternalName *param0, ParamValueBase *param1, int param2) {
    return new ShaderInput(*param0, param1, param2);
}


ShaderInput *
ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp_3_p_sp_4_p_sp_5_p_sp_6_p_sp_7_p_sp_8_p_sp_9_p_sp_10_p_sp_11_p_sp_12_p_sp_13_p_sp_14_p_sp_15_p_sp_16_p_sp_17_p_sp_18_p_sp_19_p_sp_20_p_sp_21_p_sp_22_p_sp_23_p_sp_24_p_sp_25_p_sp_26_p_sp_27_p_sp_28_p_sp_29_p_sp_30_p_sp(CPT_InternalName *param0, ParamValueBase *param1) {
    return new ShaderInput(*param0, param1);
}


ShaderInput *
ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi_3_p_spi_4_p_spi_5_p_spi_6_p_spi_7_p_spi_8_p_spi_9_p_spi_10_p_spi_11_p_spi_12_p_spi_13_p_spi_14_p_spi_15_p_spi_16_p_spi_17_p_spi_18_p_spi_19_p_spi_20_p_spi_21_p_spi_22_p_spi_23_p_spi_24_p_spi_25_p_spi_26_p_spi_27_p_spi_28_p_spi_29_p_spi_30_p_spi_31_p_spi(CPT_InternalName *param0, ShaderBuffer *param1, int param2) {
    return new ShaderInput(*param0, param1, param2);
}


ShaderInput *
ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp_3_p_sp_4_p_sp_5_p_sp_6_p_sp_7_p_sp_8_p_sp_9_p_sp_10_p_sp_11_p_sp_12_p_sp_13_p_sp_14_p_sp_15_p_sp_16_p_sp_17_p_sp_18_p_sp_19_p_sp_20_p_sp_21_p_sp_22_p_sp_23_p_sp_24_p_sp_25_p_sp_26_p_sp_27_p_sp_28_p_sp_29_p_sp_30_p_sp_31_p_sp(CPT_InternalName *param0, ShaderBuffer *param1) {
    return new ShaderInput(*param0, param1);
}


ShaderInput *
ShaderInput_C_ctor_p_sppi(CPT_InternalName *param0, Texture *param1, SamplerState const *param2, int param3) {
    return new ShaderInput(*param0, param1, *param2, param3);
}


ShaderInput *
ShaderInput_C_ctor_p_spp(CPT_InternalName *param0, Texture *param1, SamplerState const *param2) {
    return new ShaderInput(*param0, param1, *param2);
}


ShaderInput *
ShaderInput_C_ctor_p_spBBiii(CPT_InternalName *param0, Texture *param1, bool param2, bool param3, int param4, int param5, int param6) {
    return new ShaderInput(*param0, param1, param2, param3, param4, param5, param6);
}


ShaderInput *
ShaderInput_C_ctor_p_spBBii(CPT_InternalName *param0, Texture *param1, bool param2, bool param3, int param4, int param5) {
    return new ShaderInput(*param0, param1, param2, param3, param4, param5);
}


ShaderInput *
ShaderInput_C_ctor_p_spBBi(CPT_InternalName *param0, Texture *param1, bool param2, bool param3, int param4) {
    return new ShaderInput(*param0, param1, param2, param3, param4);
}


ShaderInput *
ShaderInput_C_ctor_p_spBB(CPT_InternalName *param0, Texture *param1, bool param2, bool param3) {
    return new ShaderInput(*param0, param1, param2, param3);
}


ShaderInput *
ShaderInput_C_ctor_p_spi_1_p_spi_2_p_spi_3_p_spi_4_p_spi_5_p_spi_6_p_spi_7_p_spi_8_p_spi_9_p_spi_10_p_spi_11_p_spi_12_p_spi_13_p_spi_14_p_spi_15_p_spi_16_p_spi_17_p_spi_18_p_spi_19_p_spi_20_p_spi_21_p_spi_22_p_spi_23_p_spi_24_p_spi_25_p_spi_26_p_spi_27_p_spi_28_p_spi_29_p_spi_30_p_spi_31_p_spi_32_p_spi(CPT_InternalName *param0, Texture *param1, int param2) {
    return new ShaderInput(*param0, param1, param2);
}


ShaderInput *
ShaderInput_C_ctor_p_sp_1_p_sp_2_p_sp_3_p_sp_4_p_sp_5_p_sp_6_p_sp_7_p_sp_8_p_sp_9_p_sp_10_p_sp_11_p_sp_12_p_sp_13_p_sp_14_p_sp_15_p_sp_16_p_sp_17_p_sp_18_p_sp_19_p_sp_20_p_sp_21_p_sp_22_p_sp_23_p_sp_24_p_sp_25_p_sp_26_p_sp_27_p_sp_28_p_sp_29_p_sp_30_p_sp_31_p_sp_32_p_sp(CPT_InternalName *param0, Texture *param1) {
    return new ShaderInput(*param0, param1);
}


ShaderInput *
ShaderInput_C_ctor_p_si(CPT_InternalName *param0, int param1) {
    return new ShaderInput(*param0, param1);
}


ShaderInput *
ShaderInput_C_ctor_p_s(CPT_InternalName *param0) {
    return new ShaderInput(*param0);
}


ShaderInput *
ShaderInput_C_ctor_p_p(ShaderInput const *param0) {
    return new ShaderInput(*param0);
}


std::size_t
ShaderInput_C_add_hash_l_pl(ShaderInput const *param0, std::size_t param1) {
    return ((*param0).add_hash)(param1);
}


InternalName const *
ShaderInput_C_get_name_s_p(ShaderInput const *param0) {
    return ((*param0).get_name)();
}


int
ShaderInput_C_get_value_type_i_p(ShaderInput const *param0) {
    return ((*param0).get_value_type)();
}


int
ShaderInput_C_get_priority_i_p(ShaderInput const *param0) {
    return ((*param0).get_priority)();
}


LVecBase4 const *
ShaderInput_C_get_vector_p_p(ShaderInput const *param0) {
    return &(((*param0).get_vector)());
}


Shader::ShaderPtrData const *
ShaderInput_C_get_ptr_p_p(ShaderInput const *param0) {
    return &(((*param0).get_ptr)());
}


NodePath *
ShaderInput_C_get_nodepath_p_p(ShaderInput const *param0) {
    return new NodePath(((*param0).get_nodepath)());
}


Texture *
ShaderInput_C_get_texture_p_p(ShaderInput const *param0) {
    return ((*param0).get_texture)();
}


SamplerState const *
ShaderInput_C_get_sampler_p_p(ShaderInput const *param0) {
    return &(((*param0).get_sampler)());
}


ParamValueBase *
ShaderInput_C_get_param_p_p(ShaderInput const *param0) {
    return ((*param0).get_param)();
}


TypedWritableReferenceCount *
ShaderInput_C_get_value_p_p(ShaderInput const *param0) {
    return ((*param0).get_value)();
}


void
ShaderInput_C_register_with_read_factory_v_v() {
    (ShaderInput::register_with_read_factory)();
}


// SimpleLruPage


GeomVertexArrayData *
SimpleLruPage_C_downcast_to_GeomVertexArrayData_p_p(SimpleLruPage *param0) {
    return (GeomVertexArrayData *)param0;
}


// TextEncoder


TextNode *
TextEncoder_C_downcast_to_TextNode_p_p(TextEncoder *param0) {
    return (TextNode *)param0;
}


// TextFont


TypedReferenceCount *
TextFont_C_upcast_to_TypedReferenceCount_p_p(TextFont *param0) {
    return (TypedReferenceCount *)param0;
}


Namable *
TextFont_C_upcast_to_Namable_p_p(TextFont *param0) {
    return (Namable *)param0;
}


PointerTo< TextFont > *
TextFont_C_make_copy_p_p(TextFont const *param0) {
    return new PointerTo< TextFont >(((*param0).make_copy)());
}


bool
TextFont_C_is_valid_B_p(TextFont const *param0) {
    return ((*param0).is_valid)();
}


PN_stdfloat
TextFont_C_get_line_height_f_p(TextFont const *param0) {
    return ((*param0).get_line_height)();
}


void
TextFont_C_set_line_height_v_pf(TextFont *param0, PN_stdfloat param1) {
    ((*param0).set_line_height)(param1);
}


PN_stdfloat
TextFont_C_get_space_advance_f_p(TextFont const *param0) {
    return ((*param0).get_space_advance)();
}


void
TextFont_C_set_space_advance_v_pf(TextFont *param0, PN_stdfloat param1) {
    ((*param0).set_space_advance)(param1);
}


ConstPointerTo< TextGlyph > *
TextFont_C_get_glyph_p_pi(TextFont *param0, int param1) {
    return new ConstPointerTo< TextGlyph >(((*param0).get_glyph)(param1));
}


bool
TextFont_C_get_glyph_B_pip(TextFont *param0, int param1, ConstPointerTo< TextGlyph > *param2) {
    return ((*param0).get_glyph)(param1, *param2);
}


PN_stdfloat
TextFont_C_get_kerning_f_pii(TextFont const *param0, int param1, int param2) {
    return ((*param0).get_kerning)(param1, param2);
}


void
TextFont_C_write_v_ppi(TextFont const *param0, std::ostream *param1, int param2) {
    ((*param0).write)(*param1, param2);
}


PN_stdfloat
TextFont_C_get_total_poly_margin_f_p(TextFont const *param0) {
    return ((*param0).get_total_poly_margin)();
}


TextGlyph *
TextFont_C_get_invalid_glyph_p_p(TextFont *param0) {
    return ((*param0).get_invalid_glyph)();
}


TextFont::RenderMode
TextFont_C_string_render_mode_p_s(char const *param0) {
    return (TextFont::string_render_mode)(std::string(param0));
}


int
TextFont_C_get_class_type_i_v() {
    return ((TextFont::get_class_type)()).get_index();
}


void
TextFont_C_init_type_v_v() {
    (TextFont::init_type)();
}


int
TextFont_C_get_type_i_p(TextFont const *param0) {
    return (((*param0).get_type)()).get_index();
}


int
TextFont_C_force_init_type_i_p(TextFont *param0) {
    return (((*param0).force_init_type)()).get_index();
}


// TextNode


PandaNode *
TextNode_C_upcast_to_PandaNode_p_p(TextNode *param0) {
    return (PandaNode *)param0;
}


TextEncoder *
TextNode_C_upcast_to_TextEncoder_p_p(TextNode *param0) {
    return (TextEncoder *)param0;
}


TextProperties *
TextNode_C_upcast_to_TextProperties_p_p(TextNode *param0) {
    return (TextProperties *)param0;
}


TextNode *
TextNode_C_ctor_p_s(char const *param0) {
    return new TextNode(std::string(param0));
}


TextNode *
TextNode_C_ctor_p_sp(char const *param0, TextProperties const *param1) {
    return new TextNode(std::string(param0), *param1);
}


PN_stdfloat
TextNode_C_get_line_height_f_p(TextNode const *param0) {
    return ((*param0).get_line_height)();
}


void
TextNode_C_set_max_rows_v_pi(TextNode *param0, int param1) {
    ((*param0).set_max_rows)(param1);
}


void
TextNode_C_clear_max_rows_v_p(TextNode *param0) {
    ((*param0).clear_max_rows)();
}


bool
TextNode_C_has_max_rows_B_p(TextNode const *param0) {
    return ((*param0).has_max_rows)();
}


int
TextNode_C_get_max_rows_i_p(TextNode const *param0) {
    return ((*param0).get_max_rows)();
}


bool
TextNode_C_has_overflow_B_p(TextNode const *param0) {
    return ((*param0).has_overflow)();
}


void
TextNode_C_set_frame_color_v_pp(TextNode *param0, LColor const *param1) {
    ((*param0).set_frame_color)(*param1);
}


void
TextNode_C_set_frame_color_v_pffff(TextNode *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    ((*param0).set_frame_color)(param1, param2, param3, param4);
}


LColor *
TextNode_C_get_frame_color_p_p(TextNode const *param0) {
    return new LColor(((*param0).get_frame_color)());
}


void
TextNode_C_set_card_border_v_pff(TextNode *param0, PN_stdfloat param1, PN_stdfloat param2) {
    ((*param0).set_card_border)(param1, param2);
}


void
TextNode_C_clear_card_border_v_p(TextNode *param0) {
    ((*param0).clear_card_border)();
}


PN_stdfloat
TextNode_C_get_card_border_size_f_p(TextNode const *param0) {
    return ((*param0).get_card_border_size)();
}


PN_stdfloat
TextNode_C_get_card_border_uv_portion_f_p(TextNode const *param0) {
    return ((*param0).get_card_border_uv_portion)();
}


bool
TextNode_C_has_card_border_B_p(TextNode const *param0) {
    return ((*param0).has_card_border)();
}


void
TextNode_C_set_card_color_v_pp(TextNode *param0, LColor const *param1) {
    ((*param0).set_card_color)(*param1);
}


void
TextNode_C_set_card_color_v_pffff(TextNode *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    ((*param0).set_card_color)(param1, param2, param3, param4);
}


LColor *
TextNode_C_get_card_color_p_p(TextNode const *param0) {
    return new LColor(((*param0).get_card_color)());
}


void
TextNode_C_set_card_texture_v_pp(TextNode *param0, Texture *param1) {
    ((*param0).set_card_texture)(param1);
}


void
TextNode_C_clear_card_texture_v_p(TextNode *param0) {
    ((*param0).clear_card_texture)();
}


bool
TextNode_C_has_card_texture_B_p(TextNode const *param0) {
    return ((*param0).has_card_texture)();
}


Texture *
TextNode_C_get_card_texture_p_p(TextNode const *param0) {
    return ((*param0).get_card_texture)();
}


void
TextNode_C_set_frame_as_margin_v_pffff(TextNode *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    ((*param0).set_frame_as_margin)(param1, param2, param3, param4);
}


void
TextNode_C_set_frame_actual_v_pffff(TextNode *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    ((*param0).set_frame_actual)(param1, param2, param3, param4);
}


void
TextNode_C_clear_frame_v_p(TextNode *param0) {
    ((*param0).clear_frame)();
}


bool
TextNode_C_has_frame_B_p(TextNode const *param0) {
    return ((*param0).has_frame)();
}


bool
TextNode_C_is_frame_as_margin_B_p(TextNode const *param0) {
    return ((*param0).is_frame_as_margin)();
}


LVecBase4 *
TextNode_C_get_frame_as_set_p_p(TextNode const *param0) {
    return new LVecBase4(((*param0).get_frame_as_set)());
}


LVecBase4 *
TextNode_C_get_frame_actual_p_p(TextNode const *param0) {
    return new LVecBase4(((*param0).get_frame_actual)());
}


void
TextNode_C_set_frame_line_width_v_pf(TextNode *param0, PN_stdfloat param1) {
    ((*param0).set_frame_line_width)(param1);
}


PN_stdfloat
TextNode_C_get_frame_line_width_f_p(TextNode const *param0) {
    return ((*param0).get_frame_line_width)();
}


void
TextNode_C_set_frame_corners_v_pB(TextNode *param0, bool param1) {
    ((*param0).set_frame_corners)(param1);
}


bool
TextNode_C_get_frame_corners_B_p(TextNode const *param0) {
    return ((*param0).get_frame_corners)();
}


void
TextNode_C_set_card_as_margin_v_pffff(TextNode *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    ((*param0).set_card_as_margin)(param1, param2, param3, param4);
}


void
TextNode_C_set_card_actual_v_pffff(TextNode *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    ((*param0).set_card_actual)(param1, param2, param3, param4);
}


void
TextNode_C_set_card_decal_v_pB(TextNode *param0, bool param1) {
    ((*param0).set_card_decal)(param1);
}


void
TextNode_C_clear_card_v_p(TextNode *param0) {
    ((*param0).clear_card)();
}


bool
TextNode_C_has_card_B_p(TextNode const *param0) {
    return ((*param0).has_card)();
}


bool
TextNode_C_get_card_decal_B_p(TextNode const *param0) {
    return ((*param0).get_card_decal)();
}


bool
TextNode_C_is_card_as_margin_B_p(TextNode const *param0) {
    return ((*param0).is_card_as_margin)();
}


LVecBase4 *
TextNode_C_get_card_as_set_p_p(TextNode const *param0) {
    return new LVecBase4(((*param0).get_card_as_set)());
}


LVecBase4 *
TextNode_C_get_card_actual_p_p(TextNode const *param0) {
    return new LVecBase4(((*param0).get_card_actual)());
}


LVecBase4 *
TextNode_C_get_card_transformed_p_p(TextNode const *param0) {
    return new LVecBase4(((*param0).get_card_transformed)());
}


void
TextNode_C_set_transform_v_pp(TextNode *param0, LMatrix4 const *param1) {
    ((*param0).set_transform)(*param1);
}


LMatrix4 *
TextNode_C_get_transform_p_p(TextNode const *param0) {
    return new LMatrix4(((*param0).get_transform)());
}


void
TextNode_C_set_coordinate_system_v_pp(TextNode *param0, CoordinateSystem param1) {
    ((*param0).set_coordinate_system)(param1);
}


CoordinateSystem
TextNode_C_get_coordinate_system_p_p(TextNode const *param0) {
    return ((*param0).get_coordinate_system)();
}


void
TextNode_C_set_usage_hint_v_pp(TextNode *param0, GeomEnums::UsageHint param1) {
    ((*param0).set_usage_hint)(param1);
}


GeomEnums::UsageHint
TextNode_C_get_usage_hint_p_p(TextNode const *param0) {
    return ((*param0).get_usage_hint)();
}


void
TextNode_C_set_flatten_flags_v_pi(TextNode *param0, int param1) {
    ((*param0).set_flatten_flags)(param1);
}


int
TextNode_C_get_flatten_flags_i_p(TextNode const *param0) {
    return ((*param0).get_flatten_flags)();
}


void
TextNode_C_set_font_v_pp(TextNode *param0, TextFont *param1) {
    ((*param0).set_font)(param1);
}


void
TextNode_C_clear_font_v_p(TextNode *param0) {
    ((*param0).clear_font)();
}


void
TextNode_C_set_small_caps_v_pB(TextNode *param0, bool param1) {
    ((*param0).set_small_caps)(param1);
}


void
TextNode_C_clear_small_caps_v_p(TextNode *param0) {
    ((*param0).clear_small_caps)();
}


void
TextNode_C_set_small_caps_scale_v_pf(TextNode *param0, PN_stdfloat param1) {
    ((*param0).set_small_caps_scale)(param1);
}


void
TextNode_C_clear_small_caps_scale_v_p(TextNode *param0) {
    ((*param0).clear_small_caps_scale)();
}


void
TextNode_C_set_slant_v_pf(TextNode *param0, PN_stdfloat param1) {
    ((*param0).set_slant)(param1);
}


void
TextNode_C_clear_slant_v_p(TextNode *param0) {
    ((*param0).clear_slant)();
}


void
TextNode_C_set_align_v_pp(TextNode *param0, TextProperties::Alignment param1) {
    ((*param0).set_align)(param1);
}


void
TextNode_C_clear_align_v_p(TextNode *param0) {
    ((*param0).clear_align)();
}


void
TextNode_C_set_indent_v_pf(TextNode *param0, PN_stdfloat param1) {
    ((*param0).set_indent)(param1);
}


void
TextNode_C_clear_indent_v_p(TextNode *param0) {
    ((*param0).clear_indent)();
}


void
TextNode_C_set_wordwrap_v_pf(TextNode *param0, PN_stdfloat param1) {
    ((*param0).set_wordwrap)(param1);
}


void
TextNode_C_clear_wordwrap_v_p(TextNode *param0) {
    ((*param0).clear_wordwrap)();
}


void
TextNode_C_set_text_color_v_pp(TextNode *param0, LColor const *param1) {
    ((*param0).set_text_color)(*param1);
}


void
TextNode_C_set_text_color_v_pffff(TextNode *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    ((*param0).set_text_color)(param1, param2, param3, param4);
}


void
TextNode_C_clear_text_color_v_p(TextNode *param0) {
    ((*param0).clear_text_color)();
}


void
TextNode_C_set_shadow_color_v_pp(TextNode *param0, LColor const *param1) {
    ((*param0).set_shadow_color)(*param1);
}


void
TextNode_C_set_shadow_color_v_pffff(TextNode *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    ((*param0).set_shadow_color)(param1, param2, param3, param4);
}


void
TextNode_C_clear_shadow_color_v_p(TextNode *param0) {
    ((*param0).clear_shadow_color)();
}


void
TextNode_C_set_shadow_v_pp(TextNode *param0, LVecBase2 const *param1) {
    ((*param0).set_shadow)(*param1);
}


void
TextNode_C_set_shadow_v_pff(TextNode *param0, PN_stdfloat param1, PN_stdfloat param2) {
    ((*param0).set_shadow)(param1, param2);
}


void
TextNode_C_clear_shadow_v_p(TextNode *param0) {
    ((*param0).clear_shadow)();
}


void
TextNode_C_set_bin_v_ps(TextNode *param0, char const *param1) {
    ((*param0).set_bin)(std::string(param1));
}


void
TextNode_C_clear_bin_v_p(TextNode *param0) {
    ((*param0).clear_bin)();
}


int
TextNode_C_set_draw_order_i_pi(TextNode *param0, int param1) {
    return ((*param0).set_draw_order)(param1);
}


void
TextNode_C_clear_draw_order_v_p(TextNode *param0) {
    ((*param0).clear_draw_order)();
}


void
TextNode_C_set_tab_width_v_pf(TextNode *param0, PN_stdfloat param1) {
    ((*param0).set_tab_width)(param1);
}


void
TextNode_C_clear_tab_width_v_p(TextNode *param0) {
    ((*param0).clear_tab_width)();
}


void
TextNode_C_set_glyph_scale_v_pf(TextNode *param0, PN_stdfloat param1) {
    ((*param0).set_glyph_scale)(param1);
}


void
TextNode_C_clear_glyph_scale_v_p(TextNode *param0) {
    ((*param0).clear_glyph_scale)();
}


void
TextNode_C_set_glyph_shift_v_pf(TextNode *param0, PN_stdfloat param1) {
    ((*param0).set_glyph_shift)(param1);
}


void
TextNode_C_clear_glyph_shift_v_p(TextNode *param0) {
    ((*param0).clear_glyph_shift)();
}


char const *
TextNode_C_get_wordwrapped_text_s_p(TextNode const *param0) {
    static std::string string_holder = ((*param0).get_wordwrapped_text)();
    return string_holder.c_str();
}


PN_stdfloat
TextNode_C_calc_width_f_ps(TextNode const *param0, char const *param1) {
    return ((*param0).calc_width)(std::string(param1));
}


PN_stdfloat
TextNode_C_calc_width_f_ps_1_f_ps(TextNode const *param0, wchar_t const *param1) {
    return ((*param0).calc_width)(std::wstring(param1));
}


PN_stdfloat
TextNode_C_calc_width_f_pp(TextNode const *param0, wchar_t param1) {
    return ((*param0).calc_width)(param1);
}


bool
TextNode_C_has_exact_character_B_pp(TextNode const *param0, wchar_t param1) {
    return ((*param0).has_exact_character)(param1);
}


bool
TextNode_C_has_character_B_pp(TextNode const *param0, wchar_t param1) {
    return ((*param0).has_character)(param1);
}


bool
TextNode_C_is_whitespace_B_pp(TextNode const *param0, wchar_t param1) {
    return ((*param0).is_whitespace)(param1);
}


wchar_t const *
TextNode_C_get_wordwrapped_wtext_s_p(TextNode const *param0) {
    static std::wstring string_holder = ((*param0).get_wordwrapped_wtext)();
    return string_holder.c_str();
}


void
TextNode_C_output_v_pp(TextNode const *param0, std::ostream *param1) {
    ((*param0).output)(*param1);
}


void
TextNode_C_write_v_ppi(TextNode const *param0, std::ostream *param1, int param2) {
    ((*param0).write)(*param1, param2);
}


void
TextNode_C_write_v_pp(TextNode const *param0, std::ostream *param1) {
    ((*param0).write)(*param1);
}


PN_stdfloat
TextNode_C_get_left_f_p(TextNode const *param0) {
    return ((*param0).get_left)();
}


PN_stdfloat
TextNode_C_get_right_f_p(TextNode const *param0) {
    return ((*param0).get_right)();
}


PN_stdfloat
TextNode_C_get_bottom_f_p(TextNode const *param0) {
    return ((*param0).get_bottom)();
}


PN_stdfloat
TextNode_C_get_top_f_p(TextNode const *param0) {
    return ((*param0).get_top)();
}


PN_stdfloat
TextNode_C_get_height_f_p(TextNode const *param0) {
    return ((*param0).get_height)();
}


PN_stdfloat
TextNode_C_get_width_f_p(TextNode const *param0) {
    return ((*param0).get_width)();
}


LPoint3 *
TextNode_C_get_upper_left_3d_p_p(TextNode const *param0) {
    return new LPoint3(((*param0).get_upper_left_3d)());
}


LPoint3 *
TextNode_C_get_lower_right_3d_p_p(TextNode const *param0) {
    return new LPoint3(((*param0).get_lower_right_3d)());
}


int
TextNode_C_get_num_rows_i_p(TextNode const *param0) {
    return ((*param0).get_num_rows)();
}


PointerTo< PandaNode > *
TextNode_C_generate_p_p(TextNode *param0) {
    return new PointerTo< PandaNode >(((*param0).generate)());
}


void
TextNode_C_update_v_p(TextNode *param0) {
    ((*param0).update)();
}


void
TextNode_C_force_update_v_p(TextNode *param0) {
    ((*param0).force_update)();
}


PointerTo< PandaNode > *
TextNode_C_get_internal_geom_p_p(TextNode const *param0) {
    return new PointerTo< PandaNode >(((*param0).get_internal_geom)());
}


TextFont *
TextNode_C_get_font_p_p(TextNode const *param0) {
    return ((*param0).get_font)();
}


bool
TextNode_C_get_small_caps_B_p(TextNode const *param0) {
    return ((*param0).get_small_caps)();
}


PN_stdfloat
TextNode_C_get_small_caps_scale_f_p(TextNode const *param0) {
    return ((*param0).get_small_caps_scale)();
}


PN_stdfloat
TextNode_C_get_slant_f_p(TextNode const *param0) {
    return ((*param0).get_slant)();
}


bool
TextNode_C_get_underscore_B_p(TextNode const *param0) {
    return ((*param0).get_underscore)();
}


void
TextNode_C_set_underscore_v_pB(TextNode *param0, bool param1) {
    ((*param0).set_underscore)(param1);
}


PN_stdfloat
TextNode_C_get_underscore_height_f_p(TextNode const *param0) {
    return ((*param0).get_underscore_height)();
}


void
TextNode_C_set_underscore_height_v_pf(TextNode *param0, PN_stdfloat param1) {
    ((*param0).set_underscore_height)(param1);
}


TextProperties::Alignment
TextNode_C_get_align_p_p(TextNode const *param0) {
    return ((*param0).get_align)();
}


PN_stdfloat
TextNode_C_get_indent_f_p(TextNode const *param0) {
    return ((*param0).get_indent)();
}


PN_stdfloat
TextNode_C_get_wordwrap_f_p(TextNode const *param0) {
    return ((*param0).get_wordwrap)();
}


bool
TextNode_C_get_preserve_trailing_whitespace_B_p(TextNode const *param0) {
    return ((*param0).get_preserve_trailing_whitespace)();
}


void
TextNode_C_set_preserve_trailing_whitespace_v_pB(TextNode *param0, bool param1) {
    ((*param0).set_preserve_trailing_whitespace)(param1);
}


LColor *
TextNode_C_get_text_color_p_p(TextNode const *param0) {
    return new LColor(((*param0).get_text_color)());
}


LColor *
TextNode_C_get_shadow_color_p_p(TextNode const *param0) {
    return new LColor(((*param0).get_shadow_color)());
}


LVector2 *
TextNode_C_get_shadow_p_p(TextNode const *param0) {
    return new LVector2(((*param0).get_shadow)());
}


char const *
TextNode_C_get_bin_s_p(TextNode const *param0) {
    return (((*param0).get_bin)()).c_str();
}


int
TextNode_C_get_draw_order_i_p(TextNode const *param0) {
    return ((*param0).get_draw_order)();
}


PN_stdfloat
TextNode_C_get_tab_width_f_p(TextNode const *param0) {
    return ((*param0).get_tab_width)();
}


PN_stdfloat
TextNode_C_get_glyph_scale_f_p(TextNode const *param0) {
    return ((*param0).get_glyph_scale)();
}


PN_stdfloat
TextNode_C_get_glyph_shift_f_p(TextNode const *param0) {
    return ((*param0).get_glyph_shift)();
}


PN_stdfloat
TextNode_C_get_text_scale_f_p(TextNode const *param0) {
    return ((*param0).get_text_scale)();
}


void
TextNode_C_set_text_scale_v_pf(TextNode *param0, PN_stdfloat param1) {
    ((*param0).set_text_scale)(param1);
}


void
TextNode_C_text_changed_v_p(TextNode *param0) {
    ((*param0).text_changed)();
}


int
TextNode_C_get_unsafe_to_apply_attribs_i_p(TextNode const *param0) {
    return ((*param0).get_unsafe_to_apply_attribs)();
}


void
TextNode_C_apply_attribs_to_vertices_v_ppip(TextNode *param0, AccumulatedAttribs const *param1, int param2, GeomTransformer *param3) {
    ((*param0).apply_attribs_to_vertices)(*param1, param2, *param3);
}


bool
TextNode_C_cull_callback_B_ppp(TextNode *param0, CullTraverser *param1, CullTraverserData *param2) {
    return ((*param0).cull_callback)(param1, *param2);
}


bool
TextNode_C_is_renderable_B_p(TextNode const *param0) {
    return ((*param0).is_renderable)();
}


void
TextNode_C_r_prepare_scene_v_ppppp(TextNode *param0, GraphicsStateGuardianBase *param1, RenderState const *param2, GeomTransformer *param3, Thread *param4) {
    ((*param0).r_prepare_scene)(param1, param2, *param3, param4);
}


int
TextNode_C_get_class_type_i_v() {
    return ((TextNode::get_class_type)()).get_index();
}


void
TextNode_C_init_type_v_v() {
    (TextNode::init_type)();
}


int
TextNode_C_get_type_i_p(TextNode const *param0) {
    return (((*param0).get_type)()).get_index();
}


int
TextNode_C_force_init_type_i_p(TextNode *param0) {
    return (((*param0).force_init_type)()).get_index();
}


// TextProperties


TextNode *
TextProperties_C_downcast_to_TextNode_p_p(TextProperties *param0) {
    return (TextNode *)param0;
}


// Texture


TypedWritableReferenceCount *
Texture_C_upcast_to_TypedWritableReferenceCount_p_p(Texture *param0) {
    return (TypedWritableReferenceCount *)param0;
}


Namable *
Texture_C_upcast_to_Namable_p_p(Texture *param0) {
    return (Namable *)param0;
}


Texture *
Texture_C_ctor_p_s(char const *param0) {
    return new Texture(std::string(param0));
}


Texture *
Texture_C_ctor_p_v() {
    return new Texture();
}


PointerTo< Texture > *
Texture_C_make_copy_p_p(Texture const *param0) {
    return new PointerTo< Texture >(((*param0).make_copy)());
}


void
Texture_C_clear_v_p(Texture *param0) {
    ((*param0).clear)();
}


void
Texture_C_setup_texture_v_ppiiipp(Texture *param0, Texture::TextureType param1, int param2, int param3, int param4, Texture::ComponentType param5, Texture::Format param6) {
    ((*param0).setup_texture)(param1, param2, param3, param4, param5, param6);
}


void
Texture_C_setup_1d_texture_v_p(Texture *param0) {
    ((*param0).setup_1d_texture)();
}


void
Texture_C_setup_1d_texture_v_pipp(Texture *param0, int param1, Texture::ComponentType param2, Texture::Format param3) {
    ((*param0).setup_1d_texture)(param1, param2, param3);
}


void
Texture_C_setup_2d_texture_v_p(Texture *param0) {
    ((*param0).setup_2d_texture)();
}


void
Texture_C_setup_2d_texture_v_piipp(Texture *param0, int param1, int param2, Texture::ComponentType param3, Texture::Format param4) {
    ((*param0).setup_2d_texture)(param1, param2, param3, param4);
}


void
Texture_C_setup_3d_texture_v_pi(Texture *param0, int param1) {
    ((*param0).setup_3d_texture)(param1);
}


void
Texture_C_setup_3d_texture_v_p(Texture *param0) {
    ((*param0).setup_3d_texture)();
}


void
Texture_C_setup_3d_texture_v_piiipp(Texture *param0, int param1, int param2, int param3, Texture::ComponentType param4, Texture::Format param5) {
    ((*param0).setup_3d_texture)(param1, param2, param3, param4, param5);
}


void
Texture_C_setup_cube_map_v_p(Texture *param0) {
    ((*param0).setup_cube_map)();
}


void
Texture_C_setup_cube_map_v_pipp(Texture *param0, int param1, Texture::ComponentType param2, Texture::Format param3) {
    ((*param0).setup_cube_map)(param1, param2, param3);
}


void
Texture_C_setup_2d_texture_array_v_pi(Texture *param0, int param1) {
    ((*param0).setup_2d_texture_array)(param1);
}


void
Texture_C_setup_2d_texture_array_v_p(Texture *param0) {
    ((*param0).setup_2d_texture_array)();
}


void
Texture_C_setup_2d_texture_array_v_piiipp(Texture *param0, int param1, int param2, int param3, Texture::ComponentType param4, Texture::Format param5) {
    ((*param0).setup_2d_texture_array)(param1, param2, param3, param4, param5);
}


void
Texture_C_setup_cube_map_array_v_pi(Texture *param0, int param1) {
    ((*param0).setup_cube_map_array)(param1);
}


void
Texture_C_setup_cube_map_array_v_piipp(Texture *param0, int param1, int param2, Texture::ComponentType param3, Texture::Format param4) {
    ((*param0).setup_cube_map_array)(param1, param2, param3, param4);
}


void
Texture_C_setup_buffer_texture_v_pippp(Texture *param0, int param1, Texture::ComponentType param2, Texture::Format param3, GeomEnums::UsageHint param4) {
    ((*param0).setup_buffer_texture)(param1, param2, param3, param4);
}


void
Texture_C_generate_normalization_cube_map_v_pi(Texture *param0, int param1) {
    ((*param0).generate_normalization_cube_map)(param1);
}


void
Texture_C_generate_alpha_scale_map_v_p(Texture *param0) {
    ((*param0).generate_alpha_scale_map)();
}


void
Texture_C_clear_image_v_p(Texture *param0) {
    ((*param0).clear_image)();
}


bool
Texture_C_has_clear_color_B_p(Texture const *param0) {
    return ((*param0).has_clear_color)();
}


LColor *
Texture_C_get_clear_color_p_p(Texture const *param0) {
    return new LColor(((*param0).get_clear_color)());
}


void
Texture_C_set_clear_color_v_pp(Texture *param0, LColor const *param1) {
    ((*param0).set_clear_color)(*param1);
}


void
Texture_C_clear_clear_color_v_p(Texture *param0) {
    ((*param0).clear_clear_color)();
}


vector_uchar
Texture_C_get_clear_data_p_p(Texture const *param0) {
    return ((*param0).get_clear_data)();
}


bool
Texture_C_read_B_pppiip(Texture *param0, Filename const *param1, Filename const *param2, int param3, int param4, LoaderOptions const *param5) {
    return ((*param0).read)(*param1, *param2, param3, param4, *param5);
}


bool
Texture_C_read_B_pppii(Texture *param0, Filename const *param1, Filename const *param2, int param3, int param4) {
    return ((*param0).read)(*param1, *param2, param3, param4);
}


bool
Texture_C_read_B_pppiiiiBBpp(Texture *param0, Filename const *param1, Filename const *param2, int param3, int param4, int param5, int param6, bool param7, bool param8, BamCacheRecord *param9, LoaderOptions const *param10) {
    return ((*param0).read)(*param1, *param2, param3, param4, param5, param6, param7, param8, param9, *param10);
}


bool
Texture_C_read_B_pppiiiiBBp(Texture *param0, Filename const *param1, Filename const *param2, int param3, int param4, int param5, int param6, bool param7, bool param8, BamCacheRecord *param9) {
    return ((*param0).read)(*param1, *param2, param3, param4, param5, param6, param7, param8, param9);
}


bool
Texture_C_read_B_pppiiiiBB(Texture *param0, Filename const *param1, Filename const *param2, int param3, int param4, int param5, int param6, bool param7, bool param8) {
    return ((*param0).read)(*param1, *param2, param3, param4, param5, param6, param7, param8);
}


bool
Texture_C_read_B_ppp(Texture *param0, Filename const *param1, LoaderOptions const *param2) {
    return ((*param0).read)(*param1, *param2);
}


bool
Texture_C_read_B_pp(Texture *param0, Filename const *param1) {
    return ((*param0).read)(*param1);
}


bool
Texture_C_read_B_ppiiBBp(Texture *param0, Filename const *param1, int param2, int param3, bool param4, bool param5, LoaderOptions const *param6) {
    return ((*param0).read)(*param1, param2, param3, param4, param5, *param6);
}


bool
Texture_C_read_B_ppiiBB(Texture *param0, Filename const *param1, int param2, int param3, bool param4, bool param5) {
    return ((*param0).read)(*param1, param2, param3, param4, param5);
}


bool
Texture_C_write_B_pp(Texture *param0, Filename const *param1) {
    return ((*param0).write)(*param1);
}


bool
Texture_C_write_B_ppiiBB(Texture *param0, Filename const *param1, int param2, int param3, bool param4, bool param5) {
    return ((*param0).write)(*param1, param2, param3, param4, param5);
}


void
Texture_C_write_v_ppi(Texture const *param0, std::ostream *param1, int param2) {
    ((*param0).write)(*param1, param2);
}


bool
Texture_C_read_txo_B_pps(Texture *param0, std::istream *param1, char const *param2) {
    return ((*param0).read_txo)(*param1, std::string(param2));
}


bool
Texture_C_read_txo_B_pp(Texture *param0, std::istream *param1) {
    return ((*param0).read_txo)(*param1);
}


PointerTo< Texture > *
Texture_C_make_from_txo_p_ps(std::istream *param0, char const *param1) {
    return new PointerTo< Texture >((Texture::make_from_txo)(*param0, std::string(param1)));
}


PointerTo< Texture > *
Texture_C_make_from_txo_p_p(std::istream *param0) {
    return new PointerTo< Texture >((Texture::make_from_txo)(*param0));
}


bool
Texture_C_write_txo_B_pps(Texture const *param0, std::ostream *param1, char const *param2) {
    return ((*param0).write_txo)(*param1, std::string(param2));
}


bool
Texture_C_write_txo_B_pp(Texture const *param0, std::ostream *param1) {
    return ((*param0).write_txo)(*param1);
}


bool
Texture_C_read_dds_B_ppsB(Texture *param0, std::istream *param1, char const *param2, bool param3) {
    return ((*param0).read_dds)(*param1, std::string(param2), param3);
}


bool
Texture_C_read_dds_B_pps(Texture *param0, std::istream *param1, char const *param2) {
    return ((*param0).read_dds)(*param1, std::string(param2));
}


bool
Texture_C_read_dds_B_pp(Texture *param0, std::istream *param1) {
    return ((*param0).read_dds)(*param1);
}


bool
Texture_C_read_ktx_B_ppsB(Texture *param0, std::istream *param1, char const *param2, bool param3) {
    return ((*param0).read_ktx)(*param1, std::string(param2), param3);
}


bool
Texture_C_read_ktx_B_pps(Texture *param0, std::istream *param1, char const *param2) {
    return ((*param0).read_ktx)(*param1, std::string(param2));
}


bool
Texture_C_read_ktx_B_pp(Texture *param0, std::istream *param1) {
    return ((*param0).read_ktx)(*param1);
}


bool
Texture_C_load_B_ppp(Texture *param0, PNMImage const *param1, LoaderOptions const *param2) {
    return ((*param0).load)(*param1, *param2);
}


bool
Texture_C_load_B_pp(Texture *param0, PNMImage const *param1) {
    return ((*param0).load)(*param1);
}


bool
Texture_C_load_B_ppiip(Texture *param0, PNMImage const *param1, int param2, int param3, LoaderOptions const *param4) {
    return ((*param0).load)(*param1, param2, param3, *param4);
}


bool
Texture_C_load_B_ppii(Texture *param0, PNMImage const *param1, int param2, int param3) {
    return ((*param0).load)(*param1, param2, param3);
}


bool
Texture_C_load_B_ppp_1_B_ppp(Texture *param0, PfmFile const *param1, LoaderOptions const *param2) {
    return ((*param0).load)(*param1, *param2);
}


bool
Texture_C_load_B_pp_1_B_pp(Texture *param0, PfmFile const *param1) {
    return ((*param0).load)(*param1);
}


bool
Texture_C_load_B_ppiip_1_B_ppiip(Texture *param0, PfmFile const *param1, int param2, int param3, LoaderOptions const *param4) {
    return ((*param0).load)(*param1, param2, param3, *param4);
}


bool
Texture_C_load_B_ppii_1_B_ppii(Texture *param0, PfmFile const *param1, int param2, int param3) {
    return ((*param0).load)(*param1, param2, param3);
}


bool
Texture_C_load_sub_image_B_ppiiii(Texture *param0, PNMImage const *param1, int param2, int param3, int param4, int param5) {
    return ((*param0).load_sub_image)(*param1, param2, param3, param4, param5);
}


bool
Texture_C_load_sub_image_B_ppiii(Texture *param0, PNMImage const *param1, int param2, int param3, int param4) {
    return ((*param0).load_sub_image)(*param1, param2, param3, param4);
}


bool
Texture_C_load_sub_image_B_ppii(Texture *param0, PNMImage const *param1, int param2, int param3) {
    return ((*param0).load_sub_image)(*param1, param2, param3);
}


bool
Texture_C_store_B_pp(Texture const *param0, PNMImage *param1) {
    return ((*param0).store)(*param1);
}


bool
Texture_C_store_B_ppii(Texture const *param0, PNMImage *param1, int param2, int param3) {
    return ((*param0).store)(*param1, param2, param3);
}


bool
Texture_C_store_B_pp_1_B_pp(Texture const *param0, PfmFile *param1) {
    return ((*param0).store)(*param1);
}


bool
Texture_C_store_B_ppii_1_B_ppii(Texture const *param0, PfmFile *param1, int param2, int param3) {
    return ((*param0).store)(*param1, param2, param3);
}


bool
Texture_C_reload_B_p(Texture *param0) {
    return ((*param0).reload)();
}


Texture *
Texture_C_load_related_p_ps(Texture const *param0, InternalName const *param1) {
    return ((*param0).load_related)(param1);
}


bool
Texture_C_has_filename_B_p(Texture const *param0) {
    return ((*param0).has_filename)();
}


Filename const *
Texture_C_get_filename_p_p(Texture const *param0) {
    return &(((*param0).get_filename)());
}


void
Texture_C_set_filename_v_pp(Texture *param0, Filename const *param1) {
    ((*param0).set_filename)(*param1);
}


void
Texture_C_clear_filename_v_p(Texture *param0) {
    ((*param0).clear_filename)();
}


bool
Texture_C_has_alpha_filename_B_p(Texture const *param0) {
    return ((*param0).has_alpha_filename)();
}


Filename const *
Texture_C_get_alpha_filename_p_p(Texture const *param0) {
    return &(((*param0).get_alpha_filename)());
}


void
Texture_C_set_alpha_filename_v_pp(Texture *param0, Filename const *param1) {
    ((*param0).set_alpha_filename)(*param1);
}


void
Texture_C_clear_alpha_filename_v_p(Texture *param0) {
    ((*param0).clear_alpha_filename)();
}


bool
Texture_C_has_fullpath_B_p(Texture const *param0) {
    return ((*param0).has_fullpath)();
}


Filename const *
Texture_C_get_fullpath_p_p(Texture const *param0) {
    return &(((*param0).get_fullpath)());
}


void
Texture_C_set_fullpath_v_pp(Texture *param0, Filename const *param1) {
    ((*param0).set_fullpath)(*param1);
}


void
Texture_C_clear_fullpath_v_p(Texture *param0) {
    ((*param0).clear_fullpath)();
}


bool
Texture_C_has_alpha_fullpath_B_p(Texture const *param0) {
    return ((*param0).has_alpha_fullpath)();
}


Filename const *
Texture_C_get_alpha_fullpath_p_p(Texture const *param0) {
    return &(((*param0).get_alpha_fullpath)());
}


void
Texture_C_set_alpha_fullpath_v_pp(Texture *param0, Filename const *param1) {
    ((*param0).set_alpha_fullpath)(*param1);
}


void
Texture_C_clear_alpha_fullpath_v_p(Texture *param0) {
    ((*param0).clear_alpha_fullpath)();
}


int
Texture_C_get_x_size_i_p(Texture const *param0) {
    return ((*param0).get_x_size)();
}


void
Texture_C_set_x_size_v_pi(Texture *param0, int param1) {
    ((*param0).set_x_size)(param1);
}


int
Texture_C_get_y_size_i_p(Texture const *param0) {
    return ((*param0).get_y_size)();
}


void
Texture_C_set_y_size_v_pi(Texture *param0, int param1) {
    ((*param0).set_y_size)(param1);
}


int
Texture_C_get_z_size_i_p(Texture const *param0) {
    return ((*param0).get_z_size)();
}


void
Texture_C_set_z_size_v_pi(Texture *param0, int param1) {
    ((*param0).set_z_size)(param1);
}


int
Texture_C_get_num_views_i_p(Texture const *param0) {
    return ((*param0).get_num_views)();
}


void
Texture_C_set_num_views_v_pi(Texture *param0, int param1) {
    ((*param0).set_num_views)(param1);
}


int
Texture_C_get_num_pages_i_p(Texture const *param0) {
    return ((*param0).get_num_pages)();
}


int
Texture_C_get_num_components_i_p(Texture const *param0) {
    return ((*param0).get_num_components)();
}


int
Texture_C_get_component_width_i_p(Texture const *param0) {
    return ((*param0).get_component_width)();
}


Texture::TextureType
Texture_C_get_texture_type_p_p(Texture const *param0) {
    return ((*param0).get_texture_type)();
}


GeomEnums::UsageHint
Texture_C_get_usage_hint_p_p(Texture const *param0) {
    return ((*param0).get_usage_hint)();
}


Texture::Format
Texture_C_get_format_p_p(Texture const *param0) {
    return ((*param0).get_format)();
}


void
Texture_C_set_format_v_pp(Texture *param0, Texture::Format param1) {
    ((*param0).set_format)(param1);
}


Texture::ComponentType
Texture_C_get_component_type_p_p(Texture const *param0) {
    return ((*param0).get_component_type)();
}


void
Texture_C_set_component_type_v_pp(Texture *param0, Texture::ComponentType param1) {
    ((*param0).set_component_type)(param1);
}


SamplerState::WrapMode
Texture_C_get_wrap_u_p_p(Texture const *param0) {
    return ((*param0).get_wrap_u)();
}


void
Texture_C_set_wrap_u_v_pp(Texture *param0, Texture::WrapMode param1) {
    ((*param0).set_wrap_u)(param1);
}


SamplerState::WrapMode
Texture_C_get_wrap_v_p_p(Texture const *param0) {
    return ((*param0).get_wrap_v)();
}


void
Texture_C_set_wrap_v_v_pp(Texture *param0, Texture::WrapMode param1) {
    ((*param0).set_wrap_v)(param1);
}


SamplerState::WrapMode
Texture_C_get_wrap_w_p_p(Texture const *param0) {
    return ((*param0).get_wrap_w)();
}


void
Texture_C_set_wrap_w_v_pp(Texture *param0, Texture::WrapMode param1) {
    ((*param0).set_wrap_w)(param1);
}


SamplerState::FilterType
Texture_C_get_minfilter_p_p(Texture const *param0) {
    return ((*param0).get_minfilter)();
}


SamplerState::FilterType
Texture_C_get_effective_minfilter_p_p(Texture const *param0) {
    return ((*param0).get_effective_minfilter)();
}


void
Texture_C_set_minfilter_v_pp(Texture *param0, Texture::FilterType param1) {
    ((*param0).set_minfilter)(param1);
}


SamplerState::FilterType
Texture_C_get_magfilter_p_p(Texture const *param0) {
    return ((*param0).get_magfilter)();
}


SamplerState::FilterType
Texture_C_get_effective_magfilter_p_p(Texture const *param0) {
    return ((*param0).get_effective_magfilter)();
}


void
Texture_C_set_magfilter_v_pp(Texture *param0, Texture::FilterType param1) {
    ((*param0).set_magfilter)(param1);
}


int
Texture_C_get_anisotropic_degree_i_p(Texture const *param0) {
    return ((*param0).get_anisotropic_degree)();
}


int
Texture_C_get_effective_anisotropic_degree_i_p(Texture const *param0) {
    return ((*param0).get_effective_anisotropic_degree)();
}


void
Texture_C_set_anisotropic_degree_v_pi(Texture *param0, int param1) {
    ((*param0).set_anisotropic_degree)(param1);
}


LColor *
Texture_C_get_border_color_p_p(Texture const *param0) {
    return new LColor(((*param0).get_border_color)());
}


void
Texture_C_set_border_color_v_pp(Texture *param0, LColor const *param1) {
    ((*param0).set_border_color)(*param1);
}


bool
Texture_C_has_compression_B_p(Texture const *param0) {
    return ((*param0).has_compression)();
}


Texture::CompressionMode
Texture_C_get_compression_p_p(Texture const *param0) {
    return ((*param0).get_compression)();
}


void
Texture_C_set_compression_v_pp(Texture *param0, Texture::CompressionMode param1) {
    ((*param0).set_compression)(param1);
}


bool
Texture_C_get_render_to_texture_B_p(Texture const *param0) {
    return ((*param0).get_render_to_texture)();
}


void
Texture_C_set_render_to_texture_v_pB(Texture *param0, bool param1) {
    ((*param0).set_render_to_texture)(param1);
}


SamplerState const *
Texture_C_get_default_sampler_p_p(Texture const *param0) {
    return &(((*param0).get_default_sampler)());
}


void
Texture_C_set_default_sampler_v_pp(Texture *param0, SamplerState const *param1) {
    ((*param0).set_default_sampler)(*param1);
}


bool
Texture_C_uses_mipmaps_B_p(Texture const *param0) {
    return ((*param0).uses_mipmaps)();
}


Texture::QualityLevel
Texture_C_get_quality_level_p_p(Texture const *param0) {
    return ((*param0).get_quality_level)();
}


Texture::QualityLevel
Texture_C_get_effective_quality_level_p_p(Texture const *param0) {
    return ((*param0).get_effective_quality_level)();
}


void
Texture_C_set_quality_level_v_pp(Texture *param0, Texture::QualityLevel param1) {
    ((*param0).set_quality_level)(param1);
}


int
Texture_C_get_expected_num_mipmap_levels_i_p(Texture const *param0) {
    return ((*param0).get_expected_num_mipmap_levels)();
}


int
Texture_C_get_expected_mipmap_x_size_i_pi(Texture const *param0, int param1) {
    return ((*param0).get_expected_mipmap_x_size)(param1);
}


int
Texture_C_get_expected_mipmap_y_size_i_pi(Texture const *param0, int param1) {
    return ((*param0).get_expected_mipmap_y_size)(param1);
}


int
Texture_C_get_expected_mipmap_z_size_i_pi(Texture const *param0, int param1) {
    return ((*param0).get_expected_mipmap_z_size)(param1);
}


int
Texture_C_get_expected_mipmap_num_pages_i_pi(Texture const *param0, int param1) {
    return ((*param0).get_expected_mipmap_num_pages)(param1);
}


bool
Texture_C_has_ram_image_B_p(Texture const *param0) {
    return ((*param0).has_ram_image)();
}


bool
Texture_C_has_uncompressed_ram_image_B_p(Texture const *param0) {
    return ((*param0).has_uncompressed_ram_image)();
}


bool
Texture_C_might_have_ram_image_B_p(Texture const *param0) {
    return ((*param0).might_have_ram_image)();
}


std::size_t
Texture_C_get_ram_image_size_l_p(Texture const *param0) {
    return ((*param0).get_ram_image_size)();
}


std::size_t
Texture_C_get_ram_view_size_l_p(Texture const *param0) {
    return ((*param0).get_ram_view_size)();
}


std::size_t
Texture_C_get_ram_page_size_l_p(Texture const *param0) {
    return ((*param0).get_ram_page_size)();
}


std::size_t
Texture_C_get_expected_ram_image_size_l_p(Texture const *param0) {
    return ((*param0).get_expected_ram_image_size)();
}


std::size_t
Texture_C_get_expected_ram_page_size_l_p(Texture const *param0) {
    return ((*param0).get_expected_ram_page_size)();
}


CPTA_uchar *
Texture_C_get_ram_image_p_p(Texture *param0) {
    return new CPTA_uchar(((*param0).get_ram_image)());
}


Texture::CompressionMode
Texture_C_get_ram_image_compression_p_p(Texture const *param0) {
    return ((*param0).get_ram_image_compression)();
}


CPTA_uchar *
Texture_C_get_uncompressed_ram_image_p_p(Texture *param0) {
    return new CPTA_uchar(((*param0).get_uncompressed_ram_image)());
}


CPTA_uchar *
Texture_C_get_ram_image_as_p_ps(Texture *param0, char const *param1) {
    return new CPTA_uchar(((*param0).get_ram_image_as)(std::string(param1)));
}


PTA_uchar *
Texture_C_modify_ram_image_p_p(Texture *param0) {
    return new PTA_uchar(((*param0).modify_ram_image)());
}


PTA_uchar *
Texture_C_make_ram_image_p_p(Texture *param0) {
    return new PTA_uchar(((*param0).make_ram_image)());
}


void
Texture_C_clear_ram_image_v_p(Texture *param0) {
    ((*param0).clear_ram_image)();
}


void
Texture_C_set_keep_ram_image_v_pB(Texture *param0, bool param1) {
    ((*param0).set_keep_ram_image)(param1);
}


bool
Texture_C_get_keep_ram_image_B_p(Texture const *param0) {
    return ((*param0).get_keep_ram_image)();
}


bool
Texture_C_is_cacheable_B_p(Texture const *param0) {
    return ((*param0).is_cacheable)();
}


bool
Texture_C_compress_ram_image_B_pppp(Texture *param0, Texture::CompressionMode param1, Texture::QualityLevel param2, GraphicsStateGuardianBase *param3) {
    return ((*param0).compress_ram_image)(param1, param2, param3);
}


bool
Texture_C_compress_ram_image_B_ppp(Texture *param0, Texture::CompressionMode param1, Texture::QualityLevel param2) {
    return ((*param0).compress_ram_image)(param1, param2);
}


bool
Texture_C_compress_ram_image_B_pp(Texture *param0, Texture::CompressionMode param1) {
    return ((*param0).compress_ram_image)(param1);
}


bool
Texture_C_compress_ram_image_B_p(Texture *param0) {
    return ((*param0).compress_ram_image)();
}


bool
Texture_C_uncompress_ram_image_B_p(Texture *param0) {
    return ((*param0).uncompress_ram_image)();
}


int
Texture_C_get_num_ram_mipmap_images_i_p(Texture const *param0) {
    return ((*param0).get_num_ram_mipmap_images)();
}


bool
Texture_C_has_ram_mipmap_image_B_pi(Texture const *param0, int param1) {
    return ((*param0).has_ram_mipmap_image)(param1);
}


int
Texture_C_get_num_loadable_ram_mipmap_images_i_p(Texture const *param0) {
    return ((*param0).get_num_loadable_ram_mipmap_images)();
}


bool
Texture_C_has_all_ram_mipmap_images_B_p(Texture const *param0) {
    return ((*param0).has_all_ram_mipmap_images)();
}


std::size_t
Texture_C_get_ram_mipmap_image_size_l_pi(Texture const *param0, int param1) {
    return ((*param0).get_ram_mipmap_image_size)(param1);
}


std::size_t
Texture_C_get_ram_mipmap_view_size_l_pi(Texture const *param0, int param1) {
    return ((*param0).get_ram_mipmap_view_size)(param1);
}


std::size_t
Texture_C_get_ram_mipmap_page_size_l_pi(Texture const *param0, int param1) {
    return ((*param0).get_ram_mipmap_page_size)(param1);
}


std::size_t
Texture_C_get_expected_ram_mipmap_image_size_l_pi(Texture const *param0, int param1) {
    return ((*param0).get_expected_ram_mipmap_image_size)(param1);
}


std::size_t
Texture_C_get_expected_ram_mipmap_view_size_l_pi(Texture const *param0, int param1) {
    return ((*param0).get_expected_ram_mipmap_view_size)(param1);
}


std::size_t
Texture_C_get_expected_ram_mipmap_page_size_l_pi(Texture const *param0, int param1) {
    return ((*param0).get_expected_ram_mipmap_page_size)(param1);
}


CPTA_uchar *
Texture_C_get_ram_mipmap_image_p_pi(Texture const *param0, int param1) {
    return new CPTA_uchar(((*param0).get_ram_mipmap_image)(param1));
}


void
Texture_C_get_ram_mipmap_pointer_v_pi(Texture const *param0, int param1) {
    ((*param0).get_ram_mipmap_pointer)(param1);
}


PTA_uchar *
Texture_C_modify_ram_mipmap_image_p_pi(Texture *param0, int param1) {
    return new PTA_uchar(((*param0).modify_ram_mipmap_image)(param1));
}


PTA_uchar *
Texture_C_make_ram_mipmap_image_p_pi(Texture *param0, int param1) {
    return new PTA_uchar(((*param0).make_ram_mipmap_image)(param1));
}


void
Texture_C_set_ram_mipmap_pointer_from_int_v_ppii(Texture *param0, long long int param1, int param2, int param3) {
    ((*param0).set_ram_mipmap_pointer_from_int)(param1, param2, param3);
}


void
Texture_C_set_ram_mipmap_image_v_pipl(Texture *param0, int param1, CPTA_uchar *param2, std::size_t param3) {
    ((*param0).set_ram_mipmap_image)(param1, *param2, param3);
}


void
Texture_C_set_ram_mipmap_image_v_pip(Texture *param0, int param1, CPTA_uchar *param2) {
    ((*param0).set_ram_mipmap_image)(param1, *param2);
}


void
Texture_C_clear_ram_mipmap_image_v_pi(Texture *param0, int param1) {
    ((*param0).clear_ram_mipmap_image)(param1);
}


void
Texture_C_clear_ram_mipmap_images_v_p(Texture *param0) {
    ((*param0).clear_ram_mipmap_images)();
}


void
Texture_C_generate_ram_mipmap_images_v_p(Texture *param0) {
    ((*param0).generate_ram_mipmap_images)();
}


int
Texture_C_get_simple_x_size_i_p(Texture const *param0) {
    return ((*param0).get_simple_x_size)();
}


int
Texture_C_get_simple_y_size_i_p(Texture const *param0) {
    return ((*param0).get_simple_y_size)();
}


bool
Texture_C_has_simple_ram_image_B_p(Texture const *param0) {
    return ((*param0).has_simple_ram_image)();
}


std::size_t
Texture_C_get_simple_ram_image_size_l_p(Texture const *param0) {
    return ((*param0).get_simple_ram_image_size)();
}


CPTA_uchar *
Texture_C_get_simple_ram_image_p_p(Texture const *param0) {
    return new CPTA_uchar(((*param0).get_simple_ram_image)());
}


void
Texture_C_set_simple_ram_image_v_ppii(Texture *param0, CPTA_uchar *param1, int param2, int param3) {
    ((*param0).set_simple_ram_image)(*param1, param2, param3);
}


PTA_uchar *
Texture_C_modify_simple_ram_image_p_p(Texture *param0) {
    return new PTA_uchar(((*param0).modify_simple_ram_image)());
}


PTA_uchar *
Texture_C_new_simple_ram_image_p_pii(Texture *param0, int param1, int param2) {
    return new PTA_uchar(((*param0).new_simple_ram_image)(param1, param2));
}


void
Texture_C_generate_simple_ram_image_v_p(Texture *param0) {
    ((*param0).generate_simple_ram_image)();
}


void
Texture_C_clear_simple_ram_image_v_p(Texture *param0) {
    ((*param0).clear_simple_ram_image)();
}


PointerTo< TexturePeeker > *
Texture_C_peek_p_p(Texture *param0) {
    return new PointerTo< TexturePeeker >(((*param0).peek)());
}


UpdateSeq *
Texture_C_get_properties_modified_p_p(Texture const *param0) {
    return new UpdateSeq(((*param0).get_properties_modified)());
}


UpdateSeq *
Texture_C_get_image_modified_p_p(Texture const *param0) {
    return new UpdateSeq(((*param0).get_image_modified)());
}


UpdateSeq *
Texture_C_get_simple_image_modified_p_p(Texture const *param0) {
    return new UpdateSeq(((*param0).get_simple_image_modified)());
}


bool
Texture_C_has_auto_texture_scale_B_p(Texture const *param0) {
    return ((*param0).has_auto_texture_scale)();
}


AutoTextureScale
Texture_C_get_auto_texture_scale_p_p(Texture const *param0) {
    return ((*param0).get_auto_texture_scale)();
}


void
Texture_C_set_auto_texture_scale_v_pp(Texture *param0, AutoTextureScale param1) {
    ((*param0).set_auto_texture_scale)(param1);
}


PointerTo< AsyncFuture > *
Texture_C_prepare_p_pp(Texture *param0, PreparedGraphicsObjects *param1) {
    return new PointerTo< AsyncFuture >(((*param0).prepare)(param1));
}


bool
Texture_C_is_prepared_B_pp(Texture const *param0, PreparedGraphicsObjects *param1) {
    return ((*param0).is_prepared)(param1);
}


bool
Texture_C_was_image_modified_B_pp(Texture const *param0, PreparedGraphicsObjects *param1) {
    return ((*param0).was_image_modified)(param1);
}


std::size_t
Texture_C_get_data_size_bytes_l_pp(Texture const *param0, PreparedGraphicsObjects *param1) {
    return ((*param0).get_data_size_bytes)(param1);
}


bool
Texture_C_get_active_B_pp(Texture const *param0, PreparedGraphicsObjects *param1) {
    return ((*param0).get_active)(param1);
}


bool
Texture_C_get_resident_B_pp(Texture const *param0, PreparedGraphicsObjects *param1) {
    return ((*param0).get_resident)(param1);
}


bool
Texture_C_release_B_pp(Texture *param0, PreparedGraphicsObjects *param1) {
    return ((*param0).release)(param1);
}


int
Texture_C_release_all_i_p(Texture *param0) {
    return ((*param0).release_all)();
}


std::size_t
Texture_C_estimate_texture_memory_l_p(Texture const *param0) {
    return ((*param0).estimate_texture_memory)();
}


void
Texture_C_set_aux_data_v_psp(Texture *param0, char const *param1, TypedReferenceCount *param2) {
    ((*param0).set_aux_data)(std::string(param1), param2);
}


void
Texture_C_clear_aux_data_v_ps(Texture *param0, char const *param1) {
    ((*param0).clear_aux_data)(std::string(param1));
}


TypedReferenceCount *
Texture_C_get_aux_data_p_ps(Texture const *param0, char const *param1) {
    return ((*param0).get_aux_data)(std::string(param1));
}


void
Texture_C_set_textures_power_2_v_p(AutoTextureScale param0) {
    (Texture::set_textures_power_2)(param0);
}


AutoTextureScale
Texture_C_get_textures_power_2_p_v() {
    return (Texture::get_textures_power_2)();
}


bool
Texture_C_has_textures_power_2_B_v() {
    return (Texture::has_textures_power_2)();
}


int
Texture_C_get_pad_x_size_i_p(Texture const *param0) {
    return ((*param0).get_pad_x_size)();
}


int
Texture_C_get_pad_y_size_i_p(Texture const *param0) {
    return ((*param0).get_pad_y_size)();
}


int
Texture_C_get_pad_z_size_i_p(Texture const *param0) {
    return ((*param0).get_pad_z_size)();
}


LVecBase2 *
Texture_C_get_tex_scale_p_p(Texture const *param0) {
    return new LVecBase2(((*param0).get_tex_scale)());
}


void
Texture_C_set_pad_size_v_piii(Texture *param0, int param1, int param2, int param3) {
    ((*param0).set_pad_size)(param1, param2, param3);
}


void
Texture_C_set_pad_size_v_pii(Texture *param0, int param1, int param2) {
    ((*param0).set_pad_size)(param1, param2);
}


void
Texture_C_set_pad_size_v_pi(Texture *param0, int param1) {
    ((*param0).set_pad_size)(param1);
}


void
Texture_C_set_pad_size_v_p(Texture *param0) {
    ((*param0).set_pad_size)();
}


void
Texture_C_set_size_padded_v_piii(Texture *param0, int param1, int param2, int param3) {
    ((*param0).set_size_padded)(param1, param2, param3);
}


void
Texture_C_set_size_padded_v_pii(Texture *param0, int param1, int param2) {
    ((*param0).set_size_padded)(param1, param2);
}


void
Texture_C_set_size_padded_v_pi(Texture *param0, int param1) {
    ((*param0).set_size_padded)(param1);
}


void
Texture_C_set_size_padded_v_p(Texture *param0) {
    ((*param0).set_size_padded)();
}


int
Texture_C_get_orig_file_x_size_i_p(Texture const *param0) {
    return ((*param0).get_orig_file_x_size)();
}


int
Texture_C_get_orig_file_y_size_i_p(Texture const *param0) {
    return ((*param0).get_orig_file_y_size)();
}


int
Texture_C_get_orig_file_z_size_i_p(Texture const *param0) {
    return ((*param0).get_orig_file_z_size)();
}


void
Texture_C_set_orig_file_size_v_piii(Texture *param0, int param1, int param2, int param3) {
    ((*param0).set_orig_file_size)(param1, param2, param3);
}


void
Texture_C_set_orig_file_size_v_pii(Texture *param0, int param1, int param2) {
    ((*param0).set_orig_file_size)(param1, param2);
}


void
Texture_C_set_loaded_from_image_v_pB(Texture *param0, bool param1) {
    ((*param0).set_loaded_from_image)(param1);
}


void
Texture_C_set_loaded_from_image_v_p(Texture *param0) {
    ((*param0).set_loaded_from_image)();
}


bool
Texture_C_get_loaded_from_image_B_p(Texture const *param0) {
    return ((*param0).get_loaded_from_image)();
}


void
Texture_C_set_loaded_from_txo_v_pB(Texture *param0, bool param1) {
    ((*param0).set_loaded_from_txo)(param1);
}


void
Texture_C_set_loaded_from_txo_v_p(Texture *param0) {
    ((*param0).set_loaded_from_txo)();
}


bool
Texture_C_get_loaded_from_txo_B_p(Texture const *param0) {
    return ((*param0).get_loaded_from_txo)();
}


bool
Texture_C_get_match_framebuffer_format_B_p(Texture const *param0) {
    return ((*param0).get_match_framebuffer_format)();
}


void
Texture_C_set_match_framebuffer_format_v_pB(Texture *param0, bool param1) {
    ((*param0).set_match_framebuffer_format)(param1);
}


bool
Texture_C_get_post_load_store_cache_B_p(Texture const *param0) {
    return ((*param0).get_post_load_store_cache)();
}


void
Texture_C_set_post_load_store_cache_v_pB(Texture *param0, bool param1) {
    ((*param0).set_post_load_store_cache)(param1);
}


TextureContext *
Texture_C_prepare_now_p_pipp(Texture *param0, int param1, PreparedGraphicsObjects *param2, GraphicsStateGuardianBase *param3) {
    return ((*param0).prepare_now)(param1, param2, param3);
}


int
Texture_C_up_to_power_2_i_i(int param0) {
    return (Texture::up_to_power_2)(param0);
}


int
Texture_C_down_to_power_2_i_i(int param0) {
    return (Texture::down_to_power_2)(param0);
}


void
Texture_C_consider_rescale_v_pp(Texture *param0, PNMImage *param1) {
    ((*param0).consider_rescale)(*param1);
}


void
Texture_C_consider_rescale_v_psp(PNMImage *param0, char const *param1, AutoTextureScale param2) {
    (Texture::consider_rescale)(*param0, std::string(param1), param2);
}


void
Texture_C_consider_rescale_v_ps(PNMImage *param0, char const *param1) {
    (Texture::consider_rescale)(*param0, std::string(param1));
}


bool
Texture_C_rescale_texture_B_p(Texture *param0) {
    return ((*param0).rescale_texture)();
}


char const *
Texture_C_format_texture_type_s_p(Texture::TextureType param0) {
    static std::string string_holder = (Texture::format_texture_type)(param0);
    return string_holder.c_str();
}


Texture::TextureType
Texture_C_string_texture_type_p_s(char const *param0) {
    return (Texture::string_texture_type)(std::string(param0));
}


char const *
Texture_C_format_component_type_s_p(Texture::ComponentType param0) {
    static std::string string_holder = (Texture::format_component_type)(param0);
    return string_holder.c_str();
}


Texture::ComponentType
Texture_C_string_component_type_p_s(char const *param0) {
    return (Texture::string_component_type)(std::string(param0));
}


char const *
Texture_C_format_format_s_p(Texture::Format param0) {
    static std::string string_holder = (Texture::format_format)(param0);
    return string_holder.c_str();
}


Texture::Format
Texture_C_string_format_p_s(char const *param0) {
    return (Texture::string_format)(std::string(param0));
}


char const *
Texture_C_format_compression_mode_s_p(Texture::CompressionMode param0) {
    static std::string string_holder = (Texture::format_compression_mode)(param0);
    return string_holder.c_str();
}


Texture::CompressionMode
Texture_C_string_compression_mode_p_s(char const *param0) {
    return (Texture::string_compression_mode)(std::string(param0));
}


char const *
Texture_C_format_quality_level_s_p(Texture::QualityLevel param0) {
    static std::string string_holder = (Texture::format_quality_level)(param0);
    return string_holder.c_str();
}


Texture::QualityLevel
Texture_C_string_quality_level_p_s(char const *param0) {
    return (Texture::string_quality_level)(std::string(param0));
}


void
Texture_C_texture_uploaded_v_p(Texture *param0) {
    ((*param0).texture_uploaded)();
}


bool
Texture_C_has_cull_callback_B_p(Texture const *param0) {
    return ((*param0).has_cull_callback)();
}


bool
Texture_C_cull_callback_B_ppp(Texture const *param0, CullTraverser *param1, CullTraverserData const *param2) {
    return ((*param0).cull_callback)(param1, *param2);
}


PointerTo< Texture > *
Texture_C_make_texture_p_v() {
    return new PointerTo< Texture >((Texture::make_texture)());
}


bool
Texture_C_is_unsigned_B_p(Texture::ComponentType param0) {
    return (Texture::is_unsigned)(param0);
}


bool
Texture_C_is_specific_B_p(Texture::CompressionMode param0) {
    return (Texture::is_specific)(param0);
}


bool
Texture_C_has_alpha_B_p(Texture::Format param0) {
    return (Texture::has_alpha)(param0);
}


bool
Texture_C_has_binary_alpha_B_p(Texture::Format param0) {
    return (Texture::has_binary_alpha)(param0);
}


bool
Texture_C_is_srgb_B_p(Texture::Format param0) {
    return (Texture::is_srgb)(param0);
}


void
Texture_C_ensure_loader_type_v_pp(Texture *param0, Filename const *param1) {
    ((*param0).ensure_loader_type)(*param1);
}


void
Texture_C_register_with_read_factory_v_v() {
    (Texture::register_with_read_factory)();
}


void
Texture_C_write_datagram_v_ppp(Texture *param0, BamWriter *param1, Datagram *param2) {
    ((*param0).write_datagram)(param1, *param2);
}


void
Texture_C_finalize_v_pp(Texture *param0, BamReader *param1) {
    ((*param0).finalize)(param1);
}


int
Texture_C_get_class_type_i_v() {
    return ((Texture::get_class_type)()).get_index();
}


void
Texture_C_init_type_v_v() {
    (Texture::init_type)();
}


int
Texture_C_get_type_i_p(Texture const *param0) {
    return (((*param0).get_type)()).get_index();
}


int
Texture_C_force_init_type_i_p(Texture *param0) {
    return (((*param0).force_init_type)()).get_index();
}


// TextureCollection


TextureCollection *
TextureCollection_C_ctor_p_v() {
    return new TextureCollection();
}


TextureCollection *
TextureCollection_C_ctor_p_p(TextureCollection const *param0) {
    return new TextureCollection(*param0);
}


void
TextureCollection_C_add_texture_v_pp(TextureCollection *param0, Texture *param1) {
    ((*param0).add_texture)(param1);
}


bool
TextureCollection_C_remove_texture_B_pp(TextureCollection *param0, Texture *param1) {
    return ((*param0).remove_texture)(param1);
}


void
TextureCollection_C_add_textures_from_v_pp(TextureCollection *param0, TextureCollection const *param1) {
    ((*param0).add_textures_from)(*param1);
}


void
TextureCollection_C_remove_textures_from_v_pp(TextureCollection *param0, TextureCollection const *param1) {
    ((*param0).remove_textures_from)(*param1);
}


void
TextureCollection_C_remove_duplicate_textures_v_p(TextureCollection *param0) {
    ((*param0).remove_duplicate_textures)();
}


bool
TextureCollection_C_has_texture_B_pp(TextureCollection const *param0, Texture *param1) {
    return ((*param0).has_texture)(param1);
}


void
TextureCollection_C_clear_v_p(TextureCollection *param0) {
    ((*param0).clear)();
}


void
TextureCollection_C_reserve_v_pl(TextureCollection *param0, std::size_t param1) {
    ((*param0).reserve)(param1);
}


Texture *
TextureCollection_C_find_texture_p_ps(TextureCollection const *param0, char const *param1) {
    return ((*param0).find_texture)(std::string(param1));
}


int
TextureCollection_C_get_num_textures_i_p(TextureCollection const *param0) {
    return ((*param0).get_num_textures)();
}


Texture *
TextureCollection_C_get_texture_p_pi(TextureCollection const *param0, int param1) {
    return ((*param0).get_texture)(param1);
}


int
TextureCollection_C_size_i_p(TextureCollection const *param0) {
    return ((*param0).size)();
}


void
TextureCollection_C_append_v_pp(TextureCollection *param0, Texture *param1) {
    ((*param0).append)(param1);
}


void
TextureCollection_C_extend_v_pp(TextureCollection *param0, TextureCollection const *param1) {
    ((*param0).extend)(*param1);
}


void
TextureCollection_C_output_v_pp(TextureCollection const *param0, std::ostream *param1) {
    ((*param0).output)(*param1);
}


void
TextureCollection_C_write_v_ppi(TextureCollection const *param0, std::ostream *param1, int param2) {
    ((*param0).write)(*param1, param2);
}


void
TextureCollection_C_write_v_pp(TextureCollection const *param0, std::ostream *param1) {
    ((*param0).write)(*param1);
}


// TexturePeeker


bool
TexturePeeker_C_is_valid_B_p(TexturePeeker const *param0) {
    return ((*param0).is_valid)();
}


int
TexturePeeker_C_get_x_size_i_p(TexturePeeker const *param0) {
    return ((*param0).get_x_size)();
}


int
TexturePeeker_C_get_y_size_i_p(TexturePeeker const *param0) {
    return ((*param0).get_y_size)();
}


int
TexturePeeker_C_get_z_size_i_p(TexturePeeker const *param0) {
    return ((*param0).get_z_size)();
}


bool
TexturePeeker_C_has_pixel_B_pii(TexturePeeker const *param0, int param1, int param2) {
    return ((*param0).has_pixel)(param1, param2);
}


void
TexturePeeker_C_lookup_v_ppff(TexturePeeker const *param0, LColor *param1, PN_stdfloat param2, PN_stdfloat param3) {
    ((*param0).lookup)(*param1, param2, param3);
}


void
TexturePeeker_C_lookup_v_ppfff(TexturePeeker const *param0, LColor *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4) {
    ((*param0).lookup)(*param1, param2, param3, param4);
}


void
TexturePeeker_C_fetch_pixel_v_ppii(TexturePeeker const *param0, LColor *param1, int param2, int param3) {
    ((*param0).fetch_pixel)(*param1, param2, param3);
}


bool
TexturePeeker_C_lookup_bilinear_B_ppff(TexturePeeker const *param0, LColor *param1, PN_stdfloat param2, PN_stdfloat param3) {
    return ((*param0).lookup_bilinear)(*param1, param2, param3);
}


void
TexturePeeker_C_filter_rect_v_ppffff(TexturePeeker const *param0, LColor *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5) {
    ((*param0).filter_rect)(*param1, param2, param3, param4, param5);
}


void
TexturePeeker_C_filter_rect_v_ppffffff(TexturePeeker const *param0, LColor *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5, PN_stdfloat param6, PN_stdfloat param7) {
    ((*param0).filter_rect)(*param1, param2, param3, param4, param5, param6, param7);
}


TexturePeeker *
TexturePeeker_C_ctor_p_p(TexturePeeker const *param0) {
    return new TexturePeeker(*param0);
}


// Thread


TypedReferenceCount *
Thread_C_upcast_to_TypedReferenceCount_p_p(Thread *param0) {
    return (TypedReferenceCount *)param0;
}


Namable *
Thread_C_upcast_to_Namable_p_p(Thread *param0) {
    return (Namable *)param0;
}


PointerTo< Thread > *
Thread_C_bind_thread_p_ss(char const *param0, char const *param1) {
    return new PointerTo< Thread >((Thread::bind_thread)(std::string(param0), std::string(param1)));
}


char const *
Thread_C_get_sync_name_s_p(Thread const *param0) {
    return (((*param0).get_sync_name)()).c_str();
}


int
Thread_C_get_pstats_index_i_p(Thread const *param0) {
    return ((*param0).get_pstats_index)();
}


int
Thread_C_get_python_index_i_p(Thread const *param0) {
    return ((*param0).get_python_index)();
}


char const *
Thread_C_get_unique_id_s_p(Thread const *param0) {
    static std::string string_holder = ((*param0).get_unique_id)();
    return string_holder.c_str();
}


int
Thread_C_get_pipeline_stage_i_p(Thread const *param0) {
    return ((*param0).get_pipeline_stage)();
}


void
Thread_C_set_pipeline_stage_v_pi(Thread *param0, int param1) {
    ((*param0).set_pipeline_stage)(param1);
}


void
Thread_C_set_min_pipeline_stage_v_pi(Thread *param0, int param1) {
    ((*param0).set_min_pipeline_stage)(param1);
}


Thread *
Thread_C_get_main_thread_p_v() {
    return (Thread::get_main_thread)();
}


Thread *
Thread_C_get_external_thread_p_v() {
    return (Thread::get_external_thread)();
}


Thread *
Thread_C_get_current_thread_p_v() {
    return (Thread::get_current_thread)();
}


int
Thread_C_get_current_pipeline_stage_i_v() {
    return (Thread::get_current_pipeline_stage)();
}


bool
Thread_C_is_threading_supported_B_v() {
    return (Thread::is_threading_supported)();
}


bool
Thread_C_is_true_threads_B_v() {
    return (Thread::is_true_threads)();
}


bool
Thread_C_is_simple_threads_B_v() {
    return (Thread::is_simple_threads)();
}


void
Thread_C_sleep_v_d(double param0) {
    (Thread::sleep)(param0);
}


void
Thread_C_force_yield_v_v() {
    (Thread::force_yield)();
}


void
Thread_C_consider_yield_v_v() {
    (Thread::consider_yield)();
}


void
Thread_C_output_v_pp(Thread const *param0, std::ostream *param1) {
    ((*param0).output)(*param1);
}


void
Thread_C_output_blocker_v_pp(Thread const *param0, std::ostream *param1) {
    ((*param0).output_blocker)(*param1);
}


void
Thread_C_write_status_v_p(std::ostream *param0) {
    (Thread::write_status)(*param0);
}


bool
Thread_C_is_started_B_p(Thread const *param0) {
    return ((*param0).is_started)();
}


bool
Thread_C_is_joinable_B_p(Thread const *param0) {
    return ((*param0).is_joinable)();
}


bool
Thread_C_start_B_ppB(Thread *param0, ThreadPriority param1, bool param2) {
    return ((*param0).start)(param1, param2);
}


void
Thread_C_join_v_p(Thread *param0) {
    ((*param0).join)();
}


void
Thread_C_preempt_v_p(Thread *param0) {
    ((*param0).preempt)();
}


TypedReferenceCount *
Thread_C_get_current_task_p_p(Thread const *param0) {
    return ((*param0).get_current_task)();
}


void
Thread_C_set_python_index_v_pi(Thread *param0, int param1) {
    ((*param0).set_python_index)(param1);
}


void
Thread_C_prepare_for_exit_v_v() {
    (Thread::prepare_for_exit)();
}


void
Thread_C_set_pstats_index_v_pi(Thread *param0, int param1) {
    ((*param0).set_pstats_index)(param1);
}


void
Thread_C_set_pstats_callback_v_pp(Thread *param0, Thread::PStatsCallback *param1) {
    ((*param0).set_pstats_callback)(param1);
}


Thread::PStatsCallback *
Thread_C_get_pstats_callback_p_p(Thread const *param0) {
    return ((*param0).get_pstats_callback)();
}


int
Thread_C_get_class_type_i_v() {
    return ((Thread::get_class_type)()).get_index();
}


void
Thread_C_init_type_v_v() {
    (Thread::init_type)();
}


int
Thread_C_get_type_i_p(Thread const *param0) {
    return (((*param0).get_type)()).get_index();
}


int
Thread_C_force_init_type_i_p(Thread *param0) {
    return (((*param0).force_init_type)()).get_index();
}


// TouchInfo


TouchInfo *
TouchInfo_C_ctor_p_v() {
    return new TouchInfo();
}


TouchInfo *
TouchInfo_C_ctor_p_p(TouchInfo const *param0) {
    return new TouchInfo(*param0);
}


void
TouchInfo_C_set_x_v_pi(TouchInfo *param0, int param1) {
    ((*param0).set_x)(param1);
}


void
TouchInfo_C_set_y_v_pi(TouchInfo *param0, int param1) {
    ((*param0).set_y)(param1);
}


void
TouchInfo_C_set_id_v_pi(TouchInfo *param0, int param1) {
    ((*param0).set_id)(param1);
}


void
TouchInfo_C_set_flags_v_pi(TouchInfo *param0, int param1) {
    ((*param0).set_flags)(param1);
}


int
TouchInfo_C_get_x_i_p(TouchInfo *param0) {
    return ((*param0).get_x)();
}


int
TouchInfo_C_get_y_i_p(TouchInfo *param0) {
    return ((*param0).get_y)();
}


int
TouchInfo_C_get_id_i_p(TouchInfo *param0) {
    return ((*param0).get_id)();
}


int
TouchInfo_C_get_flags_i_p(TouchInfo *param0) {
    return ((*param0).get_flags)();
}


// TransformState


int
TransformState_C_compare_to_i_pp(TransformState const *param0, TransformState const *param1) {
    return ((*param0).compare_to)(*param1);
}


int
TransformState_C_compare_to_i_ppB(TransformState const *param0, TransformState const *param1, bool param2) {
    return ((*param0).compare_to)(*param1, param2);
}


std::size_t
TransformState_C_get_hash_l_p(TransformState const *param0) {
    return ((*param0).get_hash)();
}


ConstPointerTo< TransformState > *
TransformState_C_make_identity_p_v() {
    return new ConstPointerTo< TransformState >((TransformState::make_identity)());
}


ConstPointerTo< TransformState > *
TransformState_C_make_invalid_p_v() {
    return new ConstPointerTo< TransformState >((TransformState::make_invalid)());
}


ConstPointerTo< TransformState > *
TransformState_C_make_pos_p_p(LVecBase3 const *param0) {
    return new ConstPointerTo< TransformState >((TransformState::make_pos)(*param0));
}


ConstPointerTo< TransformState > *
TransformState_C_make_hpr_p_p(LVecBase3 const *param0) {
    return new ConstPointerTo< TransformState >((TransformState::make_hpr)(*param0));
}


ConstPointerTo< TransformState > *
TransformState_C_make_quat_p_p(LQuaternion const *param0) {
    return new ConstPointerTo< TransformState >((TransformState::make_quat)(*param0));
}


ConstPointerTo< TransformState > *
TransformState_C_make_pos_hpr_p_pp(LVecBase3 const *param0, LVecBase3 const *param1) {
    return new ConstPointerTo< TransformState >((TransformState::make_pos_hpr)(*param0, *param1));
}


ConstPointerTo< TransformState > *
TransformState_C_make_scale_p_p(LVecBase3 const *param0) {
    return new ConstPointerTo< TransformState >((TransformState::make_scale)(*param0));
}


ConstPointerTo< TransformState > *
TransformState_C_make_scale_p_f(PN_stdfloat param0) {
    return new ConstPointerTo< TransformState >((TransformState::make_scale)(param0));
}


ConstPointerTo< TransformState > *
TransformState_C_make_shear_p_p(LVecBase3 const *param0) {
    return new ConstPointerTo< TransformState >((TransformState::make_shear)(*param0));
}


ConstPointerTo< TransformState > *
TransformState_C_make_pos_hpr_scale_p_ppp(LVecBase3 const *param0, LVecBase3 const *param1, LVecBase3 const *param2) {
    return new ConstPointerTo< TransformState >((TransformState::make_pos_hpr_scale)(*param0, *param1, *param2));
}


ConstPointerTo< TransformState > *
TransformState_C_make_pos_quat_scale_p_ppp(LVecBase3 const *param0, LQuaternion const *param1, LVecBase3 const *param2) {
    return new ConstPointerTo< TransformState >((TransformState::make_pos_quat_scale)(*param0, *param1, *param2));
}


ConstPointerTo< TransformState > *
TransformState_C_make_pos_hpr_scale_shear_p_pppp(LVecBase3 const *param0, LVecBase3 const *param1, LVecBase3 const *param2, LVecBase3 const *param3) {
    return new ConstPointerTo< TransformState >((TransformState::make_pos_hpr_scale_shear)(*param0, *param1, *param2, *param3));
}


ConstPointerTo< TransformState > *
TransformState_C_make_pos_quat_scale_shear_p_pppp(LVecBase3 const *param0, LQuaternion const *param1, LVecBase3 const *param2, LVecBase3 const *param3) {
    return new ConstPointerTo< TransformState >((TransformState::make_pos_quat_scale_shear)(*param0, *param1, *param2, *param3));
}


ConstPointerTo< TransformState > *
TransformState_C_make_mat_p_p(LMatrix4 const *param0) {
    return new ConstPointerTo< TransformState >((TransformState::make_mat)(*param0));
}


ConstPointerTo< TransformState > *
TransformState_C_make_pos2d_p_p(LVecBase2 const *param0) {
    return new ConstPointerTo< TransformState >((TransformState::make_pos2d)(*param0));
}


ConstPointerTo< TransformState > *
TransformState_C_make_rotate2d_p_f(PN_stdfloat param0) {
    return new ConstPointerTo< TransformState >((TransformState::make_rotate2d)(param0));
}


ConstPointerTo< TransformState > *
TransformState_C_make_pos_rotate2d_p_pf(LVecBase2 const *param0, PN_stdfloat param1) {
    return new ConstPointerTo< TransformState >((TransformState::make_pos_rotate2d)(*param0, param1));
}


ConstPointerTo< TransformState > *
TransformState_C_make_scale2d_p_p(LVecBase2 const *param0) {
    return new ConstPointerTo< TransformState >((TransformState::make_scale2d)(*param0));
}


ConstPointerTo< TransformState > *
TransformState_C_make_scale2d_p_f(PN_stdfloat param0) {
    return new ConstPointerTo< TransformState >((TransformState::make_scale2d)(param0));
}


ConstPointerTo< TransformState > *
TransformState_C_make_shear2d_p_f(PN_stdfloat param0) {
    return new ConstPointerTo< TransformState >((TransformState::make_shear2d)(param0));
}


ConstPointerTo< TransformState > *
TransformState_C_make_pos_rotate_scale2d_p_pfp(LVecBase2 const *param0, PN_stdfloat param1, LVecBase2 const *param2) {
    return new ConstPointerTo< TransformState >((TransformState::make_pos_rotate_scale2d)(*param0, param1, *param2));
}


ConstPointerTo< TransformState > *
TransformState_C_make_pos_rotate_scale_shear2d_p_pfpf(LVecBase2 const *param0, PN_stdfloat param1, LVecBase2 const *param2, PN_stdfloat param3) {
    return new ConstPointerTo< TransformState >((TransformState::make_pos_rotate_scale_shear2d)(*param0, param1, *param2, param3));
}


ConstPointerTo< TransformState > *
TransformState_C_make_mat3_p_p(LMatrix3 const *param0) {
    return new ConstPointerTo< TransformState >((TransformState::make_mat3)(*param0));
}


bool
TransformState_C_is_identity_B_p(TransformState const *param0) {
    return ((*param0).is_identity)();
}


bool
TransformState_C_is_invalid_B_p(TransformState const *param0) {
    return ((*param0).is_invalid)();
}


bool
TransformState_C_is_singular_B_p(TransformState const *param0) {
    return ((*param0).is_singular)();
}


bool
TransformState_C_is_2d_B_p(TransformState const *param0) {
    return ((*param0).is_2d)();
}


bool
TransformState_C_has_components_B_p(TransformState const *param0) {
    return ((*param0).has_components)();
}


bool
TransformState_C_components_given_B_p(TransformState const *param0) {
    return ((*param0).components_given)();
}


bool
TransformState_C_hpr_given_B_p(TransformState const *param0) {
    return ((*param0).hpr_given)();
}


bool
TransformState_C_quat_given_B_p(TransformState const *param0) {
    return ((*param0).quat_given)();
}


bool
TransformState_C_has_pos_B_p(TransformState const *param0) {
    return ((*param0).has_pos)();
}


bool
TransformState_C_has_hpr_B_p(TransformState const *param0) {
    return ((*param0).has_hpr)();
}


bool
TransformState_C_has_quat_B_p(TransformState const *param0) {
    return ((*param0).has_quat)();
}


bool
TransformState_C_has_scale_B_p(TransformState const *param0) {
    return ((*param0).has_scale)();
}


bool
TransformState_C_has_identity_scale_B_p(TransformState const *param0) {
    return ((*param0).has_identity_scale)();
}


bool
TransformState_C_has_uniform_scale_B_p(TransformState const *param0) {
    return ((*param0).has_uniform_scale)();
}


bool
TransformState_C_has_shear_B_p(TransformState const *param0) {
    return ((*param0).has_shear)();
}


bool
TransformState_C_has_nonzero_shear_B_p(TransformState const *param0) {
    return ((*param0).has_nonzero_shear)();
}


bool
TransformState_C_has_mat_B_p(TransformState const *param0) {
    return ((*param0).has_mat)();
}


LPoint3 const *
TransformState_C_get_pos_p_p(TransformState const *param0) {
    return &(((*param0).get_pos)());
}


LVecBase3 const *
TransformState_C_get_hpr_p_p(TransformState const *param0) {
    return &(((*param0).get_hpr)());
}


LQuaternion const *
TransformState_C_get_quat_p_p(TransformState const *param0) {
    return &(((*param0).get_quat)());
}


LQuaternion const *
TransformState_C_get_norm_quat_p_p(TransformState const *param0) {
    return &(((*param0).get_norm_quat)());
}


LVecBase3 const *
TransformState_C_get_scale_p_p(TransformState const *param0) {
    return &(((*param0).get_scale)());
}


PN_stdfloat
TransformState_C_get_uniform_scale_f_p(TransformState const *param0) {
    return ((*param0).get_uniform_scale)();
}


LVecBase3 const *
TransformState_C_get_shear_p_p(TransformState const *param0) {
    return &(((*param0).get_shear)());
}


LMatrix4 const *
TransformState_C_get_mat_p_p(TransformState const *param0) {
    return &(((*param0).get_mat)());
}


LVecBase2 *
TransformState_C_get_pos2d_p_p(TransformState const *param0) {
    return new LVecBase2(((*param0).get_pos2d)());
}


PN_stdfloat
TransformState_C_get_rotate2d_f_p(TransformState const *param0) {
    return ((*param0).get_rotate2d)();
}


LVecBase2 *
TransformState_C_get_scale2d_p_p(TransformState const *param0) {
    return new LVecBase2(((*param0).get_scale2d)());
}


PN_stdfloat
TransformState_C_get_shear2d_f_p(TransformState const *param0) {
    return ((*param0).get_shear2d)();
}


LMatrix3 *
TransformState_C_get_mat3_p_p(TransformState const *param0) {
    return new LMatrix3(((*param0).get_mat3)());
}


ConstPointerTo< TransformState > *
TransformState_C_set_pos_p_pp(TransformState const *param0, LVecBase3 const *param1) {
    return new ConstPointerTo< TransformState >(((*param0).set_pos)(*param1));
}


ConstPointerTo< TransformState > *
TransformState_C_set_hpr_p_pp(TransformState const *param0, LVecBase3 const *param1) {
    return new ConstPointerTo< TransformState >(((*param0).set_hpr)(*param1));
}


ConstPointerTo< TransformState > *
TransformState_C_set_quat_p_pp(TransformState const *param0, LQuaternion const *param1) {
    return new ConstPointerTo< TransformState >(((*param0).set_quat)(*param1));
}


ConstPointerTo< TransformState > *
TransformState_C_set_scale_p_pp(TransformState const *param0, LVecBase3 const *param1) {
    return new ConstPointerTo< TransformState >(((*param0).set_scale)(*param1));
}


ConstPointerTo< TransformState > *
TransformState_C_set_shear_p_pp(TransformState const *param0, LVecBase3 const *param1) {
    return new ConstPointerTo< TransformState >(((*param0).set_shear)(*param1));
}


ConstPointerTo< TransformState > *
TransformState_C_set_pos2d_p_pp(TransformState const *param0, LVecBase2 const *param1) {
    return new ConstPointerTo< TransformState >(((*param0).set_pos2d)(*param1));
}


ConstPointerTo< TransformState > *
TransformState_C_set_rotate2d_p_pf(TransformState const *param0, PN_stdfloat param1) {
    return new ConstPointerTo< TransformState >(((*param0).set_rotate2d)(param1));
}


ConstPointerTo< TransformState > *
TransformState_C_set_scale2d_p_pp(TransformState const *param0, LVecBase2 const *param1) {
    return new ConstPointerTo< TransformState >(((*param0).set_scale2d)(*param1));
}


ConstPointerTo< TransformState > *
TransformState_C_set_shear2d_p_pf(TransformState const *param0, PN_stdfloat param1) {
    return new ConstPointerTo< TransformState >(((*param0).set_shear2d)(param1));
}


ConstPointerTo< TransformState > *
TransformState_C_compose_p_pp(TransformState const *param0, TransformState const *param1) {
    return new ConstPointerTo< TransformState >(((*param0).compose)(param1));
}


ConstPointerTo< TransformState > *
TransformState_C_invert_compose_p_pp(TransformState const *param0, TransformState const *param1) {
    return new ConstPointerTo< TransformState >(((*param0).invert_compose)(param1));
}


ConstPointerTo< TransformState > *
TransformState_C_get_inverse_p_p(TransformState const *param0) {
    return new ConstPointerTo< TransformState >(((*param0).get_inverse)());
}


ConstPointerTo< TransformState > *
TransformState_C_get_unique_p_p(TransformState const *param0) {
    return new ConstPointerTo< TransformState >(((*param0).get_unique)());
}


int
TransformState_C_get_geom_rendering_i_pi(TransformState const *param0, int param1) {
    return ((*param0).get_geom_rendering)(param1);
}


void
TransformState_C_cache_ref_v_p(TransformState const *param0) {
    ((*param0).cache_ref)();
}


bool
TransformState_C_cache_unref_B_p(TransformState const *param0) {
    return ((*param0).cache_unref)();
}


void
TransformState_C_node_ref_v_p(TransformState const *param0) {
    ((*param0).node_ref)();
}


bool
TransformState_C_node_unref_B_p(TransformState const *param0) {
    return ((*param0).node_unref)();
}


std::size_t
TransformState_C_get_composition_cache_num_entries_l_p(TransformState const *param0) {
    return ((*param0).get_composition_cache_num_entries)();
}


std::size_t
TransformState_C_get_invert_composition_cache_num_entries_l_p(TransformState const *param0) {
    return ((*param0).get_invert_composition_cache_num_entries)();
}


std::size_t
TransformState_C_get_composition_cache_size_l_p(TransformState const *param0) {
    return ((*param0).get_composition_cache_size)();
}


TransformState const *
TransformState_C_get_composition_cache_source_p_pl(TransformState const *param0, std::size_t param1) {
    return ((*param0).get_composition_cache_source)(param1);
}


TransformState const *
TransformState_C_get_composition_cache_result_p_pl(TransformState const *param0, std::size_t param1) {
    return ((*param0).get_composition_cache_result)(param1);
}


std::size_t
TransformState_C_get_invert_composition_cache_size_l_p(TransformState const *param0) {
    return ((*param0).get_invert_composition_cache_size)();
}


TransformState const *
TransformState_C_get_invert_composition_cache_source_p_pl(TransformState const *param0, std::size_t param1) {
    return ((*param0).get_invert_composition_cache_source)(param1);
}


TransformState const *
TransformState_C_get_invert_composition_cache_result_p_pl(TransformState const *param0, std::size_t param1) {
    return ((*param0).get_invert_composition_cache_result)(param1);
}


bool
TransformState_C_validate_composition_cache_B_p(TransformState const *param0) {
    return ((*param0).validate_composition_cache)();
}


void
TransformState_C_output_v_pp(TransformState const *param0, std::ostream *param1) {
    ((*param0).output)(*param1);
}


void
TransformState_C_write_v_ppi(TransformState const *param0, std::ostream *param1, int param2) {
    ((*param0).write)(*param1, param2);
}


void
TransformState_C_write_composition_cache_v_ppi(TransformState const *param0, std::ostream *param1, int param2) {
    ((*param0).write_composition_cache)(*param1, param2);
}


int
TransformState_C_get_num_states_i_v() {
    return (TransformState::get_num_states)();
}


int
TransformState_C_get_num_unused_states_i_v() {
    return (TransformState::get_num_unused_states)();
}


int
TransformState_C_clear_cache_i_v() {
    return (TransformState::clear_cache)();
}


int
TransformState_C_garbage_collect_i_v() {
    return (TransformState::garbage_collect)();
}


void
TransformState_C_list_cycles_v_p(std::ostream *param0) {
    (TransformState::list_cycles)(*param0);
}


void
TransformState_C_list_states_v_p(std::ostream *param0) {
    (TransformState::list_states)(*param0);
}


bool
TransformState_C_validate_states_B_v() {
    return (TransformState::validate_states)();
}


void
TransformState_C_init_states_v_v() {
    (TransformState::init_states)();
}


void
TransformState_C_flush_level_v_v() {
    (TransformState::flush_level)();
}


void
TransformState_C_cache_ref_only_v_p(TransformState const *param0) {
    ((*param0).cache_ref_only)();
}


void
TransformState_C_register_with_read_factory_v_v() {
    (TransformState::register_with_read_factory)();
}


void
TransformState_C_write_datagram_v_ppp(TransformState *param0, BamWriter *param1, Datagram *param2) {
    ((*param0).write_datagram)(param1, *param2);
}


PointerTo< TypedWritableReferenceCount > *
TransformState_C_change_this_p_pp(TypedWritableReferenceCount *param0, BamReader *param1) {
    return new PointerTo< TypedWritableReferenceCount >((TransformState::change_this)(param0, param1));
}


int
TransformState_C_get_class_type_i_v() {
    return ((TransformState::get_class_type)()).get_index();
}


void
TransformState_C_init_type_v_v() {
    (TransformState::init_type)();
}


int
TransformState_C_get_type_i_p(TransformState const *param0) {
    return (((*param0).get_type)()).get_index();
}


int
TransformState_C_force_init_type_i_p(TransformState *param0) {
    return (((*param0).force_init_type)()).get_index();
}


// TransformTable


TransformTable *
TransformTable_C_ctor_p_v() {
    return new TransformTable();
}


TransformTable *
TransformTable_C_ctor_p_p(TransformTable const *param0) {
    return new TransformTable(*param0);
}


bool
TransformTable_C_is_registered_B_p(TransformTable const *param0) {
    return ((*param0).is_registered)();
}


ConstPointerTo< TransformTable > *
TransformTable_C_register_table_p_p(TransformTable const *param0) {
    return new ConstPointerTo< TransformTable >((TransformTable::register_table)(param0));
}


std::size_t
TransformTable_C_get_num_transforms_l_p(TransformTable const *param0) {
    return ((*param0).get_num_transforms)();
}


VertexTransform const *
TransformTable_C_get_transform_p_pl(TransformTable const *param0, std::size_t param1) {
    return ((*param0).get_transform)(param1);
}


UpdateSeq *
TransformTable_C_get_modified_p_pp(TransformTable const *param0, Thread *param1) {
    return new UpdateSeq(((*param0).get_modified)(param1));
}


UpdateSeq *
TransformTable_C_get_modified_p_p(TransformTable const *param0) {
    return new UpdateSeq(((*param0).get_modified)());
}


void
TransformTable_C_set_transform_v_plp(TransformTable *param0, std::size_t param1, VertexTransform const *param2) {
    ((*param0).set_transform)(param1, param2);
}


void
TransformTable_C_insert_transform_v_plp(TransformTable *param0, std::size_t param1, VertexTransform const *param2) {
    ((*param0).insert_transform)(param1, param2);
}


void
TransformTable_C_remove_transform_v_pl(TransformTable *param0, std::size_t param1) {
    ((*param0).remove_transform)(param1);
}


std::size_t
TransformTable_C_add_transform_l_pp(TransformTable *param0, VertexTransform const *param1) {
    return ((*param0).add_transform)(param1);
}


void
TransformTable_C_write_v_pp(TransformTable const *param0, std::ostream *param1) {
    ((*param0).write)(*param1);
}


void
TransformTable_C_register_with_read_factory_v_v() {
    (TransformTable::register_with_read_factory)();
}


void
TransformTable_C_write_datagram_v_ppp(TransformTable *param0, BamWriter *param1, Datagram *param2) {
    ((*param0).write_datagram)(param1, *param2);
}


int
TransformTable_C_get_class_type_i_v() {
    return ((TransformTable::get_class_type)()).get_index();
}


void
TransformTable_C_init_type_v_v() {
    (TransformTable::init_type)();
}


int
TransformTable_C_get_type_i_p(TransformTable const *param0) {
    return (((*param0).get_type)()).get_index();
}


int
TransformTable_C_force_init_type_i_p(TransformTable *param0) {
    return (((*param0).force_init_type)()).get_index();
}


// TypedObject


MemoryBase *
TypedObject_C_upcast_to_MemoryBase_p_p(TypedObject *param0) {
    return (MemoryBase *)param0;
}


int
TypedObject_C_get_type_i_p(TypedObject const *param0) {
    return (((*param0).get_type)()).get_index();
}


int
TypedObject_C_get_type_index_i_p(TypedObject const *param0) {
    return ((*param0).get_type_index)();
}


bool
TypedObject_C_is_of_type_B_pi(TypedObject const *param0, int param1) {
    return ((*param0).is_of_type)(TypeHandle::from_index(param1));
}


bool
TypedObject_C_is_exact_type_B_pi(TypedObject const *param0, int param1) {
    return ((*param0).is_exact_type)(TypeHandle::from_index(param1));
}


int
TypedObject_C_get_best_parent_from_Set_i_pp(TypedObject const *param0, std::set< int > const *param1) {
    return ((*param0).get_best_parent_from_Set)(*param1);
}


int
TypedObject_C_force_init_type_i_p(TypedObject *param0) {
    return (((*param0).force_init_type)()).get_index();
}


TypedObject *
TypedObject_C_as_typed_object_p_p(TypedObject *param0) {
    return ((*param0).as_typed_object)();
}


TypedObject const *
TypedObject_C_as_typed_object_p_p_1_p_p(TypedObject const *param0) {
    return ((*param0).as_typed_object)();
}


int
TypedObject_C_get_class_type_i_v() {
    return ((TypedObject::get_class_type)()).get_index();
}


void
TypedObject_C_init_type_v_v() {
    (TypedObject::init_type)();
}


// TypedReferenceCount


DisplayRegion *
TypedReferenceCount_C_downcast_to_DisplayRegion_p_p(TypedReferenceCount *param0) {
    return (DisplayRegion *)param0;
}


Loader *
TypedReferenceCount_C_downcast_to_Loader_p_p(TypedReferenceCount *param0) {
    return (Loader *)param0;
}


TextFont *
TypedReferenceCount_C_downcast_to_TextFont_p_p(TypedReferenceCount *param0) {
    return (TextFont *)param0;
}


Thread *
TypedReferenceCount_C_downcast_to_Thread_p_p(TypedReferenceCount *param0) {
    return (Thread *)param0;
}


// TypedWritable


TypedWritable *
TypedWritable_C_ctor_p_v() {
    return new TypedWritable();
}


TypedWritable *
TypedWritable_C_ctor_p_p(TypedWritable const *param0) {
    return new TypedWritable(*param0);
}


void
TypedWritable_C_write_datagram_v_ppp(TypedWritable *param0, BamWriter *param1, Datagram *param2) {
    ((*param0).write_datagram)(param1, *param2);
}


void
TypedWritable_C_update_bam_nested_v_pp(TypedWritable *param0, BamWriter *param1) {
    ((*param0).update_bam_nested)(param1);
}


bool
TypedWritable_C_require_fully_complete_B_p(TypedWritable const *param0) {
    return ((*param0).require_fully_complete)();
}


void
TypedWritable_C_fillin_v_ppp(TypedWritable *param0, DatagramIterator *param1, BamReader *param2) {
    ((*param0).fillin)(*param1, param2);
}


void
TypedWritable_C_finalize_v_pp(TypedWritable *param0, BamReader *param1) {
    ((*param0).finalize)(param1);
}


ReferenceCount *
TypedWritable_C_as_reference_count_p_p(TypedWritable *param0) {
    return ((*param0).as_reference_count)();
}


void
TypedWritable_C_mark_bam_modified_v_p(TypedWritable *param0) {
    ((*param0).mark_bam_modified)();
}


UpdateSeq *
TypedWritable_C_get_bam_modified_p_p(TypedWritable const *param0) {
    return new UpdateSeq(((*param0).get_bam_modified)());
}


vector_uchar
TypedWritable_C_encode_to_bam_stream_p_p(TypedWritable const *param0) {
    return ((*param0).encode_to_bam_stream)();
}


bool
TypedWritable_C_encode_to_bam_stream_B_ppp(TypedWritable const *param0, vector_uchar *param1, BamWriter *param2) {
    return ((*param0).encode_to_bam_stream)(*param1, param2);
}


bool
TypedWritable_C_encode_to_bam_stream_B_pp(TypedWritable const *param0, vector_uchar *param1) {
    return ((*param0).encode_to_bam_stream)(*param1);
}


int
TypedWritable_C_get_class_type_i_v() {
    return ((TypedWritable::get_class_type)()).get_index();
}


void
TypedWritable_C_init_type_v_v() {
    (TypedWritable::init_type)();
}


int
TypedWritable_C_force_init_type_i_p(TypedWritable *param0) {
    return (((*param0).force_init_type)()).get_index();
}


// TypedWritableReferenceCount


PandaNode *
TypedWritableReferenceCount_C_downcast_to_PandaNode_p_p(TypedWritableReferenceCount *param0) {
    return (PandaNode *)param0;
}


GeomVertexArrayFormat *
TypedWritableReferenceCount_C_downcast_to_GeomVertexArrayFormat_p_p(TypedWritableReferenceCount *param0) {
    return (GeomVertexArrayFormat *)param0;
}


GeomVertexFormat *
TypedWritableReferenceCount_C_downcast_to_GeomVertexFormat_p_p(TypedWritableReferenceCount *param0) {
    return (GeomVertexFormat *)param0;
}


Texture *
TypedWritableReferenceCount_C_downcast_to_Texture_p_p(TypedWritableReferenceCount *param0) {
    return (Texture *)param0;
}


// UpdateSeq


UpdateSeq *
UpdateSeq_C_ctor_p_v() {
    return new UpdateSeq();
}


UpdateSeq *
UpdateSeq_C_ctor_p_p(UpdateSeq const *param0) {
    return new UpdateSeq(*param0);
}


UpdateSeq *
UpdateSeq_C_initial_p_v() {
    return new UpdateSeq((UpdateSeq::initial)());
}


UpdateSeq *
UpdateSeq_C_old_p_v() {
    return new UpdateSeq((UpdateSeq::old)());
}


UpdateSeq *
UpdateSeq_C_fresh_p_v() {
    return new UpdateSeq((UpdateSeq::fresh)());
}


void
UpdateSeq_C_clear_v_p(UpdateSeq *param0) {
    ((*param0).clear)();
}


bool
UpdateSeq_C_is_initial_B_p(UpdateSeq const *param0) {
    return ((*param0).is_initial)();
}


bool
UpdateSeq_C_is_old_B_p(UpdateSeq const *param0) {
    return ((*param0).is_old)();
}


bool
UpdateSeq_C_is_fresh_B_p(UpdateSeq const *param0) {
    return ((*param0).is_fresh)();
}


bool
UpdateSeq_C_is_special_B_p(UpdateSeq const *param0) {
    return ((*param0).is_special)();
}


AtomicAdjust::Integer
UpdateSeq_C_get_seq_p_p(UpdateSeq const *param0) {
    return ((*param0).get_seq)();
}


void
UpdateSeq_C_output_v_pp(UpdateSeq const *param0, std::ostream *param1) {
    ((*param0).output)(*param1);
}


// WindowFramework


PandaFramework *
WindowFramework_C_get_panda_framework_p_p(WindowFramework const *param0) {
    return ((*param0).get_panda_framework)();
}


GraphicsWindow *
WindowFramework_C_get_graphics_window_p_p(WindowFramework const *param0) {
    return ((*param0).get_graphics_window)();
}


GraphicsOutput *
WindowFramework_C_get_graphics_output_p_p(WindowFramework const *param0) {
    return ((*param0).get_graphics_output)();
}


NodePath *
WindowFramework_C_get_camera_group_p_p(WindowFramework *param0) {
    return new NodePath(((*param0).get_camera_group)());
}


int
WindowFramework_C_get_num_cameras_i_p(WindowFramework const *param0) {
    return ((*param0).get_num_cameras)();
}


Camera *
WindowFramework_C_get_camera_p_pi(WindowFramework const *param0, int param1) {
    return ((*param0).get_camera)(param1);
}


DisplayRegion *
WindowFramework_C_get_display_region_2d_p_p(WindowFramework const *param0) {
    return ((*param0).get_display_region_2d)();
}


DisplayRegion *
WindowFramework_C_get_display_region_3d_p_p(WindowFramework const *param0) {
    return ((*param0).get_display_region_3d)();
}


NodePath *
WindowFramework_C_get_render_p_p(WindowFramework *param0) {
    return new NodePath(((*param0).get_render)());
}


NodePath *
WindowFramework_C_get_render_2d_p_p(WindowFramework *param0) {
    return new NodePath(((*param0).get_render_2d)());
}


NodePath *
WindowFramework_C_get_aspect_2d_p_p(WindowFramework *param0) {
    return new NodePath(((*param0).get_aspect_2d)());
}


NodePath *
WindowFramework_C_get_pixel_2d_p_p(WindowFramework *param0) {
    return new NodePath(((*param0).get_pixel_2d)());
}


NodePath *
WindowFramework_C_get_mouse_p_p(WindowFramework *param0) {
    return new NodePath(((*param0).get_mouse)());
}


NodePath *
WindowFramework_C_get_button_thrower_p_p(WindowFramework *param0) {
    return new NodePath(((*param0).get_button_thrower)());
}


void
WindowFramework_C_enable_keyboard_v_p(WindowFramework *param0) {
    ((*param0).enable_keyboard)();
}


void
WindowFramework_C_setup_trackball_v_p(WindowFramework *param0) {
    ((*param0).setup_trackball)();
}


void
WindowFramework_C_center_trackball_v_pp(WindowFramework *param0, NodePath const *param1) {
    ((*param0).center_trackball)(*param1);
}


bool
WindowFramework_C_load_models_B_ppp(WindowFramework *param0, NodePath const *param1, pvector< Filename > const *param2) {
    return ((*param0).load_models)(*param1, *param2);
}


NodePath *
WindowFramework_C_load_model_p_ppp(WindowFramework *param0, NodePath const *param1, Filename *param2) {
    return new NodePath(((*param0).load_model)(*param1, *param2));
}


NodePath *
WindowFramework_C_load_default_model_p_pp(WindowFramework *param0, NodePath const *param1) {
    return new NodePath(((*param0).load_default_model)(*param1));
}


void
WindowFramework_C_loop_animations_v_pi(WindowFramework *param0, int param1) {
    ((*param0).loop_animations)(param1);
}


void
WindowFramework_C_loop_animations_v_p(WindowFramework *param0) {
    ((*param0).loop_animations)();
}


void
WindowFramework_C_stagger_animations_v_p(WindowFramework *param0) {
    ((*param0).stagger_animations)();
}


void
WindowFramework_C_next_anim_control_v_p(WindowFramework *param0) {
    ((*param0).next_anim_control)();
}


void
WindowFramework_C_set_anim_controls_v_pB(WindowFramework *param0, bool param1) {
    ((*param0).set_anim_controls)(param1);
}


bool
WindowFramework_C_get_anim_controls_B_p(WindowFramework const *param0) {
    return ((*param0).get_anim_controls)();
}


void
WindowFramework_C_adjust_dimensions_v_p(WindowFramework *param0) {
    ((*param0).adjust_dimensions)();
}


WindowFramework *
WindowFramework_C_split_window_p_pp(WindowFramework *param0, WindowFramework::SplitType param1) {
    return ((*param0).split_window)(param1);
}


WindowFramework *
WindowFramework_C_split_window_p_p(WindowFramework *param0) {
    return ((*param0).split_window)();
}


void
WindowFramework_C_set_wireframe_v_pBB(WindowFramework *param0, bool param1, bool param2) {
    ((*param0).set_wireframe)(param1, param2);
}


void
WindowFramework_C_set_wireframe_v_pB(WindowFramework *param0, bool param1) {
    ((*param0).set_wireframe)(param1);
}


void
WindowFramework_C_set_texture_v_pB(WindowFramework *param0, bool param1) {
    ((*param0).set_texture)(param1);
}


void
WindowFramework_C_set_two_sided_v_pB(WindowFramework *param0, bool param1) {
    ((*param0).set_two_sided)(param1);
}


void
WindowFramework_C_set_one_sided_reverse_v_pB(WindowFramework *param0, bool param1) {
    ((*param0).set_one_sided_reverse)(param1);
}


void
WindowFramework_C_set_lighting_v_pB(WindowFramework *param0, bool param1) {
    ((*param0).set_lighting)(param1);
}


void
WindowFramework_C_set_perpixel_v_pB(WindowFramework *param0, bool param1) {
    ((*param0).set_perpixel)(param1);
}


void
WindowFramework_C_set_background_type_v_pp(WindowFramework *param0, WindowFramework::BackgroundType param1) {
    ((*param0).set_background_type)(param1);
}


bool
WindowFramework_C_get_wireframe_B_p(WindowFramework const *param0) {
    return ((*param0).get_wireframe)();
}


bool
WindowFramework_C_get_wireframe_filled_B_p(WindowFramework const *param0) {
    return ((*param0).get_wireframe_filled)();
}


bool
WindowFramework_C_get_texture_B_p(WindowFramework const *param0) {
    return ((*param0).get_texture)();
}


bool
WindowFramework_C_get_two_sided_B_p(WindowFramework const *param0) {
    return ((*param0).get_two_sided)();
}


bool
WindowFramework_C_get_one_sided_reverse_B_p(WindowFramework const *param0) {
    return ((*param0).get_one_sided_reverse)();
}


bool
WindowFramework_C_get_lighting_B_p(WindowFramework const *param0) {
    return ((*param0).get_lighting)();
}


bool
WindowFramework_C_get_perpixel_B_p(WindowFramework const *param0) {
    return ((*param0).get_perpixel)();
}


WindowFramework::BackgroundType
WindowFramework_C_get_background_type_p_p(WindowFramework const *param0) {
    return ((*param0).get_background_type)();
}


TextFont *
WindowFramework_C_get_shuttle_controls_font_p_v() {
    return (WindowFramework::get_shuttle_controls_font)();
}


NodePath *
WindowFramework_C_make_camera_p_p(WindowFramework *param0) {
    return new NodePath(((*param0).make_camera)());
}


int
WindowFramework_C_get_class_type_i_v() {
    return ((WindowFramework::get_class_type)()).get_index();
}


void
WindowFramework_C_init_type_v_v() {
    (WindowFramework::init_type)();
}


int
WindowFramework_C_get_type_i_p(WindowFramework const *param0) {
    return (((*param0).get_type)()).get_index();
}


int
WindowFramework_C_force_init_type_i_p(WindowFramework *param0) {
    return (((*param0).force_init_type)()).get_index();
}


WindowFramework *
WindowFramework_C_ctor_p_p(WindowFramework const *param0) {
    return new WindowFramework(*param0);
}


// WindowHandle


WindowHandle *
WindowHandle_C_ctor_p_p(WindowHandle const *param0) {
    return new WindowHandle(*param0);
}


WindowHandle *
WindowHandle_C_ctor_p_p_1_p_p(WindowHandle::OSHandle *param0) {
    return new WindowHandle(param0);
}


WindowHandle::OSHandle *
WindowHandle_C_get_os_handle_p_p(WindowHandle const *param0) {
    return ((*param0).get_os_handle)();
}


void
WindowHandle_C_set_os_handle_v_pp(WindowHandle *param0, WindowHandle::OSHandle *param1) {
    ((*param0).set_os_handle)(param1);
}


void
WindowHandle_C_send_windows_message_v_pIii(WindowHandle *param0, unsigned int param1, int param2, int param3) {
    ((*param0).send_windows_message)(param1, param2, param3);
}


std::size_t
WindowHandle_C_get_int_handle_l_p(WindowHandle const *param0) {
    return ((*param0).get_int_handle)();
}


void
WindowHandle_C_output_v_pp(WindowHandle const *param0, std::ostream *param1) {
    ((*param0).output)(*param1);
}


void
WindowHandle_C_attach_child_v_pp(WindowHandle *param0, WindowHandle *param1) {
    ((*param0).attach_child)(param1);
}


void
WindowHandle_C_detach_child_v_pp(WindowHandle *param0, WindowHandle *param1) {
    ((*param0).detach_child)(param1);
}


void
WindowHandle_C_request_keyboard_focus_v_pp(WindowHandle *param0, WindowHandle *param1) {
    ((*param0).request_keyboard_focus)(param1);
}


void
WindowHandle_C_receive_windows_message_v_pIii(WindowHandle *param0, unsigned int param1, int param2, int param3) {
    ((*param0).receive_windows_message)(param1, param2, param3);
}


int
WindowHandle_C_get_class_type_i_v() {
    return ((WindowHandle::get_class_type)()).get_index();
}


void
WindowHandle_C_init_type_v_v() {
    (WindowHandle::init_type)();
}


int
WindowHandle_C_get_type_i_p(WindowHandle const *param0) {
    return (((*param0).get_type)()).get_index();
}


int
WindowHandle_C_force_init_type_i_p(WindowHandle *param0) {
    return (((*param0).force_init_type)()).get_index();
}


// WindowProperties


WindowProperties *
WindowProperties_C_ctor_p_v() {
    return new WindowProperties();
}


WindowProperties *
WindowProperties_C_ctor_p_p(WindowProperties const *param0) {
    return new WindowProperties(*param0);
}


WindowProperties *
WindowProperties_C_get_config_properties_p_v() {
    return new WindowProperties((WindowProperties::get_config_properties)());
}


WindowProperties *
WindowProperties_C_get_default_p_v() {
    return new WindowProperties((WindowProperties::get_default)());
}


void
WindowProperties_C_set_default_v_p(WindowProperties const *param0) {
    (WindowProperties::set_default)(*param0);
}


void
WindowProperties_C_clear_default_v_v() {
    (WindowProperties::clear_default)();
}


WindowProperties *
WindowProperties_C_size_p_p(LVecBase2i const *param0) {
    return new WindowProperties((WindowProperties::size)(*param0));
}


WindowProperties *
WindowProperties_C_size_p_ii(int param0, int param1) {
    return new WindowProperties((WindowProperties::size)(param0, param1));
}


void
WindowProperties_C_clear_v_p(WindowProperties *param0) {
    ((*param0).clear)();
}


bool
WindowProperties_C_is_any_specified_B_p(WindowProperties const *param0) {
    return ((*param0).is_any_specified)();
}


void
WindowProperties_C_set_origin_v_pp(WindowProperties *param0, LPoint2i const *param1) {
    ((*param0).set_origin)(*param1);
}


void
WindowProperties_C_set_origin_v_pii(WindowProperties *param0, int param1, int param2) {
    ((*param0).set_origin)(param1, param2);
}


LPoint2i const *
WindowProperties_C_get_origin_p_p(WindowProperties const *param0) {
    return &(((*param0).get_origin)());
}


int
WindowProperties_C_get_x_origin_i_p(WindowProperties const *param0) {
    return ((*param0).get_x_origin)();
}


int
WindowProperties_C_get_y_origin_i_p(WindowProperties const *param0) {
    return ((*param0).get_y_origin)();
}


bool
WindowProperties_C_has_origin_B_p(WindowProperties const *param0) {
    return ((*param0).has_origin)();
}


void
WindowProperties_C_clear_origin_v_p(WindowProperties *param0) {
    ((*param0).clear_origin)();
}


void
WindowProperties_C_set_size_v_pp(WindowProperties *param0, LVector2i const *param1) {
    ((*param0).set_size)(*param1);
}


void
WindowProperties_C_set_size_v_pii(WindowProperties *param0, int param1, int param2) {
    ((*param0).set_size)(param1, param2);
}


LVector2i const *
WindowProperties_C_get_size_p_p(WindowProperties const *param0) {
    return &(((*param0).get_size)());
}


int
WindowProperties_C_get_x_size_i_p(WindowProperties const *param0) {
    return ((*param0).get_x_size)();
}


int
WindowProperties_C_get_y_size_i_p(WindowProperties const *param0) {
    return ((*param0).get_y_size)();
}


bool
WindowProperties_C_has_size_B_p(WindowProperties const *param0) {
    return ((*param0).has_size)();
}


void
WindowProperties_C_clear_size_v_p(WindowProperties *param0) {
    ((*param0).clear_size)();
}


bool
WindowProperties_C_has_mouse_mode_B_p(WindowProperties const *param0) {
    return ((*param0).has_mouse_mode)();
}


void
WindowProperties_C_set_mouse_mode_v_pp(WindowProperties *param0, WindowProperties::MouseMode param1) {
    ((*param0).set_mouse_mode)(param1);
}


WindowProperties::MouseMode
WindowProperties_C_get_mouse_mode_p_p(WindowProperties const *param0) {
    return ((*param0).get_mouse_mode)();
}


void
WindowProperties_C_clear_mouse_mode_v_p(WindowProperties *param0) {
    ((*param0).clear_mouse_mode)();
}


void
WindowProperties_C_set_title_v_ps(WindowProperties *param0, char const *param1) {
    ((*param0).set_title)(std::string(param1));
}


char const *
WindowProperties_C_get_title_s_p(WindowProperties const *param0) {
    return (((*param0).get_title)()).c_str();
}


bool
WindowProperties_C_has_title_B_p(WindowProperties const *param0) {
    return ((*param0).has_title)();
}


void
WindowProperties_C_clear_title_v_p(WindowProperties *param0) {
    ((*param0).clear_title)();
}


void
WindowProperties_C_set_undecorated_v_pB(WindowProperties *param0, bool param1) {
    ((*param0).set_undecorated)(param1);
}


bool
WindowProperties_C_get_undecorated_B_p(WindowProperties const *param0) {
    return ((*param0).get_undecorated)();
}


bool
WindowProperties_C_has_undecorated_B_p(WindowProperties const *param0) {
    return ((*param0).has_undecorated)();
}


void
WindowProperties_C_clear_undecorated_v_p(WindowProperties *param0) {
    ((*param0).clear_undecorated)();
}


void
WindowProperties_C_set_fixed_size_v_pB(WindowProperties *param0, bool param1) {
    ((*param0).set_fixed_size)(param1);
}


bool
WindowProperties_C_get_fixed_size_B_p(WindowProperties const *param0) {
    return ((*param0).get_fixed_size)();
}


bool
WindowProperties_C_has_fixed_size_B_p(WindowProperties const *param0) {
    return ((*param0).has_fixed_size)();
}


void
WindowProperties_C_clear_fixed_size_v_p(WindowProperties *param0) {
    ((*param0).clear_fixed_size)();
}


void
WindowProperties_C_set_fullscreen_v_pB(WindowProperties *param0, bool param1) {
    ((*param0).set_fullscreen)(param1);
}


bool
WindowProperties_C_get_fullscreen_B_p(WindowProperties const *param0) {
    return ((*param0).get_fullscreen)();
}


bool
WindowProperties_C_has_fullscreen_B_p(WindowProperties const *param0) {
    return ((*param0).has_fullscreen)();
}


void
WindowProperties_C_clear_fullscreen_v_p(WindowProperties *param0) {
    ((*param0).clear_fullscreen)();
}


void
WindowProperties_C_set_foreground_v_pB(WindowProperties *param0, bool param1) {
    ((*param0).set_foreground)(param1);
}


bool
WindowProperties_C_get_foreground_B_p(WindowProperties const *param0) {
    return ((*param0).get_foreground)();
}


bool
WindowProperties_C_has_foreground_B_p(WindowProperties const *param0) {
    return ((*param0).has_foreground)();
}


void
WindowProperties_C_clear_foreground_v_p(WindowProperties *param0) {
    ((*param0).clear_foreground)();
}


void
WindowProperties_C_set_minimized_v_pB(WindowProperties *param0, bool param1) {
    ((*param0).set_minimized)(param1);
}


bool
WindowProperties_C_get_minimized_B_p(WindowProperties const *param0) {
    return ((*param0).get_minimized)();
}


bool
WindowProperties_C_has_minimized_B_p(WindowProperties const *param0) {
    return ((*param0).has_minimized)();
}


void
WindowProperties_C_clear_minimized_v_p(WindowProperties *param0) {
    ((*param0).clear_minimized)();
}


void
WindowProperties_C_set_maximized_v_pB(WindowProperties *param0, bool param1) {
    ((*param0).set_maximized)(param1);
}


bool
WindowProperties_C_get_maximized_B_p(WindowProperties const *param0) {
    return ((*param0).get_maximized)();
}


bool
WindowProperties_C_has_maximized_B_p(WindowProperties const *param0) {
    return ((*param0).has_maximized)();
}


void
WindowProperties_C_clear_maximized_v_p(WindowProperties *param0) {
    ((*param0).clear_maximized)();
}


void
WindowProperties_C_set_raw_mice_v_pB(WindowProperties *param0, bool param1) {
    ((*param0).set_raw_mice)(param1);
}


bool
WindowProperties_C_get_raw_mice_B_p(WindowProperties const *param0) {
    return ((*param0).get_raw_mice)();
}


bool
WindowProperties_C_has_raw_mice_B_p(WindowProperties const *param0) {
    return ((*param0).has_raw_mice)();
}


void
WindowProperties_C_clear_raw_mice_v_p(WindowProperties *param0) {
    ((*param0).clear_raw_mice)();
}


void
WindowProperties_C_set_open_v_pB(WindowProperties *param0, bool param1) {
    ((*param0).set_open)(param1);
}


bool
WindowProperties_C_get_open_B_p(WindowProperties const *param0) {
    return ((*param0).get_open)();
}


bool
WindowProperties_C_has_open_B_p(WindowProperties const *param0) {
    return ((*param0).has_open)();
}


void
WindowProperties_C_clear_open_v_p(WindowProperties *param0) {
    ((*param0).clear_open)();
}


void
WindowProperties_C_set_cursor_hidden_v_pB(WindowProperties *param0, bool param1) {
    ((*param0).set_cursor_hidden)(param1);
}


bool
WindowProperties_C_get_cursor_hidden_B_p(WindowProperties const *param0) {
    return ((*param0).get_cursor_hidden)();
}


bool
WindowProperties_C_has_cursor_hidden_B_p(WindowProperties const *param0) {
    return ((*param0).has_cursor_hidden)();
}


void
WindowProperties_C_clear_cursor_hidden_v_p(WindowProperties *param0) {
    ((*param0).clear_cursor_hidden)();
}


void
WindowProperties_C_set_icon_filename_v_pp(WindowProperties *param0, Filename const *param1) {
    ((*param0).set_icon_filename)(*param1);
}


Filename const *
WindowProperties_C_get_icon_filename_p_p(WindowProperties const *param0) {
    return &(((*param0).get_icon_filename)());
}


bool
WindowProperties_C_has_icon_filename_B_p(WindowProperties const *param0) {
    return ((*param0).has_icon_filename)();
}


void
WindowProperties_C_clear_icon_filename_v_p(WindowProperties *param0) {
    ((*param0).clear_icon_filename)();
}


void
WindowProperties_C_set_cursor_filename_v_pp(WindowProperties *param0, Filename const *param1) {
    ((*param0).set_cursor_filename)(*param1);
}


Filename const *
WindowProperties_C_get_cursor_filename_p_p(WindowProperties const *param0) {
    return &(((*param0).get_cursor_filename)());
}


bool
WindowProperties_C_has_cursor_filename_B_p(WindowProperties const *param0) {
    return ((*param0).has_cursor_filename)();
}


void
WindowProperties_C_clear_cursor_filename_v_p(WindowProperties *param0) {
    ((*param0).clear_cursor_filename)();
}


void
WindowProperties_C_set_z_order_v_pp(WindowProperties *param0, WindowProperties::ZOrder param1) {
    ((*param0).set_z_order)(param1);
}


WindowProperties::ZOrder
WindowProperties_C_get_z_order_p_p(WindowProperties const *param0) {
    return ((*param0).get_z_order)();
}


bool
WindowProperties_C_has_z_order_B_p(WindowProperties const *param0) {
    return ((*param0).has_z_order)();
}


void
WindowProperties_C_clear_z_order_v_p(WindowProperties *param0) {
    ((*param0).clear_z_order)();
}


void
WindowProperties_C_set_parent_window_v_pp(WindowProperties *param0, WindowHandle *param1) {
    ((*param0).set_parent_window)(param1);
}


void
WindowProperties_C_set_parent_window_v_p(WindowProperties *param0) {
    ((*param0).set_parent_window)();
}


void
WindowProperties_C_set_parent_window_v_pl(WindowProperties *param0, std::size_t param1) {
    ((*param0).set_parent_window)(param1);
}


WindowHandle *
WindowProperties_C_get_parent_window_p_p(WindowProperties const *param0) {
    return ((*param0).get_parent_window)();
}


bool
WindowProperties_C_has_parent_window_B_p(WindowProperties const *param0) {
    return ((*param0).has_parent_window)();
}


void
WindowProperties_C_clear_parent_window_v_p(WindowProperties *param0) {
    ((*param0).clear_parent_window)();
}


void
WindowProperties_C_add_properties_v_pp(WindowProperties *param0, WindowProperties const *param1) {
    ((*param0).add_properties)(*param1);
}


void
WindowProperties_C_output_v_pp(WindowProperties const *param0, std::ostream *param1) {
    ((*param0).output)(*param1);
}

