
#include <stdio.h>
#include <stdbool.h>
#include <time.h>

#define PT char
#define string char const
#define PN_stdfloat float


#define WindowFramework__BackgroundType char
#define WindowFramework char
#define TextFont char
#define TextEncoder__Encoding char
#define PandaFramework char
#define NodePath char
#define LVecBase3f__EVector3 char
#define LVecBase3f char
#define LVecBase2f char
#define GraphicsWindow char
#define GraphicsOutput char
#define Filename__Type char
#define Filename char
#define Engine char
#define DisplayRegion char
#define Camera char

extern Filename * Filename_C_ctor_p_v();
extern Filename * Filename_C_ctor_p_p(Filename *param0);
extern Filename * Filename_C_ctor_1_p_p(Filename const *param0);
extern Filename * Filename_C_ctor_p_pp(Filename const *param0, char *param1);
extern Filename * Filename_C_ctor_p_s(char *param0);
extern Filename * Filename_C_ctor_2_p_p(char *param0);
extern Filename * Filename_C_ctor_3_p_p(char *param0);
extern Filename * Filename_C_text_filename_p_pp(Filename const *param0);
extern Filename * Filename_C_text_filename_p_sp(char *param0);
extern Filename * Filename_C_binary_filename_p_pp(Filename const *param0);
extern Filename * Filename_C_binary_filename_p_sp(char *param0);
extern Filename * Filename_C_dso_filename_p_sp(char *param0);
extern Filename * Filename_C_executable_filename_p_sp(char *param0);
extern Filename * Filename_C_pattern_filename_p_sp(char *param0);
extern Filename * Filename_C_from_os_specific_p_spp(char *param0, char *param1);
extern Filename * Filename_C_from_os_specific_1_p_spp(char *param0);
extern Filename * Filename_C_from_os_specific_w_p_ppp(char *param0, char *param1);
extern Filename * Filename_C_from_os_specific_w_1_p_ppp(char *param0);
extern Filename * Filename_C_expand_from_p_spp(char *param0, char *param1);
extern Filename * Filename_C_expand_from_1_p_spp(char *param0);
extern Filename * Filename_C_temporary_p_spppp(char *param0, char *param1, char *param2, char *param3);
extern Filename * Filename_C_temporary_1_p_spppp(char *param0, char *param1, char *param2);
extern Filename * Filename_C_temporary_2_p_spppp(char *param0, char *param1);
extern Filename const * Filename_C_get_home_directory_p_v();
extern Filename const * Filename_C_get_temp_directory_p_v();
extern Filename const * Filename_C_get_user_appdata_directory_p_v();
extern Filename const * Filename_C_get_common_appdata_directory_p_v();
extern Filename * _inCAAAAUZ8w(char *param0, char *param1);
extern Filename * _inCAAAAe4GP(char *param0, char *param1);
extern Filename * _inCAAAAAn_g(char *param0, char *param1);
extern Filename * _inCAAAAAEbr(char *param0, char *param1);
extern Filename * _inCAAAAwt4w(char *param0, char *param1);
extern char const * _s_p(char *param0);
extern char const * Filename_C_c_str_s_p(Filename const *param0);
extern bool Filename_C_empty_B_p(Filename const *param0);
extern unsigned int Filename_C_length_p_p(Filename const *param0);
extern char _inCAAAAPYDQ(char *param0, char *param1);
extern char const * Filename_C_substr_s_pp(Filename const *param0, char *param1);
extern char const * Filename_C_substr_s_ppp(Filename const *param0, char *param1, char *param2);
extern Filename * _inCAAAA_CCc(char *param0, char *param1);
extern Filename * _inCAAAAdG6k(char *param0, char *param1);
extern Filename * _inCAAAApD3m(char *param0, char *param1);
extern char const * Filename_C_get_fullpath_s_p(Filename const *param0);
extern char const * Filename_C_get_fullpath_w_p_p(Filename const *param0);
extern char const * Filename_C_get_dirname_s_p(Filename const *param0);
extern char const * Filename_C_get_basename_s_p(Filename const *param0);
extern char const * Filename_C_get_fullpath_wo_extension_s_p(Filename const *param0);
extern char const * Filename_C_get_basename_wo_extension_s_p(Filename const *param0);
extern char const * Filename_C_get_extension_s_p(Filename const *param0);
extern void Filename_C_set_fullpath_v_pp(Filename *param0, char *param1);
extern void Filename_C_set_dirname_v_pp(Filename *param0, char *param1);
extern void Filename_C_set_basename_v_pp(Filename *param0, char *param1);
extern void Filename_C_set_fullpath_wo_extension_v_pp(Filename *param0, char *param1);
extern void Filename_C_set_basename_wo_extension_v_pp(Filename *param0, char *param1);
extern void Filename_C_set_extension_v_pp(Filename *param0, char *param1);
extern void Filename_C_set_binary_v_p(Filename *param0);
extern void Filename_C_set_text_v_p(Filename *param0);
extern bool Filename_C_is_binary_B_p(Filename const *param0);
extern bool Filename_C_is_text_B_p(Filename const *param0);
extern bool Filename_C_is_binary_or_text_B_p(Filename const *param0);
extern void Filename_C_set_type_v_pp(Filename *param0, char *param1);
extern Filename__Type Filename_C_get_type_p_p(Filename const *param0);
extern void Filename_C_set_pattern_v_pB(Filename *param0, bool param1);
extern bool Filename_C_get_pattern_B_p(Filename const *param0);
extern bool Filename_C_has_hash_B_p(Filename const *param0);
extern Filename * Filename_C_get_filename_index_p_pi(Filename const *param0, int param1);
extern char const * Filename_C_get_hash_to_end_s_p(Filename const *param0);
extern void Filename_C_set_hash_to_end_v_pp(Filename *param0, char *param1);
extern void Filename_C_extract_components_v_pp(Filename const *param0, char *param1);
extern void Filename_C_standardize_v_p(Filename *param0);
extern bool Filename_C_is_local_B_p(Filename const *param0);
extern bool Filename_C_is_fully_qualified_B_p(Filename const *param0);
extern void Filename_C_make_absolute_v_p(Filename *param0);
extern void Filename_C_make_absolute_v_pp(Filename *param0, char *param1);
extern bool Filename_C_make_canonical_B_p(Filename *param0);
extern bool Filename_C_make_true_case_B_p(Filename *param0);
extern char const * Filename_C_to_os_specific_s_p(Filename const *param0);
extern char const * Filename_C_to_os_specific_w_p_p(Filename const *param0);
extern char const * Filename_C_to_os_generic_s_p(Filename const *param0);
extern char const * Filename_C_to_os_short_name_s_p(Filename const *param0);
extern char const * Filename_C_to_os_long_name_s_p(Filename const *param0);
extern bool Filename_C_exists_B_p(Filename const *param0);
extern bool Filename_C_is_regular_file_B_p(Filename const *param0);
extern bool Filename_C_is_writable_B_p(Filename const *param0);
extern bool Filename_C_is_directory_B_p(Filename const *param0);
extern bool Filename_C_is_executable_B_p(Filename const *param0);
extern int Filename_C_compare_timestamps_i_ppBB(Filename const *param0, char *param1, bool param2, bool param3);
extern int Filename_C_compare_timestamps_1_i_ppBB(Filename const *param0, char *param1, bool param2);
extern int Filename_C_compare_timestamps_2_i_ppBB(Filename const *param0, char *param1);
extern time_t Filename_C_get_timestamp_p_p(Filename const *param0);
extern time_t Filename_C_get_access_timestamp_p_p(Filename const *param0);
extern int  Filename_C_get_file_size_p_p(Filename const *param0);
extern bool Filename_C_resolve_filename_B_ppp(Filename *param0, char *param1, char *param2);
extern bool Filename_C_resolve_filename_1_B_ppp(Filename *param0, char *param1);
extern bool Filename_C_make_relative_to_B_ppB(Filename *param0, char *param1, bool param2);
extern bool Filename_C_make_relative_to_1_B_ppB(Filename *param0, char *param1);
extern int Filename_C_find_on_searchpath_i_pp(Filename *param0, char *param1);
extern bool Filename_C_scan_directory_B_pp(Filename const *param0, char *param1);
extern bool Filename_C_open_read_B_pp(Filename const *param0, char *param1);
extern bool Filename_C_open_read_1_B_pp(Filename const *param0, char *param1);
extern bool Filename_C_open_write_B_ppB(Filename const *param0, char *param1, bool param2);
extern bool Filename_C_open_write_1_B_ppB(Filename const *param0, char *param1);
extern bool Filename_C_open_write_2_B_ppB(Filename const *param0, char *param1, bool param2);
extern bool Filename_C_open_write_3_B_ppB(Filename const *param0, char *param1);
extern bool Filename_C_open_append_B_pp(Filename const *param0, char *param1);
extern bool Filename_C_open_append_1_B_pp(Filename const *param0, char *param1);
extern bool Filename_C_open_read_write_B_ppB(Filename const *param0, char *param1, bool param2);
extern bool Filename_C_open_read_write_1_B_ppB(Filename const *param0, char *param1);
extern bool Filename_C_open_read_write_2_B_ppB(Filename const *param0, char *param1, bool param2);
extern bool Filename_C_open_read_write_3_B_ppB(Filename const *param0, char *param1);
extern bool Filename_C_open_read_append_B_pp(Filename const *param0, char *param1);
extern bool Filename_C_open_read_append_1_B_pp(Filename const *param0, char *param1);
extern bool Filename_C_chdir_B_p(Filename const *param0);
extern bool Filename_C_touch_B_p(Filename const *param0);
extern bool Filename_C_unlink_B_p(Filename const *param0);
extern bool Filename_C_rename_to_B_pp(Filename const *param0, char *param1);
extern bool Filename_C_copy_to_B_pp(Filename const *param0, char *param1);
extern bool Filename_C_make_dir_B_p(Filename const *param0);
extern bool Filename_C_mkdir_B_p(Filename const *param0);
extern bool Filename_C_rmdir_B_p(Filename const *param0);
extern bool _inCAAAAOBrR(char *param0, char *param1);
extern bool _inCAAAAsEaR(char *param0, char *param1);
extern bool _inCAAAAYSEF(char *param0, char *param1);
extern int Filename_C_compare_to_i_pp(Filename const *param0, char *param1);
extern bool Filename_C___nonzero___B_p(Filename const *param0);
extern int Filename_C_get_hash_i_p(Filename const *param0);
extern void Filename_C_output_v_pp(Filename const *param0, char *param1);
extern void Filename_C_set_filesystem_encoding_v_pp(char *param0);
extern TextEncoder__Encoding Filename_C_get_filesystem_encoding_p_v();
extern int Filename_C_get_class_type_i_v();
extern void Filename_C_init_type_v_v();
extern LVecBase3f * LVecBase3f_C_ctor_p_v();
extern LVecBase3f * LVecBase3f_C_ctor_p_pf(char *param0, float param1);
extern LVecBase3f * LVecBase3f_C_ctor_p_p(LVecBase3f const *param0);
extern LVecBase3f * LVecBase3f_C_ctor_1_p_p(char *param0);
extern LVecBase3f * LVecBase3f_C_ctor_p_f(char *param0);
extern LVecBase3f * LVecBase3f_C_ctor_p_fff(char *param0, float param1, float param2);
extern void _inCAAAA4Nkp(char *param0, char *param1);
extern LVecBase3f * _inCAAAAqOP9(char *param0, char *param1);
extern LVecBase3f * _inCAAAArfXC(char *param0, float param1);
extern LVecBase3f const * LVecBase3f_C_zero_p_v();
extern LVecBase3f const * LVecBase3f_C_unit_x_p_v();
extern LVecBase3f const * LVecBase3f_C_unit_y_p_v();
extern LVecBase3f const * LVecBase3f_C_unit_z_p_v();
extern void _inCAAAA01HX(char *param0, int param1, float param2);
extern float _inCAAAAnq7z(char *param0, int param1);
extern int LVecBase3f_C_size_i_v();
extern bool LVecBase3f_C_is_nan_B_p(LVecBase3f const *param0);
extern float LVecBase3f_C_get_cell_f_pi(LVecBase3f const *param0, int param1);
extern float LVecBase3f_C_get_x_f_p(LVecBase3f const *param0);
extern float LVecBase3f_C_get_y_f_p(LVecBase3f const *param0);
extern float LVecBase3f_C_get_z_f_p(LVecBase3f const *param0);
extern void LVecBase3f_C_set_cell_v_pif(LVecBase3f *param0, int param1, float param2);
extern void LVecBase3f_C_set_x_v_pf(LVecBase3f *param0, float param1);
extern void LVecBase3f_C_set_y_v_pf(LVecBase3f *param0, float param1);
extern void LVecBase3f_C_set_z_v_pf(LVecBase3f *param0, float param1);
extern LVecBase2f * LVecBase3f_C_get_xy_p_p(LVecBase3f const *param0);
extern LVecBase2f * LVecBase3f_C_get_xz_p_p(LVecBase3f const *param0);
extern LVecBase2f * LVecBase3f_C_get_yz_p_p(LVecBase3f const *param0);
extern void LVecBase3f_C_add_to_cell_v_pif(LVecBase3f *param0, int param1, float param2);
extern void LVecBase3f_C_add_x_v_pf(LVecBase3f *param0, float param1);
extern void LVecBase3f_C_add_y_v_pf(LVecBase3f *param0, float param1);
extern void LVecBase3f_C_add_z_v_pf(LVecBase3f *param0, float param1);
extern void LVecBase3f_C_get_data_v_p(LVecBase3f const *param0);
extern int LVecBase3f_C_get_num_components_i_v();
extern void LVecBase3f_C_begin_v_p(LVecBase3f *param0);
extern void LVecBase3f_C_begin_1_v_p(LVecBase3f const *param0);
extern void LVecBase3f_C_end_v_p(LVecBase3f *param0);
extern void LVecBase3f_C_end_1_v_p(LVecBase3f const *param0);
extern void LVecBase3f_C_fill_v_pf(LVecBase3f *param0, float param1);
extern void LVecBase3f_C_set_v_pfff(LVecBase3f *param0, float param1, float param2, float param3);
extern float LVecBase3f_C_dot_f_pp(LVecBase3f const *param0, char *param1);
extern float LVecBase3f_C_length_squared_f_p(LVecBase3f const *param0);
extern float LVecBase3f_C_length_f_p(LVecBase3f const *param0);
extern bool LVecBase3f_C_normalize_B_p(LVecBase3f *param0);
extern LVecBase3f * LVecBase3f_C_normalized_p_p(LVecBase3f const *param0);
extern LVecBase3f * LVecBase3f_C_project_p_pp(LVecBase3f const *param0, char *param1);
extern LVecBase3f * LVecBase3f_C_cross_p_pp(LVecBase3f const *param0, char *param1);
extern bool _inCAAAAdE8o(char *param0, char *param1);
extern bool _inCAAAAFt4v(char *param0, char *param1);
extern bool _inCAAAABNge(char *param0, char *param1);
extern LVecBase3f * LVecBase3f_C_get_standardized_hpr_p_p(LVecBase3f const *param0);
extern int LVecBase3f_C_compare_to_i_pp(LVecBase3f const *param0, char *param1);
extern int LVecBase3f_C_compare_to_i_ppf(LVecBase3f const *param0, char *param1, float param2);
extern unsigned int LVecBase3f_C_get_hash_p_p(LVecBase3f const *param0);
extern unsigned int LVecBase3f_C_get_hash_p_pf(LVecBase3f const *param0, float param1);
extern unsigned int LVecBase3f_C_add_hash_p_pp(LVecBase3f const *param0, char *param1);
extern unsigned int LVecBase3f_C_add_hash_p_ppf(LVecBase3f const *param0, char *param1, float param2);
extern void LVecBase3f_C_generate_hash_v_pp(LVecBase3f const *param0, char *param1);
extern void LVecBase3f_C_generate_hash_v_ppf(LVecBase3f const *param0, char *param1, float param2);
extern LVecBase3f * _inCAAAAiO_P(char *param0);
extern LVecBase3f * _inCAAAAfM9C(char *param0, char *param1);
extern LVecBase3f * _inCAAAAf8eW(char *param0, char *param1);
extern LVecBase3f * _inCAAAAHdlj(char *param0, float param1);
extern LVecBase3f * _inCAAAAY1ZU(char *param0, float param1);
extern LVecBase3f * _inCAAAAGqXQ(char *param0, char *param1);
extern LVecBase3f * _inCAAAAGa5j(char *param0, char *param1);
extern LVecBase3f * _inCAAAAPZfq(char *param0, float param1);
extern LVecBase3f * _inCAAAAOhTb(char *param0, float param1);
extern void LVecBase3f_C_componentwise_mult_v_pp(LVecBase3f *param0, char *param1);
extern LVecBase3f * LVecBase3f_C_fmax_p_pp(LVecBase3f const *param0, char *param1);
extern LVecBase3f * LVecBase3f_C_fmin_p_pp(LVecBase3f const *param0, char *param1);
extern void LVecBase3f_C_cross_into_v_pp(LVecBase3f *param0, char *param1);
extern bool LVecBase3f_C_almost_equal_B_pp(LVecBase3f const *param0, char *param1);
extern bool LVecBase3f_C_almost_equal_B_ppf(LVecBase3f const *param0, char *param1, float param2);
extern void LVecBase3f_C_output_v_pp(LVecBase3f const *param0, char *param1);
extern void LVecBase3f_C_write_datagram_fixed_v_pp(LVecBase3f const *param0, char *param1);
extern void LVecBase3f_C_read_datagram_fixed_v_pp(LVecBase3f *param0, char *param1);
extern void LVecBase3f_C_write_datagram_v_pp(LVecBase3f const *param0, char *param1);
extern void LVecBase3f_C_read_datagram_v_pp(LVecBase3f *param0, char *param1);
extern LVecBase3f__EVector3 * LVecBase3f_C_get_v_p_p(LVecBase3f const *param0);
extern int LVecBase3f_C_get_class_type_i_v();
extern void LVecBase3f_C_init_type_v_v();
extern PandaFramework * WindowFramework_C_get_panda_framework_p_p(WindowFramework const *param0);
extern GraphicsWindow * WindowFramework_C_get_graphics_window_p_p(WindowFramework const *param0);
extern GraphicsOutput * WindowFramework_C_get_graphics_output_p_p(WindowFramework const *param0);
extern NodePath * WindowFramework_C_get_camera_group_p_p(WindowFramework *param0);
extern int WindowFramework_C_get_num_cameras_i_p(WindowFramework const *param0);
extern Camera * WindowFramework_C_get_camera_p_pi(WindowFramework const *param0, int param1);
extern DisplayRegion * WindowFramework_C_get_display_region_2d_p_p(WindowFramework const *param0);
extern DisplayRegion * WindowFramework_C_get_display_region_3d_p_p(WindowFramework const *param0);
extern NodePath * WindowFramework_C_get_render_p_p(WindowFramework *param0);
extern NodePath * WindowFramework_C_get_render_2d_p_p(WindowFramework *param0);
extern NodePath * WindowFramework_C_get_aspect_2d_p_p(WindowFramework *param0);
extern NodePath * WindowFramework_C_get_pixel_2d_p_p(WindowFramework *param0);
extern NodePath * WindowFramework_C_get_mouse_p_p(WindowFramework *param0);
extern NodePath * WindowFramework_C_get_button_thrower_p_p(WindowFramework *param0);
extern void WindowFramework_C_enable_keyboard_v_p(WindowFramework *param0);
extern void WindowFramework_C_setup_trackball_v_p(WindowFramework *param0);
extern void WindowFramework_C_center_trackball_v_pp(WindowFramework *param0, char *param1);
extern bool WindowFramework_C_load_models_B_ppp(WindowFramework *param0, char *param1, char *param2);
extern NodePath * WindowFramework_C_load_model_p_ppp(WindowFramework *param0, char *param1, char *param2);
extern NodePath * WindowFramework_C_load_default_model_p_pp(WindowFramework *param0, char *param1);
extern void WindowFramework_C_loop_animations_v_pi(WindowFramework *param0, int param1);
extern void WindowFramework_C_loop_animations_1_v_pi(WindowFramework *param0);
extern void WindowFramework_C_stagger_animations_v_p(WindowFramework *param0);
extern void WindowFramework_C_next_anim_control_v_p(WindowFramework *param0);
extern void WindowFramework_C_set_anim_controls_v_pB(WindowFramework *param0, bool param1);
extern bool WindowFramework_C_get_anim_controls_B_p(WindowFramework const *param0);
extern void WindowFramework_C_adjust_dimensions_v_p(WindowFramework *param0);
extern WindowFramework * WindowFramework_C_split_window_p_pp(WindowFramework *param0, char *param1);
extern WindowFramework * WindowFramework_C_split_window_1_p_pp(WindowFramework *param0);
extern void WindowFramework_C_set_wireframe_v_pBB(WindowFramework *param0, bool param1, bool param2);
extern void WindowFramework_C_set_wireframe_1_v_pBB(WindowFramework *param0, bool param1);
extern void WindowFramework_C_set_texture_v_pB(WindowFramework *param0, bool param1);
extern void WindowFramework_C_set_two_sided_v_pB(WindowFramework *param0, bool param1);
extern void WindowFramework_C_set_one_sided_reverse_v_pB(WindowFramework *param0, bool param1);
extern void WindowFramework_C_set_lighting_v_pB(WindowFramework *param0, bool param1);
extern void WindowFramework_C_set_perpixel_v_pB(WindowFramework *param0, bool param1);
extern void WindowFramework_C_set_background_type_v_pp(WindowFramework *param0, char *param1);
extern bool WindowFramework_C_get_wireframe_B_p(WindowFramework const *param0);
extern bool WindowFramework_C_get_wireframe_filled_B_p(WindowFramework const *param0);
extern bool WindowFramework_C_get_texture_B_p(WindowFramework const *param0);
extern bool WindowFramework_C_get_two_sided_B_p(WindowFramework const *param0);
extern bool WindowFramework_C_get_one_sided_reverse_B_p(WindowFramework const *param0);
extern bool WindowFramework_C_get_lighting_B_p(WindowFramework const *param0);
extern bool WindowFramework_C_get_perpixel_B_p(WindowFramework const *param0);
extern WindowFramework__BackgroundType WindowFramework_C_get_background_type_p_p(WindowFramework const *param0);
extern TextFont * WindowFramework_C_get_shuttle_controls_font_p_v();
extern NodePath * WindowFramework_C_make_camera_p_p(WindowFramework *param0);
extern int WindowFramework_C_get_class_type_i_v();
extern void WindowFramework_C_init_type_v_v();
extern int WindowFramework_C_get_type_i_p(WindowFramework const *param0);
extern int WindowFramework_C_force_init_type_i_p(WindowFramework *param0);
extern WindowFramework * WindowFramework_C_ctor_p_p(WindowFramework const *param0);
extern void NodePath_C_reparent_to_v_pp(NodePath *param0, char *param1);
extern void NodePath_C_look_at_v_pfff(NodePath *param0, float param1, float param2, float param3);
extern void NodePath_C_set_pos_v_pp(NodePath *param0, char *param1);
extern void NodePath_C_set_scale_v_pp(NodePath *param0, char *param1);
extern NodePath * NodePath_C_ctor_p_v();
extern NodePath * NodePath_C_ctor_p_p(NodePath const *param0);
extern Engine * Engine_C_ctor_p_v();
extern Engine * Engine_C_ctor_p_p(Engine const *param0);
extern void Engine_C_dtor_v_p(Engine *param0);
extern void Engine_C_stop_v_v();
extern int Engine_C_is_alive_i_v();
extern int Engine_C_HelloEngine_i_p(Engine *param0);
extern int Engine_C_casetest_i_pipB(Engine *param0, int param1, char *param2, bool param3);
extern NodePath * Engine_C_load_model_p_ps(Engine *param0, char *param1);
extern void Engine_C_attach_v_pp(Engine *param0, char *param1);
extern void Engine_C_op_pos_v_ppp(Engine *param0, char *param1, char *param2);
extern void Engine_C_op_scale_v_ppp(Engine *param0, char *param1, char *param2);
extern void Engine_C_build_v_p(Engine *param0);
extern void Engine_C_step_v_p(Engine *param0);
extern char const * Engine_C_get_version_string_s_v();
extern char const * Engine_C_get_wframe_p_p(Engine const *param0);
extern PandaFramework * Engine_C_get_framework_p_p(Engine const *param0);
extern void Engine_C_set_framework_v_pp(Engine *param0, char *param1);
extern int check_timer_i_v();
extern void emscripten_cancel_main_loop_v_v();
extern void main_loop_or_step_v_v();
extern void emscripten_force_exit_v_ii(char *param0);
