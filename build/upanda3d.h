
#include <stdio.h>
#include <stdbool.h>
#include <time.h>

#define PT char
#define string char const
#define PN_stdfloat float


#define vector_uchar char
#define WindowFramework__BackgroundType char
#define WindowFramework char
#define TransparencyAttrib__Mode char
#define TransformState char
#define TextureStageCollection char
#define TextureStage char
#define TextureCollection char
#define Texture char
#define TextFont char
#define TextEncoder__Encoding char
#define ShaderInput char
#define Shader char
#define SamplerState char
#define RenderState char
#define RenderModeAttrib__Mode char
#define RenderEffects char
#define RenderEffect char
#define RenderAttrib__TexGenMode char
#define RenderAttrib char
#define RecorderController char
#define PandaSystem char
#define PandaNode char
#define PandaFramework char
#define NodePathCollection char
#define NodePath__ErrorType char
#define NodePath char
#define MaterialCollection char
#define Material char
#define LogicOpAttrib__Operation char
#define LVector3 char
#define LVecBase4 char
#define LVecBase3f__EVector3 char
#define LVecBase3f char
#define LVecBase3 char
#define LVecBase2f char
#define LVecBase2 char
#define LQuaternion char
#define LPoint3 char
#define LMatrix4 char
#define LColor char
#define InternalNameCollection char
#define GraphicsWindow char
#define GraphicsPipe char
#define GraphicsOutput char
#define GraphicsEngine char
#define Fog char
#define Filename__Type char
#define Filename char
#define EventHandler char
#define Engine char
#define DrawMask char
#define DisplayRegion char
#define ConfigPage char
#define ConfigDeclaration char
#define CollideMask char
#define Camera char
#define BoundingVolume char
#define AuxSceneData char
#define AsyncTaskManager char

extern Camera * Camera_C_ctor_p_p(Camera const *param0);
extern Camera * Camera_C_ctor_p_pp(char *param0, char *param1);
extern Camera * Camera_C_ctor_1_p_pp(char *param0);
extern PandaNode * Camera_C_make_copy_p_p(Camera const *param0);
extern bool Camera_C_safe_to_flatten_B_p(Camera const *param0);
extern bool Camera_C_safe_to_transform_B_p(Camera const *param0);
extern void Camera_C_set_active_v_pB(Camera *param0, bool param1);
extern bool Camera_C_is_active_B_p(Camera const *param0);
extern void Camera_C_set_scene_v_pp(Camera *param0, char *param1);
extern NodePath const * Camera_C_get_scene_p_p(Camera const *param0);
extern NodePath * NodePath_C_ctor_p_v();
extern NodePath * NodePath_C_ctor_p_p(NodePath *param0);
extern NodePath * NodePath_C_ctor_1_p_p(NodePath const *param0);
extern NodePath * NodePath_C_ctor_p_ppp(NodePath const *param0, char *param1, char *param2);
extern NodePath * NodePath_C_ctor_1_p_ppp(NodePath const *param0, char *param1);
extern NodePath * NodePath_C_ctor_p_pp(char *param0, char *param1);
extern NodePath * NodePath_C_ctor_1_p_pp(char *param0);
extern NodePath * NodePath_C_ctor_2_p_pp(char *param0, char *param1);
extern NodePath * NodePath_C_ctor_3_p_pp(char *param0);
extern NodePath * NodePath_C_any_path_p_ppp(char *param0, char *param1);
extern NodePath * NodePath_C_any_path_1_p_ppp(char *param0);
extern NodePath * _inCAAAAfxyW(char *param0, char *param1);
extern NodePath * _inCAAAArj60(char *param0, char *param1);
extern void NodePath_C_clear_v_p(NodePath *param0);
extern NodePath * NodePath_C_not_found_p_v();
extern NodePath * NodePath_C_removed_p_v();
extern NodePath * NodePath_C_fail_p_v();
extern void NodePath_C_set_max_search_depth_v_ii(char *param0);
extern int NodePath_C_get_max_search_depth_i_v();
extern bool NodePath_C_is_empty_B_p(NodePath const *param0);
extern bool bool_B_p(char *param0);
extern bool NodePath_C_is_singleton_B_pp(NodePath const *param0, char *param1);
extern bool NodePath_C_is_singleton_1_B_pp(NodePath const *param0);
extern int NodePath_C_get_num_nodes_i_pp(NodePath const *param0, char *param1);
extern int NodePath_C_get_num_nodes_1_i_pp(NodePath const *param0);
extern PandaNode * NodePath_C_get_node_p_pip(NodePath const *param0, int param1, char *param2);
extern PandaNode * NodePath_C_get_node_1_p_pip(NodePath const *param0, int param1);
extern NodePath * NodePath_C_get_ancestor_p_pip(NodePath const *param0, int param1, char *param2);
extern NodePath * NodePath_C_get_ancestor_1_p_pip(NodePath const *param0, int param1);
extern NodePath__ErrorType NodePath_C_get_error_type_p_p(NodePath const *param0);
extern PandaNode * NodePath_C_get_top_node_p_pp(NodePath const *param0, char *param1);
extern PandaNode * NodePath_C_get_top_node_1_p_pp(NodePath const *param0);
extern NodePath * NodePath_C_get_top_p_pp(NodePath const *param0, char *param1);
extern NodePath * NodePath_C_get_top_1_p_pp(NodePath const *param0);
extern PandaNode * NodePath_C_node_p_p(NodePath const *param0);
extern int NodePath_C_get_key_i_p(NodePath const *param0);
extern unsigned int NodePath_C_add_hash_p_pp(NodePath const *param0, char *param1);
extern bool NodePath_C_is_same_graph_B_ppp(NodePath const *param0, char *param1, char *param2);
extern bool NodePath_C_is_same_graph_1_B_ppp(NodePath const *param0, char *param1);
extern bool NodePath_C_is_ancestor_of_B_ppp(NodePath const *param0, char *param1, char *param2);
extern bool NodePath_C_is_ancestor_of_1_B_ppp(NodePath const *param0, char *param1);
extern NodePath * NodePath_C_get_common_ancestor_p_ppp(NodePath const *param0, char *param1, char *param2);
extern NodePath * NodePath_C_get_common_ancestor_1_p_ppp(NodePath const *param0, char *param1);
extern NodePathCollection * NodePath_C_get_children_p_pp(NodePath const *param0, char *param1);
extern NodePathCollection * NodePath_C_get_children_1_p_pp(NodePath const *param0);
extern int NodePath_C_get_num_children_i_pp(NodePath const *param0, char *param1);
extern int NodePath_C_get_num_children_1_i_pp(NodePath const *param0);
extern NodePath * NodePath_C_get_child_p_pip(NodePath const *param0, int param1, char *param2);
extern NodePath * NodePath_C_get_child_1_p_pip(NodePath const *param0, int param1);
extern NodePathCollection * NodePath_C_get_stashed_children_p_pp(NodePath const *param0, char *param1);
extern NodePathCollection * NodePath_C_get_stashed_children_1_p_pp(NodePath const *param0);
extern NodePathCollection * NodePathCollection_C_ctor_p_v();
extern NodePathCollection * NodePathCollection_C_ctor_p_p(NodePathCollection const *param0);
extern void NodePathCollection_C_add_path_v_pp(NodePathCollection *param0, char *param1);
extern bool NodePathCollection_C_remove_path_B_pp(NodePathCollection *param0, char *param1);
extern void NodePathCollection_C_add_paths_from_v_pp(NodePathCollection *param0, char *param1);
extern void NodePathCollection_C_remove_paths_from_v_pp(NodePathCollection *param0, char *param1);
extern void NodePathCollection_C_remove_duplicate_paths_v_p(NodePathCollection *param0);
extern bool NodePathCollection_C_has_path_B_pp(NodePathCollection const *param0, char *param1);
extern void NodePathCollection_C_clear_v_p(NodePathCollection *param0);
extern void NodePathCollection_C_reserve_v_pp(NodePathCollection *param0, char *param1);
extern bool NodePathCollection_C_is_empty_B_p(NodePathCollection const *param0);
extern int NodePathCollection_C_get_num_paths_i_p(NodePathCollection const *param0);
extern NodePath * NodePathCollection_C_get_path_p_pi(NodePathCollection const *param0, int param1);
extern NodePath * _inCAAAA3gAF(char *param0, char *param1);
extern unsigned int NodePathCollection_C_size_p_p(NodePathCollection const *param0);
extern NodePathCollection * _inCAAAA5pUd(char *param0, char *param1);
extern NodePathCollection * _inCAAAAwPWd(char *param0, char *param1);
extern void NodePathCollection_C_append_v_pp(NodePathCollection *param0, char *param1);
extern void NodePathCollection_C_extend_v_pp(NodePathCollection *param0, char *param1);
extern void NodePathCollection_C_ls_v_p(NodePathCollection const *param0);
extern void NodePathCollection_C_ls_v_ppi(NodePathCollection const *param0, char *param1, int param2);
extern void NodePathCollection_C_ls_1_v_ppi(NodePathCollection const *param0, char *param1);
extern NodePathCollection * NodePathCollection_C_find_all_matches_p_pp(NodePathCollection const *param0, char *param1);
extern void NodePathCollection_C_reparent_to_v_pp(NodePathCollection *param0, char *param1);
extern void NodePathCollection_C_wrt_reparent_to_v_pp(NodePathCollection *param0, char *param1);
extern void NodePathCollection_C_show_v_p(NodePathCollection *param0);
extern void NodePathCollection_C_hide_v_p(NodePathCollection *param0);
extern void NodePathCollection_C_stash_v_p(NodePathCollection *param0);
extern void NodePathCollection_C_unstash_v_p(NodePathCollection *param0);
extern void NodePathCollection_C_detach_v_p(NodePathCollection *param0);
extern CollideMask * NodePathCollection_C_get_collide_mask_p_p(NodePathCollection const *param0);
extern void NodePathCollection_C_set_collide_mask_v_pppp(NodePathCollection *param0, char *param1, char *param2, int param3);
extern void NodePathCollection_C_set_collide_mask_1_v_pppp(NodePathCollection *param0, char *param1, char *param2);
extern void NodePathCollection_C_set_collide_mask_2_v_pppp(NodePathCollection *param0, char *param1);
extern bool NodePathCollection_C_calc_tight_bounds_B_ppp(NodePathCollection const *param0, char *param1, char *param2);
extern void NodePathCollection_C_set_texture_v_ppi(NodePathCollection *param0, char *param1, int param2);
extern void NodePathCollection_C_set_texture_1_v_ppi(NodePathCollection *param0, char *param1);
extern void NodePathCollection_C_set_texture_v_pppi(NodePathCollection *param0, char *param1, char *param2, int param3);
extern void NodePathCollection_C_set_texture_1_v_pppi(NodePathCollection *param0, char *param1, char *param2);
extern void NodePathCollection_C_set_texture_off_v_ppi(NodePathCollection *param0, char *param1, int param2);
extern void NodePathCollection_C_set_texture_off_1_v_ppi(NodePathCollection *param0, char *param1);
extern void NodePathCollection_C_set_texture_off_v_pi(NodePathCollection *param0, int param1);
extern void NodePathCollection_C_set_texture_off_1_v_pi(NodePathCollection *param0);
extern void NodePathCollection_C_set_color_v_ppi(NodePathCollection *param0, char *param1, int param2);
extern void NodePathCollection_C_set_color_1_v_ppi(NodePathCollection *param0, char *param1);
extern void NodePathCollection_C_set_color_v_pffffi(NodePathCollection *param0, float param1, float param2, float param3, float param4, int param5);
extern void NodePathCollection_C_set_color_1_v_pffffi(NodePathCollection *param0, float param1, float param2, float param3, float param4);
extern void NodePathCollection_C_set_color_2_v_pffffi(NodePathCollection *param0, float param1, float param2, float param3);
extern void NodePathCollection_C_set_color_scale_v_ppi(NodePathCollection *param0, char *param1, int param2);
extern void NodePathCollection_C_set_color_scale_1_v_ppi(NodePathCollection *param0, char *param1);
extern void NodePathCollection_C_set_color_scale_v_pffffi(NodePathCollection *param0, float param1, float param2, float param3, float param4, int param5);
extern void NodePathCollection_C_set_color_scale_1_v_pffffi(NodePathCollection *param0, float param1, float param2, float param3, float param4);
extern void NodePathCollection_C_set_color_scale_2_v_pffffi(NodePathCollection *param0, float param1, float param2, float param3);
extern void NodePathCollection_C_compose_color_scale_v_ppi(NodePathCollection *param0, char *param1, int param2);
extern void NodePathCollection_C_compose_color_scale_1_v_ppi(NodePathCollection *param0, char *param1);
extern void NodePathCollection_C_compose_color_scale_v_pffffi(NodePathCollection *param0, float param1, float param2, float param3, float param4, int param5);
extern void NodePathCollection_C_compose_color_scale_1_v_pffffi(NodePathCollection *param0, float param1, float param2, float param3, float param4);
extern void NodePathCollection_C_compose_color_scale_2_v_pffffi(NodePathCollection *param0, float param1, float param2, float param3);
extern void NodePathCollection_C_set_attrib_v_ppi(NodePathCollection *param0, char *param1, int param2);
extern void NodePathCollection_C_set_attrib_1_v_ppi(NodePathCollection *param0, char *param1);
extern void NodePathCollection_C_output_v_pp(NodePathCollection const *param0, char *param1);
extern void NodePathCollection_C_write_v_ppi(NodePathCollection const *param0, char *param1, int param2);
extern void NodePathCollection_C_write_1_v_ppi(NodePathCollection const *param0, char *param1);
extern int NodePath_C_count_num_descendants_i_p(NodePath const *param0);
extern bool NodePath_C_has_parent_B_pp(NodePath const *param0, char *param1);
extern bool NodePath_C_has_parent_1_B_pp(NodePath const *param0);
extern NodePath * NodePath_C_get_parent_p_pp(NodePath const *param0, char *param1);
extern NodePath * NodePath_C_get_parent_1_p_pp(NodePath const *param0);
extern int NodePath_C_get_sort_i_pp(NodePath const *param0, char *param1);
extern int NodePath_C_get_sort_1_i_pp(NodePath const *param0);
extern NodePath * NodePath_C_find_p_pp(NodePath const *param0, char *param1);
extern NodePath * NodePath_C_find_path_to_p_pp(NodePath const *param0, char *param1);
extern NodePathCollection * NodePath_C_find_all_matches_p_pp(NodePath const *param0, char *param1);
extern NodePathCollection * NodePath_C_find_all_paths_to_p_pp(NodePath const *param0, char *param1);
extern void NodePath_C_reparent_to_v_ppip(NodePath *param0, char *param1, int param2, char *param3);
extern void NodePath_C_reparent_to_1_v_ppip(NodePath *param0, char *param1, int param2);
extern void NodePath_C_reparent_to_2_v_ppip(NodePath *param0, char *param1);
extern void NodePath_C_stash_to_v_ppip(NodePath *param0, char *param1, int param2, char *param3);
extern void NodePath_C_stash_to_1_v_ppip(NodePath *param0, char *param1, int param2);
extern void NodePath_C_stash_to_2_v_ppip(NodePath *param0, char *param1);
extern void NodePath_C_wrt_reparent_to_v_ppip(NodePath *param0, char *param1, int param2, char *param3);
extern void NodePath_C_wrt_reparent_to_1_v_ppip(NodePath *param0, char *param1, int param2);
extern void NodePath_C_wrt_reparent_to_2_v_ppip(NodePath *param0, char *param1);
extern NodePath * NodePath_C_instance_to_p_ppip(NodePath const *param0, char *param1, int param2, char *param3);
extern NodePath * NodePath_C_instance_to_1_p_ppip(NodePath const *param0, char *param1, int param2);
extern NodePath * NodePath_C_instance_to_2_p_ppip(NodePath const *param0, char *param1);
extern NodePath * NodePath_C_instance_under_node_p_pppip(NodePath const *param0, char *param1, char *param2, int param3, char *param4);
extern NodePath * NodePath_C_instance_under_node_1_p_pppip(NodePath const *param0, char *param1, char *param2, int param3);
extern NodePath * NodePath_C_instance_under_node_2_p_pppip(NodePath const *param0, char *param1, char *param2);
extern NodePath * NodePath_C_copy_to_p_ppip(NodePath const *param0, char *param1, int param2, char *param3);
extern NodePath * NodePath_C_copy_to_1_p_ppip(NodePath const *param0, char *param1, int param2);
extern NodePath * NodePath_C_copy_to_2_p_ppip(NodePath const *param0, char *param1);
extern NodePath * NodePath_C_attach_new_node_p_ppip(NodePath const *param0, char *param1, int param2, char *param3);
extern NodePath * NodePath_C_attach_new_node_1_p_ppip(NodePath const *param0, char *param1, int param2);
extern NodePath * NodePath_C_attach_new_node_2_p_ppip(NodePath const *param0, char *param1);
extern NodePath * NodePath_C_attach_new_node_3_p_ppip(NodePath const *param0, char *param1, int param2, char *param3);
extern NodePath * NodePath_C_attach_new_node_4_p_ppip(NodePath const *param0, char *param1, int param2);
extern NodePath * NodePath_C_attach_new_node_5_p_ppip(NodePath const *param0, char *param1);
extern void NodePath_C_remove_node_v_pp(NodePath *param0, char *param1);
extern void NodePath_C_remove_node_1_v_pp(NodePath *param0);
extern void NodePath_C_detach_node_v_pp(NodePath *param0, char *param1);
extern void NodePath_C_detach_node_1_v_pp(NodePath *param0);
extern void NodePath_C_output_v_pp(NodePath const *param0, char *param1);
extern void NodePath_C_ls_v_p(NodePath const *param0);
extern void NodePath_C_ls_v_ppi(NodePath const *param0, char *param1, int param2);
extern void NodePath_C_ls_1_v_ppi(NodePath const *param0, char *param1);
extern void NodePath_C_reverse_ls_v_p(NodePath const *param0);
extern int NodePath_C_reverse_ls_i_ppi(NodePath const *param0, char *param1, int param2);
extern int NodePath_C_reverse_ls_1_i_ppi(NodePath const *param0, char *param1);
extern char * NodePath_C_get_state_p_ppp(NodePath const *param0, char *param1, char *param2);
extern char * NodePath_C_get_state_1_p_ppp(NodePath const *param0, char *param1);
extern RenderState const * NodePath_C_get_state_p_pp(NodePath const *param0, char *param1);
extern RenderState const * NodePath_C_get_state_1_p_pp(NodePath const *param0);
extern void NodePath_C_set_state_v_pppp(NodePath *param0, char *param1, char *param2, char *param3);
extern void NodePath_C_set_state_1_v_pppp(NodePath *param0, char *param1, char *param2);
extern void NodePath_C_set_state_v_ppp(NodePath *param0, char *param1, char *param2);
extern void NodePath_C_set_state_1_v_ppp(NodePath *param0, char *param1);
extern char * NodePath_C_get_net_state_p_pp(NodePath const *param0, char *param1);
extern char * NodePath_C_get_net_state_1_p_pp(NodePath const *param0);
extern void NodePath_C_set_attrib_v_ppi(NodePath *param0, char *param1, int param2);
extern void NodePath_C_set_attrib_1_v_ppi(NodePath *param0, char *param1);
extern RenderAttrib const * NodePath_C_get_attrib_p_pp(NodePath const *param0, int param1);
extern bool NodePath_C_has_attrib_B_pp(NodePath const *param0, int param1);
extern void NodePath_C_clear_attrib_v_pp(NodePath *param0, int param1);
extern void NodePath_C_set_effect_v_pp(NodePath *param0, char *param1);
extern RenderEffect const * NodePath_C_get_effect_p_pp(NodePath const *param0, int param1);
extern bool NodePath_C_has_effect_B_pp(NodePath const *param0, int param1);
extern void NodePath_C_clear_effect_v_pp(NodePath *param0, int param1);
extern void NodePath_C_set_effects_v_pp(NodePath *param0, char *param1);
extern RenderEffects const * NodePath_C_get_effects_p_p(NodePath const *param0);
extern void NodePath_C_clear_effects_v_p(NodePath *param0);
extern char * NodePath_C_get_transform_p_ppp(NodePath const *param0, char *param1, char *param2);
extern char * NodePath_C_get_transform_1_p_ppp(NodePath const *param0, char *param1);
extern TransformState const * NodePath_C_get_transform_p_pp(NodePath const *param0, char *param1);
extern TransformState const * NodePath_C_get_transform_1_p_pp(NodePath const *param0);
extern void NodePath_C_clear_transform_v_ppp(NodePath *param0, char *param1, char *param2);
extern void NodePath_C_clear_transform_1_v_ppp(NodePath *param0, char *param1);
extern void NodePath_C_clear_transform_v_pp(NodePath *param0, char *param1);
extern void NodePath_C_clear_transform_1_v_pp(NodePath *param0);
extern void NodePath_C_set_transform_v_pppp(NodePath *param0, char *param1, char *param2, char *param3);
extern void NodePath_C_set_transform_1_v_pppp(NodePath *param0, char *param1, char *param2);
extern void NodePath_C_set_transform_v_ppp(NodePath *param0, char *param1, char *param2);
extern void NodePath_C_set_transform_1_v_ppp(NodePath *param0, char *param1);
extern char * NodePath_C_get_net_transform_p_pp(NodePath const *param0, char *param1);
extern char * NodePath_C_get_net_transform_1_p_pp(NodePath const *param0);
extern char * NodePath_C_get_prev_transform_p_ppp(NodePath const *param0, char *param1, char *param2);
extern char * NodePath_C_get_prev_transform_1_p_ppp(NodePath const *param0, char *param1);
extern TransformState const * NodePath_C_get_prev_transform_p_pp(NodePath const *param0, char *param1);
extern TransformState const * NodePath_C_get_prev_transform_1_p_pp(NodePath const *param0);
extern void NodePath_C_set_prev_transform_v_pppp(NodePath *param0, char *param1, char *param2, char *param3);
extern void NodePath_C_set_prev_transform_1_v_pppp(NodePath *param0, char *param1, char *param2);
extern void NodePath_C_set_prev_transform_v_ppp(NodePath *param0, char *param1, char *param2);
extern void NodePath_C_set_prev_transform_1_v_ppp(NodePath *param0, char *param1);
extern char * NodePath_C_get_net_prev_transform_p_pp(NodePath const *param0, char *param1);
extern char * NodePath_C_get_net_prev_transform_1_p_pp(NodePath const *param0);
extern void NodePath_C_set_pos_v_pp(NodePath *param0, char *param1);
extern void NodePath_C_set_pos_v_ppp(NodePath *param0, char *param1, char *param2);
extern void NodePath_C_set_pos_v_ppfff(NodePath *param0, char *param1, float param2, float param3, float param4);
extern void NodePath_C_set_pos_v_pfff(NodePath *param0, float param1, float param2, float param3);
extern void NodePath_C_set_x_v_ppf(NodePath *param0, char *param1, float param2);
extern void NodePath_C_set_x_v_pf(NodePath *param0, float param1);
extern void NodePath_C_set_y_v_ppf(NodePath *param0, char *param1, float param2);
extern void NodePath_C_set_y_v_pf(NodePath *param0, float param1);
extern void NodePath_C_set_z_v_ppf(NodePath *param0, char *param1, float param2);
extern void NodePath_C_set_z_v_pf(NodePath *param0, float param1);
extern void NodePath_C_set_fluid_pos_v_pp(NodePath *param0, char *param1);
extern void NodePath_C_set_fluid_pos_v_ppp(NodePath *param0, char *param1, char *param2);
extern void NodePath_C_set_fluid_pos_v_ppfff(NodePath *param0, char *param1, float param2, float param3, float param4);
extern void NodePath_C_set_fluid_pos_v_pfff(NodePath *param0, float param1, float param2, float param3);
extern void NodePath_C_set_fluid_x_v_ppf(NodePath *param0, char *param1, float param2);
extern void NodePath_C_set_fluid_x_v_pf(NodePath *param0, float param1);
extern void NodePath_C_set_fluid_y_v_ppf(NodePath *param0, char *param1, float param2);
extern void NodePath_C_set_fluid_y_v_pf(NodePath *param0, float param1);
extern void NodePath_C_set_fluid_z_v_ppf(NodePath *param0, char *param1, float param2);
extern void NodePath_C_set_fluid_z_v_pf(NodePath *param0, float param1);
extern LPoint3 * NodePath_C_get_pos_p_p(NodePath const *param0);
extern LPoint3 * NodePath_C_get_pos_p_pp(NodePath const *param0, char *param1);
extern float NodePath_C_get_x_f_p(NodePath const *param0);
extern float NodePath_C_get_x_f_pp(NodePath const *param0, char *param1);
extern float NodePath_C_get_y_f_p(NodePath const *param0);
extern float NodePath_C_get_y_f_pp(NodePath const *param0, char *param1);
extern float NodePath_C_get_z_f_p(NodePath const *param0);
extern float NodePath_C_get_z_f_pp(NodePath const *param0, char *param1);
extern LVector3 * NodePath_C_get_pos_delta_p_p(NodePath const *param0);
extern LVector3 * NodePath_C_get_pos_delta_p_pp(NodePath const *param0, char *param1);
extern void NodePath_C_set_hpr_v_pp(NodePath *param0, char *param1);
extern void NodePath_C_set_hpr_v_ppp(NodePath *param0, char *param1, char *param2);
extern void NodePath_C_set_hpr_v_ppfff(NodePath *param0, char *param1, float param2, float param3, float param4);
extern void NodePath_C_set_hpr_v_pfff(NodePath *param0, float param1, float param2, float param3);
extern void NodePath_C_set_h_v_ppf(NodePath *param0, char *param1, float param2);
extern void NodePath_C_set_h_v_pf(NodePath *param0, float param1);
extern void NodePath_C_set_p_v_ppf(NodePath *param0, char *param1, float param2);
extern void NodePath_C_set_p_v_pf(NodePath *param0, float param1);
extern void NodePath_C_set_r_v_ppf(NodePath *param0, char *param1, float param2);
extern void NodePath_C_set_r_v_pf(NodePath *param0, float param1);
extern LVecBase3 * NodePath_C_get_hpr_p_p(NodePath const *param0);
extern LVecBase3 * NodePath_C_get_hpr_p_pp(NodePath const *param0, char *param1);
extern float NodePath_C_get_h_f_p(NodePath const *param0);
extern float NodePath_C_get_h_f_pp(NodePath const *param0, char *param1);
extern float NodePath_C_get_p_f_p(NodePath const *param0);
extern float NodePath_C_get_p_f_pp(NodePath const *param0, char *param1);
extern float NodePath_C_get_r_f_p(NodePath const *param0);
extern float NodePath_C_get_r_f_pp(NodePath const *param0, char *param1);
extern void NodePath_C_set_quat_v_pp(NodePath *param0, char *param1);
extern void NodePath_C_set_quat_v_ppp(NodePath *param0, char *param1, char *param2);
extern LQuaternion * NodePath_C_get_quat_p_p(NodePath const *param0);
extern LQuaternion * NodePath_C_get_quat_p_pp(NodePath const *param0, char *param1);
extern void NodePath_C_set_scale_v_pp(NodePath *param0, char *param1);
extern void NodePath_C_set_scale_v_ppp(NodePath *param0, char *param1, char *param2);
extern void NodePath_C_set_scale_v_ppf(NodePath *param0, char *param1, float param2);
extern void NodePath_C_set_scale_v_ppfff(NodePath *param0, char *param1, float param2, float param3, float param4);
extern void NodePath_C_set_scale_v_pf(NodePath *param0, float param1);
extern void NodePath_C_set_scale_v_pfff(NodePath *param0, float param1, float param2, float param3);
extern void NodePath_C_set_sx_v_ppf(NodePath *param0, char *param1, float param2);
extern void NodePath_C_set_sx_v_pf(NodePath *param0, float param1);
extern void NodePath_C_set_sy_v_ppf(NodePath *param0, char *param1, float param2);
extern void NodePath_C_set_sy_v_pf(NodePath *param0, float param1);
extern void NodePath_C_set_sz_v_ppf(NodePath *param0, char *param1, float param2);
extern void NodePath_C_set_sz_v_pf(NodePath *param0, float param1);
extern LVecBase3 * NodePath_C_get_scale_p_p(NodePath const *param0);
extern LVecBase3 * NodePath_C_get_scale_p_pp(NodePath const *param0, char *param1);
extern float NodePath_C_get_sx_f_p(NodePath const *param0);
extern float NodePath_C_get_sx_f_pp(NodePath const *param0, char *param1);
extern float NodePath_C_get_sy_f_p(NodePath const *param0);
extern float NodePath_C_get_sy_f_pp(NodePath const *param0, char *param1);
extern float NodePath_C_get_sz_f_p(NodePath const *param0);
extern float NodePath_C_get_sz_f_pp(NodePath const *param0, char *param1);
extern void NodePath_C_set_shear_v_pp(NodePath *param0, char *param1);
extern void NodePath_C_set_shear_v_ppp(NodePath *param0, char *param1, char *param2);
extern void NodePath_C_set_shear_v_ppfff(NodePath *param0, char *param1, float param2, float param3, float param4);
extern void NodePath_C_set_shear_v_pfff(NodePath *param0, float param1, float param2, float param3);
extern void NodePath_C_set_shxy_v_ppf(NodePath *param0, char *param1, float param2);
extern void NodePath_C_set_shxy_v_pf(NodePath *param0, float param1);
extern void NodePath_C_set_shxz_v_ppf(NodePath *param0, char *param1, float param2);
extern void NodePath_C_set_shxz_v_pf(NodePath *param0, float param1);
extern void NodePath_C_set_shyz_v_ppf(NodePath *param0, char *param1, float param2);
extern void NodePath_C_set_shyz_v_pf(NodePath *param0, float param1);
extern LVecBase3 * NodePath_C_get_shear_p_p(NodePath const *param0);
extern LVecBase3 * NodePath_C_get_shear_p_pp(NodePath const *param0, char *param1);
extern float NodePath_C_get_shxy_f_p(NodePath const *param0);
extern float NodePath_C_get_shxy_f_pp(NodePath const *param0, char *param1);
extern float NodePath_C_get_shxz_f_p(NodePath const *param0);
extern float NodePath_C_get_shxz_f_pp(NodePath const *param0, char *param1);
extern float NodePath_C_get_shyz_f_p(NodePath const *param0);
extern float NodePath_C_get_shyz_f_pp(NodePath const *param0, char *param1);
extern void NodePath_C_set_pos_hpr_v_ppp(NodePath *param0, char *param1, char *param2);
extern void NodePath_C_set_pos_hpr_v_pppp(NodePath *param0, char *param1, char *param2, char *param3);
extern void NodePath_C_set_pos_hpr_v_ppffffff(NodePath *param0, char *param1, float param2, float param3, float param4, float param5, float param6, float param7);
extern void NodePath_C_set_pos_hpr_v_pffffff(NodePath *param0, float param1, float param2, float param3, float param4, float param5, float param6);
extern void NodePath_C_set_pos_quat_v_ppp(NodePath *param0, char *param1, char *param2);
extern void NodePath_C_set_pos_quat_v_pppp(NodePath *param0, char *param1, char *param2, char *param3);
extern void NodePath_C_set_hpr_scale_v_ppp(NodePath *param0, char *param1, char *param2);
extern void NodePath_C_set_hpr_scale_v_pppp(NodePath *param0, char *param1, char *param2, char *param3);
extern void NodePath_C_set_hpr_scale_v_ppffffff(NodePath *param0, char *param1, float param2, float param3, float param4, float param5, float param6, float param7);
extern void NodePath_C_set_hpr_scale_v_pffffff(NodePath *param0, float param1, float param2, float param3, float param4, float param5, float param6);
extern void NodePath_C_set_quat_scale_v_ppp(NodePath *param0, char *param1, char *param2);
extern void NodePath_C_set_quat_scale_v_pppp(NodePath *param0, char *param1, char *param2, char *param3);
extern void NodePath_C_set_pos_hpr_scale_v_pppp(NodePath *param0, char *param1, char *param2, char *param3);
extern void NodePath_C_set_pos_hpr_scale_v_ppppp(NodePath *param0, char *param1, char *param2, char *param3, char *param4);
extern void NodePath_C_set_pos_hpr_scale_v_ppfffffffff(NodePath *param0, char *param1, float param2, float param3, float param4, float param5, float param6, float param7, float param8, float param9, float param10);
extern void NodePath_C_set_pos_hpr_scale_v_pfffffffff(NodePath *param0, float param1, float param2, float param3, float param4, float param5, float param6, float param7, float param8, float param9);
extern void NodePath_C_set_pos_quat_scale_v_pppp(NodePath *param0, char *param1, char *param2, char *param3);
extern void NodePath_C_set_pos_quat_scale_v_ppppp(NodePath *param0, char *param1, char *param2, char *param3, char *param4);
extern void NodePath_C_set_pos_hpr_scale_shear_v_ppppp(NodePath *param0, char *param1, char *param2, char *param3, char *param4);
extern void NodePath_C_set_pos_hpr_scale_shear_v_pppppp(NodePath *param0, char *param1, char *param2, char *param3, char *param4, char *param5);
extern void NodePath_C_set_pos_quat_scale_shear_v_ppppp(NodePath *param0, char *param1, char *param2, char *param3, char *param4);
extern void NodePath_C_set_pos_quat_scale_shear_v_pppppp(NodePath *param0, char *param1, char *param2, char *param3, char *param4, char *param5);
extern void NodePath_C_set_mat_v_pp(NodePath *param0, char *param1);
extern void NodePath_C_set_mat_v_ppp(NodePath *param0, char *param1, char *param2);
extern void NodePath_C_clear_mat_v_p(NodePath *param0);
extern bool NodePath_C_has_mat_B_p(NodePath const *param0);
extern LMatrix4 const * NodePath_C_get_mat_p_p(NodePath const *param0);
extern LMatrix4 * NodePath_C_get_mat_p_pp(NodePath const *param0, char *param1);
extern void NodePath_C_look_at_v_ppp(NodePath *param0, char *param1, char *param2);
extern void NodePath_C_look_at_1_v_ppp(NodePath *param0, char *param1);
extern void NodePath_C_look_at_v_pppp(NodePath *param0, char *param1, char *param2, char *param3);
extern void NodePath_C_look_at_1_v_pppp(NodePath *param0, char *param1, char *param2);
extern void NodePath_C_look_at_2_v_pppp(NodePath *param0, char *param1);
extern void NodePath_C_look_at_v_ppfff(NodePath *param0, char *param1, float param2, float param3, float param4);
extern void NodePath_C_look_at_v_pfff(NodePath *param0, float param1, float param2, float param3);
extern void NodePath_C_heads_up_v_ppp(NodePath *param0, char *param1, char *param2);
extern void NodePath_C_heads_up_1_v_ppp(NodePath *param0, char *param1);
extern void NodePath_C_heads_up_v_pppp(NodePath *param0, char *param1, char *param2, char *param3);
extern void NodePath_C_heads_up_1_v_pppp(NodePath *param0, char *param1, char *param2);
extern void NodePath_C_heads_up_2_v_pppp(NodePath *param0, char *param1);
extern void NodePath_C_heads_up_v_ppfff(NodePath *param0, char *param1, float param2, float param3, float param4);
extern void NodePath_C_heads_up_v_pfff(NodePath *param0, float param1, float param2, float param3);
extern LPoint3 * NodePath_C_get_relative_point_p_ppp(NodePath const *param0, char *param1, char *param2);
extern LVector3 * NodePath_C_get_relative_vector_p_ppp(NodePath const *param0, char *param1, char *param2);
extern float NodePath_C_get_distance_f_pp(NodePath const *param0, char *param1);
extern void NodePath_C_set_color_v_ppi(NodePath *param0, char *param1, int param2);
extern void NodePath_C_set_color_1_v_ppi(NodePath *param0, char *param1);
extern void NodePath_C_set_color_v_pffffi(NodePath *param0, float param1, float param2, float param3, float param4, int param5);
extern void NodePath_C_set_color_1_v_pffffi(NodePath *param0, float param1, float param2, float param3, float param4);
extern void NodePath_C_set_color_2_v_pffffi(NodePath *param0, float param1, float param2, float param3);
extern void NodePath_C_set_color_off_v_pi(NodePath *param0, int param1);
extern void NodePath_C_set_color_off_1_v_pi(NodePath *param0);
extern void NodePath_C_clear_color_v_p(NodePath *param0);
extern bool NodePath_C_has_color_B_p(NodePath const *param0);
extern LColor * NodePath_C_get_color_p_p(NodePath const *param0);
extern bool NodePath_C_has_color_scale_B_p(NodePath const *param0);
extern void NodePath_C_clear_color_scale_v_p(NodePath *param0);
extern void NodePath_C_set_color_scale_v_ppi(NodePath *param0, char *param1, int param2);
extern void NodePath_C_set_color_scale_1_v_ppi(NodePath *param0, char *param1);
extern void NodePath_C_set_color_scale_v_pffffi(NodePath *param0, float param1, float param2, float param3, float param4, int param5);
extern void NodePath_C_set_color_scale_1_v_pffffi(NodePath *param0, float param1, float param2, float param3, float param4);
extern void NodePath_C_compose_color_scale_v_ppi(NodePath *param0, char *param1, int param2);
extern void NodePath_C_compose_color_scale_1_v_ppi(NodePath *param0, char *param1);
extern void NodePath_C_compose_color_scale_v_pffffi(NodePath *param0, float param1, float param2, float param3, float param4, int param5);
extern void NodePath_C_compose_color_scale_1_v_pffffi(NodePath *param0, float param1, float param2, float param3, float param4);
extern void NodePath_C_set_color_scale_off_v_pi(NodePath *param0, int param1);
extern void NodePath_C_set_color_scale_off_1_v_pi(NodePath *param0);
extern void NodePath_C_set_alpha_scale_v_pfi(NodePath *param0, float param1, int param2);
extern void NodePath_C_set_alpha_scale_1_v_pfi(NodePath *param0, float param1);
extern void NodePath_C_set_all_color_scale_v_pfi(NodePath *param0, float param1, int param2);
extern void NodePath_C_set_all_color_scale_1_v_pfi(NodePath *param0, float param1);
extern void NodePath_C_set_sr_v_pf(NodePath *param0, float param1);
extern void NodePath_C_set_sg_v_pf(NodePath *param0, float param1);
extern void NodePath_C_set_sb_v_pf(NodePath *param0, float param1);
extern void NodePath_C_set_sa_v_pf(NodePath *param0, float param1);
extern LVecBase4 const * NodePath_C_get_color_scale_p_p(NodePath const *param0);
extern float NodePath_C_get_sr_f_p(NodePath const *param0);
extern float NodePath_C_get_sg_f_p(NodePath const *param0);
extern float NodePath_C_get_sb_f_p(NodePath const *param0);
extern float NodePath_C_get_sa_f_p(NodePath const *param0);
extern void NodePath_C_set_light_v_ppi(NodePath *param0, char *param1, int param2);
extern void NodePath_C_set_light_1_v_ppi(NodePath *param0, char *param1);
extern void NodePath_C_set_light_off_v_ppi(NodePath *param0, char *param1, int param2);
extern void NodePath_C_set_light_off_1_v_ppi(NodePath *param0, char *param1);
extern void NodePath_C_set_light_off_v_pi(NodePath *param0, int param1);
extern void NodePath_C_set_light_off_1_v_pi(NodePath *param0);
extern void NodePath_C_clear_light_v_p(NodePath *param0);
extern void NodePath_C_clear_light_v_pp(NodePath *param0, char *param1);
extern bool NodePath_C_has_light_B_pp(NodePath const *param0, char *param1);
extern bool NodePath_C_has_light_off_B_p(NodePath const *param0);
extern bool NodePath_C_has_light_off_B_pp(NodePath const *param0, char *param1);
extern void NodePath_C_set_clip_plane_v_ppi(NodePath *param0, char *param1, int param2);
extern void NodePath_C_set_clip_plane_1_v_ppi(NodePath *param0, char *param1);
extern void NodePath_C_set_clip_plane_off_v_ppi(NodePath *param0, char *param1, int param2);
extern void NodePath_C_set_clip_plane_off_1_v_ppi(NodePath *param0, char *param1);
extern void NodePath_C_set_clip_plane_off_v_pi(NodePath *param0, int param1);
extern void NodePath_C_set_clip_plane_off_1_v_pi(NodePath *param0);
extern void NodePath_C_clear_clip_plane_v_p(NodePath *param0);
extern void NodePath_C_clear_clip_plane_v_pp(NodePath *param0, char *param1);
extern bool NodePath_C_has_clip_plane_B_pp(NodePath const *param0, char *param1);
extern bool NodePath_C_has_clip_plane_off_B_p(NodePath const *param0);
extern bool NodePath_C_has_clip_plane_off_B_pp(NodePath const *param0, char *param1);
extern void NodePath_C_set_scissor_v_ppp(NodePath *param0, char *param1, char *param2);
extern void NodePath_C_set_scissor_v_ppppp(NodePath *param0, char *param1, char *param2, char *param3, char *param4);
extern void NodePath_C_set_scissor_v_pppp(NodePath *param0, char *param1, char *param2, char *param3);
extern void NodePath_C_set_scissor_v_pppppp(NodePath *param0, char *param1, char *param2, char *param3, char *param4, char *param5);
extern void NodePath_C_set_scissor_v_pffff(NodePath *param0, float param1, float param2, float param3, float param4);
extern void NodePath_C_clear_scissor_v_p(NodePath *param0);
extern bool NodePath_C_has_scissor_B_p(NodePath const *param0);
extern void NodePath_C_set_occluder_v_pp(NodePath *param0, char *param1);
extern void NodePath_C_clear_occluder_v_p(NodePath *param0);
extern void NodePath_C_clear_occluder_v_pp(NodePath *param0, char *param1);
extern bool NodePath_C_has_occluder_B_pp(NodePath const *param0, char *param1);
extern void NodePath_C_set_bin_v_ppii(NodePath *param0, char *param1, int param2, int param3);
extern void NodePath_C_set_bin_1_v_ppii(NodePath *param0, char *param1, int param2);
extern void NodePath_C_clear_bin_v_p(NodePath *param0);
extern bool NodePath_C_has_bin_B_p(NodePath const *param0);
extern char const * NodePath_C_get_bin_name_s_p(NodePath const *param0);
extern int NodePath_C_get_bin_draw_order_i_p(NodePath const *param0);
extern void NodePath_C_set_texture_v_pppi(NodePath *param0, char *param1, char *param2, int param3);
extern void NodePath_C_set_texture_1_v_pppi(NodePath *param0, char *param1, char *param2);
extern void NodePath_C_set_texture_v_ppi(NodePath *param0, char *param1, int param2);
extern void NodePath_C_set_texture_1_v_ppi(NodePath *param0, char *param1);
extern void NodePath_C_set_texture_v_ppppi(NodePath *param0, char *param1, char *param2, char *param3, int param4);
extern void NodePath_C_set_texture_1_v_ppppi(NodePath *param0, char *param1, char *param2, char *param3);
extern void NodePath_C_set_texture_2_v_pppi(NodePath *param0, char *param1, char *param2, int param3);
extern void NodePath_C_set_texture_3_v_pppi(NodePath *param0, char *param1, char *param2);
extern void NodePath_C_set_texture_off_v_ppi(NodePath *param0, char *param1, int param2);
extern void NodePath_C_set_texture_off_1_v_ppi(NodePath *param0, char *param1);
extern void NodePath_C_set_texture_off_v_pi(NodePath *param0, int param1);
extern void NodePath_C_set_texture_off_1_v_pi(NodePath *param0);
extern void NodePath_C_clear_texture_v_p(NodePath *param0);
extern void NodePath_C_clear_texture_v_pp(NodePath *param0, char *param1);
extern bool NodePath_C_has_texture_B_p(NodePath const *param0);
extern bool NodePath_C_has_texture_B_pp(NodePath const *param0, char *param1);
extern bool NodePath_C_has_texture_off_B_p(NodePath const *param0);
extern bool NodePath_C_has_texture_off_B_pp(NodePath const *param0, char *param1);
extern Texture * NodePath_C_get_texture_p_p(NodePath const *param0);
extern Texture * NodePath_C_get_texture_p_pp(NodePath const *param0, char *param1);
extern void NodePath_C_replace_texture_v_ppp(NodePath *param0, char *param1, char *param2);
extern SamplerState const * NodePath_C_get_texture_sampler_p_p(NodePath const *param0);
extern SamplerState const * NodePath_C_get_texture_sampler_p_pp(NodePath const *param0, char *param1);
extern void NodePath_C_set_shader_v_ppi(NodePath *param0, char *param1, int param2);
extern void NodePath_C_set_shader_1_v_ppi(NodePath *param0, char *param1);
extern void NodePath_C_set_shader_off_v_pi(NodePath *param0, int param1);
extern void NodePath_C_set_shader_off_1_v_pi(NodePath *param0);
extern void NodePath_C_set_shader_auto_v_ppi(NodePath *param0, char *param1, int param2);
extern void NodePath_C_set_shader_auto_1_v_ppi(NodePath *param0, char *param1);
extern void NodePath_C_set_shader_auto_v_pi(NodePath *param0, int param1);
extern void NodePath_C_set_shader_auto_1_v_pi(NodePath *param0);
extern void NodePath_C_clear_shader_v_p(NodePath *param0);
extern void NodePath_C_set_shader_input_v_pppi(NodePath *param0, char *param1, char *param2, int param3);
extern void NodePath_C_set_shader_input_1_v_pppi(NodePath *param0, char *param1, char *param2);
extern void NodePath_C_set_shader_input_2_v_pppi(NodePath *param0, char *param1, char *param2, int param3);
extern void NodePath_C_set_shader_input_3_v_pppi(NodePath *param0, char *param1, char *param2);
extern void NodePath_C_set_shader_input_4_v_pppi(NodePath *param0, char *param1, char *param2, int param3);
extern void NodePath_C_set_shader_input_5_v_pppi(NodePath *param0, char *param1, char *param2);
extern void NodePath_C_set_shader_input_6_v_pppi(NodePath *param0, char *param1, char *param2, int param3);
extern void NodePath_C_set_shader_input_7_v_pppi(NodePath *param0, char *param1, char *param2);
extern void NodePath_C_set_shader_input_8_v_pppi(NodePath *param0, char *param1, char *param2, int param3);
extern void NodePath_C_set_shader_input_9_v_pppi(NodePath *param0, char *param1, char *param2);
extern void NodePath_C_set_shader_input_10_v_pppi(NodePath *param0, char *param1, char *param2, int param3);
extern void NodePath_C_set_shader_input_11_v_pppi(NodePath *param0, char *param1, char *param2);
extern void NodePath_C_set_shader_input_12_v_pppi(NodePath *param0, char *param1, char *param2, int param3);
extern void NodePath_C_set_shader_input_13_v_pppi(NodePath *param0, char *param1, char *param2);
extern void NodePath_C_set_shader_input_14_v_pppi(NodePath *param0, char *param1, char *param2, int param3);
extern void NodePath_C_set_shader_input_15_v_pppi(NodePath *param0, char *param1, char *param2);
extern void NodePath_C_set_shader_input_16_v_pppi(NodePath *param0, char *param1, char *param2, int param3);
extern void NodePath_C_set_shader_input_17_v_pppi(NodePath *param0, char *param1, char *param2);
extern void NodePath_C_set_shader_input_v_ppffffi(NodePath *param0, char *param1, float param2, float param3, float param4, float param5, int param6);
extern void NodePath_C_set_shader_input_1_v_ppffffi(NodePath *param0, char *param1, float param2, float param3, float param4, float param5);
extern void NodePath_C_set_shader_input_2_v_ppffffi(NodePath *param0, char *param1, float param2, float param3, float param4);
extern void NodePath_C_set_shader_input_3_v_ppffffi(NodePath *param0, char *param1, float param2, float param3);
extern void NodePath_C_set_shader_input_18_v_pppi(NodePath *param0, char *param1, char *param2, int param3);
extern void NodePath_C_set_shader_input_19_v_pppi(NodePath *param0, char *param1, char *param2);
extern void NodePath_C_set_shader_input_20_v_pppi(NodePath *param0, char *param1, char *param2, int param3);
extern void NodePath_C_set_shader_input_21_v_pppi(NodePath *param0, char *param1, char *param2);
extern void NodePath_C_set_shader_input_22_v_pppi(NodePath *param0, char *param1, char *param2, int param3);
extern void NodePath_C_set_shader_input_23_v_pppi(NodePath *param0, char *param1, char *param2);
extern void NodePath_C_set_shader_input_24_v_pppi(NodePath *param0, char *param1, char *param2, int param3);
extern void NodePath_C_set_shader_input_25_v_pppi(NodePath *param0, char *param1, char *param2);
extern void NodePath_C_set_shader_input_26_v_pppi(NodePath *param0, char *param1, char *param2, int param3);
extern void NodePath_C_set_shader_input_27_v_pppi(NodePath *param0, char *param1, char *param2);
extern void NodePath_C_set_shader_input_28_v_pppi(NodePath *param0, char *param1, char *param2, int param3);
extern void NodePath_C_set_shader_input_29_v_pppi(NodePath *param0, char *param1, char *param2);
extern void NodePath_C_set_shader_input_30_v_pppi(NodePath *param0, char *param1, char *param2, int param3);
extern void NodePath_C_set_shader_input_31_v_pppi(NodePath *param0, char *param1, char *param2);
extern void NodePath_C_set_shader_input_32_v_pppi(NodePath *param0, char *param1, char *param2, int param3);
extern void NodePath_C_set_shader_input_33_v_pppi(NodePath *param0, char *param1, char *param2);
extern void NodePath_C_set_shader_input_34_v_pppi(NodePath *param0, char *param1, char *param2, int param3);
extern void NodePath_C_set_shader_input_35_v_pppi(NodePath *param0, char *param1, char *param2);
extern void NodePath_C_set_shader_input_36_v_pppi(NodePath *param0, char *param1, char *param2, int param3);
extern void NodePath_C_set_shader_input_37_v_pppi(NodePath *param0, char *param1, char *param2);
extern void NodePath_C_set_shader_input_38_v_pppi(NodePath *param0, char *param1, char *param2, int param3);
extern void NodePath_C_set_shader_input_39_v_pppi(NodePath *param0, char *param1, char *param2);
extern void NodePath_C_set_shader_input_40_v_pppi(NodePath *param0, char *param1, char *param2, int param3);
extern void NodePath_C_set_shader_input_41_v_pppi(NodePath *param0, char *param1, char *param2);
extern void NodePath_C_set_shader_input_v_ppppi(NodePath *param0, char *param1, char *param2, char *param3, int param4);
extern void NodePath_C_set_shader_input_1_v_ppppi(NodePath *param0, char *param1, char *param2, char *param3);
extern void NodePath_C_set_shader_input_v_pppBBiii(NodePath *param0, char *param1, char *param2, bool param3, bool param4, int param5, int param6, int param7);
extern void NodePath_C_set_shader_input_1_v_pppBBiii(NodePath *param0, char *param1, char *param2, bool param3, bool param4, int param5, int param6);
extern void NodePath_C_set_shader_input_2_v_pppBBiii(NodePath *param0, char *param1, char *param2, bool param3, bool param4, int param5);
extern void NodePath_C_set_shader_input_3_v_pppBBiii(NodePath *param0, char *param1, char *param2, bool param3, bool param4);
extern void NodePath_C_set_shader_input_42_v_pppi(NodePath *param0, char *param1, char *param2, int param3);
extern void NodePath_C_set_shader_input_43_v_pppi(NodePath *param0, char *param1, char *param2);
extern void NodePath_C_set_shader_input_v_ppiiiii(NodePath *param0, char *param1, int param2, int param3, int param4, int param5, int param6);
extern void NodePath_C_set_shader_input_1_v_ppiiiii(NodePath *param0, char *param1, int param2, int param3, int param4, int param5);
extern void NodePath_C_set_shader_input_2_v_ppiiiii(NodePath *param0, char *param1, int param2, int param3, int param4);
extern void NodePath_C_set_shader_input_3_v_ppiiiii(NodePath *param0, char *param1, int param2, int param3);
extern void NodePath_C_set_shader_input_v_pp(NodePath *param0, char *param1);
extern void NodePath_C_set_shader_input_1_v_pp(NodePath *param0, char *param1);
extern void NodePath_C_clear_shader_input_v_pp(NodePath *param0, char *param1);
extern void NodePath_C_set_instance_count_v_pi(NodePath *param0, int param1);
extern Shader const * NodePath_C_get_shader_p_p(NodePath const *param0);
extern ShaderInput * NodePath_C_get_shader_input_p_pp(NodePath const *param0, char *param1);
extern int NodePath_C_get_instance_count_i_p(NodePath const *param0);
extern void NodePath_C_set_tex_transform_v_pppp(NodePath *param0, char *param1, char *param2, char *param3);
extern void NodePath_C_set_tex_transform_v_ppp(NodePath *param0, char *param1, char *param2);
extern void NodePath_C_clear_tex_transform_v_p(NodePath *param0);
extern void NodePath_C_clear_tex_transform_v_pp(NodePath *param0, char *param1);
extern bool NodePath_C_has_tex_transform_B_pp(NodePath const *param0, char *param1);
extern char * NodePath_C_get_tex_transform_p_ppp(NodePath const *param0, char *param1, char *param2);
extern char * NodePath_C_get_tex_transform_p_pp(NodePath const *param0, char *param1);
extern void NodePath_C_set_tex_offset_v_pppp(NodePath *param0, char *param1, char *param2, char *param3);
extern void NodePath_C_set_tex_offset_v_pppff(NodePath *param0, char *param1, char *param2, float param3, float param4);
extern void NodePath_C_set_tex_offset_v_ppp(NodePath *param0, char *param1, char *param2);
extern void NodePath_C_set_tex_offset_v_ppff(NodePath *param0, char *param1, float param2, float param3);
extern void NodePath_C_set_tex_rotate_v_pppf(NodePath *param0, char *param1, char *param2, float param3);
extern void NodePath_C_set_tex_rotate_v_ppf(NodePath *param0, char *param1, float param2);
extern void NodePath_C_set_tex_scale_v_pppp(NodePath *param0, char *param1, char *param2, char *param3);
extern void NodePath_C_set_tex_scale_1_v_pppp(NodePath *param0, char *param1, char *param2, char *param3);
extern void NodePath_C_set_tex_scale_v_pppf(NodePath *param0, char *param1, char *param2, float param3);
extern void NodePath_C_set_tex_scale_v_pppff(NodePath *param0, char *param1, char *param2, float param3, float param4);
extern void NodePath_C_set_tex_scale_v_pppfff(NodePath *param0, char *param1, char *param2, float param3, float param4, float param5);
extern void NodePath_C_set_tex_scale_v_ppp(NodePath *param0, char *param1, char *param2);
extern void NodePath_C_set_tex_scale_1_v_ppp(NodePath *param0, char *param1, char *param2);
extern void NodePath_C_set_tex_scale_v_ppf(NodePath *param0, char *param1, float param2);
extern void NodePath_C_set_tex_scale_v_ppff(NodePath *param0, char *param1, float param2, float param3);
extern void NodePath_C_set_tex_scale_v_ppfff(NodePath *param0, char *param1, float param2, float param3, float param4);
extern LVecBase2 * NodePath_C_get_tex_offset_p_ppp(NodePath const *param0, char *param1, char *param2);
extern LVecBase2 * NodePath_C_get_tex_offset_p_pp(NodePath const *param0, char *param1);
extern float NodePath_C_get_tex_rotate_f_ppp(NodePath const *param0, char *param1, char *param2);
extern float NodePath_C_get_tex_rotate_f_pp(NodePath const *param0, char *param1);
extern LVecBase2 * NodePath_C_get_tex_scale_p_ppp(NodePath const *param0, char *param1, char *param2);
extern LVecBase2 * NodePath_C_get_tex_scale_p_pp(NodePath const *param0, char *param1);
extern void NodePath_C_set_tex_pos_v_pppp(NodePath *param0, char *param1, char *param2, char *param3);
extern void NodePath_C_set_tex_pos_v_pppfff(NodePath *param0, char *param1, char *param2, float param3, float param4, float param5);
extern void NodePath_C_set_tex_pos_v_ppp(NodePath *param0, char *param1, char *param2);
extern void NodePath_C_set_tex_pos_v_ppfff(NodePath *param0, char *param1, float param2, float param3, float param4);
extern void NodePath_C_set_tex_hpr_v_pppp(NodePath *param0, char *param1, char *param2, char *param3);
extern void NodePath_C_set_tex_hpr_v_pppfff(NodePath *param0, char *param1, char *param2, float param3, float param4, float param5);
extern void NodePath_C_set_tex_hpr_v_ppp(NodePath *param0, char *param1, char *param2);
extern void NodePath_C_set_tex_hpr_v_ppfff(NodePath *param0, char *param1, float param2, float param3, float param4);
extern LVecBase3 * NodePath_C_get_tex_pos_p_ppp(NodePath const *param0, char *param1, char *param2);
extern LVecBase3 * NodePath_C_get_tex_pos_p_pp(NodePath const *param0, char *param1);
extern LVecBase3 * NodePath_C_get_tex_hpr_p_ppp(NodePath const *param0, char *param1, char *param2);
extern LVecBase3 * NodePath_C_get_tex_hpr_p_pp(NodePath const *param0, char *param1);
extern LVecBase3 * NodePath_C_get_tex_scale_3d_p_ppp(NodePath const *param0, char *param1, char *param2);
extern LVecBase3 * NodePath_C_get_tex_scale_3d_p_pp(NodePath const *param0, char *param1);
extern void NodePath_C_set_tex_gen_v_ppppi(NodePath *param0, char *param1, char *param2, char *param3, int param4);
extern void NodePath_C_set_tex_gen_1_v_ppppi(NodePath *param0, char *param1, char *param2, char *param3);
extern void NodePath_C_set_tex_gen_v_pppi(NodePath *param0, char *param1, char *param2, int param3);
extern void NodePath_C_set_tex_gen_1_v_pppi(NodePath *param0, char *param1, char *param2);
extern void NodePath_C_clear_tex_gen_v_p(NodePath *param0);
extern void NodePath_C_clear_tex_gen_v_pp(NodePath *param0, char *param1);
extern bool NodePath_C_has_tex_gen_B_pp(NodePath const *param0, char *param1);
extern RenderAttrib__TexGenMode NodePath_C_get_tex_gen_p_pp(NodePath const *param0, char *param1);
extern void NodePath_C_set_tex_projector_v_ppppi(NodePath *param0, char *param1, char *param2, char *param3, int param4);
extern void NodePath_C_set_tex_projector_1_v_ppppi(NodePath *param0, char *param1, char *param2, char *param3);
extern void NodePath_C_clear_tex_projector_v_p(NodePath *param0);
extern void NodePath_C_clear_tex_projector_v_pp(NodePath *param0, char *param1);
extern bool NodePath_C_has_tex_projector_B_pp(NodePath const *param0, char *param1);
extern NodePath * NodePath_C_get_tex_projector_from_p_pp(NodePath const *param0, char *param1);
extern NodePath * NodePath_C_get_tex_projector_to_p_pp(NodePath const *param0, char *param1);
extern void NodePath_C_project_texture_v_pppp(NodePath *param0, char *param1, char *param2, char *param3);
extern void NodePath_C_clear_project_texture_v_pp(NodePath *param0, char *param1);
extern bool NodePath_C_has_texcoord_B_pp(NodePath const *param0, char *param1);
extern bool NodePath_C_has_vertex_column_B_pp(NodePath const *param0, char *param1);
extern InternalNameCollection * NodePath_C_find_all_vertex_columns_p_p(NodePath const *param0);
extern InternalNameCollection * NodePath_C_find_all_vertex_columns_p_pp(NodePath const *param0, char *param1);
extern InternalNameCollection * NodePath_C_find_all_texcoords_p_p(NodePath const *param0);
extern InternalNameCollection * NodePath_C_find_all_texcoords_p_pp(NodePath const *param0, char *param1);
extern Texture * NodePath_C_find_texture_p_pp(NodePath const *param0, char *param1);
extern Texture * NodePath_C_find_texture_1_p_pp(NodePath const *param0, char *param1);
extern TextureCollection * NodePath_C_find_all_textures_p_p(NodePath const *param0);
extern TextureCollection * NodePath_C_find_all_textures_p_pp(NodePath const *param0, char *param1);
extern TextureCollection * NodePath_C_find_all_textures_1_p_pp(NodePath const *param0, char *param1);
extern TextureStage * NodePath_C_find_texture_stage_p_pp(NodePath const *param0, char *param1);
extern TextureStageCollection * NodePath_C_find_all_texture_stages_p_p(NodePath const *param0);
extern TextureStageCollection * NodePath_C_find_all_texture_stages_p_pp(NodePath const *param0, char *param1);
extern void NodePath_C_unify_texture_stages_v_pp(NodePath *param0, char *param1);
extern Material * NodePath_C_find_material_p_pp(NodePath const *param0, char *param1);
extern MaterialCollection * NodePath_C_find_all_materials_p_p(NodePath const *param0);
extern MaterialCollection * NodePath_C_find_all_materials_p_pp(NodePath const *param0, char *param1);
extern void NodePath_C_set_material_v_ppi(NodePath *param0, char *param1, int param2);
extern void NodePath_C_set_material_1_v_ppi(NodePath *param0, char *param1);
extern void NodePath_C_set_material_off_v_pi(NodePath *param0, int param1);
extern void NodePath_C_set_material_off_1_v_pi(NodePath *param0);
extern void NodePath_C_clear_material_v_p(NodePath *param0);
extern bool NodePath_C_has_material_B_p(NodePath const *param0);
extern char * NodePath_C_get_material_p_p(NodePath const *param0);
extern void NodePath_C_replace_material_v_ppp(NodePath *param0, char *param1, char *param2);
extern void NodePath_C_set_fog_v_ppi(NodePath *param0, char *param1, int param2);
extern void NodePath_C_set_fog_1_v_ppi(NodePath *param0, char *param1);
extern void NodePath_C_set_fog_off_v_pi(NodePath *param0, int param1);
extern void NodePath_C_set_fog_off_1_v_pi(NodePath *param0);
extern void NodePath_C_clear_fog_v_p(NodePath *param0);
extern bool NodePath_C_has_fog_B_p(NodePath const *param0);
extern bool NodePath_C_has_fog_off_B_p(NodePath const *param0);
extern Fog * NodePath_C_get_fog_p_p(NodePath const *param0);
extern void NodePath_C_set_render_mode_wireframe_v_pi(NodePath *param0, int param1);
extern void NodePath_C_set_render_mode_wireframe_1_v_pi(NodePath *param0);
extern void NodePath_C_set_render_mode_filled_v_pi(NodePath *param0, int param1);
extern void NodePath_C_set_render_mode_filled_1_v_pi(NodePath *param0);
extern void NodePath_C_set_render_mode_filled_wireframe_v_ppi(NodePath *param0, char *param1, int param2);
extern void NodePath_C_set_render_mode_filled_wireframe_1_v_ppi(NodePath *param0, char *param1);
extern void NodePath_C_set_render_mode_thickness_v_pfi(NodePath *param0, float param1, int param2);
extern void NodePath_C_set_render_mode_thickness_1_v_pfi(NodePath *param0, float param1);
extern void NodePath_C_set_render_mode_perspective_v_pBi(NodePath *param0, bool param1, int param2);
extern void NodePath_C_set_render_mode_perspective_1_v_pBi(NodePath *param0, bool param1);
extern void NodePath_C_set_render_mode_v_ppfi(NodePath *param0, char *param1, float param2, int param3);
extern void NodePath_C_set_render_mode_1_v_ppfi(NodePath *param0, char *param1, float param2);
extern void NodePath_C_clear_render_mode_v_p(NodePath *param0);
extern bool NodePath_C_has_render_mode_B_p(NodePath const *param0);
extern RenderModeAttrib__Mode NodePath_C_get_render_mode_p_p(NodePath const *param0);
extern float NodePath_C_get_render_mode_thickness_f_p(NodePath const *param0);
extern bool NodePath_C_get_render_mode_perspective_B_p(NodePath const *param0);
extern void NodePath_C_set_two_sided_v_pBi(NodePath *param0, bool param1, int param2);
extern void NodePath_C_set_two_sided_1_v_pBi(NodePath *param0, bool param1);
extern void NodePath_C_clear_two_sided_v_p(NodePath *param0);
extern bool NodePath_C_has_two_sided_B_p(NodePath const *param0);
extern bool NodePath_C_get_two_sided_B_p(NodePath const *param0);
extern void NodePath_C_set_depth_test_v_pBi(NodePath *param0, bool param1, int param2);
extern void NodePath_C_set_depth_test_1_v_pBi(NodePath *param0, bool param1);
extern void NodePath_C_clear_depth_test_v_p(NodePath *param0);
extern bool NodePath_C_has_depth_test_B_p(NodePath const *param0);
extern bool NodePath_C_get_depth_test_B_p(NodePath const *param0);
extern void NodePath_C_set_depth_write_v_pBi(NodePath *param0, bool param1, int param2);
extern void NodePath_C_set_depth_write_1_v_pBi(NodePath *param0, bool param1);
extern void NodePath_C_clear_depth_write_v_p(NodePath *param0);
extern bool NodePath_C_has_depth_write_B_p(NodePath const *param0);
extern bool NodePath_C_get_depth_write_B_p(NodePath const *param0);
extern void NodePath_C_set_depth_offset_v_pii(NodePath *param0, int param1, int param2);
extern void NodePath_C_set_depth_offset_1_v_pii(NodePath *param0, int param1);
extern void NodePath_C_clear_depth_offset_v_p(NodePath *param0);
extern bool NodePath_C_has_depth_offset_B_p(NodePath const *param0);
extern int NodePath_C_get_depth_offset_i_p(NodePath const *param0);
extern void NodePath_C_do_billboard_axis_v_ppf(NodePath *param0, char *param1, float param2);
extern void NodePath_C_do_billboard_point_eye_v_ppf(NodePath *param0, char *param1, float param2);
extern void NodePath_C_do_billboard_point_world_v_ppf(NodePath *param0, char *param1, float param2);
extern void NodePath_C_set_billboard_axis_v_ppf(NodePath *param0, char *param1, float param2);
extern void NodePath_C_set_billboard_axis_v_pf(NodePath *param0, float param1);
extern void NodePath_C_set_billboard_axis_1_v_pf(NodePath *param0);
extern void NodePath_C_set_billboard_point_eye_v_ppfB(NodePath *param0, char *param1, float param2, bool param3);
extern void NodePath_C_set_billboard_point_eye_1_v_ppfB(NodePath *param0, char *param1, float param2);
extern void NodePath_C_set_billboard_point_eye_v_pfB(NodePath *param0, float param1, bool param2);
extern void NodePath_C_set_billboard_point_eye_1_v_pfB(NodePath *param0, float param1);
extern void NodePath_C_set_billboard_point_eye_2_v_pfB(NodePath *param0);
extern void NodePath_C_set_billboard_point_world_v_ppf(NodePath *param0, char *param1, float param2);
extern void NodePath_C_set_billboard_point_world_v_pf(NodePath *param0, float param1);
extern void NodePath_C_set_billboard_point_world_1_v_pf(NodePath *param0);
extern void NodePath_C_clear_billboard_v_p(NodePath *param0);
extern bool NodePath_C_has_billboard_B_p(NodePath const *param0);
extern void NodePath_C_set_compass_v_pp(NodePath *param0, char *param1);
extern void NodePath_C_set_compass_1_v_pp(NodePath *param0);
extern void NodePath_C_clear_compass_v_p(NodePath *param0);
extern bool NodePath_C_has_compass_B_p(NodePath const *param0);
extern void NodePath_C_set_transparency_v_ppi(NodePath *param0, char *param1, int param2);
extern void NodePath_C_set_transparency_1_v_ppi(NodePath *param0, char *param1);
extern void NodePath_C_clear_transparency_v_p(NodePath *param0);
extern bool NodePath_C_has_transparency_B_p(NodePath const *param0);
extern TransparencyAttrib__Mode NodePath_C_get_transparency_p_p(NodePath const *param0);
extern void NodePath_C_set_logic_op_v_ppi(NodePath *param0, char *param1, int param2);
extern void NodePath_C_set_logic_op_1_v_ppi(NodePath *param0, char *param1);
extern void NodePath_C_clear_logic_op_v_p(NodePath *param0);
extern bool NodePath_C_has_logic_op_B_p(NodePath const *param0);
extern LogicOpAttrib__Operation NodePath_C_get_logic_op_p_p(NodePath const *param0);
extern void NodePath_C_set_antialias_v_ppi(NodePath *param0, unsigned short int param1, int param2);
extern void NodePath_C_set_antialias_1_v_ppi(NodePath *param0, unsigned short int param1);
extern void NodePath_C_clear_antialias_v_p(NodePath *param0);
extern bool NodePath_C_has_antialias_B_p(NodePath const *param0);
extern unsigned short int NodePath_C_get_antialias_p_p(NodePath const *param0);
extern bool NodePath_C_has_audio_volume_B_p(NodePath const *param0);
extern void NodePath_C_clear_audio_volume_v_p(NodePath *param0);
extern void NodePath_C_set_audio_volume_v_pfi(NodePath *param0, float param1, int param2);
extern void NodePath_C_set_audio_volume_1_v_pfi(NodePath *param0, float param1);
extern void NodePath_C_set_audio_volume_off_v_pi(NodePath *param0, int param1);
extern void NodePath_C_set_audio_volume_off_1_v_pi(NodePath *param0);
extern float NodePath_C_get_audio_volume_f_p(NodePath const *param0);
extern float NodePath_C_get_net_audio_volume_f_p(NodePath const *param0);
extern void NodePath_C_adjust_all_priorities_v_pi(NodePath *param0, int param1);
extern void NodePath_C_show_v_p(NodePath *param0);
extern void NodePath_C_show_v_pp(NodePath *param0, char *param1);
extern void NodePath_C_show_through_v_p(NodePath *param0);
extern void NodePath_C_show_through_v_pp(NodePath *param0, char *param1);
extern void NodePath_C_hide_v_p(NodePath *param0);
extern void NodePath_C_hide_v_pp(NodePath *param0, char *param1);
extern bool NodePath_C_is_hidden_B_pp(NodePath const *param0, char *param1);
extern bool NodePath_C_is_hidden_1_B_pp(NodePath const *param0);
extern NodePath * NodePath_C_get_hidden_ancestor_p_ppp(NodePath const *param0, char *param1, char *param2);
extern NodePath * NodePath_C_get_hidden_ancestor_1_p_ppp(NodePath const *param0, char *param1);
extern NodePath * NodePath_C_get_hidden_ancestor_2_p_ppp(NodePath const *param0);
extern void NodePath_C_stash_v_pip(NodePath *param0, int param1, char *param2);
extern void NodePath_C_stash_1_v_pip(NodePath *param0, int param1);
extern void NodePath_C_stash_2_v_pip(NodePath *param0);
extern void NodePath_C_unstash_v_pip(NodePath *param0, int param1, char *param2);
extern void NodePath_C_unstash_1_v_pip(NodePath *param0, int param1);
extern void NodePath_C_unstash_2_v_pip(NodePath *param0);
extern void NodePath_C_unstash_all_v_pp(NodePath *param0, char *param1);
extern void NodePath_C_unstash_all_1_v_pp(NodePath *param0);
extern bool NodePath_C_is_stashed_B_p(NodePath const *param0);
extern NodePath * NodePath_C_get_stashed_ancestor_p_pp(NodePath const *param0, char *param1);
extern NodePath * NodePath_C_get_stashed_ancestor_1_p_pp(NodePath const *param0);
extern CollideMask * NodePath_C_get_collide_mask_p_p(NodePath const *param0);
extern void NodePath_C_set_collide_mask_v_pppp(NodePath *param0, char *param1, char *param2, int param3);
extern void NodePath_C_set_collide_mask_1_v_pppp(NodePath *param0, char *param1, char *param2);
extern void NodePath_C_set_collide_mask_2_v_pppp(NodePath *param0, char *param1);
extern bool _inCAAAAzIl9(char *param0, char *param1);
extern bool _inCAAAAKnOz(char *param0, char *param1);
extern bool _inCAAAAROU9(char *param0, char *param1);
extern bool _inCAAAAod8y(char *param0, char *param1);
extern bool _inCAAAAM90s(char *param0, char *param1);
extern bool _inCAAAAh9eK(char *param0, char *param1);
extern int NodePath_C_compare_to_i_pp(NodePath const *param0, char *param1);
extern int NodePath_C_compare_to_1_i_pp(NodePath const *param0, char *param1);
extern bool NodePath_C_verify_complete_B_pp(NodePath const *param0, char *param1);
extern bool NodePath_C_verify_complete_1_B_pp(NodePath const *param0);
extern void NodePath_C_premunge_scene_v_pp(NodePath *param0, char *param1);
extern void NodePath_C_premunge_scene_1_v_pp(NodePath *param0);
extern void NodePath_C_prepare_scene_v_pp(NodePath *param0, char *param1);
extern void NodePath_C_show_bounds_v_p(NodePath *param0);
extern void NodePath_C_show_tight_bounds_v_p(NodePath *param0);
extern void NodePath_C_hide_bounds_v_p(NodePath *param0);
extern char * NodePath_C_get_bounds_p_pp(NodePath const *param0, char *param1);
extern char * NodePath_C_get_bounds_1_p_pp(NodePath const *param0);
extern void NodePath_C_force_recompute_bounds_v_p(NodePath *param0);
extern void NodePath_C_write_bounds_v_pp(NodePath const *param0, char *param1);
extern bool NodePath_C_calc_tight_bounds_B_ppppp(NodePath const *param0, char *param1, char *param2, char *param3, char *param4);
extern bool NodePath_C_calc_tight_bounds_1_B_ppppp(NodePath const *param0, char *param1, char *param2, char *param3);
extern bool NodePath_C_calc_tight_bounds_2_B_ppppp(NodePath const *param0, char *param1, char *param2);
extern int NodePath_C_flatten_light_i_p(NodePath *param0);
extern int NodePath_C_flatten_medium_i_p(NodePath *param0);
extern int NodePath_C_flatten_strong_i_p(NodePath *param0);
extern void NodePath_C_apply_texture_colors_v_p(NodePath *param0);
extern int NodePath_C_clear_model_nodes_i_p(NodePath *param0);
extern void NodePath_C_set_tag_v_ppp(NodePath *param0, char *param1, char *param2);
extern char const * NodePath_C_get_tag_s_pp(NodePath const *param0, char *param1);
extern void NodePath_C_get_tag_keys_v_pp(NodePath const *param0, char *param1);
extern bool NodePath_C_has_tag_B_pp(NodePath const *param0, char *param1);
extern void NodePath_C_clear_tag_v_pp(NodePath *param0, char *param1);
extern char const * NodePath_C_get_net_tag_s_pp(NodePath const *param0, char *param1);
extern bool NodePath_C_has_net_tag_B_pp(NodePath const *param0, char *param1);
extern NodePath * NodePath_C_find_net_tag_p_pp(NodePath const *param0, char *param1);
extern void NodePath_C_list_tags_v_p(NodePath const *param0);
extern void NodePath_C_set_name_v_pp(NodePath *param0, char *param1);
extern char const * NodePath_C_get_name_s_p(NodePath const *param0);
extern bool NodePath_C_write_bam_file_B_pp(NodePath const *param0, char *param1);
extern bool NodePath_C_write_bam_stream_B_pp(NodePath const *param0, char *param1);
extern unsigned char NodePath_C_encode_to_bam_stream_p_p(NodePath const *param0);
extern bool NodePath_C_encode_to_bam_stream_B_ppp(NodePath const *param0, char *param1, char *param2);
extern bool NodePath_C_encode_to_bam_stream_1_B_ppp(NodePath const *param0, char *param1);
extern NodePath * NodePath_C_decode_from_bam_stream_p_ppp(char *param0, char *param1);
extern NodePath * NodePath_C_decode_from_bam_stream_1_p_ppp(char *param0);
extern void NodePath_C_write_datagram_v_ppp(NodePath const *param0, char *param1, char *param2);
extern void NodePath_C_fillin_v_ppp(NodePath *param0, char *param1, char *param2);
extern int NodePath_C_get_class_type_i_v();
extern void NodePath_C_init_type_v_v();
extern unsigned int Camera_C_get_num_display_regions_p_p(Camera const *param0);
extern DisplayRegion * Camera_C_get_display_region_p_pp(Camera const *param0, char *param1);
extern void Camera_C_set_camera_mask_v_pp(Camera *param0, char *param1);
extern DrawMask * Camera_C_get_camera_mask_p_p(Camera const *param0);
extern void Camera_C_set_cull_center_v_pp(Camera *param0, char *param1);
extern NodePath const * Camera_C_get_cull_center_p_p(Camera const *param0);
extern void Camera_C_set_cull_bounds_v_pp(Camera *param0, char *param1);
extern BoundingVolume * Camera_C_get_cull_bounds_p_p(Camera const *param0);
extern void Camera_C_set_lod_center_v_pp(Camera *param0, char *param1);
extern NodePath const * Camera_C_get_lod_center_p_p(Camera const *param0);
extern void Camera_C_set_initial_state_v_pp(Camera *param0, char *param1);
extern char * Camera_C_get_initial_state_p_p(Camera const *param0);
extern void Camera_C_set_tag_state_key_v_pp(Camera *param0, char *param1);
extern char const * Camera_C_get_tag_state_key_s_p(Camera const *param0);
extern void Camera_C_set_lod_scale_v_pf(Camera *param0, float param1);
extern float Camera_C_get_lod_scale_f_p(Camera const *param0);
extern void Camera_C_set_tag_state_v_ppp(Camera *param0, char *param1, char *param2);
extern void Camera_C_clear_tag_state_v_pp(Camera *param0, char *param1);
extern void Camera_C_clear_tag_states_v_p(Camera *param0);
extern bool Camera_C_has_tag_state_B_pp(Camera const *param0, char *param1);
extern char * Camera_C_get_tag_state_p_pp(Camera const *param0, char *param1);
extern void Camera_C_set_aux_scene_data_v_ppp(Camera *param0, char *param1, char *param2);
extern bool Camera_C_clear_aux_scene_data_B_pp(Camera *param0, char *param1);
extern AuxSceneData * Camera_C_get_aux_scene_data_p_pp(Camera const *param0, char *param1);
extern void Camera_C_list_aux_scene_data_v_pp(Camera const *param0, char *param1);
extern int Camera_C_cleanup_aux_scene_data_i_pp(Camera *param0, char *param1);
extern int Camera_C_cleanup_aux_scene_data_1_i_pp(Camera *param0);
extern void Camera_C_register_with_read_factory_v_v();
extern void Camera_C_write_datagram_v_ppp(Camera *param0, char *param1, char *param2);
extern int Camera_C_get_class_type_i_v();
extern void Camera_C_init_type_v_v();
extern int Camera_C_get_type_i_p(Camera const *param0);
extern int Camera_C_force_init_type_i_p(Camera *param0);
extern bool _inCAAAAGBR_(char *param0, char *param1);
extern ConfigPage * ConfigPage_C_get_default_page_p_v();
extern ConfigPage * ConfigPage_C_get_local_page_p_v();
extern char const * ConfigPage_C_get_name_s_p(ConfigPage const *param0);
extern bool ConfigPage_C_is_special_B_p(ConfigPage const *param0);
extern bool ConfigPage_C_is_implicit_B_p(ConfigPage const *param0);
extern void ConfigPage_C_set_sort_v_pi(ConfigPage *param0, int param1);
extern int ConfigPage_C_get_sort_i_p(ConfigPage const *param0);
extern int ConfigPage_C_get_page_seq_i_p(ConfigPage const *param0);
extern int ConfigPage_C_get_trust_level_i_p(ConfigPage const *param0);
extern void ConfigPage_C_set_trust_level_v_pi(ConfigPage *param0, int param1);
extern char const * ConfigPage_C_get_signature_s_p(ConfigPage const *param0);
extern void ConfigPage_C_clear_v_p(ConfigPage *param0);
extern bool ConfigPage_C_read_prc_B_pp(ConfigPage *param0, char *param1);
extern bool ConfigPage_C_read_encrypted_prc_B_ppp(ConfigPage *param0, char *param1, char *param2);
extern ConfigDeclaration * ConfigPage_C_make_declaration_p_ppp(ConfigPage *param0, char *param1, char *param2);
extern ConfigDeclaration * ConfigPage_C_make_declaration_1_p_ppp(ConfigPage *param0, char *param1, char *param2);
extern bool ConfigPage_C_delete_declaration_B_pp(ConfigPage *param0, char *param1);
extern unsigned int ConfigPage_C_get_num_declarations_p_p(ConfigPage const *param0);
extern ConfigDeclaration const * ConfigPage_C_get_declaration_p_pp(ConfigPage const *param0, char *param1);
extern ConfigDeclaration * ConfigPage_C_modify_declaration_p_pp(ConfigPage *param0, char *param1);
extern char const * ConfigPage_C_get_variable_name_s_pp(ConfigPage const *param0, char *param1);
extern char const * ConfigPage_C_get_string_value_s_pp(ConfigPage const *param0, char *param1);
extern bool ConfigPage_C_is_variable_used_B_pp(ConfigPage const *param0, char *param1);
extern void ConfigPage_C_output_v_pp(ConfigPage const *param0, char *param1);
extern void ConfigPage_C_output_brief_signature_v_pp(ConfigPage const *param0, char *param1);
extern void ConfigPage_C_write_v_pp(ConfigPage const *param0, char *param1);
extern Filename * Filename_C_ctor_p_v();
extern Filename * Filename_C_ctor_p_p(Filename *param0);
extern Filename * Filename_C_ctor_1_p_p(Filename const *param0);
extern Filename * Filename_C_ctor_p_pp(Filename const *param0, char *param1);
extern Filename * Filename_C_ctor_p_s(char *param0);
extern Filename * Filename_C_ctor_2_p_p(char *param0);
extern Filename * Filename_C_ctor_3_p_p(char *param0);
extern Filename * Filename_C_text_filename_p_pp(Filename const *param0);
extern Filename * Filename_C_text_filename_p_sp(char *param0);
extern Filename * Filename_C_binary_filename_p_pp(Filename const *param0);
extern Filename * Filename_C_binary_filename_p_sp(char *param0);
extern Filename * Filename_C_dso_filename_p_sp(char *param0);
extern Filename * Filename_C_executable_filename_p_sp(char *param0);
extern Filename * Filename_C_pattern_filename_p_sp(char *param0);
extern Filename * Filename_C_from_os_specific_p_spp(char *param0, char *param1);
extern Filename * Filename_C_from_os_specific_1_p_spp(char *param0);
extern Filename * Filename_C_from_os_specific_w_p_ppp(char *param0, char *param1);
extern Filename * Filename_C_from_os_specific_w_1_p_ppp(char *param0);
extern Filename * Filename_C_expand_from_p_spp(char *param0, char *param1);
extern Filename * Filename_C_expand_from_1_p_spp(char *param0);
extern Filename * Filename_C_temporary_p_spppp(char *param0, char *param1, char *param2, char *param3);
extern Filename * Filename_C_temporary_1_p_spppp(char *param0, char *param1, char *param2);
extern Filename * Filename_C_temporary_2_p_spppp(char *param0, char *param1);
extern Filename const * Filename_C_get_home_directory_p_v();
extern Filename const * Filename_C_get_temp_directory_p_v();
extern Filename const * Filename_C_get_user_appdata_directory_p_v();
extern Filename const * Filename_C_get_common_appdata_directory_p_v();
extern Filename * _inCAAAAUZ8w(char *param0, char *param1);
extern Filename * _inCAAAAe4GP(char *param0, char *param1);
extern Filename * _inCAAAAAn_g(char *param0, char *param1);
extern Filename * _inCAAAAAEbr(char *param0, char *param1);
extern Filename * _inCAAAAwt4w(char *param0, char *param1);
extern char const * _s_p(char *param0);
extern char const * Filename_C_c_str_s_p(Filename const *param0);
extern bool Filename_C_empty_B_p(Filename const *param0);
extern unsigned int Filename_C_length_p_p(Filename const *param0);
extern char _inCAAAAPYDQ(char *param0, char *param1);
extern char const * Filename_C_substr_s_pp(Filename const *param0, char *param1);
extern char const * Filename_C_substr_s_ppp(Filename const *param0, char *param1, char *param2);
extern Filename * _inCAAAA_CCc(char *param0, char *param1);
extern Filename * _inCAAAAdG6k(char *param0, char *param1);
extern Filename * _inCAAAApD3m(char *param0, char *param1);
extern char const * Filename_C_get_fullpath_s_p(Filename const *param0);
extern char const * Filename_C_get_fullpath_w_p_p(Filename const *param0);
extern char const * Filename_C_get_dirname_s_p(Filename const *param0);
extern char const * Filename_C_get_basename_s_p(Filename const *param0);
extern char const * Filename_C_get_fullpath_wo_extension_s_p(Filename const *param0);
extern char const * Filename_C_get_basename_wo_extension_s_p(Filename const *param0);
extern char const * Filename_C_get_extension_s_p(Filename const *param0);
extern void Filename_C_set_fullpath_v_pp(Filename *param0, char *param1);
extern void Filename_C_set_dirname_v_pp(Filename *param0, char *param1);
extern void Filename_C_set_basename_v_pp(Filename *param0, char *param1);
extern void Filename_C_set_fullpath_wo_extension_v_pp(Filename *param0, char *param1);
extern void Filename_C_set_basename_wo_extension_v_pp(Filename *param0, char *param1);
extern void Filename_C_set_extension_v_pp(Filename *param0, char *param1);
extern void Filename_C_set_binary_v_p(Filename *param0);
extern void Filename_C_set_text_v_p(Filename *param0);
extern bool Filename_C_is_binary_B_p(Filename const *param0);
extern bool Filename_C_is_text_B_p(Filename const *param0);
extern bool Filename_C_is_binary_or_text_B_p(Filename const *param0);
extern void Filename_C_set_type_v_pp(Filename *param0, char *param1);
extern Filename__Type Filename_C_get_type_p_p(Filename const *param0);
extern void Filename_C_set_pattern_v_pB(Filename *param0, bool param1);
extern bool Filename_C_get_pattern_B_p(Filename const *param0);
extern bool Filename_C_has_hash_B_p(Filename const *param0);
extern Filename * Filename_C_get_filename_index_p_pi(Filename const *param0, int param1);
extern char const * Filename_C_get_hash_to_end_s_p(Filename const *param0);
extern void Filename_C_set_hash_to_end_v_pp(Filename *param0, char *param1);
extern void Filename_C_extract_components_v_pp(Filename const *param0, char *param1);
extern void Filename_C_standardize_v_p(Filename *param0);
extern bool Filename_C_is_local_B_p(Filename const *param0);
extern bool Filename_C_is_fully_qualified_B_p(Filename const *param0);
extern void Filename_C_make_absolute_v_p(Filename *param0);
extern void Filename_C_make_absolute_v_pp(Filename *param0, char *param1);
extern bool Filename_C_make_canonical_B_p(Filename *param0);
extern bool Filename_C_make_true_case_B_p(Filename *param0);
extern char const * Filename_C_to_os_specific_s_p(Filename const *param0);
extern char const * Filename_C_to_os_specific_w_p_p(Filename const *param0);
extern char const * Filename_C_to_os_generic_s_p(Filename const *param0);
extern char const * Filename_C_to_os_short_name_s_p(Filename const *param0);
extern char const * Filename_C_to_os_long_name_s_p(Filename const *param0);
extern bool Filename_C_exists_B_p(Filename const *param0);
extern bool Filename_C_is_regular_file_B_p(Filename const *param0);
extern bool Filename_C_is_writable_B_p(Filename const *param0);
extern bool Filename_C_is_directory_B_p(Filename const *param0);
extern bool Filename_C_is_executable_B_p(Filename const *param0);
extern int Filename_C_compare_timestamps_i_ppBB(Filename const *param0, char *param1, bool param2, bool param3);
extern int Filename_C_compare_timestamps_1_i_ppBB(Filename const *param0, char *param1, bool param2);
extern int Filename_C_compare_timestamps_2_i_ppBB(Filename const *param0, char *param1);
extern time_t Filename_C_get_timestamp_p_p(Filename const *param0);
extern time_t Filename_C_get_access_timestamp_p_p(Filename const *param0);
extern int  Filename_C_get_file_size_p_p(Filename const *param0);
extern bool Filename_C_resolve_filename_B_ppp(Filename *param0, char *param1, char *param2);
extern bool Filename_C_resolve_filename_1_B_ppp(Filename *param0, char *param1);
extern bool Filename_C_make_relative_to_B_ppB(Filename *param0, char *param1, bool param2);
extern bool Filename_C_make_relative_to_1_B_ppB(Filename *param0, char *param1);
extern int Filename_C_find_on_searchpath_i_pp(Filename *param0, char *param1);
extern bool Filename_C_scan_directory_B_pp(Filename const *param0, char *param1);
extern bool Filename_C_open_read_B_pp(Filename const *param0, char *param1);
extern bool Filename_C_open_read_1_B_pp(Filename const *param0, char *param1);
extern bool Filename_C_open_write_B_ppB(Filename const *param0, char *param1, bool param2);
extern bool Filename_C_open_write_1_B_ppB(Filename const *param0, char *param1);
extern bool Filename_C_open_write_2_B_ppB(Filename const *param0, char *param1, bool param2);
extern bool Filename_C_open_write_3_B_ppB(Filename const *param0, char *param1);
extern bool Filename_C_open_append_B_pp(Filename const *param0, char *param1);
extern bool Filename_C_open_append_1_B_pp(Filename const *param0, char *param1);
extern bool Filename_C_open_read_write_B_ppB(Filename const *param0, char *param1, bool param2);
extern bool Filename_C_open_read_write_1_B_ppB(Filename const *param0, char *param1);
extern bool Filename_C_open_read_write_2_B_ppB(Filename const *param0, char *param1, bool param2);
extern bool Filename_C_open_read_write_3_B_ppB(Filename const *param0, char *param1);
extern bool Filename_C_open_read_append_B_pp(Filename const *param0, char *param1);
extern bool Filename_C_open_read_append_1_B_pp(Filename const *param0, char *param1);
extern bool Filename_C_chdir_B_p(Filename const *param0);
extern bool Filename_C_touch_B_p(Filename const *param0);
extern bool Filename_C_unlink_B_p(Filename const *param0);
extern bool Filename_C_rename_to_B_pp(Filename const *param0, char *param1);
extern bool Filename_C_copy_to_B_pp(Filename const *param0, char *param1);
extern bool Filename_C_make_dir_B_p(Filename const *param0);
extern bool Filename_C_mkdir_B_p(Filename const *param0);
extern bool Filename_C_rmdir_B_p(Filename const *param0);
extern bool _inCAAAAOBrR(char *param0, char *param1);
extern bool _inCAAAAsEaR(char *param0, char *param1);
extern bool _inCAAAAYSEF(char *param0, char *param1);
extern int Filename_C_compare_to_i_pp(Filename const *param0, char *param1);
extern bool Filename_C___nonzero___B_p(Filename const *param0);
extern int Filename_C_get_hash_i_p(Filename const *param0);
extern void Filename_C_output_v_pp(Filename const *param0, char *param1);
extern void Filename_C_set_filesystem_encoding_v_pp(char *param0);
extern TextEncoder__Encoding Filename_C_get_filesystem_encoding_p_v();
extern int Filename_C_get_class_type_i_v();
extern void Filename_C_init_type_v_v();
extern LVecBase3f * LVecBase3f_C_ctor_p_v();
extern LVecBase3f * LVecBase3f_C_ctor_p_pf(char *param0, float param1);
extern LVecBase3f * LVecBase3f_C_ctor_p_p(LVecBase3f const *param0);
extern LVecBase3f * LVecBase3f_C_ctor_1_p_p(char *param0);
extern LVecBase3f * LVecBase3f_C_ctor_p_f(char *param0);
extern LVecBase3f * LVecBase3f_C_ctor_p_fff(char *param0, float param1, float param2);
extern void _inCAAAA4Nkp(char *param0, char *param1);
extern LVecBase3f * _inCAAAAqOP9(char *param0, char *param1);
extern LVecBase3f * _inCAAAArfXC(char *param0, float param1);
extern LVecBase3f const * LVecBase3f_C_zero_p_v();
extern LVecBase3f const * LVecBase3f_C_unit_x_p_v();
extern LVecBase3f const * LVecBase3f_C_unit_y_p_v();
extern LVecBase3f const * LVecBase3f_C_unit_z_p_v();
extern void _inCAAAA01HX(char *param0, int param1, float param2);
extern float _inCAAAAnq7z(char *param0, int param1);
extern int LVecBase3f_C_size_i_v();
extern bool LVecBase3f_C_is_nan_B_p(LVecBase3f const *param0);
extern float LVecBase3f_C_get_cell_f_pi(LVecBase3f const *param0, int param1);
extern float LVecBase3f_C_get_x_f_p(LVecBase3f const *param0);
extern float LVecBase3f_C_get_y_f_p(LVecBase3f const *param0);
extern float LVecBase3f_C_get_z_f_p(LVecBase3f const *param0);
extern void LVecBase3f_C_set_cell_v_pif(LVecBase3f *param0, int param1, float param2);
extern void LVecBase3f_C_set_x_v_pf(LVecBase3f *param0, float param1);
extern void LVecBase3f_C_set_y_v_pf(LVecBase3f *param0, float param1);
extern void LVecBase3f_C_set_z_v_pf(LVecBase3f *param0, float param1);
extern LVecBase2f * LVecBase3f_C_get_xy_p_p(LVecBase3f const *param0);
extern LVecBase2f * LVecBase3f_C_get_xz_p_p(LVecBase3f const *param0);
extern LVecBase2f * LVecBase3f_C_get_yz_p_p(LVecBase3f const *param0);
extern void LVecBase3f_C_add_to_cell_v_pif(LVecBase3f *param0, int param1, float param2);
extern void LVecBase3f_C_add_x_v_pf(LVecBase3f *param0, float param1);
extern void LVecBase3f_C_add_y_v_pf(LVecBase3f *param0, float param1);
extern void LVecBase3f_C_add_z_v_pf(LVecBase3f *param0, float param1);
extern void LVecBase3f_C_get_data_v_p(LVecBase3f const *param0);
extern int LVecBase3f_C_get_num_components_i_v();
extern void LVecBase3f_C_begin_v_p(LVecBase3f *param0);
extern void LVecBase3f_C_begin_1_v_p(LVecBase3f const *param0);
extern void LVecBase3f_C_end_v_p(LVecBase3f *param0);
extern void LVecBase3f_C_end_1_v_p(LVecBase3f const *param0);
extern void LVecBase3f_C_fill_v_pf(LVecBase3f *param0, float param1);
extern void LVecBase3f_C_set_v_pfff(LVecBase3f *param0, float param1, float param2, float param3);
extern float LVecBase3f_C_dot_f_pp(LVecBase3f const *param0, char *param1);
extern float LVecBase3f_C_length_squared_f_p(LVecBase3f const *param0);
extern float LVecBase3f_C_length_f_p(LVecBase3f const *param0);
extern bool LVecBase3f_C_normalize_B_p(LVecBase3f *param0);
extern LVecBase3f * LVecBase3f_C_normalized_p_p(LVecBase3f const *param0);
extern LVecBase3f * LVecBase3f_C_project_p_pp(LVecBase3f const *param0, char *param1);
extern LVecBase3f * LVecBase3f_C_cross_p_pp(LVecBase3f const *param0, char *param1);
extern bool _inCAAAAdE8o(char *param0, char *param1);
extern bool _inCAAAAFt4v(char *param0, char *param1);
extern bool _inCAAAABNge(char *param0, char *param1);
extern LVecBase3f * LVecBase3f_C_get_standardized_hpr_p_p(LVecBase3f const *param0);
extern int LVecBase3f_C_compare_to_i_pp(LVecBase3f const *param0, char *param1);
extern int LVecBase3f_C_compare_to_i_ppf(LVecBase3f const *param0, char *param1, float param2);
extern unsigned int LVecBase3f_C_get_hash_p_p(LVecBase3f const *param0);
extern unsigned int LVecBase3f_C_get_hash_p_pf(LVecBase3f const *param0, float param1);
extern unsigned int LVecBase3f_C_add_hash_p_pp(LVecBase3f const *param0, char *param1);
extern unsigned int LVecBase3f_C_add_hash_p_ppf(LVecBase3f const *param0, char *param1, float param2);
extern void LVecBase3f_C_generate_hash_v_pp(LVecBase3f const *param0, char *param1);
extern void LVecBase3f_C_generate_hash_v_ppf(LVecBase3f const *param0, char *param1, float param2);
extern LVecBase3f * _inCAAAAiO_P(char *param0);
extern LVecBase3f * _inCAAAAfM9C(char *param0, char *param1);
extern LVecBase3f * _inCAAAAf8eW(char *param0, char *param1);
extern LVecBase3f * _inCAAAAHdlj(char *param0, float param1);
extern LVecBase3f * _inCAAAAY1ZU(char *param0, float param1);
extern LVecBase3f * _inCAAAAGqXQ(char *param0, char *param1);
extern LVecBase3f * _inCAAAAGa5j(char *param0, char *param1);
extern LVecBase3f * _inCAAAAPZfq(char *param0, float param1);
extern LVecBase3f * _inCAAAAOhTb(char *param0, float param1);
extern void LVecBase3f_C_componentwise_mult_v_pp(LVecBase3f *param0, char *param1);
extern LVecBase3f * LVecBase3f_C_fmax_p_pp(LVecBase3f const *param0, char *param1);
extern LVecBase3f * LVecBase3f_C_fmin_p_pp(LVecBase3f const *param0, char *param1);
extern void LVecBase3f_C_cross_into_v_pp(LVecBase3f *param0, char *param1);
extern bool LVecBase3f_C_almost_equal_B_pp(LVecBase3f const *param0, char *param1);
extern bool LVecBase3f_C_almost_equal_B_ppf(LVecBase3f const *param0, char *param1, float param2);
extern void LVecBase3f_C_output_v_pp(LVecBase3f const *param0, char *param1);
extern void LVecBase3f_C_write_datagram_fixed_v_pp(LVecBase3f const *param0, char *param1);
extern void LVecBase3f_C_read_datagram_fixed_v_pp(LVecBase3f *param0, char *param1);
extern void LVecBase3f_C_write_datagram_v_pp(LVecBase3f const *param0, char *param1);
extern void LVecBase3f_C_read_datagram_v_pp(LVecBase3f *param0, char *param1);
extern LVecBase3f__EVector3 * LVecBase3f_C_get_v_p_p(LVecBase3f const *param0);
extern int LVecBase3f_C_get_class_type_i_v();
extern void LVecBase3f_C_init_type_v_v();
extern PandaFramework * PandaFramework_C_ctor_p_v();
extern PandaFramework * PandaFramework_C_ctor_p_p(PandaFramework const *param0);
extern void PandaFramework_C_open_framework_v_p(PandaFramework *param0);
extern void PandaFramework_C_close_framework_v_p(PandaFramework *param0);
extern GraphicsPipe * PandaFramework_C_get_default_pipe_p_p(PandaFramework *param0);
extern GraphicsEngine * PandaFramework_C_get_graphics_engine_p_p(PandaFramework *param0);
extern NodePath const * PandaFramework_C_get_data_root_p_p(PandaFramework const *param0);
extern EventHandler * PandaFramework_C_get_event_handler_p_p(PandaFramework *param0);
extern AsyncTaskManager * PandaFramework_C_get_task_mgr_p_p(PandaFramework *param0);
extern NodePath * PandaFramework_C_get_mouse_p_pp(PandaFramework *param0, char *param1);
extern void PandaFramework_C_remove_mouse_v_pp(PandaFramework *param0, char *param1);
extern void PandaFramework_C_set_window_title_v_pp(PandaFramework *param0, char *param1);
extern void PandaFramework_C_get_default_window_props_v_pp(PandaFramework *param0, char *param1);
extern WindowFramework * PandaFramework_C_open_window_p_p(PandaFramework *param0);
extern WindowFramework * PandaFramework_C_open_window_p_ppp(PandaFramework *param0, char *param1, char *param2);
extern WindowFramework * PandaFramework_C_open_window_1_p_ppp(PandaFramework *param0, char *param1);
extern WindowFramework * PandaFramework_C_open_window_p_ppipp(PandaFramework *param0, char *param1, int param2, char *param3, char *param4);
extern WindowFramework * PandaFramework_C_open_window_1_p_ppipp(PandaFramework *param0, char *param1, int param2, char *param3);
extern WindowFramework * PandaFramework_C_open_window_2_p_ppipp(PandaFramework *param0, char *param1, int param2);
extern int PandaFramework_C_get_num_windows_i_p(PandaFramework const *param0);
extern WindowFramework * PandaFramework_C_get_window_p_pi(PandaFramework const *param0, int param1);
extern int PandaFramework_C_find_window_i_pp(PandaFramework const *param0, char *param1);
extern int PandaFramework_C_find_window_1_i_pp(PandaFramework const *param0, char *param1);
extern void PandaFramework_C_close_window_v_pp(PandaFramework *param0, char *param1);
extern void PandaFramework_C_close_window_v_pi(PandaFramework *param0, int param1);
extern void PandaFramework_C_close_all_windows_v_p(PandaFramework *param0);
extern bool PandaFramework_C_all_windows_closed_B_p(PandaFramework const *param0);
extern NodePath * PandaFramework_C_get_models_p_p(PandaFramework *param0);
extern void PandaFramework_C_report_frame_rate_v_pp(PandaFramework const *param0, char *param1);
extern void PandaFramework_C_reset_frame_rate_v_p(PandaFramework *param0);
extern void PandaFramework_C_set_wireframe_v_pB(PandaFramework *param0, bool param1);
extern void PandaFramework_C_set_texture_v_pB(PandaFramework *param0, bool param1);
extern void PandaFramework_C_set_two_sided_v_pB(PandaFramework *param0, bool param1);
extern void PandaFramework_C_set_lighting_v_pB(PandaFramework *param0, bool param1);
extern void PandaFramework_C_set_perpixel_v_pB(PandaFramework *param0, bool param1);
extern void PandaFramework_C_set_background_type_v_pp(PandaFramework *param0, char *param1);
extern bool PandaFramework_C_get_wireframe_B_p(PandaFramework const *param0);
extern bool PandaFramework_C_get_texture_B_p(PandaFramework const *param0);
extern bool PandaFramework_C_get_two_sided_B_p(PandaFramework const *param0);
extern bool PandaFramework_C_get_lighting_B_p(PandaFramework const *param0);
extern bool PandaFramework_C_get_perpixel_B_p(PandaFramework const *param0);
extern WindowFramework__BackgroundType PandaFramework_C_get_background_type_p_p(PandaFramework const *param0);
extern int PandaFramework_C_hide_collision_solids_i_pp(char *param0);
extern int PandaFramework_C_show_collision_solids_i_pp(char *param0);
extern void PandaFramework_C_set_highlight_v_pp(PandaFramework *param0, char *param1);
extern void PandaFramework_C_clear_highlight_v_p(PandaFramework *param0);
extern bool PandaFramework_C_has_highlight_B_p(PandaFramework const *param0);
extern NodePath const * PandaFramework_C_get_highlight_p_p(PandaFramework const *param0);
extern RecorderController * PandaFramework_C_get_recorder_p_p(PandaFramework const *param0);
extern void PandaFramework_C_set_recorder_v_pp(PandaFramework *param0, char *param1);
extern void PandaFramework_C_enable_default_keys_v_p(PandaFramework *param0);
extern bool PandaFramework_C_do_frame_B_pp(PandaFramework *param0, char *param1);
extern void PandaFramework_C_main_loop_v_p(PandaFramework *param0);
extern void PandaFramework_C_set_exit_flag_v_p(PandaFramework *param0);
extern void PandaFramework_C_clear_exit_flag_v_p(PandaFramework *param0);
extern char const * PandaSystem_C_get_version_string_s_v();
extern char const * PandaSystem_C_get_package_version_string_s_v();
extern char const * PandaSystem_C_get_package_host_url_s_v();
extern char const * PandaSystem_C_get_p3d_coreapi_version_string_s_v();
extern int PandaSystem_C_get_major_version_i_v();
extern int PandaSystem_C_get_minor_version_i_v();
extern int PandaSystem_C_get_sequence_version_i_v();
extern bool PandaSystem_C_is_official_version_B_v();
extern int PandaSystem_C_get_memory_alignment_i_v();
extern char const * PandaSystem_C_get_distributor_s_v();
extern char const * PandaSystem_C_get_compiler_s_v();
extern char const * PandaSystem_C_get_build_date_s_v();
extern char const * PandaSystem_C_get_git_commit_s_v();
extern char const * PandaSystem_C_get_platform_s_v();
extern bool PandaSystem_C_has_system_B_pp(PandaSystem const *param0, char *param1);
extern unsigned int PandaSystem_C_get_num_systems_p_p(PandaSystem const *param0);
extern char const * PandaSystem_C_get_system_s_pp(PandaSystem const *param0, char *param1);
extern char const * PandaSystem_C_get_system_tag_s_ppp(PandaSystem const *param0, char *param1, char *param2);
extern void PandaSystem_C_add_system_v_pp(PandaSystem *param0, char *param1);
extern void PandaSystem_C_set_system_tag_v_pppp(PandaSystem *param0, char *param1, char *param2, char *param3);
extern bool PandaSystem_C_heap_trim_B_pp(PandaSystem *param0, char *param1);
extern void PandaSystem_C_output_v_pp(PandaSystem const *param0, char *param1);
extern void PandaSystem_C_write_v_pp(PandaSystem const *param0, char *param1);
extern PandaSystem * PandaSystem_C_get_global_ptr_p_v();
extern int PandaSystem_C_get_class_type_i_v();
extern void PandaSystem_C_init_type_v_v();
extern PandaFramework * WindowFramework_C_get_panda_framework_p_p(WindowFramework const *param0);
extern GraphicsWindow * WindowFramework_C_get_graphics_window_p_p(WindowFramework const *param0);
extern GraphicsOutput * WindowFramework_C_get_graphics_output_p_p(WindowFramework const *param0);
extern NodePath * WindowFramework_C_get_camera_group_p_p(WindowFramework *param0);
extern int WindowFramework_C_get_num_cameras_i_p(WindowFramework const *param0);
extern Camera * WindowFramework_C_get_camera_p_pi(WindowFramework const *param0, int param1);
extern DisplayRegion * WindowFramework_C_get_display_region_2d_p_p(WindowFramework const *param0);
extern DisplayRegion * WindowFramework_C_get_display_region_3d_p_p(WindowFramework const *param0);
extern NodePath * WindowFramework_C_get_render_p_p(WindowFramework *param0);
extern NodePath * WindowFramework_C_get_render_2d_p_p(WindowFramework *param0);
extern NodePath * WindowFramework_C_get_aspect_2d_p_p(WindowFramework *param0);
extern NodePath * WindowFramework_C_get_pixel_2d_p_p(WindowFramework *param0);
extern NodePath * WindowFramework_C_get_mouse_p_p(WindowFramework *param0);
extern NodePath * WindowFramework_C_get_button_thrower_p_p(WindowFramework *param0);
extern void WindowFramework_C_enable_keyboard_v_p(WindowFramework *param0);
extern void WindowFramework_C_setup_trackball_v_p(WindowFramework *param0);
extern void WindowFramework_C_center_trackball_v_pp(WindowFramework *param0, char *param1);
extern bool WindowFramework_C_load_models_B_ppp(WindowFramework *param0, char *param1, char *param2);
extern NodePath * WindowFramework_C_load_model_p_ppp(WindowFramework *param0, char *param1, char *param2);
extern NodePath * WindowFramework_C_load_default_model_p_pp(WindowFramework *param0, char *param1);
extern void WindowFramework_C_loop_animations_v_pi(WindowFramework *param0, int param1);
extern void WindowFramework_C_loop_animations_1_v_pi(WindowFramework *param0);
extern void WindowFramework_C_stagger_animations_v_p(WindowFramework *param0);
extern void WindowFramework_C_next_anim_control_v_p(WindowFramework *param0);
extern void WindowFramework_C_set_anim_controls_v_pB(WindowFramework *param0, bool param1);
extern bool WindowFramework_C_get_anim_controls_B_p(WindowFramework const *param0);
extern void WindowFramework_C_adjust_dimensions_v_p(WindowFramework *param0);
extern WindowFramework * WindowFramework_C_split_window_p_pp(WindowFramework *param0, char *param1);
extern WindowFramework * WindowFramework_C_split_window_1_p_pp(WindowFramework *param0);
extern void WindowFramework_C_set_wireframe_v_pBB(WindowFramework *param0, bool param1, bool param2);
extern void WindowFramework_C_set_wireframe_1_v_pBB(WindowFramework *param0, bool param1);
extern void WindowFramework_C_set_texture_v_pB(WindowFramework *param0, bool param1);
extern void WindowFramework_C_set_two_sided_v_pB(WindowFramework *param0, bool param1);
extern void WindowFramework_C_set_one_sided_reverse_v_pB(WindowFramework *param0, bool param1);
extern void WindowFramework_C_set_lighting_v_pB(WindowFramework *param0, bool param1);
extern void WindowFramework_C_set_perpixel_v_pB(WindowFramework *param0, bool param1);
extern void WindowFramework_C_set_background_type_v_pp(WindowFramework *param0, char *param1);
extern bool WindowFramework_C_get_wireframe_B_p(WindowFramework const *param0);
extern bool WindowFramework_C_get_wireframe_filled_B_p(WindowFramework const *param0);
extern bool WindowFramework_C_get_texture_B_p(WindowFramework const *param0);
extern bool WindowFramework_C_get_two_sided_B_p(WindowFramework const *param0);
extern bool WindowFramework_C_get_one_sided_reverse_B_p(WindowFramework const *param0);
extern bool WindowFramework_C_get_lighting_B_p(WindowFramework const *param0);
extern bool WindowFramework_C_get_perpixel_B_p(WindowFramework const *param0);
extern WindowFramework__BackgroundType WindowFramework_C_get_background_type_p_p(WindowFramework const *param0);
extern TextFont * WindowFramework_C_get_shuttle_controls_font_p_v();
extern NodePath * WindowFramework_C_make_camera_p_p(WindowFramework *param0);
extern int WindowFramework_C_get_class_type_i_v();
extern void WindowFramework_C_init_type_v_v();
extern int WindowFramework_C_get_type_i_p(WindowFramework const *param0);
extern int WindowFramework_C_force_init_type_i_p(WindowFramework *param0);
extern WindowFramework * WindowFramework_C_ctor_p_p(WindowFramework const *param0);
extern int check_timer_i_v();
extern void emscripten_cancel_main_loop_v_v();
extern void main_loop_or_step_v_v();
extern void emscripten_force_exit_v_ii(char *param0);
extern Engine * Engine_C_ctor_p_v();
extern Engine * Engine_C_ctor_p_p(Engine const *param0);
extern void Engine_C_dtor_v_p(Engine *param0);
extern void Engine_C_stop_v_v();
extern int Engine_C_is_alive_i_v();
extern int Engine_C_HelloEngine_i_p(Engine *param0);
extern int Engine_C_casetest_i_pipB(Engine *param0, int param1, char *param2, bool param3);
extern NodePath * Engine_C_load_model_p_ps(Engine *param0, char *param1);
extern void Engine_C_attach_v_pp(Engine *param0, char *param1);
extern void Engine_C_op_pos_v_ppp(Engine *param0, char *param1, char *param2);
extern void Engine_C_op_scale_v_ppp(Engine *param0, char *param1, char *param2);
extern void Engine_C_build_v_p(Engine *param0);
extern void Engine_C_step_v_p(Engine *param0);
extern char const * Engine_C_get_version_string_s_v();
extern char  const * Engine_C_get_wframe_p_p(Engine const *param0);
extern PandaFramework * Engine_C_get_framework_p_p(Engine const *param0);
extern void Engine_C_set_framework_v_pp(Engine *param0, char *param1);
