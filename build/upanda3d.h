
#include <stdio.h>
#include <stdbool.h>
#include <time.h>

#define PT char
#define PN_stdfloat float

#define wchar_t char
//#define string char const

#define std$_size_t unsigned int
#define std$_streamsize int

#define std$_string char
#define std$_wstring char
#define std$_fstream char
#define std$_ifstream char
#define std$_istream char
#define std$_ofstream char
#define std$_ostream char

#define AccumulatedAttribs char
#define AnimControlCollection char
#define AnimMap char
#define AsyncFuture char
#define AsyncTask char
#define AsyncTaskManager char
#define AtomicAdjust$_Integer char
#define AutoTextureScale int
#define AuxSceneData char
#define BamCacheRecord char
#define BamReader char
#define BamWriter char
#define BitMask32 char
#define BoundingVolume char
#define BoundingVolume$_BoundsType char
#define ButtonMap char
#define CActor char
#define CPTA_int char
#define CPTA_uchar char
#define CPT_InternalName char
#define CachedTypedWritableReferenceCount char
#define CallbackObject char
#define Camera char
#define ChecksumHashGenerator char
#define CollideMask char
#define CollisionEntry char
#define CollisionHandler char
#define CollisionNode char
#define CollisionRay char
#define CollisionRecorder char
#define CollisionSolid char
#define CollisionTraverser char
#define ConfigDeclaration char
#define ConfigPage char
#define ConfigVariableCore char
#define ConstPointerTo char
#define CoordinateSystem int
#define CopyOnWriteObject char
#define CullHandler char
#define CullResult char
#define CullTraverser char
#define CullTraverserData char
#define DSearchPath char
#define Datagram char
#define DatagramIterator char
#define Dict char
#define DisplayRegion char
#define DisplayRegionPipelineReader char
#define DrawMask char
#define DrawableRegion char
#define DrawableRegion$_RenderTexturePlane char
#define Engine char
#define Event char
#define EventHandler char
#define EventQueue char
#define Filename char
#define Filename$_Type char
#define Fog char
#define Fog$_Mode char
#define FrameBufferProperties char
#define Geom char
#define GeomContext char
#define GeomEnums char
#define GeomEnums$_Contents char
#define GeomEnums$_NumericType char
#define GeomEnums$_PrimitiveType char
#define GeomEnums$_ShadeModel char
#define GeomEnums$_UsageHint char
#define GeomNode char
#define GeomNode$_Geoms char
#define GeomPrimitive char
#define GeomPrimitivePipelineReader char
#define GeomTransformer char
#define GeomTriangles char
#define GeomVertexAnimationSpec char
#define GeomVertexArrayData char
#define GeomVertexArrayDataHandle char
#define GeomVertexArrayFormat char
#define GeomVertexColumn char
#define GeomVertexData char
#define GeomVertexDataPipelineReader char
#define GeomVertexDataPipelineWriter char
#define GeomVertexFormat char
#define GeomVertexWriter char
#define GraphicsEngine char
#define GraphicsOutput char
#define GraphicsOutput$_FrameMode char
#define GraphicsOutput$_RenderTextureMode char
#define GraphicsOutputBase char
#define GraphicsPipe char
#define GraphicsStateGuardian char
#define GraphicsStateGuardianBase char
#define GraphicsThreadingModel char
#define GraphicsWindow char
#define GraphicsWindowProc char
#define GraphicsWindowProcCallbackData char
#define IndexBufferContext char
#define InputDevice char
#define InternalName char
#define InternalNameCollection char
#define LColor char
#define LMatrix3 char
#define LMatrix3d char
#define LMatrix3f char
#define LMatrix4 char
#define LMatrix4d char
#define LMatrix4f char
#define LPoint2 char
#define LPoint2d char
#define LPoint2f char
#define LPoint2i char
#define LPoint3 char
#define LPoint3d char
#define LPoint3f char
#define LPoint3i char
#define LPoint4d char
#define LPoint4f char
#define LPoint4i char
#define LQuaternion char
#define LTexCoord3 char
#define LVecBase2 char
#define LVecBase2d char
#define LVecBase2d$_EVector2 char
#define LVecBase2f char
#define LVecBase2f$_EVector2 char
#define LVecBase2i char
#define LVecBase2i$_EVector2 char
#define LVecBase3 char
#define LVecBase3d char
#define LVecBase3d$_EVector3 char
#define LVecBase3f char
#define LVecBase3f$_EVector3 char
#define LVecBase3i char
#define LVecBase3i$_EVector3 char
#define LVecBase4 char
#define LVecBase4d char
#define LVecBase4d$_EVector4 char
#define LVecBase4f char
#define LVecBase4f$_EVector4 char
#define LVecBase4i char
#define LVecBase4i$_EVector4 char
#define LVector2 char
#define LVector2d char
#define LVector2f char
#define LVector2i char
#define LVector3 char
#define LVector3d char
#define LVector3f char
#define LVector3i char
#define LVector4d char
#define LVector4f char
#define LVector4i char
#define Lens char
#define Lens$_StereoChannel char
#define LensNode char
#define Light char
#define LinkedListNode char
#define Loader char
#define LoaderOptions char
#define LogicOpAttrib$_Operation char
#define Material char
#define MaterialCollection char
#define MemoryBase char
#define MouseData char
#define Namable char
#define NodeCachedReferenceCount char
#define NodePath char
#define NodePath$_ErrorType char
#define NodePathCollection char
#define PNMImage char
#define PStatCollector char
#define PTA_LMatrix3 char
#define PTA_LMatrix3d char
#define PTA_LMatrix3f char
#define PTA_LMatrix4 char
#define PTA_LMatrix4d char
#define PTA_LMatrix4f char
#define PTA_LVecBase2 char
#define PTA_LVecBase2d char
#define PTA_LVecBase2f char
#define PTA_LVecBase2i char
#define PTA_LVecBase3 char
#define PTA_LVecBase3d char
#define PTA_LVecBase3f char
#define PTA_LVecBase3i char
#define PTA_LVecBase4 char
#define PTA_LVecBase4d char
#define PTA_LVecBase4f char
#define PTA_LVecBase4i char
#define PTA_double char
#define PTA_float char
#define PTA_int char
#define PTA_uchar char
#define PandaFramework char
#define PandaNode char
#define PandaNode$_Children char
#define PandaNode$_Parents char
#define PandaNode$_Stashed char
#define PandaSystem char
#define ParamValueBase char
#define PfmFile char
#define Pipeline char
#define PointerTo char
#define PreparedGraphicsObjects char
#define ReMutex char
#define RecorderController char
#define ReferenceCount char
#define RenderAttrib char
#define RenderAttrib$_TexGenMode char
#define RenderEffect char
#define RenderEffects char
#define RenderModeAttrib$_Mode char
#define RenderState char
#define RenderState$_SlotMask char
#define SamplerState char
#define SamplerState$_FilterType char
#define SamplerState$_WrapMode char
#define SceneSetup char
#define Shader char
#define Shader$_ShaderArgInfo char
#define Shader$_ShaderCaps char
#define Shader$_ShaderLanguage char
#define Shader$_ShaderMatInput char
#define Shader$_ShaderMatSpec char
#define Shader$_ShaderPtrData char
#define Shader$_ShaderType char
#define ShaderAttrib char
#define ShaderBuffer char
#define ShaderContext char
#define ShaderInput char
#define SimpleLru char
#define SimpleLruPage char
#define SliderTable char
#define SparseArray char
#define StereoDisplayRegion char
#define TextEncoder char
#define TextEncoder$_Encoding char
#define TextFont char
#define TextFont$_RenderMode char
#define TextGlyph char
#define TextNode char
#define TextProperties char
#define TextProperties$_Alignment char
#define Texture char
#define Texture$_ComponentType char
#define Texture$_CompressionMode char
#define Texture$_FilterType char
#define Texture$_Format char
#define Texture$_QualityLevel char
#define Texture$_TextureType char
#define Texture$_WrapMode char
#define TextureCollection char
#define TextureContext char
#define TexturePeeker char
#define TextureStage char
#define TextureStageCollection char
#define Thread char
#define Thread$_PStatsCallback char
#define ThreadPriority int
#define TouchInfo char
#define TransformBlendTable char
#define TransformState char
#define TransformTable char
#define TransparencyAttrib$_Mode char
#define TypeHandle char
#define TypedObject char
#define TypedReferenceCount char
#define TypedWritable char
#define TypedWritableReferenceCount char
#define UnalignedLVecBase4d char
#define UnalignedLVecBase4f char
#define UnalignedLVecBase4i char
#define UpdateSeq char
#define VertexBufferContext char
#define VertexDataBook char
#define VertexTransform char
#define WeakNodePath char
#define WeakReferenceList char
#define WindowFramework char
#define WindowFramework$_BackgroundType char
#define WindowFramework$_SplitType char
#define WindowHandle char
#define WindowHandle$_OSHandle char
#define WindowProperties char
#define WindowProperties$_MouseMode char
#define WindowProperties$_ZOrder char
#define pfstream char
#define pifstream char
#define pofstream char
#define uint32_t unsigned int
#define vector_string char
#define vector_uchar unsigned char

// 


// AnimControlCollection

// C++ _inCAAAAd6rF() ==> AnimControlCollection$_$downcast_to_CActor(AnimControlCollection *param0)(AnimControlCollection *)
extern CActor * AnimControlCollection$1$downcast_to_CActor(AnimControlCollection *self);

#if INDEX
#define AnimControlCollection_C_downcast_to_CActor_p_p AnimControlCollection$1$downcast_to_CActor
#endif


// CActor

// C++ _inCAAAAb7M6() ==> CActor$_$upcast_to_NodePath(CActor *param0)(CActor *)
extern NodePath * CActor$1$upcast_to_NodePath(CActor *self);

#if INDEX
#define CActor_C_upcast_to_NodePath_p_p CActor$1$upcast_to_NodePath
#endif

// C++ _inCAAAAPnWH() ==> CActor$_$upcast_to_AnimControlCollection(CActor *param0)(CActor *)
extern AnimControlCollection * CActor$2$upcast_to_AnimControlCollection(CActor *self);

#if INDEX
#define CActor_C_upcast_to_AnimControlCollection_p_p CActor$2$upcast_to_AnimControlCollection
#endif

// C++ _inCAAAAL4wH() ==> CActor$_$CActor()()
extern CActor * CActor$3$CActor(void);

#if INDEX
#define CActor_C_ctor_p_v CActor$3$CActor
#endif

// C++ _inCAAAA4H2y(CActor const &) ==> CActor$_$CActor(CActor const *param0)(CActor const *)
extern CActor * CActor$4$CActor(CActor const *arg0);

#if INDEX
#define CActor_C_ctor_p_p CActor$4$CActor
#endif

// C++ _inCAAAAb5rc() ==> CActor$_$get_anim_map(CActor const *param0)(CActor const *)
extern Dict * CActor$5$get_anim_map(CActor const *self);

#if INDEX
#define CActor_C_get_anim_map_p_p CActor$5$get_anim_map
#endif

// C++ _inCAAAAPLPP(char const *path, char const *name) ==> CActor$_$add(CActor *param0, char const *param1, char const *param2)(CActor *, char const *, char const *)
extern void CActor$6$add(CActor *self, char const *path, char const *name);

#if INDEX
#define CActor_C_add_v_pss CActor$6$add
#endif

// C++ _inCAAAA7_rf(WindowFramework *windowFrameworkPtr, std::string const &actorFilename, AnimMap const *animMapPtr, int hierarchyMatchFlags) ==> CActor$_$load_actor(CActor *param0, WindowFramework *param1, char const *param2, AnimMap const *param3, int param4)(CActor *, WindowFramework *, char const *, AnimMap const *, int)
extern void CActor$7$load_actor(CActor *self, WindowFramework *windowFrameworkPtr, char const *actorFilename, AnimMap const *animMapPtr, int hierarchyMatchFlags);

#if INDEX
#define CActor_C_load_actor_v_ppspi CActor$7$load_actor
#endif

// C++ _inCAAAAAHtG(std::string const &jointName) ==> CActor$_$control_joint(CActor *param0, char const *param1)(CActor *, char const *)
extern NodePath * CActor$8$control_joint(CActor *self, char const *jointName);

#if INDEX
#define CActor_C_control_joint_p_ps CActor$8$control_joint
#endif

// C++ _inCAAAAvvgD(std::string const &jointName) ==> CActor$_$expose_joint(CActor *param0, char const *param1)(CActor *, char const *)
extern NodePath * CActor$9$expose_joint(CActor *self, char const *jointName);

#if INDEX
#define CActor_C_expose_joint_p_ps CActor$9$expose_joint
#endif


// CachedTypedWritableReferenceCount

// C++ _inCAAAA3cWf() ==> CachedTypedWritableReferenceCount$_$get_cache_ref_count(CachedTypedWritableReferenceCount const *param0)(CachedTypedWritableReferenceCount const *)
extern int CachedTypedWritableReferenceCount$1$get_cache_ref_count(CachedTypedWritableReferenceCount const *self);

#if INDEX
#define CachedTypedWritableReferenceCount_C_get_cache_ref_count_i_p CachedTypedWritableReferenceCount$1$get_cache_ref_count
#endif

// C++ _inCAAAAEGtE() ==> CachedTypedWritableReferenceCount$_$cache_ref(CachedTypedWritableReferenceCount const *param0)(CachedTypedWritableReferenceCount const *)
extern void CachedTypedWritableReferenceCount$2$cache_ref(CachedTypedWritableReferenceCount const *self);

#if INDEX
#define CachedTypedWritableReferenceCount_C_cache_ref_v_p CachedTypedWritableReferenceCount$2$cache_ref
#endif

// C++ _inCAAAAC2Hz() ==> CachedTypedWritableReferenceCount$_$cache_unref(CachedTypedWritableReferenceCount const *param0)(CachedTypedWritableReferenceCount const *)
extern bool CachedTypedWritableReferenceCount$3$cache_unref(CachedTypedWritableReferenceCount const *self);

#if INDEX
#define CachedTypedWritableReferenceCount_C_cache_unref_B_p CachedTypedWritableReferenceCount$3$cache_unref
#endif

// C++ _inCAAAAbkjU() ==> CachedTypedWritableReferenceCount$_$test_ref_count_integrity(CachedTypedWritableReferenceCount const *param0)(CachedTypedWritableReferenceCount const *)
extern bool CachedTypedWritableReferenceCount$4$test_ref_count_integrity(CachedTypedWritableReferenceCount const *self);

#if INDEX
#define CachedTypedWritableReferenceCount_C_test_ref_count_integrity_B_p CachedTypedWritableReferenceCount$4$test_ref_count_integrity
#endif

// C++ _inCAAAAwJ6M() ==> CachedTypedWritableReferenceCount$_$cache_ref_only(CachedTypedWritableReferenceCount const *param0)(CachedTypedWritableReferenceCount const *)
extern void CachedTypedWritableReferenceCount$5$cache_ref_only(CachedTypedWritableReferenceCount const *self);

#if INDEX
#define CachedTypedWritableReferenceCount_C_cache_ref_only_v_p CachedTypedWritableReferenceCount$5$cache_ref_only
#endif

// C++ _inCAAAAXAeA() ==> CachedTypedWritableReferenceCount$_$get_class_type()()
extern int CachedTypedWritableReferenceCount$6$get_class_type(void);

#if INDEX
#define CachedTypedWritableReferenceCount_C_get_class_type_i_v CachedTypedWritableReferenceCount$6$get_class_type
#endif

// C++ _inCAAAA5wgP() ==> CachedTypedWritableReferenceCount$_$init_type()()
extern void CachedTypedWritableReferenceCount$7$init_type(void);

#if INDEX
#define CachedTypedWritableReferenceCount_C_init_type_v_v CachedTypedWritableReferenceCount$7$init_type
#endif


// Camera

// C++ _inCAAAAm2Nz(Camera const &copy) ==> Camera$_$Camera(Camera const *param0)(Camera const *)
extern Camera * Camera$1$Camera(Camera const *copy);

#if INDEX
#define Camera_C_ctor_p_p Camera$1$Camera
#endif

// C++ _inCAAAAkcU2(std::string const &name, Lens *lens) ==> Camera$_$Camera(char const *param0, Lens *param1)(char const *, Lens *)
extern Camera * Camera$2$Camera(char const *name, Lens *lens);

#if INDEX
#define Camera_C_ctor_p_sp Camera$2$Camera
#endif

// C++ _inCAAAAS_DP(std::string const &name) ==> Camera$_$Camera(char const *param0)(char const *)
extern Camera * Camera$3$Camera(char const *name);

#if INDEX
#define Camera_C_ctor_p_s Camera$3$Camera
#endif

// C++ _inCAAAAf7a8() ==> Camera$_$make_copy(Camera const *param0)(Camera const *)
extern PandaNode * Camera$4$make_copy(Camera const *self);

#if INDEX
#define Camera_C_make_copy_p_p Camera$4$make_copy
#endif

// C++ _inCAAAA2EYe() ==> Camera$_$safe_to_flatten(Camera const *param0)(Camera const *)
extern bool Camera$5$safe_to_flatten(Camera const *self);

#if INDEX
#define Camera_C_safe_to_flatten_B_p Camera$5$safe_to_flatten
#endif

// C++ _inCAAAA_uN5() ==> Camera$_$safe_to_transform(Camera const *param0)(Camera const *)
extern bool Camera$6$safe_to_transform(Camera const *self);

#if INDEX
#define Camera_C_safe_to_transform_B_p Camera$6$safe_to_transform
#endif

// C++ _inCAAAA3QAN(bool active) ==> Camera$_$set_active(Camera *param0, bool param1)(Camera *, bool)
extern void Camera$7$set_active(Camera *self, bool active);

#if INDEX
#define Camera_C_set_active_v_pB Camera$7$set_active
#endif

// C++ _inCAAAAQY9N() ==> Camera$_$is_active(Camera const *param0)(Camera const *)
extern bool Camera$8$is_active(Camera const *self);

#if INDEX
#define Camera_C_is_active_B_p Camera$8$is_active
#endif

// C++ _inCAAAA1aj6(NodePath const &scene) ==> Camera$_$set_scene(Camera *param0, NodePath const *param1)(Camera *, NodePath const *)
extern void Camera$9$set_scene(Camera *self, NodePath const *scene);

#if INDEX
#define Camera_C_set_scene_v_pp Camera$9$set_scene
#endif

// C++ _inCAAAA_CJc() ==> Camera$_$get_scene(Camera const *param0)(Camera const *)
extern NodePath const * Camera$10$get_scene(Camera const *self);

#if INDEX
#define Camera_C_get_scene_p_p Camera$10$get_scene
#endif

// C++ _inCAAAAfkXi() ==> Camera$_$get_num_display_regions(Camera const *param0)(Camera const *)
extern std$_size_t Camera$11$get_num_display_regions(Camera const *self);

#if INDEX
#define Camera_C_get_num_display_regions_l_p Camera$11$get_num_display_regions
#endif

// C++ _inCAAAANjis(std::size_t n) ==> Camera$_$get_display_region(Camera const *param0, std::size_t param1)(Camera const *, std::size_t)
extern DisplayRegion * Camera$12$get_display_region(Camera const *self, std$_size_t n);

#if INDEX
#define Camera_C_get_display_region_p_pl Camera$12$get_display_region
#endif

// C++ _inCAAAAh7fm(DrawMask mask) ==> Camera$_$set_camera_mask(Camera *param0, DrawMask *param1)(Camera *, DrawMask *)
extern void Camera$13$set_camera_mask(Camera *self, DrawMask *mask);

#if INDEX
#define Camera_C_set_camera_mask_v_pp Camera$13$set_camera_mask
#endif

// C++ _inCAAAAXHXi() ==> Camera$_$get_camera_mask(Camera const *param0)(Camera const *)
extern DrawMask * Camera$14$get_camera_mask(Camera const *self);

#if INDEX
#define Camera_C_get_camera_mask_p_p Camera$14$get_camera_mask
#endif

// C++ _inCAAAAdwtU(NodePath const &cull_center) ==> Camera$_$set_cull_center(Camera *param0, NodePath const *param1)(Camera *, NodePath const *)
extern void Camera$15$set_cull_center(Camera *self, NodePath const *cull_center);

#if INDEX
#define Camera_C_set_cull_center_v_pp Camera$15$set_cull_center
#endif

// C++ _inCAAAAYdSn() ==> Camera$_$get_cull_center(Camera const *param0)(Camera const *)
extern NodePath const * Camera$16$get_cull_center(Camera const *self);

#if INDEX
#define Camera_C_get_cull_center_p_p Camera$16$get_cull_center
#endif

// C++ _inCAAAACT5f(BoundingVolume *cull_bounds) ==> Camera$_$set_cull_bounds(Camera *param0, BoundingVolume *param1)(Camera *, BoundingVolume *)
extern void Camera$17$set_cull_bounds(Camera *self, BoundingVolume *cull_bounds);

#if INDEX
#define Camera_C_set_cull_bounds_v_pp Camera$17$set_cull_bounds
#endif

// C++ _inCAAAAXo9d() ==> Camera$_$get_cull_bounds(Camera const *param0)(Camera const *)
extern BoundingVolume * Camera$18$get_cull_bounds(Camera const *self);

#if INDEX
#define Camera_C_get_cull_bounds_p_p Camera$18$get_cull_bounds
#endif

// C++ _inCAAAAA5qa(NodePath const &lod_center) ==> Camera$_$set_lod_center(Camera *param0, NodePath const *param1)(Camera *, NodePath const *)
extern void Camera$19$set_lod_center(Camera *self, NodePath const *lod_center);

#if INDEX
#define Camera_C_set_lod_center_v_pp Camera$19$set_lod_center
#endif

// C++ _inCAAAAX15y() ==> Camera$_$get_lod_center(Camera const *param0)(Camera const *)
extern NodePath const * Camera$20$get_lod_center(Camera const *self);

#if INDEX
#define Camera_C_get_lod_center_p_p Camera$20$get_lod_center
#endif

// C++ _inCAAAARVZ2(RenderState const *state) ==> Camera$_$set_initial_state(Camera *param0, RenderState const *param1)(Camera *, RenderState const *)
extern void Camera$21$set_initial_state(Camera *self, RenderState const *state);

#if INDEX
#define Camera_C_set_initial_state_v_pp Camera$21$set_initial_state
#endif

// C++ _inCAAAAD4v3() ==> Camera$_$get_initial_state(Camera const *param0)(Camera const *)
extern char ** Camera$22$get_initial_state(Camera const *self);

#if INDEX
#define Camera_C_get_initial_state_p_p Camera$22$get_initial_state
#endif

// C++ _inCAAAArXcP(std::string const &tag_state_key) ==> Camera$_$set_tag_state_key(Camera *param0, char const *param1)(Camera *, char const *)
extern void Camera$23$set_tag_state_key(Camera *self, char const *tag_state_key);

#if INDEX
#define Camera_C_set_tag_state_key_v_ps Camera$23$set_tag_state_key
#endif

// C++ _inCAAAAoh3v() ==> Camera$_$get_tag_state_key(Camera const *param0)(Camera const *)
extern char const * Camera$24$get_tag_state_key(Camera const *self);

#if INDEX
#define Camera_C_get_tag_state_key_s_p Camera$24$get_tag_state_key
#endif

// C++ _inCAAAAF_51(PN_stdfloat value) ==> Camera$_$set_lod_scale(Camera *param0, PN_stdfloat param1)(Camera *, PN_stdfloat)
extern void Camera$25$set_lod_scale(Camera *self, PN_stdfloat value);

#if INDEX
#define Camera_C_set_lod_scale_v_pf Camera$25$set_lod_scale
#endif

// C++ _inCAAAAoccW() ==> Camera$_$get_lod_scale(Camera const *param0)(Camera const *)
extern PN_stdfloat Camera$26$get_lod_scale(Camera const *self);

#if INDEX
#define Camera_C_get_lod_scale_f_p Camera$26$get_lod_scale
#endif

// C++ _inCAAAAyKbS(std::string const &tag_state, RenderState const *state) ==> Camera$_$set_tag_state(Camera *param0, char const *param1, RenderState const *param2)(Camera *, char const *, RenderState const *)
extern void Camera$27$set_tag_state(Camera *self, char const *tag_state, RenderState const *state);

#if INDEX
#define Camera_C_set_tag_state_v_psp Camera$27$set_tag_state
#endif

// C++ _inCAAAA9VLq(std::string const &tag_state) ==> Camera$_$clear_tag_state(Camera *param0, char const *param1)(Camera *, char const *)
extern void Camera$28$clear_tag_state(Camera *self, char const *tag_state);

#if INDEX
#define Camera_C_clear_tag_state_v_ps Camera$28$clear_tag_state
#endif

// C++ _inCAAAAJLW_() ==> Camera$_$clear_tag_states(Camera *param0)(Camera *)
extern void Camera$29$clear_tag_states(Camera *self);

#if INDEX
#define Camera_C_clear_tag_states_v_p Camera$29$clear_tag_states
#endif

// C++ _inCAAAAoKxm(std::string const &tag_state) ==> Camera$_$has_tag_state(Camera const *param0, char const *param1)(Camera const *, char const *)
extern bool Camera$30$has_tag_state(Camera const *self, char const *tag_state);

#if INDEX
#define Camera_C_has_tag_state_B_ps Camera$30$has_tag_state
#endif

// C++ _inCAAAA8THl(std::string const &tag_state) ==> Camera$_$get_tag_state(Camera const *param0, char const *param1)(Camera const *, char const *)
extern char ** Camera$31$get_tag_state(Camera const *self, char const *tag_state);

#if INDEX
#define Camera_C_get_tag_state_p_ps Camera$31$get_tag_state
#endif

// C++ _inCAAAArz56(NodePath const &node_path, AuxSceneData *data) ==> Camera$_$set_aux_scene_data(Camera *param0, NodePath const *param1, AuxSceneData *param2)(Camera *, NodePath const *, AuxSceneData *)
extern void Camera$32$set_aux_scene_data(Camera *self, NodePath const *node_path, AuxSceneData *data);

#if INDEX
#define Camera_C_set_aux_scene_data_v_ppp Camera$32$set_aux_scene_data
#endif

// C++ _inCAAAAgEb_(NodePath const &node_path) ==> Camera$_$clear_aux_scene_data(Camera *param0, NodePath const *param1)(Camera *, NodePath const *)
extern bool Camera$33$clear_aux_scene_data(Camera *self, NodePath const *node_path);

#if INDEX
#define Camera_C_clear_aux_scene_data_B_pp Camera$33$clear_aux_scene_data
#endif

// C++ _inCAAAA9tPd(NodePath const &node_path) ==> Camera$_$get_aux_scene_data(Camera const *param0, NodePath const *param1)(Camera const *, NodePath const *)
extern AuxSceneData * Camera$34$get_aux_scene_data(Camera const *self, NodePath const *node_path);

#if INDEX
#define Camera_C_get_aux_scene_data_p_pp Camera$34$get_aux_scene_data
#endif

// C++ _inCAAAAkdvh(std::ostream &out) ==> Camera$_$list_aux_scene_data(Camera const *param0, std::ostream *param1)(Camera const *, std::ostream *)
extern void Camera$35$list_aux_scene_data(Camera const *self, std$_ostream *out);

#if INDEX
#define Camera_C_list_aux_scene_data_v_pp Camera$35$list_aux_scene_data
#endif

// C++ _inCAAAAUUgw(Thread *current_thread) ==> Camera$_$cleanup_aux_scene_data(Camera *param0, Thread *param1)(Camera *, Thread *)
extern int Camera$36$cleanup_aux_scene_data(Camera *self, Thread *current_thread);

#if INDEX
#define Camera_C_cleanup_aux_scene_data_i_pp Camera$36$cleanup_aux_scene_data
#endif

// C++ _inCAAAAARBt() ==> Camera$_$cleanup_aux_scene_data(Camera *param0)(Camera *)
extern int Camera$37$cleanup_aux_scene_data(Camera *self);

#if INDEX
#define Camera_C_cleanup_aux_scene_data_i_p Camera$37$cleanup_aux_scene_data
#endif

// C++ _inCAAAA7AQ3() ==> Camera$_$register_with_read_factory()()
extern void Camera$38$register_with_read_factory(void);

#if INDEX
#define Camera_C_register_with_read_factory_v_v Camera$38$register_with_read_factory
#endif

// C++ _inCAAAA1pBM(BamWriter *manager, Datagram &dg) ==> Camera$_$write_datagram(Camera *param0, BamWriter *param1, Datagram *param2)(Camera *, BamWriter *, Datagram *)
extern void Camera$39$write_datagram(Camera *self, BamWriter *manager, Datagram *dg);

#if INDEX
#define Camera_C_write_datagram_v_ppp Camera$39$write_datagram
#endif

// C++ _inCAAAA7jVC() ==> Camera$_$get_class_type()()
extern int Camera$40$get_class_type(void);

#if INDEX
#define Camera_C_get_class_type_i_v Camera$40$get_class_type
#endif

// C++ _inCAAAAAzIF() ==> Camera$_$init_type()()
extern void Camera$41$init_type(void);

#if INDEX
#define Camera_C_init_type_v_v Camera$41$init_type
#endif

// C++ _inCAAAAhX45() ==> Camera$_$get_type(Camera const *param0)(Camera const *)
extern int Camera$42$get_type(Camera const *self);

#if INDEX
#define Camera_C_get_type_i_p Camera$42$get_type
#endif

// C++ _inCAAAAz6kI() ==> Camera$_$force_init_type(Camera *param0)(Camera *)
extern int Camera$43$force_init_type(Camera *self);

#if INDEX
#define Camera_C_force_init_type_i_p Camera$43$force_init_type
#endif


// CollisionNode

// C++ _inCAAAAEGEr(std::string const &name) ==> CollisionNode$_$CollisionNode(char const *param0)(char const *)
extern CollisionNode * CollisionNode$1$CollisionNode(char const *name);

#if INDEX
#define CollisionNode_C_ctor_p_s CollisionNode$1$CollisionNode
#endif

// C++ _inCAAAAPyKo() ==> CollisionNode$_$preserve_name(CollisionNode const *param0)(CollisionNode const *)
extern bool CollisionNode$2$preserve_name(CollisionNode const *self);

#if INDEX
#define CollisionNode_C_preserve_name_B_p CollisionNode$2$preserve_name
#endif

// C++ _inCAAAAetF4(LMatrix4 const &mat) ==> CollisionNode$_$xform(CollisionNode *param0, LMatrix4 const *param1)(CollisionNode *, LMatrix4 const *)
extern void CollisionNode$3$xform(CollisionNode *self, LMatrix4 const *mat);

#if INDEX
#define CollisionNode_C_xform_v_pp CollisionNode$3$xform
#endif

// C++ _inCAAAAAfzF(CullTraverser *trav, CullTraverserData &data) ==> CollisionNode$_$cull_callback(CollisionNode *param0, CullTraverser *param1, CullTraverserData *param2)(CollisionNode *, CullTraverser *, CullTraverserData *)
extern bool CollisionNode$4$cull_callback(CollisionNode *self, CullTraverser *trav, CullTraverserData *data);

#if INDEX
#define CollisionNode_C_cull_callback_B_ppp CollisionNode$4$cull_callback
#endif

// C++ _inCAAAAoiiB() ==> CollisionNode$_$is_renderable(CollisionNode const *param0)(CollisionNode const *)
extern bool CollisionNode$5$is_renderable(CollisionNode const *self);

#if INDEX
#define CollisionNode_C_is_renderable_B_p CollisionNode$5$is_renderable
#endif

// C++ _inCAAAAxDxZ(CollideMask mask) ==> CollisionNode$_$set_collide_mask(CollisionNode *param0, CollideMask *param1)(CollisionNode *, CollideMask *)
extern void CollisionNode$6$set_collide_mask(CollisionNode *self, CollideMask *mask);

#if INDEX
#define CollisionNode_C_set_collide_mask_v_pp CollisionNode$6$set_collide_mask
#endif

// C++ _inCAAAARsJS(CollideMask mask) ==> CollisionNode$_$set_from_collide_mask(CollisionNode *param0, CollideMask *param1)(CollisionNode *, CollideMask *)
extern void CollisionNode$7$set_from_collide_mask(CollisionNode *self, CollideMask *mask);

#if INDEX
#define CollisionNode_C_set_from_collide_mask_v_pp CollisionNode$7$set_from_collide_mask
#endif

// C++ _inCAAAAX6oS(CollideMask mask) ==> CollisionNode$_$set_into_collide_mask(CollisionNode *param0, CollideMask *param1)(CollisionNode *, CollideMask *)
extern void CollisionNode$8$set_into_collide_mask(CollisionNode *self, CollideMask *mask);

#if INDEX
#define CollisionNode_C_set_into_collide_mask_v_pp CollisionNode$8$set_into_collide_mask
#endif

// C++ _inCAAAAY8vI() ==> CollisionNode$_$get_from_collide_mask(CollisionNode const *param0)(CollisionNode const *)
extern CollideMask * CollisionNode$9$get_from_collide_mask(CollisionNode const *self);

#if INDEX
#define CollisionNode_C_get_from_collide_mask_p_p CollisionNode$9$get_from_collide_mask
#endif

// C++ _inCAAAAx1PJ() ==> CollisionNode$_$get_into_collide_mask(CollisionNode const *param0)(CollisionNode const *)
extern CollideMask * CollisionNode$10$get_into_collide_mask(CollisionNode const *self);

#if INDEX
#define CollisionNode_C_get_into_collide_mask_p_p CollisionNode$10$get_into_collide_mask
#endif

// C++ _inCAAAA7zaG() ==> CollisionNode$_$clear_solids(CollisionNode *param0)(CollisionNode *)
extern void CollisionNode$11$clear_solids(CollisionNode *self);

#if INDEX
#define CollisionNode_C_clear_solids_v_p CollisionNode$11$clear_solids
#endif

// C++ _inCAAAAqYJk() ==> CollisionNode$_$get_num_solids(CollisionNode const *param0)(CollisionNode const *)
extern std$_size_t CollisionNode$12$get_num_solids(CollisionNode const *self);

#if INDEX
#define CollisionNode_C_get_num_solids_l_p CollisionNode$12$get_num_solids
#endif

// C++ _inCAAAAhrex(std::size_t n) ==> CollisionNode$_$get_solid(CollisionNode const *param0, std::size_t param1)(CollisionNode const *, std::size_t)
extern char ** CollisionNode$13$get_solid(CollisionNode const *self, std$_size_t n);

#if INDEX
#define CollisionNode_C_get_solid_p_pl CollisionNode$13$get_solid
#endif

// C++ _inCAAAAo2h0(std::size_t n) ==> CollisionNode$_$modify_solid(CollisionNode *param0, std::size_t param1)(CollisionNode *, std::size_t)
extern char ** CollisionNode$14$modify_solid(CollisionNode *self, std$_size_t n);

#if INDEX
#define CollisionNode_C_modify_solid_p_pl CollisionNode$14$modify_solid
#endif

// C++ _inCAAAAwY0Z(std::size_t n, CollisionSolid *solid) ==> CollisionNode$_$set_solid(CollisionNode *param0, std::size_t param1, CollisionSolid *param2)(CollisionNode *, std::size_t, CollisionSolid *)
extern void CollisionNode$15$set_solid(CollisionNode *self, std$_size_t n, CollisionSolid *solid);

#if INDEX
#define CollisionNode_C_set_solid_v_plp CollisionNode$15$set_solid
#endif

// C++ _inCAAAAQujp(std::size_t n, CollisionSolid const *solid) ==> CollisionNode$_$insert_solid(CollisionNode *param0, std::size_t param1, CollisionSolid const *param2)(CollisionNode *, std::size_t, CollisionSolid const *)
extern void CollisionNode$16$insert_solid(CollisionNode *self, std$_size_t n, CollisionSolid const *solid);

#if INDEX
#define CollisionNode_C_insert_solid_v_plp CollisionNode$16$insert_solid
#endif

// C++ _inCAAAACRfm(std::size_t n) ==> CollisionNode$_$remove_solid(CollisionNode *param0, std::size_t param1)(CollisionNode *, std::size_t)
extern void CollisionNode$17$remove_solid(CollisionNode *self, std$_size_t n);

#if INDEX
#define CollisionNode_C_remove_solid_v_pl CollisionNode$17$remove_solid
#endif

// C++ _inCAAAAQMTj(CollisionSolid const *solid) ==> CollisionNode$_$add_solid(CollisionNode *param0, CollisionSolid const *param1)(CollisionNode *, CollisionSolid const *)
extern std$_size_t CollisionNode$18$add_solid(CollisionNode *self, CollisionSolid const *solid);

#if INDEX
#define CollisionNode_C_add_solid_l_pp CollisionNode$18$add_solid
#endif

// C++ _inCAAAA72rF() ==> CollisionNode$_$get_collider_sort(CollisionNode const *param0)(CollisionNode const *)
extern int CollisionNode$19$get_collider_sort(CollisionNode const *self);

#if INDEX
#define CollisionNode_C_get_collider_sort_i_p CollisionNode$19$get_collider_sort
#endif

// C++ _inCAAAAzuN4(int sort) ==> CollisionNode$_$set_collider_sort(CollisionNode *param0, int param1)(CollisionNode *, int)
extern void CollisionNode$20$set_collider_sort(CollisionNode *self, int sort);

#if INDEX
#define CollisionNode_C_set_collider_sort_v_pi CollisionNode$20$set_collider_sort
#endif

// C++ _inCAAAAvD0G() ==> CollisionNode$_$get_default_collide_mask()()
extern CollideMask * CollisionNode$21$get_default_collide_mask(void);

#if INDEX
#define CollisionNode_C_get_default_collide_mask_p_v CollisionNode$21$get_default_collide_mask
#endif

// C++ _inCAAAAdFuZ() ==> CollisionNode$_$register_with_read_factory()()
extern void CollisionNode$22$register_with_read_factory(void);

#if INDEX
#define CollisionNode_C_register_with_read_factory_v_v CollisionNode$22$register_with_read_factory
#endif

// C++ _inCAAAA2eWn(BamWriter *manager, Datagram &dg) ==> CollisionNode$_$write_datagram(CollisionNode *param0, BamWriter *param1, Datagram *param2)(CollisionNode *, BamWriter *, Datagram *)
extern void CollisionNode$23$write_datagram(CollisionNode *self, BamWriter *manager, Datagram *dg);

#if INDEX
#define CollisionNode_C_write_datagram_v_ppp CollisionNode$23$write_datagram
#endif

// C++ _inCAAAAjzU3() ==> CollisionNode$_$get_class_type()()
extern int CollisionNode$24$get_class_type(void);

#if INDEX
#define CollisionNode_C_get_class_type_i_v CollisionNode$24$get_class_type
#endif

// C++ _inCAAAA77R0() ==> CollisionNode$_$init_type()()
extern void CollisionNode$25$init_type(void);

#if INDEX
#define CollisionNode_C_init_type_v_v CollisionNode$25$init_type
#endif

// C++ _inCAAAAqdZF() ==> CollisionNode$_$get_type(CollisionNode const *param0)(CollisionNode const *)
extern int CollisionNode$26$get_type(CollisionNode const *self);

#if INDEX
#define CollisionNode_C_get_type_i_p CollisionNode$26$get_type
#endif

// C++ _inCAAAAVZtv() ==> CollisionNode$_$force_init_type(CollisionNode *param0)(CollisionNode *)
extern int CollisionNode$27$force_init_type(CollisionNode *self);

#if INDEX
#define CollisionNode_C_force_init_type_i_p CollisionNode$27$force_init_type
#endif


// CollisionRay

// C++ _inCAAAAOnzJ() ==> CollisionRay$_$CollisionRay()()
extern CollisionRay * CollisionRay$1$CollisionRay(void);

#if INDEX
#define CollisionRay_C_ctor_p_v CollisionRay$1$CollisionRay
#endif

// C++ _inCAAAAvHG3(CollisionRay const &copy) ==> CollisionRay$_$CollisionRay(CollisionRay const *param0)(CollisionRay const *)
extern CollisionRay * CollisionRay$2$CollisionRay(CollisionRay const *copy);

#if INDEX
#define CollisionRay_C_ctor_p_p CollisionRay$2$CollisionRay
#endif

// C++ _inCAAAA3N_j(LPoint3 const &origin, LVector3 const &direction) ==> CollisionRay$_$CollisionRay(LPoint3 const *param0, LVector3 const *param1)(LPoint3 const *, LVector3 const *)
extern CollisionRay * CollisionRay$3$CollisionRay(LPoint3 const *origin, LVector3 const *direction);

#if INDEX
#define CollisionRay_C_ctor_p_pp CollisionRay$3$CollisionRay
#endif

// C++ _inCAAAANDS6(PN_stdfloat ox, PN_stdfloat oy, PN_stdfloat oz, PN_stdfloat dx, PN_stdfloat dy, PN_stdfloat dz) ==> CollisionRay$_$CollisionRay(PN_stdfloat param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5)(PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern CollisionRay * CollisionRay$4$CollisionRay(PN_stdfloat ox, PN_stdfloat oy, PN_stdfloat oz, PN_stdfloat dx, PN_stdfloat dy, PN_stdfloat dz);

#if INDEX
#define CollisionRay_C_ctor_p_ffffff CollisionRay$4$CollisionRay
#endif

// C++ _inCAAAAnA0X() ==> CollisionRay$_$make_copy(CollisionRay *param0)(CollisionRay *)
extern CollisionSolid * CollisionRay$5$make_copy(CollisionRay *self);

#if INDEX
#define CollisionRay_C_make_copy_p_p CollisionRay$5$make_copy
#endif

// C++ _inCAAAAFv9t(CollisionEntry const &entry) ==> CollisionRay$_$test_intersection(CollisionRay const *param0, CollisionEntry const *param1)(CollisionRay const *, CollisionEntry const *)
extern char ** CollisionRay$6$test_intersection(CollisionRay const *self, CollisionEntry const *entry);

#if INDEX
#define CollisionRay_C_test_intersection_p_pp CollisionRay$6$test_intersection
#endif

// C++ _inCAAAAAL47(LMatrix4 const &mat) ==> CollisionRay$_$xform(CollisionRay *param0, LMatrix4 const *param1)(CollisionRay *, LMatrix4 const *)
extern void CollisionRay$7$xform(CollisionRay *self, LMatrix4 const *mat);

#if INDEX
#define CollisionRay_C_xform_v_pp CollisionRay$7$xform
#endif

// C++ _inCAAAAkIr1(LPoint3 const &origin) ==> CollisionRay$_$set_origin(CollisionRay *param0, LPoint3 const *param1)(CollisionRay *, LPoint3 const *)
extern void CollisionRay$8$set_origin(CollisionRay *self, LPoint3 const *origin);

#if INDEX
#define CollisionRay_C_set_origin_v_pp CollisionRay$8$set_origin
#endif

// C++ _inCAAAAg_W6(PN_stdfloat x, PN_stdfloat y, PN_stdfloat z) ==> CollisionRay$_$set_origin(CollisionRay *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3)(CollisionRay *, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void CollisionRay$9$set_origin(CollisionRay *self, PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);

#if INDEX
#define CollisionRay_C_set_origin_v_pfff CollisionRay$9$set_origin
#endif

// C++ _inCAAAAo7AW() ==> CollisionRay$_$get_origin(CollisionRay const *param0)(CollisionRay const *)
extern LPoint3 const * CollisionRay$10$get_origin(CollisionRay const *self);

#if INDEX
#define CollisionRay_C_get_origin_p_p CollisionRay$10$get_origin
#endif

// C++ _inCAAAABT_R(LVector3 const &direction) ==> CollisionRay$_$set_direction(CollisionRay *param0, LVector3 const *param1)(CollisionRay *, LVector3 const *)
extern void CollisionRay$11$set_direction(CollisionRay *self, LVector3 const *direction);

#if INDEX
#define CollisionRay_C_set_direction_v_pp CollisionRay$11$set_direction
#endif

// C++ _inCAAAAGaxt(PN_stdfloat x, PN_stdfloat y, PN_stdfloat z) ==> CollisionRay$_$set_direction(CollisionRay *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3)(CollisionRay *, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void CollisionRay$12$set_direction(CollisionRay *self, PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);

#if INDEX
#define CollisionRay_C_set_direction_v_pfff CollisionRay$12$set_direction
#endif

// C++ _inCAAAAxcuk() ==> CollisionRay$_$get_direction(CollisionRay const *param0)(CollisionRay const *)
extern LVector3 const * CollisionRay$13$get_direction(CollisionRay const *self);

#if INDEX
#define CollisionRay_C_get_direction_p_p CollisionRay$13$get_direction
#endif

// C++ _inCAAAADbDp(LensNode *camera, LPoint2 const &point) ==> CollisionRay$_$set_from_lens(CollisionRay *param0, LensNode *param1, LPoint2 const *param2)(CollisionRay *, LensNode *, LPoint2 const *)
extern bool CollisionRay$14$set_from_lens(CollisionRay *self, LensNode *camera, LPoint2 const *point);

#if INDEX
#define CollisionRay_C_set_from_lens_B_ppp CollisionRay$14$set_from_lens
#endif

// C++ _inCAAAAy70E(LensNode *camera, PN_stdfloat px, PN_stdfloat py) ==> CollisionRay$_$set_from_lens(CollisionRay *param0, LensNode *param1, PN_stdfloat param2, PN_stdfloat param3)(CollisionRay *, LensNode *, PN_stdfloat, PN_stdfloat)
extern bool CollisionRay$15$set_from_lens(CollisionRay *self, LensNode *camera, PN_stdfloat px, PN_stdfloat py);

#if INDEX
#define CollisionRay_C_set_from_lens_B_ppff CollisionRay$15$set_from_lens
#endif

// C++ _inCAAAADB56() ==> CollisionRay$_$register_with_read_factory()()
extern void CollisionRay$16$register_with_read_factory(void);

#if INDEX
#define CollisionRay_C_register_with_read_factory_v_v CollisionRay$16$register_with_read_factory
#endif

// C++ _inCAAAAACSt(BamWriter *manager, Datagram &dg) ==> CollisionRay$_$write_datagram(CollisionRay *param0, BamWriter *param1, Datagram *param2)(CollisionRay *, BamWriter *, Datagram *)
extern void CollisionRay$17$write_datagram(CollisionRay *self, BamWriter *manager, Datagram *dg);

#if INDEX
#define CollisionRay_C_write_datagram_v_ppp CollisionRay$17$write_datagram
#endif

// C++ _inCAAAAVl1_() ==> CollisionRay$_$get_class_type()()
extern int CollisionRay$18$get_class_type(void);

#if INDEX
#define CollisionRay_C_get_class_type_i_v CollisionRay$18$get_class_type
#endif

// C++ _inCAAAA2yxx() ==> CollisionRay$_$init_type()()
extern void CollisionRay$19$init_type(void);

#if INDEX
#define CollisionRay_C_init_type_v_v CollisionRay$19$init_type
#endif

// C++ _inCAAAAaDRi() ==> CollisionRay$_$get_type(CollisionRay const *param0)(CollisionRay const *)
extern int CollisionRay$20$get_type(CollisionRay const *self);

#if INDEX
#define CollisionRay_C_get_type_i_p CollisionRay$20$get_type
#endif

// C++ _inCAAAAjlnN() ==> CollisionRay$_$force_init_type(CollisionRay *param0)(CollisionRay *)
extern int CollisionRay$21$force_init_type(CollisionRay *self);

#if INDEX
#define CollisionRay_C_force_init_type_i_p CollisionRay$21$force_init_type
#endif


// CollisionSolid

// C++ _inCAAAAFOak() ==> CollisionSolid$_$make_copy(CollisionSolid *param0)(CollisionSolid *)
extern CollisionSolid * CollisionSolid$1$make_copy(CollisionSolid *self);

#if INDEX
#define CollisionSolid_C_make_copy_p_p CollisionSolid$1$make_copy
#endif

// C++ _inCAAAAJNfv() ==> CollisionSolid$_$get_collision_origin(CollisionSolid const *param0)(CollisionSolid const *)
extern LPoint3 * CollisionSolid$2$get_collision_origin(CollisionSolid const *self);

#if INDEX
#define CollisionSolid_C_get_collision_origin_p_p CollisionSolid$2$get_collision_origin
#endif

// C++ _inCAAAAXfKF(bool tangible) ==> CollisionSolid$_$set_tangible(CollisionSolid *param0, bool param1)(CollisionSolid *, bool)
extern void CollisionSolid$3$set_tangible(CollisionSolid *self, bool tangible);

#if INDEX
#define CollisionSolid_C_set_tangible_v_pB CollisionSolid$3$set_tangible
#endif

// C++ _inCAAAAPJ9V() ==> CollisionSolid$_$is_tangible(CollisionSolid const *param0)(CollisionSolid const *)
extern bool CollisionSolid$4$is_tangible(CollisionSolid const *self);

#if INDEX
#define CollisionSolid_C_is_tangible_B_p CollisionSolid$4$is_tangible
#endif

// C++ _inCAAAAgRVK(LVector3 const &effective_normal) ==> CollisionSolid$_$set_effective_normal(CollisionSolid *param0, LVector3 const *param1)(CollisionSolid *, LVector3 const *)
extern void CollisionSolid$5$set_effective_normal(CollisionSolid *self, LVector3 const *effective_normal);

#if INDEX
#define CollisionSolid_C_set_effective_normal_v_pp CollisionSolid$5$set_effective_normal
#endif

// C++ _inCAAAAMg6D() ==> CollisionSolid$_$clear_effective_normal(CollisionSolid *param0)(CollisionSolid *)
extern void CollisionSolid$6$clear_effective_normal(CollisionSolid *self);

#if INDEX
#define CollisionSolid_C_clear_effective_normal_v_p CollisionSolid$6$clear_effective_normal
#endif

// C++ _inCAAAAUtHP() ==> CollisionSolid$_$has_effective_normal(CollisionSolid const *param0)(CollisionSolid const *)
extern bool CollisionSolid$7$has_effective_normal(CollisionSolid const *self);

#if INDEX
#define CollisionSolid_C_has_effective_normal_B_p CollisionSolid$7$has_effective_normal
#endif

// C++ _inCAAAA8DHC() ==> CollisionSolid$_$get_effective_normal(CollisionSolid const *param0)(CollisionSolid const *)
extern LVector3 const * CollisionSolid$8$get_effective_normal(CollisionSolid const *self);

#if INDEX
#define CollisionSolid_C_get_effective_normal_p_p CollisionSolid$8$get_effective_normal
#endif

// C++ _inCAAAABuoM(bool respect_effective_normal) ==> CollisionSolid$_$set_respect_effective_normal(CollisionSolid *param0, bool param1)(CollisionSolid *, bool)
extern void CollisionSolid$9$set_respect_effective_normal(CollisionSolid *self, bool respect_effective_normal);

#if INDEX
#define CollisionSolid_C_set_respect_effective_normal_v_pB CollisionSolid$9$set_respect_effective_normal
#endif

// C++ _inCAAAAGbQo() ==> CollisionSolid$_$get_respect_effective_normal(CollisionSolid const *param0)(CollisionSolid const *)
extern bool CollisionSolid$10$get_respect_effective_normal(CollisionSolid const *self);

#if INDEX
#define CollisionSolid_C_get_respect_effective_normal_B_p CollisionSolid$10$get_respect_effective_normal
#endif

// C++ _inCAAAAipKu() ==> CollisionSolid$_$get_bounds(CollisionSolid const *param0)(CollisionSolid const *)
extern char ** CollisionSolid$11$get_bounds(CollisionSolid const *self);

#if INDEX
#define CollisionSolid_C_get_bounds_p_p CollisionSolid$11$get_bounds
#endif

// C++ _inCAAAAEqPP(BoundingVolume const &bounding_volume) ==> CollisionSolid$_$set_bounds(CollisionSolid *param0, BoundingVolume const *param1)(CollisionSolid *, BoundingVolume const *)
extern void CollisionSolid$12$set_bounds(CollisionSolid *self, BoundingVolume const *bounding_volume);

#if INDEX
#define CollisionSolid_C_set_bounds_v_pp CollisionSolid$12$set_bounds
#endif

// C++ _inCAAAAC_iK(CollisionEntry const &entry) ==> CollisionSolid$_$test_intersection(CollisionSolid const *param0, CollisionEntry const *param1)(CollisionSolid const *, CollisionEntry const *)
extern char ** CollisionSolid$13$test_intersection(CollisionSolid const *self, CollisionEntry const *entry);

#if INDEX
#define CollisionSolid_C_test_intersection_p_pp CollisionSolid$13$test_intersection
#endif

// C++ _inCAAAA4Qql(LMatrix4 const &mat) ==> CollisionSolid$_$xform(CollisionSolid *param0, LMatrix4 const *param1)(CollisionSolid *, LMatrix4 const *)
extern void CollisionSolid$14$xform(CollisionSolid *self, LMatrix4 const *mat);

#if INDEX
#define CollisionSolid_C_xform_v_pp CollisionSolid$14$xform
#endif

// C++ _inCAAAANJD9(CullTraverser const *trav, CullTraverserData const &data, bool bounds_only) ==> CollisionSolid$_$get_viz(CollisionSolid const *param0, CullTraverser const *param1, CullTraverserData const *param2, bool param3)(CollisionSolid const *, CullTraverser const *, CullTraverserData const *, bool)
extern char ** CollisionSolid$15$get_viz(CollisionSolid const *self, CullTraverser const *trav, CullTraverserData const *data, bool bounds_only);

#if INDEX
#define CollisionSolid_C_get_viz_p_pppB CollisionSolid$15$get_viz
#endif

// C++ _inCAAAAH6wg() ==> CollisionSolid$_$get_volume_pcollector(CollisionSolid *param0)(CollisionSolid *)
extern PStatCollector * CollisionSolid$16$get_volume_pcollector(CollisionSolid *self);

#if INDEX
#define CollisionSolid_C_get_volume_pcollector_p_p CollisionSolid$16$get_volume_pcollector
#endif

// C++ _inCAAAAAqwd() ==> CollisionSolid$_$get_test_pcollector(CollisionSolid *param0)(CollisionSolid *)
extern PStatCollector * CollisionSolid$17$get_test_pcollector(CollisionSolid *self);

#if INDEX
#define CollisionSolid_C_get_test_pcollector_p_p CollisionSolid$17$get_test_pcollector
#endif

// C++ _inCAAAAL3OJ(std::ostream &out) ==> CollisionSolid$_$output(CollisionSolid const *param0, std::ostream *param1)(CollisionSolid const *, std::ostream *)
extern void CollisionSolid$18$output(CollisionSolid const *self, std$_ostream *out);

#if INDEX
#define CollisionSolid_C_output_v_pp CollisionSolid$18$output
#endif

// C++ _inCAAAA5fPY(std::ostream &out, int indent_level) ==> CollisionSolid$_$write(CollisionSolid const *param0, std::ostream *param1, int param2)(CollisionSolid const *, std::ostream *, int)
extern void CollisionSolid$19$write(CollisionSolid const *self, std$_ostream *out, int indent_level);

#if INDEX
#define CollisionSolid_C_write_v_ppi CollisionSolid$19$write
#endif

// C++ _inCAAAA01x9(std::ostream &out) ==> CollisionSolid$_$write(CollisionSolid const *param0, std::ostream *param1)(CollisionSolid const *, std::ostream *)
extern void CollisionSolid$20$write(CollisionSolid const *self, std$_ostream *out);

#if INDEX
#define CollisionSolid_C_write_v_pp CollisionSolid$20$write
#endif

// C++ _inCAAAA9CFS(BamWriter *manager, Datagram &me) ==> CollisionSolid$_$write_datagram(CollisionSolid *param0, BamWriter *param1, Datagram *param2)(CollisionSolid *, BamWriter *, Datagram *)
extern void CollisionSolid$21$write_datagram(CollisionSolid *self, BamWriter *manager, Datagram *me);

#if INDEX
#define CollisionSolid_C_write_datagram_v_ppp CollisionSolid$21$write_datagram
#endif

// C++ _inCAAAALN1N() ==> CollisionSolid$_$get_class_type()()
extern int CollisionSolid$22$get_class_type(void);

#if INDEX
#define CollisionSolid_C_get_class_type_i_v CollisionSolid$22$get_class_type
#endif

// C++ _inCAAAAEH3r() ==> CollisionSolid$_$init_type()()
extern void CollisionSolid$23$init_type(void);

#if INDEX
#define CollisionSolid_C_init_type_v_v CollisionSolid$23$init_type
#endif

// C++ _inCAAAAaFiP() ==> CollisionSolid$_$get_type(CollisionSolid const *param0)(CollisionSolid const *)
extern int CollisionSolid$24$get_type(CollisionSolid const *self);

#if INDEX
#define CollisionSolid_C_get_type_i_p CollisionSolid$24$get_type
#endif

// C++ _inCAAAAvsGa() ==> CollisionSolid$_$force_init_type(CollisionSolid *param0)(CollisionSolid *)
extern int CollisionSolid$25$force_init_type(CollisionSolid *self);

#if INDEX
#define CollisionSolid_C_force_init_type_i_p CollisionSolid$25$force_init_type
#endif


// CollisionTraverser

// C++ _inCAAAAtz1c(CollisionTraverser const &) ==> CollisionTraverser$_$CollisionTraverser(CollisionTraverser const *param0)(CollisionTraverser const *)
extern CollisionTraverser * CollisionTraverser$1$CollisionTraverser(CollisionTraverser const *arg0);

#if INDEX
#define CollisionTraverser_C_ctor_p_p CollisionTraverser$1$CollisionTraverser
#endif

// C++ _inCAAAAo3JT(std::string const &name) ==> CollisionTraverser$_$CollisionTraverser(char const *param0)(char const *)
extern CollisionTraverser * CollisionTraverser$2$CollisionTraverser(char const *name);

#if INDEX
#define CollisionTraverser_C_ctor_p_s CollisionTraverser$2$CollisionTraverser
#endif

// C++ _inCAAAALY8j() ==> CollisionTraverser$_$CollisionTraverser()()
extern CollisionTraverser * CollisionTraverser$3$CollisionTraverser(void);

#if INDEX
#define CollisionTraverser_C_ctor_p_v CollisionTraverser$3$CollisionTraverser
#endif

// C++ _inCAAAAdaty(bool flag) ==> CollisionTraverser$_$set_respect_prev_transform(CollisionTraverser *param0, bool param1)(CollisionTraverser *, bool)
extern void CollisionTraverser$4$set_respect_prev_transform(CollisionTraverser *self, bool flag);

#if INDEX
#define CollisionTraverser_C_set_respect_prev_transform_v_pB CollisionTraverser$4$set_respect_prev_transform
#endif

// C++ _inCAAAAlqsH() ==> CollisionTraverser$_$get_respect_prev_transform(CollisionTraverser const *param0)(CollisionTraverser const *)
extern bool CollisionTraverser$5$get_respect_prev_transform(CollisionTraverser const *self);

#if INDEX
#define CollisionTraverser_C_get_respect_prev_transform_B_p CollisionTraverser$5$get_respect_prev_transform
#endif

// C++ _inCAAAA2H3O(NodePath const &collider, CollisionHandler *handler) ==> CollisionTraverser$_$add_collider(CollisionTraverser *param0, NodePath const *param1, CollisionHandler *param2)(CollisionTraverser *, NodePath const *, CollisionHandler *)
extern void CollisionTraverser$6$add_collider(CollisionTraverser *self, NodePath const *collider, CollisionHandler *handler);

#if INDEX
#define CollisionTraverser_C_add_collider_v_ppp CollisionTraverser$6$add_collider
#endif

// C++ _inCAAAAM6MA(NodePath const &collider) ==> CollisionTraverser$_$remove_collider(CollisionTraverser *param0, NodePath const *param1)(CollisionTraverser *, NodePath const *)
extern bool CollisionTraverser$7$remove_collider(CollisionTraverser *self, NodePath const *collider);

#if INDEX
#define CollisionTraverser_C_remove_collider_B_pp CollisionTraverser$7$remove_collider
#endif

// C++ _inCAAAAWy10(NodePath const &collider) ==> CollisionTraverser$_$has_collider(CollisionTraverser const *param0, NodePath const *param1)(CollisionTraverser const *, NodePath const *)
extern bool CollisionTraverser$8$has_collider(CollisionTraverser const *self, NodePath const *collider);

#if INDEX
#define CollisionTraverser_C_has_collider_B_pp CollisionTraverser$8$has_collider
#endif

// C++ _inCAAAAO3k0() ==> CollisionTraverser$_$get_num_colliders(CollisionTraverser const *param0)(CollisionTraverser const *)
extern int CollisionTraverser$9$get_num_colliders(CollisionTraverser const *self);

#if INDEX
#define CollisionTraverser_C_get_num_colliders_i_p CollisionTraverser$9$get_num_colliders
#endif

// C++ _inCAAAA8iE2(int n) ==> CollisionTraverser$_$get_collider(CollisionTraverser const *param0, int param1)(CollisionTraverser const *, int)
extern NodePath * CollisionTraverser$10$get_collider(CollisionTraverser const *self, int n);

#if INDEX
#define CollisionTraverser_C_get_collider_p_pi CollisionTraverser$10$get_collider
#endif

// C++ _inCAAAAHSoX(NodePath const &collider) ==> CollisionTraverser$_$get_handler(CollisionTraverser const *param0, NodePath const *param1)(CollisionTraverser const *, NodePath const *)
extern CollisionHandler * CollisionTraverser$11$get_handler(CollisionTraverser const *self, NodePath const *collider);

#if INDEX
#define CollisionTraverser_C_get_handler_p_pp CollisionTraverser$11$get_handler
#endif

// C++ _inCAAAAz8jc() ==> CollisionTraverser$_$clear_colliders(CollisionTraverser *param0)(CollisionTraverser *)
extern void CollisionTraverser$12$clear_colliders(CollisionTraverser *self);

#if INDEX
#define CollisionTraverser_C_clear_colliders_v_p CollisionTraverser$12$clear_colliders
#endif

// C++ _inCAAAAIgJi(NodePath const &root) ==> CollisionTraverser$_$traverse(CollisionTraverser *param0, NodePath const *param1)(CollisionTraverser *, NodePath const *)
extern void CollisionTraverser$13$traverse(CollisionTraverser *self, NodePath const *root);

#if INDEX
#define CollisionTraverser_C_traverse_v_pp CollisionTraverser$13$traverse
#endif

// C++ _inCAAAAhkD3(CollisionRecorder *recorder) ==> CollisionTraverser$_$set_recorder(CollisionTraverser *param0, CollisionRecorder *param1)(CollisionTraverser *, CollisionRecorder *)
extern void CollisionTraverser$14$set_recorder(CollisionTraverser *self, CollisionRecorder *recorder);

#if INDEX
#define CollisionTraverser_C_set_recorder_v_pp CollisionTraverser$14$set_recorder
#endif

// C++ _inCAAAAkrr7() ==> CollisionTraverser$_$has_recorder(CollisionTraverser const *param0)(CollisionTraverser const *)
extern bool CollisionTraverser$15$has_recorder(CollisionTraverser const *self);

#if INDEX
#define CollisionTraverser_C_has_recorder_B_p CollisionTraverser$15$has_recorder
#endif

// C++ _inCAAAAuo3a() ==> CollisionTraverser$_$get_recorder(CollisionTraverser const *param0)(CollisionTraverser const *)
extern CollisionRecorder * CollisionTraverser$16$get_recorder(CollisionTraverser const *self);

#if INDEX
#define CollisionTraverser_C_get_recorder_p_p CollisionTraverser$16$get_recorder
#endif

// C++ _inCAAAAQmCi() ==> CollisionTraverser$_$clear_recorder(CollisionTraverser *param0)(CollisionTraverser *)
extern void CollisionTraverser$17$clear_recorder(CollisionTraverser *self);

#if INDEX
#define CollisionTraverser_C_clear_recorder_v_p CollisionTraverser$17$clear_recorder
#endif

// C++ _inCAAAAdHFN(NodePath const &root) ==> CollisionTraverser$_$show_collisions(CollisionTraverser *param0, NodePath const *param1)(CollisionTraverser *, NodePath const *)
extern PandaNode * CollisionTraverser$18$show_collisions(CollisionTraverser *self, NodePath const *root);

#if INDEX
#define CollisionTraverser_C_show_collisions_p_pp CollisionTraverser$18$show_collisions
#endif

// C++ _inCAAAAMk_a() ==> CollisionTraverser$_$hide_collisions(CollisionTraverser *param0)(CollisionTraverser *)
extern void CollisionTraverser$19$hide_collisions(CollisionTraverser *self);

#if INDEX
#define CollisionTraverser_C_hide_collisions_v_p CollisionTraverser$19$hide_collisions
#endif

// C++ _inCAAAAIeRC(std::ostream &out) ==> CollisionTraverser$_$output(CollisionTraverser const *param0, std::ostream *param1)(CollisionTraverser const *, std::ostream *)
extern void CollisionTraverser$20$output(CollisionTraverser const *self, std$_ostream *out);

#if INDEX
#define CollisionTraverser_C_output_v_pp CollisionTraverser$20$output
#endif

// C++ _inCAAAAknO3(std::ostream &out, int indent_level) ==> CollisionTraverser$_$write(CollisionTraverser const *param0, std::ostream *param1, int param2)(CollisionTraverser const *, std::ostream *, int)
extern void CollisionTraverser$21$write(CollisionTraverser const *self, std$_ostream *out, int indent_level);

#if INDEX
#define CollisionTraverser_C_write_v_ppi CollisionTraverser$21$write
#endif

// C++ _inCAAAAxNmK() ==> CollisionTraverser$_$get_class_type()()
extern int CollisionTraverser$22$get_class_type(void);

#if INDEX
#define CollisionTraverser_C_get_class_type_i_v CollisionTraverser$22$get_class_type
#endif

// C++ _inCAAAAycgE() ==> CollisionTraverser$_$init_type()()
extern void CollisionTraverser$23$init_type(void);

#if INDEX
#define CollisionTraverser_C_init_type_v_v CollisionTraverser$23$init_type
#endif


// ConfigPage

// C++ _inCAAAAPGVr() ==> ConfigPage$_$get_default_page()()
extern ConfigPage * ConfigPage$1$get_default_page(void);

#if INDEX
#define ConfigPage_C_get_default_page_p_v ConfigPage$1$get_default_page
#endif

// C++ _inCAAAAL7Gu() ==> ConfigPage$_$get_local_page()()
extern ConfigPage * ConfigPage$2$get_local_page(void);

#if INDEX
#define ConfigPage_C_get_local_page_p_v ConfigPage$2$get_local_page
#endif

// C++ _inCAAAAUNsX() ==> ConfigPage$_$get_name(ConfigPage const *param0)(ConfigPage const *)
extern char const * ConfigPage$3$get_name(ConfigPage const *self);

#if INDEX
#define ConfigPage_C_get_name_s_p ConfigPage$3$get_name
#endif

// C++ _inCAAAAJyhA() ==> ConfigPage$_$is_special(ConfigPage const *param0)(ConfigPage const *)
extern bool ConfigPage$4$is_special(ConfigPage const *self);

#if INDEX
#define ConfigPage_C_is_special_B_p ConfigPage$4$is_special
#endif

// C++ _inCAAAAeRrb() ==> ConfigPage$_$is_implicit(ConfigPage const *param0)(ConfigPage const *)
extern bool ConfigPage$5$is_implicit(ConfigPage const *self);

#if INDEX
#define ConfigPage_C_is_implicit_B_p ConfigPage$5$is_implicit
#endif

// C++ _inCAAAAwgBJ(int sort) ==> ConfigPage$_$set_sort(ConfigPage *param0, int param1)(ConfigPage *, int)
extern void ConfigPage$6$set_sort(ConfigPage *self, int sort);

#if INDEX
#define ConfigPage_C_set_sort_v_pi ConfigPage$6$set_sort
#endif

// C++ _inCAAAA4bV_() ==> ConfigPage$_$get_sort(ConfigPage const *param0)(ConfigPage const *)
extern int ConfigPage$7$get_sort(ConfigPage const *self);

#if INDEX
#define ConfigPage_C_get_sort_i_p ConfigPage$7$get_sort
#endif

// C++ _inCAAAAKe18() ==> ConfigPage$_$get_page_seq(ConfigPage const *param0)(ConfigPage const *)
extern int ConfigPage$8$get_page_seq(ConfigPage const *self);

#if INDEX
#define ConfigPage_C_get_page_seq_i_p ConfigPage$8$get_page_seq
#endif

// C++ _inCAAAAK7vW() ==> ConfigPage$_$get_trust_level(ConfigPage const *param0)(ConfigPage const *)
extern int ConfigPage$9$get_trust_level(ConfigPage const *self);

#if INDEX
#define ConfigPage_C_get_trust_level_i_p ConfigPage$9$get_trust_level
#endif

// C++ _inCAAAAQ6Y4(int trust_level) ==> ConfigPage$_$set_trust_level(ConfigPage *param0, int param1)(ConfigPage *, int)
extern void ConfigPage$10$set_trust_level(ConfigPage *self, int trust_level);

#if INDEX
#define ConfigPage_C_set_trust_level_v_pi ConfigPage$10$set_trust_level
#endif

// C++ _inCAAAAobQg() ==> ConfigPage$_$get_signature(ConfigPage const *param0)(ConfigPage const *)
extern char const * ConfigPage$11$get_signature(ConfigPage const *self);

#if INDEX
#define ConfigPage_C_get_signature_s_p ConfigPage$11$get_signature
#endif

// C++ _inCAAAAp8Hx() ==> ConfigPage$_$clear(ConfigPage *param0)(ConfigPage *)
extern void ConfigPage$12$clear(ConfigPage *self);

#if INDEX
#define ConfigPage_C_clear_v_p ConfigPage$12$clear
#endif

// C++ _inCAAAAhr02(std::istream &in) ==> ConfigPage$_$read_prc(ConfigPage *param0, std::istream *param1)(ConfigPage *, std::istream *)
extern bool ConfigPage$13$read_prc(ConfigPage *self, std$_istream *in);

#if INDEX
#define ConfigPage_C_read_prc_B_pp ConfigPage$13$read_prc
#endif

// C++ _inCAAAAK9a3(std::istream &in, std::string const &password) ==> ConfigPage$_$read_encrypted_prc(ConfigPage *param0, std::istream *param1, char const *param2)(ConfigPage *, std::istream *, char const *)
extern bool ConfigPage$14$read_encrypted_prc(ConfigPage *self, std$_istream *in, char const *password);

#if INDEX
#define ConfigPage_C_read_encrypted_prc_B_pps ConfigPage$14$read_encrypted_prc
#endif

// C++ _inCAAAAH_US(ConfigVariableCore *variable, std::string const &value) ==> ConfigPage$_$make_declaration(ConfigPage *param0, ConfigVariableCore *param1, char const *param2)(ConfigPage *, ConfigVariableCore *, char const *)
extern ConfigDeclaration * ConfigPage$15$make_declaration(ConfigPage *self, ConfigVariableCore *variable, char const *value);

#if INDEX
#define ConfigPage_C_make_declaration_p_pps ConfigPage$15$make_declaration
#endif

// C++ _inCAAAAGLJN(std::string const &variable, std::string const &value) ==> ConfigPage$_$make_declaration(ConfigPage *param0, char const *param1, char const *param2)(ConfigPage *, char const *, char const *)
extern ConfigDeclaration * ConfigPage$16$make_declaration(ConfigPage *self, char const *variable, char const *value);

#if INDEX
#define ConfigPage_C_make_declaration_p_pss ConfigPage$16$make_declaration
#endif

// C++ _inCAAAAUNQd(ConfigDeclaration *decl) ==> ConfigPage$_$delete_declaration(ConfigPage *param0, ConfigDeclaration *param1)(ConfigPage *, ConfigDeclaration *)
extern bool ConfigPage$17$delete_declaration(ConfigPage *self, ConfigDeclaration *decl);

#if INDEX
#define ConfigPage_C_delete_declaration_B_pp ConfigPage$17$delete_declaration
#endif

// C++ _inCAAAA4OlT() ==> ConfigPage$_$get_num_declarations(ConfigPage const *param0)(ConfigPage const *)
extern std$_size_t ConfigPage$18$get_num_declarations(ConfigPage const *self);

#if INDEX
#define ConfigPage_C_get_num_declarations_l_p ConfigPage$18$get_num_declarations
#endif

// C++ _inCAAAArbFa(std::size_t n) ==> ConfigPage$_$get_declaration(ConfigPage const *param0, std::size_t param1)(ConfigPage const *, std::size_t)
extern ConfigDeclaration const * ConfigPage$19$get_declaration(ConfigPage const *self, std$_size_t n);

#if INDEX
#define ConfigPage_C_get_declaration_p_pl ConfigPage$19$get_declaration
#endif

// C++ _inCAAAAHdB9(std::size_t n) ==> ConfigPage$_$modify_declaration(ConfigPage *param0, std::size_t param1)(ConfigPage *, std::size_t)
extern ConfigDeclaration * ConfigPage$20$modify_declaration(ConfigPage *self, std$_size_t n);

#if INDEX
#define ConfigPage_C_modify_declaration_p_pl ConfigPage$20$modify_declaration
#endif

// C++ _inCAAAAmuhF(std::size_t n) ==> ConfigPage$_$get_variable_name(ConfigPage const *param0, std::size_t param1)(ConfigPage const *, std::size_t)
extern char const * ConfigPage$21$get_variable_name(ConfigPage const *self, std$_size_t n);

#if INDEX
#define ConfigPage_C_get_variable_name_s_pl ConfigPage$21$get_variable_name
#endif

// C++ _inCAAAAiPgf(std::size_t n) ==> ConfigPage$_$get_string_value(ConfigPage const *param0, std::size_t param1)(ConfigPage const *, std::size_t)
extern char const * ConfigPage$22$get_string_value(ConfigPage const *self, std$_size_t n);

#if INDEX
#define ConfigPage_C_get_string_value_s_pl ConfigPage$22$get_string_value
#endif

// C++ _inCAAAA_22J(std::size_t n) ==> ConfigPage$_$is_variable_used(ConfigPage const *param0, std::size_t param1)(ConfigPage const *, std::size_t)
extern bool ConfigPage$23$is_variable_used(ConfigPage const *self, std$_size_t n);

#if INDEX
#define ConfigPage_C_is_variable_used_B_pl ConfigPage$23$is_variable_used
#endif

// C++ _inCAAAAVsqK(std::ostream &out) ==> ConfigPage$_$output(ConfigPage const *param0, std::ostream *param1)(ConfigPage const *, std::ostream *)
extern void ConfigPage$24$output(ConfigPage const *self, std$_ostream *out);

#if INDEX
#define ConfigPage_C_output_v_pp ConfigPage$24$output
#endif

// C++ _inCAAAANMSr(std::ostream &out) ==> ConfigPage$_$output_brief_signature(ConfigPage const *param0, std::ostream *param1)(ConfigPage const *, std::ostream *)
extern void ConfigPage$25$output_brief_signature(ConfigPage const *self, std$_ostream *out);

#if INDEX
#define ConfigPage_C_output_brief_signature_v_pp ConfigPage$25$output_brief_signature
#endif

// C++ _inCAAAA6sZT(std::ostream &out) ==> ConfigPage$_$write(ConfigPage const *param0, std::ostream *param1)(ConfigPage const *, std::ostream *)
extern void ConfigPage$26$write(ConfigPage const *self, std$_ostream *out);

#if INDEX
#define ConfigPage_C_write_v_pp ConfigPage$26$write
#endif


// CopyOnWriteObject

// C++ _inCAAAA7MTJ() ==> CopyOnWriteObject$_$downcast_to_Geom(CopyOnWriteObject *param0)(CopyOnWriteObject *)
extern Geom * CopyOnWriteObject$1$downcast_to_Geom(CopyOnWriteObject *self);

#if INDEX
#define CopyOnWriteObject_C_downcast_to_Geom_p_p CopyOnWriteObject$1$downcast_to_Geom
#endif

// C++ _inCAAAAdtth() ==> CopyOnWriteObject$_$downcast_to_GeomPrimitive(CopyOnWriteObject *param0)(CopyOnWriteObject *)
extern GeomPrimitive * CopyOnWriteObject$2$downcast_to_GeomPrimitive(CopyOnWriteObject *self);

#if INDEX
#define CopyOnWriteObject_C_downcast_to_GeomPrimitive_p_p CopyOnWriteObject$2$downcast_to_GeomPrimitive
#endif

// C++ _inCAAAAHqaf() ==> CopyOnWriteObject$_$downcast_to_GeomVertexArrayData(CopyOnWriteObject *param0)(CopyOnWriteObject *)
extern GeomVertexArrayData * CopyOnWriteObject$3$downcast_to_GeomVertexArrayData(CopyOnWriteObject *self);

#if INDEX
#define CopyOnWriteObject_C_downcast_to_GeomVertexArrayData_p_p CopyOnWriteObject$3$downcast_to_GeomVertexArrayData
#endif

// C++ _inCAAAAT3AG() ==> CopyOnWriteObject$_$downcast_to_GeomVertexData(CopyOnWriteObject *param0)(CopyOnWriteObject *)
extern GeomVertexData * CopyOnWriteObject$4$downcast_to_GeomVertexData(CopyOnWriteObject *self);

#if INDEX
#define CopyOnWriteObject_C_downcast_to_GeomVertexData_p_p CopyOnWriteObject$4$downcast_to_GeomVertexData
#endif


// DisplayRegion

// C++ _inCAAAAS8DN() ==> DisplayRegion$_$upcast_to_TypedReferenceCount(DisplayRegion *param0)(DisplayRegion *)
extern TypedReferenceCount * DisplayRegion$1$upcast_to_TypedReferenceCount(DisplayRegion *self);

#if INDEX
#define DisplayRegion_C_upcast_to_TypedReferenceCount_p_p DisplayRegion$1$upcast_to_TypedReferenceCount
#endif

// C++ _inCAAAAlwzo() ==> DisplayRegion$_$upcast_to_DrawableRegion(DisplayRegion *param0)(DisplayRegion *)
extern DrawableRegion * DisplayRegion$2$upcast_to_DrawableRegion(DisplayRegion *self);

#if INDEX
#define DisplayRegion_C_upcast_to_DrawableRegion_p_p DisplayRegion$2$upcast_to_DrawableRegion
#endif

// C++ _inCAAAAxLef() ==> DisplayRegion$_$cleanup(DisplayRegion *param0)(DisplayRegion *)
extern void DisplayRegion$3$cleanup(DisplayRegion *self);

#if INDEX
#define DisplayRegion_C_cleanup_v_p DisplayRegion$3$cleanup
#endif

// C++ _inCAAAAZzns() ==> DisplayRegion$_$get_num_regions(DisplayRegion const *param0)(DisplayRegion const *)
extern int DisplayRegion$4$get_num_regions(DisplayRegion const *self);

#if INDEX
#define DisplayRegion_C_get_num_regions_i_p DisplayRegion$4$get_num_regions
#endif

// C++ _inCAAAALWD0(int i) ==> DisplayRegion$_$set_num_regions(DisplayRegion *param0, int param1)(DisplayRegion *, int)
extern void DisplayRegion$5$set_num_regions(DisplayRegion *self, int i);

#if INDEX
#define DisplayRegion_C_set_num_regions_v_pi DisplayRegion$5$set_num_regions
#endif

// C++ _inCAAAA3AS_(int i) ==> DisplayRegion$_$get_dimensions(DisplayRegion const *param0, int param1)(DisplayRegion const *, int)
extern LVecBase4 * DisplayRegion$6$get_dimensions(DisplayRegion const *self, int i);

#if INDEX
#define DisplayRegion_C_get_dimensions_p_pi DisplayRegion$6$get_dimensions
#endif

// C++ _inCAAAAVdpt() ==> DisplayRegion$_$get_dimensions(DisplayRegion const *param0)(DisplayRegion const *)
extern LVecBase4 * DisplayRegion$7$get_dimensions(DisplayRegion const *self);

#if INDEX
#define DisplayRegion_C_get_dimensions_p_p DisplayRegion$7$get_dimensions
#endif

// C++ _inCAAAAKJ5y(int i) ==> DisplayRegion$_$get_left(DisplayRegion const *param0, int param1)(DisplayRegion const *, int)
extern PN_stdfloat DisplayRegion$8$get_left(DisplayRegion const *self, int i);

#if INDEX
#define DisplayRegion_C_get_left_f_pi DisplayRegion$8$get_left
#endif

// C++ _inCAAAA8EnQ() ==> DisplayRegion$_$get_left(DisplayRegion const *param0)(DisplayRegion const *)
extern PN_stdfloat DisplayRegion$9$get_left(DisplayRegion const *self);

#if INDEX
#define DisplayRegion_C_get_left_f_p DisplayRegion$9$get_left
#endif

// C++ _inCAAAAKI2S(int i) ==> DisplayRegion$_$get_right(DisplayRegion const *param0, int param1)(DisplayRegion const *, int)
extern PN_stdfloat DisplayRegion$10$get_right(DisplayRegion const *self, int i);

#if INDEX
#define DisplayRegion_C_get_right_f_pi DisplayRegion$10$get_right
#endif

// C++ _inCAAAA85BK() ==> DisplayRegion$_$get_right(DisplayRegion const *param0)(DisplayRegion const *)
extern PN_stdfloat DisplayRegion$11$get_right(DisplayRegion const *self);

#if INDEX
#define DisplayRegion_C_get_right_f_p DisplayRegion$11$get_right
#endif

// C++ _inCAAAAvsR4(int i) ==> DisplayRegion$_$get_bottom(DisplayRegion const *param0, int param1)(DisplayRegion const *, int)
extern PN_stdfloat DisplayRegion$12$get_bottom(DisplayRegion const *self, int i);

#if INDEX
#define DisplayRegion_C_get_bottom_f_pi DisplayRegion$12$get_bottom
#endif

// C++ _inCAAAACJld() ==> DisplayRegion$_$get_bottom(DisplayRegion const *param0)(DisplayRegion const *)
extern PN_stdfloat DisplayRegion$13$get_bottom(DisplayRegion const *self);

#if INDEX
#define DisplayRegion_C_get_bottom_f_p DisplayRegion$13$get_bottom
#endif

// C++ _inCAAAA7G3P(int i) ==> DisplayRegion$_$get_top(DisplayRegion const *param0, int param1)(DisplayRegion const *, int)
extern PN_stdfloat DisplayRegion$14$get_top(DisplayRegion const *self, int i);

#if INDEX
#define DisplayRegion_C_get_top_f_pi DisplayRegion$14$get_top
#endif

// C++ _inCAAAApTxi() ==> DisplayRegion$_$get_top(DisplayRegion const *param0)(DisplayRegion const *)
extern PN_stdfloat DisplayRegion$15$get_top(DisplayRegion const *self);

#if INDEX
#define DisplayRegion_C_get_top_f_p DisplayRegion$15$get_top
#endif

// C++ _inCAAAAdwOl(LVecBase4 const &dimensions) ==> DisplayRegion$_$set_dimensions(DisplayRegion *param0, LVecBase4 const *param1)(DisplayRegion *, LVecBase4 const *)
extern void DisplayRegion$16$set_dimensions(DisplayRegion *self, LVecBase4 const *dimensions);

#if INDEX
#define DisplayRegion_C_set_dimensions_v_pp DisplayRegion$16$set_dimensions
#endif

// C++ _inCAAAAu59a(PN_stdfloat l, PN_stdfloat r, PN_stdfloat b, PN_stdfloat t) ==> DisplayRegion$_$set_dimensions(DisplayRegion *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4)(DisplayRegion *, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void DisplayRegion$17$set_dimensions(DisplayRegion *self, PN_stdfloat l, PN_stdfloat r, PN_stdfloat b, PN_stdfloat t);

#if INDEX
#define DisplayRegion_C_set_dimensions_v_pffff DisplayRegion$17$set_dimensions
#endif

// C++ _inCAAAAvKw_(int i, LVecBase4 const &dimensions) ==> DisplayRegion$_$set_dimensions(DisplayRegion *param0, int param1, LVecBase4 const *param2)(DisplayRegion *, int, LVecBase4 const *)
extern void DisplayRegion$18$set_dimensions(DisplayRegion *self, int i, LVecBase4 const *dimensions);

#if INDEX
#define DisplayRegion_C_set_dimensions_v_pip DisplayRegion$18$set_dimensions
#endif

// C++ _inCAAAAOuar(int i, PN_stdfloat l, PN_stdfloat r, PN_stdfloat b, PN_stdfloat t) ==> DisplayRegion$_$set_dimensions(DisplayRegion *param0, int param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5)(DisplayRegion *, int, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void DisplayRegion$19$set_dimensions(DisplayRegion *self, int i, PN_stdfloat l, PN_stdfloat r, PN_stdfloat b, PN_stdfloat t);

#if INDEX
#define DisplayRegion_C_set_dimensions_v_piffff DisplayRegion$19$set_dimensions
#endif

// C++ _inCAAAAKjj6() ==> DisplayRegion$_$get_window(DisplayRegion const *param0)(DisplayRegion const *)
extern GraphicsOutput * DisplayRegion$20$get_window(DisplayRegion const *self);

#if INDEX
#define DisplayRegion_C_get_window_p_p DisplayRegion$20$get_window
#endif

// C++ _inCAAAA668k() ==> DisplayRegion$_$get_pipe(DisplayRegion const *param0)(DisplayRegion const *)
extern GraphicsPipe * DisplayRegion$21$get_pipe(DisplayRegion const *self);

#if INDEX
#define DisplayRegion_C_get_pipe_p_p DisplayRegion$21$get_pipe
#endif

// C++ _inCAAAAHd9E() ==> DisplayRegion$_$is_stereo(DisplayRegion const *param0)(DisplayRegion const *)
extern bool DisplayRegion$22$is_stereo(DisplayRegion const *self);

#if INDEX
#define DisplayRegion_C_is_stereo_B_p DisplayRegion$22$is_stereo
#endif

// C++ _inCAAAAsRD1(NodePath const &camera) ==> DisplayRegion$_$set_camera(DisplayRegion *param0, NodePath const *param1)(DisplayRegion *, NodePath const *)
extern void DisplayRegion$23$set_camera(DisplayRegion *self, NodePath const *camera);

#if INDEX
#define DisplayRegion_C_set_camera_v_pp DisplayRegion$23$set_camera
#endif

// C++ _inCAAAAQE0w(Thread *current_thread) ==> DisplayRegion$_$get_camera(DisplayRegion const *param0, Thread *param1)(DisplayRegion const *, Thread *)
extern NodePath * DisplayRegion$24$get_camera(DisplayRegion const *self, Thread *current_thread);

#if INDEX
#define DisplayRegion_C_get_camera_p_pp DisplayRegion$24$get_camera
#endif

// C++ _inCAAAAM2LQ() ==> DisplayRegion$_$get_camera(DisplayRegion const *param0)(DisplayRegion const *)
extern NodePath * DisplayRegion$25$get_camera(DisplayRegion const *self);

#if INDEX
#define DisplayRegion_C_get_camera_p_p DisplayRegion$25$get_camera
#endif

// C++ _inCAAAAPMVE(bool active) ==> DisplayRegion$_$set_active(DisplayRegion *param0, bool param1)(DisplayRegion *, bool)
extern void DisplayRegion$26$set_active(DisplayRegion *self, bool active);

#if INDEX
#define DisplayRegion_C_set_active_v_pB DisplayRegion$26$set_active
#endif

// C++ _inCAAAApe7G() ==> DisplayRegion$_$is_active(DisplayRegion const *param0)(DisplayRegion const *)
extern bool DisplayRegion$27$is_active(DisplayRegion const *self);

#if INDEX
#define DisplayRegion_C_is_active_B_p DisplayRegion$27$is_active
#endif

// C++ _inCAAAAJhLw(int sort) ==> DisplayRegion$_$set_sort(DisplayRegion *param0, int param1)(DisplayRegion *, int)
extern void DisplayRegion$28$set_sort(DisplayRegion *self, int sort);

#if INDEX
#define DisplayRegion_C_set_sort_v_pi DisplayRegion$28$set_sort
#endif

// C++ _inCAAAAkJ4o() ==> DisplayRegion$_$get_sort(DisplayRegion const *param0)(DisplayRegion const *)
extern int DisplayRegion$29$get_sort(DisplayRegion const *self);

#if INDEX
#define DisplayRegion_C_get_sort_i_p DisplayRegion$29$get_sort
#endif

// C++ _inCAAAAwg4T(Lens::StereoChannel stereo_channel) ==> DisplayRegion$_$set_stereo_channel(DisplayRegion *param0, Lens::StereoChannel param1)(DisplayRegion *, Lens::StereoChannel)
extern void DisplayRegion$30$set_stereo_channel(DisplayRegion *self, Lens$_StereoChannel stereo_channel);

#if INDEX
#define DisplayRegion_C_set_stereo_channel_v_pp DisplayRegion$30$set_stereo_channel
#endif

// C++ _inCAAAAGBUH() ==> DisplayRegion$_$get_stereo_channel(DisplayRegion const *param0)(DisplayRegion const *)
extern Lens$_StereoChannel DisplayRegion$31$get_stereo_channel(DisplayRegion const *self);

#if INDEX
#define DisplayRegion_C_get_stereo_channel_p_p DisplayRegion$31$get_stereo_channel
#endif

// C++ _inCAAAAotSp(int tex_view_offset) ==> DisplayRegion$_$set_tex_view_offset(DisplayRegion *param0, int param1)(DisplayRegion *, int)
extern void DisplayRegion$32$set_tex_view_offset(DisplayRegion *self, int tex_view_offset);

#if INDEX
#define DisplayRegion_C_set_tex_view_offset_v_pi DisplayRegion$32$set_tex_view_offset
#endif

// C++ _inCAAAAYFGv() ==> DisplayRegion$_$get_tex_view_offset(DisplayRegion const *param0)(DisplayRegion const *)
extern int DisplayRegion$33$get_tex_view_offset(DisplayRegion const *self);

#if INDEX
#define DisplayRegion_C_get_tex_view_offset_i_p DisplayRegion$33$get_tex_view_offset
#endif

// C++ _inCAAAADC63(bool incomplete_render) ==> DisplayRegion$_$set_incomplete_render(DisplayRegion *param0, bool param1)(DisplayRegion *, bool)
extern void DisplayRegion$34$set_incomplete_render(DisplayRegion *self, bool incomplete_render);

#if INDEX
#define DisplayRegion_C_set_incomplete_render_v_pB DisplayRegion$34$set_incomplete_render
#endif

// C++ _inCAAAA6SQs() ==> DisplayRegion$_$get_incomplete_render(DisplayRegion const *param0)(DisplayRegion const *)
extern bool DisplayRegion$35$get_incomplete_render(DisplayRegion const *self);

#if INDEX
#define DisplayRegion_C_get_incomplete_render_B_p DisplayRegion$35$get_incomplete_render
#endif

// C++ _inCAAAA7uok(int texture_reload_priority) ==> DisplayRegion$_$set_texture_reload_priority(DisplayRegion *param0, int param1)(DisplayRegion *, int)
extern void DisplayRegion$36$set_texture_reload_priority(DisplayRegion *self, int texture_reload_priority);

#if INDEX
#define DisplayRegion_C_set_texture_reload_priority_v_pi DisplayRegion$36$set_texture_reload_priority
#endif

// C++ _inCAAAApMFg() ==> DisplayRegion$_$get_texture_reload_priority(DisplayRegion const *param0)(DisplayRegion const *)
extern int DisplayRegion$37$get_texture_reload_priority(DisplayRegion const *self);

#if INDEX
#define DisplayRegion_C_get_texture_reload_priority_i_p DisplayRegion$37$get_texture_reload_priority
#endif

// C++ _inCAAAAt3kY(int index) ==> DisplayRegion$_$set_lens_index(DisplayRegion *param0, int param1)(DisplayRegion *, int)
extern void DisplayRegion$38$set_lens_index(DisplayRegion *self, int index);

#if INDEX
#define DisplayRegion_C_set_lens_index_v_pi DisplayRegion$38$set_lens_index
#endif

// C++ _inCAAAAHvi6() ==> DisplayRegion$_$get_lens_index(DisplayRegion const *param0)(DisplayRegion const *)
extern int DisplayRegion$39$get_lens_index(DisplayRegion const *self);

#if INDEX
#define DisplayRegion_C_get_lens_index_i_p DisplayRegion$39$get_lens_index
#endif

// C++ _inCAAAAuCaA(CullTraverser *trav) ==> DisplayRegion$_$set_cull_traverser(DisplayRegion *param0, CullTraverser *param1)(DisplayRegion *, CullTraverser *)
extern void DisplayRegion$40$set_cull_traverser(DisplayRegion *self, CullTraverser *trav);

#if INDEX
#define DisplayRegion_C_set_cull_traverser_v_pp DisplayRegion$40$set_cull_traverser
#endif

// C++ _inCAAAAmlBH() ==> DisplayRegion$_$get_cull_traverser(DisplayRegion *param0)(DisplayRegion *)
extern CullTraverser * DisplayRegion$41$get_cull_traverser(DisplayRegion *self);

#if INDEX
#define DisplayRegion_C_get_cull_traverser_p_p DisplayRegion$41$get_cull_traverser
#endif

// C++ _inCAAAAVFCA(int cube_map_index) ==> DisplayRegion$_$set_cube_map_index(DisplayRegion *param0, int param1)(DisplayRegion *, int)
extern void DisplayRegion$42$set_cube_map_index(DisplayRegion *self, int cube_map_index);

#if INDEX
#define DisplayRegion_C_set_cube_map_index_v_pi DisplayRegion$42$set_cube_map_index
#endif

// C++ _inCAAAA_ppu(int page) ==> DisplayRegion$_$set_target_tex_page(DisplayRegion *param0, int param1)(DisplayRegion *, int)
extern void DisplayRegion$43$set_target_tex_page(DisplayRegion *self, int page);

#if INDEX
#define DisplayRegion_C_set_target_tex_page_v_pi DisplayRegion$43$set_target_tex_page
#endif

// C++ _inCAAAANBc0() ==> DisplayRegion$_$get_target_tex_page(DisplayRegion const *param0)(DisplayRegion const *)
extern int DisplayRegion$44$get_target_tex_page(DisplayRegion const *self);

#if INDEX
#define DisplayRegion_C_get_target_tex_page_i_p DisplayRegion$44$get_target_tex_page
#endif

// C++ _inCAAAAN2Nd(bool scissor_enabled) ==> DisplayRegion$_$set_scissor_enabled(DisplayRegion *param0, bool param1)(DisplayRegion *, bool)
extern void DisplayRegion$45$set_scissor_enabled(DisplayRegion *self, bool scissor_enabled);

#if INDEX
#define DisplayRegion_C_set_scissor_enabled_v_pB DisplayRegion$45$set_scissor_enabled
#endif

// C++ _inCAAAAih6g() ==> DisplayRegion$_$get_scissor_enabled(DisplayRegion const *param0)(DisplayRegion const *)
extern bool DisplayRegion$46$get_scissor_enabled(DisplayRegion const *self);

#if INDEX
#define DisplayRegion_C_get_scissor_enabled_B_p DisplayRegion$46$get_scissor_enabled
#endif

// C++ _inCAAAAZe2r(CallbackObject *object) ==> DisplayRegion$_$set_cull_callback(DisplayRegion *param0, CallbackObject *param1)(DisplayRegion *, CallbackObject *)
extern void DisplayRegion$47$set_cull_callback(DisplayRegion *self, CallbackObject *object);

#if INDEX
#define DisplayRegion_C_set_cull_callback_v_pp DisplayRegion$47$set_cull_callback
#endif

// C++ _inCAAAAlceA() ==> DisplayRegion$_$clear_cull_callback(DisplayRegion *param0)(DisplayRegion *)
extern void DisplayRegion$48$clear_cull_callback(DisplayRegion *self);

#if INDEX
#define DisplayRegion_C_clear_cull_callback_v_p DisplayRegion$48$clear_cull_callback
#endif

// C++ _inCAAAAIcXV() ==> DisplayRegion$_$get_cull_callback(DisplayRegion const *param0)(DisplayRegion const *)
extern CallbackObject * DisplayRegion$49$get_cull_callback(DisplayRegion const *self);

#if INDEX
#define DisplayRegion_C_get_cull_callback_p_p DisplayRegion$49$get_cull_callback
#endif

// C++ _inCAAAA12YM(CallbackObject *object) ==> DisplayRegion$_$set_draw_callback(DisplayRegion *param0, CallbackObject *param1)(DisplayRegion *, CallbackObject *)
extern void DisplayRegion$50$set_draw_callback(DisplayRegion *self, CallbackObject *object);

#if INDEX
#define DisplayRegion_C_set_draw_callback_v_pp DisplayRegion$50$set_draw_callback
#endif

// C++ _inCAAAAmEIH() ==> DisplayRegion$_$clear_draw_callback(DisplayRegion *param0)(DisplayRegion *)
extern void DisplayRegion$51$clear_draw_callback(DisplayRegion *self);

#if INDEX
#define DisplayRegion_C_clear_draw_callback_v_p DisplayRegion$51$clear_draw_callback
#endif

// C++ _inCAAAATl41() ==> DisplayRegion$_$get_draw_callback(DisplayRegion const *param0)(DisplayRegion const *)
extern CallbackObject * DisplayRegion$52$get_draw_callback(DisplayRegion const *self);

#if INDEX
#define DisplayRegion_C_get_draw_callback_p_p DisplayRegion$52$get_draw_callback
#endif

// C++ _inCAAAA_lBg(int i) ==> DisplayRegion$_$get_pixel_width(DisplayRegion const *param0, int param1)(DisplayRegion const *, int)
extern int DisplayRegion$53$get_pixel_width(DisplayRegion const *self, int i);

#if INDEX
#define DisplayRegion_C_get_pixel_width_i_pi DisplayRegion$53$get_pixel_width
#endif

// C++ _inCAAAA9Qnq() ==> DisplayRegion$_$get_pixel_width(DisplayRegion const *param0)(DisplayRegion const *)
extern int DisplayRegion$54$get_pixel_width(DisplayRegion const *self);

#if INDEX
#define DisplayRegion_C_get_pixel_width_i_p DisplayRegion$54$get_pixel_width
#endif

// C++ _inCAAAAkzp_(int i) ==> DisplayRegion$_$get_pixel_height(DisplayRegion const *param0, int param1)(DisplayRegion const *, int)
extern int DisplayRegion$55$get_pixel_height(DisplayRegion const *self, int i);

#if INDEX
#define DisplayRegion_C_get_pixel_height_i_pi DisplayRegion$55$get_pixel_height
#endif

// C++ _inCAAAAKQDR() ==> DisplayRegion$_$get_pixel_height(DisplayRegion const *param0)(DisplayRegion const *)
extern int DisplayRegion$56$get_pixel_height(DisplayRegion const *self);

#if INDEX
#define DisplayRegion_C_get_pixel_height_i_p DisplayRegion$56$get_pixel_height
#endif

// C++ _inCAAAAFi2h(int i) ==> DisplayRegion$_$get_pixel_size(DisplayRegion const *param0, int param1)(DisplayRegion const *, int)
extern LVecBase2i * DisplayRegion$57$get_pixel_size(DisplayRegion const *self, int i);

#if INDEX
#define DisplayRegion_C_get_pixel_size_p_pi DisplayRegion$57$get_pixel_size
#endif

// C++ _inCAAAAa7MQ() ==> DisplayRegion$_$get_pixel_size(DisplayRegion const *param0)(DisplayRegion const *)
extern LVecBase2i * DisplayRegion$58$get_pixel_size(DisplayRegion const *self);

#if INDEX
#define DisplayRegion_C_get_pixel_size_p_p DisplayRegion$58$get_pixel_size
#endif

// C++ _inCAAAA2Wm3(std::ostream &out) ==> DisplayRegion$_$output(DisplayRegion const *param0, std::ostream *param1)(DisplayRegion const *, std::ostream *)
extern void DisplayRegion$59$output(DisplayRegion const *self, std$_ostream *out);

#if INDEX
#define DisplayRegion_C_output_v_pp DisplayRegion$59$output
#endif

// C++ _inCAAAAoh_C(std::string const &prefix) ==> DisplayRegion$_$make_screenshot_filename(char const *param0)(char const *)
extern Filename * DisplayRegion$60$make_screenshot_filename(char const *prefix);

#if INDEX
#define DisplayRegion_C_make_screenshot_filename_p_s DisplayRegion$60$make_screenshot_filename
#endif

// C++ _inCAAAAWeJc() ==> DisplayRegion$_$make_screenshot_filename()()
extern Filename * DisplayRegion$61$make_screenshot_filename(void);

#if INDEX
#define DisplayRegion_C_make_screenshot_filename_p_v DisplayRegion$61$make_screenshot_filename
#endif

// C++ _inCAAAATPtp(std::string const &prefix) ==> DisplayRegion$_$save_screenshot_default(DisplayRegion *param0, char const *param1)(DisplayRegion *, char const *)
extern Filename * DisplayRegion$62$save_screenshot_default(DisplayRegion *self, char const *prefix);

#if INDEX
#define DisplayRegion_C_save_screenshot_default_p_ps DisplayRegion$62$save_screenshot_default
#endif

// C++ _inCAAAAJTg6() ==> DisplayRegion$_$save_screenshot_default(DisplayRegion *param0)(DisplayRegion *)
extern Filename * DisplayRegion$63$save_screenshot_default(DisplayRegion *self);

#if INDEX
#define DisplayRegion_C_save_screenshot_default_p_p DisplayRegion$63$save_screenshot_default
#endif

// C++ _inCAAAAeeKk(Filename const &filename, std::string const &image_comment) ==> DisplayRegion$_$save_screenshot(DisplayRegion *param0, Filename const *param1, char const *param2)(DisplayRegion *, Filename const *, char const *)
extern bool DisplayRegion$64$save_screenshot(DisplayRegion *self, Filename const *filename, char const *image_comment);

#if INDEX
#define DisplayRegion_C_save_screenshot_B_pps DisplayRegion$64$save_screenshot
#endif

// C++ _inCAAAAN5lm(Filename const &filename) ==> DisplayRegion$_$save_screenshot(DisplayRegion *param0, Filename const *param1)(DisplayRegion *, Filename const *)
extern bool DisplayRegion$65$save_screenshot(DisplayRegion *self, Filename const *filename);

#if INDEX
#define DisplayRegion_C_save_screenshot_B_pp DisplayRegion$65$save_screenshot
#endif

// C++ _inCAAAAVX7L() ==> DisplayRegion$_$get_screenshot(DisplayRegion *param0)(DisplayRegion *)
extern char ** DisplayRegion$66$get_screenshot(DisplayRegion *self);

#if INDEX
#define DisplayRegion_C_get_screenshot_p_p DisplayRegion$66$get_screenshot
#endif

// C++ _inCAAAA__qS(PNMImage &image) ==> DisplayRegion$_$get_screenshot(DisplayRegion *param0, PNMImage *param1)(DisplayRegion *, PNMImage *)
extern bool DisplayRegion$67$get_screenshot(DisplayRegion *self, PNMImage *image);

#if INDEX
#define DisplayRegion_C_get_screenshot_B_pp DisplayRegion$67$get_screenshot
#endif

// C++ _inCAAAAGzuE() ==> DisplayRegion$_$make_cull_result_graph(DisplayRegion *param0)(DisplayRegion *)
extern char ** DisplayRegion$68$make_cull_result_graph(DisplayRegion *self);

#if INDEX
#define DisplayRegion_C_make_cull_result_graph_p_p DisplayRegion$68$make_cull_result_graph
#endif

// C++ _inCAAAAZxAV() ==> DisplayRegion$_$compute_pixels(DisplayRegion *param0)(DisplayRegion *)
extern void DisplayRegion$69$compute_pixels(DisplayRegion *self);

#if INDEX
#define DisplayRegion_C_compute_pixels_v_p DisplayRegion$69$compute_pixels
#endif

// C++ _inCAAAAjMLv(int x_size, int y_size) ==> DisplayRegion$_$compute_pixels(DisplayRegion *param0, int param1, int param2)(DisplayRegion *, int, int)
extern void DisplayRegion$70$compute_pixels(DisplayRegion *self, int x_size, int y_size);

#if INDEX
#define DisplayRegion_C_compute_pixels_v_pii DisplayRegion$70$compute_pixels
#endif

// C++ _inCAAAAm_3J() ==> DisplayRegion$_$compute_pixels_all_stages(DisplayRegion *param0)(DisplayRegion *)
extern void DisplayRegion$71$compute_pixels_all_stages(DisplayRegion *self);

#if INDEX
#define DisplayRegion_C_compute_pixels_all_stages_v_p DisplayRegion$71$compute_pixels_all_stages
#endif

// C++ _inCAAAA8yEm(int x_size, int y_size) ==> DisplayRegion$_$compute_pixels_all_stages(DisplayRegion *param0, int param1, int param2)(DisplayRegion *, int, int)
extern void DisplayRegion$72$compute_pixels_all_stages(DisplayRegion *self, int x_size, int y_size);

#if INDEX
#define DisplayRegion_C_compute_pixels_all_stages_v_pii DisplayRegion$72$compute_pixels_all_stages
#endif

// C++ _inCAAAATfgV() ==> DisplayRegion$_$supports_pixel_zoom(DisplayRegion const *param0)(DisplayRegion const *)
extern bool DisplayRegion$73$supports_pixel_zoom(DisplayRegion const *self);

#if INDEX
#define DisplayRegion_C_supports_pixel_zoom_B_p DisplayRegion$73$supports_pixel_zoom
#endif

// C++ _inCAAAAUp_E(PointerTo< CullResult > cull_result, PointerTo< SceneSetup > scene_setup, Thread *current_thread) ==> DisplayRegion$_$set_cull_result(DisplayRegion *param0, PointerTo< CullResult > *param1, PointerTo< SceneSetup > *param2, Thread *param3)(DisplayRegion *, PointerTo< CullResult > *, PointerTo< SceneSetup > *, Thread *)
extern void DisplayRegion$74$set_cull_result(DisplayRegion *self, char **cull_result, char **scene_setup, Thread *current_thread);

#if INDEX
#define DisplayRegion_C_set_cull_result_v_pppp DisplayRegion$74$set_cull_result
#endif

// C++ _inCAAAAnPTH(Thread *current_thread) ==> DisplayRegion$_$get_cull_result(DisplayRegion const *param0, Thread *param1)(DisplayRegion const *, Thread *)
extern CullResult * DisplayRegion$75$get_cull_result(DisplayRegion const *self, Thread *current_thread);

#if INDEX
#define DisplayRegion_C_get_cull_result_p_pp DisplayRegion$75$get_cull_result
#endif

// C++ _inCAAAA1FTE(Thread *current_thread) ==> DisplayRegion$_$get_scene_setup(DisplayRegion const *param0, Thread *param1)(DisplayRegion const *, Thread *)
extern SceneSetup * DisplayRegion$76$get_scene_setup(DisplayRegion const *self, Thread *current_thread);

#if INDEX
#define DisplayRegion_C_get_scene_setup_p_pp DisplayRegion$76$get_scene_setup
#endif

// C++ _inCAAAAJB1x() ==> DisplayRegion$_$get_cull_region_pcollector(DisplayRegion *param0)(DisplayRegion *)
extern PStatCollector * DisplayRegion$77$get_cull_region_pcollector(DisplayRegion *self);

#if INDEX
#define DisplayRegion_C_get_cull_region_pcollector_p_p DisplayRegion$77$get_cull_region_pcollector
#endif

// C++ _inCAAAAeuWS() ==> DisplayRegion$_$get_draw_region_pcollector(DisplayRegion *param0)(DisplayRegion *)
extern PStatCollector * DisplayRegion$78$get_draw_region_pcollector(DisplayRegion *self);

#if INDEX
#define DisplayRegion_C_get_draw_region_pcollector_p_p DisplayRegion$78$get_draw_region_pcollector
#endif

// C++ _inCAAAAL_be() ==> DisplayRegion$_$get_debug_name(DisplayRegion const *param0)(DisplayRegion const *)
extern char const * DisplayRegion$79$get_debug_name(DisplayRegion const *self);

#if INDEX
#define DisplayRegion_C_get_debug_name_s_p DisplayRegion$79$get_debug_name
#endif

// C++ _inCAAAAZZzb() ==> DisplayRegion$_$get_class_type()()
extern int DisplayRegion$80$get_class_type(void);

#if INDEX
#define DisplayRegion_C_get_class_type_i_v DisplayRegion$80$get_class_type
#endif

// C++ _inCAAAA9gxY() ==> DisplayRegion$_$init_type()()
extern void DisplayRegion$81$init_type(void);

#if INDEX
#define DisplayRegion_C_init_type_v_v DisplayRegion$81$init_type
#endif

// C++ _inCAAAAoy3p() ==> DisplayRegion$_$get_type(DisplayRegion const *param0)(DisplayRegion const *)
extern int DisplayRegion$82$get_type(DisplayRegion const *self);

#if INDEX
#define DisplayRegion_C_get_type_i_p DisplayRegion$82$get_type
#endif

// C++ _inCAAAAvyNU() ==> DisplayRegion$_$force_init_type(DisplayRegion *param0)(DisplayRegion *)
extern int DisplayRegion$83$force_init_type(DisplayRegion *self);

#if INDEX
#define DisplayRegion_C_force_init_type_i_p DisplayRegion$83$force_init_type
#endif


// DrawableRegion

// C++ _inCAAAAxlA_() ==> DrawableRegion$_$DrawableRegion()()
extern DrawableRegion * DrawableRegion$1$DrawableRegion(void);

#if INDEX
#define DrawableRegion_C_ctor_p_v DrawableRegion$1$DrawableRegion
#endif

// C++ _inCAAAAWkTq(DrawableRegion const &copy) ==> DrawableRegion$_$DrawableRegion(DrawableRegion const *param0)(DrawableRegion const *)
extern DrawableRegion * DrawableRegion$2$DrawableRegion(DrawableRegion const *copy);

#if INDEX
#define DrawableRegion_C_ctor_p_p DrawableRegion$2$DrawableRegion
#endif

// C++ _inCAAAAMcWd(DrawableRegion const &copy) ==> DrawableRegion$_$copy_clear_settings(DrawableRegion *param0, DrawableRegion const *param1)(DrawableRegion *, DrawableRegion const *)
extern void DrawableRegion$3$copy_clear_settings(DrawableRegion *self, DrawableRegion const *copy);

#if INDEX
#define DrawableRegion_C_copy_clear_settings_v_pp DrawableRegion$3$copy_clear_settings
#endif

// C++ _inCAAAA5_NM(bool clear_color_active) ==> DrawableRegion$_$set_clear_color_active(DrawableRegion *param0, bool param1)(DrawableRegion *, bool)
extern void DrawableRegion$4$set_clear_color_active(DrawableRegion *self, bool clear_color_active);

#if INDEX
#define DrawableRegion_C_set_clear_color_active_v_pB DrawableRegion$4$set_clear_color_active
#endif

// C++ _inCAAAAQ__5() ==> DrawableRegion$_$get_clear_color_active(DrawableRegion const *param0)(DrawableRegion const *)
extern bool DrawableRegion$5$get_clear_color_active(DrawableRegion const *self);

#if INDEX
#define DrawableRegion_C_get_clear_color_active_B_p DrawableRegion$5$get_clear_color_active
#endif

// C++ _inCAAAA_x_a(bool clear_depth_active) ==> DrawableRegion$_$set_clear_depth_active(DrawableRegion *param0, bool param1)(DrawableRegion *, bool)
extern void DrawableRegion$6$set_clear_depth_active(DrawableRegion *self, bool clear_depth_active);

#if INDEX
#define DrawableRegion_C_set_clear_depth_active_v_pB DrawableRegion$6$set_clear_depth_active
#endif

// C++ _inCAAAAklwI() ==> DrawableRegion$_$get_clear_depth_active(DrawableRegion const *param0)(DrawableRegion const *)
extern bool DrawableRegion$7$get_clear_depth_active(DrawableRegion const *self);

#if INDEX
#define DrawableRegion_C_get_clear_depth_active_B_p DrawableRegion$7$get_clear_depth_active
#endif

// C++ _inCAAAAcsb8(bool clear_stencil_active) ==> DrawableRegion$_$set_clear_stencil_active(DrawableRegion *param0, bool param1)(DrawableRegion *, bool)
extern void DrawableRegion$8$set_clear_stencil_active(DrawableRegion *self, bool clear_stencil_active);

#if INDEX
#define DrawableRegion_C_set_clear_stencil_active_v_pB DrawableRegion$8$set_clear_stencil_active
#endif

// C++ _inCAAAASZOl() ==> DrawableRegion$_$get_clear_stencil_active(DrawableRegion const *param0)(DrawableRegion const *)
extern bool DrawableRegion$9$get_clear_stencil_active(DrawableRegion const *self);

#if INDEX
#define DrawableRegion_C_get_clear_stencil_active_B_p DrawableRegion$9$get_clear_stencil_active
#endif

// C++ _inCAAAAUngn(LColor const &color) ==> DrawableRegion$_$set_clear_color(DrawableRegion *param0, LColor const *param1)(DrawableRegion *, LColor const *)
extern void DrawableRegion$10$set_clear_color(DrawableRegion *self, LColor const *color);

#if INDEX
#define DrawableRegion_C_set_clear_color_v_pp DrawableRegion$10$set_clear_color
#endif

// C++ _inCAAAA4kxz() ==> DrawableRegion$_$get_clear_color(DrawableRegion const *param0)(DrawableRegion const *)
extern LColor const * DrawableRegion$11$get_clear_color(DrawableRegion const *self);

#if INDEX
#define DrawableRegion_C_get_clear_color_p_p DrawableRegion$11$get_clear_color
#endif

// C++ _inCAAAA8fAn(PN_stdfloat depth) ==> DrawableRegion$_$set_clear_depth(DrawableRegion *param0, PN_stdfloat param1)(DrawableRegion *, PN_stdfloat)
extern void DrawableRegion$12$set_clear_depth(DrawableRegion *self, PN_stdfloat depth);

#if INDEX
#define DrawableRegion_C_set_clear_depth_v_pf DrawableRegion$12$set_clear_depth
#endif

// C++ _inCAAAAMYjC() ==> DrawableRegion$_$get_clear_depth(DrawableRegion const *param0)(DrawableRegion const *)
extern PN_stdfloat DrawableRegion$13$get_clear_depth(DrawableRegion const *self);

#if INDEX
#define DrawableRegion_C_get_clear_depth_f_p DrawableRegion$13$get_clear_depth
#endif

// C++ _inCAAAAeW2T(unsigned int stencil) ==> DrawableRegion$_$set_clear_stencil(DrawableRegion *param0, unsigned int param1)(DrawableRegion *, unsigned int)
extern void DrawableRegion$14$set_clear_stencil(DrawableRegion *self, unsigned int stencil);

#if INDEX
#define DrawableRegion_C_set_clear_stencil_v_pI DrawableRegion$14$set_clear_stencil
#endif

// C++ _inCAAAAsiaD() ==> DrawableRegion$_$get_clear_stencil(DrawableRegion const *param0)(DrawableRegion const *)
extern unsigned int DrawableRegion$15$get_clear_stencil(DrawableRegion const *self);

#if INDEX
#define DrawableRegion_C_get_clear_stencil_I_p DrawableRegion$15$get_clear_stencil
#endif

// C++ _inCAAAA0c6i(int n, bool clear_aux_active) ==> DrawableRegion$_$set_clear_active(DrawableRegion *param0, int param1, bool param2)(DrawableRegion *, int, bool)
extern void DrawableRegion$16$set_clear_active(DrawableRegion *self, int n, bool clear_aux_active);

#if INDEX
#define DrawableRegion_C_set_clear_active_v_piB DrawableRegion$16$set_clear_active
#endif

// C++ _inCAAAA2Tq7(int n) ==> DrawableRegion$_$get_clear_active(DrawableRegion const *param0, int param1)(DrawableRegion const *, int)
extern bool DrawableRegion$17$get_clear_active(DrawableRegion const *self, int n);

#if INDEX
#define DrawableRegion_C_get_clear_active_B_pi DrawableRegion$17$get_clear_active
#endif

// C++ _inCAAAAXg_Y(int n, LColor const &clear_value) ==> DrawableRegion$_$set_clear_value(DrawableRegion *param0, int param1, LColor const *param2)(DrawableRegion *, int, LColor const *)
extern void DrawableRegion$18$set_clear_value(DrawableRegion *self, int n, LColor const *clear_value);

#if INDEX
#define DrawableRegion_C_set_clear_value_v_pip DrawableRegion$18$set_clear_value
#endif

// C++ _inCAAAAl3hY(int n) ==> DrawableRegion$_$get_clear_value(DrawableRegion const *param0, int param1)(DrawableRegion const *, int)
extern LColor const * DrawableRegion$19$get_clear_value(DrawableRegion const *self, int n);

#if INDEX
#define DrawableRegion_C_get_clear_value_p_pi DrawableRegion$19$get_clear_value
#endif

// C++ _inCAAAAtFqI() ==> DrawableRegion$_$disable_clears(DrawableRegion *param0)(DrawableRegion *)
extern void DrawableRegion$20$disable_clears(DrawableRegion *self);

#if INDEX
#define DrawableRegion_C_disable_clears_v_p DrawableRegion$20$disable_clears
#endif

// C++ _inCAAAA0Gt_() ==> DrawableRegion$_$is_any_clear_active(DrawableRegion const *param0)(DrawableRegion const *)
extern bool DrawableRegion$21$is_any_clear_active(DrawableRegion const *self);

#if INDEX
#define DrawableRegion_C_is_any_clear_active_B_p DrawableRegion$21$is_any_clear_active
#endif

// C++ _inCAAAAX9rg(PN_stdfloat pixel_zoom) ==> DrawableRegion$_$set_pixel_zoom(DrawableRegion *param0, PN_stdfloat param1)(DrawableRegion *, PN_stdfloat)
extern void DrawableRegion$22$set_pixel_zoom(DrawableRegion *self, PN_stdfloat pixel_zoom);

#if INDEX
#define DrawableRegion_C_set_pixel_zoom_v_pf DrawableRegion$22$set_pixel_zoom
#endif

// C++ _inCAAAAGK1k() ==> DrawableRegion$_$get_pixel_zoom(DrawableRegion const *param0)(DrawableRegion const *)
extern PN_stdfloat DrawableRegion$23$get_pixel_zoom(DrawableRegion const *self);

#if INDEX
#define DrawableRegion_C_get_pixel_zoom_f_p DrawableRegion$23$get_pixel_zoom
#endif

// C++ _inCAAAALAtt() ==> DrawableRegion$_$get_pixel_factor(DrawableRegion const *param0)(DrawableRegion const *)
extern PN_stdfloat DrawableRegion$24$get_pixel_factor(DrawableRegion const *self);

#if INDEX
#define DrawableRegion_C_get_pixel_factor_f_p DrawableRegion$24$get_pixel_factor
#endif

// C++ _inCAAAAi4LW() ==> DrawableRegion$_$supports_pixel_zoom(DrawableRegion const *param0)(DrawableRegion const *)
extern bool DrawableRegion$25$supports_pixel_zoom(DrawableRegion const *self);

#if INDEX
#define DrawableRegion_C_supports_pixel_zoom_B_p DrawableRegion$25$supports_pixel_zoom
#endif

// C++ _inCAAAAu4KC(int plane) ==> DrawableRegion$_$get_renderbuffer_type(int param0)(int)
extern int DrawableRegion$26$get_renderbuffer_type(int plane);

#if INDEX
#define DrawableRegion_C_get_renderbuffer_type_i_i DrawableRegion$26$get_renderbuffer_type
#endif

// C++ _inCAAAAEc8M() ==> DrawableRegion$_$get_screenshot_buffer_type(DrawableRegion const *param0)(DrawableRegion const *)
extern int DrawableRegion$27$get_screenshot_buffer_type(DrawableRegion const *self);

#if INDEX
#define DrawableRegion_C_get_screenshot_buffer_type_i_p DrawableRegion$27$get_screenshot_buffer_type
#endif

// C++ _inCAAAAsUy9() ==> DrawableRegion$_$get_draw_buffer_type(DrawableRegion const *param0)(DrawableRegion const *)
extern int DrawableRegion$28$get_draw_buffer_type(DrawableRegion const *self);

#if INDEX
#define DrawableRegion_C_get_draw_buffer_type_i_p DrawableRegion$28$get_draw_buffer_type
#endif

// C++ _inCAAAAWozv() ==> DrawableRegion$_$downcast_to_DisplayRegion(DrawableRegion *param0)(DrawableRegion *)
extern DisplayRegion * DrawableRegion$29$downcast_to_DisplayRegion(DrawableRegion *self);

#if INDEX
#define DrawableRegion_C_downcast_to_DisplayRegion_p_p DrawableRegion$29$downcast_to_DisplayRegion
#endif

// C++ _inCAAAAuJDd() ==> DrawableRegion$_$downcast_to_GraphicsOutput(DrawableRegion *param0)(DrawableRegion *)
extern GraphicsOutput * DrawableRegion$30$downcast_to_GraphicsOutput(DrawableRegion *self);

#if INDEX
#define DrawableRegion_C_downcast_to_GraphicsOutput_p_p DrawableRegion$30$downcast_to_GraphicsOutput
#endif


// Engine

// C++ _inCAAAAa_qA() ==> Engine$_$Engine()()
extern Engine * Engine$1$Engine(void);

#if INDEX
#define Engine_C_ctor_p_v Engine$1$Engine
#endif

// C++ _inCAAAA4GrH(Engine const &) ==> Engine$_$Engine(Engine const *param0)(Engine const *)
extern Engine * Engine$2$Engine(Engine const *arg0);

#if INDEX
#define Engine_C_ctor_p_p Engine$2$Engine
#endif

// C++ _inCAAAAw9bJ() ==> Engine$_$dtor(Engine *param0)(Engine *)
extern void Engine$3$dtor(Engine *self);

#if INDEX
#define Engine_C_dtor_v_p Engine$3$dtor
#endif

// C++ _inCAAAAUUz_() ==> Engine$_$stop()()
extern void Engine$4$stop(void);

#if INDEX
#define Engine_C_stop_v_v Engine$4$stop
#endif

// C++ _inCAAAAviGn() ==> Engine$_$is_alive()()
extern int Engine$5$is_alive(void);

#if INDEX
#define Engine_C_is_alive_i_v Engine$5$is_alive
#endif

// C++ _inCAAAARIEu() ==> Engine$_$HelloEngine(Engine *param0)(Engine *)
extern int Engine$6$HelloEngine(Engine *self);

#if INDEX
#define Engine_C_HelloEngine_i_p Engine$6$HelloEngine
#endif

// C++ _inCAAAAu07o(int i, std::string s, bool b) ==> Engine$_$casetest(Engine *param0, int param1, char const *param2, bool param3)(Engine *, int, char const *, bool)
extern int Engine$7$casetest(Engine *self, int i, char const *s, bool b);

#if INDEX
#define Engine_C_casetest_i_pisB Engine$7$casetest
#endif

// C++ _inCAAAAFoZ4(char const *filename) ==> Engine$_$load_model(Engine *param0, char const *param1)(Engine *, char const *)
extern NodePath * Engine$8$load_model(Engine *self, char const *filename);

#if INDEX
#define Engine_C_load_model_p_ps Engine$8$load_model
#endif

// C++ _inCAAAASkdf(GeomVertexData *data, char const *gvw_name) ==> Engine$_$new_GeomVertexWriter(Engine *param0, GeomVertexData *param1, char const *param2)(Engine *, GeomVertexData *, char const *)
extern GeomVertexWriter * Engine$9$new_GeomVertexWriter(Engine *self, GeomVertexData *data, char const *gvw_name);

#if INDEX
#define Engine_C_new_GeomVertexWriter_p_pps Engine$9$new_GeomVertexWriter
#endif

// C++ _inCAAAA_O4M(Geom *geom, GeomTriangles *pri) ==> Engine$_$add_primitive(Engine *param0, Geom *param1, GeomTriangles *param2)(Engine *, Geom *, GeomTriangles *)
extern void Engine$10$add_primitive(Engine *self, Geom *geom, GeomTriangles *pri);

#if INDEX
#define Engine_C_add_primitive_v_ppp Engine$10$add_primitive
#endif

// C++ _inCAAAA9r7J(GeomTriangles *pri) ==> Engine$_$close_primitive(Engine *param0, GeomTriangles *param1)(Engine *, GeomTriangles *)
extern void Engine$11$close_primitive(Engine *self, GeomTriangles *pri);

#if INDEX
#define Engine_C_close_primitive_v_pp Engine$11$close_primitive
#endif

// C++ _inCAAAAn6WY() ==> Engine$_$new_GeomTriangles(Engine *param0)(Engine *)
extern char ** Engine$12$new_GeomTriangles(Engine *self);

#if INDEX
#define Engine_C_new_GeomTriangles_p_p Engine$12$new_GeomTriangles
#endif

// C++ _inCAAAAPpvK(float size, char const *geom_name, char const *gvd_name) ==> Engine$_$new_Cube(Engine *param0, float param1, char const *param2, char const *param3)(Engine *, float, char const *, char const *)
extern NodePath * Engine$13$new_Cube(Engine *self, float size, char const *geom_name, char const *gvd_name);

#if INDEX
#define Engine_C_new_Cube_p_pfss Engine$13$new_Cube
#endif

// C++ _inCAAAA3rLd(NodePath *mdl) ==> Engine$_$attach(Engine *param0, NodePath *param1)(Engine *, NodePath *)
extern void Engine$14$attach(Engine *self, NodePath *mdl);

#if INDEX
#define Engine_C_attach_v_pp Engine$14$attach
#endif

// C++ _inCAAAAlJYA(ReferenceCount *rc) ==> Engine$_$inc_ref(ReferenceCount *param0)(ReferenceCount *)
extern int Engine$15$inc_ref(ReferenceCount *rc);

#if INDEX
#define Engine_C_inc_ref_i_p Engine$15$inc_ref
#endif

// C++ _inCAAAAr8mf(ReferenceCount *rc) ==> Engine$_$dec_ref(ReferenceCount *param0)(ReferenceCount *)
extern int Engine$16$dec_ref(ReferenceCount *rc);

#if INDEX
#define Engine_C_dec_ref_i_p Engine$16$dec_ref
#endif

// C++ _inCAAAA38zC(Filename const &filename) ==> Engine$_$prc(Filename const *param0)(Filename const *)
extern void Engine$17$prc(Filename const *filename);

#if INDEX
#define Engine_C_prc_v_p Engine$17$prc
#endif

// C++ _inCAAAAEF8M(char const *name, char const *data) ==> Engine$_$prc(char const *param0, char const *param1)(char const *, char const *)
extern void Engine$18$prc(char const *name, char const *data);

#if INDEX
#define Engine_C_prc_v_ss Engine$18$prc
#endif

// C++ _inCAAAAB_Fq() ==> Engine$_$build(Engine *param0)(Engine *)
extern void Engine$19$build(Engine *self);

#if INDEX
#define Engine_C_build_v_p Engine$19$build
#endif

// C++ _inCAAAAMIC_() ==> Engine$_$step(Engine *param0)(Engine *)
extern void Engine$20$step(Engine *self);

#if INDEX
#define Engine_C_step_v_p Engine$20$step
#endif

// C++ _inCAAAAcpk6() ==> Engine$_$get_version_string()()
extern char const * Engine$21$get_version_string(void);

#if INDEX
#define Engine_C_get_version_string_s_v Engine$21$get_version_string
#endif

// C++ _inCAAAA4rrc() ==> Engine$_$get_wframe(Engine const *param0)(Engine const *)
extern WindowFramework * Engine$22$get_wframe(Engine const *self);

#if INDEX
#define Engine_C_get_wframe_p_p Engine$22$get_wframe
#endif

// C++ _inCAAAAGUc7(WindowFramework *value) ==> Engine$_$set_wframe(Engine *param0, WindowFramework *param1)(Engine *, WindowFramework *)
extern void Engine$23$set_wframe(Engine *self, WindowFramework *value);

#if INDEX
#define Engine_C_set_wframe_v_pp Engine$23$set_wframe
#endif

// C++ _inCAAAAHww4() ==> Engine$_$get_framework(Engine const *param0)(Engine const *)
extern PandaFramework * Engine$24$get_framework(Engine const *self);

#if INDEX
#define Engine_C_get_framework_p_p Engine$24$get_framework
#endif

// C++ _inCAAAAbucf(PandaFramework *value) ==> Engine$_$set_framework(Engine *param0, PandaFramework *param1)(Engine *, PandaFramework *)
extern void Engine$25$set_framework(Engine *self, PandaFramework *value);

#if INDEX
#define Engine_C_set_framework_v_pp Engine$25$set_framework
#endif


// EventHandler

// C++ _inCAAAAwhlR(EventQueue *ev_queue) ==> EventHandler$_$EventHandler(EventQueue *param0)(EventQueue *)
extern EventHandler * EventHandler$1$EventHandler(EventQueue *ev_queue);

#if INDEX
#define EventHandler_C_ctor_p_p EventHandler$1$EventHandler
#endif

// C++ _inCAAAAnmDs(std::string const &event_name) ==> EventHandler$_$get_future(EventHandler *param0, char const *param1)(EventHandler *, char const *)
extern AsyncFuture * EventHandler$2$get_future(EventHandler *self, char const *event_name);

#if INDEX
#define EventHandler_C_get_future_p_ps EventHandler$2$get_future
#endif

// C++ _inCAAAAIZkG() ==> EventHandler$_$process_events(EventHandler *param0)(EventHandler *)
extern void EventHandler$3$process_events(EventHandler *self);

#if INDEX
#define EventHandler_C_process_events_v_p EventHandler$3$process_events
#endif

// C++ _inCAAAAH0sA(Event const *event) ==> EventHandler$_$dispatch_event(EventHandler *param0, Event const *param1)(EventHandler *, Event const *)
extern void EventHandler$4$dispatch_event(EventHandler *self, Event const *event);

#if INDEX
#define EventHandler_C_dispatch_event_v_pp EventHandler$4$dispatch_event
#endif

// C++ _inCAAAAunvO(std::ostream &out) ==> EventHandler$_$write(EventHandler const *param0, std::ostream *param1)(EventHandler const *, std::ostream *)
extern void EventHandler$5$write(EventHandler const *self, std$_ostream *out);

#if INDEX
#define EventHandler_C_write_v_pp EventHandler$5$write
#endif

// C++ _inCAAAAcYKa(EventQueue *queue) ==> EventHandler$_$get_global_event_handler(EventQueue *param0)(EventQueue *)
extern EventHandler * EventHandler$6$get_global_event_handler(EventQueue *queue);

#if INDEX
#define EventHandler_C_get_global_event_handler_p_p EventHandler$6$get_global_event_handler
#endif

// C++ _inCAAAAJp0Z() ==> EventHandler$_$get_global_event_handler()()
extern EventHandler * EventHandler$7$get_global_event_handler(void);

#if INDEX
#define EventHandler_C_get_global_event_handler_p_v EventHandler$7$get_global_event_handler
#endif

// C++ _inCAAAAhLAB(std::string const &event_name) ==> EventHandler$_$has_hook(EventHandler const *param0, char const *param1)(EventHandler const *, char const *)
extern bool EventHandler$8$has_hook(EventHandler const *self, char const *event_name);

#if INDEX
#define EventHandler_C_has_hook_B_ps EventHandler$8$has_hook
#endif

// C++ _inCAAAAA1Et(std::string const &event_name) ==> EventHandler$_$remove_hooks(EventHandler *param0, char const *param1)(EventHandler *, char const *)
extern bool EventHandler$9$remove_hooks(EventHandler *self, char const *event_name);

#if INDEX
#define EventHandler_C_remove_hooks_B_ps EventHandler$9$remove_hooks
#endif

// C++ _inCAAAAT_2Q() ==> EventHandler$_$remove_all_hooks(EventHandler *param0)(EventHandler *)
extern void EventHandler$10$remove_all_hooks(EventHandler *self);

#if INDEX
#define EventHandler_C_remove_all_hooks_v_p EventHandler$10$remove_all_hooks
#endif

// C++ _inCAAAARkjs() ==> EventHandler$_$get_class_type()()
extern int EventHandler$11$get_class_type(void);

#if INDEX
#define EventHandler_C_get_class_type_i_v EventHandler$11$get_class_type
#endif

// C++ _inCAAAAq2fe() ==> EventHandler$_$init_type()()
extern void EventHandler$12$init_type(void);

#if INDEX
#define EventHandler_C_init_type_v_v EventHandler$12$init_type
#endif

// C++ _inCAAAAXST6() ==> EventHandler$_$force_init_type(EventHandler *param0)(EventHandler *)
extern int EventHandler$13$force_init_type(EventHandler *self);

#if INDEX
#define EventHandler_C_force_init_type_i_p EventHandler$13$force_init_type
#endif


// Filename

// C++ _inCAAAAzHmO() ==> Filename$_$Filename()()
extern Filename * Filename$1$Filename(void);

#if INDEX
#define Filename_C_ctor_p_v Filename$1$Filename
#endif

// C++ _inCAAAATAyl(Filename &&from) ==> Filename$_$Filename(Filename *param0)(Filename *)
extern Filename * Filename$2$Filename(Filename *from);

#if INDEX
#define Filename_C_ctor_p_p Filename$2$Filename
#endif

// C++ _inCAAAA0xIC(Filename const &copy) ==> Filename$_$Filename(Filename const *param0)(Filename const *)
extern Filename * Filename$3$Filename(Filename const *copy);
// COLLISION : Filename_C_ctor_p_p Filename$3$Filename

// C++ _inCAAAAz3ik(Filename const &dirname, Filename const &basename) ==> Filename$_$Filename(Filename const *param0, Filename const *param1)(Filename const *, Filename const *)
extern Filename * Filename$4$Filename(Filename const *dirname, Filename const *basename);

#if INDEX
#define Filename_C_ctor_p_pp Filename$4$Filename
#endif

// C++ _inCAAAAYS9H(char const *filename) ==> Filename$_$Filename(char const *param0)(char const *)
extern Filename * Filename$5$Filename(char const *filename);

#if INDEX
#define Filename_C_ctor_p_s Filename$5$Filename
#endif

// C++ _inCAAAAygg9(std::string const &filename) ==> Filename$_$Filename(char const *param0)(char const *)
extern Filename * Filename$6$Filename(char const *filename);
// COLLISION : Filename_C_ctor_p_s Filename$6$Filename

// C++ _inCAAAAw0Fd(std::wstring const &filename) ==> Filename$_$Filename(wchar_t const *param0)(wchar_t const *)
extern Filename * Filename$7$Filename(wchar_t const *filename);
// COLLISION : Filename_C_ctor_p_s Filename$7$Filename

// C++ _inCAAAAC1b2(Filename const &filename) ==> Filename$_$text_filename(Filename const *param0)(Filename const *)
extern Filename * Filename$8$text_filename(Filename const *filename);

#if INDEX
#define Filename_C_text_filename_p_p Filename$8$text_filename
#endif

// C++ _inCAAAAvNOt(std::string const &filename) ==> Filename$_$text_filename(char const *param0)(char const *)
extern Filename * Filename$9$text_filename(char const *filename);

#if INDEX
#define Filename_C_text_filename_p_s Filename$9$text_filename
#endif

// C++ _inCAAAAbJPp(Filename const &filename) ==> Filename$_$binary_filename(Filename const *param0)(Filename const *)
extern Filename * Filename$10$binary_filename(Filename const *filename);

#if INDEX
#define Filename_C_binary_filename_p_p Filename$10$binary_filename
#endif

// C++ _inCAAAAPh6h(std::string const &filename) ==> Filename$_$binary_filename(char const *param0)(char const *)
extern Filename * Filename$11$binary_filename(char const *filename);

#if INDEX
#define Filename_C_binary_filename_p_s Filename$11$binary_filename
#endif

// C++ _inCAAAACpRv(std::string const &filename) ==> Filename$_$dso_filename(char const *param0)(char const *)
extern Filename * Filename$12$dso_filename(char const *filename);

#if INDEX
#define Filename_C_dso_filename_p_s Filename$12$dso_filename
#endif

// C++ _inCAAAANs6u(std::string const &filename) ==> Filename$_$executable_filename(char const *param0)(char const *)
extern Filename * Filename$13$executable_filename(char const *filename);

#if INDEX
#define Filename_C_executable_filename_p_s Filename$13$executable_filename
#endif

// C++ _inCAAAAxSOe(std::string const &filename) ==> Filename$_$pattern_filename(char const *param0)(char const *)
extern Filename * Filename$14$pattern_filename(char const *filename);

#if INDEX
#define Filename_C_pattern_filename_p_s Filename$14$pattern_filename
#endif

// C++ _inCAAAAaIaB(std::string const &os_specific, Filename::Type type) ==> Filename$_$from_os_specific(char const *param0, Filename::Type param1)(char const *, Filename::Type)
extern Filename * Filename$15$from_os_specific(char const *os_specific, Filename$_Type type);

#if INDEX
#define Filename_C_from_os_specific_p_sp Filename$15$from_os_specific
#endif

// C++ _inCAAAAEvxv(std::string const &os_specific) ==> Filename$_$from_os_specific(char const *param0)(char const *)
extern Filename * Filename$16$from_os_specific(char const *os_specific);

#if INDEX
#define Filename_C_from_os_specific_p_s Filename$16$from_os_specific
#endif

// C++ _inCAAAAOwIH(std::wstring const &os_specific, Filename::Type type) ==> Filename$_$from_os_specific_w(wchar_t const *param0, Filename::Type param1)(wchar_t const *, Filename::Type)
extern Filename * Filename$17$from_os_specific_w(wchar_t const *os_specific, Filename$_Type type);

#if INDEX
#define Filename_C_from_os_specific_w_p_sp Filename$17$from_os_specific_w
#endif

// C++ _inCAAAAVnxx(std::wstring const &os_specific) ==> Filename$_$from_os_specific_w(wchar_t const *param0)(wchar_t const *)
extern Filename * Filename$18$from_os_specific_w(wchar_t const *os_specific);

#if INDEX
#define Filename_C_from_os_specific_w_p_s Filename$18$from_os_specific_w
#endif

// C++ _inCAAAASufR(std::string const &user_string, Filename::Type type) ==> Filename$_$expand_from(char const *param0, Filename::Type param1)(char const *, Filename::Type)
extern Filename * Filename$19$expand_from(char const *user_string, Filename$_Type type);

#if INDEX
#define Filename_C_expand_from_p_sp Filename$19$expand_from
#endif

// C++ _inCAAAABIso(std::string const &user_string) ==> Filename$_$expand_from(char const *param0)(char const *)
extern Filename * Filename$20$expand_from(char const *user_string);

#if INDEX
#define Filename_C_expand_from_p_s Filename$20$expand_from
#endif

// C++ _inCAAAAWnrq(std::string const &dirname, std::string const &prefix, std::string const &suffix, Filename::Type type) ==> Filename$_$temporary(char const *param0, char const *param1, char const *param2, Filename::Type param3)(char const *, char const *, char const *, Filename::Type)
extern Filename * Filename$21$temporary(char const *dirname, char const *prefix, char const *suffix, Filename$_Type type);

#if INDEX
#define Filename_C_temporary_p_sssp Filename$21$temporary
#endif

// C++ _inCAAAAkS5B(std::string const &dirname, std::string const &prefix, std::string const &suffix) ==> Filename$_$temporary(char const *param0, char const *param1, char const *param2)(char const *, char const *, char const *)
extern Filename * Filename$22$temporary(char const *dirname, char const *prefix, char const *suffix);

#if INDEX
#define Filename_C_temporary_p_sss Filename$22$temporary
#endif

// C++ _inCAAAAwIqG(std::string const &dirname, std::string const &prefix) ==> Filename$_$temporary(char const *param0, char const *param1)(char const *, char const *)
extern Filename * Filename$23$temporary(char const *dirname, char const *prefix);

#if INDEX
#define Filename_C_temporary_p_ss Filename$23$temporary
#endif

// C++ _inCAAAAf_0B() ==> Filename$_$get_home_directory()()
extern Filename const * Filename$24$get_home_directory(void);

#if INDEX
#define Filename_C_get_home_directory_p_v Filename$24$get_home_directory
#endif

// C++ _inCAAAAeDx2() ==> Filename$_$get_temp_directory()()
extern Filename const * Filename$25$get_temp_directory(void);

#if INDEX
#define Filename_C_get_temp_directory_p_v Filename$25$get_temp_directory
#endif

// C++ _inCAAAA4CLy() ==> Filename$_$get_user_appdata_directory()()
extern Filename const * Filename$26$get_user_appdata_directory(void);

#if INDEX
#define Filename_C_get_user_appdata_directory_p_v Filename$26$get_user_appdata_directory
#endif

// C++ _inCAAAAw0eY() ==> Filename$_$get_common_appdata_directory()()
extern Filename const * Filename$27$get_common_appdata_directory(void);

#if INDEX
#define Filename_C_get_common_appdata_directory_p_v Filename$27$get_common_appdata_directory
#endif

// C++ _inCAAAAmyvU() ==> Filename$_$c_str(Filename const *param0)(Filename const *)
extern char const * Filename$28$c_str(Filename const *self);

#if INDEX
#define Filename_C_c_str_s_p Filename$28$c_str
#endif

// C++ _inCAAAAOFzc() ==> Filename$_$empty(Filename const *param0)(Filename const *)
extern bool Filename$29$empty(Filename const *self);

#if INDEX
#define Filename_C_empty_B_p Filename$29$empty
#endif

// C++ _inCAAAAgE4s() ==> Filename$_$length(Filename const *param0)(Filename const *)
extern std$_size_t Filename$30$length(Filename const *self);

#if INDEX
#define Filename_C_length_l_p Filename$30$length
#endif

// C++ _inCAAAAIKWA(std::size_t begin) ==> Filename$_$substr(Filename const *param0, std::size_t param1)(Filename const *, std::size_t)
extern char const * Filename$31$substr(Filename const *self, std$_size_t begin);

#if INDEX
#define Filename_C_substr_s_pl Filename$31$substr
#endif

// C++ _inCAAAAXWsr(std::size_t begin, std::size_t end) ==> Filename$_$substr(Filename const *param0, std::size_t param1, std::size_t param2)(Filename const *, std::size_t, std::size_t)
extern char const * Filename$32$substr(Filename const *self, std$_size_t begin, std$_size_t end);

#if INDEX
#define Filename_C_substr_s_pll Filename$32$substr
#endif

// C++ _inCAAAAFzJX() ==> Filename$_$get_fullpath(Filename const *param0)(Filename const *)
extern char const * Filename$33$get_fullpath(Filename const *self);

#if INDEX
#define Filename_C_get_fullpath_s_p Filename$33$get_fullpath
#endif

// C++ _inCAAAAEfKG() ==> Filename$_$get_fullpath_w(Filename const *param0)(Filename const *)
extern wchar_t const * Filename$34$get_fullpath_w(Filename const *self);

#if INDEX
#define Filename_C_get_fullpath_w_s_p Filename$34$get_fullpath_w
#endif

// C++ _inCAAAAnZLo() ==> Filename$_$get_dirname(Filename const *param0)(Filename const *)
extern char const * Filename$35$get_dirname(Filename const *self);

#if INDEX
#define Filename_C_get_dirname_s_p Filename$35$get_dirname
#endif

// C++ _inCAAAAdGTD() ==> Filename$_$get_basename(Filename const *param0)(Filename const *)
extern char const * Filename$36$get_basename(Filename const *self);

#if INDEX
#define Filename_C_get_basename_s_p Filename$36$get_basename
#endif

// C++ _inCAAAApN0c() ==> Filename$_$get_fullpath_wo_extension(Filename const *param0)(Filename const *)
extern char const * Filename$37$get_fullpath_wo_extension(Filename const *self);

#if INDEX
#define Filename_C_get_fullpath_wo_extension_s_p Filename$37$get_fullpath_wo_extension
#endif

// C++ _inCAAAANi_I() ==> Filename$_$get_basename_wo_extension(Filename const *param0)(Filename const *)
extern char const * Filename$38$get_basename_wo_extension(Filename const *self);

#if INDEX
#define Filename_C_get_basename_wo_extension_s_p Filename$38$get_basename_wo_extension
#endif

// C++ _inCAAAA_MQ8() ==> Filename$_$get_extension(Filename const *param0)(Filename const *)
extern char const * Filename$39$get_extension(Filename const *self);

#if INDEX
#define Filename_C_get_extension_s_p Filename$39$get_extension
#endif

// C++ _inCAAAAiBlJ(std::string const &s) ==> Filename$_$set_fullpath(Filename *param0, char const *param1)(Filename *, char const *)
extern void Filename$40$set_fullpath(Filename *self, char const *s);

#if INDEX
#define Filename_C_set_fullpath_v_ps Filename$40$set_fullpath
#endif

// C++ _inCAAAAMTmS(std::string const &s) ==> Filename$_$set_dirname(Filename *param0, char const *param1)(Filename *, char const *)
extern void Filename$41$set_dirname(Filename *self, char const *s);

#if INDEX
#define Filename_C_set_dirname_v_ps Filename$41$set_dirname
#endif

// C++ _inCAAAAnzu1(std::string const &s) ==> Filename$_$set_basename(Filename *param0, char const *param1)(Filename *, char const *)
extern void Filename$42$set_basename(Filename *self, char const *s);

#if INDEX
#define Filename_C_set_basename_v_ps Filename$42$set_basename
#endif

// C++ _inCAAAA8yGI(std::string const &s) ==> Filename$_$set_fullpath_wo_extension(Filename *param0, char const *param1)(Filename *, char const *)
extern void Filename$43$set_fullpath_wo_extension(Filename *self, char const *s);

#if INDEX
#define Filename_C_set_fullpath_wo_extension_v_ps Filename$43$set_fullpath_wo_extension
#endif

// C++ _inCAAAAVNQ0(std::string const &s) ==> Filename$_$set_basename_wo_extension(Filename *param0, char const *param1)(Filename *, char const *)
extern void Filename$44$set_basename_wo_extension(Filename *self, char const *s);

#if INDEX
#define Filename_C_set_basename_wo_extension_v_ps Filename$44$set_basename_wo_extension
#endif

// C++ _inCAAAAdpGv(std::string const &s) ==> Filename$_$set_extension(Filename *param0, char const *param1)(Filename *, char const *)
extern void Filename$45$set_extension(Filename *self, char const *s);

#if INDEX
#define Filename_C_set_extension_v_ps Filename$45$set_extension
#endif

// C++ _inCAAAAK9mc() ==> Filename$_$set_binary(Filename *param0)(Filename *)
extern void Filename$46$set_binary(Filename *self);

#if INDEX
#define Filename_C_set_binary_v_p Filename$46$set_binary
#endif

// C++ _inCAAAABixh() ==> Filename$_$set_text(Filename *param0)(Filename *)
extern void Filename$47$set_text(Filename *self);

#if INDEX
#define Filename_C_set_text_v_p Filename$47$set_text
#endif

// C++ _inCAAAAnswQ() ==> Filename$_$is_binary(Filename const *param0)(Filename const *)
extern bool Filename$48$is_binary(Filename const *self);

#if INDEX
#define Filename_C_is_binary_B_p Filename$48$is_binary
#endif

// C++ _inCAAAAf3Vw() ==> Filename$_$is_text(Filename const *param0)(Filename const *)
extern bool Filename$49$is_text(Filename const *self);

#if INDEX
#define Filename_C_is_text_B_p Filename$49$is_text
#endif

// C++ _inCAAAAOiJI() ==> Filename$_$is_binary_or_text(Filename const *param0)(Filename const *)
extern bool Filename$50$is_binary_or_text(Filename const *self);

#if INDEX
#define Filename_C_is_binary_or_text_B_p Filename$50$is_binary_or_text
#endif

// C++ _inCAAAAc7yW(Filename::Type type) ==> Filename$_$set_type(Filename *param0, Filename::Type param1)(Filename *, Filename::Type)
extern void Filename$51$set_type(Filename *self, Filename$_Type type);

#if INDEX
#define Filename_C_set_type_v_pp Filename$51$set_type
#endif

// C++ _inCAAAAELir() ==> Filename$_$get_type(Filename const *param0)(Filename const *)
extern Filename$_Type Filename$52$get_type(Filename const *self);

#if INDEX
#define Filename_C_get_type_p_p Filename$52$get_type
#endif

// C++ _inCAAAA0_BT(bool pattern) ==> Filename$_$set_pattern(Filename *param0, bool param1)(Filename *, bool)
extern void Filename$53$set_pattern(Filename *self, bool pattern);

#if INDEX
#define Filename_C_set_pattern_v_pB Filename$53$set_pattern
#endif

// C++ _inCAAAAJg4Y() ==> Filename$_$get_pattern(Filename const *param0)(Filename const *)
extern bool Filename$54$get_pattern(Filename const *self);

#if INDEX
#define Filename_C_get_pattern_B_p Filename$54$get_pattern
#endif

// C++ _inCAAAANmUz() ==> Filename$_$has_hash(Filename const *param0)(Filename const *)
extern bool Filename$55$has_hash(Filename const *self);

#if INDEX
#define Filename_C_has_hash_B_p Filename$55$has_hash
#endif

// C++ _inCAAAAq4gP(int index) ==> Filename$_$get_filename_index(Filename const *param0, int param1)(Filename const *, int)
extern Filename * Filename$56$get_filename_index(Filename const *self, int index);

#if INDEX
#define Filename_C_get_filename_index_p_pi Filename$56$get_filename_index
#endif

// C++ _inCAAAA4SYs() ==> Filename$_$get_hash_to_end(Filename const *param0)(Filename const *)
extern char const * Filename$57$get_hash_to_end(Filename const *self);

#if INDEX
#define Filename_C_get_hash_to_end_s_p Filename$57$get_hash_to_end
#endif

// C++ _inCAAAApC53(std::string const &s) ==> Filename$_$set_hash_to_end(Filename *param0, char const *param1)(Filename *, char const *)
extern void Filename$58$set_hash_to_end(Filename *self, char const *s);

#if INDEX
#define Filename_C_set_hash_to_end_v_ps Filename$58$set_hash_to_end
#endif

// C++ _inCAAAAMo1r(vector_string &components) ==> Filename$_$extract_components(Filename const *param0, vector_string *param1)(Filename const *, vector_string *)
extern void Filename$59$extract_components(Filename const *self, vector_string *components);

#if INDEX
#define Filename_C_extract_components_v_pp Filename$59$extract_components
#endif

// C++ _inCAAAAMUbk() ==> Filename$_$standardize(Filename *param0)(Filename *)
extern void Filename$60$standardize(Filename *self);

#if INDEX
#define Filename_C_standardize_v_p Filename$60$standardize
#endif

// C++ _inCAAAAGI_b() ==> Filename$_$is_local(Filename const *param0)(Filename const *)
extern bool Filename$61$is_local(Filename const *self);

#if INDEX
#define Filename_C_is_local_B_p Filename$61$is_local
#endif

// C++ _inCAAAAtIAk() ==> Filename$_$is_fully_qualified(Filename const *param0)(Filename const *)
extern bool Filename$62$is_fully_qualified(Filename const *self);

#if INDEX
#define Filename_C_is_fully_qualified_B_p Filename$62$is_fully_qualified
#endif

// C++ _inCAAAA_eKM() ==> Filename$_$make_absolute(Filename *param0)(Filename *)
extern void Filename$63$make_absolute(Filename *self);

#if INDEX
#define Filename_C_make_absolute_v_p Filename$63$make_absolute
#endif

// C++ _inCAAAAudOz(Filename const &start_directory) ==> Filename$_$make_absolute(Filename *param0, Filename const *param1)(Filename *, Filename const *)
extern void Filename$64$make_absolute(Filename *self, Filename const *start_directory);

#if INDEX
#define Filename_C_make_absolute_v_pp Filename$64$make_absolute
#endif

// C++ _inCAAAAtwJA() ==> Filename$_$make_canonical(Filename *param0)(Filename *)
extern bool Filename$65$make_canonical(Filename *self);

#if INDEX
#define Filename_C_make_canonical_B_p Filename$65$make_canonical
#endif

// C++ _inCAAAAX1o1() ==> Filename$_$make_true_case(Filename *param0)(Filename *)
extern bool Filename$66$make_true_case(Filename *self);

#if INDEX
#define Filename_C_make_true_case_B_p Filename$66$make_true_case
#endif

// C++ _inCAAAAHThn() ==> Filename$_$to_os_specific(Filename const *param0)(Filename const *)
extern char const * Filename$67$to_os_specific(Filename const *self);

#if INDEX
#define Filename_C_to_os_specific_s_p Filename$67$to_os_specific
#endif

// C++ _inCAAAAmUcX() ==> Filename$_$to_os_specific_w(Filename const *param0)(Filename const *)
extern wchar_t const * Filename$68$to_os_specific_w(Filename const *self);

#if INDEX
#define Filename_C_to_os_specific_w_s_p Filename$68$to_os_specific_w
#endif

// C++ _inCAAAAT7Xd() ==> Filename$_$to_os_generic(Filename const *param0)(Filename const *)
extern char const * Filename$69$to_os_generic(Filename const *self);

#if INDEX
#define Filename_C_to_os_generic_s_p Filename$69$to_os_generic
#endif

// C++ _inCAAAAXTVO() ==> Filename$_$to_os_short_name(Filename const *param0)(Filename const *)
extern char const * Filename$70$to_os_short_name(Filename const *self);

#if INDEX
#define Filename_C_to_os_short_name_s_p Filename$70$to_os_short_name
#endif

// C++ _inCAAAAo4Sv() ==> Filename$_$to_os_long_name(Filename const *param0)(Filename const *)
extern char const * Filename$71$to_os_long_name(Filename const *self);

#if INDEX
#define Filename_C_to_os_long_name_s_p Filename$71$to_os_long_name
#endif

// C++ _inCAAAAXz2_() ==> Filename$_$exists(Filename const *param0)(Filename const *)
extern bool Filename$72$exists(Filename const *self);

#if INDEX
#define Filename_C_exists_B_p Filename$72$exists
#endif

// C++ _inCAAAA4vqn() ==> Filename$_$is_regular_file(Filename const *param0)(Filename const *)
extern bool Filename$73$is_regular_file(Filename const *self);

#if INDEX
#define Filename_C_is_regular_file_B_p Filename$73$is_regular_file
#endif

// C++ _inCAAAAahKY() ==> Filename$_$is_writable(Filename const *param0)(Filename const *)
extern bool Filename$74$is_writable(Filename const *self);

#if INDEX
#define Filename_C_is_writable_B_p Filename$74$is_writable
#endif

// C++ _inCAAAAADlT() ==> Filename$_$is_directory(Filename const *param0)(Filename const *)
extern bool Filename$75$is_directory(Filename const *self);

#if INDEX
#define Filename_C_is_directory_B_p Filename$75$is_directory
#endif

// C++ _inCAAAAdwcX() ==> Filename$_$is_executable(Filename const *param0)(Filename const *)
extern bool Filename$76$is_executable(Filename const *self);

#if INDEX
#define Filename_C_is_executable_B_p Filename$76$is_executable
#endif

// C++ _inCAAAAQRcf(Filename const &other, bool this_missing_is_old, bool other_missing_is_old) ==> Filename$_$compare_timestamps(Filename const *param0, Filename const *param1, bool param2, bool param3)(Filename const *, Filename const *, bool, bool)
extern int Filename$77$compare_timestamps(Filename const *self, Filename const *other, bool this_missing_is_old, bool other_missing_is_old);

#if INDEX
#define Filename_C_compare_timestamps_i_ppBB Filename$77$compare_timestamps
#endif

// C++ _inCAAAAihlq(Filename const &other, bool this_missing_is_old) ==> Filename$_$compare_timestamps(Filename const *param0, Filename const *param1, bool param2)(Filename const *, Filename const *, bool)
extern int Filename$78$compare_timestamps(Filename const *self, Filename const *other, bool this_missing_is_old);

#if INDEX
#define Filename_C_compare_timestamps_i_ppB Filename$78$compare_timestamps
#endif

// C++ _inCAAAA3wx_(Filename const &other) ==> Filename$_$compare_timestamps(Filename const *param0, Filename const *param1)(Filename const *, Filename const *)
extern int Filename$79$compare_timestamps(Filename const *self, Filename const *other);

#if INDEX
#define Filename_C_compare_timestamps_i_pp Filename$79$compare_timestamps
#endif

// C++ _inCAAAAKJyF() ==> Filename$_$get_timestamp(Filename const *param0)(Filename const *)
extern time_t Filename$80$get_timestamp(Filename const *self);

#if INDEX
#define Filename_C_get_timestamp_p_p Filename$80$get_timestamp
#endif

// C++ _inCAAAA3OVg() ==> Filename$_$get_access_timestamp(Filename const *param0)(Filename const *)
extern time_t Filename$81$get_access_timestamp(Filename const *self);

#if INDEX
#define Filename_C_get_access_timestamp_p_p Filename$81$get_access_timestamp
#endif

// C++ _inCAAAAjnXJ() ==> Filename$_$get_file_size(Filename const *param0)(Filename const *)
extern std$_streamsize Filename$82$get_file_size(Filename const *self);

#if INDEX
#define Filename_C_get_file_size_l_p Filename$82$get_file_size
#endif

// C++ _inCAAAA_ktc(DSearchPath const &searchpath, std::string const &default_extension) ==> Filename$_$resolve_filename(Filename *param0, DSearchPath const *param1, char const *param2)(Filename *, DSearchPath const *, char const *)
extern bool Filename$83$resolve_filename(Filename *self, DSearchPath const *searchpath, char const *default_extension);

#if INDEX
#define Filename_C_resolve_filename_B_pps Filename$83$resolve_filename
#endif

// C++ _inCAAAAk2zY(DSearchPath const &searchpath) ==> Filename$_$resolve_filename(Filename *param0, DSearchPath const *param1)(Filename *, DSearchPath const *)
extern bool Filename$84$resolve_filename(Filename *self, DSearchPath const *searchpath);

#if INDEX
#define Filename_C_resolve_filename_B_pp Filename$84$resolve_filename
#endif

// C++ _inCAAAAfEHg(Filename directory, bool allow_backups) ==> Filename$_$make_relative_to(Filename *param0, Filename *param1, bool param2)(Filename *, Filename *, bool)
extern bool Filename$85$make_relative_to(Filename *self, Filename *directory, bool allow_backups);

#if INDEX
#define Filename_C_make_relative_to_B_ppB Filename$85$make_relative_to
#endif

// C++ _inCAAAA85oI(Filename directory) ==> Filename$_$make_relative_to(Filename *param0, Filename *param1)(Filename *, Filename *)
extern bool Filename$86$make_relative_to(Filename *self, Filename *directory);

#if INDEX
#define Filename_C_make_relative_to_B_pp Filename$86$make_relative_to
#endif

// C++ _inCAAAA45N1(DSearchPath const &searchpath) ==> Filename$_$find_on_searchpath(Filename *param0, DSearchPath const *param1)(Filename *, DSearchPath const *)
extern int Filename$87$find_on_searchpath(Filename *self, DSearchPath const *searchpath);

#if INDEX
#define Filename_C_find_on_searchpath_i_pp Filename$87$find_on_searchpath
#endif

// C++ _inCAAAA1pvM(vector_string &contents) ==> Filename$_$scan_directory(Filename const *param0, vector_string *param1)(Filename const *, vector_string *)
extern bool Filename$88$scan_directory(Filename const *self, vector_string *contents);

#if INDEX
#define Filename_C_scan_directory_B_pp Filename$88$scan_directory
#endif

// C++ _inCAAAAhT0n(pifstream &stream) ==> Filename$_$open_read(Filename const *param0, pifstream *param1)(Filename const *, pifstream *)
extern bool Filename$89$open_read(Filename const *self, pifstream *stream);

#if INDEX
#define Filename_C_open_read_B_pp Filename$89$open_read
#endif

// C++ _inCAAAAluH_(std::ifstream &stream) ==> Filename$_$open_read(Filename const *param0, std::ifstream *param1)(Filename const *, std::ifstream *)
extern bool Filename$90$open_read(Filename const *self, std$_ifstream *stream);
// COLLISION : Filename_C_open_read_B_pp Filename$90$open_read

// C++ _inCAAAA83u8(pofstream &stream, bool truncate) ==> Filename$_$open_write(Filename const *param0, pofstream *param1, bool param2)(Filename const *, pofstream *, bool)
extern bool Filename$91$open_write(Filename const *self, pofstream *stream, bool truncate);

#if INDEX
#define Filename_C_open_write_B_ppB Filename$91$open_write
#endif

// C++ _inCAAAARGVH(pofstream &stream) ==> Filename$_$open_write(Filename const *param0, pofstream *param1)(Filename const *, pofstream *)
extern bool Filename$92$open_write(Filename const *self, pofstream *stream);

#if INDEX
#define Filename_C_open_write_B_pp Filename$92$open_write
#endif

// C++ _inCAAAARfnm(std::ofstream &stream, bool truncate) ==> Filename$_$open_write(Filename const *param0, std::ofstream *param1, bool param2)(Filename const *, std::ofstream *, bool)
extern bool Filename$93$open_write(Filename const *self, std$_ofstream *stream, bool truncate);
// COLLISION : Filename_C_open_write_B_ppB Filename$93$open_write

// C++ _inCAAAAXpRT(std::ofstream &stream) ==> Filename$_$open_write(Filename const *param0, std::ofstream *param1)(Filename const *, std::ofstream *)
extern bool Filename$94$open_write(Filename const *self, std$_ofstream *stream);
// COLLISION : Filename_C_open_write_B_pp Filename$94$open_write

// C++ _inCAAAAjFAU(pofstream &stream) ==> Filename$_$open_append(Filename const *param0, pofstream *param1)(Filename const *, pofstream *)
extern bool Filename$95$open_append(Filename const *self, pofstream *stream);

#if INDEX
#define Filename_C_open_append_B_pp Filename$95$open_append
#endif

// C++ _inCAAAAttUT(std::ofstream &stream) ==> Filename$_$open_append(Filename const *param0, std::ofstream *param1)(Filename const *, std::ofstream *)
extern bool Filename$96$open_append(Filename const *self, std$_ofstream *stream);
// COLLISION : Filename_C_open_append_B_pp Filename$96$open_append

// C++ _inCAAAA5Jdf(pfstream &stream, bool truncate) ==> Filename$_$open_read_write(Filename const *param0, pfstream *param1, bool param2)(Filename const *, pfstream *, bool)
extern bool Filename$97$open_read_write(Filename const *self, pfstream *stream, bool truncate);

#if INDEX
#define Filename_C_open_read_write_B_ppB Filename$97$open_read_write
#endif

// C++ _inCAAAAv_IM(pfstream &stream) ==> Filename$_$open_read_write(Filename const *param0, pfstream *param1)(Filename const *, pfstream *)
extern bool Filename$98$open_read_write(Filename const *self, pfstream *stream);

#if INDEX
#define Filename_C_open_read_write_B_pp Filename$98$open_read_write
#endif

// C++ _inCAAAAmwiS(std::fstream &stream, bool truncate) ==> Filename$_$open_read_write(Filename const *param0, std::fstream *param1, bool param2)(Filename const *, std::fstream *, bool)
extern bool Filename$99$open_read_write(Filename const *self, std$_fstream *stream, bool truncate);
// COLLISION : Filename_C_open_read_write_B_ppB Filename$99$open_read_write

// C++ _inCAAAAxoXJ(std::fstream &stream) ==> Filename$_$open_read_write(Filename const *param0, std::fstream *param1)(Filename const *, std::fstream *)
extern bool Filename$100$open_read_write(Filename const *self, std$_fstream *stream);
// COLLISION : Filename_C_open_read_write_B_pp Filename$100$open_read_write

// C++ _inCAAAAwbx_(pfstream &stream) ==> Filename$_$open_read_append(Filename const *param0, pfstream *param1)(Filename const *, pfstream *)
extern bool Filename$101$open_read_append(Filename const *self, pfstream *stream);

#if INDEX
#define Filename_C_open_read_append_B_pp Filename$101$open_read_append
#endif

// C++ _inCAAAAdXEn(std::fstream &stream) ==> Filename$_$open_read_append(Filename const *param0, std::fstream *param1)(Filename const *, std::fstream *)
extern bool Filename$102$open_read_append(Filename const *self, std$_fstream *stream);
// COLLISION : Filename_C_open_read_append_B_pp Filename$102$open_read_append

// C++ _inCAAAAm9kw() ==> Filename$_$chdir(Filename const *param0)(Filename const *)
extern bool Filename$103$chdir(Filename const *self);

#if INDEX
#define Filename_C_chdir_B_p Filename$103$chdir
#endif

// C++ _inCAAAACry9() ==> Filename$_$touch(Filename const *param0)(Filename const *)
extern bool Filename$104$touch(Filename const *self);

#if INDEX
#define Filename_C_touch_B_p Filename$104$touch
#endif

// C++ _inCAAAAaMuO() ==> Filename$_$unlink(Filename const *param0)(Filename const *)
extern bool Filename$105$unlink(Filename const *self);

#if INDEX
#define Filename_C_unlink_B_p Filename$105$unlink
#endif

// C++ _inCAAAAaavz(Filename const &other) ==> Filename$_$rename_to(Filename const *param0, Filename const *param1)(Filename const *, Filename const *)
extern bool Filename$106$rename_to(Filename const *self, Filename const *other);

#if INDEX
#define Filename_C_rename_to_B_pp Filename$106$rename_to
#endif

// C++ _inCAAAAjPPu(Filename const &other) ==> Filename$_$copy_to(Filename const *param0, Filename const *param1)(Filename const *, Filename const *)
extern bool Filename$107$copy_to(Filename const *self, Filename const *other);

#if INDEX
#define Filename_C_copy_to_B_pp Filename$107$copy_to
#endif

// C++ _inCAAAAOOnR() ==> Filename$_$make_dir(Filename const *param0)(Filename const *)
extern bool Filename$108$make_dir(Filename const *self);

#if INDEX
#define Filename_C_make_dir_B_p Filename$108$make_dir
#endif

// C++ _inCAAAAeeq4() ==> Filename$_$mkdir(Filename const *param0)(Filename const *)
extern bool Filename$109$mkdir(Filename const *self);

#if INDEX
#define Filename_C_mkdir_B_p Filename$109$mkdir
#endif

// C++ _inCAAAACI79() ==> Filename$_$rmdir(Filename const *param0)(Filename const *)
extern bool Filename$110$rmdir(Filename const *self);

#if INDEX
#define Filename_C_rmdir_B_p Filename$110$rmdir
#endif

// C++ _inCAAAAwktQ(Filename const &other) ==> Filename$_$compare_to(Filename const *param0, Filename const *param1)(Filename const *, Filename const *)
extern int Filename$111$compare_to(Filename const *self, Filename const *other);

#if INDEX
#define Filename_C_compare_to_i_pp Filename$111$compare_to
#endif

// C++ _inCAAAAeHUw() ==> Filename$_$__nonzero__(Filename const *param0)(Filename const *)
extern bool Filename$112$__nonzero__(Filename const *self);

#if INDEX
#define Filename_C___nonzero___B_p Filename$112$__nonzero__
#endif

// C++ _inCAAAAnnHL() ==> Filename$_$get_hash(Filename const *param0)(Filename const *)
extern int Filename$113$get_hash(Filename const *self);

#if INDEX
#define Filename_C_get_hash_i_p Filename$113$get_hash
#endif

// C++ _inCAAAAgQYS(std::ostream &out) ==> Filename$_$output(Filename const *param0, std::ostream *param1)(Filename const *, std::ostream *)
extern void Filename$114$output(Filename const *self, std$_ostream *out);

#if INDEX
#define Filename_C_output_v_pp Filename$114$output
#endif

// C++ _inCAAAAfmrp(TextEncoder::Encoding encoding) ==> Filename$_$set_filesystem_encoding(TextEncoder::Encoding param0)(TextEncoder::Encoding)
extern void Filename$115$set_filesystem_encoding(TextEncoder$_Encoding encoding);

#if INDEX
#define Filename_C_set_filesystem_encoding_v_p Filename$115$set_filesystem_encoding
#endif

// C++ _inCAAAAKN3I() ==> Filename$_$get_filesystem_encoding()()
extern TextEncoder$_Encoding Filename$116$get_filesystem_encoding(void);

#if INDEX
#define Filename_C_get_filesystem_encoding_p_v Filename$116$get_filesystem_encoding
#endif

// C++ _inCAAAAsafE() ==> Filename$_$get_class_type()()
extern int Filename$117$get_class_type(void);

#if INDEX
#define Filename_C_get_class_type_i_v Filename$117$get_class_type
#endif

// C++ _inCAAAA_r_i() ==> Filename$_$init_type()()
extern void Filename$118$init_type(void);

#if INDEX
#define Filename_C_init_type_v_v Filename$118$init_type
#endif


// Fog

// C++ _inCAAAAzFvF(std::string const &name) ==> Fog$_$Fog(char const *param0)(char const *)
extern Fog * Fog$1$Fog(char const *name);

#if INDEX
#define Fog_C_ctor_p_s Fog$1$Fog
#endif

// C++ _inCAAAAvuvC(LMatrix4 const &mat) ==> Fog$_$xform(Fog *param0, LMatrix4 const *param1)(Fog *, LMatrix4 const *)
extern void Fog$2$xform(Fog *self, LMatrix4 const *mat);

#if INDEX
#define Fog_C_xform_v_pp Fog$2$xform
#endif

// C++ _inCAAAANq_P() ==> Fog$_$get_mode(Fog const *param0)(Fog const *)
extern Fog$_Mode Fog$3$get_mode(Fog const *self);

#if INDEX
#define Fog_C_get_mode_p_p Fog$3$get_mode
#endif

// C++ _inCAAAAGgPt(Fog::Mode mode) ==> Fog$_$set_mode(Fog *param0, Fog::Mode param1)(Fog *, Fog::Mode)
extern void Fog$4$set_mode(Fog *self, Fog$_Mode mode);

#if INDEX
#define Fog_C_set_mode_v_pp Fog$4$set_mode
#endif

// C++ _inCAAAARSgO() ==> Fog$_$get_color(Fog const *param0)(Fog const *)
extern LColor const * Fog$5$get_color(Fog const *self);

#if INDEX
#define Fog_C_get_color_p_p Fog$5$get_color
#endif

// C++ _inCAAAAj5NA(LColor const &color) ==> Fog$_$set_color(Fog *param0, LColor const *param1)(Fog *, LColor const *)
extern void Fog$6$set_color(Fog *self, LColor const *color);

#if INDEX
#define Fog_C_set_color_v_pp Fog$6$set_color
#endif

// C++ _inCAAAADs_X(PN_stdfloat r, PN_stdfloat g, PN_stdfloat b) ==> Fog$_$set_color(Fog *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3)(Fog *, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void Fog$7$set_color(Fog *self, PN_stdfloat r, PN_stdfloat g, PN_stdfloat b);

#if INDEX
#define Fog_C_set_color_v_pfff Fog$7$set_color
#endif

// C++ _inCAAAA0kVN(PN_stdfloat onset, PN_stdfloat opaque) ==> Fog$_$set_linear_range(Fog *param0, PN_stdfloat param1, PN_stdfloat param2)(Fog *, PN_stdfloat, PN_stdfloat)
extern void Fog$8$set_linear_range(Fog *self, PN_stdfloat onset, PN_stdfloat opaque);

#if INDEX
#define Fog_C_set_linear_range_v_pff Fog$8$set_linear_range
#endif

// C++ _inCAAAA9LTt() ==> Fog$_$get_linear_onset_point(Fog const *param0)(Fog const *)
extern LPoint3 const * Fog$9$get_linear_onset_point(Fog const *self);

#if INDEX
#define Fog_C_get_linear_onset_point_p_p Fog$9$get_linear_onset_point
#endif

// C++ _inCAAAAv6E_(LPoint3 const &linear_onset_point) ==> Fog$_$set_linear_onset_point(Fog *param0, LPoint3 const *param1)(Fog *, LPoint3 const *)
extern void Fog$10$set_linear_onset_point(Fog *self, LPoint3 const *linear_onset_point);

#if INDEX
#define Fog_C_set_linear_onset_point_v_pp Fog$10$set_linear_onset_point
#endif

// C++ _inCAAAAlav2(PN_stdfloat x, PN_stdfloat y, PN_stdfloat z) ==> Fog$_$set_linear_onset_point(Fog *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3)(Fog *, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void Fog$11$set_linear_onset_point(Fog *self, PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);

#if INDEX
#define Fog_C_set_linear_onset_point_v_pfff Fog$11$set_linear_onset_point
#endif

// C++ _inCAAAAjQae() ==> Fog$_$get_linear_opaque_point(Fog const *param0)(Fog const *)
extern LPoint3 const * Fog$12$get_linear_opaque_point(Fog const *self);

#if INDEX
#define Fog_C_get_linear_opaque_point_p_p Fog$12$get_linear_opaque_point
#endif

// C++ _inCAAAAIH2I(LPoint3 const &linear_opaque_point) ==> Fog$_$set_linear_opaque_point(Fog *param0, LPoint3 const *param1)(Fog *, LPoint3 const *)
extern void Fog$13$set_linear_opaque_point(Fog *self, LPoint3 const *linear_opaque_point);

#if INDEX
#define Fog_C_set_linear_opaque_point_v_pp Fog$13$set_linear_opaque_point
#endif

// C++ _inCAAAA5AEB(PN_stdfloat x, PN_stdfloat y, PN_stdfloat z) ==> Fog$_$set_linear_opaque_point(Fog *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3)(Fog *, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void Fog$14$set_linear_opaque_point(Fog *self, PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);

#if INDEX
#define Fog_C_set_linear_opaque_point_v_pfff Fog$14$set_linear_opaque_point
#endif

// C++ _inCAAAA7Y5e(PN_stdfloat angle, PN_stdfloat onset, PN_stdfloat opaque) ==> Fog$_$set_linear_fallback(Fog *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3)(Fog *, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void Fog$15$set_linear_fallback(Fog *self, PN_stdfloat angle, PN_stdfloat onset, PN_stdfloat opaque);

#if INDEX
#define Fog_C_set_linear_fallback_v_pfff Fog$15$set_linear_fallback
#endif

// C++ _inCAAAAE35n() ==> Fog$_$get_exp_density(Fog const *param0)(Fog const *)
extern PN_stdfloat Fog$16$get_exp_density(Fog const *self);

#if INDEX
#define Fog_C_get_exp_density_f_p Fog$16$get_exp_density
#endif

// C++ _inCAAAAf7po(PN_stdfloat exp_density) ==> Fog$_$set_exp_density(Fog *param0, PN_stdfloat param1)(Fog *, PN_stdfloat)
extern void Fog$17$set_exp_density(Fog *self, PN_stdfloat exp_density);

#if INDEX
#define Fog_C_set_exp_density_v_pf Fog$17$set_exp_density
#endif

// C++ _inCAAAAfXKO(TransformState const *camera_transform) ==> Fog$_$adjust_to_camera(Fog *param0, TransformState const *param1)(Fog *, TransformState const *)
extern void Fog$18$adjust_to_camera(Fog *self, TransformState const *camera_transform);

#if INDEX
#define Fog_C_adjust_to_camera_v_pp Fog$18$adjust_to_camera
#endif

// C++ _inCAAAAJQI7() ==> Fog$_$register_with_read_factory()()
extern void Fog$19$register_with_read_factory(void);

#if INDEX
#define Fog_C_register_with_read_factory_v_v Fog$19$register_with_read_factory
#endif

// C++ _inCAAAAp6eO(BamWriter *manager, Datagram &dg) ==> Fog$_$write_datagram(Fog *param0, BamWriter *param1, Datagram *param2)(Fog *, BamWriter *, Datagram *)
extern void Fog$20$write_datagram(Fog *self, BamWriter *manager, Datagram *dg);

#if INDEX
#define Fog_C_write_datagram_v_ppp Fog$20$write_datagram
#endif

// C++ _inCAAAAfLii() ==> Fog$_$get_class_type()()
extern int Fog$21$get_class_type(void);

#if INDEX
#define Fog_C_get_class_type_i_v Fog$21$get_class_type
#endif

// C++ _inCAAAA86zx() ==> Fog$_$init_type()()
extern void Fog$22$init_type(void);

#if INDEX
#define Fog_C_init_type_v_v Fog$22$init_type
#endif

// C++ _inCAAAAbiE2() ==> Fog$_$get_type(Fog const *param0)(Fog const *)
extern int Fog$23$get_type(Fog const *self);

#if INDEX
#define Fog_C_get_type_i_p Fog$23$get_type
#endif

// C++ _inCAAAAN8pQ() ==> Fog$_$force_init_type(Fog *param0)(Fog *)
extern int Fog$24$force_init_type(Fog *self);

#if INDEX
#define Fog_C_force_init_type_i_p Fog$24$force_init_type
#endif


// FrameBufferProperties

// C++ _inCAAAA6uCK() ==> FrameBufferProperties$_$get_depth_bits(FrameBufferProperties const *param0)(FrameBufferProperties const *)
extern int FrameBufferProperties$1$get_depth_bits(FrameBufferProperties const *self);

#if INDEX
#define FrameBufferProperties_C_get_depth_bits_i_p FrameBufferProperties$1$get_depth_bits
#endif

// C++ _inCAAAAp9ex() ==> FrameBufferProperties$_$get_color_bits(FrameBufferProperties const *param0)(FrameBufferProperties const *)
extern int FrameBufferProperties$2$get_color_bits(FrameBufferProperties const *self);

#if INDEX
#define FrameBufferProperties_C_get_color_bits_i_p FrameBufferProperties$2$get_color_bits
#endif

// C++ _inCAAAA5QAD() ==> FrameBufferProperties$_$get_red_bits(FrameBufferProperties const *param0)(FrameBufferProperties const *)
extern int FrameBufferProperties$3$get_red_bits(FrameBufferProperties const *self);

#if INDEX
#define FrameBufferProperties_C_get_red_bits_i_p FrameBufferProperties$3$get_red_bits
#endif

// C++ _inCAAAAQvTg() ==> FrameBufferProperties$_$get_green_bits(FrameBufferProperties const *param0)(FrameBufferProperties const *)
extern int FrameBufferProperties$4$get_green_bits(FrameBufferProperties const *self);

#if INDEX
#define FrameBufferProperties_C_get_green_bits_i_p FrameBufferProperties$4$get_green_bits
#endif

// C++ _inCAAAA641f() ==> FrameBufferProperties$_$get_blue_bits(FrameBufferProperties const *param0)(FrameBufferProperties const *)
extern int FrameBufferProperties$5$get_blue_bits(FrameBufferProperties const *self);

#if INDEX
#define FrameBufferProperties_C_get_blue_bits_i_p FrameBufferProperties$5$get_blue_bits
#endif

// C++ _inCAAAAYuZb() ==> FrameBufferProperties$_$get_alpha_bits(FrameBufferProperties const *param0)(FrameBufferProperties const *)
extern int FrameBufferProperties$6$get_alpha_bits(FrameBufferProperties const *self);

#if INDEX
#define FrameBufferProperties_C_get_alpha_bits_i_p FrameBufferProperties$6$get_alpha_bits
#endif

// C++ _inCAAAACuvJ() ==> FrameBufferProperties$_$get_stencil_bits(FrameBufferProperties const *param0)(FrameBufferProperties const *)
extern int FrameBufferProperties$7$get_stencil_bits(FrameBufferProperties const *self);

#if INDEX
#define FrameBufferProperties_C_get_stencil_bits_i_p FrameBufferProperties$7$get_stencil_bits
#endif

// C++ _inCAAAAzcaD() ==> FrameBufferProperties$_$get_accum_bits(FrameBufferProperties const *param0)(FrameBufferProperties const *)
extern int FrameBufferProperties$8$get_accum_bits(FrameBufferProperties const *self);

#if INDEX
#define FrameBufferProperties_C_get_accum_bits_i_p FrameBufferProperties$8$get_accum_bits
#endif

// C++ _inCAAAAi42A() ==> FrameBufferProperties$_$get_aux_rgba(FrameBufferProperties const *param0)(FrameBufferProperties const *)
extern int FrameBufferProperties$9$get_aux_rgba(FrameBufferProperties const *self);

#if INDEX
#define FrameBufferProperties_C_get_aux_rgba_i_p FrameBufferProperties$9$get_aux_rgba
#endif

// C++ _inCAAAA6m6B() ==> FrameBufferProperties$_$get_aux_hrgba(FrameBufferProperties const *param0)(FrameBufferProperties const *)
extern int FrameBufferProperties$10$get_aux_hrgba(FrameBufferProperties const *self);

#if INDEX
#define FrameBufferProperties_C_get_aux_hrgba_i_p FrameBufferProperties$10$get_aux_hrgba
#endif

// C++ _inCAAAAFEoX() ==> FrameBufferProperties$_$get_aux_float(FrameBufferProperties const *param0)(FrameBufferProperties const *)
extern int FrameBufferProperties$11$get_aux_float(FrameBufferProperties const *self);

#if INDEX
#define FrameBufferProperties_C_get_aux_float_i_p FrameBufferProperties$11$get_aux_float
#endif

// C++ _inCAAAASH90() ==> FrameBufferProperties$_$get_multisamples(FrameBufferProperties const *param0)(FrameBufferProperties const *)
extern int FrameBufferProperties$12$get_multisamples(FrameBufferProperties const *self);

#if INDEX
#define FrameBufferProperties_C_get_multisamples_i_p FrameBufferProperties$12$get_multisamples
#endif

// C++ _inCAAAA1QBe() ==> FrameBufferProperties$_$get_coverage_samples(FrameBufferProperties const *param0)(FrameBufferProperties const *)
extern int FrameBufferProperties$13$get_coverage_samples(FrameBufferProperties const *self);

#if INDEX
#define FrameBufferProperties_C_get_coverage_samples_i_p FrameBufferProperties$13$get_coverage_samples
#endif

// C++ _inCAAAAn2ht() ==> FrameBufferProperties$_$get_back_buffers(FrameBufferProperties const *param0)(FrameBufferProperties const *)
extern int FrameBufferProperties$14$get_back_buffers(FrameBufferProperties const *self);

#if INDEX
#define FrameBufferProperties_C_get_back_buffers_i_p FrameBufferProperties$14$get_back_buffers
#endif

// C++ _inCAAAAQkg0() ==> FrameBufferProperties$_$get_indexed_color(FrameBufferProperties const *param0)(FrameBufferProperties const *)
extern bool FrameBufferProperties$15$get_indexed_color(FrameBufferProperties const *self);

#if INDEX
#define FrameBufferProperties_C_get_indexed_color_B_p FrameBufferProperties$15$get_indexed_color
#endif

// C++ _inCAAAA7V7R() ==> FrameBufferProperties$_$get_rgb_color(FrameBufferProperties const *param0)(FrameBufferProperties const *)
extern bool FrameBufferProperties$16$get_rgb_color(FrameBufferProperties const *self);

#if INDEX
#define FrameBufferProperties_C_get_rgb_color_B_p FrameBufferProperties$16$get_rgb_color
#endif

// C++ _inCAAAA1KER() ==> FrameBufferProperties$_$get_stereo(FrameBufferProperties const *param0)(FrameBufferProperties const *)
extern bool FrameBufferProperties$17$get_stereo(FrameBufferProperties const *self);

#if INDEX
#define FrameBufferProperties_C_get_stereo_B_p FrameBufferProperties$17$get_stereo
#endif

// C++ _inCAAAAmgiH() ==> FrameBufferProperties$_$get_force_hardware(FrameBufferProperties const *param0)(FrameBufferProperties const *)
extern bool FrameBufferProperties$18$get_force_hardware(FrameBufferProperties const *self);

#if INDEX
#define FrameBufferProperties_C_get_force_hardware_B_p FrameBufferProperties$18$get_force_hardware
#endif

// C++ _inCAAAAI_F1() ==> FrameBufferProperties$_$get_force_software(FrameBufferProperties const *param0)(FrameBufferProperties const *)
extern bool FrameBufferProperties$19$get_force_software(FrameBufferProperties const *self);

#if INDEX
#define FrameBufferProperties_C_get_force_software_B_p FrameBufferProperties$19$get_force_software
#endif

// C++ _inCAAAABmVi() ==> FrameBufferProperties$_$get_srgb_color(FrameBufferProperties const *param0)(FrameBufferProperties const *)
extern bool FrameBufferProperties$20$get_srgb_color(FrameBufferProperties const *self);

#if INDEX
#define FrameBufferProperties_C_get_srgb_color_B_p FrameBufferProperties$20$get_srgb_color
#endif

// C++ _inCAAAAi3on() ==> FrameBufferProperties$_$get_float_color(FrameBufferProperties const *param0)(FrameBufferProperties const *)
extern bool FrameBufferProperties$21$get_float_color(FrameBufferProperties const *self);

#if INDEX
#define FrameBufferProperties_C_get_float_color_B_p FrameBufferProperties$21$get_float_color
#endif

// C++ _inCAAAApwLM() ==> FrameBufferProperties$_$get_float_depth(FrameBufferProperties const *param0)(FrameBufferProperties const *)
extern bool FrameBufferProperties$22$get_float_depth(FrameBufferProperties const *self);

#if INDEX
#define FrameBufferProperties_C_get_float_depth_B_p FrameBufferProperties$22$get_float_depth
#endif

// C++ _inCAAAA4McT(int n) ==> FrameBufferProperties$_$set_depth_bits(FrameBufferProperties *param0, int param1)(FrameBufferProperties *, int)
extern void FrameBufferProperties$23$set_depth_bits(FrameBufferProperties *self, int n);

#if INDEX
#define FrameBufferProperties_C_set_depth_bits_v_pi FrameBufferProperties$23$set_depth_bits
#endif

// C++ _inCAAAAgD26(int n) ==> FrameBufferProperties$_$set_color_bits(FrameBufferProperties *param0, int param1)(FrameBufferProperties *, int)
extern void FrameBufferProperties$24$set_color_bits(FrameBufferProperties *self, int n);

#if INDEX
#define FrameBufferProperties_C_set_color_bits_v_pi FrameBufferProperties$24$set_color_bits
#endif

// C++ _inCAAAAkJPN(int r, int g, int b, int a) ==> FrameBufferProperties$_$set_rgba_bits(FrameBufferProperties *param0, int param1, int param2, int param3, int param4)(FrameBufferProperties *, int, int, int, int)
extern void FrameBufferProperties$25$set_rgba_bits(FrameBufferProperties *self, int r, int g, int b, int a);

#if INDEX
#define FrameBufferProperties_C_set_rgba_bits_v_piiii FrameBufferProperties$25$set_rgba_bits
#endif

// C++ _inCAAAA2pP2(int n) ==> FrameBufferProperties$_$set_red_bits(FrameBufferProperties *param0, int param1)(FrameBufferProperties *, int)
extern void FrameBufferProperties$26$set_red_bits(FrameBufferProperties *self, int n);

#if INDEX
#define FrameBufferProperties_C_set_red_bits_v_pi FrameBufferProperties$26$set_red_bits
#endif

// C++ _inCAAAAJyqp(int n) ==> FrameBufferProperties$_$set_green_bits(FrameBufferProperties *param0, int param1)(FrameBufferProperties *, int)
extern void FrameBufferProperties$27$set_green_bits(FrameBufferProperties *self, int n);

#if INDEX
#define FrameBufferProperties_C_set_green_bits_v_pi FrameBufferProperties$27$set_green_bits
#endif

// C++ _inCAAAAlx3u(int n) ==> FrameBufferProperties$_$set_blue_bits(FrameBufferProperties *param0, int param1)(FrameBufferProperties *, int)
extern void FrameBufferProperties$28$set_blue_bits(FrameBufferProperties *self, int n);

#if INDEX
#define FrameBufferProperties_C_set_blue_bits_v_pi FrameBufferProperties$28$set_blue_bits
#endif

// C++ _inCAAAAjyyk(int n) ==> FrameBufferProperties$_$set_alpha_bits(FrameBufferProperties *param0, int param1)(FrameBufferProperties *, int)
extern void FrameBufferProperties$29$set_alpha_bits(FrameBufferProperties *self, int n);

#if INDEX
#define FrameBufferProperties_C_set_alpha_bits_v_pi FrameBufferProperties$29$set_alpha_bits
#endif

// C++ _inCAAAAwbci(int n) ==> FrameBufferProperties$_$set_stencil_bits(FrameBufferProperties *param0, int param1)(FrameBufferProperties *, int)
extern void FrameBufferProperties$30$set_stencil_bits(FrameBufferProperties *self, int n);

#if INDEX
#define FrameBufferProperties_C_set_stencil_bits_v_pi FrameBufferProperties$30$set_stencil_bits
#endif

// C++ _inCAAAA2I1M(int n) ==> FrameBufferProperties$_$set_accum_bits(FrameBufferProperties *param0, int param1)(FrameBufferProperties *, int)
extern void FrameBufferProperties$31$set_accum_bits(FrameBufferProperties *self, int n);

#if INDEX
#define FrameBufferProperties_C_set_accum_bits_v_pi FrameBufferProperties$31$set_accum_bits
#endif

// C++ _inCAAAAIVH0(int n) ==> FrameBufferProperties$_$set_aux_rgba(FrameBufferProperties *param0, int param1)(FrameBufferProperties *, int)
extern void FrameBufferProperties$32$set_aux_rgba(FrameBufferProperties *self, int n);

#if INDEX
#define FrameBufferProperties_C_set_aux_rgba_v_pi FrameBufferProperties$32$set_aux_rgba
#endif

// C++ _inCAAAAJ2_Q(int n) ==> FrameBufferProperties$_$set_aux_hrgba(FrameBufferProperties *param0, int param1)(FrameBufferProperties *, int)
extern void FrameBufferProperties$33$set_aux_hrgba(FrameBufferProperties *self, int n);

#if INDEX
#define FrameBufferProperties_C_set_aux_hrgba_v_pi FrameBufferProperties$33$set_aux_hrgba
#endif

// C++ _inCAAAAqLrm(int n) ==> FrameBufferProperties$_$set_aux_float(FrameBufferProperties *param0, int param1)(FrameBufferProperties *, int)
extern void FrameBufferProperties$34$set_aux_float(FrameBufferProperties *self, int n);

#if INDEX
#define FrameBufferProperties_C_set_aux_float_v_pi FrameBufferProperties$34$set_aux_float
#endif

// C++ _inCAAAA6_qN(int n) ==> FrameBufferProperties$_$set_multisamples(FrameBufferProperties *param0, int param1)(FrameBufferProperties *, int)
extern void FrameBufferProperties$35$set_multisamples(FrameBufferProperties *self, int n);

#if INDEX
#define FrameBufferProperties_C_set_multisamples_v_pi FrameBufferProperties$35$set_multisamples
#endif

// C++ _inCAAAAmvEd(int n) ==> FrameBufferProperties$_$set_coverage_samples(FrameBufferProperties *param0, int param1)(FrameBufferProperties *, int)
extern void FrameBufferProperties$36$set_coverage_samples(FrameBufferProperties *self, int n);

#if INDEX
#define FrameBufferProperties_C_set_coverage_samples_v_pi FrameBufferProperties$36$set_coverage_samples
#endif

// C++ _inCAAAAcsOG(int n) ==> FrameBufferProperties$_$set_back_buffers(FrameBufferProperties *param0, int param1)(FrameBufferProperties *, int)
extern void FrameBufferProperties$37$set_back_buffers(FrameBufferProperties *self, int n);

#if INDEX
#define FrameBufferProperties_C_set_back_buffers_v_pi FrameBufferProperties$37$set_back_buffers
#endif

// C++ _inCAAAANnI5(bool n) ==> FrameBufferProperties$_$set_indexed_color(FrameBufferProperties *param0, bool param1)(FrameBufferProperties *, bool)
extern void FrameBufferProperties$38$set_indexed_color(FrameBufferProperties *self, bool n);

#if INDEX
#define FrameBufferProperties_C_set_indexed_color_v_pB FrameBufferProperties$38$set_indexed_color
#endif

// C++ _inCAAAAoLwD(bool n) ==> FrameBufferProperties$_$set_rgb_color(FrameBufferProperties *param0, bool param1)(FrameBufferProperties *, bool)
extern void FrameBufferProperties$39$set_rgb_color(FrameBufferProperties *self, bool n);

#if INDEX
#define FrameBufferProperties_C_set_rgb_color_v_pB FrameBufferProperties$39$set_rgb_color
#endif

// C++ _inCAAAAkw5k(bool n) ==> FrameBufferProperties$_$set_stereo(FrameBufferProperties *param0, bool param1)(FrameBufferProperties *, bool)
extern void FrameBufferProperties$40$set_stereo(FrameBufferProperties *self, bool n);

#if INDEX
#define FrameBufferProperties_C_set_stereo_v_pB FrameBufferProperties$40$set_stereo
#endif

// C++ _inCAAAA1_ND(bool n) ==> FrameBufferProperties$_$set_force_hardware(FrameBufferProperties *param0, bool param1)(FrameBufferProperties *, bool)
extern void FrameBufferProperties$41$set_force_hardware(FrameBufferProperties *self, bool n);

#if INDEX
#define FrameBufferProperties_C_set_force_hardware_v_pB FrameBufferProperties$41$set_force_hardware
#endif

// C++ _inCAAAAtZww(bool n) ==> FrameBufferProperties$_$set_force_software(FrameBufferProperties *param0, bool param1)(FrameBufferProperties *, bool)
extern void FrameBufferProperties$42$set_force_software(FrameBufferProperties *self, bool n);

#if INDEX
#define FrameBufferProperties_C_set_force_software_v_pB FrameBufferProperties$42$set_force_software
#endif

// C++ _inCAAAAxQEF(bool n) ==> FrameBufferProperties$_$set_srgb_color(FrameBufferProperties *param0, bool param1)(FrameBufferProperties *, bool)
extern void FrameBufferProperties$43$set_srgb_color(FrameBufferProperties *self, bool n);

#if INDEX
#define FrameBufferProperties_C_set_srgb_color_v_pB FrameBufferProperties$43$set_srgb_color
#endif

// C++ _inCAAAAh1Rn(bool n) ==> FrameBufferProperties$_$set_float_color(FrameBufferProperties *param0, bool param1)(FrameBufferProperties *, bool)
extern void FrameBufferProperties$44$set_float_color(FrameBufferProperties *self, bool n);

#if INDEX
#define FrameBufferProperties_C_set_float_color_v_pB FrameBufferProperties$44$set_float_color
#endif

// C++ _inCAAAA_s0L(bool n) ==> FrameBufferProperties$_$set_float_depth(FrameBufferProperties *param0, bool param1)(FrameBufferProperties *, bool)
extern void FrameBufferProperties$45$set_float_depth(FrameBufferProperties *self, bool n);

#if INDEX
#define FrameBufferProperties_C_set_float_depth_v_pB FrameBufferProperties$45$set_float_depth
#endif

// C++ _inCAAAA0P03() ==> FrameBufferProperties$_$FrameBufferProperties()()
extern FrameBufferProperties * FrameBufferProperties$46$FrameBufferProperties(void);

#if INDEX
#define FrameBufferProperties_C_ctor_p_v FrameBufferProperties$46$FrameBufferProperties
#endif

// C++ _inCAAAAOlPt(FrameBufferProperties const &) ==> FrameBufferProperties$_$FrameBufferProperties(FrameBufferProperties const *param0)(FrameBufferProperties const *)
extern FrameBufferProperties * FrameBufferProperties$47$FrameBufferProperties(FrameBufferProperties const *arg0);

#if INDEX
#define FrameBufferProperties_C_ctor_p_p FrameBufferProperties$47$FrameBufferProperties
#endif

// C++ _inCAAAAFGOb() ==> FrameBufferProperties$_$get_default()()
extern FrameBufferProperties const * FrameBufferProperties$48$get_default(void);

#if INDEX
#define FrameBufferProperties_C_get_default_p_v FrameBufferProperties$48$get_default
#endif

// C++ _inCAAAAfz7q() ==> FrameBufferProperties$_$clear(FrameBufferProperties *param0)(FrameBufferProperties *)
extern void FrameBufferProperties$49$clear(FrameBufferProperties *self);

#if INDEX
#define FrameBufferProperties_C_clear_v_p FrameBufferProperties$49$clear
#endif

// C++ _inCAAAAzSla() ==> FrameBufferProperties$_$set_all_specified(FrameBufferProperties *param0)(FrameBufferProperties *)
extern void FrameBufferProperties$50$set_all_specified(FrameBufferProperties *self);

#if INDEX
#define FrameBufferProperties_C_set_all_specified_v_p FrameBufferProperties$50$set_all_specified
#endif

// C++ _inCAAAArBZu(FrameBufferProperties const &other) ==> FrameBufferProperties$_$subsumes(FrameBufferProperties const *param0, FrameBufferProperties const *param1)(FrameBufferProperties const *, FrameBufferProperties const *)
extern bool FrameBufferProperties$51$subsumes(FrameBufferProperties const *self, FrameBufferProperties const *other);

#if INDEX
#define FrameBufferProperties_C_subsumes_B_pp FrameBufferProperties$51$subsumes
#endif

// C++ _inCAAAAHaxr(FrameBufferProperties const &other) ==> FrameBufferProperties$_$add_properties(FrameBufferProperties *param0, FrameBufferProperties const *param1)(FrameBufferProperties *, FrameBufferProperties const *)
extern void FrameBufferProperties$52$add_properties(FrameBufferProperties *self, FrameBufferProperties const *other);

#if INDEX
#define FrameBufferProperties_C_add_properties_v_pp FrameBufferProperties$52$add_properties
#endif

// C++ _inCAAAAxfF7(std::ostream &out) ==> FrameBufferProperties$_$output(FrameBufferProperties const *param0, std::ostream *param1)(FrameBufferProperties const *, std::ostream *)
extern void FrameBufferProperties$53$output(FrameBufferProperties const *self, std$_ostream *out);

#if INDEX
#define FrameBufferProperties_C_output_v_pp FrameBufferProperties$53$output
#endif

// C++ _inCAAAAs3_4() ==> FrameBufferProperties$_$set_one_bit_per_channel(FrameBufferProperties *param0)(FrameBufferProperties *)
extern void FrameBufferProperties$54$set_one_bit_per_channel(FrameBufferProperties *self);

#if INDEX
#define FrameBufferProperties_C_set_one_bit_per_channel_v_p FrameBufferProperties$54$set_one_bit_per_channel
#endif

// C++ _inCAAAAx4ZJ() ==> FrameBufferProperties$_$is_stereo(FrameBufferProperties const *param0)(FrameBufferProperties const *)
extern bool FrameBufferProperties$55$is_stereo(FrameBufferProperties const *self);

#if INDEX
#define FrameBufferProperties_C_is_stereo_B_p FrameBufferProperties$55$is_stereo
#endif

// C++ _inCAAAAWlX5() ==> FrameBufferProperties$_$is_single_buffered(FrameBufferProperties const *param0)(FrameBufferProperties const *)
extern bool FrameBufferProperties$56$is_single_buffered(FrameBufferProperties const *self);

#if INDEX
#define FrameBufferProperties_C_is_single_buffered_B_p FrameBufferProperties$56$is_single_buffered
#endif

// C++ _inCAAAAJ6K8(FrameBufferProperties const &reqs) ==> FrameBufferProperties$_$get_quality(FrameBufferProperties const *param0, FrameBufferProperties const *param1)(FrameBufferProperties const *, FrameBufferProperties const *)
extern int FrameBufferProperties$57$get_quality(FrameBufferProperties const *self, FrameBufferProperties const *reqs);

#if INDEX
#define FrameBufferProperties_C_get_quality_i_pp FrameBufferProperties$57$get_quality
#endif

// C++ _inCAAAA5Lag() ==> FrameBufferProperties$_$is_any_specified(FrameBufferProperties const *param0)(FrameBufferProperties const *)
extern bool FrameBufferProperties$58$is_any_specified(FrameBufferProperties const *self);

#if INDEX
#define FrameBufferProperties_C_is_any_specified_B_p FrameBufferProperties$58$is_any_specified
#endif

// C++ _inCAAAAByA7() ==> FrameBufferProperties$_$is_basic(FrameBufferProperties const *param0)(FrameBufferProperties const *)
extern bool FrameBufferProperties$59$is_basic(FrameBufferProperties const *self);

#if INDEX
#define FrameBufferProperties_C_is_basic_B_p FrameBufferProperties$59$is_basic
#endif

// C++ _inCAAAATi5r() ==> FrameBufferProperties$_$get_aux_mask(FrameBufferProperties const *param0)(FrameBufferProperties const *)
extern int FrameBufferProperties$60$get_aux_mask(FrameBufferProperties const *self);

#if INDEX
#define FrameBufferProperties_C_get_aux_mask_i_p FrameBufferProperties$60$get_aux_mask
#endif

// C++ _inCAAAAFEQC() ==> FrameBufferProperties$_$get_buffer_mask(FrameBufferProperties const *param0)(FrameBufferProperties const *)
extern int FrameBufferProperties$61$get_buffer_mask(FrameBufferProperties const *self);

#if INDEX
#define FrameBufferProperties_C_get_buffer_mask_i_p FrameBufferProperties$61$get_buffer_mask
#endif

// C++ _inCAAAAw54T(FrameBufferProperties const &props, std::string const &renderer) ==> FrameBufferProperties$_$verify_hardware_software(FrameBufferProperties const *param0, FrameBufferProperties const *param1, char const *param2)(FrameBufferProperties const *, FrameBufferProperties const *, char const *)
extern bool FrameBufferProperties$62$verify_hardware_software(FrameBufferProperties const *self, FrameBufferProperties const *props, char const *renderer);

#if INDEX
#define FrameBufferProperties_C_verify_hardware_software_B_pps FrameBufferProperties$62$verify_hardware_software
#endif

// C++ _inCAAAAv7ob(Texture *tex) ==> FrameBufferProperties$_$setup_color_texture(FrameBufferProperties const *param0, Texture *param1)(FrameBufferProperties const *, Texture *)
extern bool FrameBufferProperties$63$setup_color_texture(FrameBufferProperties const *self, Texture *tex);

#if INDEX
#define FrameBufferProperties_C_setup_color_texture_B_pp FrameBufferProperties$63$setup_color_texture
#endif

// C++ _inCAAAA_Hak(Texture *tex) ==> FrameBufferProperties$_$setup_depth_texture(FrameBufferProperties const *param0, Texture *param1)(FrameBufferProperties const *, Texture *)
extern bool FrameBufferProperties$64$setup_depth_texture(FrameBufferProperties const *self, Texture *tex);

#if INDEX
#define FrameBufferProperties_C_setup_depth_texture_B_pp FrameBufferProperties$64$setup_depth_texture
#endif


// Geom

// C++ _inCAAAAMO36() ==> Geom$_$upcast_to_CopyOnWriteObject(Geom *param0)(Geom *)
extern CopyOnWriteObject * Geom$1$upcast_to_CopyOnWriteObject(Geom *self);

#if INDEX
#define Geom_C_upcast_to_CopyOnWriteObject_p_p Geom$1$upcast_to_CopyOnWriteObject
#endif

// C++ _inCAAAA9JLK() ==> Geom$_$upcast_to_GeomEnums(Geom *param0)(Geom *)
extern GeomEnums * Geom$2$upcast_to_GeomEnums(Geom *self);

#if INDEX
#define Geom_C_upcast_to_GeomEnums_p_p Geom$2$upcast_to_GeomEnums
#endif

// C++ _inCAAAAA5hw(GeomVertexData const *data) ==> Geom$_$Geom(GeomVertexData const *param0)(GeomVertexData const *)
extern Geom * Geom$3$Geom(GeomVertexData const *data);

#if INDEX
#define Geom_C_ctor_p_p Geom$3$Geom
#endif

// C++ _inCAAAAIdD3() ==> Geom$_$make_copy(Geom const *param0)(Geom const *)
extern Geom * Geom$4$make_copy(Geom const *self);

#if INDEX
#define Geom_C_make_copy_p_p Geom$4$make_copy
#endif

// C++ _inCAAAAznC4() ==> Geom$_$get_primitive_type(Geom const *param0)(Geom const *)
extern GeomEnums$_PrimitiveType Geom$5$get_primitive_type(Geom const *self);

#if INDEX
#define Geom_C_get_primitive_type_p_p Geom$5$get_primitive_type
#endif

// C++ _inCAAAAhDDD() ==> Geom$_$get_shade_model(Geom const *param0)(Geom const *)
extern GeomEnums$_ShadeModel Geom$6$get_shade_model(Geom const *self);

#if INDEX
#define Geom_C_get_shade_model_p_p Geom$6$get_shade_model
#endif

// C++ _inCAAAA18Ae() ==> Geom$_$get_geom_rendering(Geom const *param0)(Geom const *)
extern int Geom$7$get_geom_rendering(Geom const *self);

#if INDEX
#define Geom_C_get_geom_rendering_i_p Geom$7$get_geom_rendering
#endif

// C++ _inCAAAAiZFS() ==> Geom$_$get_usage_hint(Geom const *param0)(Geom const *)
extern GeomEnums$_UsageHint Geom$8$get_usage_hint(Geom const *self);

#if INDEX
#define Geom_C_get_usage_hint_p_p Geom$8$get_usage_hint
#endif

// C++ _inCAAAASB4T(GeomEnums::UsageHint usage_hint) ==> Geom$_$set_usage_hint(Geom *param0, GeomEnums::UsageHint param1)(Geom *, GeomEnums::UsageHint)
extern void Geom$9$set_usage_hint(Geom *self, GeomEnums$_UsageHint usage_hint);

#if INDEX
#define Geom_C_set_usage_hint_v_pp Geom$9$set_usage_hint
#endif

// C++ _inCAAAAlhS_(Thread *current_thread) ==> Geom$_$get_vertex_data(Geom const *param0, Thread *param1)(Geom const *, Thread *)
extern char ** Geom$10$get_vertex_data(Geom const *self, Thread *current_thread);

#if INDEX
#define Geom_C_get_vertex_data_p_pp Geom$10$get_vertex_data
#endif

// C++ _inCAAAAohq0() ==> Geom$_$get_vertex_data(Geom const *param0)(Geom const *)
extern char ** Geom$11$get_vertex_data(Geom const *self);

#if INDEX
#define Geom_C_get_vertex_data_p_p Geom$11$get_vertex_data
#endif

// C++ _inCAAAAAtYT() ==> Geom$_$modify_vertex_data(Geom *param0)(Geom *)
extern char ** Geom$12$modify_vertex_data(Geom *self);

#if INDEX
#define Geom_C_modify_vertex_data_p_p Geom$12$modify_vertex_data
#endif

// C++ _inCAAAAWBrG(GeomVertexData const *data) ==> Geom$_$set_vertex_data(Geom *param0, GeomVertexData const *param1)(Geom *, GeomVertexData const *)
extern void Geom$13$set_vertex_data(Geom *self, GeomVertexData const *data);

#if INDEX
#define Geom_C_set_vertex_data_v_pp Geom$13$set_vertex_data
#endif

// C++ _inCAAAACOPz(GeomVertexData const *data, int offset) ==> Geom$_$offset_vertices(Geom *param0, GeomVertexData const *param1, int param2)(Geom *, GeomVertexData const *, int)
extern void Geom$14$offset_vertices(Geom *self, GeomVertexData const *data, int offset);

#if INDEX
#define Geom_C_offset_vertices_v_ppi Geom$14$offset_vertices
#endif

// C++ _inCAAAAM2BD(bool composite_only) ==> Geom$_$make_nonindexed(Geom *param0, bool param1)(Geom *, bool)
extern int Geom$15$make_nonindexed(Geom *self, bool composite_only);

#if INDEX
#define Geom_C_make_nonindexed_i_pB Geom$15$make_nonindexed
#endif

// C++ _inCAAAAlA_H(bool force, Thread *current_thread) ==> Geom$_$get_animated_vertex_data(Geom const *param0, bool param1, Thread *param2)(Geom const *, bool, Thread *)
extern char ** Geom$16$get_animated_vertex_data(Geom const *self, bool force, Thread *current_thread);

#if INDEX
#define Geom_C_get_animated_vertex_data_p_pBp Geom$16$get_animated_vertex_data
#endif

// C++ _inCAAAAdjMf(bool force) ==> Geom$_$get_animated_vertex_data(Geom const *param0, bool param1)(Geom const *, bool)
extern char ** Geom$17$get_animated_vertex_data(Geom const *self, bool force);

#if INDEX
#define Geom_C_get_animated_vertex_data_p_pB Geom$17$get_animated_vertex_data
#endif

// C++ _inCAAAAjKBW() ==> Geom$_$is_empty(Geom const *param0)(Geom const *)
extern bool Geom$18$is_empty(Geom const *self);

#if INDEX
#define Geom_C_is_empty_B_p Geom$18$is_empty
#endif

// C++ _inCAAAALxLL() ==> Geom$_$get_num_primitives(Geom const *param0)(Geom const *)
extern std$_size_t Geom$19$get_num_primitives(Geom const *self);

#if INDEX
#define Geom_C_get_num_primitives_l_p Geom$19$get_num_primitives
#endif

// C++ _inCAAAAzklj(std::size_t i) ==> Geom$_$get_primitive(Geom const *param0, std::size_t param1)(Geom const *, std::size_t)
extern char ** Geom$20$get_primitive(Geom const *self, std$_size_t i);

#if INDEX
#define Geom_C_get_primitive_p_pl Geom$20$get_primitive
#endif

// C++ _inCAAAAi_Ir(std::size_t i) ==> Geom$_$modify_primitive(Geom *param0, std::size_t param1)(Geom *, std::size_t)
extern char ** Geom$21$modify_primitive(Geom *self, std$_size_t i);

#if INDEX
#define Geom_C_modify_primitive_p_pl Geom$21$modify_primitive
#endif

// C++ _inCAAAA5fP1(std::size_t i, GeomPrimitive const *primitive) ==> Geom$_$set_primitive(Geom *param0, std::size_t param1, GeomPrimitive const *param2)(Geom *, std::size_t, GeomPrimitive const *)
extern void Geom$22$set_primitive(Geom *self, std$_size_t i, GeomPrimitive const *primitive);

#if INDEX
#define Geom_C_set_primitive_v_plp Geom$22$set_primitive
#endif

// C++ _inCAAAAFLQY(std::size_t i, GeomPrimitive const *primitive) ==> Geom$_$insert_primitive(Geom *param0, std::size_t param1, GeomPrimitive const *param2)(Geom *, std::size_t, GeomPrimitive const *)
extern void Geom$23$insert_primitive(Geom *self, std$_size_t i, GeomPrimitive const *primitive);

#if INDEX
#define Geom_C_insert_primitive_v_plp Geom$23$insert_primitive
#endif

// C++ _inCAAAA4qtW(GeomPrimitive const *primitive) ==> Geom$_$add_primitive(Geom *param0, GeomPrimitive const *param1)(Geom *, GeomPrimitive const *)
extern void Geom$24$add_primitive(Geom *self, GeomPrimitive const *primitive);

#if INDEX
#define Geom_C_add_primitive_v_pp Geom$24$add_primitive
#endif

// C++ _inCAAAAl836(std::size_t i) ==> Geom$_$remove_primitive(Geom *param0, std::size_t param1)(Geom *, std::size_t)
extern void Geom$25$remove_primitive(Geom *self, std$_size_t i);

#if INDEX
#define Geom_C_remove_primitive_v_pl Geom$25$remove_primitive
#endif

// C++ _inCAAAAYAGE() ==> Geom$_$clear_primitives(Geom *param0)(Geom *)
extern void Geom$26$clear_primitives(Geom *self);

#if INDEX
#define Geom_C_clear_primitives_v_p Geom$26$clear_primitives
#endif

// C++ _inCAAAA6GgV() ==> Geom$_$decompose(Geom const *param0)(Geom const *)
extern char ** Geom$27$decompose(Geom const *self);

#if INDEX
#define Geom_C_decompose_p_p Geom$27$decompose
#endif

// C++ _inCAAAALQaK() ==> Geom$_$doubleside(Geom const *param0)(Geom const *)
extern char ** Geom$28$doubleside(Geom const *self);

#if INDEX
#define Geom_C_doubleside_p_p Geom$28$doubleside
#endif

// C++ _inCAAAAEJJU() ==> Geom$_$reverse(Geom const *param0)(Geom const *)
extern char ** Geom$29$reverse(Geom const *self);

#if INDEX
#define Geom_C_reverse_p_p Geom$29$reverse
#endif

// C++ _inCAAAAPWLU() ==> Geom$_$rotate(Geom const *param0)(Geom const *)
extern char ** Geom$30$rotate(Geom const *self);

#if INDEX
#define Geom_C_rotate_p_p Geom$30$rotate
#endif

// C++ _inCAAAActAJ(int max_indices, bool preserve_order) ==> Geom$_$unify(Geom const *param0, int param1, bool param2)(Geom const *, int, bool)
extern char ** Geom$31$unify(Geom const *self, int max_indices, bool preserve_order);

#if INDEX
#define Geom_C_unify_p_piB Geom$31$unify
#endif

// C++ _inCAAAAqMSd() ==> Geom$_$make_points(Geom const *param0)(Geom const *)
extern char ** Geom$32$make_points(Geom const *self);

#if INDEX
#define Geom_C_make_points_p_p Geom$32$make_points
#endif

// C++ _inCAAAAPzxP() ==> Geom$_$make_lines(Geom const *param0)(Geom const *)
extern char ** Geom$33$make_lines(Geom const *self);

#if INDEX
#define Geom_C_make_lines_p_p Geom$33$make_lines
#endif

// C++ _inCAAAAjSH1() ==> Geom$_$make_patches(Geom const *param0)(Geom const *)
extern char ** Geom$34$make_patches(Geom const *self);

#if INDEX
#define Geom_C_make_patches_p_p Geom$34$make_patches
#endif

// C++ _inCAAAA0Dv2() ==> Geom$_$make_adjacency(Geom const *param0)(Geom const *)
extern char ** Geom$35$make_adjacency(Geom const *self);

#if INDEX
#define Geom_C_make_adjacency_p_p Geom$35$make_adjacency
#endif

// C++ _inCAAAAlrdj() ==> Geom$_$decompose_in_place(Geom *param0)(Geom *)
extern void Geom$36$decompose_in_place(Geom *self);

#if INDEX
#define Geom_C_decompose_in_place_v_p Geom$36$decompose_in_place
#endif

// C++ _inCAAAARWxI() ==> Geom$_$doubleside_in_place(Geom *param0)(Geom *)
extern void Geom$37$doubleside_in_place(Geom *self);

#if INDEX
#define Geom_C_doubleside_in_place_v_p Geom$37$doubleside_in_place
#endif

// C++ _inCAAAADe1_() ==> Geom$_$reverse_in_place(Geom *param0)(Geom *)
extern void Geom$38$reverse_in_place(Geom *self);

#if INDEX
#define Geom_C_reverse_in_place_v_p Geom$38$reverse_in_place
#endif

// C++ _inCAAAAHZg5() ==> Geom$_$rotate_in_place(Geom *param0)(Geom *)
extern void Geom$39$rotate_in_place(Geom *self);

#if INDEX
#define Geom_C_rotate_in_place_v_p Geom$39$rotate_in_place
#endif

// C++ _inCAAAAiehR(int max_indices, bool preserve_order) ==> Geom$_$unify_in_place(Geom *param0, int param1, bool param2)(Geom *, int, bool)
extern void Geom$40$unify_in_place(Geom *self, int max_indices, bool preserve_order);

#if INDEX
#define Geom_C_unify_in_place_v_piB Geom$40$unify_in_place
#endif

// C++ _inCAAAAJfCo() ==> Geom$_$make_points_in_place(Geom *param0)(Geom *)
extern void Geom$41$make_points_in_place(Geom *self);

#if INDEX
#define Geom_C_make_points_in_place_v_p Geom$41$make_points_in_place
#endif

// C++ _inCAAAAElHO() ==> Geom$_$make_lines_in_place(Geom *param0)(Geom *)
extern void Geom$42$make_lines_in_place(Geom *self);

#if INDEX
#define Geom_C_make_lines_in_place_v_p Geom$42$make_lines_in_place
#endif

// C++ _inCAAAAlsgM() ==> Geom$_$make_patches_in_place(Geom *param0)(Geom *)
extern void Geom$43$make_patches_in_place(Geom *self);

#if INDEX
#define Geom_C_make_patches_in_place_v_p Geom$43$make_patches_in_place
#endif

// C++ _inCAAAAQrnS() ==> Geom$_$make_adjacency_in_place(Geom *param0)(Geom *)
extern void Geom$44$make_adjacency_in_place(Geom *self);

#if INDEX
#define Geom_C_make_adjacency_in_place_v_p Geom$44$make_adjacency_in_place
#endif

// C++ _inCAAAAyUv9(Geom const *other) ==> Geom$_$copy_primitives_from(Geom *param0, Geom const *param1)(Geom *, Geom const *)
extern bool Geom$45$copy_primitives_from(Geom *self, Geom const *other);

#if INDEX
#define Geom_C_copy_primitives_from_B_pp Geom$45$copy_primitives_from
#endif

// C++ _inCAAAAgSfK() ==> Geom$_$get_num_bytes(Geom const *param0)(Geom const *)
extern int Geom$46$get_num_bytes(Geom const *self);

#if INDEX
#define Geom_C_get_num_bytes_i_p Geom$46$get_num_bytes
#endif

// C++ _inCAAAAKP2k(Thread *current_thread) ==> Geom$_$get_modified(Geom const *param0, Thread *param1)(Geom const *, Thread *)
extern UpdateSeq * Geom$47$get_modified(Geom const *self, Thread *current_thread);

#if INDEX
#define Geom_C_get_modified_p_pp Geom$47$get_modified
#endif

// C++ _inCAAAAHKFV() ==> Geom$_$get_modified(Geom const *param0)(Geom const *)
extern UpdateSeq * Geom$48$get_modified(Geom const *self);

#if INDEX
#define Geom_C_get_modified_p_p Geom$48$get_modified
#endif

// C++ _inCAAAAs4wf() ==> Geom$_$request_resident(Geom const *param0)(Geom const *)
extern bool Geom$49$request_resident(Geom const *self);

#if INDEX
#define Geom_C_request_resident_B_p Geom$49$request_resident
#endif

// C++ _inCAAAAnS75(LMatrix4 const &mat) ==> Geom$_$transform_vertices(Geom *param0, LMatrix4 const *param1)(Geom *, LMatrix4 const *)
extern void Geom$50$transform_vertices(Geom *self, LMatrix4 const *mat);

#if INDEX
#define Geom_C_transform_vertices_v_pp Geom$50$transform_vertices
#endif

// C++ _inCAAAARtQb() ==> Geom$_$check_valid(Geom const *param0)(Geom const *)
extern bool Geom$51$check_valid(Geom const *self);

#if INDEX
#define Geom_C_check_valid_B_p Geom$51$check_valid
#endif

// C++ _inCAAAAdH6F(GeomVertexData const *vertex_data) ==> Geom$_$check_valid(Geom const *param0, GeomVertexData const *param1)(Geom const *, GeomVertexData const *)
extern bool Geom$52$check_valid(Geom const *self, GeomVertexData const *vertex_data);

#if INDEX
#define Geom_C_check_valid_B_pp Geom$52$check_valid
#endif

// C++ _inCAAAA9WkK(Thread *current_thread) ==> Geom$_$get_bounds(Geom const *param0, Thread *param1)(Geom const *, Thread *)
extern char ** Geom$53$get_bounds(Geom const *self, Thread *current_thread);

#if INDEX
#define Geom_C_get_bounds_p_pp Geom$53$get_bounds
#endif

// C++ _inCAAAA5pRF() ==> Geom$_$get_bounds(Geom const *param0)(Geom const *)
extern char ** Geom$54$get_bounds(Geom const *self);

#if INDEX
#define Geom_C_get_bounds_p_p Geom$54$get_bounds
#endif

// C++ _inCAAAAkkOF(Thread *current_thread) ==> Geom$_$get_nested_vertices(Geom const *param0, Thread *param1)(Geom const *, Thread *)
extern int Geom$55$get_nested_vertices(Geom const *self, Thread *current_thread);

#if INDEX
#define Geom_C_get_nested_vertices_i_pp Geom$55$get_nested_vertices
#endif

// C++ _inCAAAA7ykk() ==> Geom$_$get_nested_vertices(Geom const *param0)(Geom const *)
extern int Geom$56$get_nested_vertices(Geom const *self);

#if INDEX
#define Geom_C_get_nested_vertices_i_p Geom$56$get_nested_vertices
#endif

// C++ _inCAAAAM7bs() ==> Geom$_$mark_bounds_stale(Geom const *param0)(Geom const *)
extern void Geom$57$mark_bounds_stale(Geom const *self);

#if INDEX
#define Geom_C_mark_bounds_stale_v_p Geom$57$mark_bounds_stale
#endif

// C++ _inCAAAA_N_x(BoundingVolume::BoundsType bounds_type) ==> Geom$_$set_bounds_type(Geom *param0, BoundingVolume::BoundsType param1)(Geom *, BoundingVolume::BoundsType)
extern void Geom$58$set_bounds_type(Geom *self, BoundingVolume$_BoundsType bounds_type);

#if INDEX
#define Geom_C_set_bounds_type_v_pp Geom$58$set_bounds_type
#endif

// C++ _inCAAAAQxyc() ==> Geom$_$get_bounds_type(Geom const *param0)(Geom const *)
extern BoundingVolume$_BoundsType Geom$59$get_bounds_type(Geom const *self);

#if INDEX
#define Geom_C_get_bounds_type_p_p Geom$59$get_bounds_type
#endif

// C++ _inCAAAAnNw_(BoundingVolume const *volume) ==> Geom$_$set_bounds(Geom *param0, BoundingVolume const *param1)(Geom *, BoundingVolume const *)
extern void Geom$60$set_bounds(Geom *self, BoundingVolume const *volume);

#if INDEX
#define Geom_C_set_bounds_v_pp Geom$60$set_bounds
#endif

// C++ _inCAAAA92vG() ==> Geom$_$clear_bounds(Geom *param0)(Geom *)
extern void Geom$61$clear_bounds(Geom *self);

#if INDEX
#define Geom_C_clear_bounds_v_p Geom$61$clear_bounds
#endif

// C++ _inCAAAASxCs(std::ostream &out) ==> Geom$_$output(Geom const *param0, std::ostream *param1)(Geom const *, std::ostream *)
extern void Geom$62$output(Geom const *self, std$_ostream *out);

#if INDEX
#define Geom_C_output_v_pp Geom$62$output
#endif

// C++ _inCAAAA1jw_(std::ostream &out, int indent_level) ==> Geom$_$write(Geom const *param0, std::ostream *param1, int param2)(Geom const *, std::ostream *, int)
extern void Geom$63$write(Geom const *self, std$_ostream *out, int indent_level);

#if INDEX
#define Geom_C_write_v_ppi Geom$63$write
#endif

// C++ _inCAAAAwaKJ(std::ostream &out) ==> Geom$_$write(Geom const *param0, std::ostream *param1)(Geom const *, std::ostream *)
extern void Geom$64$write(Geom const *self, std$_ostream *out);

#if INDEX
#define Geom_C_write_v_pp Geom$64$write
#endif

// C++ _inCAAAAr67p() ==> Geom$_$clear_cache(Geom *param0)(Geom *)
extern void Geom$65$clear_cache(Geom *self);

#if INDEX
#define Geom_C_clear_cache_v_p Geom$65$clear_cache
#endif

// C++ _inCAAAAC0IT(Thread *current_thread) ==> Geom$_$clear_cache_stage(Geom *param0, Thread *param1)(Geom *, Thread *)
extern void Geom$66$clear_cache_stage(Geom *self, Thread *current_thread);

#if INDEX
#define Geom_C_clear_cache_stage_v_pp Geom$66$clear_cache_stage
#endif

// C++ _inCAAAAkUN5(PreparedGraphicsObjects *prepared_objects) ==> Geom$_$prepare(Geom *param0, PreparedGraphicsObjects *param1)(Geom *, PreparedGraphicsObjects *)
extern void Geom$67$prepare(Geom *self, PreparedGraphicsObjects *prepared_objects);

#if INDEX
#define Geom_C_prepare_v_pp Geom$67$prepare
#endif

// C++ _inCAAAAir4R(PreparedGraphicsObjects *prepared_objects) ==> Geom$_$is_prepared(Geom const *param0, PreparedGraphicsObjects *param1)(Geom const *, PreparedGraphicsObjects *)
extern bool Geom$68$is_prepared(Geom const *self, PreparedGraphicsObjects *prepared_objects);

#if INDEX
#define Geom_C_is_prepared_B_pp Geom$68$is_prepared
#endif

// C++ _inCAAAAYDlG(PreparedGraphicsObjects *prepared_objects) ==> Geom$_$release(Geom *param0, PreparedGraphicsObjects *param1)(Geom *, PreparedGraphicsObjects *)
extern bool Geom$69$release(Geom *self, PreparedGraphicsObjects *prepared_objects);

#if INDEX
#define Geom_C_release_B_pp Geom$69$release
#endif

// C++ _inCAAAAtSn_() ==> Geom$_$release_all(Geom *param0)(Geom *)
extern int Geom$70$release_all(Geom *self);

#if INDEX
#define Geom_C_release_all_i_p Geom$70$release_all
#endif

// C++ _inCAAAAptAs(PreparedGraphicsObjects *prepared_objects, GraphicsStateGuardianBase *gsg) ==> Geom$_$prepare_now(Geom *param0, PreparedGraphicsObjects *param1, GraphicsStateGuardianBase *param2)(Geom *, PreparedGraphicsObjects *, GraphicsStateGuardianBase *)
extern GeomContext * Geom$71$prepare_now(Geom *self, PreparedGraphicsObjects *prepared_objects, GraphicsStateGuardianBase *gsg);

#if INDEX
#define Geom_C_prepare_now_p_ppp Geom$71$prepare_now
#endif

// C++ _inCAAAAabKC(GraphicsStateGuardianBase *gsg, GeomVertexData const *vertex_data, bool force, Thread *current_thread) ==> Geom$_$draw(Geom const *param0, GraphicsStateGuardianBase *param1, GeomVertexData const *param2, bool param3, Thread *param4)(Geom const *, GraphicsStateGuardianBase *, GeomVertexData const *, bool, Thread *)
extern bool Geom$72$draw(Geom const *self, GraphicsStateGuardianBase *gsg, GeomVertexData const *vertex_data, bool force, Thread *current_thread);

#if INDEX
#define Geom_C_draw_B_pppBp Geom$72$draw
#endif

// C++ _inCAAAA7VNn() ==> Geom$_$get_next_modified()()
extern UpdateSeq * Geom$73$get_next_modified(void);

#if INDEX
#define Geom_C_get_next_modified_p_v Geom$73$get_next_modified
#endif

// C++ _inCAAAAWhNh() ==> Geom$_$register_with_read_factory()()
extern void Geom$74$register_with_read_factory(void);

#if INDEX
#define Geom_C_register_with_read_factory_v_v Geom$74$register_with_read_factory
#endif

// C++ _inCAAAApzNO(BamWriter *manager, Datagram &dg) ==> Geom$_$write_datagram(Geom *param0, BamWriter *param1, Datagram *param2)(Geom *, BamWriter *, Datagram *)
extern void Geom$75$write_datagram(Geom *self, BamWriter *manager, Datagram *dg);

#if INDEX
#define Geom_C_write_datagram_v_ppp Geom$75$write_datagram
#endif

// C++ _inCAAAAtOLt(BamReader *manager) ==> Geom$_$finalize(Geom *param0, BamReader *param1)(Geom *, BamReader *)
extern void Geom$76$finalize(Geom *self, BamReader *manager);

#if INDEX
#define Geom_C_finalize_v_pp Geom$76$finalize
#endif

// C++ _inCAAAAyQKN() ==> Geom$_$get_class_type()()
extern int Geom$77$get_class_type(void);

#if INDEX
#define Geom_C_get_class_type_i_v Geom$77$get_class_type
#endif

// C++ _inCAAAAIQs0() ==> Geom$_$init_type()()
extern void Geom$78$init_type(void);

#if INDEX
#define Geom_C_init_type_v_v Geom$78$init_type
#endif

// C++ _inCAAAAJan9() ==> Geom$_$get_type(Geom const *param0)(Geom const *)
extern int Geom$79$get_type(Geom const *self);

#if INDEX
#define Geom_C_get_type_i_p Geom$79$get_type
#endif

// C++ _inCAAAA_fQQ() ==> Geom$_$force_init_type(Geom *param0)(Geom *)
extern int Geom$80$force_init_type(Geom *self);

#if INDEX
#define Geom_C_force_init_type_i_p Geom$80$force_init_type
#endif


// GeomEnums

// C++ _inCAAAATE1Y() ==> GeomEnums$_$GeomEnums()()
extern GeomEnums * GeomEnums$1$GeomEnums(void);

#if INDEX
#define GeomEnums_C_ctor_p_v GeomEnums$1$GeomEnums
#endif

// C++ _inCAAAAxxGd(GeomEnums const &) ==> GeomEnums$_$GeomEnums(GeomEnums const *param0)(GeomEnums const *)
extern GeomEnums * GeomEnums$2$GeomEnums(GeomEnums const *arg0);

#if INDEX
#define GeomEnums_C_ctor_p_p GeomEnums$2$GeomEnums
#endif

// C++ _inCAAAAcioB() ==> GeomEnums$_$downcast_to_Geom(GeomEnums *param0)(GeomEnums *)
extern Geom * GeomEnums$3$downcast_to_Geom(GeomEnums *self);

#if INDEX
#define GeomEnums_C_downcast_to_Geom_p_p GeomEnums$3$downcast_to_Geom
#endif

// C++ _inCAAAA94K1() ==> GeomEnums$_$downcast_to_GeomPrimitive(GeomEnums *param0)(GeomEnums *)
extern GeomPrimitive * GeomEnums$4$downcast_to_GeomPrimitive(GeomEnums *self);

#if INDEX
#define GeomEnums_C_downcast_to_GeomPrimitive_p_p GeomEnums$4$downcast_to_GeomPrimitive
#endif

// C++ _inCAAAAIzps() ==> GeomEnums$_$downcast_to_GeomVertexArrayData(GeomEnums *param0)(GeomEnums *)
extern GeomVertexArrayData * GeomEnums$5$downcast_to_GeomVertexArrayData(GeomEnums *self);

#if INDEX
#define GeomEnums_C_downcast_to_GeomVertexArrayData_p_p GeomEnums$5$downcast_to_GeomVertexArrayData
#endif

// C++ _inCAAAAo05j() ==> GeomEnums$_$downcast_to_GeomVertexArrayFormat(GeomEnums *param0)(GeomEnums *)
extern GeomVertexArrayFormat * GeomEnums$6$downcast_to_GeomVertexArrayFormat(GeomEnums *self);

#if INDEX
#define GeomEnums_C_downcast_to_GeomVertexArrayFormat_p_p GeomEnums$6$downcast_to_GeomVertexArrayFormat
#endif

// C++ _inCAAAAL1Nu() ==> GeomEnums$_$downcast_to_GeomVertexArrayDataHandle(GeomEnums *param0)(GeomEnums *)
extern GeomVertexArrayDataHandle * GeomEnums$7$downcast_to_GeomVertexArrayDataHandle(GeomEnums *self);

#if INDEX
#define GeomEnums_C_downcast_to_GeomVertexArrayDataHandle_p_p GeomEnums$7$downcast_to_GeomVertexArrayDataHandle
#endif

// C++ _inCAAAALM59() ==> GeomEnums$_$downcast_to_GeomVertexData(GeomEnums *param0)(GeomEnums *)
extern GeomVertexData * GeomEnums$8$downcast_to_GeomVertexData(GeomEnums *self);

#if INDEX
#define GeomEnums_C_downcast_to_GeomVertexData_p_p GeomEnums$8$downcast_to_GeomVertexData
#endif

// C++ _inCAAAACWg5() ==> GeomEnums$_$downcast_to_GeomVertexFormat(GeomEnums *param0)(GeomEnums *)
extern GeomVertexFormat * GeomEnums$9$downcast_to_GeomVertexFormat(GeomEnums *self);

#if INDEX
#define GeomEnums_C_downcast_to_GeomVertexFormat_p_p GeomEnums$9$downcast_to_GeomVertexFormat
#endif


// GeomNode

// C++ _inCAAAA4m3E(std::string const &name) ==> GeomNode$_$GeomNode(char const *param0)(char const *)
extern GeomNode * GeomNode$1$GeomNode(char const *name);

#if INDEX
#define GeomNode_C_ctor_p_s GeomNode$1$GeomNode
#endif

// C++ _inCAAAAVy6F(AccumulatedAttribs const &attribs, int attrib_types, GeomTransformer &transformer) ==> GeomNode$_$apply_attribs_to_vertices(GeomNode *param0, AccumulatedAttribs const *param1, int param2, GeomTransformer *param3)(GeomNode *, AccumulatedAttribs const *, int, GeomTransformer *)
extern void GeomNode$2$apply_attribs_to_vertices(GeomNode *self, AccumulatedAttribs const *attribs, int attrib_types, GeomTransformer *transformer);

#if INDEX
#define GeomNode_C_apply_attribs_to_vertices_v_ppip GeomNode$2$apply_attribs_to_vertices
#endif

// C++ _inCAAAA2Tj5(LMatrix4 const &mat) ==> GeomNode$_$xform(GeomNode *param0, LMatrix4 const *param1)(GeomNode *, LMatrix4 const *)
extern void GeomNode$3$xform(GeomNode *self, LMatrix4 const *mat);

#if INDEX
#define GeomNode_C_xform_v_pp GeomNode$3$xform
#endif

// C++ _inCAAAAclSe() ==> GeomNode$_$is_renderable(GeomNode const *param0)(GeomNode const *)
extern bool GeomNode$4$is_renderable(GeomNode const *self);

#if INDEX
#define GeomNode_C_is_renderable_B_p GeomNode$4$is_renderable
#endif

// C++ _inCAAAA2cJJ(CullTraverser *trav, CullTraverserData &data) ==> GeomNode$_$add_for_draw(GeomNode *param0, CullTraverser *param1, CullTraverserData *param2)(GeomNode *, CullTraverser *, CullTraverserData *)
extern void GeomNode$5$add_for_draw(GeomNode *self, CullTraverser *trav, CullTraverserData *data);

#if INDEX
#define GeomNode_C_add_for_draw_v_ppp GeomNode$5$add_for_draw
#endif

// C++ _inCAAAAGddz() ==> GeomNode$_$safe_to_flatten(GeomNode const *param0)(GeomNode const *)
extern bool GeomNode$6$safe_to_flatten(GeomNode const *self);

#if INDEX
#define GeomNode_C_safe_to_flatten_B_p GeomNode$6$safe_to_flatten
#endif

// C++ _inCAAAA2zaj() ==> GeomNode$_$safe_to_combine(GeomNode const *param0)(GeomNode const *)
extern bool GeomNode$7$safe_to_combine(GeomNode const *self);

#if INDEX
#define GeomNode_C_safe_to_combine_B_p GeomNode$7$safe_to_combine
#endif

// C++ _inCAAAAVFmF(GraphicsStateGuardianBase *gsg, RenderState const *node_state, GeomTransformer &transformer, Thread *current_thread) ==> GeomNode$_$r_prepare_scene(GeomNode *param0, GraphicsStateGuardianBase *param1, RenderState const *param2, GeomTransformer *param3, Thread *param4)(GeomNode *, GraphicsStateGuardianBase *, RenderState const *, GeomTransformer *, Thread *)
extern void GeomNode$8$r_prepare_scene(GeomNode *self, GraphicsStateGuardianBase *gsg, RenderState const *node_state, GeomTransformer *transformer, Thread *current_thread);

#if INDEX
#define GeomNode_C_r_prepare_scene_v_ppppp GeomNode$8$r_prepare_scene
#endif

// C++ _inCAAAA1Bv8(bool value) ==> GeomNode$_$set_preserved(GeomNode *param0, bool param1)(GeomNode *, bool)
extern void GeomNode$9$set_preserved(GeomNode *self, bool value);

#if INDEX
#define GeomNode_C_set_preserved_v_pB GeomNode$9$set_preserved
#endif

// C++ _inCAAAAiZ2Q() ==> GeomNode$_$get_preserved(GeomNode const *param0)(GeomNode const *)
extern bool GeomNode$10$get_preserved(GeomNode const *self);

#if INDEX
#define GeomNode_C_get_preserved_B_p GeomNode$10$get_preserved
#endif

// C++ _inCAAAAI0Ys() ==> GeomNode$_$get_num_geoms(GeomNode const *param0)(GeomNode const *)
extern int GeomNode$11$get_num_geoms(GeomNode const *self);

#if INDEX
#define GeomNode_C_get_num_geoms_i_p GeomNode$11$get_num_geoms
#endif

// C++ _inCAAAAAgFb(int n) ==> GeomNode$_$get_geom(GeomNode const *param0, int param1)(GeomNode const *, int)
extern char ** GeomNode$12$get_geom(GeomNode const *self, int n);

#if INDEX
#define GeomNode_C_get_geom_p_pi GeomNode$12$get_geom
#endif

// C++ _inCAAAAh0cC(int n) ==> GeomNode$_$modify_geom(GeomNode *param0, int param1)(GeomNode *, int)
extern char ** GeomNode$13$modify_geom(GeomNode *self, int n);

#if INDEX
#define GeomNode_C_modify_geom_p_pi GeomNode$13$modify_geom
#endif

// C++ _inCAAAAeIGG(int n) ==> GeomNode$_$get_geom_state(GeomNode const *param0, int param1)(GeomNode const *, int)
extern RenderState const * GeomNode$14$get_geom_state(GeomNode const *self, int n);

#if INDEX
#define GeomNode_C_get_geom_state_p_pi GeomNode$14$get_geom_state
#endif

// C++ _inCAAAAqNIz(int n, RenderState const *state) ==> GeomNode$_$set_geom_state(GeomNode *param0, int param1, RenderState const *param2)(GeomNode *, int, RenderState const *)
extern void GeomNode$15$set_geom_state(GeomNode *self, int n, RenderState const *state);

#if INDEX
#define GeomNode_C_set_geom_state_v_pip GeomNode$15$set_geom_state
#endif

// C++ _inCAAAAA4ql(Geom *geom, RenderState const *state) ==> GeomNode$_$add_geom(GeomNode *param0, Geom *param1, RenderState const *param2)(GeomNode *, Geom *, RenderState const *)
extern void GeomNode$16$add_geom(GeomNode *self, Geom *geom, RenderState const *state);

#if INDEX
#define GeomNode_C_add_geom_v_ppp GeomNode$16$add_geom
#endif

// C++ _inCAAAAg1uL(Geom *geom) ==> GeomNode$_$add_geom(GeomNode *param0, Geom *param1)(GeomNode *, Geom *)
extern void GeomNode$17$add_geom(GeomNode *self, Geom *geom);

#if INDEX
#define GeomNode_C_add_geom_v_pp GeomNode$17$add_geom
#endif

// C++ _inCAAAA06du(GeomNode const *other) ==> GeomNode$_$add_geoms_from(GeomNode *param0, GeomNode const *param1)(GeomNode *, GeomNode const *)
extern void GeomNode$18$add_geoms_from(GeomNode *self, GeomNode const *other);

#if INDEX
#define GeomNode_C_add_geoms_from_v_pp GeomNode$18$add_geoms_from
#endif

// C++ _inCAAAAOrgw(int n, Geom *geom) ==> GeomNode$_$set_geom(GeomNode *param0, int param1, Geom *param2)(GeomNode *, int, Geom *)
extern void GeomNode$19$set_geom(GeomNode *self, int n, Geom *geom);

#if INDEX
#define GeomNode_C_set_geom_v_pip GeomNode$19$set_geom
#endif

// C++ _inCAAAAV9b7(int n) ==> GeomNode$_$remove_geom(GeomNode *param0, int param1)(GeomNode *, int)
extern void GeomNode$20$remove_geom(GeomNode *self, int n);

#if INDEX
#define GeomNode_C_remove_geom_v_pi GeomNode$20$remove_geom
#endif

// C++ _inCAAAA_NLA() ==> GeomNode$_$remove_all_geoms(GeomNode *param0)(GeomNode *)
extern void GeomNode$21$remove_all_geoms(GeomNode *self);

#if INDEX
#define GeomNode_C_remove_all_geoms_v_p GeomNode$21$remove_all_geoms
#endif

// C++ _inCAAAAs0De() ==> GeomNode$_$check_valid(GeomNode const *param0)(GeomNode const *)
extern bool GeomNode$22$check_valid(GeomNode const *self);

#if INDEX
#define GeomNode_C_check_valid_B_p GeomNode$22$check_valid
#endif

// C++ _inCAAAAzvce() ==> GeomNode$_$decompose(GeomNode *param0)(GeomNode *)
extern void GeomNode$23$decompose(GeomNode *self);

#if INDEX
#define GeomNode_C_decompose_v_p GeomNode$23$decompose
#endif

// C++ _inCAAAAX2Y_(int max_indices, bool preserve_order) ==> GeomNode$_$unify(GeomNode *param0, int param1, bool param2)(GeomNode *, int, bool)
extern void GeomNode$24$unify(GeomNode *self, int max_indices, bool preserve_order);

#if INDEX
#define GeomNode_C_unify_v_piB GeomNode$24$unify
#endif

// C++ _inCAAAA_sIY(std::ostream &out, int indent_level) ==> GeomNode$_$write_geoms(GeomNode const *param0, std::ostream *param1, int param2)(GeomNode const *, std::ostream *, int)
extern void GeomNode$25$write_geoms(GeomNode const *self, std$_ostream *out, int indent_level);

#if INDEX
#define GeomNode_C_write_geoms_v_ppi GeomNode$25$write_geoms
#endif

// C++ _inCAAAAkYdb(std::ostream &out, int indent_level) ==> GeomNode$_$write_verbose(GeomNode const *param0, std::ostream *param1, int param2)(GeomNode const *, std::ostream *, int)
extern void GeomNode$26$write_verbose(GeomNode const *self, std$_ostream *out, int indent_level);

#if INDEX
#define GeomNode_C_write_verbose_v_ppi GeomNode$26$write_verbose
#endif

// C++ _inCAAAAlm7A() ==> GeomNode$_$get_default_collide_mask()()
extern CollideMask * GeomNode$27$get_default_collide_mask(void);

#if INDEX
#define GeomNode_C_get_default_collide_mask_p_v GeomNode$27$get_default_collide_mask
#endif

// C++ _inCAAAAwpGv(GraphicsStateGuardianBase *gsg, RenderState const *node_state, GeomTransformer &transformer) ==> GeomNode$_$do_premunge(GeomNode *param0, GraphicsStateGuardianBase *param1, RenderState const *param2, GeomTransformer *param3)(GeomNode *, GraphicsStateGuardianBase *, RenderState const *, GeomTransformer *)
extern void GeomNode$28$do_premunge(GeomNode *self, GraphicsStateGuardianBase *gsg, RenderState const *node_state, GeomTransformer *transformer);

#if INDEX
#define GeomNode_C_do_premunge_v_pppp GeomNode$28$do_premunge
#endif

// C++ _inCAAAAg1Ql(Thread *current_thread) ==> GeomNode$_$get_geoms(GeomNode const *param0, Thread *param1)(GeomNode const *, Thread *)
extern GeomNode$_Geoms * GeomNode$29$get_geoms(GeomNode const *self, Thread *current_thread);

#if INDEX
#define GeomNode_C_get_geoms_p_pp GeomNode$29$get_geoms
#endif

// C++ _inCAAAAraws() ==> GeomNode$_$get_geoms(GeomNode const *param0)(GeomNode const *)
extern GeomNode$_Geoms * GeomNode$30$get_geoms(GeomNode const *self);

#if INDEX
#define GeomNode_C_get_geoms_p_p GeomNode$30$get_geoms
#endif

// C++ _inCAAAAi6Wq() ==> GeomNode$_$register_with_read_factory()()
extern void GeomNode$31$register_with_read_factory(void);

#if INDEX
#define GeomNode_C_register_with_read_factory_v_v GeomNode$31$register_with_read_factory
#endif

// C++ _inCAAAAYAMR(BamWriter *manager, Datagram &dg) ==> GeomNode$_$write_datagram(GeomNode *param0, BamWriter *param1, Datagram *param2)(GeomNode *, BamWriter *, Datagram *)
extern void GeomNode$32$write_datagram(GeomNode *self, BamWriter *manager, Datagram *dg);

#if INDEX
#define GeomNode_C_write_datagram_v_ppp GeomNode$32$write_datagram
#endif

// C++ _inCAAAA3iMf(BamReader *manager) ==> GeomNode$_$finalize(GeomNode *param0, BamReader *param1)(GeomNode *, BamReader *)
extern void GeomNode$33$finalize(GeomNode *self, BamReader *manager);

#if INDEX
#define GeomNode_C_finalize_v_pp GeomNode$33$finalize
#endif

// C++ _inCAAAAnVK5() ==> GeomNode$_$get_class_type()()
extern int GeomNode$34$get_class_type(void);

#if INDEX
#define GeomNode_C_get_class_type_i_v GeomNode$34$get_class_type
#endif

// C++ _inCAAAArooX() ==> GeomNode$_$init_type()()
extern void GeomNode$35$init_type(void);

#if INDEX
#define GeomNode_C_init_type_v_v GeomNode$35$init_type
#endif

// C++ _inCAAAAuLNg() ==> GeomNode$_$get_type(GeomNode const *param0)(GeomNode const *)
extern int GeomNode$36$get_type(GeomNode const *self);

#if INDEX
#define GeomNode_C_get_type_i_p GeomNode$36$get_type
#endif

// C++ _inCAAAA6xWV() ==> GeomNode$_$force_init_type(GeomNode *param0)(GeomNode *)
extern int GeomNode$37$force_init_type(GeomNode *self);

#if INDEX
#define GeomNode_C_force_init_type_i_p GeomNode$37$force_init_type
#endif


// GeomPrimitive

// C++ _inCAAAAlsEr() ==> GeomPrimitive$_$upcast_to_CopyOnWriteObject(GeomPrimitive *param0)(GeomPrimitive *)
extern CopyOnWriteObject * GeomPrimitive$1$upcast_to_CopyOnWriteObject(GeomPrimitive *self);

#if INDEX
#define GeomPrimitive_C_upcast_to_CopyOnWriteObject_p_p GeomPrimitive$1$upcast_to_CopyOnWriteObject
#endif

// C++ _inCAAAAsYAl() ==> GeomPrimitive$_$upcast_to_GeomEnums(GeomPrimitive *param0)(GeomPrimitive *)
extern GeomEnums * GeomPrimitive$2$upcast_to_GeomEnums(GeomPrimitive *self);

#if INDEX
#define GeomPrimitive_C_upcast_to_GeomEnums_p_p GeomPrimitive$2$upcast_to_GeomEnums
#endif

// C++ _inCAAAAkToi() ==> GeomPrimitive$_$make_copy(GeomPrimitive const *param0)(GeomPrimitive const *)
extern char ** GeomPrimitive$3$make_copy(GeomPrimitive const *self);

#if INDEX
#define GeomPrimitive_C_make_copy_p_p GeomPrimitive$3$make_copy
#endif

// C++ _inCAAAAGgvy() ==> GeomPrimitive$_$get_primitive_type(GeomPrimitive const *param0)(GeomPrimitive const *)
extern GeomEnums$_PrimitiveType GeomPrimitive$4$get_primitive_type(GeomPrimitive const *self);

#if INDEX
#define GeomPrimitive_C_get_primitive_type_p_p GeomPrimitive$4$get_primitive_type
#endif

// C++ _inCAAAAdMe3() ==> GeomPrimitive$_$get_geom_rendering(GeomPrimitive const *param0)(GeomPrimitive const *)
extern int GeomPrimitive$5$get_geom_rendering(GeomPrimitive const *self);

#if INDEX
#define GeomPrimitive_C_get_geom_rendering_i_p GeomPrimitive$5$get_geom_rendering
#endif

// C++ _inCAAAA7mHk() ==> GeomPrimitive$_$get_shade_model(GeomPrimitive const *param0)(GeomPrimitive const *)
extern GeomEnums$_ShadeModel GeomPrimitive$6$get_shade_model(GeomPrimitive const *self);

#if INDEX
#define GeomPrimitive_C_get_shade_model_p_p GeomPrimitive$6$get_shade_model
#endif

// C++ _inCAAAAloHJ(GeomEnums::ShadeModel shade_model) ==> GeomPrimitive$_$set_shade_model(GeomPrimitive *param0, GeomEnums::ShadeModel param1)(GeomPrimitive *, GeomEnums::ShadeModel)
extern void GeomPrimitive$7$set_shade_model(GeomPrimitive *self, GeomEnums$_ShadeModel shade_model);

#if INDEX
#define GeomPrimitive_C_set_shade_model_v_pp GeomPrimitive$7$set_shade_model
#endif

// C++ _inCAAAArTA_() ==> GeomPrimitive$_$get_usage_hint(GeomPrimitive const *param0)(GeomPrimitive const *)
extern GeomEnums$_UsageHint GeomPrimitive$8$get_usage_hint(GeomPrimitive const *self);

#if INDEX
#define GeomPrimitive_C_get_usage_hint_p_p GeomPrimitive$8$get_usage_hint
#endif

// C++ _inCAAAApILm(GeomEnums::UsageHint usage_hint) ==> GeomPrimitive$_$set_usage_hint(GeomPrimitive *param0, GeomEnums::UsageHint param1)(GeomPrimitive *, GeomEnums::UsageHint)
extern void GeomPrimitive$9$set_usage_hint(GeomPrimitive *self, GeomEnums$_UsageHint usage_hint);

#if INDEX
#define GeomPrimitive_C_set_usage_hint_v_pp GeomPrimitive$9$set_usage_hint
#endif

// C++ _inCAAAAqhQw() ==> GeomPrimitive$_$get_index_type(GeomPrimitive const *param0)(GeomPrimitive const *)
extern GeomEnums$_NumericType GeomPrimitive$10$get_index_type(GeomPrimitive const *self);

#if INDEX
#define GeomPrimitive_C_get_index_type_p_p GeomPrimitive$10$get_index_type
#endif

// C++ _inCAAAAAwMD(GeomEnums::NumericType index_type) ==> GeomPrimitive$_$set_index_type(GeomPrimitive *param0, GeomEnums::NumericType param1)(GeomPrimitive *, GeomEnums::NumericType)
extern void GeomPrimitive$11$set_index_type(GeomPrimitive *self, GeomEnums$_NumericType index_type);

#if INDEX
#define GeomPrimitive_C_set_index_type_v_pp GeomPrimitive$11$set_index_type
#endif

// C++ _inCAAAAjrU4() ==> GeomPrimitive$_$is_composite(GeomPrimitive const *param0)(GeomPrimitive const *)
extern bool GeomPrimitive$12$is_composite(GeomPrimitive const *self);

#if INDEX
#define GeomPrimitive_C_is_composite_B_p GeomPrimitive$12$is_composite
#endif

// C++ _inCAAAA6QHh() ==> GeomPrimitive$_$is_indexed(GeomPrimitive const *param0)(GeomPrimitive const *)
extern bool GeomPrimitive$13$is_indexed(GeomPrimitive const *self);

#if INDEX
#define GeomPrimitive_C_is_indexed_B_p GeomPrimitive$13$is_indexed
#endif

// C++ _inCAAAAmlTX() ==> GeomPrimitive$_$get_first_vertex(GeomPrimitive const *param0)(GeomPrimitive const *)
extern int GeomPrimitive$14$get_first_vertex(GeomPrimitive const *self);

#if INDEX
#define GeomPrimitive_C_get_first_vertex_i_p GeomPrimitive$14$get_first_vertex
#endif

// C++ _inCAAAAvNCm() ==> GeomPrimitive$_$get_num_vertices(GeomPrimitive const *param0)(GeomPrimitive const *)
extern int GeomPrimitive$15$get_num_vertices(GeomPrimitive const *self);

#if INDEX
#define GeomPrimitive_C_get_num_vertices_i_p GeomPrimitive$15$get_num_vertices
#endif

// C++ _inCAAAAResf(int i) ==> GeomPrimitive$_$get_vertex(GeomPrimitive const *param0, int param1)(GeomPrimitive const *, int)
extern int GeomPrimitive$16$get_vertex(GeomPrimitive const *self, int i);

#if INDEX
#define GeomPrimitive_C_get_vertex_i_pi GeomPrimitive$16$get_vertex
#endif

// C++ _inCAAAAfZh_(int vertex) ==> GeomPrimitive$_$add_vertex(GeomPrimitive *param0, int param1)(GeomPrimitive *, int)
extern void GeomPrimitive$17$add_vertex(GeomPrimitive *self, int vertex);

#if INDEX
#define GeomPrimitive_C_add_vertex_v_pi GeomPrimitive$17$add_vertex
#endif

// C++ _inCAAAAHQPq(int v1, int v2) ==> GeomPrimitive$_$add_vertices(GeomPrimitive *param0, int param1, int param2)(GeomPrimitive *, int, int)
extern void GeomPrimitive$18$add_vertices(GeomPrimitive *self, int v1, int v2);

#if INDEX
#define GeomPrimitive_C_add_vertices_v_pii GeomPrimitive$18$add_vertices
#endif

// C++ _inCAAAAjcFB(int v1, int v2, int v3) ==> GeomPrimitive$_$add_vertices(GeomPrimitive *param0, int param1, int param2, int param3)(GeomPrimitive *, int, int, int)
extern void GeomPrimitive$19$add_vertices(GeomPrimitive *self, int v1, int v2, int v3);

#if INDEX
#define GeomPrimitive_C_add_vertices_v_piii GeomPrimitive$19$add_vertices
#endif

// C++ _inCAAAA2Q0u(int v1, int v2, int v3, int v4) ==> GeomPrimitive$_$add_vertices(GeomPrimitive *param0, int param1, int param2, int param3, int param4)(GeomPrimitive *, int, int, int, int)
extern void GeomPrimitive$20$add_vertices(GeomPrimitive *self, int v1, int v2, int v3, int v4);

#if INDEX
#define GeomPrimitive_C_add_vertices_v_piiii GeomPrimitive$20$add_vertices
#endif

// C++ _inCAAAAa2sp(int start, int num_vertices) ==> GeomPrimitive$_$add_consecutive_vertices(GeomPrimitive *param0, int param1, int param2)(GeomPrimitive *, int, int)
extern void GeomPrimitive$21$add_consecutive_vertices(GeomPrimitive *self, int start, int num_vertices);

#if INDEX
#define GeomPrimitive_C_add_consecutive_vertices_v_pii GeomPrimitive$21$add_consecutive_vertices
#endif

// C++ _inCAAAA7DMY(int num_vertices) ==> GeomPrimitive$_$add_next_vertices(GeomPrimitive *param0, int param1)(GeomPrimitive *, int)
extern void GeomPrimitive$22$add_next_vertices(GeomPrimitive *self, int num_vertices);

#if INDEX
#define GeomPrimitive_C_add_next_vertices_v_pi GeomPrimitive$22$add_next_vertices
#endif

// C++ _inCAAAAlGV6(int num_vertices) ==> GeomPrimitive$_$reserve_num_vertices(GeomPrimitive *param0, int param1)(GeomPrimitive *, int)
extern void GeomPrimitive$23$reserve_num_vertices(GeomPrimitive *self, int num_vertices);

#if INDEX
#define GeomPrimitive_C_reserve_num_vertices_v_pi GeomPrimitive$23$reserve_num_vertices
#endif

// C++ _inCAAAA6fGw() ==> GeomPrimitive$_$close_primitive(GeomPrimitive *param0)(GeomPrimitive *)
extern bool GeomPrimitive$24$close_primitive(GeomPrimitive *self);

#if INDEX
#define GeomPrimitive_C_close_primitive_B_p GeomPrimitive$24$close_primitive
#endif

// C++ _inCAAAAM1Rt() ==> GeomPrimitive$_$clear_vertices(GeomPrimitive *param0)(GeomPrimitive *)
extern void GeomPrimitive$25$clear_vertices(GeomPrimitive *self);

#if INDEX
#define GeomPrimitive_C_clear_vertices_v_p GeomPrimitive$25$clear_vertices
#endif

// C++ _inCAAAALbh3(int offset) ==> GeomPrimitive$_$offset_vertices(GeomPrimitive *param0, int param1)(GeomPrimitive *, int)
extern void GeomPrimitive$26$offset_vertices(GeomPrimitive *self, int offset);

#if INDEX
#define GeomPrimitive_C_offset_vertices_v_pi GeomPrimitive$26$offset_vertices
#endif

// C++ _inCAAAAWnaW(int offset, int begin_row, int end_row) ==> GeomPrimitive$_$offset_vertices(GeomPrimitive *param0, int param1, int param2, int param3)(GeomPrimitive *, int, int, int)
extern void GeomPrimitive$27$offset_vertices(GeomPrimitive *self, int offset, int begin_row, int end_row);

#if INDEX
#define GeomPrimitive_C_offset_vertices_v_piii GeomPrimitive$27$offset_vertices
#endif

// C++ _inCAAAA6uw4(GeomVertexData *dest, GeomVertexData const *source) ==> GeomPrimitive$_$make_nonindexed(GeomPrimitive *param0, GeomVertexData *param1, GeomVertexData const *param2)(GeomPrimitive *, GeomVertexData *, GeomVertexData const *)
extern void GeomPrimitive$28$make_nonindexed(GeomPrimitive *self, GeomVertexData *dest, GeomVertexData const *source);

#if INDEX
#define GeomPrimitive_C_make_nonindexed_v_ppp GeomPrimitive$28$make_nonindexed
#endif

// C++ _inCAAAAxTd_(GeomVertexData *dest, GeomVertexData const *source) ==> GeomPrimitive$_$pack_vertices(GeomPrimitive *param0, GeomVertexData *param1, GeomVertexData const *param2)(GeomPrimitive *, GeomVertexData *, GeomVertexData const *)
extern void GeomPrimitive$29$pack_vertices(GeomPrimitive *self, GeomVertexData *dest, GeomVertexData const *source);

#if INDEX
#define GeomPrimitive_C_pack_vertices_v_ppp GeomPrimitive$29$pack_vertices
#endif

// C++ _inCAAAAKY2E() ==> GeomPrimitive$_$make_indexed(GeomPrimitive *param0)(GeomPrimitive *)
extern void GeomPrimitive$30$make_indexed(GeomPrimitive *self);

#if INDEX
#define GeomPrimitive_C_make_indexed_v_p GeomPrimitive$30$make_indexed
#endif

// C++ _inCAAAA6WIt() ==> GeomPrimitive$_$get_num_primitives(GeomPrimitive const *param0)(GeomPrimitive const *)
extern int GeomPrimitive$31$get_num_primitives(GeomPrimitive const *self);

#if INDEX
#define GeomPrimitive_C_get_num_primitives_i_p GeomPrimitive$31$get_num_primitives
#endif

// C++ _inCAAAAsxUL(int n) ==> GeomPrimitive$_$get_primitive_start(GeomPrimitive const *param0, int param1)(GeomPrimitive const *, int)
extern int GeomPrimitive$32$get_primitive_start(GeomPrimitive const *self, int n);

#if INDEX
#define GeomPrimitive_C_get_primitive_start_i_pi GeomPrimitive$32$get_primitive_start
#endif

// C++ _inCAAAAB_K0(int n) ==> GeomPrimitive$_$get_primitive_end(GeomPrimitive const *param0, int param1)(GeomPrimitive const *, int)
extern int GeomPrimitive$33$get_primitive_end(GeomPrimitive const *self, int n);

#if INDEX
#define GeomPrimitive_C_get_primitive_end_i_pi GeomPrimitive$33$get_primitive_end
#endif

// C++ _inCAAAAn6mz(int n) ==> GeomPrimitive$_$get_primitive_num_vertices(GeomPrimitive const *param0, int param1)(GeomPrimitive const *, int)
extern int GeomPrimitive$34$get_primitive_num_vertices(GeomPrimitive const *self, int n);

#if INDEX
#define GeomPrimitive_C_get_primitive_num_vertices_i_pi GeomPrimitive$34$get_primitive_num_vertices
#endif

// C++ _inCAAAA6rUQ() ==> GeomPrimitive$_$get_num_used_vertices(GeomPrimitive const *param0)(GeomPrimitive const *)
extern int GeomPrimitive$35$get_num_used_vertices(GeomPrimitive const *self);

#if INDEX
#define GeomPrimitive_C_get_num_used_vertices_i_p GeomPrimitive$35$get_num_used_vertices
#endif

// C++ _inCAAAAaEOa() ==> GeomPrimitive$_$get_num_faces(GeomPrimitive const *param0)(GeomPrimitive const *)
extern int GeomPrimitive$36$get_num_faces(GeomPrimitive const *self);

#if INDEX
#define GeomPrimitive_C_get_num_faces_i_p GeomPrimitive$36$get_num_faces
#endif

// C++ _inCAAAA4WCg(int n) ==> GeomPrimitive$_$get_primitive_num_faces(GeomPrimitive const *param0, int param1)(GeomPrimitive const *, int)
extern int GeomPrimitive$37$get_primitive_num_faces(GeomPrimitive const *self, int n);

#if INDEX
#define GeomPrimitive_C_get_primitive_num_faces_i_pi GeomPrimitive$37$get_primitive_num_faces
#endif

// C++ _inCAAAAB5d5() ==> GeomPrimitive$_$get_min_vertex(GeomPrimitive const *param0)(GeomPrimitive const *)
extern int GeomPrimitive$38$get_min_vertex(GeomPrimitive const *self);

#if INDEX
#define GeomPrimitive_C_get_min_vertex_i_p GeomPrimitive$38$get_min_vertex
#endif

// C++ _inCAAAA4mcR(int n) ==> GeomPrimitive$_$get_primitive_min_vertex(GeomPrimitive const *param0, int param1)(GeomPrimitive const *, int)
extern int GeomPrimitive$39$get_primitive_min_vertex(GeomPrimitive const *self, int n);

#if INDEX
#define GeomPrimitive_C_get_primitive_min_vertex_i_pi GeomPrimitive$39$get_primitive_min_vertex
#endif

// C++ _inCAAAADfoY() ==> GeomPrimitive$_$get_max_vertex(GeomPrimitive const *param0)(GeomPrimitive const *)
extern int GeomPrimitive$40$get_max_vertex(GeomPrimitive const *self);

#if INDEX
#define GeomPrimitive_C_get_max_vertex_i_p GeomPrimitive$40$get_max_vertex
#endif

// C++ _inCAAAAyuOO(int n) ==> GeomPrimitive$_$get_primitive_max_vertex(GeomPrimitive const *param0, int param1)(GeomPrimitive const *, int)
extern int GeomPrimitive$41$get_primitive_max_vertex(GeomPrimitive const *self, int n);

#if INDEX
#define GeomPrimitive_C_get_primitive_max_vertex_i_pi GeomPrimitive$41$get_primitive_max_vertex
#endif

// C++ _inCAAAAuWdu() ==> GeomPrimitive$_$decompose(GeomPrimitive const *param0)(GeomPrimitive const *)
extern char ** GeomPrimitive$42$decompose(GeomPrimitive const *self);

#if INDEX
#define GeomPrimitive_C_decompose_p_p GeomPrimitive$42$decompose
#endif

// C++ _inCAAAAyITm() ==> GeomPrimitive$_$rotate(GeomPrimitive const *param0)(GeomPrimitive const *)
extern char ** GeomPrimitive$43$rotate(GeomPrimitive const *self);

#if INDEX
#define GeomPrimitive_C_rotate_p_p GeomPrimitive$43$rotate
#endif

// C++ _inCAAAAjOE1() ==> GeomPrimitive$_$doubleside(GeomPrimitive const *param0)(GeomPrimitive const *)
extern char ** GeomPrimitive$44$doubleside(GeomPrimitive const *self);

#if INDEX
#define GeomPrimitive_C_doubleside_p_p GeomPrimitive$44$doubleside
#endif

// C++ _inCAAAAIkTm() ==> GeomPrimitive$_$reverse(GeomPrimitive const *param0)(GeomPrimitive const *)
extern char ** GeomPrimitive$45$reverse(GeomPrimitive const *self);

#if INDEX
#define GeomPrimitive_C_reverse_p_p GeomPrimitive$45$reverse
#endif

// C++ _inCAAAA9Uwk(GeomEnums::ShadeModel shade_model) ==> GeomPrimitive$_$match_shade_model(GeomPrimitive const *param0, GeomEnums::ShadeModel param1)(GeomPrimitive const *, GeomEnums::ShadeModel)
extern char ** GeomPrimitive$46$match_shade_model(GeomPrimitive const *self, GeomEnums$_ShadeModel shade_model);

#if INDEX
#define GeomPrimitive_C_match_shade_model_p_pp GeomPrimitive$46$match_shade_model
#endif

// C++ _inCAAAAqobv() ==> GeomPrimitive$_$make_points(GeomPrimitive const *param0)(GeomPrimitive const *)
extern char ** GeomPrimitive$47$make_points(GeomPrimitive const *self);

#if INDEX
#define GeomPrimitive_C_make_points_p_p GeomPrimitive$47$make_points
#endif

// C++ _inCAAAA5evV() ==> GeomPrimitive$_$make_lines(GeomPrimitive const *param0)(GeomPrimitive const *)
extern char ** GeomPrimitive$48$make_lines(GeomPrimitive const *self);

#if INDEX
#define GeomPrimitive_C_make_lines_p_p GeomPrimitive$48$make_lines
#endif

// C++ _inCAAAAoDYy() ==> GeomPrimitive$_$make_patches(GeomPrimitive const *param0)(GeomPrimitive const *)
extern char ** GeomPrimitive$49$make_patches(GeomPrimitive const *self);

#if INDEX
#define GeomPrimitive_C_make_patches_p_p GeomPrimitive$49$make_patches
#endif

// C++ _inCAAAA__ly() ==> GeomPrimitive$_$make_adjacency(GeomPrimitive const *param0)(GeomPrimitive const *)
extern char ** GeomPrimitive$50$make_adjacency(GeomPrimitive const *self);

#if INDEX
#define GeomPrimitive_C_make_adjacency_p_p GeomPrimitive$50$make_adjacency
#endif

// C++ _inCAAAAj0Et() ==> GeomPrimitive$_$get_num_bytes(GeomPrimitive const *param0)(GeomPrimitive const *)
extern int GeomPrimitive$51$get_num_bytes(GeomPrimitive const *self);

#if INDEX
#define GeomPrimitive_C_get_num_bytes_i_p GeomPrimitive$51$get_num_bytes
#endif

// C++ _inCAAAA1Cqn() ==> GeomPrimitive$_$get_data_size_bytes(GeomPrimitive const *param0)(GeomPrimitive const *)
extern int GeomPrimitive$52$get_data_size_bytes(GeomPrimitive const *self);

#if INDEX
#define GeomPrimitive_C_get_data_size_bytes_i_p GeomPrimitive$52$get_data_size_bytes
#endif

// C++ _inCAAAA30ZO() ==> GeomPrimitive$_$get_modified(GeomPrimitive const *param0)(GeomPrimitive const *)
extern UpdateSeq * GeomPrimitive$53$get_modified(GeomPrimitive const *self);

#if INDEX
#define GeomPrimitive_C_get_modified_p_p GeomPrimitive$53$get_modified
#endif

// C++ _inCAAAAYjSy(Thread *current_thread) ==> GeomPrimitive$_$request_resident(GeomPrimitive const *param0, Thread *param1)(GeomPrimitive const *, Thread *)
extern bool GeomPrimitive$54$request_resident(GeomPrimitive const *self, Thread *current_thread);

#if INDEX
#define GeomPrimitive_C_request_resident_B_pp GeomPrimitive$54$request_resident
#endif

// C++ _inCAAAAjotH() ==> GeomPrimitive$_$request_resident(GeomPrimitive const *param0)(GeomPrimitive const *)
extern bool GeomPrimitive$55$request_resident(GeomPrimitive const *self);

#if INDEX
#define GeomPrimitive_C_request_resident_B_p GeomPrimitive$55$request_resident
#endif

// C++ _inCAAAAnNd0(GeomVertexData const *vertex_data) ==> GeomPrimitive$_$check_valid(GeomPrimitive const *param0, GeomVertexData const *param1)(GeomPrimitive const *, GeomVertexData const *)
extern bool GeomPrimitive$56$check_valid(GeomPrimitive const *self, GeomVertexData const *vertex_data);

#if INDEX
#define GeomPrimitive_C_check_valid_B_pp GeomPrimitive$56$check_valid
#endif

// C++ _inCAAAAk6Dg(GeomVertexDataPipelineReader const *data_reader) ==> GeomPrimitive$_$check_valid(GeomPrimitive const *param0, GeomVertexDataPipelineReader const *param1)(GeomPrimitive const *, GeomVertexDataPipelineReader const *)
extern bool GeomPrimitive$57$check_valid(GeomPrimitive const *self, GeomVertexDataPipelineReader const *data_reader);
// COLLISION : GeomPrimitive_C_check_valid_B_pp GeomPrimitive$57$check_valid

// C++ _inCAAAAHwNB(std::ostream &out) ==> GeomPrimitive$_$output(GeomPrimitive const *param0, std::ostream *param1)(GeomPrimitive const *, std::ostream *)
extern void GeomPrimitive$58$output(GeomPrimitive const *self, std$_ostream *out);

#if INDEX
#define GeomPrimitive_C_output_v_pp GeomPrimitive$58$output
#endif

// C++ _inCAAAAr8rb(std::ostream &out, int indent_level) ==> GeomPrimitive$_$write(GeomPrimitive const *param0, std::ostream *param1, int param2)(GeomPrimitive const *, std::ostream *, int)
extern void GeomPrimitive$59$write(GeomPrimitive const *self, std$_ostream *out, int indent_level);

#if INDEX
#define GeomPrimitive_C_write_v_ppi GeomPrimitive$59$write
#endif

// C++ _inCAAAABUuv() ==> GeomPrimitive$_$get_vertices(GeomPrimitive const *param0)(GeomPrimitive const *)
extern char ** GeomPrimitive$60$get_vertices(GeomPrimitive const *self);

#if INDEX
#define GeomPrimitive_C_get_vertices_p_p GeomPrimitive$60$get_vertices
#endif

// C++ _inCAAAANZH_(Thread *current_thread) ==> GeomPrimitive$_$get_vertices_handle(GeomPrimitive const *param0, Thread *param1)(GeomPrimitive const *, Thread *)
extern char ** GeomPrimitive$61$get_vertices_handle(GeomPrimitive const *self, Thread *current_thread);

#if INDEX
#define GeomPrimitive_C_get_vertices_handle_p_pp GeomPrimitive$61$get_vertices_handle
#endif

// C++ _inCAAAA1PQG(int num_vertices) ==> GeomPrimitive$_$modify_vertices(GeomPrimitive *param0, int param1)(GeomPrimitive *, int)
extern char ** GeomPrimitive$62$modify_vertices(GeomPrimitive *self, int num_vertices);

#if INDEX
#define GeomPrimitive_C_modify_vertices_p_pi GeomPrimitive$62$modify_vertices
#endif

// C++ _inCAAAAf53e() ==> GeomPrimitive$_$modify_vertices(GeomPrimitive *param0)(GeomPrimitive *)
extern char ** GeomPrimitive$63$modify_vertices(GeomPrimitive *self);

#if INDEX
#define GeomPrimitive_C_modify_vertices_p_p GeomPrimitive$63$modify_vertices
#endif

// C++ _inCAAAA8gX5(Thread *current_thread) ==> GeomPrimitive$_$modify_vertices_handle(GeomPrimitive *param0, Thread *param1)(GeomPrimitive *, Thread *)
extern char ** GeomPrimitive$64$modify_vertices_handle(GeomPrimitive *self, Thread *current_thread);

#if INDEX
#define GeomPrimitive_C_modify_vertices_handle_p_pp GeomPrimitive$64$modify_vertices_handle
#endif

// C++ _inCAAAAXyE_(GeomVertexArrayData const *vertices, int num_vertices) ==> GeomPrimitive$_$set_vertices(GeomPrimitive *param0, GeomVertexArrayData const *param1, int param2)(GeomPrimitive *, GeomVertexArrayData const *, int)
extern void GeomPrimitive$65$set_vertices(GeomPrimitive *self, GeomVertexArrayData const *vertices, int num_vertices);

#if INDEX
#define GeomPrimitive_C_set_vertices_v_ppi GeomPrimitive$65$set_vertices
#endif

// C++ _inCAAAAC9oy(GeomVertexArrayData const *vertices) ==> GeomPrimitive$_$set_vertices(GeomPrimitive *param0, GeomVertexArrayData const *param1)(GeomPrimitive *, GeomVertexArrayData const *)
extern void GeomPrimitive$66$set_vertices(GeomPrimitive *self, GeomVertexArrayData const *vertices);

#if INDEX
#define GeomPrimitive_C_set_vertices_v_pp GeomPrimitive$66$set_vertices
#endif

// C++ _inCAAAA1R4R(int first_vertex, int num_vertices) ==> GeomPrimitive$_$set_nonindexed_vertices(GeomPrimitive *param0, int param1, int param2)(GeomPrimitive *, int, int)
extern void GeomPrimitive$67$set_nonindexed_vertices(GeomPrimitive *self, int first_vertex, int num_vertices);

#if INDEX
#define GeomPrimitive_C_set_nonindexed_vertices_v_pii GeomPrimitive$67$set_nonindexed_vertices
#endif

// C++ _inCAAAAhg3p() ==> GeomPrimitive$_$get_index_stride(GeomPrimitive const *param0)(GeomPrimitive const *)
extern int GeomPrimitive$68$get_index_stride(GeomPrimitive const *self);

#if INDEX
#define GeomPrimitive_C_get_index_stride_i_p GeomPrimitive$68$get_index_stride
#endif

// C++ _inCAAAAKyB9() ==> GeomPrimitive$_$get_strip_cut_index(GeomPrimitive const *param0)(GeomPrimitive const *)
extern int GeomPrimitive$69$get_strip_cut_index(GeomPrimitive const *self);

#if INDEX
#define GeomPrimitive_C_get_strip_cut_index_i_p GeomPrimitive$69$get_strip_cut_index
#endif

// C++ _inCAAAAQK6w() ==> GeomPrimitive$_$get_ends(GeomPrimitive const *param0)(GeomPrimitive const *)
extern CPTA_int * GeomPrimitive$70$get_ends(GeomPrimitive const *self);

#if INDEX
#define GeomPrimitive_C_get_ends_p_p GeomPrimitive$70$get_ends
#endif

// C++ _inCAAAAUB9R() ==> GeomPrimitive$_$modify_ends(GeomPrimitive *param0)(GeomPrimitive *)
extern PTA_int * GeomPrimitive$71$modify_ends(GeomPrimitive *self);

#if INDEX
#define GeomPrimitive_C_modify_ends_p_p GeomPrimitive$71$modify_ends
#endif

// C++ _inCAAAAiDWi(PTA_int ends) ==> GeomPrimitive$_$set_ends(GeomPrimitive *param0, PTA_int *param1)(GeomPrimitive *, PTA_int *)
extern void GeomPrimitive$72$set_ends(GeomPrimitive *self, PTA_int *ends);

#if INDEX
#define GeomPrimitive_C_set_ends_v_pp GeomPrimitive$72$set_ends
#endif

// C++ _inCAAAAKKGR() ==> GeomPrimitive$_$get_mins(GeomPrimitive const *param0)(GeomPrimitive const *)
extern char ** GeomPrimitive$73$get_mins(GeomPrimitive const *self);

#if INDEX
#define GeomPrimitive_C_get_mins_p_p GeomPrimitive$73$get_mins
#endif

// C++ _inCAAAAJsTw() ==> GeomPrimitive$_$get_maxs(GeomPrimitive const *param0)(GeomPrimitive const *)
extern char ** GeomPrimitive$74$get_maxs(GeomPrimitive const *self);

#if INDEX
#define GeomPrimitive_C_get_maxs_p_p GeomPrimitive$74$get_maxs
#endif

// C++ _inCAAAAq8m_(int min_vertex, int max_vertex, GeomVertexArrayData *mins, GeomVertexArrayData *maxs) ==> GeomPrimitive$_$set_minmax(GeomPrimitive *param0, int param1, int param2, GeomVertexArrayData *param3, GeomVertexArrayData *param4)(GeomPrimitive *, int, int, GeomVertexArrayData *, GeomVertexArrayData *)
extern void GeomPrimitive$75$set_minmax(GeomPrimitive *self, int min_vertex, int max_vertex, GeomVertexArrayData *mins, GeomVertexArrayData *maxs);

#if INDEX
#define GeomPrimitive_C_set_minmax_v_piipp GeomPrimitive$75$set_minmax
#endif

// C++ _inCAAAAO9Lj() ==> GeomPrimitive$_$clear_minmax(GeomPrimitive *param0)(GeomPrimitive *)
extern void GeomPrimitive$76$clear_minmax(GeomPrimitive *self);

#if INDEX
#define GeomPrimitive_C_clear_minmax_v_p GeomPrimitive$76$clear_minmax
#endif

// C++ _inCAAAATWqZ() ==> GeomPrimitive$_$get_num_vertices_per_primitive(GeomPrimitive const *param0)(GeomPrimitive const *)
extern int GeomPrimitive$77$get_num_vertices_per_primitive(GeomPrimitive const *self);

#if INDEX
#define GeomPrimitive_C_get_num_vertices_per_primitive_i_p GeomPrimitive$77$get_num_vertices_per_primitive
#endif

// C++ _inCAAAAUxr2() ==> GeomPrimitive$_$get_min_num_vertices_per_primitive(GeomPrimitive const *param0)(GeomPrimitive const *)
extern int GeomPrimitive$78$get_min_num_vertices_per_primitive(GeomPrimitive const *self);

#if INDEX
#define GeomPrimitive_C_get_min_num_vertices_per_primitive_i_p GeomPrimitive$78$get_min_num_vertices_per_primitive
#endif

// C++ _inCAAAAUSE8() ==> GeomPrimitive$_$get_num_unused_vertices_per_primitive(GeomPrimitive const *param0)(GeomPrimitive const *)
extern int GeomPrimitive$79$get_num_unused_vertices_per_primitive(GeomPrimitive const *self);

#if INDEX
#define GeomPrimitive_C_get_num_unused_vertices_per_primitive_i_p GeomPrimitive$79$get_num_unused_vertices_per_primitive
#endif

// C++ _inCAAAA1X36(PreparedGraphicsObjects *prepared_objects) ==> GeomPrimitive$_$prepare(GeomPrimitive *param0, PreparedGraphicsObjects *param1)(GeomPrimitive *, PreparedGraphicsObjects *)
extern void GeomPrimitive$80$prepare(GeomPrimitive *self, PreparedGraphicsObjects *prepared_objects);

#if INDEX
#define GeomPrimitive_C_prepare_v_pp GeomPrimitive$80$prepare
#endif

// C++ _inCAAAAD77V(PreparedGraphicsObjects *prepared_objects) ==> GeomPrimitive$_$is_prepared(GeomPrimitive const *param0, PreparedGraphicsObjects *param1)(GeomPrimitive const *, PreparedGraphicsObjects *)
extern bool GeomPrimitive$81$is_prepared(GeomPrimitive const *self, PreparedGraphicsObjects *prepared_objects);

#if INDEX
#define GeomPrimitive_C_is_prepared_B_pp GeomPrimitive$81$is_prepared
#endif

// C++ _inCAAAAlgI5(PreparedGraphicsObjects *prepared_objects, GraphicsStateGuardianBase *gsg) ==> GeomPrimitive$_$prepare_now(GeomPrimitive *param0, PreparedGraphicsObjects *param1, GraphicsStateGuardianBase *param2)(GeomPrimitive *, PreparedGraphicsObjects *, GraphicsStateGuardianBase *)
extern IndexBufferContext * GeomPrimitive$82$prepare_now(GeomPrimitive *self, PreparedGraphicsObjects *prepared_objects, GraphicsStateGuardianBase *gsg);

#if INDEX
#define GeomPrimitive_C_prepare_now_p_ppp GeomPrimitive$82$prepare_now
#endif

// C++ _inCAAAAeRh0(PreparedGraphicsObjects *prepared_objects) ==> GeomPrimitive$_$release(GeomPrimitive *param0, PreparedGraphicsObjects *param1)(GeomPrimitive *, PreparedGraphicsObjects *)
extern bool GeomPrimitive$83$release(GeomPrimitive *self, PreparedGraphicsObjects *prepared_objects);

#if INDEX
#define GeomPrimitive_C_release_B_pp GeomPrimitive$83$release
#endif

// C++ _inCAAAADXmz() ==> GeomPrimitive$_$release_all(GeomPrimitive *param0)(GeomPrimitive *)
extern int GeomPrimitive$84$release_all(GeomPrimitive *self);

#if INDEX
#define GeomPrimitive_C_release_all_i_p GeomPrimitive$84$release_all
#endif

// C++ _inCAAAAdWeC() ==> GeomPrimitive$_$get_index_format(GeomPrimitive const *param0)(GeomPrimitive const *)
extern GeomVertexArrayFormat const * GeomPrimitive$85$get_index_format(GeomPrimitive const *self);

#if INDEX
#define GeomPrimitive_C_get_index_format_p_p GeomPrimitive$85$get_index_format
#endif

// C++ _inCAAAARRdn(GeomEnums::NumericType index_type) ==> GeomPrimitive$_$get_index_format(GeomEnums::NumericType param0)(GeomEnums::NumericType)
extern GeomVertexArrayFormat const * GeomPrimitive$86$get_index_format(GeomEnums$_NumericType index_type);
// COLLISION : GeomPrimitive_C_get_index_format_p_p GeomPrimitive$86$get_index_format

// C++ _inCAAAA4Lsu() ==> GeomPrimitive$_$make_index_data(GeomPrimitive const *param0)(GeomPrimitive const *)
extern char ** GeomPrimitive$87$make_index_data(GeomPrimitive const *self);

#if INDEX
#define GeomPrimitive_C_make_index_data_p_p GeomPrimitive$87$make_index_data
#endif

// C++ _inCAAAA01_y(GraphicsStateGuardianBase *gsg, GeomPrimitivePipelineReader const *reader, bool force) ==> GeomPrimitive$_$draw(GeomPrimitive const *param0, GraphicsStateGuardianBase *param1, GeomPrimitivePipelineReader const *param2, bool param3)(GeomPrimitive const *, GraphicsStateGuardianBase *, GeomPrimitivePipelineReader const *, bool)
extern bool GeomPrimitive$88$draw(GeomPrimitive const *self, GraphicsStateGuardianBase *gsg, GeomPrimitivePipelineReader const *reader, bool force);

#if INDEX
#define GeomPrimitive_C_draw_B_pppB GeomPrimitive$88$draw
#endif

// C++ _inCAAAADKdV(BamWriter *manager, Datagram &dg) ==> GeomPrimitive$_$write_datagram(GeomPrimitive *param0, BamWriter *param1, Datagram *param2)(GeomPrimitive *, BamWriter *, Datagram *)
extern void GeomPrimitive$89$write_datagram(GeomPrimitive *self, BamWriter *manager, Datagram *dg);

#if INDEX
#define GeomPrimitive_C_write_datagram_v_ppp GeomPrimitive$89$write_datagram
#endif

// C++ _inCAAAAnnbx(BamReader *manager) ==> GeomPrimitive$_$finalize(GeomPrimitive *param0, BamReader *param1)(GeomPrimitive *, BamReader *)
extern void GeomPrimitive$90$finalize(GeomPrimitive *self, BamReader *manager);

#if INDEX
#define GeomPrimitive_C_finalize_v_pp GeomPrimitive$90$finalize
#endif

// C++ _inCAAAAPsal() ==> GeomPrimitive$_$get_class_type()()
extern int GeomPrimitive$91$get_class_type(void);

#if INDEX
#define GeomPrimitive_C_get_class_type_i_v GeomPrimitive$91$get_class_type
#endif

// C++ _inCAAAAP6Xi() ==> GeomPrimitive$_$init_type()()
extern void GeomPrimitive$92$init_type(void);

#if INDEX
#define GeomPrimitive_C_init_type_v_v GeomPrimitive$92$init_type
#endif

// C++ _inCAAAAe2dz() ==> GeomPrimitive$_$get_type(GeomPrimitive const *param0)(GeomPrimitive const *)
extern int GeomPrimitive$93$get_type(GeomPrimitive const *self);

#if INDEX
#define GeomPrimitive_C_get_type_i_p GeomPrimitive$93$get_type
#endif

// C++ _inCAAAA9Zyd() ==> GeomPrimitive$_$force_init_type(GeomPrimitive *param0)(GeomPrimitive *)
extern int GeomPrimitive$94$force_init_type(GeomPrimitive *self);

#if INDEX
#define GeomPrimitive_C_force_init_type_i_p GeomPrimitive$94$force_init_type
#endif


// GeomTriangles

// C++ _inCAAAAlM_V(GeomEnums::UsageHint usage_hint) ==> GeomTriangles$_$GeomTriangles(GeomEnums::UsageHint param0)(GeomEnums::UsageHint)
extern GeomTriangles * GeomTriangles$1$GeomTriangles(GeomEnums$_UsageHint usage_hint);

#if INDEX
#define GeomTriangles_C_ctor_p_p GeomTriangles$1$GeomTriangles
#endif

// C++ _inCAAAAl_JA(GeomTriangles const &copy) ==> GeomTriangles$_$GeomTriangles(GeomTriangles const *param0)(GeomTriangles const *)
extern GeomTriangles * GeomTriangles$2$GeomTriangles(GeomTriangles const *copy);
// COLLISION : GeomTriangles_C_ctor_p_p GeomTriangles$2$GeomTriangles

// C++ _inCAAAALmT7(GraphicsStateGuardianBase *gsg, GeomPrimitivePipelineReader const *reader, bool force) ==> GeomTriangles$_$draw(GeomTriangles const *param0, GraphicsStateGuardianBase *param1, GeomPrimitivePipelineReader const *param2, bool param3)(GeomTriangles const *, GraphicsStateGuardianBase *, GeomPrimitivePipelineReader const *, bool)
extern bool GeomTriangles$3$draw(GeomTriangles const *self, GraphicsStateGuardianBase *gsg, GeomPrimitivePipelineReader const *reader, bool force);

#if INDEX
#define GeomTriangles_C_draw_B_pppB GeomTriangles$3$draw
#endif

// C++ _inCAAAAPtJQ() ==> GeomTriangles$_$register_with_read_factory()()
extern void GeomTriangles$4$register_with_read_factory(void);

#if INDEX
#define GeomTriangles_C_register_with_read_factory_v_v GeomTriangles$4$register_with_read_factory
#endif

// C++ _inCAAAANvut() ==> GeomTriangles$_$get_class_type()()
extern int GeomTriangles$5$get_class_type(void);

#if INDEX
#define GeomTriangles_C_get_class_type_i_v GeomTriangles$5$get_class_type
#endif

// C++ _inCAAAAp_rq() ==> GeomTriangles$_$init_type()()
extern void GeomTriangles$6$init_type(void);

#if INDEX
#define GeomTriangles_C_init_type_v_v GeomTriangles$6$init_type
#endif

// C++ _inCAAAAFly7() ==> GeomTriangles$_$get_type(GeomTriangles const *param0)(GeomTriangles const *)
extern int GeomTriangles$7$get_type(GeomTriangles const *self);

#if INDEX
#define GeomTriangles_C_get_type_i_p GeomTriangles$7$get_type
#endif

// C++ _inCAAAAbRHm() ==> GeomTriangles$_$force_init_type(GeomTriangles *param0)(GeomTriangles *)
extern int GeomTriangles$8$force_init_type(GeomTriangles *self);

#if INDEX
#define GeomTriangles_C_force_init_type_i_p GeomTriangles$8$force_init_type
#endif


// GeomVertexArrayData

// C++ _inCAAAAurBl() ==> GeomVertexArrayData$_$upcast_to_CopyOnWriteObject(GeomVertexArrayData *param0)(GeomVertexArrayData *)
extern CopyOnWriteObject * GeomVertexArrayData$1$upcast_to_CopyOnWriteObject(GeomVertexArrayData *self);

#if INDEX
#define GeomVertexArrayData_C_upcast_to_CopyOnWriteObject_p_p GeomVertexArrayData$1$upcast_to_CopyOnWriteObject
#endif

// C++ _inCAAAAi7GK() ==> GeomVertexArrayData$_$upcast_to_SimpleLruPage(GeomVertexArrayData *param0)(GeomVertexArrayData *)
extern SimpleLruPage * GeomVertexArrayData$2$upcast_to_SimpleLruPage(GeomVertexArrayData *self);

#if INDEX
#define GeomVertexArrayData_C_upcast_to_SimpleLruPage_p_p GeomVertexArrayData$2$upcast_to_SimpleLruPage
#endif

// C++ _inCAAAASXKf() ==> GeomVertexArrayData$_$upcast_to_GeomEnums(GeomVertexArrayData *param0)(GeomVertexArrayData *)
extern GeomEnums * GeomVertexArrayData$3$upcast_to_GeomEnums(GeomVertexArrayData *self);

#if INDEX
#define GeomVertexArrayData_C_upcast_to_GeomEnums_p_p GeomVertexArrayData$3$upcast_to_GeomEnums
#endif

// C++ _inCAAAAVjYG(GeomVertexArrayData const &copy) ==> GeomVertexArrayData$_$GeomVertexArrayData(GeomVertexArrayData const *param0)(GeomVertexArrayData const *)
extern GeomVertexArrayData * GeomVertexArrayData$4$GeomVertexArrayData(GeomVertexArrayData const *copy);

#if INDEX
#define GeomVertexArrayData_C_ctor_p_p GeomVertexArrayData$4$GeomVertexArrayData
#endif

// C++ _inCAAAAL33s(GeomVertexArrayFormat const *array_format, GeomEnums::UsageHint usage_hint) ==> GeomVertexArrayData$_$GeomVertexArrayData(GeomVertexArrayFormat const *param0, GeomEnums::UsageHint param1)(GeomVertexArrayFormat const *, GeomEnums::UsageHint)
extern GeomVertexArrayData * GeomVertexArrayData$5$GeomVertexArrayData(GeomVertexArrayFormat const *array_format, GeomEnums$_UsageHint usage_hint);

#if INDEX
#define GeomVertexArrayData_C_ctor_p_pp GeomVertexArrayData$5$GeomVertexArrayData
#endif

// C++ _inCAAAAaxwn(GeomVertexArrayData const &other) ==> GeomVertexArrayData$_$compare_to(GeomVertexArrayData const *param0, GeomVertexArrayData const *param1)(GeomVertexArrayData const *, GeomVertexArrayData const *)
extern int GeomVertexArrayData$6$compare_to(GeomVertexArrayData const *self, GeomVertexArrayData const *other);

#if INDEX
#define GeomVertexArrayData_C_compare_to_i_pp GeomVertexArrayData$6$compare_to
#endif

// C++ _inCAAAA3CJD() ==> GeomVertexArrayData$_$get_array_format(GeomVertexArrayData const *param0)(GeomVertexArrayData const *)
extern GeomVertexArrayFormat const * GeomVertexArrayData$7$get_array_format(GeomVertexArrayData const *self);

#if INDEX
#define GeomVertexArrayData_C_get_array_format_p_p GeomVertexArrayData$7$get_array_format
#endif

// C++ _inCAAAAxPce() ==> GeomVertexArrayData$_$get_usage_hint(GeomVertexArrayData const *param0)(GeomVertexArrayData const *)
extern GeomEnums$_UsageHint GeomVertexArrayData$8$get_usage_hint(GeomVertexArrayData const *self);

#if INDEX
#define GeomVertexArrayData_C_get_usage_hint_p_p GeomVertexArrayData$8$get_usage_hint
#endif

// C++ _inCAAAAvFNt(GeomEnums::UsageHint usage_hint) ==> GeomVertexArrayData$_$set_usage_hint(GeomVertexArrayData *param0, GeomEnums::UsageHint param1)(GeomVertexArrayData *, GeomEnums::UsageHint)
extern void GeomVertexArrayData$9$set_usage_hint(GeomVertexArrayData *self, GeomEnums$_UsageHint usage_hint);

#if INDEX
#define GeomVertexArrayData_C_set_usage_hint_v_pp GeomVertexArrayData$9$set_usage_hint
#endif

// C++ _inCAAAAW_sd(InternalName const *name) ==> GeomVertexArrayData$_$has_column(GeomVertexArrayData const *param0, InternalName const *param1)(GeomVertexArrayData const *, InternalName const *)
extern bool GeomVertexArrayData$10$has_column(GeomVertexArrayData const *self, InternalName const *name);

#if INDEX
#define GeomVertexArrayData_C_has_column_B_ps GeomVertexArrayData$10$has_column
#endif

// C++ _inCAAAAC4RN() ==> GeomVertexArrayData$_$get_num_rows(GeomVertexArrayData const *param0)(GeomVertexArrayData const *)
extern int GeomVertexArrayData$11$get_num_rows(GeomVertexArrayData const *self);

#if INDEX
#define GeomVertexArrayData_C_get_num_rows_i_p GeomVertexArrayData$11$get_num_rows
#endif

// C++ _inCAAAATaOY(int n) ==> GeomVertexArrayData$_$set_num_rows(GeomVertexArrayData *param0, int param1)(GeomVertexArrayData *, int)
extern bool GeomVertexArrayData$12$set_num_rows(GeomVertexArrayData *self, int n);

#if INDEX
#define GeomVertexArrayData_C_set_num_rows_B_pi GeomVertexArrayData$12$set_num_rows
#endif

// C++ _inCAAAAwI3w(int n) ==> GeomVertexArrayData$_$unclean_set_num_rows(GeomVertexArrayData *param0, int param1)(GeomVertexArrayData *, int)
extern bool GeomVertexArrayData$13$unclean_set_num_rows(GeomVertexArrayData *self, int n);

#if INDEX
#define GeomVertexArrayData_C_unclean_set_num_rows_B_pi GeomVertexArrayData$13$unclean_set_num_rows
#endif

// C++ _inCAAAAAyse(int n) ==> GeomVertexArrayData$_$reserve_num_rows(GeomVertexArrayData *param0, int param1)(GeomVertexArrayData *, int)
extern bool GeomVertexArrayData$14$reserve_num_rows(GeomVertexArrayData *self, int n);

#if INDEX
#define GeomVertexArrayData_C_reserve_num_rows_B_pi GeomVertexArrayData$14$reserve_num_rows
#endif

// C++ _inCAAAAWjyr() ==> GeomVertexArrayData$_$clear_rows(GeomVertexArrayData *param0)(GeomVertexArrayData *)
extern void GeomVertexArrayData$15$clear_rows(GeomVertexArrayData *self);

#if INDEX
#define GeomVertexArrayData_C_clear_rows_v_p GeomVertexArrayData$15$clear_rows
#endif

// C++ _inCAAAAfqwK() ==> GeomVertexArrayData$_$get_data_size_bytes(GeomVertexArrayData const *param0)(GeomVertexArrayData const *)
extern std$_size_t GeomVertexArrayData$16$get_data_size_bytes(GeomVertexArrayData const *self);

#if INDEX
#define GeomVertexArrayData_C_get_data_size_bytes_l_p GeomVertexArrayData$16$get_data_size_bytes
#endif

// C++ _inCAAAATXp2() ==> GeomVertexArrayData$_$get_modified(GeomVertexArrayData const *param0)(GeomVertexArrayData const *)
extern UpdateSeq * GeomVertexArrayData$17$get_modified(GeomVertexArrayData const *self);

#if INDEX
#define GeomVertexArrayData_C_get_modified_p_p GeomVertexArrayData$17$get_modified
#endif

// C++ _inCAAAA2OGu(std::ostream &out) ==> GeomVertexArrayData$_$output(GeomVertexArrayData const *param0, std::ostream *param1)(GeomVertexArrayData const *, std::ostream *)
extern void GeomVertexArrayData$18$output(GeomVertexArrayData const *self, std$_ostream *out);

#if INDEX
#define GeomVertexArrayData_C_output_v_pp GeomVertexArrayData$18$output
#endif

// C++ _inCAAAAQjIM(std::ostream &out, int indent_level) ==> GeomVertexArrayData$_$write(GeomVertexArrayData const *param0, std::ostream *param1, int param2)(GeomVertexArrayData const *, std::ostream *, int)
extern void GeomVertexArrayData$19$write(GeomVertexArrayData const *self, std$_ostream *out, int indent_level);

#if INDEX
#define GeomVertexArrayData_C_write_v_ppi GeomVertexArrayData$19$write
#endif

// C++ _inCAAAAUqLX(std::ostream &out) ==> GeomVertexArrayData$_$write(GeomVertexArrayData const *param0, std::ostream *param1)(GeomVertexArrayData const *, std::ostream *)
extern void GeomVertexArrayData$20$write(GeomVertexArrayData const *self, std$_ostream *out);

#if INDEX
#define GeomVertexArrayData_C_write_v_pp GeomVertexArrayData$20$write
#endif

// C++ _inCAAAAuF5z(Thread *current_thread) ==> GeomVertexArrayData$_$request_resident(GeomVertexArrayData const *param0, Thread *param1)(GeomVertexArrayData const *, Thread *)
extern bool GeomVertexArrayData$21$request_resident(GeomVertexArrayData const *self, Thread *current_thread);

#if INDEX
#define GeomVertexArrayData_C_request_resident_B_pp GeomVertexArrayData$21$request_resident
#endif

// C++ _inCAAAA_mAM() ==> GeomVertexArrayData$_$request_resident(GeomVertexArrayData const *param0)(GeomVertexArrayData const *)
extern bool GeomVertexArrayData$22$request_resident(GeomVertexArrayData const *self);

#if INDEX
#define GeomVertexArrayData_C_request_resident_B_p GeomVertexArrayData$22$request_resident
#endif

// C++ _inCAAAAWh8V(Thread *current_thread) ==> GeomVertexArrayData$_$get_handle(GeomVertexArrayData const *param0, Thread *param1)(GeomVertexArrayData const *, Thread *)
extern char ** GeomVertexArrayData$23$get_handle(GeomVertexArrayData const *self, Thread *current_thread);

#if INDEX
#define GeomVertexArrayData_C_get_handle_p_pp GeomVertexArrayData$23$get_handle
#endif

// C++ _inCAAAA7UXr() ==> GeomVertexArrayData$_$get_handle(GeomVertexArrayData const *param0)(GeomVertexArrayData const *)
extern char ** GeomVertexArrayData$24$get_handle(GeomVertexArrayData const *self);

#if INDEX
#define GeomVertexArrayData_C_get_handle_p_p GeomVertexArrayData$24$get_handle
#endif

// C++ _inCAAAAY1wV(Thread *current_thread) ==> GeomVertexArrayData$_$modify_handle(GeomVertexArrayData *param0, Thread *param1)(GeomVertexArrayData *, Thread *)
extern char ** GeomVertexArrayData$25$modify_handle(GeomVertexArrayData *self, Thread *current_thread);

#if INDEX
#define GeomVertexArrayData_C_modify_handle_p_pp GeomVertexArrayData$25$modify_handle
#endif

// C++ _inCAAAAIcmt() ==> GeomVertexArrayData$_$modify_handle(GeomVertexArrayData *param0)(GeomVertexArrayData *)
extern char ** GeomVertexArrayData$26$modify_handle(GeomVertexArrayData *self);

#if INDEX
#define GeomVertexArrayData_C_modify_handle_p_p GeomVertexArrayData$26$modify_handle
#endif

// C++ _inCAAAAKLkX(PreparedGraphicsObjects *prepared_objects) ==> GeomVertexArrayData$_$prepare(GeomVertexArrayData *param0, PreparedGraphicsObjects *param1)(GeomVertexArrayData *, PreparedGraphicsObjects *)
extern void GeomVertexArrayData$27$prepare(GeomVertexArrayData *self, PreparedGraphicsObjects *prepared_objects);

#if INDEX
#define GeomVertexArrayData_C_prepare_v_pp GeomVertexArrayData$27$prepare
#endif

// C++ _inCAAAA_PUd(PreparedGraphicsObjects *prepared_objects) ==> GeomVertexArrayData$_$is_prepared(GeomVertexArrayData const *param0, PreparedGraphicsObjects *param1)(GeomVertexArrayData const *, PreparedGraphicsObjects *)
extern bool GeomVertexArrayData$28$is_prepared(GeomVertexArrayData const *self, PreparedGraphicsObjects *prepared_objects);

#if INDEX
#define GeomVertexArrayData_C_is_prepared_B_pp GeomVertexArrayData$28$is_prepared
#endif

// C++ _inCAAAAJDsu(PreparedGraphicsObjects *prepared_objects, GraphicsStateGuardianBase *gsg) ==> GeomVertexArrayData$_$prepare_now(GeomVertexArrayData *param0, PreparedGraphicsObjects *param1, GraphicsStateGuardianBase *param2)(GeomVertexArrayData *, PreparedGraphicsObjects *, GraphicsStateGuardianBase *)
extern VertexBufferContext * GeomVertexArrayData$29$prepare_now(GeomVertexArrayData *self, PreparedGraphicsObjects *prepared_objects, GraphicsStateGuardianBase *gsg);

#if INDEX
#define GeomVertexArrayData_C_prepare_now_p_ppp GeomVertexArrayData$29$prepare_now
#endif

// C++ _inCAAAAKEuC(PreparedGraphicsObjects *prepared_objects) ==> GeomVertexArrayData$_$release(GeomVertexArrayData *param0, PreparedGraphicsObjects *param1)(GeomVertexArrayData *, PreparedGraphicsObjects *)
extern bool GeomVertexArrayData$30$release(GeomVertexArrayData *self, PreparedGraphicsObjects *prepared_objects);

#if INDEX
#define GeomVertexArrayData_C_release_B_pp GeomVertexArrayData$30$release
#endif

// C++ _inCAAAA_7uC() ==> GeomVertexArrayData$_$release_all(GeomVertexArrayData *param0)(GeomVertexArrayData *)
extern int GeomVertexArrayData$31$release_all(GeomVertexArrayData *self);

#if INDEX
#define GeomVertexArrayData_C_release_all_i_p GeomVertexArrayData$31$release_all
#endif

// C++ _inCAAAAqXbF() ==> GeomVertexArrayData$_$get_independent_lru()()
extern SimpleLru * GeomVertexArrayData$32$get_independent_lru(void);

#if INDEX
#define GeomVertexArrayData_C_get_independent_lru_p_v GeomVertexArrayData$32$get_independent_lru
#endif

// C++ _inCAAAAEw5_() ==> GeomVertexArrayData$_$get_small_lru()()
extern SimpleLru * GeomVertexArrayData$33$get_small_lru(void);

#if INDEX
#define GeomVertexArrayData_C_get_small_lru_p_v GeomVertexArrayData$33$get_small_lru
#endif

// C++ _inCAAAAsD26() ==> GeomVertexArrayData$_$lru_epoch()()
extern void GeomVertexArrayData$34$lru_epoch(void);

#if INDEX
#define GeomVertexArrayData_C_lru_epoch_v_v GeomVertexArrayData$34$lru_epoch
#endif

// C++ _inCAAAAFQim() ==> GeomVertexArrayData$_$get_book()()
extern VertexDataBook * GeomVertexArrayData$35$get_book(void);

#if INDEX
#define GeomVertexArrayData_C_get_book_p_v GeomVertexArrayData$35$get_book
#endif

// C++ _inCAAAAIza_() ==> GeomVertexArrayData$_$evict_lru(GeomVertexArrayData *param0)(GeomVertexArrayData *)
extern void GeomVertexArrayData$36$evict_lru(GeomVertexArrayData *self);

#if INDEX
#define GeomVertexArrayData_C_evict_lru_v_p GeomVertexArrayData$36$evict_lru
#endif

// C++ _inCAAAAJdqX() ==> GeomVertexArrayData$_$register_with_read_factory()()
extern void GeomVertexArrayData$37$register_with_read_factory(void);

#if INDEX
#define GeomVertexArrayData_C_register_with_read_factory_v_v GeomVertexArrayData$37$register_with_read_factory
#endif

// C++ _inCAAAACjy_(BamWriter *manager, Datagram &dg) ==> GeomVertexArrayData$_$write_datagram(GeomVertexArrayData *param0, BamWriter *param1, Datagram *param2)(GeomVertexArrayData *, BamWriter *, Datagram *)
extern void GeomVertexArrayData$38$write_datagram(GeomVertexArrayData *self, BamWriter *manager, Datagram *dg);

#if INDEX
#define GeomVertexArrayData_C_write_datagram_v_ppp GeomVertexArrayData$38$write_datagram
#endif

// C++ _inCAAAAroP3(BamReader *manager, DatagramIterator &source) ==> GeomVertexArrayData$_$read_raw_data(GeomVertexArrayData *param0, BamReader *param1, DatagramIterator *param2)(GeomVertexArrayData *, BamReader *, DatagramIterator *)
extern PTA_uchar * GeomVertexArrayData$39$read_raw_data(GeomVertexArrayData *self, BamReader *manager, DatagramIterator *source);

#if INDEX
#define GeomVertexArrayData_C_read_raw_data_p_ppp GeomVertexArrayData$39$read_raw_data
#endif

// C++ _inCAAAAohN3(BamReader *manager) ==> GeomVertexArrayData$_$finalize(GeomVertexArrayData *param0, BamReader *param1)(GeomVertexArrayData *, BamReader *)
extern void GeomVertexArrayData$40$finalize(GeomVertexArrayData *self, BamReader *manager);

#if INDEX
#define GeomVertexArrayData_C_finalize_v_pp GeomVertexArrayData$40$finalize
#endif

// C++ _inCAAAANsR3() ==> GeomVertexArrayData$_$get_class_type()()
extern int GeomVertexArrayData$41$get_class_type(void);

#if INDEX
#define GeomVertexArrayData_C_get_class_type_i_v GeomVertexArrayData$41$get_class_type
#endif

// C++ _inCAAAAByUz() ==> GeomVertexArrayData$_$init_type()()
extern void GeomVertexArrayData$42$init_type(void);

#if INDEX
#define GeomVertexArrayData_C_init_type_v_v GeomVertexArrayData$42$init_type
#endif

// C++ _inCAAAAkps6() ==> GeomVertexArrayData$_$get_type(GeomVertexArrayData const *param0)(GeomVertexArrayData const *)
extern int GeomVertexArrayData$43$get_type(GeomVertexArrayData const *self);

#if INDEX
#define GeomVertexArrayData_C_get_type_i_p GeomVertexArrayData$43$get_type
#endif

// C++ _inCAAAAbnzP() ==> GeomVertexArrayData$_$force_init_type(GeomVertexArrayData *param0)(GeomVertexArrayData *)
extern int GeomVertexArrayData$44$force_init_type(GeomVertexArrayData *self);

#if INDEX
#define GeomVertexArrayData_C_force_init_type_i_p GeomVertexArrayData$44$force_init_type
#endif


// GeomVertexArrayDataHandle

// C++ _inCAAAAThJE() ==> GeomVertexArrayDataHandle$_$upcast_to_ReferenceCount(GeomVertexArrayDataHandle *param0)(GeomVertexArrayDataHandle *)
extern ReferenceCount * GeomVertexArrayDataHandle$1$upcast_to_ReferenceCount(GeomVertexArrayDataHandle *self);

#if INDEX
#define GeomVertexArrayDataHandle_C_upcast_to_ReferenceCount_p_p GeomVertexArrayDataHandle$1$upcast_to_ReferenceCount
#endif

// C++ _inCAAAA4wn1() ==> GeomVertexArrayDataHandle$_$upcast_to_GeomEnums(GeomVertexArrayDataHandle *param0)(GeomVertexArrayDataHandle *)
extern GeomEnums * GeomVertexArrayDataHandle$2$upcast_to_GeomEnums(GeomVertexArrayDataHandle *self);

#if INDEX
#define GeomVertexArrayDataHandle_C_upcast_to_GeomEnums_p_p GeomVertexArrayDataHandle$2$upcast_to_GeomEnums
#endif

// C++ _inCAAAAv92t() ==> GeomVertexArrayDataHandle$_$get_current_thread(GeomVertexArrayDataHandle const *param0)(GeomVertexArrayDataHandle const *)
extern Thread * GeomVertexArrayDataHandle$3$get_current_thread(GeomVertexArrayDataHandle const *self);

#if INDEX
#define GeomVertexArrayDataHandle_C_get_current_thread_p_p GeomVertexArrayDataHandle$3$get_current_thread
#endif

// C++ _inCAAAAi1lt(bool force) ==> GeomVertexArrayDataHandle$_$get_read_pointer(GeomVertexArrayDataHandle const *param0, bool param1)(GeomVertexArrayDataHandle const *, bool)
extern void GeomVertexArrayDataHandle$4$get_read_pointer(GeomVertexArrayDataHandle const *self, bool force);

#if INDEX
#define GeomVertexArrayDataHandle_C_get_read_pointer_v_pB GeomVertexArrayDataHandle$4$get_read_pointer
#endif

// C++ _inCAAAAKSlP() ==> GeomVertexArrayDataHandle$_$get_write_pointer(GeomVertexArrayDataHandle *param0)(GeomVertexArrayDataHandle *)
extern void GeomVertexArrayDataHandle$5$get_write_pointer(GeomVertexArrayDataHandle *self);

#if INDEX
#define GeomVertexArrayDataHandle_C_get_write_pointer_v_p GeomVertexArrayDataHandle$5$get_write_pointer
#endif

// C++ _inCAAAAuaEm() ==> GeomVertexArrayDataHandle$_$get_object(GeomVertexArrayDataHandle *param0)(GeomVertexArrayDataHandle *)
extern GeomVertexArrayData * GeomVertexArrayDataHandle$6$get_object(GeomVertexArrayDataHandle *self);

#if INDEX
#define GeomVertexArrayDataHandle_C_get_object_p_p GeomVertexArrayDataHandle$6$get_object
#endif

// C++ _inCAAAAaPDR() ==> GeomVertexArrayDataHandle$_$get_object(GeomVertexArrayDataHandle const *param0)(GeomVertexArrayDataHandle const *)
extern GeomVertexArrayData const * GeomVertexArrayDataHandle$7$get_object(GeomVertexArrayDataHandle const *self);
// COLLISION : GeomVertexArrayDataHandle_C_get_object_p_p GeomVertexArrayDataHandle$7$get_object

// C++ _inCAAAAksp0() ==> GeomVertexArrayDataHandle$_$get_array_format(GeomVertexArrayDataHandle const *param0)(GeomVertexArrayDataHandle const *)
extern GeomVertexArrayFormat const * GeomVertexArrayDataHandle$8$get_array_format(GeomVertexArrayDataHandle const *self);

#if INDEX
#define GeomVertexArrayDataHandle_C_get_array_format_p_p GeomVertexArrayDataHandle$8$get_array_format
#endif

// C++ _inCAAAAtdrI() ==> GeomVertexArrayDataHandle$_$get_usage_hint(GeomVertexArrayDataHandle const *param0)(GeomVertexArrayDataHandle const *)
extern GeomEnums$_UsageHint GeomVertexArrayDataHandle$9$get_usage_hint(GeomVertexArrayDataHandle const *self);

#if INDEX
#define GeomVertexArrayDataHandle_C_get_usage_hint_p_p GeomVertexArrayDataHandle$9$get_usage_hint
#endif

// C++ _inCAAAAi9M9() ==> GeomVertexArrayDataHandle$_$get_num_rows(GeomVertexArrayDataHandle const *param0)(GeomVertexArrayDataHandle const *)
extern int GeomVertexArrayDataHandle$10$get_num_rows(GeomVertexArrayDataHandle const *self);

#if INDEX
#define GeomVertexArrayDataHandle_C_get_num_rows_i_p GeomVertexArrayDataHandle$10$get_num_rows
#endif

// C++ _inCAAAA_DY4(int n) ==> GeomVertexArrayDataHandle$_$set_num_rows(GeomVertexArrayDataHandle *param0, int param1)(GeomVertexArrayDataHandle *, int)
extern bool GeomVertexArrayDataHandle$11$set_num_rows(GeomVertexArrayDataHandle *self, int n);

#if INDEX
#define GeomVertexArrayDataHandle_C_set_num_rows_B_pi GeomVertexArrayDataHandle$11$set_num_rows
#endif

// C++ _inCAAAAJbnk(int n) ==> GeomVertexArrayDataHandle$_$unclean_set_num_rows(GeomVertexArrayDataHandle *param0, int param1)(GeomVertexArrayDataHandle *, int)
extern bool GeomVertexArrayDataHandle$12$unclean_set_num_rows(GeomVertexArrayDataHandle *self, int n);

#if INDEX
#define GeomVertexArrayDataHandle_C_unclean_set_num_rows_B_pi GeomVertexArrayDataHandle$12$unclean_set_num_rows
#endif

// C++ _inCAAAAAN5W(int n) ==> GeomVertexArrayDataHandle$_$reserve_num_rows(GeomVertexArrayDataHandle *param0, int param1)(GeomVertexArrayDataHandle *, int)
extern bool GeomVertexArrayDataHandle$13$reserve_num_rows(GeomVertexArrayDataHandle *self, int n);

#if INDEX
#define GeomVertexArrayDataHandle_C_reserve_num_rows_B_pi GeomVertexArrayDataHandle$13$reserve_num_rows
#endif

// C++ _inCAAAARt2b() ==> GeomVertexArrayDataHandle$_$clear_rows(GeomVertexArrayDataHandle *param0)(GeomVertexArrayDataHandle *)
extern void GeomVertexArrayDataHandle$14$clear_rows(GeomVertexArrayDataHandle *self);

#if INDEX
#define GeomVertexArrayDataHandle_C_clear_rows_v_p GeomVertexArrayDataHandle$14$clear_rows
#endif

// C++ _inCAAAAs9ud() ==> GeomVertexArrayDataHandle$_$get_data_size_bytes(GeomVertexArrayDataHandle const *param0)(GeomVertexArrayDataHandle const *)
extern std$_size_t GeomVertexArrayDataHandle$15$get_data_size_bytes(GeomVertexArrayDataHandle const *self);

#if INDEX
#define GeomVertexArrayDataHandle_C_get_data_size_bytes_l_p GeomVertexArrayDataHandle$15$get_data_size_bytes
#endif

// C++ _inCAAAAlsYT() ==> GeomVertexArrayDataHandle$_$get_modified(GeomVertexArrayDataHandle const *param0)(GeomVertexArrayDataHandle const *)
extern UpdateSeq * GeomVertexArrayDataHandle$16$get_modified(GeomVertexArrayDataHandle const *self);

#if INDEX
#define GeomVertexArrayDataHandle_C_get_modified_p_p GeomVertexArrayDataHandle$16$get_modified
#endif

// C++ _inCAAAAjdit() ==> GeomVertexArrayDataHandle$_$request_resident(GeomVertexArrayDataHandle const *param0)(GeomVertexArrayDataHandle const *)
extern bool GeomVertexArrayDataHandle$17$request_resident(GeomVertexArrayDataHandle const *self);

#if INDEX
#define GeomVertexArrayDataHandle_C_request_resident_B_p GeomVertexArrayDataHandle$17$request_resident
#endif

// C++ _inCAAAAivjI(PreparedGraphicsObjects *prepared_objects, GraphicsStateGuardianBase *gsg) ==> GeomVertexArrayDataHandle$_$prepare_now(GeomVertexArrayDataHandle const *param0, PreparedGraphicsObjects *param1, GraphicsStateGuardianBase *param2)(GeomVertexArrayDataHandle const *, PreparedGraphicsObjects *, GraphicsStateGuardianBase *)
extern VertexBufferContext * GeomVertexArrayDataHandle$18$prepare_now(GeomVertexArrayDataHandle const *self, PreparedGraphicsObjects *prepared_objects, GraphicsStateGuardianBase *gsg);

#if INDEX
#define GeomVertexArrayDataHandle_C_prepare_now_p_ppp GeomVertexArrayDataHandle$18$prepare_now
#endif

// C++ _inCAAAA1fE3(GeomVertexArrayDataHandle const *other) ==> GeomVertexArrayDataHandle$_$copy_data_from(GeomVertexArrayDataHandle *param0, GeomVertexArrayDataHandle const *param1)(GeomVertexArrayDataHandle *, GeomVertexArrayDataHandle const *)
extern void GeomVertexArrayDataHandle$19$copy_data_from(GeomVertexArrayDataHandle *self, GeomVertexArrayDataHandle const *other);

#if INDEX
#define GeomVertexArrayDataHandle_C_copy_data_from_v_pp GeomVertexArrayDataHandle$19$copy_data_from
#endif

// C++ _inCAAAA8fdZ(std::size_t to_start, std::size_t to_size, GeomVertexArrayDataHandle const *other, std::size_t from_start, std::size_t from_size) ==> GeomVertexArrayDataHandle$_$copy_subdata_from(GeomVertexArrayDataHandle *param0, std::size_t param1, std::size_t param2, GeomVertexArrayDataHandle const *param3, std::size_t param4, std::size_t param5)(GeomVertexArrayDataHandle *, std::size_t, std::size_t, GeomVertexArrayDataHandle const *, std::size_t, std::size_t)
extern void GeomVertexArrayDataHandle$20$copy_subdata_from(GeomVertexArrayDataHandle *self, std$_size_t to_start, std$_size_t to_size, GeomVertexArrayDataHandle const *other, std$_size_t from_start, std$_size_t from_size);

#if INDEX
#define GeomVertexArrayDataHandle_C_copy_subdata_from_v_pllpll GeomVertexArrayDataHandle$20$copy_subdata_from
#endif

// C++ _inCAAAAYqmb() ==> GeomVertexArrayDataHandle$_$get_data(GeomVertexArrayDataHandle const *param0)(GeomVertexArrayDataHandle const *)
extern vector_uchar GeomVertexArrayDataHandle$21$get_data(GeomVertexArrayDataHandle const *self);

#if INDEX
#define GeomVertexArrayDataHandle_C_get_data_p_p GeomVertexArrayDataHandle$21$get_data
#endif

// C++ _inCAAAAYJdC(vector_uchar const &data) ==> GeomVertexArrayDataHandle$_$set_data(GeomVertexArrayDataHandle *param0, vector_uchar param1)(GeomVertexArrayDataHandle *, vector_uchar)
extern void GeomVertexArrayDataHandle$22$set_data(GeomVertexArrayDataHandle *self, vector_uchar data);

#if INDEX
#define GeomVertexArrayDataHandle_C_set_data_v_pp GeomVertexArrayDataHandle$22$set_data
#endif

// C++ _inCAAAA7hK5(std::size_t start, std::size_t size) ==> GeomVertexArrayDataHandle$_$get_subdata(GeomVertexArrayDataHandle const *param0, std::size_t param1, std::size_t param2)(GeomVertexArrayDataHandle const *, std::size_t, std::size_t)
extern vector_uchar GeomVertexArrayDataHandle$23$get_subdata(GeomVertexArrayDataHandle const *self, std$_size_t start, std$_size_t size);

#if INDEX
#define GeomVertexArrayDataHandle_C_get_subdata_p_pll GeomVertexArrayDataHandle$23$get_subdata
#endif

// C++ _inCAAAARcnF(std::size_t start, std::size_t size, vector_uchar const &data) ==> GeomVertexArrayDataHandle$_$set_subdata(GeomVertexArrayDataHandle *param0, std::size_t param1, std::size_t param2, vector_uchar param3)(GeomVertexArrayDataHandle *, std::size_t, std::size_t, vector_uchar)
extern void GeomVertexArrayDataHandle$24$set_subdata(GeomVertexArrayDataHandle *self, std$_size_t start, std$_size_t size, vector_uchar data);

#if INDEX
#define GeomVertexArrayDataHandle_C_set_subdata_v_pllp GeomVertexArrayDataHandle$24$set_subdata
#endif

// C++ _inCAAAAyhDL() ==> GeomVertexArrayDataHandle$_$mark_used(GeomVertexArrayDataHandle const *param0)(GeomVertexArrayDataHandle const *)
extern void GeomVertexArrayDataHandle$25$mark_used(GeomVertexArrayDataHandle const *self);

#if INDEX
#define GeomVertexArrayDataHandle_C_mark_used_v_p GeomVertexArrayDataHandle$25$mark_used
#endif

// C++ _inCAAAAVIB7() ==> GeomVertexArrayDataHandle$_$get_class_type()()
extern int GeomVertexArrayDataHandle$26$get_class_type(void);

#if INDEX
#define GeomVertexArrayDataHandle_C_get_class_type_i_v GeomVertexArrayDataHandle$26$get_class_type
#endif

// C++ _inCAAAAWKb8() ==> GeomVertexArrayDataHandle$_$init_type()()
extern void GeomVertexArrayDataHandle$27$init_type(void);

#if INDEX
#define GeomVertexArrayDataHandle_C_init_type_v_v GeomVertexArrayDataHandle$27$init_type
#endif


// GeomVertexArrayFormat

// C++ _inCAAAA7ZDF() ==> GeomVertexArrayFormat$_$upcast_to_TypedWritableReferenceCount(GeomVertexArrayFormat *param0)(GeomVertexArrayFormat *)
extern TypedWritableReferenceCount * GeomVertexArrayFormat$1$upcast_to_TypedWritableReferenceCount(GeomVertexArrayFormat *self);

#if INDEX
#define GeomVertexArrayFormat_C_upcast_to_TypedWritableReferenceCount_p_p GeomVertexArrayFormat$1$upcast_to_TypedWritableReferenceCount
#endif

// C++ _inCAAAAbG5U() ==> GeomVertexArrayFormat$_$upcast_to_GeomEnums(GeomVertexArrayFormat *param0)(GeomVertexArrayFormat *)
extern GeomEnums * GeomVertexArrayFormat$2$upcast_to_GeomEnums(GeomVertexArrayFormat *self);

#if INDEX
#define GeomVertexArrayFormat_C_upcast_to_GeomEnums_p_p GeomVertexArrayFormat$2$upcast_to_GeomEnums
#endif

// C++ _inCAAAAqhGa() ==> GeomVertexArrayFormat$_$GeomVertexArrayFormat()()
extern GeomVertexArrayFormat * GeomVertexArrayFormat$3$GeomVertexArrayFormat(void);

#if INDEX
#define GeomVertexArrayFormat_C_ctor_p_v GeomVertexArrayFormat$3$GeomVertexArrayFormat
#endif

// C++ _inCAAAArTI3(CPT_InternalName name0, int num_components0, GeomEnums::NumericType numeric_type0, GeomEnums::Contents contents0) ==> GeomVertexArrayFormat$_$GeomVertexArrayFormat(CPT_InternalName *param0, int param1, GeomEnums::NumericType param2, GeomEnums::Contents param3)(CPT_InternalName *, int, GeomEnums::NumericType, GeomEnums::Contents)
extern GeomVertexArrayFormat * GeomVertexArrayFormat$4$GeomVertexArrayFormat(CPT_InternalName *name0, int num_components0, GeomEnums$_NumericType numeric_type0, GeomEnums$_Contents contents0);

#if INDEX
#define GeomVertexArrayFormat_C_ctor_p_sipp GeomVertexArrayFormat$4$GeomVertexArrayFormat
#endif

// C++ _inCAAAARCcs(CPT_InternalName name0, int num_components0, GeomEnums::NumericType numeric_type0, GeomEnums::Contents contents0, CPT_InternalName name1, int num_components1, GeomEnums::NumericType numeric_type1, GeomEnums::Contents contents1) ==> GeomVertexArrayFormat$_$GeomVertexArrayFormat(CPT_InternalName *param0, int param1, GeomEnums::NumericType param2, GeomEnums::Contents param3, CPT_InternalName *param4, int param5, GeomEnums::NumericType param6, GeomEnums::Contents param7)(CPT_InternalName *, int, GeomEnums::NumericType, GeomEnums::Contents, CPT_InternalName *, int, GeomEnums::NumericType, GeomEnums::Contents)
extern GeomVertexArrayFormat * GeomVertexArrayFormat$5$GeomVertexArrayFormat(CPT_InternalName *name0, int num_components0, GeomEnums$_NumericType numeric_type0, GeomEnums$_Contents contents0, CPT_InternalName *name1, int num_components1, GeomEnums$_NumericType numeric_type1, GeomEnums$_Contents contents1);

#if INDEX
#define GeomVertexArrayFormat_C_ctor_p_sippsipp GeomVertexArrayFormat$5$GeomVertexArrayFormat
#endif

// C++ _inCAAAAf_nE(CPT_InternalName name0, int num_components0, GeomEnums::NumericType numeric_type0, GeomEnums::Contents contents0, CPT_InternalName name1, int num_components1, GeomEnums::NumericType numeric_type1, GeomEnums::Contents contents1, CPT_InternalName name2, int num_components2, GeomEnums::NumericType numeric_type2, GeomEnums::Contents contents2) ==> GeomVertexArrayFormat$_$GeomVertexArrayFormat(CPT_InternalName *param0, int param1, GeomEnums::NumericType param2, GeomEnums::Contents param3, CPT_InternalName *param4, int param5, GeomEnums::NumericType param6, GeomEnums::Contents param7, CPT_InternalName *param8, int param9, GeomEnums::NumericType param10, GeomEnums::Contents param11)(CPT_InternalName *, int, GeomEnums::NumericType, GeomEnums::Contents, CPT_InternalName *, int, GeomEnums::NumericType, GeomEnums::Contents, CPT_InternalName *, int, GeomEnums::NumericType, GeomEnums::Contents)
extern GeomVertexArrayFormat * GeomVertexArrayFormat$6$GeomVertexArrayFormat(CPT_InternalName *name0, int num_components0, GeomEnums$_NumericType numeric_type0, GeomEnums$_Contents contents0, CPT_InternalName *name1, int num_components1, GeomEnums$_NumericType numeric_type1, GeomEnums$_Contents contents1, CPT_InternalName *name2, int num_components2, GeomEnums$_NumericType numeric_type2, GeomEnums$_Contents contents2);

#if INDEX
#define GeomVertexArrayFormat_C_ctor_p_sippsippsipp GeomVertexArrayFormat$6$GeomVertexArrayFormat
#endif

// C++ _inCAAAAZO9K(CPT_InternalName name0, int num_components0, GeomEnums::NumericType numeric_type0, GeomEnums::Contents contents0, CPT_InternalName name1, int num_components1, GeomEnums::NumericType numeric_type1, GeomEnums::Contents contents1, CPT_InternalName name2, int num_components2, GeomEnums::NumericType numeric_type2, GeomEnums::Contents contents2, CPT_InternalName name3, int num_components3, GeomEnums::NumericType numeric_type3, GeomEnums::Contents contents3) ==> GeomVertexArrayFormat$_$GeomVertexArrayFormat(CPT_InternalName *param0, int param1, GeomEnums::NumericType param2, GeomEnums::Contents param3, CPT_InternalName *param4, int param5, GeomEnums::NumericType param6, GeomEnums::Contents param7, CPT_InternalName *param8, int param9, GeomEnums::NumericType param10, GeomEnums::Contents param11, CPT_InternalName *param12, int param13, GeomEnums::NumericType param14, GeomEnums::Contents param15)(CPT_InternalName *, int, GeomEnums::NumericType, GeomEnums::Contents, CPT_InternalName *, int, GeomEnums::NumericType, GeomEnums::Contents, CPT_InternalName *, int, GeomEnums::NumericType, GeomEnums::Contents, CPT_InternalName *, int, GeomEnums::NumericType, GeomEnums::Contents)
extern GeomVertexArrayFormat * GeomVertexArrayFormat$7$GeomVertexArrayFormat(CPT_InternalName *name0, int num_components0, GeomEnums$_NumericType numeric_type0, GeomEnums$_Contents contents0, CPT_InternalName *name1, int num_components1, GeomEnums$_NumericType numeric_type1, GeomEnums$_Contents contents1, CPT_InternalName *name2, int num_components2, GeomEnums$_NumericType numeric_type2, GeomEnums$_Contents contents2, CPT_InternalName *name3, int num_components3, GeomEnums$_NumericType numeric_type3, GeomEnums$_Contents contents3);

#if INDEX
#define GeomVertexArrayFormat_C_ctor_p_sippsippsippsipp GeomVertexArrayFormat$7$GeomVertexArrayFormat
#endif

// C++ _inCAAAAEyku(GeomVertexArrayFormat const &copy) ==> GeomVertexArrayFormat$_$GeomVertexArrayFormat(GeomVertexArrayFormat const *param0)(GeomVertexArrayFormat const *)
extern GeomVertexArrayFormat * GeomVertexArrayFormat$8$GeomVertexArrayFormat(GeomVertexArrayFormat const *copy);

#if INDEX
#define GeomVertexArrayFormat_C_ctor_p_p GeomVertexArrayFormat$8$GeomVertexArrayFormat
#endif

// C++ _inCAAAAnmU1() ==> GeomVertexArrayFormat$_$unref(GeomVertexArrayFormat const *param0)(GeomVertexArrayFormat const *)
extern bool GeomVertexArrayFormat$9$unref(GeomVertexArrayFormat const *self);

#if INDEX
#define GeomVertexArrayFormat_C_unref_B_p GeomVertexArrayFormat$9$unref
#endif

// C++ _inCAAAAUdKQ() ==> GeomVertexArrayFormat$_$is_registered(GeomVertexArrayFormat const *param0)(GeomVertexArrayFormat const *)
extern bool GeomVertexArrayFormat$10$is_registered(GeomVertexArrayFormat const *self);

#if INDEX
#define GeomVertexArrayFormat_C_is_registered_B_p GeomVertexArrayFormat$10$is_registered
#endif

// C++ _inCAAAAojG9(GeomVertexArrayFormat const *format) ==> GeomVertexArrayFormat$_$register_format(GeomVertexArrayFormat const *param0)(GeomVertexArrayFormat const *)
extern char ** GeomVertexArrayFormat$11$register_format(GeomVertexArrayFormat const *format);

#if INDEX
#define GeomVertexArrayFormat_C_register_format_p_p GeomVertexArrayFormat$11$register_format
#endif

// C++ _inCAAAAJA_4() ==> GeomVertexArrayFormat$_$get_stride(GeomVertexArrayFormat const *param0)(GeomVertexArrayFormat const *)
extern int GeomVertexArrayFormat$12$get_stride(GeomVertexArrayFormat const *self);

#if INDEX
#define GeomVertexArrayFormat_C_get_stride_i_p GeomVertexArrayFormat$12$get_stride
#endif

// C++ _inCAAAAkPw2(int stride) ==> GeomVertexArrayFormat$_$set_stride(GeomVertexArrayFormat *param0, int param1)(GeomVertexArrayFormat *, int)
extern void GeomVertexArrayFormat$13$set_stride(GeomVertexArrayFormat *self, int stride);

#if INDEX
#define GeomVertexArrayFormat_C_set_stride_v_pi GeomVertexArrayFormat$13$set_stride
#endif

// C++ _inCAAAA5U9H() ==> GeomVertexArrayFormat$_$get_pad_to(GeomVertexArrayFormat const *param0)(GeomVertexArrayFormat const *)
extern int GeomVertexArrayFormat$14$get_pad_to(GeomVertexArrayFormat const *self);

#if INDEX
#define GeomVertexArrayFormat_C_get_pad_to_i_p GeomVertexArrayFormat$14$get_pad_to
#endif

// C++ _inCAAAAugvF(int pad_to) ==> GeomVertexArrayFormat$_$set_pad_to(GeomVertexArrayFormat *param0, int param1)(GeomVertexArrayFormat *, int)
extern void GeomVertexArrayFormat$15$set_pad_to(GeomVertexArrayFormat *self, int pad_to);

#if INDEX
#define GeomVertexArrayFormat_C_set_pad_to_v_pi GeomVertexArrayFormat$15$set_pad_to
#endif

// C++ _inCAAAAzIwh() ==> GeomVertexArrayFormat$_$get_divisor(GeomVertexArrayFormat const *param0)(GeomVertexArrayFormat const *)
extern int GeomVertexArrayFormat$16$get_divisor(GeomVertexArrayFormat const *self);

#if INDEX
#define GeomVertexArrayFormat_C_get_divisor_i_p GeomVertexArrayFormat$16$get_divisor
#endif

// C++ _inCAAAAFbHC(int divisor) ==> GeomVertexArrayFormat$_$set_divisor(GeomVertexArrayFormat *param0, int param1)(GeomVertexArrayFormat *, int)
extern void GeomVertexArrayFormat$17$set_divisor(GeomVertexArrayFormat *self, int divisor);

#if INDEX
#define GeomVertexArrayFormat_C_set_divisor_v_pi GeomVertexArrayFormat$17$set_divisor
#endif

// C++ _inCAAAAt2Rt() ==> GeomVertexArrayFormat$_$get_total_bytes(GeomVertexArrayFormat const *param0)(GeomVertexArrayFormat const *)
extern int GeomVertexArrayFormat$18$get_total_bytes(GeomVertexArrayFormat const *self);

#if INDEX
#define GeomVertexArrayFormat_C_get_total_bytes_i_p GeomVertexArrayFormat$18$get_total_bytes
#endif

// C++ _inCAAAAR9f6(CPT_InternalName name, int num_components, GeomEnums::NumericType numeric_type, GeomEnums::Contents contents, int start, int column_alignment) ==> GeomVertexArrayFormat$_$add_column(GeomVertexArrayFormat *param0, CPT_InternalName *param1, int param2, GeomEnums::NumericType param3, GeomEnums::Contents param4, int param5, int param6)(GeomVertexArrayFormat *, CPT_InternalName *, int, GeomEnums::NumericType, GeomEnums::Contents, int, int)
extern int GeomVertexArrayFormat$19$add_column(GeomVertexArrayFormat *self, CPT_InternalName *name, int num_components, GeomEnums$_NumericType numeric_type, GeomEnums$_Contents contents, int start, int column_alignment);

#if INDEX
#define GeomVertexArrayFormat_C_add_column_i_psippii GeomVertexArrayFormat$19$add_column
#endif

// C++ _inCAAAAWLj5(CPT_InternalName name, int num_components, GeomEnums::NumericType numeric_type, GeomEnums::Contents contents, int start) ==> GeomVertexArrayFormat$_$add_column(GeomVertexArrayFormat *param0, CPT_InternalName *param1, int param2, GeomEnums::NumericType param3, GeomEnums::Contents param4, int param5)(GeomVertexArrayFormat *, CPT_InternalName *, int, GeomEnums::NumericType, GeomEnums::Contents, int)
extern int GeomVertexArrayFormat$20$add_column(GeomVertexArrayFormat *self, CPT_InternalName *name, int num_components, GeomEnums$_NumericType numeric_type, GeomEnums$_Contents contents, int start);

#if INDEX
#define GeomVertexArrayFormat_C_add_column_i_psippi GeomVertexArrayFormat$20$add_column
#endif

// C++ _inCAAAAtZDZ(CPT_InternalName name, int num_components, GeomEnums::NumericType numeric_type, GeomEnums::Contents contents) ==> GeomVertexArrayFormat$_$add_column(GeomVertexArrayFormat *param0, CPT_InternalName *param1, int param2, GeomEnums::NumericType param3, GeomEnums::Contents param4)(GeomVertexArrayFormat *, CPT_InternalName *, int, GeomEnums::NumericType, GeomEnums::Contents)
extern int GeomVertexArrayFormat$21$add_column(GeomVertexArrayFormat *self, CPT_InternalName *name, int num_components, GeomEnums$_NumericType numeric_type, GeomEnums$_Contents contents);

#if INDEX
#define GeomVertexArrayFormat_C_add_column_i_psipp GeomVertexArrayFormat$21$add_column
#endif

// C++ _inCAAAAGAtY(GeomVertexColumn const &column) ==> GeomVertexArrayFormat$_$add_column(GeomVertexArrayFormat *param0, GeomVertexColumn const *param1)(GeomVertexArrayFormat *, GeomVertexColumn const *)
extern int GeomVertexArrayFormat$22$add_column(GeomVertexArrayFormat *self, GeomVertexColumn const *column);

#if INDEX
#define GeomVertexArrayFormat_C_add_column_i_pp GeomVertexArrayFormat$22$add_column
#endif

// C++ _inCAAAAvK2M(InternalName const *name) ==> GeomVertexArrayFormat$_$remove_column(GeomVertexArrayFormat *param0, InternalName const *param1)(GeomVertexArrayFormat *, InternalName const *)
extern void GeomVertexArrayFormat$23$remove_column(GeomVertexArrayFormat *self, InternalName const *name);

#if INDEX
#define GeomVertexArrayFormat_C_remove_column_v_ps GeomVertexArrayFormat$23$remove_column
#endif

// C++ _inCAAAA2EfH() ==> GeomVertexArrayFormat$_$clear_columns(GeomVertexArrayFormat *param0)(GeomVertexArrayFormat *)
extern void GeomVertexArrayFormat$24$clear_columns(GeomVertexArrayFormat *self);

#if INDEX
#define GeomVertexArrayFormat_C_clear_columns_v_p GeomVertexArrayFormat$24$clear_columns
#endif

// C++ _inCAAAAnS7c() ==> GeomVertexArrayFormat$_$pack_columns(GeomVertexArrayFormat *param0)(GeomVertexArrayFormat *)
extern void GeomVertexArrayFormat$25$pack_columns(GeomVertexArrayFormat *self);

#if INDEX
#define GeomVertexArrayFormat_C_pack_columns_v_p GeomVertexArrayFormat$25$pack_columns
#endif

// C++ _inCAAAAruWO() ==> GeomVertexArrayFormat$_$align_columns_for_animation(GeomVertexArrayFormat *param0)(GeomVertexArrayFormat *)
extern void GeomVertexArrayFormat$26$align_columns_for_animation(GeomVertexArrayFormat *self);

#if INDEX
#define GeomVertexArrayFormat_C_align_columns_for_animation_v_p GeomVertexArrayFormat$26$align_columns_for_animation
#endif

// C++ _inCAAAA5qdH() ==> GeomVertexArrayFormat$_$get_num_columns(GeomVertexArrayFormat const *param0)(GeomVertexArrayFormat const *)
extern int GeomVertexArrayFormat$27$get_num_columns(GeomVertexArrayFormat const *self);

#if INDEX
#define GeomVertexArrayFormat_C_get_num_columns_i_p GeomVertexArrayFormat$27$get_num_columns
#endif

// C++ _inCAAAAC_4r(InternalName const *name) ==> GeomVertexArrayFormat$_$get_column(GeomVertexArrayFormat const *param0, InternalName const *param1)(GeomVertexArrayFormat const *, InternalName const *)
extern GeomVertexColumn const * GeomVertexArrayFormat$28$get_column(GeomVertexArrayFormat const *self, InternalName const *name);

#if INDEX
#define GeomVertexArrayFormat_C_get_column_p_ps GeomVertexArrayFormat$28$get_column
#endif

// C++ _inCAAAA0ltF(int i) ==> GeomVertexArrayFormat$_$get_column(GeomVertexArrayFormat const *param0, int param1)(GeomVertexArrayFormat const *, int)
extern GeomVertexColumn const * GeomVertexArrayFormat$29$get_column(GeomVertexArrayFormat const *self, int i);

#if INDEX
#define GeomVertexArrayFormat_C_get_column_p_pi GeomVertexArrayFormat$29$get_column
#endif

// C++ _inCAAAAxBGV(int start_byte, int num_bytes) ==> GeomVertexArrayFormat$_$get_column(GeomVertexArrayFormat const *param0, int param1, int param2)(GeomVertexArrayFormat const *, int, int)
extern GeomVertexColumn const * GeomVertexArrayFormat$30$get_column(GeomVertexArrayFormat const *self, int start_byte, int num_bytes);

#if INDEX
#define GeomVertexArrayFormat_C_get_column_p_pii GeomVertexArrayFormat$30$get_column
#endif

// C++ _inCAAAAq1M5(InternalName const *name) ==> GeomVertexArrayFormat$_$has_column(GeomVertexArrayFormat const *param0, InternalName const *param1)(GeomVertexArrayFormat const *, InternalName const *)
extern bool GeomVertexArrayFormat$31$has_column(GeomVertexArrayFormat const *self, InternalName const *name);

#if INDEX
#define GeomVertexArrayFormat_C_has_column_B_ps GeomVertexArrayFormat$31$has_column
#endif

// C++ _inCAAAAHc2c(GeomVertexArrayFormat const &other) ==> GeomVertexArrayFormat$_$is_data_subset_of(GeomVertexArrayFormat const *param0, GeomVertexArrayFormat const *param1)(GeomVertexArrayFormat const *, GeomVertexArrayFormat const *)
extern bool GeomVertexArrayFormat$32$is_data_subset_of(GeomVertexArrayFormat const *self, GeomVertexArrayFormat const *other);

#if INDEX
#define GeomVertexArrayFormat_C_is_data_subset_of_B_pp GeomVertexArrayFormat$32$is_data_subset_of
#endif

// C++ _inCAAAAbNhQ() ==> GeomVertexArrayFormat$_$count_unused_space(GeomVertexArrayFormat const *param0)(GeomVertexArrayFormat const *)
extern int GeomVertexArrayFormat$33$count_unused_space(GeomVertexArrayFormat const *self);

#if INDEX
#define GeomVertexArrayFormat_C_count_unused_space_i_p GeomVertexArrayFormat$33$count_unused_space
#endif

// C++ _inCAAAAVHAm(std::ostream &out) ==> GeomVertexArrayFormat$_$output(GeomVertexArrayFormat const *param0, std::ostream *param1)(GeomVertexArrayFormat const *, std::ostream *)
extern void GeomVertexArrayFormat$34$output(GeomVertexArrayFormat const *self, std$_ostream *out);

#if INDEX
#define GeomVertexArrayFormat_C_output_v_pp GeomVertexArrayFormat$34$output
#endif

// C++ _inCAAAAzpEZ(std::ostream &out, int indent_level) ==> GeomVertexArrayFormat$_$write(GeomVertexArrayFormat const *param0, std::ostream *param1, int param2)(GeomVertexArrayFormat const *, std::ostream *, int)
extern void GeomVertexArrayFormat$35$write(GeomVertexArrayFormat const *self, std$_ostream *out, int indent_level);

#if INDEX
#define GeomVertexArrayFormat_C_write_v_ppi GeomVertexArrayFormat$35$write
#endif

// C++ _inCAAAAb7K_(std::ostream &out) ==> GeomVertexArrayFormat$_$write(GeomVertexArrayFormat const *param0, std::ostream *param1)(GeomVertexArrayFormat const *, std::ostream *)
extern void GeomVertexArrayFormat$36$write(GeomVertexArrayFormat const *self, std$_ostream *out);

#if INDEX
#define GeomVertexArrayFormat_C_write_v_pp GeomVertexArrayFormat$36$write
#endif

// C++ _inCAAAAsgyH(std::ostream &out, int indent_level, GeomVertexArrayData const *array_data) ==> GeomVertexArrayFormat$_$write_with_data(GeomVertexArrayFormat const *param0, std::ostream *param1, int param2, GeomVertexArrayData const *param3)(GeomVertexArrayFormat const *, std::ostream *, int, GeomVertexArrayData const *)
extern void GeomVertexArrayFormat$37$write_with_data(GeomVertexArrayFormat const *self, std$_ostream *out, int indent_level, GeomVertexArrayData const *array_data);

#if INDEX
#define GeomVertexArrayFormat_C_write_with_data_v_ppip GeomVertexArrayFormat$37$write_with_data
#endif

// C++ _inCAAAAJ8Vx(bool pad) ==> GeomVertexArrayFormat$_$get_format_string(GeomVertexArrayFormat const *param0, bool param1)(GeomVertexArrayFormat const *, bool)
extern char const * GeomVertexArrayFormat$38$get_format_string(GeomVertexArrayFormat const *self, bool pad);

#if INDEX
#define GeomVertexArrayFormat_C_get_format_string_s_pB GeomVertexArrayFormat$38$get_format_string
#endif

// C++ _inCAAAADuRs() ==> GeomVertexArrayFormat$_$get_format_string(GeomVertexArrayFormat const *param0)(GeomVertexArrayFormat const *)
extern char const * GeomVertexArrayFormat$39$get_format_string(GeomVertexArrayFormat const *self);

#if INDEX
#define GeomVertexArrayFormat_C_get_format_string_s_p GeomVertexArrayFormat$39$get_format_string
#endif

// C++ _inCAAAAcO2K(GeomVertexArrayFormat const &other) ==> GeomVertexArrayFormat$_$compare_to(GeomVertexArrayFormat const *param0, GeomVertexArrayFormat const *param1)(GeomVertexArrayFormat const *, GeomVertexArrayFormat const *)
extern int GeomVertexArrayFormat$40$compare_to(GeomVertexArrayFormat const *self, GeomVertexArrayFormat const *other);

#if INDEX
#define GeomVertexArrayFormat_C_compare_to_i_pp GeomVertexArrayFormat$40$compare_to
#endif

// C++ _inCAAAAq4QS() ==> GeomVertexArrayFormat$_$register_with_read_factory()()
extern void GeomVertexArrayFormat$41$register_with_read_factory(void);

#if INDEX
#define GeomVertexArrayFormat_C_register_with_read_factory_v_v GeomVertexArrayFormat$41$register_with_read_factory
#endif

// C++ _inCAAAAW_j4(BamWriter *manager, Datagram &dg) ==> GeomVertexArrayFormat$_$write_datagram(GeomVertexArrayFormat *param0, BamWriter *param1, Datagram *param2)(GeomVertexArrayFormat *, BamWriter *, Datagram *)
extern void GeomVertexArrayFormat$42$write_datagram(GeomVertexArrayFormat *self, BamWriter *manager, Datagram *dg);

#if INDEX
#define GeomVertexArrayFormat_C_write_datagram_v_ppp GeomVertexArrayFormat$42$write_datagram
#endif

// C++ _inCAAAAJAN_(BamReader *manager) ==> GeomVertexArrayFormat$_$finalize(GeomVertexArrayFormat *param0, BamReader *param1)(GeomVertexArrayFormat *, BamReader *)
extern void GeomVertexArrayFormat$43$finalize(GeomVertexArrayFormat *self, BamReader *manager);

#if INDEX
#define GeomVertexArrayFormat_C_finalize_v_pp GeomVertexArrayFormat$43$finalize
#endif

// C++ _inCAAAAqo7q() ==> GeomVertexArrayFormat$_$get_class_type()()
extern int GeomVertexArrayFormat$44$get_class_type(void);

#if INDEX
#define GeomVertexArrayFormat_C_get_class_type_i_v GeomVertexArrayFormat$44$get_class_type
#endif

// C++ _inCAAAABrMB() ==> GeomVertexArrayFormat$_$init_type()()
extern void GeomVertexArrayFormat$45$init_type(void);

#if INDEX
#define GeomVertexArrayFormat_C_init_type_v_v GeomVertexArrayFormat$45$init_type
#endif

// C++ _inCAAAAIXPn() ==> GeomVertexArrayFormat$_$get_type(GeomVertexArrayFormat const *param0)(GeomVertexArrayFormat const *)
extern int GeomVertexArrayFormat$46$get_type(GeomVertexArrayFormat const *self);

#if INDEX
#define GeomVertexArrayFormat_C_get_type_i_p GeomVertexArrayFormat$46$get_type
#endif

// C++ _inCAAAA7upc() ==> GeomVertexArrayFormat$_$force_init_type(GeomVertexArrayFormat *param0)(GeomVertexArrayFormat *)
extern int GeomVertexArrayFormat$47$force_init_type(GeomVertexArrayFormat *self);

#if INDEX
#define GeomVertexArrayFormat_C_force_init_type_i_p GeomVertexArrayFormat$47$force_init_type
#endif


// GeomVertexColumn

// C++ _inCAAAA6X6g(CPT_InternalName name, int num_components, GeomEnums::NumericType numeric_type, GeomEnums::Contents contents, int start, int column_alignment, int num_elements, int element_stride) ==> GeomVertexColumn$_$GeomVertexColumn(CPT_InternalName *param0, int param1, GeomEnums::NumericType param2, GeomEnums::Contents param3, int param4, int param5, int param6, int param7)(CPT_InternalName *, int, GeomEnums::NumericType, GeomEnums::Contents, int, int, int, int)
extern GeomVertexColumn * GeomVertexColumn$1$GeomVertexColumn(CPT_InternalName *name, int num_components, GeomEnums$_NumericType numeric_type, GeomEnums$_Contents contents, int start, int column_alignment, int num_elements, int element_stride);

#if INDEX
#define GeomVertexColumn_C_ctor_p_sippiiii GeomVertexColumn$1$GeomVertexColumn
#endif

// C++ _inCAAAA6xVi(CPT_InternalName name, int num_components, GeomEnums::NumericType numeric_type, GeomEnums::Contents contents, int start, int column_alignment, int num_elements) ==> GeomVertexColumn$_$GeomVertexColumn(CPT_InternalName *param0, int param1, GeomEnums::NumericType param2, GeomEnums::Contents param3, int param4, int param5, int param6)(CPT_InternalName *, int, GeomEnums::NumericType, GeomEnums::Contents, int, int, int)
extern GeomVertexColumn * GeomVertexColumn$2$GeomVertexColumn(CPT_InternalName *name, int num_components, GeomEnums$_NumericType numeric_type, GeomEnums$_Contents contents, int start, int column_alignment, int num_elements);

#if INDEX
#define GeomVertexColumn_C_ctor_p_sippiii GeomVertexColumn$2$GeomVertexColumn
#endif

// C++ _inCAAAA2ODj(CPT_InternalName name, int num_components, GeomEnums::NumericType numeric_type, GeomEnums::Contents contents, int start, int column_alignment) ==> GeomVertexColumn$_$GeomVertexColumn(CPT_InternalName *param0, int param1, GeomEnums::NumericType param2, GeomEnums::Contents param3, int param4, int param5)(CPT_InternalName *, int, GeomEnums::NumericType, GeomEnums::Contents, int, int)
extern GeomVertexColumn * GeomVertexColumn$3$GeomVertexColumn(CPT_InternalName *name, int num_components, GeomEnums$_NumericType numeric_type, GeomEnums$_Contents contents, int start, int column_alignment);

#if INDEX
#define GeomVertexColumn_C_ctor_p_sippii GeomVertexColumn$3$GeomVertexColumn
#endif

// C++ _inCAAAAvjbD(CPT_InternalName name, int num_components, GeomEnums::NumericType numeric_type, GeomEnums::Contents contents, int start) ==> GeomVertexColumn$_$GeomVertexColumn(CPT_InternalName *param0, int param1, GeomEnums::NumericType param2, GeomEnums::Contents param3, int param4)(CPT_InternalName *, int, GeomEnums::NumericType, GeomEnums::Contents, int)
extern GeomVertexColumn * GeomVertexColumn$4$GeomVertexColumn(CPT_InternalName *name, int num_components, GeomEnums$_NumericType numeric_type, GeomEnums$_Contents contents, int start);

#if INDEX
#define GeomVertexColumn_C_ctor_p_sippi GeomVertexColumn$4$GeomVertexColumn
#endif

// C++ _inCAAAAvt5j(GeomVertexColumn const &copy) ==> GeomVertexColumn$_$GeomVertexColumn(GeomVertexColumn const *param0)(GeomVertexColumn const *)
extern GeomVertexColumn * GeomVertexColumn$5$GeomVertexColumn(GeomVertexColumn const *copy);

#if INDEX
#define GeomVertexColumn_C_ctor_p_p GeomVertexColumn$5$GeomVertexColumn
#endif

// C++ _inCAAAAdOcj() ==> GeomVertexColumn$_$get_name(GeomVertexColumn const *param0)(GeomVertexColumn const *)
extern InternalName const * GeomVertexColumn$6$get_name(GeomVertexColumn const *self);

#if INDEX
#define GeomVertexColumn_C_get_name_s_p GeomVertexColumn$6$get_name
#endif

// C++ _inCAAAA_29x() ==> GeomVertexColumn$_$get_num_components(GeomVertexColumn const *param0)(GeomVertexColumn const *)
extern int GeomVertexColumn$7$get_num_components(GeomVertexColumn const *self);

#if INDEX
#define GeomVertexColumn_C_get_num_components_i_p GeomVertexColumn$7$get_num_components
#endif

// C++ _inCAAAAVlzN() ==> GeomVertexColumn$_$get_num_values(GeomVertexColumn const *param0)(GeomVertexColumn const *)
extern int GeomVertexColumn$8$get_num_values(GeomVertexColumn const *self);

#if INDEX
#define GeomVertexColumn_C_get_num_values_i_p GeomVertexColumn$8$get_num_values
#endif

// C++ _inCAAAA_ry0() ==> GeomVertexColumn$_$get_num_elements(GeomVertexColumn const *param0)(GeomVertexColumn const *)
extern int GeomVertexColumn$9$get_num_elements(GeomVertexColumn const *self);

#if INDEX
#define GeomVertexColumn_C_get_num_elements_i_p GeomVertexColumn$9$get_num_elements
#endif

// C++ _inCAAAA_YBU() ==> GeomVertexColumn$_$get_numeric_type(GeomVertexColumn const *param0)(GeomVertexColumn const *)
extern GeomEnums$_NumericType GeomVertexColumn$10$get_numeric_type(GeomVertexColumn const *self);

#if INDEX
#define GeomVertexColumn_C_get_numeric_type_p_p GeomVertexColumn$10$get_numeric_type
#endif

// C++ _inCAAAAWN4C() ==> GeomVertexColumn$_$get_contents(GeomVertexColumn const *param0)(GeomVertexColumn const *)
extern GeomEnums$_Contents GeomVertexColumn$11$get_contents(GeomVertexColumn const *self);

#if INDEX
#define GeomVertexColumn_C_get_contents_p_p GeomVertexColumn$11$get_contents
#endif

// C++ _inCAAAAKNfk() ==> GeomVertexColumn$_$get_start(GeomVertexColumn const *param0)(GeomVertexColumn const *)
extern int GeomVertexColumn$12$get_start(GeomVertexColumn const *self);

#if INDEX
#define GeomVertexColumn_C_get_start_i_p GeomVertexColumn$12$get_start
#endif

// C++ _inCAAAAi3H3() ==> GeomVertexColumn$_$get_column_alignment(GeomVertexColumn const *param0)(GeomVertexColumn const *)
extern int GeomVertexColumn$13$get_column_alignment(GeomVertexColumn const *self);

#if INDEX
#define GeomVertexColumn_C_get_column_alignment_i_p GeomVertexColumn$13$get_column_alignment
#endif

// C++ _inCAAAA1whk() ==> GeomVertexColumn$_$get_element_stride(GeomVertexColumn const *param0)(GeomVertexColumn const *)
extern int GeomVertexColumn$14$get_element_stride(GeomVertexColumn const *self);

#if INDEX
#define GeomVertexColumn_C_get_element_stride_i_p GeomVertexColumn$14$get_element_stride
#endif

// C++ _inCAAAATwV4() ==> GeomVertexColumn$_$get_component_bytes(GeomVertexColumn const *param0)(GeomVertexColumn const *)
extern int GeomVertexColumn$15$get_component_bytes(GeomVertexColumn const *self);

#if INDEX
#define GeomVertexColumn_C_get_component_bytes_i_p GeomVertexColumn$15$get_component_bytes
#endif

// C++ _inCAAAAcXJp() ==> GeomVertexColumn$_$get_total_bytes(GeomVertexColumn const *param0)(GeomVertexColumn const *)
extern int GeomVertexColumn$16$get_total_bytes(GeomVertexColumn const *self);

#if INDEX
#define GeomVertexColumn_C_get_total_bytes_i_p GeomVertexColumn$16$get_total_bytes
#endif

// C++ _inCAAAAQEWs() ==> GeomVertexColumn$_$has_homogeneous_coord(GeomVertexColumn const *param0)(GeomVertexColumn const *)
extern bool GeomVertexColumn$17$has_homogeneous_coord(GeomVertexColumn const *self);

#if INDEX
#define GeomVertexColumn_C_has_homogeneous_coord_B_p GeomVertexColumn$17$has_homogeneous_coord
#endif

// C++ _inCAAAAZDLZ(int start_byte, int num_bytes) ==> GeomVertexColumn$_$overlaps_with(GeomVertexColumn const *param0, int param1, int param2)(GeomVertexColumn const *, int, int)
extern bool GeomVertexColumn$18$overlaps_with(GeomVertexColumn const *self, int start_byte, int num_bytes);

#if INDEX
#define GeomVertexColumn_C_overlaps_with_B_pii GeomVertexColumn$18$overlaps_with
#endif

// C++ _inCAAAAs2pJ(GeomVertexColumn const &other) ==> GeomVertexColumn$_$is_bytewise_equivalent(GeomVertexColumn const *param0, GeomVertexColumn const *param1)(GeomVertexColumn const *, GeomVertexColumn const *)
extern bool GeomVertexColumn$19$is_bytewise_equivalent(GeomVertexColumn const *self, GeomVertexColumn const *other);

#if INDEX
#define GeomVertexColumn_C_is_bytewise_equivalent_B_pp GeomVertexColumn$19$is_bytewise_equivalent
#endif

// C++ _inCAAAAnbg_(InternalName *name) ==> GeomVertexColumn$_$set_name(GeomVertexColumn *param0, InternalName *param1)(GeomVertexColumn *, InternalName *)
extern void GeomVertexColumn$20$set_name(GeomVertexColumn *self, InternalName *name);

#if INDEX
#define GeomVertexColumn_C_set_name_v_pp GeomVertexColumn$20$set_name
#endif

// C++ _inCAAAAoJ_s(int num_components) ==> GeomVertexColumn$_$set_num_components(GeomVertexColumn *param0, int param1)(GeomVertexColumn *, int)
extern void GeomVertexColumn$21$set_num_components(GeomVertexColumn *self, int num_components);

#if INDEX
#define GeomVertexColumn_C_set_num_components_v_pi GeomVertexColumn$21$set_num_components
#endif

// C++ _inCAAAAS9TK(GeomEnums::NumericType numeric_type) ==> GeomVertexColumn$_$set_numeric_type(GeomVertexColumn *param0, GeomEnums::NumericType param1)(GeomVertexColumn *, GeomEnums::NumericType)
extern void GeomVertexColumn$22$set_numeric_type(GeomVertexColumn *self, GeomEnums$_NumericType numeric_type);

#if INDEX
#define GeomVertexColumn_C_set_numeric_type_v_pp GeomVertexColumn$22$set_numeric_type
#endif

// C++ _inCAAAAboYz(GeomEnums::Contents contents) ==> GeomVertexColumn$_$set_contents(GeomVertexColumn *param0, GeomEnums::Contents param1)(GeomVertexColumn *, GeomEnums::Contents)
extern void GeomVertexColumn$23$set_contents(GeomVertexColumn *self, GeomEnums$_Contents contents);

#if INDEX
#define GeomVertexColumn_C_set_contents_v_pp GeomVertexColumn$23$set_contents
#endif

// C++ _inCAAAANQ3w(int start) ==> GeomVertexColumn$_$set_start(GeomVertexColumn *param0, int param1)(GeomVertexColumn *, int)
extern void GeomVertexColumn$24$set_start(GeomVertexColumn *self, int start);

#if INDEX
#define GeomVertexColumn_C_set_start_v_pi GeomVertexColumn$24$set_start
#endif

// C++ _inCAAAAldo2(int column_alignment) ==> GeomVertexColumn$_$set_column_alignment(GeomVertexColumn *param0, int param1)(GeomVertexColumn *, int)
extern void GeomVertexColumn$25$set_column_alignment(GeomVertexColumn *self, int column_alignment);

#if INDEX
#define GeomVertexColumn_C_set_column_alignment_v_pi GeomVertexColumn$25$set_column_alignment
#endif

// C++ _inCAAAA_4fl(std::ostream &out) ==> GeomVertexColumn$_$output(GeomVertexColumn const *param0, std::ostream *param1)(GeomVertexColumn const *, std::ostream *)
extern void GeomVertexColumn$26$output(GeomVertexColumn const *self, std$_ostream *out);

#if INDEX
#define GeomVertexColumn_C_output_v_pp GeomVertexColumn$26$output
#endif

// C++ _inCAAAAGIla() ==> GeomVertexColumn$_$is_packed_argb(GeomVertexColumn const *param0)(GeomVertexColumn const *)
extern bool GeomVertexColumn$27$is_packed_argb(GeomVertexColumn const *self);

#if INDEX
#define GeomVertexColumn_C_is_packed_argb_B_p GeomVertexColumn$27$is_packed_argb
#endif

// C++ _inCAAAAohWB() ==> GeomVertexColumn$_$is_uint8_rgba(GeomVertexColumn const *param0)(GeomVertexColumn const *)
extern bool GeomVertexColumn$28$is_uint8_rgba(GeomVertexColumn const *self);

#if INDEX
#define GeomVertexColumn_C_is_uint8_rgba_B_p GeomVertexColumn$28$is_uint8_rgba
#endif

// C++ _inCAAAAdxPj(GeomVertexColumn const &other) ==> GeomVertexColumn$_$compare_to(GeomVertexColumn const *param0, GeomVertexColumn const *param1)(GeomVertexColumn const *, GeomVertexColumn const *)
extern int GeomVertexColumn$29$compare_to(GeomVertexColumn const *self, GeomVertexColumn const *other);

#if INDEX
#define GeomVertexColumn_C_compare_to_i_pp GeomVertexColumn$29$compare_to
#endif

// C++ _inCAAAAtQxO(BamWriter *manager, Datagram &dg) ==> GeomVertexColumn$_$write_datagram(GeomVertexColumn *param0, BamWriter *param1, Datagram *param2)(GeomVertexColumn *, BamWriter *, Datagram *)
extern void GeomVertexColumn$30$write_datagram(GeomVertexColumn *self, BamWriter *manager, Datagram *dg);

#if INDEX
#define GeomVertexColumn_C_write_datagram_v_ppp GeomVertexColumn$30$write_datagram
#endif

// C++ _inCAAAA_EdR(DatagramIterator &scan, BamReader *manager) ==> GeomVertexColumn$_$fillin(GeomVertexColumn *param0, DatagramIterator *param1, BamReader *param2)(GeomVertexColumn *, DatagramIterator *, BamReader *)
extern void GeomVertexColumn$31$fillin(GeomVertexColumn *self, DatagramIterator *scan, BamReader *manager);

#if INDEX
#define GeomVertexColumn_C_fillin_v_ppp GeomVertexColumn$31$fillin
#endif


// GeomVertexData

// C++ _inCAAAAkRv_() ==> GeomVertexData$_$upcast_to_CopyOnWriteObject(GeomVertexData *param0)(GeomVertexData *)
extern CopyOnWriteObject * GeomVertexData$1$upcast_to_CopyOnWriteObject(GeomVertexData *self);

#if INDEX
#define GeomVertexData_C_upcast_to_CopyOnWriteObject_p_p GeomVertexData$1$upcast_to_CopyOnWriteObject
#endif

// C++ _inCAAAAVY07() ==> GeomVertexData$_$upcast_to_GeomEnums(GeomVertexData *param0)(GeomVertexData *)
extern GeomEnums * GeomVertexData$2$upcast_to_GeomEnums(GeomVertexData *self);

#if INDEX
#define GeomVertexData_C_upcast_to_GeomEnums_p_p GeomVertexData$2$upcast_to_GeomEnums
#endif

// C++ _inCAAAAKRDk(GeomVertexData const &copy) ==> GeomVertexData$_$GeomVertexData(GeomVertexData const *param0)(GeomVertexData const *)
extern GeomVertexData * GeomVertexData$3$GeomVertexData(GeomVertexData const *copy);

#if INDEX
#define GeomVertexData_C_ctor_p_p GeomVertexData$3$GeomVertexData
#endif

// C++ _inCAAAARp_z(GeomVertexData const &copy, GeomVertexFormat const *format) ==> GeomVertexData$_$GeomVertexData(GeomVertexData const *param0, GeomVertexFormat const *param1)(GeomVertexData const *, GeomVertexFormat const *)
extern GeomVertexData * GeomVertexData$4$GeomVertexData(GeomVertexData const *copy, GeomVertexFormat const *format);

#if INDEX
#define GeomVertexData_C_ctor_p_pp GeomVertexData$4$GeomVertexData
#endif

// C++ _inCAAAAQDxG(std::string const &name, GeomVertexFormat const *format, GeomEnums::UsageHint usage_hint) ==> GeomVertexData$_$GeomVertexData(char const *param0, GeomVertexFormat const *param1, GeomEnums::UsageHint param2)(char const *, GeomVertexFormat const *, GeomEnums::UsageHint)
extern GeomVertexData * GeomVertexData$5$GeomVertexData(char const *name, GeomVertexFormat const *format, GeomEnums$_UsageHint usage_hint);

#if INDEX
#define GeomVertexData_C_ctor_p_spp GeomVertexData$5$GeomVertexData
#endif

// C++ _inCAAAAhhxk(GeomVertexData const &other) ==> GeomVertexData$_$compare_to(GeomVertexData const *param0, GeomVertexData const *param1)(GeomVertexData const *, GeomVertexData const *)
extern int GeomVertexData$6$compare_to(GeomVertexData const *self, GeomVertexData const *other);

#if INDEX
#define GeomVertexData_C_compare_to_i_pp GeomVertexData$6$compare_to
#endif

// C++ _inCAAAABGI0() ==> GeomVertexData$_$get_name(GeomVertexData const *param0)(GeomVertexData const *)
extern char const * GeomVertexData$7$get_name(GeomVertexData const *self);

#if INDEX
#define GeomVertexData_C_get_name_s_p GeomVertexData$7$get_name
#endif

// C++ _inCAAAAzQCt(std::string const &name) ==> GeomVertexData$_$set_name(GeomVertexData *param0, char const *param1)(GeomVertexData *, char const *)
extern void GeomVertexData$8$set_name(GeomVertexData *self, char const *name);

#if INDEX
#define GeomVertexData_C_set_name_v_ps GeomVertexData$8$set_name
#endif

// C++ _inCAAAAs9db() ==> GeomVertexData$_$get_usage_hint(GeomVertexData const *param0)(GeomVertexData const *)
extern GeomEnums$_UsageHint GeomVertexData$9$get_usage_hint(GeomVertexData const *self);

#if INDEX
#define GeomVertexData_C_get_usage_hint_p_p GeomVertexData$9$get_usage_hint
#endif

// C++ _inCAAAAk_1i(GeomEnums::UsageHint usage_hint) ==> GeomVertexData$_$set_usage_hint(GeomVertexData *param0, GeomEnums::UsageHint param1)(GeomVertexData *, GeomEnums::UsageHint)
extern void GeomVertexData$10$set_usage_hint(GeomVertexData *self, GeomEnums$_UsageHint usage_hint);

#if INDEX
#define GeomVertexData_C_set_usage_hint_v_pp GeomVertexData$10$set_usage_hint
#endif

// C++ _inCAAAA67sy() ==> GeomVertexData$_$get_format(GeomVertexData const *param0)(GeomVertexData const *)
extern GeomVertexFormat const * GeomVertexData$11$get_format(GeomVertexData const *self);

#if INDEX
#define GeomVertexData_C_get_format_p_p GeomVertexData$11$get_format
#endif

// C++ _inCAAAAD1zm(GeomVertexFormat const *format) ==> GeomVertexData$_$set_format(GeomVertexData *param0, GeomVertexFormat const *param1)(GeomVertexData *, GeomVertexFormat const *)
extern void GeomVertexData$12$set_format(GeomVertexData *self, GeomVertexFormat const *format);

#if INDEX
#define GeomVertexData_C_set_format_v_pp GeomVertexData$12$set_format
#endif

// C++ _inCAAAAM5bJ(GeomVertexFormat const *format) ==> GeomVertexData$_$unclean_set_format(GeomVertexData *param0, GeomVertexFormat const *param1)(GeomVertexData *, GeomVertexFormat const *)
extern void GeomVertexData$13$unclean_set_format(GeomVertexData *self, GeomVertexFormat const *format);

#if INDEX
#define GeomVertexData_C_unclean_set_format_v_pp GeomVertexData$13$unclean_set_format
#endif

// C++ _inCAAAA88D7(InternalName const *name) ==> GeomVertexData$_$has_column(GeomVertexData const *param0, InternalName const *param1)(GeomVertexData const *, InternalName const *)
extern bool GeomVertexData$14$has_column(GeomVertexData const *self, InternalName const *name);

#if INDEX
#define GeomVertexData_C_has_column_B_ps GeomVertexData$14$has_column
#endif

// C++ _inCAAAAxs3S() ==> GeomVertexData$_$get_num_rows(GeomVertexData const *param0)(GeomVertexData const *)
extern int GeomVertexData$15$get_num_rows(GeomVertexData const *self);

#if INDEX
#define GeomVertexData_C_get_num_rows_i_p GeomVertexData$15$get_num_rows
#endif

// C++ _inCAAAAtnWY(int n) ==> GeomVertexData$_$set_num_rows(GeomVertexData *param0, int param1)(GeomVertexData *, int)
extern bool GeomVertexData$16$set_num_rows(GeomVertexData *self, int n);

#if INDEX
#define GeomVertexData_C_set_num_rows_B_pi GeomVertexData$16$set_num_rows
#endif

// C++ _inCAAAA0MpE(int n) ==> GeomVertexData$_$unclean_set_num_rows(GeomVertexData *param0, int param1)(GeomVertexData *, int)
extern bool GeomVertexData$17$unclean_set_num_rows(GeomVertexData *self, int n);

#if INDEX
#define GeomVertexData_C_unclean_set_num_rows_B_pi GeomVertexData$17$unclean_set_num_rows
#endif

// C++ _inCAAAAFkl7(int n) ==> GeomVertexData$_$reserve_num_rows(GeomVertexData *param0, int param1)(GeomVertexData *, int)
extern bool GeomVertexData$18$reserve_num_rows(GeomVertexData *self, int n);

#if INDEX
#define GeomVertexData_C_reserve_num_rows_B_pi GeomVertexData$18$reserve_num_rows
#endif

// C++ _inCAAAAv6Ji() ==> GeomVertexData$_$clear_rows(GeomVertexData *param0)(GeomVertexData *)
extern void GeomVertexData$19$clear_rows(GeomVertexData *self);

#if INDEX
#define GeomVertexData_C_clear_rows_v_p GeomVertexData$19$clear_rows
#endif

// C++ _inCAAAALk3d() ==> GeomVertexData$_$get_num_arrays(GeomVertexData const *param0)(GeomVertexData const *)
extern std$_size_t GeomVertexData$20$get_num_arrays(GeomVertexData const *self);

#if INDEX
#define GeomVertexData_C_get_num_arrays_l_p GeomVertexData$20$get_num_arrays
#endif

// C++ _inCAAAAwvcJ(std::size_t i) ==> GeomVertexData$_$get_array(GeomVertexData const *param0, std::size_t param1)(GeomVertexData const *, std::size_t)
extern char ** GeomVertexData$21$get_array(GeomVertexData const *self, std$_size_t i);

#if INDEX
#define GeomVertexData_C_get_array_p_pl GeomVertexData$21$get_array
#endif

// C++ _inCAAAAc7_s(std::size_t i) ==> GeomVertexData$_$get_array_handle(GeomVertexData const *param0, std::size_t param1)(GeomVertexData const *, std::size_t)
extern char ** GeomVertexData$22$get_array_handle(GeomVertexData const *self, std$_size_t i);

#if INDEX
#define GeomVertexData_C_get_array_handle_p_pl GeomVertexData$22$get_array_handle
#endif

// C++ _inCAAAAW_Pc(std::size_t i) ==> GeomVertexData$_$modify_array(GeomVertexData *param0, std::size_t param1)(GeomVertexData *, std::size_t)
extern char ** GeomVertexData$23$modify_array(GeomVertexData *self, std$_size_t i);

#if INDEX
#define GeomVertexData_C_modify_array_p_pl GeomVertexData$23$modify_array
#endif

// C++ _inCAAAAVIgR(std::size_t i) ==> GeomVertexData$_$modify_array_handle(GeomVertexData *param0, std::size_t param1)(GeomVertexData *, std::size_t)
extern char ** GeomVertexData$24$modify_array_handle(GeomVertexData *self, std$_size_t i);

#if INDEX
#define GeomVertexData_C_modify_array_handle_p_pl GeomVertexData$24$modify_array_handle
#endif

// C++ _inCAAAARZ_Q(std::size_t i, GeomVertexArrayData const *array) ==> GeomVertexData$_$set_array(GeomVertexData *param0, std::size_t param1, GeomVertexArrayData const *param2)(GeomVertexData *, std::size_t, GeomVertexArrayData const *)
extern void GeomVertexData$25$set_array(GeomVertexData *self, std$_size_t i, GeomVertexArrayData const *array);

#if INDEX
#define GeomVertexData_C_set_array_v_plp GeomVertexData$25$set_array
#endif

// C++ _inCAAAABS4c() ==> GeomVertexData$_$get_transform_table(GeomVertexData const *param0)(GeomVertexData const *)
extern TransformTable const * GeomVertexData$26$get_transform_table(GeomVertexData const *self);

#if INDEX
#define GeomVertexData_C_get_transform_table_p_p GeomVertexData$26$get_transform_table
#endif

// C++ _inCAAAAsx_5(TransformTable const *table) ==> GeomVertexData$_$set_transform_table(GeomVertexData *param0, TransformTable const *param1)(GeomVertexData *, TransformTable const *)
extern void GeomVertexData$27$set_transform_table(GeomVertexData *self, TransformTable const *table);

#if INDEX
#define GeomVertexData_C_set_transform_table_v_pp GeomVertexData$27$set_transform_table
#endif

// C++ _inCAAAAYfui() ==> GeomVertexData$_$clear_transform_table(GeomVertexData *param0)(GeomVertexData *)
extern void GeomVertexData$28$clear_transform_table(GeomVertexData *self);

#if INDEX
#define GeomVertexData_C_clear_transform_table_v_p GeomVertexData$28$clear_transform_table
#endif

// C++ _inCAAAAFkfO() ==> GeomVertexData$_$get_transform_blend_table(GeomVertexData const *param0)(GeomVertexData const *)
extern char ** GeomVertexData$29$get_transform_blend_table(GeomVertexData const *self);

#if INDEX
#define GeomVertexData_C_get_transform_blend_table_p_p GeomVertexData$29$get_transform_blend_table
#endif

// C++ _inCAAAAfufT() ==> GeomVertexData$_$modify_transform_blend_table(GeomVertexData *param0)(GeomVertexData *)
extern char ** GeomVertexData$30$modify_transform_blend_table(GeomVertexData *self);

#if INDEX
#define GeomVertexData_C_modify_transform_blend_table_p_p GeomVertexData$30$modify_transform_blend_table
#endif

// C++ _inCAAAA7Mco(TransformBlendTable const *table) ==> GeomVertexData$_$set_transform_blend_table(GeomVertexData *param0, TransformBlendTable const *param1)(GeomVertexData *, TransformBlendTable const *)
extern void GeomVertexData$31$set_transform_blend_table(GeomVertexData *self, TransformBlendTable const *table);

#if INDEX
#define GeomVertexData_C_set_transform_blend_table_v_pp GeomVertexData$31$set_transform_blend_table
#endif

// C++ _inCAAAAkA3X() ==> GeomVertexData$_$clear_transform_blend_table(GeomVertexData *param0)(GeomVertexData *)
extern void GeomVertexData$32$clear_transform_blend_table(GeomVertexData *self);

#if INDEX
#define GeomVertexData_C_clear_transform_blend_table_v_p GeomVertexData$32$clear_transform_blend_table
#endif

// C++ _inCAAAAED2E() ==> GeomVertexData$_$get_slider_table(GeomVertexData const *param0)(GeomVertexData const *)
extern SliderTable const * GeomVertexData$33$get_slider_table(GeomVertexData const *self);

#if INDEX
#define GeomVertexData_C_get_slider_table_p_p GeomVertexData$33$get_slider_table
#endif

// C++ _inCAAAA__9X(SliderTable const *table) ==> GeomVertexData$_$set_slider_table(GeomVertexData *param0, SliderTable const *param1)(GeomVertexData *, SliderTable const *)
extern void GeomVertexData$34$set_slider_table(GeomVertexData *self, SliderTable const *table);

#if INDEX
#define GeomVertexData_C_set_slider_table_v_pp GeomVertexData$34$set_slider_table
#endif

// C++ _inCAAAAFr1M() ==> GeomVertexData$_$clear_slider_table(GeomVertexData *param0)(GeomVertexData *)
extern void GeomVertexData$35$clear_slider_table(GeomVertexData *self);

#if INDEX
#define GeomVertexData_C_clear_slider_table_v_p GeomVertexData$35$clear_slider_table
#endif

// C++ _inCAAAABRE9() ==> GeomVertexData$_$get_num_bytes(GeomVertexData const *param0)(GeomVertexData const *)
extern int GeomVertexData$36$get_num_bytes(GeomVertexData const *self);

#if INDEX
#define GeomVertexData_C_get_num_bytes_i_p GeomVertexData$36$get_num_bytes
#endif

// C++ _inCAAAAvZmm(Thread *current_thread) ==> GeomVertexData$_$get_modified(GeomVertexData const *param0, Thread *param1)(GeomVertexData const *, Thread *)
extern UpdateSeq * GeomVertexData$37$get_modified(GeomVertexData const *self, Thread *current_thread);

#if INDEX
#define GeomVertexData_C_get_modified_p_pp GeomVertexData$37$get_modified
#endif

// C++ _inCAAAAdUin() ==> GeomVertexData$_$get_modified(GeomVertexData const *param0)(GeomVertexData const *)
extern UpdateSeq * GeomVertexData$38$get_modified(GeomVertexData const *self);

#if INDEX
#define GeomVertexData_C_get_modified_p_p GeomVertexData$38$get_modified
#endif

// C++ _inCAAAAOOPS() ==> GeomVertexData$_$request_resident(GeomVertexData const *param0)(GeomVertexData const *)
extern bool GeomVertexData$39$request_resident(GeomVertexData const *self);

#if INDEX
#define GeomVertexData_C_request_resident_B_p GeomVertexData$39$request_resident
#endif

// C++ _inCAAAAI7Mn(GeomVertexData const *source, bool keep_data_objects, Thread *current_thread) ==> GeomVertexData$_$copy_from(GeomVertexData *param0, GeomVertexData const *param1, bool param2, Thread *param3)(GeomVertexData *, GeomVertexData const *, bool, Thread *)
extern void GeomVertexData$40$copy_from(GeomVertexData *self, GeomVertexData const *source, bool keep_data_objects, Thread *current_thread);

#if INDEX
#define GeomVertexData_C_copy_from_v_ppBp GeomVertexData$40$copy_from
#endif

// C++ _inCAAAATi_p(GeomVertexData const *source, bool keep_data_objects) ==> GeomVertexData$_$copy_from(GeomVertexData *param0, GeomVertexData const *param1, bool param2)(GeomVertexData *, GeomVertexData const *, bool)
extern void GeomVertexData$41$copy_from(GeomVertexData *self, GeomVertexData const *source, bool keep_data_objects);

#if INDEX
#define GeomVertexData_C_copy_from_v_ppB GeomVertexData$41$copy_from
#endif

// C++ _inCAAAA6qtd(int dest_row, GeomVertexData const *source, int source_row, Thread *current_thread) ==> GeomVertexData$_$copy_row_from(GeomVertexData *param0, int param1, GeomVertexData const *param2, int param3, Thread *param4)(GeomVertexData *, int, GeomVertexData const *, int, Thread *)
extern void GeomVertexData$42$copy_row_from(GeomVertexData *self, int dest_row, GeomVertexData const *source, int source_row, Thread *current_thread);

#if INDEX
#define GeomVertexData_C_copy_row_from_v_pipip GeomVertexData$42$copy_row_from
#endif

// C++ _inCAAAAUeFN(GeomVertexFormat const *new_format) ==> GeomVertexData$_$convert_to(GeomVertexData const *param0, GeomVertexFormat const *param1)(GeomVertexData const *, GeomVertexFormat const *)
extern char ** GeomVertexData$43$convert_to(GeomVertexData const *self, GeomVertexFormat const *new_format);

#if INDEX
#define GeomVertexData_C_convert_to_p_pp GeomVertexData$43$convert_to
#endif

// C++ _inCAAAAEt8J(LVecBase4 const &color_scale) ==> GeomVertexData$_$scale_color(GeomVertexData const *param0, LVecBase4 const *param1)(GeomVertexData const *, LVecBase4 const *)
extern char ** GeomVertexData$44$scale_color(GeomVertexData const *self, LVecBase4 const *color_scale);

#if INDEX
#define GeomVertexData_C_scale_color_p_pp GeomVertexData$44$scale_color
#endif

// C++ _inCAAAAAQUA(LVecBase4 const &color_scale, int num_components, GeomEnums::NumericType numeric_type, GeomEnums::Contents contents) ==> GeomVertexData$_$scale_color(GeomVertexData const *param0, LVecBase4 const *param1, int param2, GeomEnums::NumericType param3, GeomEnums::Contents param4)(GeomVertexData const *, LVecBase4 const *, int, GeomEnums::NumericType, GeomEnums::Contents)
extern char ** GeomVertexData$45$scale_color(GeomVertexData const *self, LVecBase4 const *color_scale, int num_components, GeomEnums$_NumericType numeric_type, GeomEnums$_Contents contents);

#if INDEX
#define GeomVertexData_C_scale_color_p_ppipp GeomVertexData$45$scale_color
#endif

// C++ _inCAAAAo88V(LColor const &color) ==> GeomVertexData$_$set_color(GeomVertexData const *param0, LColor const *param1)(GeomVertexData const *, LColor const *)
extern char ** GeomVertexData$46$set_color(GeomVertexData const *self, LColor const *color);

#if INDEX
#define GeomVertexData_C_set_color_p_pp GeomVertexData$46$set_color
#endif

// C++ _inCAAAAfzCR(LColor const &color, int num_components, GeomEnums::NumericType numeric_type, GeomEnums::Contents contents) ==> GeomVertexData$_$set_color(GeomVertexData const *param0, LColor const *param1, int param2, GeomEnums::NumericType param3, GeomEnums::Contents param4)(GeomVertexData const *, LColor const *, int, GeomEnums::NumericType, GeomEnums::Contents)
extern char ** GeomVertexData$47$set_color(GeomVertexData const *self, LColor const *color, int num_components, GeomEnums$_NumericType numeric_type, GeomEnums$_Contents contents);

#if INDEX
#define GeomVertexData_C_set_color_p_ppipp GeomVertexData$47$set_color
#endif

// C++ _inCAAAApzio() ==> GeomVertexData$_$reverse_normals(GeomVertexData const *param0)(GeomVertexData const *)
extern char ** GeomVertexData$48$reverse_normals(GeomVertexData const *self);

#if INDEX
#define GeomVertexData_C_reverse_normals_p_p GeomVertexData$48$reverse_normals
#endif

// C++ _inCAAAANBVp(bool force, Thread *current_thread) ==> GeomVertexData$_$animate_vertices(GeomVertexData const *param0, bool param1, Thread *param2)(GeomVertexData const *, bool, Thread *)
extern char ** GeomVertexData$49$animate_vertices(GeomVertexData const *self, bool force, Thread *current_thread);

#if INDEX
#define GeomVertexData_C_animate_vertices_p_pBp GeomVertexData$49$animate_vertices
#endif

// C++ _inCAAAAd9F_() ==> GeomVertexData$_$clear_animated_vertices(GeomVertexData *param0)(GeomVertexData *)
extern void GeomVertexData$50$clear_animated_vertices(GeomVertexData *self);

#if INDEX
#define GeomVertexData_C_clear_animated_vertices_v_p GeomVertexData$50$clear_animated_vertices
#endif

// C++ _inCAAAAiw96(LMatrix4 const &mat) ==> GeomVertexData$_$transform_vertices(GeomVertexData *param0, LMatrix4 const *param1)(GeomVertexData *, LMatrix4 const *)
extern void GeomVertexData$51$transform_vertices(GeomVertexData *self, LMatrix4 const *mat);

#if INDEX
#define GeomVertexData_C_transform_vertices_v_pp GeomVertexData$51$transform_vertices
#endif

// C++ _inCAAAAT_7D(LMatrix4 const &mat, SparseArray const &rows) ==> GeomVertexData$_$transform_vertices(GeomVertexData *param0, LMatrix4 const *param1, SparseArray const *param2)(GeomVertexData *, LMatrix4 const *, SparseArray const *)
extern void GeomVertexData$52$transform_vertices(GeomVertexData *self, LMatrix4 const *mat, SparseArray const *rows);

#if INDEX
#define GeomVertexData_C_transform_vertices_v_ppp GeomVertexData$52$transform_vertices
#endif

// C++ _inCAAAAgdzG(LMatrix4 const &mat, int begin_row, int end_row) ==> GeomVertexData$_$transform_vertices(GeomVertexData *param0, LMatrix4 const *param1, int param2, int param3)(GeomVertexData *, LMatrix4 const *, int, int)
extern void GeomVertexData$53$transform_vertices(GeomVertexData *self, LMatrix4 const *mat, int begin_row, int end_row);

#if INDEX
#define GeomVertexData_C_transform_vertices_v_ppii GeomVertexData$53$transform_vertices
#endif

// C++ _inCAAAAwwi1(InternalName *name, int num_components, GeomEnums::NumericType numeric_type, GeomEnums::Contents contents) ==> GeomVertexData$_$replace_column(GeomVertexData const *param0, InternalName *param1, int param2, GeomEnums::NumericType param3, GeomEnums::Contents param4)(GeomVertexData const *, InternalName *, int, GeomEnums::NumericType, GeomEnums::Contents)
extern char ** GeomVertexData$54$replace_column(GeomVertexData const *self, InternalName *name, int num_components, GeomEnums$_NumericType numeric_type, GeomEnums$_Contents contents);

#if INDEX
#define GeomVertexData_C_replace_column_p_ppipp GeomVertexData$54$replace_column
#endif

// C++ _inCAAAAI6SD(std::ostream &out) ==> GeomVertexData$_$output(GeomVertexData const *param0, std::ostream *param1)(GeomVertexData const *, std::ostream *)
extern void GeomVertexData$55$output(GeomVertexData const *self, std$_ostream *out);

#if INDEX
#define GeomVertexData_C_output_v_pp GeomVertexData$55$output
#endif

// C++ _inCAAAA4YSS(std::ostream &out, int indent_level) ==> GeomVertexData$_$write(GeomVertexData const *param0, std::ostream *param1, int param2)(GeomVertexData const *, std::ostream *, int)
extern void GeomVertexData$56$write(GeomVertexData const *self, std$_ostream *out, int indent_level);

#if INDEX
#define GeomVertexData_C_write_v_ppi GeomVertexData$56$write
#endif

// C++ _inCAAAA6m03(std::ostream &out) ==> GeomVertexData$_$write(GeomVertexData const *param0, std::ostream *param1)(GeomVertexData const *, std::ostream *)
extern void GeomVertexData$57$write(GeomVertexData const *self, std$_ostream *out);

#if INDEX
#define GeomVertexData_C_write_v_pp GeomVertexData$57$write
#endif

// C++ _inCAAAAkktY(std::ostream &out, int row) ==> GeomVertexData$_$describe_vertex(GeomVertexData const *param0, std::ostream *param1, int param2)(GeomVertexData const *, std::ostream *, int)
extern void GeomVertexData$58$describe_vertex(GeomVertexData const *self, std$_ostream *out, int row);

#if INDEX
#define GeomVertexData_C_describe_vertex_v_ppi GeomVertexData$58$describe_vertex
#endif

// C++ _inCAAAAZI16() ==> GeomVertexData$_$clear_cache(GeomVertexData *param0)(GeomVertexData *)
extern void GeomVertexData$59$clear_cache(GeomVertexData *self);

#if INDEX
#define GeomVertexData_C_clear_cache_v_p GeomVertexData$59$clear_cache
#endif

// C++ _inCAAAAn1dY() ==> GeomVertexData$_$clear_cache_stage(GeomVertexData *param0)(GeomVertexData *)
extern void GeomVertexData$60$clear_cache_stage(GeomVertexData *self);

#if INDEX
#define GeomVertexData_C_clear_cache_stage_v_p GeomVertexData$60$clear_cache_stage
#endif

// C++ _inCAAAASz1m(unsigned int a, unsigned int b, unsigned int c, unsigned int d) ==> GeomVertexData$_$pack_abcd(unsigned int param0, unsigned int param1, unsigned int param2, unsigned int param3)(unsigned int, unsigned int, unsigned int, unsigned int)
extern uint32_t GeomVertexData$61$pack_abcd(unsigned int a, unsigned int b, unsigned int c, unsigned int d);

#if INDEX
#define GeomVertexData_C_pack_abcd_I_IIII GeomVertexData$61$pack_abcd
#endif

// C++ _inCAAAA9Q7m(uint32_t data) ==> GeomVertexData$_$unpack_abcd_a(uint32_t param0)(uint32_t)
extern unsigned int GeomVertexData$62$unpack_abcd_a(uint32_t data);

#if INDEX
#define GeomVertexData_C_unpack_abcd_a_I_I GeomVertexData$62$unpack_abcd_a
#endif

// C++ _inCAAAA0b7C(uint32_t data) ==> GeomVertexData$_$unpack_abcd_b(uint32_t param0)(uint32_t)
extern unsigned int GeomVertexData$63$unpack_abcd_b(uint32_t data);

#if INDEX
#define GeomVertexData_C_unpack_abcd_b_I_I GeomVertexData$63$unpack_abcd_b
#endif

// C++ _inCAAAAsG7e(uint32_t data) ==> GeomVertexData$_$unpack_abcd_c(uint32_t param0)(uint32_t)
extern unsigned int GeomVertexData$64$unpack_abcd_c(uint32_t data);

#if INDEX
#define GeomVertexData_C_unpack_abcd_c_I_I GeomVertexData$64$unpack_abcd_c
#endif

// C++ _inCAAAAkB76(uint32_t data) ==> GeomVertexData$_$unpack_abcd_d(uint32_t param0)(uint32_t)
extern unsigned int GeomVertexData$65$unpack_abcd_d(uint32_t data);

#if INDEX
#define GeomVertexData_C_unpack_abcd_d_I_I GeomVertexData$65$unpack_abcd_d
#endif

// C++ _inCAAAAk2re(float a, float b, float c) ==> GeomVertexData$_$pack_ufloat(float param0, float param1, float param2)(float, float, float)
extern uint32_t GeomVertexData$66$pack_ufloat(float a, float b, float c);

#if INDEX
#define GeomVertexData_C_pack_ufloat_I_fff GeomVertexData$66$pack_ufloat
#endif

// C++ _inCAAAAPwUg(uint32_t data) ==> GeomVertexData$_$unpack_ufloat_a(uint32_t param0)(uint32_t)
extern float GeomVertexData$67$unpack_ufloat_a(uint32_t data);

#if INDEX
#define GeomVertexData_C_unpack_ufloat_a_f_I GeomVertexData$67$unpack_ufloat_a
#endif

// C++ _inCAAAAPJih(uint32_t data) ==> GeomVertexData$_$unpack_ufloat_b(uint32_t param0)(uint32_t)
extern float GeomVertexData$68$unpack_ufloat_b(uint32_t data);

#if INDEX
#define GeomVertexData_C_unpack_ufloat_b_f_I GeomVertexData$68$unpack_ufloat_b
#endif

// C++ _inCAAAAPOwi(uint32_t data) ==> GeomVertexData$_$unpack_ufloat_c(uint32_t param0)(uint32_t)
extern float GeomVertexData$69$unpack_ufloat_c(uint32_t data);

#if INDEX
#define GeomVertexData_C_unpack_ufloat_c_f_I GeomVertexData$69$unpack_ufloat_c
#endif

// C++ _inCAAAAOsCY() ==> GeomVertexData$_$register_with_read_factory()()
extern void GeomVertexData$70$register_with_read_factory(void);

#if INDEX
#define GeomVertexData_C_register_with_read_factory_v_v GeomVertexData$70$register_with_read_factory
#endif

// C++ _inCAAAA8HIM(BamWriter *manager, Datagram &dg) ==> GeomVertexData$_$write_datagram(GeomVertexData *param0, BamWriter *param1, Datagram *param2)(GeomVertexData *, BamWriter *, Datagram *)
extern void GeomVertexData$71$write_datagram(GeomVertexData *self, BamWriter *manager, Datagram *dg);

#if INDEX
#define GeomVertexData_C_write_datagram_v_ppp GeomVertexData$71$write_datagram
#endif

// C++ _inCAAAAAdKg() ==> GeomVertexData$_$require_fully_complete(GeomVertexData const *param0)(GeomVertexData const *)
extern bool GeomVertexData$72$require_fully_complete(GeomVertexData const *self);

#if INDEX
#define GeomVertexData_C_require_fully_complete_B_p GeomVertexData$72$require_fully_complete
#endif

// C++ _inCAAAASM2H(BamReader *manager) ==> GeomVertexData$_$finalize(GeomVertexData *param0, BamReader *param1)(GeomVertexData *, BamReader *)
extern void GeomVertexData$73$finalize(GeomVertexData *self, BamReader *manager);

#if INDEX
#define GeomVertexData_C_finalize_v_pp GeomVertexData$73$finalize
#endif

// C++ _inCAAAAIU4H() ==> GeomVertexData$_$get_class_type()()
extern int GeomVertexData$74$get_class_type(void);

#if INDEX
#define GeomVertexData_C_get_class_type_i_v GeomVertexData$74$get_class_type
#endif

// C++ _inCAAAAFc6l() ==> GeomVertexData$_$init_type()()
extern void GeomVertexData$75$init_type(void);

#if INDEX
#define GeomVertexData_C_init_type_v_v GeomVertexData$75$init_type
#endif

// C++ _inCAAAAUImJ() ==> GeomVertexData$_$get_type(GeomVertexData const *param0)(GeomVertexData const *)
extern int GeomVertexData$76$get_type(GeomVertexData const *self);

#if INDEX
#define GeomVertexData_C_get_type_i_p GeomVertexData$76$get_type
#endif

// C++ _inCAAAAp5JU() ==> GeomVertexData$_$force_init_type(GeomVertexData *param0)(GeomVertexData *)
extern int GeomVertexData$77$force_init_type(GeomVertexData *self);

#if INDEX
#define GeomVertexData_C_force_init_type_i_p GeomVertexData$77$force_init_type
#endif


// GeomVertexFormat

// C++ _inCAAAAN_wu() ==> GeomVertexFormat$_$upcast_to_TypedWritableReferenceCount(GeomVertexFormat *param0)(GeomVertexFormat *)
extern TypedWritableReferenceCount * GeomVertexFormat$1$upcast_to_TypedWritableReferenceCount(GeomVertexFormat *self);

#if INDEX
#define GeomVertexFormat_C_upcast_to_TypedWritableReferenceCount_p_p GeomVertexFormat$1$upcast_to_TypedWritableReferenceCount
#endif

// C++ _inCAAAArIs2() ==> GeomVertexFormat$_$upcast_to_GeomEnums(GeomVertexFormat *param0)(GeomVertexFormat *)
extern GeomEnums * GeomVertexFormat$2$upcast_to_GeomEnums(GeomVertexFormat *self);

#if INDEX
#define GeomVertexFormat_C_upcast_to_GeomEnums_p_p GeomVertexFormat$2$upcast_to_GeomEnums
#endif

// C++ _inCAAAAp5IE() ==> GeomVertexFormat$_$GeomVertexFormat()()
extern GeomVertexFormat * GeomVertexFormat$3$GeomVertexFormat(void);

#if INDEX
#define GeomVertexFormat_C_ctor_p_v GeomVertexFormat$3$GeomVertexFormat
#endif

// C++ _inCAAAA0V7R(GeomVertexArrayFormat const *array_format) ==> GeomVertexFormat$_$GeomVertexFormat(GeomVertexArrayFormat const *param0)(GeomVertexArrayFormat const *)
extern GeomVertexFormat * GeomVertexFormat$4$GeomVertexFormat(GeomVertexArrayFormat const *array_format);

#if INDEX
#define GeomVertexFormat_C_ctor_p_p GeomVertexFormat$4$GeomVertexFormat
#endif

// C++ _inCAAAAekha(GeomVertexFormat const &copy) ==> GeomVertexFormat$_$GeomVertexFormat(GeomVertexFormat const *param0)(GeomVertexFormat const *)
extern GeomVertexFormat * GeomVertexFormat$5$GeomVertexFormat(GeomVertexFormat const *copy);
// COLLISION : GeomVertexFormat_C_ctor_p_p GeomVertexFormat$5$GeomVertexFormat

// C++ _inCAAAAwY7m() ==> GeomVertexFormat$_$unref(GeomVertexFormat const *param0)(GeomVertexFormat const *)
extern bool GeomVertexFormat$6$unref(GeomVertexFormat const *self);

#if INDEX
#define GeomVertexFormat_C_unref_B_p GeomVertexFormat$6$unref
#endif

// C++ _inCAAAAYvVU() ==> GeomVertexFormat$_$is_registered(GeomVertexFormat const *param0)(GeomVertexFormat const *)
extern bool GeomVertexFormat$7$is_registered(GeomVertexFormat const *self);

#if INDEX
#define GeomVertexFormat_C_is_registered_B_p GeomVertexFormat$7$is_registered
#endif

// C++ _inCAAAAnlvK(GeomVertexArrayFormat const *format) ==> GeomVertexFormat$_$register_format(GeomVertexArrayFormat const *param0)(GeomVertexArrayFormat const *)
extern char ** GeomVertexFormat$8$register_format(GeomVertexArrayFormat const *format);

#if INDEX
#define GeomVertexFormat_C_register_format_p_p GeomVertexFormat$8$register_format
#endif

// C++ _inCAAAAF5LQ(GeomVertexFormat const *format) ==> GeomVertexFormat$_$register_format(GeomVertexFormat const *param0)(GeomVertexFormat const *)
extern char ** GeomVertexFormat$9$register_format(GeomVertexFormat const *format);
// COLLISION : GeomVertexFormat_C_register_format_p_p GeomVertexFormat$9$register_format

// C++ _inCAAAARiXK() ==> GeomVertexFormat$_$get_animation(GeomVertexFormat const *param0)(GeomVertexFormat const *)
extern GeomVertexAnimationSpec const * GeomVertexFormat$10$get_animation(GeomVertexFormat const *self);

#if INDEX
#define GeomVertexFormat_C_get_animation_p_p GeomVertexFormat$10$get_animation
#endif

// C++ _inCAAAAWlqH(GeomVertexAnimationSpec const &animation) ==> GeomVertexFormat$_$set_animation(GeomVertexFormat *param0, GeomVertexAnimationSpec const *param1)(GeomVertexFormat *, GeomVertexAnimationSpec const *)
extern void GeomVertexFormat$11$set_animation(GeomVertexFormat *self, GeomVertexAnimationSpec const *animation);

#if INDEX
#define GeomVertexFormat_C_set_animation_v_pp GeomVertexFormat$11$set_animation
#endif

// C++ _inCAAAA8LzX() ==> GeomVertexFormat$_$get_post_animated_format(GeomVertexFormat const *param0)(GeomVertexFormat const *)
extern char ** GeomVertexFormat$12$get_post_animated_format(GeomVertexFormat const *self);

#if INDEX
#define GeomVertexFormat_C_get_post_animated_format_p_p GeomVertexFormat$12$get_post_animated_format
#endif

// C++ _inCAAAAKWDM(GeomVertexFormat const *other) ==> GeomVertexFormat$_$get_union_format(GeomVertexFormat const *param0, GeomVertexFormat const *param1)(GeomVertexFormat const *, GeomVertexFormat const *)
extern char ** GeomVertexFormat$13$get_union_format(GeomVertexFormat const *self, GeomVertexFormat const *other);

#if INDEX
#define GeomVertexFormat_C_get_union_format_p_pp GeomVertexFormat$13$get_union_format
#endif

// C++ _inCAAAAxaAs() ==> GeomVertexFormat$_$get_num_arrays(GeomVertexFormat const *param0)(GeomVertexFormat const *)
extern std$_size_t GeomVertexFormat$14$get_num_arrays(GeomVertexFormat const *self);

#if INDEX
#define GeomVertexFormat_C_get_num_arrays_l_p GeomVertexFormat$14$get_num_arrays
#endif

// C++ _inCAAAA03f6(std::size_t array) ==> GeomVertexFormat$_$get_array(GeomVertexFormat const *param0, std::size_t param1)(GeomVertexFormat const *, std::size_t)
extern GeomVertexArrayFormat const * GeomVertexFormat$15$get_array(GeomVertexFormat const *self, std$_size_t array);

#if INDEX
#define GeomVertexFormat_C_get_array_p_pl GeomVertexFormat$15$get_array
#endif

// C++ _inCAAAAiYLu(std::size_t array) ==> GeomVertexFormat$_$modify_array(GeomVertexFormat *param0, std::size_t param1)(GeomVertexFormat *, std::size_t)
extern GeomVertexArrayFormat * GeomVertexFormat$16$modify_array(GeomVertexFormat *self, std$_size_t array);

#if INDEX
#define GeomVertexFormat_C_modify_array_p_pl GeomVertexFormat$16$modify_array
#endif

// C++ _inCAAAA7_CK(std::size_t array, GeomVertexArrayFormat const *format) ==> GeomVertexFormat$_$set_array(GeomVertexFormat *param0, std::size_t param1, GeomVertexArrayFormat const *param2)(GeomVertexFormat *, std::size_t, GeomVertexArrayFormat const *)
extern void GeomVertexFormat$17$set_array(GeomVertexFormat *self, std$_size_t array, GeomVertexArrayFormat const *format);

#if INDEX
#define GeomVertexFormat_C_set_array_v_plp GeomVertexFormat$17$set_array
#endif

// C++ _inCAAAASua9(std::size_t array) ==> GeomVertexFormat$_$remove_array(GeomVertexFormat *param0, std::size_t param1)(GeomVertexFormat *, std::size_t)
extern void GeomVertexFormat$18$remove_array(GeomVertexFormat *self, std$_size_t array);

#if INDEX
#define GeomVertexFormat_C_remove_array_v_pl GeomVertexFormat$18$remove_array
#endif

// C++ _inCAAAAIwkF(GeomVertexArrayFormat const *array_format) ==> GeomVertexFormat$_$add_array(GeomVertexFormat *param0, GeomVertexArrayFormat const *param1)(GeomVertexFormat *, GeomVertexArrayFormat const *)
extern std$_size_t GeomVertexFormat$19$add_array(GeomVertexFormat *self, GeomVertexArrayFormat const *array_format);

#if INDEX
#define GeomVertexFormat_C_add_array_l_pp GeomVertexFormat$19$add_array
#endif

// C++ _inCAAAAkuai(std::size_t array, GeomVertexArrayFormat const *array_format) ==> GeomVertexFormat$_$insert_array(GeomVertexFormat *param0, std::size_t param1, GeomVertexArrayFormat const *param2)(GeomVertexFormat *, std::size_t, GeomVertexArrayFormat const *)
extern void GeomVertexFormat$20$insert_array(GeomVertexFormat *self, std$_size_t array, GeomVertexArrayFormat const *array_format);

#if INDEX
#define GeomVertexFormat_C_insert_array_v_plp GeomVertexFormat$20$insert_array
#endif

// C++ _inCAAAAQpcp() ==> GeomVertexFormat$_$clear_arrays(GeomVertexFormat *param0)(GeomVertexFormat *)
extern void GeomVertexFormat$21$clear_arrays(GeomVertexFormat *self);

#if INDEX
#define GeomVertexFormat_C_clear_arrays_v_p GeomVertexFormat$21$clear_arrays
#endif

// C++ _inCAAAAucei() ==> GeomVertexFormat$_$remove_empty_arrays(GeomVertexFormat *param0)(GeomVertexFormat *)
extern void GeomVertexFormat$22$remove_empty_arrays(GeomVertexFormat *self);

#if INDEX
#define GeomVertexFormat_C_remove_empty_arrays_v_p GeomVertexFormat$22$remove_empty_arrays
#endif

// C++ _inCAAAAEb8v() ==> GeomVertexFormat$_$get_num_columns(GeomVertexFormat const *param0)(GeomVertexFormat const *)
extern std$_size_t GeomVertexFormat$23$get_num_columns(GeomVertexFormat const *self);

#if INDEX
#define GeomVertexFormat_C_get_num_columns_l_p GeomVertexFormat$23$get_num_columns
#endif

// C++ _inCAAAA7nrL(InternalName const *name) ==> GeomVertexFormat$_$get_array_with(GeomVertexFormat const *param0, InternalName const *param1)(GeomVertexFormat const *, InternalName const *)
extern int GeomVertexFormat$24$get_array_with(GeomVertexFormat const *self, InternalName const *name);

#if INDEX
#define GeomVertexFormat_C_get_array_with_i_ps GeomVertexFormat$24$get_array_with
#endif

// C++ _inCAAAANXXj(std::size_t i) ==> GeomVertexFormat$_$get_array_with(GeomVertexFormat const *param0, std::size_t param1)(GeomVertexFormat const *, std::size_t)
extern int GeomVertexFormat$25$get_array_with(GeomVertexFormat const *self, std$_size_t i);

#if INDEX
#define GeomVertexFormat_C_get_array_with_i_pl GeomVertexFormat$25$get_array_with
#endif

// C++ _inCAAAAzgLi(InternalName const *name) ==> GeomVertexFormat$_$get_column(GeomVertexFormat const *param0, InternalName const *param1)(GeomVertexFormat const *, InternalName const *)
extern GeomVertexColumn const * GeomVertexFormat$26$get_column(GeomVertexFormat const *self, InternalName const *name);

#if INDEX
#define GeomVertexFormat_C_get_column_p_ps GeomVertexFormat$26$get_column
#endif

// C++ _inCAAAAObkc(std::size_t i) ==> GeomVertexFormat$_$get_column(GeomVertexFormat const *param0, std::size_t param1)(GeomVertexFormat const *, std::size_t)
extern GeomVertexColumn const * GeomVertexFormat$27$get_column(GeomVertexFormat const *self, std$_size_t i);

#if INDEX
#define GeomVertexFormat_C_get_column_p_pl GeomVertexFormat$27$get_column
#endif

// C++ _inCAAAArn1o(InternalName const *name) ==> GeomVertexFormat$_$has_column(GeomVertexFormat const *param0, InternalName const *param1)(GeomVertexFormat const *, InternalName const *)
extern bool GeomVertexFormat$28$has_column(GeomVertexFormat const *self, InternalName const *name);

#if INDEX
#define GeomVertexFormat_C_has_column_B_ps GeomVertexFormat$28$has_column
#endif

// C++ _inCAAAAnri4(std::size_t i) ==> GeomVertexFormat$_$get_column_name(GeomVertexFormat const *param0, std::size_t param1)(GeomVertexFormat const *, std::size_t)
extern InternalName const * GeomVertexFormat$29$get_column_name(GeomVertexFormat const *self, std$_size_t i);

#if INDEX
#define GeomVertexFormat_C_get_column_name_s_pl GeomVertexFormat$29$get_column_name
#endif

// C++ _inCAAAAD4KU(InternalName const *name, bool keep_empty_array) ==> GeomVertexFormat$_$remove_column(GeomVertexFormat *param0, InternalName const *param1, bool param2)(GeomVertexFormat *, InternalName const *, bool)
extern void GeomVertexFormat$30$remove_column(GeomVertexFormat *self, InternalName const *name, bool keep_empty_array);

#if INDEX
#define GeomVertexFormat_C_remove_column_v_psB GeomVertexFormat$30$remove_column
#endif

// C++ _inCAAAAGmoS(InternalName const *name) ==> GeomVertexFormat$_$remove_column(GeomVertexFormat *param0, InternalName const *param1)(GeomVertexFormat *, InternalName const *)
extern void GeomVertexFormat$31$remove_column(GeomVertexFormat *self, InternalName const *name);

#if INDEX
#define GeomVertexFormat_C_remove_column_v_ps GeomVertexFormat$31$remove_column
#endif

// C++ _inCAAAAytua() ==> GeomVertexFormat$_$pack_columns(GeomVertexFormat *param0)(GeomVertexFormat *)
extern void GeomVertexFormat$32$pack_columns(GeomVertexFormat *self);

#if INDEX
#define GeomVertexFormat_C_pack_columns_v_p GeomVertexFormat$32$pack_columns
#endif

// C++ _inCAAAAGdZz() ==> GeomVertexFormat$_$align_columns_for_animation(GeomVertexFormat *param0)(GeomVertexFormat *)
extern void GeomVertexFormat$33$align_columns_for_animation(GeomVertexFormat *self);

#if INDEX
#define GeomVertexFormat_C_align_columns_for_animation_v_p GeomVertexFormat$33$align_columns_for_animation
#endif

// C++ _inCAAAARJ5L() ==> GeomVertexFormat$_$maybe_align_columns_for_animation(GeomVertexFormat *param0)(GeomVertexFormat *)
extern void GeomVertexFormat$34$maybe_align_columns_for_animation(GeomVertexFormat *self);

#if INDEX
#define GeomVertexFormat_C_maybe_align_columns_for_animation_v_p GeomVertexFormat$34$maybe_align_columns_for_animation
#endif

// C++ _inCAAAAMqq8() ==> GeomVertexFormat$_$get_num_points(GeomVertexFormat const *param0)(GeomVertexFormat const *)
extern std$_size_t GeomVertexFormat$35$get_num_points(GeomVertexFormat const *self);

#if INDEX
#define GeomVertexFormat_C_get_num_points_l_p GeomVertexFormat$35$get_num_points
#endif

// C++ _inCAAAAD_LF(std::size_t n) ==> GeomVertexFormat$_$get_point(GeomVertexFormat const *param0, std::size_t param1)(GeomVertexFormat const *, std::size_t)
extern InternalName const * GeomVertexFormat$36$get_point(GeomVertexFormat const *self, std$_size_t n);

#if INDEX
#define GeomVertexFormat_C_get_point_s_pl GeomVertexFormat$36$get_point
#endif

// C++ _inCAAAANM2c() ==> GeomVertexFormat$_$get_num_vectors(GeomVertexFormat const *param0)(GeomVertexFormat const *)
extern std$_size_t GeomVertexFormat$37$get_num_vectors(GeomVertexFormat const *self);

#if INDEX
#define GeomVertexFormat_C_get_num_vectors_l_p GeomVertexFormat$37$get_num_vectors
#endif

// C++ _inCAAAAbrqq(std::size_t n) ==> GeomVertexFormat$_$get_vector(GeomVertexFormat const *param0, std::size_t param1)(GeomVertexFormat const *, std::size_t)
extern InternalName const * GeomVertexFormat$38$get_vector(GeomVertexFormat const *self, std$_size_t n);

#if INDEX
#define GeomVertexFormat_C_get_vector_s_pl GeomVertexFormat$38$get_vector
#endif

// C++ _inCAAAAKJ7H() ==> GeomVertexFormat$_$get_num_texcoords(GeomVertexFormat const *param0)(GeomVertexFormat const *)
extern std$_size_t GeomVertexFormat$39$get_num_texcoords(GeomVertexFormat const *self);

#if INDEX
#define GeomVertexFormat_C_get_num_texcoords_l_p GeomVertexFormat$39$get_num_texcoords
#endif

// C++ _inCAAAAJc1b(std::size_t n) ==> GeomVertexFormat$_$get_texcoord(GeomVertexFormat const *param0, std::size_t param1)(GeomVertexFormat const *, std::size_t)
extern InternalName const * GeomVertexFormat$40$get_texcoord(GeomVertexFormat const *self, std$_size_t n);

#if INDEX
#define GeomVertexFormat_C_get_texcoord_s_pl GeomVertexFormat$40$get_texcoord
#endif

// C++ _inCAAAAFthv() ==> GeomVertexFormat$_$get_num_morphs(GeomVertexFormat const *param0)(GeomVertexFormat const *)
extern std$_size_t GeomVertexFormat$41$get_num_morphs(GeomVertexFormat const *self);

#if INDEX
#define GeomVertexFormat_C_get_num_morphs_l_p GeomVertexFormat$41$get_num_morphs
#endif

// C++ _inCAAAAIUdD(std::size_t n) ==> GeomVertexFormat$_$get_morph_slider(GeomVertexFormat const *param0, std::size_t param1)(GeomVertexFormat const *, std::size_t)
extern InternalName const * GeomVertexFormat$42$get_morph_slider(GeomVertexFormat const *self, std$_size_t n);

#if INDEX
#define GeomVertexFormat_C_get_morph_slider_s_pl GeomVertexFormat$42$get_morph_slider
#endif

// C++ _inCAAAAzhGZ(std::size_t n) ==> GeomVertexFormat$_$get_morph_base(GeomVertexFormat const *param0, std::size_t param1)(GeomVertexFormat const *, std::size_t)
extern InternalName const * GeomVertexFormat$43$get_morph_base(GeomVertexFormat const *self, std$_size_t n);

#if INDEX
#define GeomVertexFormat_C_get_morph_base_s_pl GeomVertexFormat$43$get_morph_base
#endif

// C++ _inCAAAA9ztO(std::size_t n) ==> GeomVertexFormat$_$get_morph_delta(GeomVertexFormat const *param0, std::size_t param1)(GeomVertexFormat const *, std::size_t)
extern InternalName const * GeomVertexFormat$44$get_morph_delta(GeomVertexFormat const *self, std$_size_t n);

#if INDEX
#define GeomVertexFormat_C_get_morph_delta_s_pl GeomVertexFormat$44$get_morph_delta
#endif

// C++ _inCAAAAZXPf(std::ostream &out) ==> GeomVertexFormat$_$output(GeomVertexFormat const *param0, std::ostream *param1)(GeomVertexFormat const *, std::ostream *)
extern void GeomVertexFormat$45$output(GeomVertexFormat const *self, std$_ostream *out);

#if INDEX
#define GeomVertexFormat_C_output_v_pp GeomVertexFormat$45$output
#endif

// C++ _inCAAAAhry4(std::ostream &out, int indent_level) ==> GeomVertexFormat$_$write(GeomVertexFormat const *param0, std::ostream *param1, int param2)(GeomVertexFormat const *, std::ostream *, int)
extern void GeomVertexFormat$46$write(GeomVertexFormat const *self, std$_ostream *out, int indent_level);

#if INDEX
#define GeomVertexFormat_C_write_v_ppi GeomVertexFormat$46$write
#endif

// C++ _inCAAAAWw0L(std::ostream &out) ==> GeomVertexFormat$_$write(GeomVertexFormat const *param0, std::ostream *param1)(GeomVertexFormat const *, std::ostream *)
extern void GeomVertexFormat$47$write(GeomVertexFormat const *self, std$_ostream *out);

#if INDEX
#define GeomVertexFormat_C_write_v_pp GeomVertexFormat$47$write
#endif

// C++ _inCAAAAOjX6(std::ostream &out, int indent_level, GeomVertexData const *data) ==> GeomVertexFormat$_$write_with_data(GeomVertexFormat const *param0, std::ostream *param1, int param2, GeomVertexData const *param3)(GeomVertexFormat const *, std::ostream *, int, GeomVertexData const *)
extern void GeomVertexFormat$48$write_with_data(GeomVertexFormat const *self, std$_ostream *out, int indent_level, GeomVertexData const *data);

#if INDEX
#define GeomVertexFormat_C_write_with_data_v_ppip GeomVertexFormat$48$write_with_data
#endif

// C++ _inCAAAALAhu() ==> GeomVertexFormat$_$get_empty()()
extern GeomVertexFormat const * GeomVertexFormat$49$get_empty(void);

#if INDEX
#define GeomVertexFormat_C_get_empty_p_v GeomVertexFormat$49$get_empty
#endif

// C++ _inCAAAAM264() ==> GeomVertexFormat$_$get_v3()()
extern GeomVertexFormat const * GeomVertexFormat$50$get_v3(void);

#if INDEX
#define GeomVertexFormat_C_get_v3_p_v GeomVertexFormat$50$get_v3
#endif

// C++ _inCAAAAw8Vh() ==> GeomVertexFormat$_$get_v3n3()()
extern GeomVertexFormat const * GeomVertexFormat$51$get_v3n3(void);

#if INDEX
#define GeomVertexFormat_C_get_v3n3_p_v GeomVertexFormat$51$get_v3n3
#endif

// C++ _inCAAAA6P2g() ==> GeomVertexFormat$_$get_v3t2()()
extern GeomVertexFormat const * GeomVertexFormat$52$get_v3t2(void);

#if INDEX
#define GeomVertexFormat_C_get_v3t2_p_v GeomVertexFormat$52$get_v3t2
#endif

// C++ _inCAAAAp05G() ==> GeomVertexFormat$_$get_v3n3t2()()
extern GeomVertexFormat const * GeomVertexFormat$53$get_v3n3t2(void);

#if INDEX
#define GeomVertexFormat_C_get_v3n3t2_p_v GeomVertexFormat$53$get_v3n3t2
#endif

// C++ _inCAAAAm2WG() ==> GeomVertexFormat$_$get_v3cp()()
extern GeomVertexFormat const * GeomVertexFormat$54$get_v3cp(void);

#if INDEX
#define GeomVertexFormat_C_get_v3cp_p_v GeomVertexFormat$54$get_v3cp
#endif

// C++ _inCAAAAE76r() ==> GeomVertexFormat$_$get_v3cpt2()()
extern GeomVertexFormat const * GeomVertexFormat$55$get_v3cpt2(void);

#if INDEX
#define GeomVertexFormat_C_get_v3cpt2_p_v GeomVertexFormat$55$get_v3cpt2
#endif

// C++ _inCAAAAxdLR() ==> GeomVertexFormat$_$get_v3n3cp()()
extern GeomVertexFormat const * GeomVertexFormat$56$get_v3n3cp(void);

#if INDEX
#define GeomVertexFormat_C_get_v3n3cp_p_v GeomVertexFormat$56$get_v3n3cp
#endif

// C++ _inCAAAAaDrT() ==> GeomVertexFormat$_$get_v3n3cpt2()()
extern GeomVertexFormat const * GeomVertexFormat$57$get_v3n3cpt2(void);

#if INDEX
#define GeomVertexFormat_C_get_v3n3cpt2_p_v GeomVertexFormat$57$get_v3n3cpt2
#endif

// C++ _inCAAAAlkvh() ==> GeomVertexFormat$_$get_v3c4()()
extern GeomVertexFormat const * GeomVertexFormat$58$get_v3c4(void);

#if INDEX
#define GeomVertexFormat_C_get_v3c4_p_v GeomVertexFormat$58$get_v3c4
#endif

// C++ _inCAAAAEtTH() ==> GeomVertexFormat$_$get_v3c4t2()()
extern GeomVertexFormat const * GeomVertexFormat$59$get_v3c4t2(void);

#if INDEX
#define GeomVertexFormat_C_get_v3c4t2_p_v GeomVertexFormat$59$get_v3c4t2
#endif

// C++ _inCAAAA_Erc() ==> GeomVertexFormat$_$get_v3n3c4()()
extern GeomVertexFormat const * GeomVertexFormat$60$get_v3n3c4(void);

#if INDEX
#define GeomVertexFormat_C_get_v3n3c4_p_v GeomVertexFormat$60$get_v3n3c4
#endif

// C++ _inCAAAAE8Lf() ==> GeomVertexFormat$_$get_v3n3c4t2()()
extern GeomVertexFormat const * GeomVertexFormat$61$get_v3n3c4t2(void);

#if INDEX
#define GeomVertexFormat_C_get_v3n3c4t2_p_v GeomVertexFormat$61$get_v3n3c4t2
#endif

// C++ _inCAAAAVxYi() ==> GeomVertexFormat$_$get_vertex_array_index(GeomVertexFormat const *param0)(GeomVertexFormat const *)
extern int GeomVertexFormat$62$get_vertex_array_index(GeomVertexFormat const *self);

#if INDEX
#define GeomVertexFormat_C_get_vertex_array_index_i_p GeomVertexFormat$62$get_vertex_array_index
#endif

// C++ _inCAAAAnqvf() ==> GeomVertexFormat$_$get_vertex_column(GeomVertexFormat const *param0)(GeomVertexFormat const *)
extern GeomVertexColumn const * GeomVertexFormat$63$get_vertex_column(GeomVertexFormat const *self);

#if INDEX
#define GeomVertexFormat_C_get_vertex_column_p_p GeomVertexFormat$63$get_vertex_column
#endif

// C++ _inCAAAAKBAO() ==> GeomVertexFormat$_$get_normal_array_index(GeomVertexFormat const *param0)(GeomVertexFormat const *)
extern int GeomVertexFormat$64$get_normal_array_index(GeomVertexFormat const *self);

#if INDEX
#define GeomVertexFormat_C_get_normal_array_index_i_p GeomVertexFormat$64$get_normal_array_index
#endif

// C++ _inCAAAAAPWL() ==> GeomVertexFormat$_$get_normal_column(GeomVertexFormat const *param0)(GeomVertexFormat const *)
extern GeomVertexColumn const * GeomVertexFormat$65$get_normal_column(GeomVertexFormat const *self);

#if INDEX
#define GeomVertexFormat_C_get_normal_column_p_p GeomVertexFormat$65$get_normal_column
#endif

// C++ _inCAAAAE6wB() ==> GeomVertexFormat$_$get_color_array_index(GeomVertexFormat const *param0)(GeomVertexFormat const *)
extern int GeomVertexFormat$66$get_color_array_index(GeomVertexFormat const *self);

#if INDEX
#define GeomVertexFormat_C_get_color_array_index_i_p GeomVertexFormat$66$get_color_array_index
#endif

// C++ _inCAAAAvorX() ==> GeomVertexFormat$_$get_color_column(GeomVertexFormat const *param0)(GeomVertexFormat const *)
extern GeomVertexColumn const * GeomVertexFormat$67$get_color_column(GeomVertexFormat const *self);

#if INDEX
#define GeomVertexFormat_C_get_color_column_p_p GeomVertexFormat$67$get_color_column
#endif

// C++ _inCAAAADKeQ(GeomVertexFormat const &other) ==> GeomVertexFormat$_$compare_to(GeomVertexFormat const *param0, GeomVertexFormat const *param1)(GeomVertexFormat const *, GeomVertexFormat const *)
extern int GeomVertexFormat$68$compare_to(GeomVertexFormat const *self, GeomVertexFormat const *other);

#if INDEX
#define GeomVertexFormat_C_compare_to_i_pp GeomVertexFormat$68$compare_to
#endif

// C++ _inCAAAAY_W1() ==> GeomVertexFormat$_$register_with_read_factory()()
extern void GeomVertexFormat$69$register_with_read_factory(void);

#if INDEX
#define GeomVertexFormat_C_register_with_read_factory_v_v GeomVertexFormat$69$register_with_read_factory
#endif

// C++ _inCAAAAj4hI(BamWriter *manager, Datagram &dg) ==> GeomVertexFormat$_$write_datagram(GeomVertexFormat *param0, BamWriter *param1, Datagram *param2)(GeomVertexFormat *, BamWriter *, Datagram *)
extern void GeomVertexFormat$70$write_datagram(GeomVertexFormat *self, BamWriter *manager, Datagram *dg);

#if INDEX
#define GeomVertexFormat_C_write_datagram_v_ppp GeomVertexFormat$70$write_datagram
#endif

// C++ _inCAAAAzbuh() ==> GeomVertexFormat$_$get_class_type()()
extern int GeomVertexFormat$71$get_class_type(void);

#if INDEX
#define GeomVertexFormat_C_get_class_type_i_v GeomVertexFormat$71$get_class_type
#endif

// C++ _inCAAAAjw2s() ==> GeomVertexFormat$_$init_type()()
extern void GeomVertexFormat$72$init_type(void);

#if INDEX
#define GeomVertexFormat_C_init_type_v_v GeomVertexFormat$72$init_type
#endif

// C++ _inCAAAAvl3_() ==> GeomVertexFormat$_$get_type(GeomVertexFormat const *param0)(GeomVertexFormat const *)
extern int GeomVertexFormat$73$get_type(GeomVertexFormat const *self);

#if INDEX
#define GeomVertexFormat_C_get_type_i_p GeomVertexFormat$73$get_type
#endif

// C++ _inCAAAA0Ul6() ==> GeomVertexFormat$_$force_init_type(GeomVertexFormat *param0)(GeomVertexFormat *)
extern int GeomVertexFormat$74$force_init_type(GeomVertexFormat *self);

#if INDEX
#define GeomVertexFormat_C_force_init_type_i_p GeomVertexFormat$74$force_init_type
#endif


// GeomVertexWriter

// C++ _inCAAAADYGf(GeomVertexArrayData *array_data, Thread *current_thread) ==> GeomVertexWriter$_$GeomVertexWriter(GeomVertexArrayData *param0, Thread *param1)(GeomVertexArrayData *, Thread *)
extern GeomVertexWriter * GeomVertexWriter$1$GeomVertexWriter(GeomVertexArrayData *array_data, Thread *current_thread);

#if INDEX
#define GeomVertexWriter_C_ctor_p_pp GeomVertexWriter$1$GeomVertexWriter
#endif

// C++ _inCAAAAm1bv(GeomVertexArrayData *array_data) ==> GeomVertexWriter$_$GeomVertexWriter(GeomVertexArrayData *param0)(GeomVertexArrayData *)
extern GeomVertexWriter * GeomVertexWriter$2$GeomVertexWriter(GeomVertexArrayData *array_data);

#if INDEX
#define GeomVertexWriter_C_ctor_p_p GeomVertexWriter$2$GeomVertexWriter
#endif

// C++ _inCAAAABk28(GeomVertexArrayData *array_data, int column, Thread *current_thread) ==> GeomVertexWriter$_$GeomVertexWriter(GeomVertexArrayData *param0, int param1, Thread *param2)(GeomVertexArrayData *, int, Thread *)
extern GeomVertexWriter * GeomVertexWriter$3$GeomVertexWriter(GeomVertexArrayData *array_data, int column, Thread *current_thread);

#if INDEX
#define GeomVertexWriter_C_ctor_p_pip GeomVertexWriter$3$GeomVertexWriter
#endif

// C++ _inCAAAA8wdd(GeomVertexArrayData *array_data, int column) ==> GeomVertexWriter$_$GeomVertexWriter(GeomVertexArrayData *param0, int param1)(GeomVertexArrayData *, int)
extern GeomVertexWriter * GeomVertexWriter$4$GeomVertexWriter(GeomVertexArrayData *array_data, int column);

#if INDEX
#define GeomVertexWriter_C_ctor_p_pi GeomVertexWriter$4$GeomVertexWriter
#endif

// C++ _inCAAAAdgbd(GeomVertexData *vertex_data, CPT_InternalName name, Thread *current_thread) ==> GeomVertexWriter$_$GeomVertexWriter(GeomVertexData *param0, CPT_InternalName *param1, Thread *param2)(GeomVertexData *, CPT_InternalName *, Thread *)
extern GeomVertexWriter * GeomVertexWriter$5$GeomVertexWriter(GeomVertexData *vertex_data, CPT_InternalName *name, Thread *current_thread);

#if INDEX
#define GeomVertexWriter_C_ctor_p_psp GeomVertexWriter$5$GeomVertexWriter
#endif

// C++ _inCAAAA0Ikz(GeomVertexData *vertex_data, CPT_InternalName name) ==> GeomVertexWriter$_$GeomVertexWriter(GeomVertexData *param0, CPT_InternalName *param1)(GeomVertexData *, CPT_InternalName *)
extern GeomVertexWriter * GeomVertexWriter$6$GeomVertexWriter(GeomVertexData *vertex_data, CPT_InternalName *name);

#if INDEX
#define GeomVertexWriter_C_ctor_p_ps GeomVertexWriter$6$GeomVertexWriter
#endif

// C++ _inCAAAA_sLT(GeomVertexData *vertex_data, Thread *current_thread) ==> GeomVertexWriter$_$GeomVertexWriter(GeomVertexData *param0, Thread *param1)(GeomVertexData *, Thread *)
extern GeomVertexWriter * GeomVertexWriter$7$GeomVertexWriter(GeomVertexData *vertex_data, Thread *current_thread);
// COLLISION : GeomVertexWriter_C_ctor_p_pp GeomVertexWriter$7$GeomVertexWriter

// C++ _inCAAAAiuVb(GeomVertexData *vertex_data) ==> GeomVertexWriter$_$GeomVertexWriter(GeomVertexData *param0)(GeomVertexData *)
extern GeomVertexWriter * GeomVertexWriter$8$GeomVertexWriter(GeomVertexData *vertex_data);
// COLLISION : GeomVertexWriter_C_ctor_p_p GeomVertexWriter$8$GeomVertexWriter

// C++ _inCAAAA2HJ_(GeomVertexDataPipelineWriter *data_writer, InternalName const *name) ==> GeomVertexWriter$_$GeomVertexWriter(GeomVertexDataPipelineWriter *param0, InternalName const *param1)(GeomVertexDataPipelineWriter *, InternalName const *)
extern GeomVertexWriter * GeomVertexWriter$9$GeomVertexWriter(GeomVertexDataPipelineWriter *data_writer, InternalName const *name);
// COLLISION : GeomVertexWriter_C_ctor_p_ps GeomVertexWriter$9$GeomVertexWriter

// C++ _inCAAAA3jti(GeomVertexWriter const &copy) ==> GeomVertexWriter$_$GeomVertexWriter(GeomVertexWriter const *param0)(GeomVertexWriter const *)
extern GeomVertexWriter * GeomVertexWriter$10$GeomVertexWriter(GeomVertexWriter const *copy);
// COLLISION : GeomVertexWriter_C_ctor_p_p GeomVertexWriter$10$GeomVertexWriter

// C++ _inCAAAAWOrH(Thread *current_thread) ==> GeomVertexWriter$_$GeomVertexWriter(Thread *param0)(Thread *)
extern GeomVertexWriter * GeomVertexWriter$11$GeomVertexWriter(Thread *current_thread);
// COLLISION : GeomVertexWriter_C_ctor_p_p GeomVertexWriter$11$GeomVertexWriter

// C++ _inCAAAA_1gf() ==> GeomVertexWriter$_$GeomVertexWriter()()
extern GeomVertexWriter * GeomVertexWriter$12$GeomVertexWriter(void);

#if INDEX
#define GeomVertexWriter_C_ctor_p_v GeomVertexWriter$12$GeomVertexWriter
#endif

// C++ _inCAAAA1wqw() ==> GeomVertexWriter$_$get_vertex_data(GeomVertexWriter const *param0)(GeomVertexWriter const *)
extern GeomVertexData * GeomVertexWriter$13$get_vertex_data(GeomVertexWriter const *self);

#if INDEX
#define GeomVertexWriter_C_get_vertex_data_p_p GeomVertexWriter$13$get_vertex_data
#endif

// C++ _inCAAAA4pZu() ==> GeomVertexWriter$_$get_array_data(GeomVertexWriter const *param0)(GeomVertexWriter const *)
extern GeomVertexArrayData * GeomVertexWriter$14$get_array_data(GeomVertexWriter const *self);

#if INDEX
#define GeomVertexWriter_C_get_array_data_p_p GeomVertexWriter$14$get_array_data
#endif

// C++ _inCAAAAefIP() ==> GeomVertexWriter$_$get_array_handle(GeomVertexWriter const *param0)(GeomVertexWriter const *)
extern GeomVertexArrayDataHandle * GeomVertexWriter$15$get_array_handle(GeomVertexWriter const *self);

#if INDEX
#define GeomVertexWriter_C_get_array_handle_p_p GeomVertexWriter$15$get_array_handle
#endif

// C++ _inCAAAAkglK() ==> GeomVertexWriter$_$get_stride(GeomVertexWriter const *param0)(GeomVertexWriter const *)
extern std$_size_t GeomVertexWriter$16$get_stride(GeomVertexWriter const *self);

#if INDEX
#define GeomVertexWriter_C_get_stride_l_p GeomVertexWriter$16$get_stride
#endif

// C++ _inCAAAARIaa() ==> GeomVertexWriter$_$get_current_thread(GeomVertexWriter const *param0)(GeomVertexWriter const *)
extern Thread * GeomVertexWriter$17$get_current_thread(GeomVertexWriter const *self);

#if INDEX
#define GeomVertexWriter_C_get_current_thread_p_p GeomVertexWriter$17$get_current_thread
#endif

// C++ _inCAAAAxzis(CPT_InternalName name) ==> GeomVertexWriter$_$set_column(GeomVertexWriter *param0, CPT_InternalName *param1)(GeomVertexWriter *, CPT_InternalName *)
extern bool GeomVertexWriter$18$set_column(GeomVertexWriter *self, CPT_InternalName *name);

#if INDEX
#define GeomVertexWriter_C_set_column_B_ps GeomVertexWriter$18$set_column
#endif

// C++ _inCAAAA4bSL(int column) ==> GeomVertexWriter$_$set_column(GeomVertexWriter *param0, int param1)(GeomVertexWriter *, int)
extern bool GeomVertexWriter$19$set_column(GeomVertexWriter *self, int column);

#if INDEX
#define GeomVertexWriter_C_set_column_B_pi GeomVertexWriter$19$set_column
#endif

// C++ _inCAAAA5him(int array, GeomVertexColumn const *column) ==> GeomVertexWriter$_$set_column(GeomVertexWriter *param0, int param1, GeomVertexColumn const *param2)(GeomVertexWriter *, int, GeomVertexColumn const *)
extern bool GeomVertexWriter$20$set_column(GeomVertexWriter *self, int array, GeomVertexColumn const *column);

#if INDEX
#define GeomVertexWriter_C_set_column_B_pip GeomVertexWriter$20$set_column
#endif

// C++ _inCAAAAh0DZ() ==> GeomVertexWriter$_$clear(GeomVertexWriter *param0)(GeomVertexWriter *)
extern void GeomVertexWriter$21$clear(GeomVertexWriter *self);

#if INDEX
#define GeomVertexWriter_C_clear_v_p GeomVertexWriter$21$clear
#endif

// C++ _inCAAAATc4i(int num_rows) ==> GeomVertexWriter$_$reserve_num_rows(GeomVertexWriter *param0, int param1)(GeomVertexWriter *, int)
extern bool GeomVertexWriter$22$reserve_num_rows(GeomVertexWriter *self, int num_rows);

#if INDEX
#define GeomVertexWriter_C_reserve_num_rows_B_pi GeomVertexWriter$22$reserve_num_rows
#endif

// C++ _inCAAAA7zCz() ==> GeomVertexWriter$_$has_column(GeomVertexWriter const *param0)(GeomVertexWriter const *)
extern bool GeomVertexWriter$23$has_column(GeomVertexWriter const *self);

#if INDEX
#define GeomVertexWriter_C_has_column_B_p GeomVertexWriter$23$has_column
#endif

// C++ _inCAAAAImzD() ==> GeomVertexWriter$_$get_array(GeomVertexWriter const *param0)(GeomVertexWriter const *)
extern int GeomVertexWriter$24$get_array(GeomVertexWriter const *self);

#if INDEX
#define GeomVertexWriter_C_get_array_i_p GeomVertexWriter$24$get_array
#endif

// C++ _inCAAAATOZs() ==> GeomVertexWriter$_$get_column(GeomVertexWriter const *param0)(GeomVertexWriter const *)
extern GeomVertexColumn const * GeomVertexWriter$25$get_column(GeomVertexWriter const *self);

#if INDEX
#define GeomVertexWriter_C_get_column_p_p GeomVertexWriter$25$get_column
#endif

// C++ _inCAAAAX9mF(int row) ==> GeomVertexWriter$_$set_row_unsafe(GeomVertexWriter *param0, int param1)(GeomVertexWriter *, int)
extern void GeomVertexWriter$26$set_row_unsafe(GeomVertexWriter *self, int row);

#if INDEX
#define GeomVertexWriter_C_set_row_unsafe_v_pi GeomVertexWriter$26$set_row_unsafe
#endif

// C++ _inCAAAAk3SK(int row) ==> GeomVertexWriter$_$set_row(GeomVertexWriter *param0, int param1)(GeomVertexWriter *, int)
extern void GeomVertexWriter$27$set_row(GeomVertexWriter *self, int row);

#if INDEX
#define GeomVertexWriter_C_set_row_v_pi GeomVertexWriter$27$set_row
#endif

// C++ _inCAAAAiCoy() ==> GeomVertexWriter$_$get_start_row(GeomVertexWriter const *param0)(GeomVertexWriter const *)
extern int GeomVertexWriter$28$get_start_row(GeomVertexWriter const *self);

#if INDEX
#define GeomVertexWriter_C_get_start_row_i_p GeomVertexWriter$28$get_start_row
#endif

// C++ _inCAAAADv2U() ==> GeomVertexWriter$_$get_write_row(GeomVertexWriter const *param0)(GeomVertexWriter const *)
extern int GeomVertexWriter$29$get_write_row(GeomVertexWriter const *self);

#if INDEX
#define GeomVertexWriter_C_get_write_row_i_p GeomVertexWriter$29$get_write_row
#endif

// C++ _inCAAAAqN8y() ==> GeomVertexWriter$_$is_at_end(GeomVertexWriter const *param0)(GeomVertexWriter const *)
extern bool GeomVertexWriter$30$is_at_end(GeomVertexWriter const *self);

#if INDEX
#define GeomVertexWriter_C_is_at_end_B_p GeomVertexWriter$30$is_at_end
#endif

// C++ _inCAAAA8dnY(float data) ==> GeomVertexWriter$_$set_data1f(GeomVertexWriter *param0, float param1)(GeomVertexWriter *, float)
extern void GeomVertexWriter$31$set_data1f(GeomVertexWriter *self, float data);

#if INDEX
#define GeomVertexWriter_C_set_data1f_v_pf GeomVertexWriter$31$set_data1f
#endif

// C++ _inCAAAAuO4g(LVecBase2f const &data) ==> GeomVertexWriter$_$set_data2f(GeomVertexWriter *param0, LVecBase2f const *param1)(GeomVertexWriter *, LVecBase2f const *)
extern void GeomVertexWriter$32$set_data2f(GeomVertexWriter *self, LVecBase2f const *data);

#if INDEX
#define GeomVertexWriter_C_set_data2f_v_pp GeomVertexWriter$32$set_data2f
#endif

// C++ _inCAAAAmeMu(float x, float y) ==> GeomVertexWriter$_$set_data2f(GeomVertexWriter *param0, float param1, float param2)(GeomVertexWriter *, float, float)
extern void GeomVertexWriter$33$set_data2f(GeomVertexWriter *self, float x, float y);

#if INDEX
#define GeomVertexWriter_C_set_data2f_v_pff GeomVertexWriter$33$set_data2f
#endif

// C++ _inCAAAAH_73(LVecBase3f const &data) ==> GeomVertexWriter$_$set_data3f(GeomVertexWriter *param0, LVecBase3f const *param1)(GeomVertexWriter *, LVecBase3f const *)
extern void GeomVertexWriter$34$set_data3f(GeomVertexWriter *self, LVecBase3f const *data);

#if INDEX
#define GeomVertexWriter_C_set_data3f_v_pp GeomVertexWriter$34$set_data3f
#endif

// C++ _inCAAAA_DXP(float x, float y, float z) ==> GeomVertexWriter$_$set_data3f(GeomVertexWriter *param0, float param1, float param2, float param3)(GeomVertexWriter *, float, float, float)
extern void GeomVertexWriter$35$set_data3f(GeomVertexWriter *self, float x, float y, float z);

#if INDEX
#define GeomVertexWriter_C_set_data3f_v_pfff GeomVertexWriter$35$set_data3f
#endif

// C++ _inCAAAAfh9O(LVecBase4f const &data) ==> GeomVertexWriter$_$set_data4f(GeomVertexWriter *param0, LVecBase4f const *param1)(GeomVertexWriter *, LVecBase4f const *)
extern void GeomVertexWriter$36$set_data4f(GeomVertexWriter *self, LVecBase4f const *data);

#if INDEX
#define GeomVertexWriter_C_set_data4f_v_pp GeomVertexWriter$36$set_data4f
#endif

// C++ _inCAAAAKTZT(float x, float y, float z, float w) ==> GeomVertexWriter$_$set_data4f(GeomVertexWriter *param0, float param1, float param2, float param3, float param4)(GeomVertexWriter *, float, float, float, float)
extern void GeomVertexWriter$37$set_data4f(GeomVertexWriter *self, float x, float y, float z, float w);

#if INDEX
#define GeomVertexWriter_C_set_data4f_v_pffff GeomVertexWriter$37$set_data4f
#endif

// C++ _inCAAAA1xsE(LMatrix3f const &mat) ==> GeomVertexWriter$_$set_matrix3f(GeomVertexWriter *param0, LMatrix3f const *param1)(GeomVertexWriter *, LMatrix3f const *)
extern void GeomVertexWriter$38$set_matrix3f(GeomVertexWriter *self, LMatrix3f const *mat);

#if INDEX
#define GeomVertexWriter_C_set_matrix3f_v_pp GeomVertexWriter$38$set_matrix3f
#endif

// C++ _inCAAAAmYtQ(LMatrix4f const &mat) ==> GeomVertexWriter$_$set_matrix4f(GeomVertexWriter *param0, LMatrix4f const *param1)(GeomVertexWriter *, LMatrix4f const *)
extern void GeomVertexWriter$39$set_matrix4f(GeomVertexWriter *self, LMatrix4f const *mat);

#if INDEX
#define GeomVertexWriter_C_set_matrix4f_v_pp GeomVertexWriter$39$set_matrix4f
#endif

// C++ _inCAAAAMHKv(double data) ==> GeomVertexWriter$_$set_data1d(GeomVertexWriter *param0, double param1)(GeomVertexWriter *, double)
extern void GeomVertexWriter$40$set_data1d(GeomVertexWriter *self, double data);

#if INDEX
#define GeomVertexWriter_C_set_data1d_v_pd GeomVertexWriter$40$set_data1d
#endif

// C++ _inCAAAABWJf(LVecBase2d const &data) ==> GeomVertexWriter$_$set_data2d(GeomVertexWriter *param0, LVecBase2d const *param1)(GeomVertexWriter *, LVecBase2d const *)
extern void GeomVertexWriter$41$set_data2d(GeomVertexWriter *self, LVecBase2d const *data);

#if INDEX
#define GeomVertexWriter_C_set_data2d_v_pp GeomVertexWriter$41$set_data2d
#endif

// C++ _inCAAAAzkV3(double x, double y) ==> GeomVertexWriter$_$set_data2d(GeomVertexWriter *param0, double param1, double param2)(GeomVertexWriter *, double, double)
extern void GeomVertexWriter$42$set_data2d(GeomVertexWriter *self, double x, double y);

#if INDEX
#define GeomVertexWriter_C_set_data2d_v_pdd GeomVertexWriter$42$set_data2d
#endif

// C++ _inCAAAAeZK2(LVecBase3d const &data) ==> GeomVertexWriter$_$set_data3d(GeomVertexWriter *param0, LVecBase3d const *param1)(GeomVertexWriter *, LVecBase3d const *)
extern void GeomVertexWriter$43$set_data3d(GeomVertexWriter *self, LVecBase3d const *data);

#if INDEX
#define GeomVertexWriter_C_set_data3d_v_pp GeomVertexWriter$43$set_data3d
#endif

// C++ _inCAAAAEWjv(double x, double y, double z) ==> GeomVertexWriter$_$set_data3d(GeomVertexWriter *param0, double param1, double param2, double param3)(GeomVertexWriter *, double, double, double)
extern void GeomVertexWriter$44$set_data3d(GeomVertexWriter *self, double x, double y, double z);

#if INDEX
#define GeomVertexWriter_C_set_data3d_v_pddd GeomVertexWriter$44$set_data3d
#endif

// C++ _inCAAAA2IMN(LVecBase4d const &data) ==> GeomVertexWriter$_$set_data4d(GeomVertexWriter *param0, LVecBase4d const *param1)(GeomVertexWriter *, LVecBase4d const *)
extern void GeomVertexWriter$45$set_data4d(GeomVertexWriter *self, LVecBase4d const *data);

#if INDEX
#define GeomVertexWriter_C_set_data4d_v_pp GeomVertexWriter$45$set_data4d
#endif

// C++ _inCAAAAK68x(double x, double y, double z, double w) ==> GeomVertexWriter$_$set_data4d(GeomVertexWriter *param0, double param1, double param2, double param3, double param4)(GeomVertexWriter *, double, double, double, double)
extern void GeomVertexWriter$46$set_data4d(GeomVertexWriter *self, double x, double y, double z, double w);

#if INDEX
#define GeomVertexWriter_C_set_data4d_v_pdddd GeomVertexWriter$46$set_data4d
#endif

// C++ _inCAAAA5bUE(LMatrix3d const &mat) ==> GeomVertexWriter$_$set_matrix3d(GeomVertexWriter *param0, LMatrix3d const *param1)(GeomVertexWriter *, LMatrix3d const *)
extern void GeomVertexWriter$47$set_matrix3d(GeomVertexWriter *self, LMatrix3d const *mat);

#if INDEX
#define GeomVertexWriter_C_set_matrix3d_v_pp GeomVertexWriter$47$set_matrix3d
#endif

// C++ _inCAAAAa9VQ(LMatrix4d const &mat) ==> GeomVertexWriter$_$set_matrix4d(GeomVertexWriter *param0, LMatrix4d const *param1)(GeomVertexWriter *, LMatrix4d const *)
extern void GeomVertexWriter$48$set_matrix4d(GeomVertexWriter *self, LMatrix4d const *mat);

#if INDEX
#define GeomVertexWriter_C_set_matrix4d_v_pp GeomVertexWriter$48$set_matrix4d
#endif

// C++ _inCAAAAuByz(PN_stdfloat data) ==> GeomVertexWriter$_$set_data1(GeomVertexWriter *param0, PN_stdfloat param1)(GeomVertexWriter *, PN_stdfloat)
extern void GeomVertexWriter$49$set_data1(GeomVertexWriter *self, PN_stdfloat data);

#if INDEX
#define GeomVertexWriter_C_set_data1_v_pf GeomVertexWriter$49$set_data1
#endif

// C++ _inCAAAA7u_2(LVecBase2 const &data) ==> GeomVertexWriter$_$set_data2(GeomVertexWriter *param0, LVecBase2 const *param1)(GeomVertexWriter *, LVecBase2 const *)
extern void GeomVertexWriter$50$set_data2(GeomVertexWriter *self, LVecBase2 const *data);

#if INDEX
#define GeomVertexWriter_C_set_data2_v_pp GeomVertexWriter$50$set_data2
#endif

// C++ _inCAAAA5dY1(PN_stdfloat x, PN_stdfloat y) ==> GeomVertexWriter$_$set_data2(GeomVertexWriter *param0, PN_stdfloat param1, PN_stdfloat param2)(GeomVertexWriter *, PN_stdfloat, PN_stdfloat)
extern void GeomVertexWriter$51$set_data2(GeomVertexWriter *self, PN_stdfloat x, PN_stdfloat y);

#if INDEX
#define GeomVertexWriter_C_set_data2_v_pff GeomVertexWriter$51$set_data2
#endif

// C++ _inCAAAAFBnY(LVecBase3 const &data) ==> GeomVertexWriter$_$set_data3(GeomVertexWriter *param0, LVecBase3 const *param1)(GeomVertexWriter *, LVecBase3 const *)
extern void GeomVertexWriter$52$set_data3(GeomVertexWriter *self, LVecBase3 const *data);

#if INDEX
#define GeomVertexWriter_C_set_data3_v_pp GeomVertexWriter$52$set_data3
#endif

// C++ _inCAAAAMrMF(PN_stdfloat x, PN_stdfloat y, PN_stdfloat z) ==> GeomVertexWriter$_$set_data3(GeomVertexWriter *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3)(GeomVertexWriter *, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void GeomVertexWriter$53$set_data3(GeomVertexWriter *self, PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);

#if INDEX
#define GeomVertexWriter_C_set_data3_v_pfff GeomVertexWriter$53$set_data3
#endif

// C++ _inCAAAAGRQ6(LVecBase4 const &data) ==> GeomVertexWriter$_$set_data4(GeomVertexWriter *param0, LVecBase4 const *param1)(GeomVertexWriter *, LVecBase4 const *)
extern void GeomVertexWriter$54$set_data4(GeomVertexWriter *self, LVecBase4 const *data);

#if INDEX
#define GeomVertexWriter_C_set_data4_v_pp GeomVertexWriter$54$set_data4
#endif

// C++ _inCAAAA_Tr4(PN_stdfloat x, PN_stdfloat y, PN_stdfloat z, PN_stdfloat w) ==> GeomVertexWriter$_$set_data4(GeomVertexWriter *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4)(GeomVertexWriter *, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void GeomVertexWriter$55$set_data4(GeomVertexWriter *self, PN_stdfloat x, PN_stdfloat y, PN_stdfloat z, PN_stdfloat w);

#if INDEX
#define GeomVertexWriter_C_set_data4_v_pffff GeomVertexWriter$55$set_data4
#endif

// C++ _inCAAAA80o0(LMatrix3 const &mat) ==> GeomVertexWriter$_$set_matrix3(GeomVertexWriter *param0, LMatrix3 const *param1)(GeomVertexWriter *, LMatrix3 const *)
extern void GeomVertexWriter$56$set_matrix3(GeomVertexWriter *self, LMatrix3 const *mat);

#if INDEX
#define GeomVertexWriter_C_set_matrix3_v_pp GeomVertexWriter$56$set_matrix3
#endif

// C++ _inCAAAAc_IU(LMatrix4 const &mat) ==> GeomVertexWriter$_$set_matrix4(GeomVertexWriter *param0, LMatrix4 const *param1)(GeomVertexWriter *, LMatrix4 const *)
extern void GeomVertexWriter$57$set_matrix4(GeomVertexWriter *self, LMatrix4 const *mat);

#if INDEX
#define GeomVertexWriter_C_set_matrix4_v_pp GeomVertexWriter$57$set_matrix4
#endif

// C++ _inCAAAAWrrr(int data) ==> GeomVertexWriter$_$set_data1i(GeomVertexWriter *param0, int param1)(GeomVertexWriter *, int)
extern void GeomVertexWriter$58$set_data1i(GeomVertexWriter *self, int data);

#if INDEX
#define GeomVertexWriter_C_set_data1i_v_pi GeomVertexWriter$58$set_data1i
#endif

// C++ _inCAAAALsiD(LVecBase2i const &data) ==> GeomVertexWriter$_$set_data2i(GeomVertexWriter *param0, LVecBase2i const *param1)(GeomVertexWriter *, LVecBase2i const *)
extern void GeomVertexWriter$59$set_data2i(GeomVertexWriter *self, LVecBase2i const *data);

#if INDEX
#define GeomVertexWriter_C_set_data2i_v_pp GeomVertexWriter$59$set_data2i
#endif

// C++ _inCAAAAsRPt(int a, int b) ==> GeomVertexWriter$_$set_data2i(GeomVertexWriter *param0, int param1, int param2)(GeomVertexWriter *, int, int)
extern void GeomVertexWriter$60$set_data2i(GeomVertexWriter *self, int a, int b);

#if INDEX
#define GeomVertexWriter_C_set_data2i_v_pii GeomVertexWriter$60$set_data2i
#endif

// C++ _inCAAAAy8ka(LVecBase3i const &data) ==> GeomVertexWriter$_$set_data3i(GeomVertexWriter *param0, LVecBase3i const *param1)(GeomVertexWriter *, LVecBase3i const *)
extern void GeomVertexWriter$61$set_data3i(GeomVertexWriter *self, LVecBase3i const *data);

#if INDEX
#define GeomVertexWriter_C_set_data3i_v_pp GeomVertexWriter$61$set_data3i
#endif

// C++ _inCAAAARmzc(int a, int b, int c) ==> GeomVertexWriter$_$set_data3i(GeomVertexWriter *param0, int param1, int param2, int param3)(GeomVertexWriter *, int, int, int)
extern void GeomVertexWriter$62$set_data3i(GeomVertexWriter *self, int a, int b, int c);

#if INDEX
#define GeomVertexWriter_C_set_data3i_v_piii GeomVertexWriter$62$set_data3i
#endif

// C++ _inCAAAAZNlx(LVecBase4i const &data) ==> GeomVertexWriter$_$set_data4i(GeomVertexWriter *param0, LVecBase4i const *param1)(GeomVertexWriter *, LVecBase4i const *)
extern void GeomVertexWriter$63$set_data4i(GeomVertexWriter *self, LVecBase4i const *data);

#if INDEX
#define GeomVertexWriter_C_set_data4i_v_pp GeomVertexWriter$63$set_data4i
#endif

// C++ _inCAAAAdVco(int a, int b, int c, int d) ==> GeomVertexWriter$_$set_data4i(GeomVertexWriter *param0, int param1, int param2, int param3, int param4)(GeomVertexWriter *, int, int, int, int)
extern void GeomVertexWriter$64$set_data4i(GeomVertexWriter *self, int a, int b, int c, int d);

#if INDEX
#define GeomVertexWriter_C_set_data4i_v_piiii GeomVertexWriter$64$set_data4i
#endif

// C++ _inCAAAA5Qu1(float data) ==> GeomVertexWriter$_$add_data1f(GeomVertexWriter *param0, float param1)(GeomVertexWriter *, float)
extern void GeomVertexWriter$65$add_data1f(GeomVertexWriter *self, float data);

#if INDEX
#define GeomVertexWriter_C_add_data1f_v_pf GeomVertexWriter$65$add_data1f
#endif

// C++ _inCAAAAsnA_(LVecBase2f const &data) ==> GeomVertexWriter$_$add_data2f(GeomVertexWriter *param0, LVecBase2f const *param1)(GeomVertexWriter *, LVecBase2f const *)
extern void GeomVertexWriter$66$add_data2f(GeomVertexWriter *self, LVecBase2f const *data);

#if INDEX
#define GeomVertexWriter_C_add_data2f_v_pp GeomVertexWriter$66$add_data2f
#endif

// C++ _inCAAAAn5UL(float x, float y) ==> GeomVertexWriter$_$add_data2f(GeomVertexWriter *param0, float param1, float param2)(GeomVertexWriter *, float, float)
extern void GeomVertexWriter$67$add_data2f(GeomVertexWriter *self, float x, float y);

#if INDEX
#define GeomVertexWriter_C_add_data2f_v_pff GeomVertexWriter$67$add_data2f
#endif

// C++ _inCAAAAEXCV(LVecBase3f const &data) ==> GeomVertexWriter$_$add_data3f(GeomVertexWriter *param0, LVecBase3f const *param1)(GeomVertexWriter *, LVecBase3f const *)
extern void GeomVertexWriter$68$add_data3f(GeomVertexWriter *self, LVecBase3f const *data);

#if INDEX
#define GeomVertexWriter_C_add_data3f_v_pp GeomVertexWriter$68$add_data3f
#endif

// C++ _inCAAAA72es(float x, float y, float z) ==> GeomVertexWriter$_$add_data3f(GeomVertexWriter *param0, float param1, float param2, float param3)(GeomVertexWriter *, float, float, float)
extern void GeomVertexWriter$69$add_data3f(GeomVertexWriter *self, float x, float y, float z);

#if INDEX
#define GeomVertexWriter_C_add_data3f_v_pfff GeomVertexWriter$69$add_data3f
#endif

// C++ _inCAAAAdGEs(LVecBase4f const &data) ==> GeomVertexWriter$_$add_data4f(GeomVertexWriter *param0, LVecBase4f const *param1)(GeomVertexWriter *, LVecBase4f const *)
extern void GeomVertexWriter$70$add_data4f(GeomVertexWriter *self, LVecBase4f const *data);

#if INDEX
#define GeomVertexWriter_C_add_data4f_v_pp GeomVertexWriter$70$add_data4f
#endif

// C++ _inCAAAANOgw(float x, float y, float z, float w) ==> GeomVertexWriter$_$add_data4f(GeomVertexWriter *param0, float param1, float param2, float param3, float param4)(GeomVertexWriter *, float, float, float, float)
extern void GeomVertexWriter$71$add_data4f(GeomVertexWriter *self, float x, float y, float z, float w);

#if INDEX
#define GeomVertexWriter_C_add_data4f_v_pffff GeomVertexWriter$71$add_data4f
#endif

// C++ _inCAAAAwk0h(LMatrix3f const &mat) ==> GeomVertexWriter$_$add_matrix3f(GeomVertexWriter *param0, LMatrix3f const *param1)(GeomVertexWriter *, LMatrix3f const *)
extern void GeomVertexWriter$72$add_matrix3f(GeomVertexWriter *self, LMatrix3f const *mat);

#if INDEX
#define GeomVertexWriter_C_add_matrix3f_v_pp GeomVertexWriter$72$add_matrix3f
#endif

// C++ _inCAAAAjt1t(LMatrix4f const &mat) ==> GeomVertexWriter$_$add_matrix4f(GeomVertexWriter *param0, LMatrix4f const *param1)(GeomVertexWriter *, LMatrix4f const *)
extern void GeomVertexWriter$73$add_matrix4f(GeomVertexWriter *self, LMatrix4f const *mat);

#if INDEX
#define GeomVertexWriter_C_add_matrix4f_v_pp GeomVertexWriter$73$add_matrix4f
#endif

// C++ _inCAAAACaRM(double data) ==> GeomVertexWriter$_$add_data1d(GeomVertexWriter *param0, double param1)(GeomVertexWriter *, double)
extern void GeomVertexWriter$74$add_data1d(GeomVertexWriter *self, double data);

#if INDEX
#define GeomVertexWriter_C_add_data1d_v_pd GeomVertexWriter$74$add_data1d
#endif

// C++ _inCAAAA8cQ8(LVecBase2d const &data) ==> GeomVertexWriter$_$add_data2d(GeomVertexWriter *param0, LVecBase2d const *param1)(GeomVertexWriter *, LVecBase2d const *)
extern void GeomVertexWriter$75$add_data2d(GeomVertexWriter *self, LVecBase2d const *data);

#if INDEX
#define GeomVertexWriter_C_add_data2d_v_pp GeomVertexWriter$75$add_data2d
#endif

// C++ _inCAAAAwNcU(double x, double y) ==> GeomVertexWriter$_$add_data2d(GeomVertexWriter *param0, double param1, double param2)(GeomVertexWriter *, double, double)
extern void GeomVertexWriter$76$add_data2d(GeomVertexWriter *self, double x, double y);

#if INDEX
#define GeomVertexWriter_C_add_data2d_v_pdd GeomVertexWriter$76$add_data2d
#endif

// C++ _inCAAAAUsST(LVecBase3d const &data) ==> GeomVertexWriter$_$add_data3d(GeomVertexWriter *param0, LVecBase3d const *param1)(GeomVertexWriter *, LVecBase3d const *)
extern void GeomVertexWriter$77$add_data3d(GeomVertexWriter *self, LVecBase3d const *data);

#if INDEX
#define GeomVertexWriter_C_add_data3d_v_pp GeomVertexWriter$77$add_data3d
#endif

// C++ _inCAAAAODqM(double x, double y, double z) ==> GeomVertexWriter$_$add_data3d(GeomVertexWriter *param0, double param1, double param2, double param3)(GeomVertexWriter *, double, double, double)
extern void GeomVertexWriter$78$add_data3d(GeomVertexWriter *self, double x, double y, double z);

#if INDEX
#define GeomVertexWriter_C_add_data3d_v_pddd GeomVertexWriter$78$add_data3d
#endif

// C++ _inCAAAAt_Uq(LVecBase4d const &data) ==> GeomVertexWriter$_$add_data4d(GeomVertexWriter *param0, LVecBase4d const *param1)(GeomVertexWriter *, LVecBase4d const *)
extern void GeomVertexWriter$79$add_data4d(GeomVertexWriter *self, LVecBase4d const *data);

#if INDEX
#define GeomVertexWriter_C_add_data4d_v_pp GeomVertexWriter$79$add_data4d
#endif

// C++ _inCAAAAEFEP(double x, double y, double z, double w) ==> GeomVertexWriter$_$add_data4d(GeomVertexWriter *param0, double param1, double param2, double param3, double param4)(GeomVertexWriter *, double, double, double, double)
extern void GeomVertexWriter$80$add_data4d(GeomVertexWriter *self, double x, double y, double z, double w);

#if INDEX
#define GeomVertexWriter_C_add_data4d_v_pdddd GeomVertexWriter$80$add_data4d
#endif

// C++ _inCAAAA8Obh(LMatrix3d const &mat) ==> GeomVertexWriter$_$add_matrix3d(GeomVertexWriter *param0, LMatrix3d const *param1)(GeomVertexWriter *, LMatrix3d const *)
extern void GeomVertexWriter$81$add_matrix3d(GeomVertexWriter *self, LMatrix3d const *mat);

#if INDEX
#define GeomVertexWriter_C_add_matrix3d_v_pp GeomVertexWriter$81$add_matrix3d
#endif

// C++ _inCAAAAfAct(LMatrix4d const &mat) ==> GeomVertexWriter$_$add_matrix4d(GeomVertexWriter *param0, LMatrix4d const *param1)(GeomVertexWriter *, LMatrix4d const *)
extern void GeomVertexWriter$82$add_matrix4d(GeomVertexWriter *self, LMatrix4d const *mat);

#if INDEX
#define GeomVertexWriter_C_add_matrix4d_v_pp GeomVertexWriter$82$add_matrix4d
#endif

// C++ _inCAAAAQ_6Q(PN_stdfloat data) ==> GeomVertexWriter$_$add_data1(GeomVertexWriter *param0, PN_stdfloat param1)(GeomVertexWriter *, PN_stdfloat)
extern void GeomVertexWriter$83$add_data1(GeomVertexWriter *self, PN_stdfloat data);

#if INDEX
#define GeomVertexWriter_C_add_data1_v_pf GeomVertexWriter$83$add_data1
#endif

// C++ _inCAAAABkGU(LVecBase2 const &data) ==> GeomVertexWriter$_$add_data2(GeomVertexWriter *param0, LVecBase2 const *param1)(GeomVertexWriter *, LVecBase2 const *)
extern void GeomVertexWriter$84$add_data2(GeomVertexWriter *self, LVecBase2 const *data);

#if INDEX
#define GeomVertexWriter_C_add_data2_v_pp GeomVertexWriter$84$add_data2
#endif

// C++ _inCAAAA_CfS(PN_stdfloat x, PN_stdfloat y) ==> GeomVertexWriter$_$add_data2(GeomVertexWriter *param0, PN_stdfloat param1, PN_stdfloat param2)(GeomVertexWriter *, PN_stdfloat, PN_stdfloat)
extern void GeomVertexWriter$85$add_data2(GeomVertexWriter *self, PN_stdfloat x, PN_stdfloat y);

#if INDEX
#define GeomVertexWriter_C_add_data2_v_pff GeomVertexWriter$85$add_data2
#endif

// C++ _inCAAAACUu1(LVecBase3 const &data) ==> GeomVertexWriter$_$add_data3(GeomVertexWriter *param0, LVecBase3 const *param1)(GeomVertexWriter *, LVecBase3 const *)
extern void GeomVertexWriter$86$add_data3(GeomVertexWriter *self, LVecBase3 const *data);

#if INDEX
#define GeomVertexWriter_C_add_data3_v_pp GeomVertexWriter$86$add_data3
#endif

// C++ _inCAAAAKYVi(PN_stdfloat x, PN_stdfloat y, PN_stdfloat z) ==> GeomVertexWriter$_$add_data3(GeomVertexWriter *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3)(GeomVertexWriter *, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void GeomVertexWriter$87$add_data3(GeomVertexWriter *self, PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);

#if INDEX
#define GeomVertexWriter_C_add_data3_v_pfff GeomVertexWriter$87$add_data3
#endif

// C++ _inCAAAAMEXX(LVecBase4 const &data) ==> GeomVertexWriter$_$add_data4(GeomVertexWriter *param0, LVecBase4 const *param1)(GeomVertexWriter *, LVecBase4 const *)
extern void GeomVertexWriter$88$add_data4(GeomVertexWriter *self, LVecBase4 const *data);

#if INDEX
#define GeomVertexWriter_C_add_data4_v_pp GeomVertexWriter$88$add_data4
#endif

// C++ _inCAAAABlzV(PN_stdfloat x, PN_stdfloat y, PN_stdfloat z, PN_stdfloat w) ==> GeomVertexWriter$_$add_data4(GeomVertexWriter *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4)(GeomVertexWriter *, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void GeomVertexWriter$89$add_data4(GeomVertexWriter *self, PN_stdfloat x, PN_stdfloat y, PN_stdfloat z, PN_stdfloat w);

#if INDEX
#define GeomVertexWriter_C_add_data4_v_pffff GeomVertexWriter$89$add_data4
#endif

// C++ _inCAAAAipuR(LMatrix3 const &mat) ==> GeomVertexWriter$_$add_matrix3(GeomVertexWriter *param0, LMatrix3 const *param1)(GeomVertexWriter *, LMatrix3 const *)
extern void GeomVertexWriter$90$add_matrix3(GeomVertexWriter *self, LMatrix3 const *mat);

#if INDEX
#define GeomVertexWriter_C_add_matrix3_v_pp GeomVertexWriter$90$add_matrix3
#endif

// C++ _inCAAAADjOx(LMatrix4 const &mat) ==> GeomVertexWriter$_$add_matrix4(GeomVertexWriter *param0, LMatrix4 const *param1)(GeomVertexWriter *, LMatrix4 const *)
extern void GeomVertexWriter$91$add_matrix4(GeomVertexWriter *self, LMatrix4 const *mat);

#if INDEX
#define GeomVertexWriter_C_add_matrix4_v_pp GeomVertexWriter$91$add_matrix4
#endif

// C++ _inCAAAAMcyI(int data) ==> GeomVertexWriter$_$add_data1i(GeomVertexWriter *param0, int param1)(GeomVertexWriter *, int)
extern void GeomVertexWriter$92$add_data1i(GeomVertexWriter *self, int data);

#if INDEX
#define GeomVertexWriter_C_add_data1i_v_pi GeomVertexWriter$92$add_data1i
#endif

// C++ _inCAAAAQ5og(LVecBase2i const &data) ==> GeomVertexWriter$_$add_data2i(GeomVertexWriter *param0, LVecBase2i const *param1)(GeomVertexWriter *, LVecBase2i const *)
extern void GeomVertexWriter$93$add_data2i(GeomVertexWriter *self, LVecBase2i const *data);

#if INDEX
#define GeomVertexWriter_C_add_data2i_v_pp GeomVertexWriter$93$add_data2i
#endif

// C++ _inCAAAArwVK(int a, int b) ==> GeomVertexWriter$_$add_data2i(GeomVertexWriter *param0, int param1, int param2)(GeomVertexWriter *, int, int)
extern void GeomVertexWriter$94$add_data2i(GeomVertexWriter *self, int a, int b);

#if INDEX
#define GeomVertexWriter_C_add_data2i_v_pii GeomVertexWriter$94$add_data2i
#endif

// C++ _inCAAAA_pq3(LVecBase3i const &data) ==> GeomVertexWriter$_$add_data3i(GeomVertexWriter *param0, LVecBase3i const *param1)(GeomVertexWriter *, LVecBase3i const *)
extern void GeomVertexWriter$95$add_data3i(GeomVertexWriter *self, LVecBase3i const *data);

#if INDEX
#define GeomVertexWriter_C_add_data3i_v_pp GeomVertexWriter$95$add_data3i
#endif

// C++ _inCAAAAWt75(int a, int b, int c) ==> GeomVertexWriter$_$add_data3i(GeomVertexWriter *param0, int param1, int param2, int param3)(GeomVertexWriter *, int, int, int)
extern void GeomVertexWriter$96$add_data3i(GeomVertexWriter *self, int a, int b, int c);

#if INDEX
#define GeomVertexWriter_C_add_data3i_v_piii GeomVertexWriter$96$add_data3i
#endif

// C++ _inCAAAAnasO(LVecBase4i const &data) ==> GeomVertexWriter$_$add_data4i(GeomVertexWriter *param0, LVecBase4i const *param1)(GeomVertexWriter *, LVecBase4i const *)
extern void GeomVertexWriter$97$add_data4i(GeomVertexWriter *self, LVecBase4i const *data);

#if INDEX
#define GeomVertexWriter_C_add_data4i_v_pp GeomVertexWriter$97$add_data4i
#endif

// C++ _inCAAAAngjF(int a, int b, int c, int d) ==> GeomVertexWriter$_$add_data4i(GeomVertexWriter *param0, int param1, int param2, int param3, int param4)(GeomVertexWriter *, int, int, int, int)
extern void GeomVertexWriter$98$add_data4i(GeomVertexWriter *self, int a, int b, int c, int d);

#if INDEX
#define GeomVertexWriter_C_add_data4i_v_piiii GeomVertexWriter$98$add_data4i
#endif

// C++ _inCAAAAHNFB(std::ostream &out) ==> GeomVertexWriter$_$output(GeomVertexWriter const *param0, std::ostream *param1)(GeomVertexWriter const *, std::ostream *)
extern void GeomVertexWriter$99$output(GeomVertexWriter const *self, std$_ostream *out);

#if INDEX
#define GeomVertexWriter_C_output_v_pp GeomVertexWriter$99$output
#endif


// GraphicsEngine

// C++ _inCAAAAGcAr(Pipeline *pipeline) ==> GraphicsEngine$_$GraphicsEngine(Pipeline *param0)(Pipeline *)
extern GraphicsEngine * GraphicsEngine$1$GraphicsEngine(Pipeline *pipeline);

#if INDEX
#define GraphicsEngine_C_ctor_p_p GraphicsEngine$1$GraphicsEngine
#endif

// C++ _inCAAAA3Xr_() ==> GraphicsEngine$_$GraphicsEngine()()
extern GraphicsEngine * GraphicsEngine$2$GraphicsEngine(void);

#if INDEX
#define GraphicsEngine_C_ctor_p_v GraphicsEngine$2$GraphicsEngine
#endif

// C++ _inCAAAAkzZy(GraphicsThreadingModel const &threading_model) ==> GraphicsEngine$_$set_threading_model(GraphicsEngine *param0, GraphicsThreadingModel const *param1)(GraphicsEngine *, GraphicsThreadingModel const *)
extern void GraphicsEngine$3$set_threading_model(GraphicsEngine *self, GraphicsThreadingModel const *threading_model);

#if INDEX
#define GraphicsEngine_C_set_threading_model_v_pp GraphicsEngine$3$set_threading_model
#endif

// C++ _inCAAAA_NLg() ==> GraphicsEngine$_$get_threading_model(GraphicsEngine const *param0)(GraphicsEngine const *)
extern GraphicsThreadingModel * GraphicsEngine$4$get_threading_model(GraphicsEngine const *self);

#if INDEX
#define GraphicsEngine_C_get_threading_model_p_p GraphicsEngine$4$get_threading_model
#endif

// C++ _inCAAAAbqNp() ==> GraphicsEngine$_$get_render_lock(GraphicsEngine const *param0)(GraphicsEngine const *)
extern ReMutex const * GraphicsEngine$5$get_render_lock(GraphicsEngine const *self);

#if INDEX
#define GraphicsEngine_C_get_render_lock_p_p GraphicsEngine$5$get_render_lock
#endif

// C++ _inCAAAApnHT(bool auto_flip) ==> GraphicsEngine$_$set_auto_flip(GraphicsEngine *param0, bool param1)(GraphicsEngine *, bool)
extern void GraphicsEngine$6$set_auto_flip(GraphicsEngine *self, bool auto_flip);

#if INDEX
#define GraphicsEngine_C_set_auto_flip_v_pB GraphicsEngine$6$set_auto_flip
#endif

// C++ _inCAAAAdDTb() ==> GraphicsEngine$_$get_auto_flip(GraphicsEngine const *param0)(GraphicsEngine const *)
extern bool GraphicsEngine$7$get_auto_flip(GraphicsEngine const *self);

#if INDEX
#define GraphicsEngine_C_get_auto_flip_B_p GraphicsEngine$7$get_auto_flip
#endif

// C++ _inCAAAA5bdZ(bool value) ==> GraphicsEngine$_$set_portal_cull(GraphicsEngine *param0, bool param1)(GraphicsEngine *, bool)
extern void GraphicsEngine$8$set_portal_cull(GraphicsEngine *self, bool value);

#if INDEX
#define GraphicsEngine_C_set_portal_cull_v_pB GraphicsEngine$8$set_portal_cull
#endif

// C++ _inCAAAAsi85() ==> GraphicsEngine$_$get_portal_cull(GraphicsEngine const *param0)(GraphicsEngine const *)
extern bool GraphicsEngine$9$get_portal_cull(GraphicsEngine const *self);

#if INDEX
#define GraphicsEngine_C_get_portal_cull_B_p GraphicsEngine$9$get_portal_cull
#endif

// C++ _inCAAAAm7fs(Loader *loader) ==> GraphicsEngine$_$set_default_loader(GraphicsEngine *param0, Loader *param1)(GraphicsEngine *, Loader *)
extern void GraphicsEngine$10$set_default_loader(GraphicsEngine *self, Loader *loader);

#if INDEX
#define GraphicsEngine_C_set_default_loader_v_pp GraphicsEngine$10$set_default_loader
#endif

// C++ _inCAAAAL2Ib() ==> GraphicsEngine$_$get_default_loader(GraphicsEngine const *param0)(GraphicsEngine const *)
extern Loader * GraphicsEngine$11$get_default_loader(GraphicsEngine const *self);

#if INDEX
#define GraphicsEngine_C_get_default_loader_p_p GraphicsEngine$11$get_default_loader
#endif

// C++ _inCAAAA6OWU(GraphicsPipe *pipe, std::string const &name, int sort, FrameBufferProperties const &fb_prop, WindowProperties const &win_prop, int flags, GraphicsStateGuardian *gsg, GraphicsOutput *host) ==> GraphicsEngine$_$make_output(GraphicsEngine *param0, GraphicsPipe *param1, char const *param2, int param3, FrameBufferProperties const *param4, WindowProperties const *param5, int param6, GraphicsStateGuardian *param7, GraphicsOutput *param8)(GraphicsEngine *, GraphicsPipe *, char const *, int, FrameBufferProperties const *, WindowProperties const *, int, GraphicsStateGuardian *, GraphicsOutput *)
extern GraphicsOutput * GraphicsEngine$12$make_output(GraphicsEngine *self, GraphicsPipe *pipe, char const *name, int sort, FrameBufferProperties const *fb_prop, WindowProperties const *win_prop, int flags, GraphicsStateGuardian *gsg, GraphicsOutput *host);

#if INDEX
#define GraphicsEngine_C_make_output_p_ppsippipp GraphicsEngine$12$make_output
#endif

// C++ _inCAAAArUQm(GraphicsPipe *pipe, std::string const &name, int sort, FrameBufferProperties const &fb_prop, WindowProperties const &win_prop, int flags, GraphicsStateGuardian *gsg) ==> GraphicsEngine$_$make_output(GraphicsEngine *param0, GraphicsPipe *param1, char const *param2, int param3, FrameBufferProperties const *param4, WindowProperties const *param5, int param6, GraphicsStateGuardian *param7)(GraphicsEngine *, GraphicsPipe *, char const *, int, FrameBufferProperties const *, WindowProperties const *, int, GraphicsStateGuardian *)
extern GraphicsOutput * GraphicsEngine$13$make_output(GraphicsEngine *self, GraphicsPipe *pipe, char const *name, int sort, FrameBufferProperties const *fb_prop, WindowProperties const *win_prop, int flags, GraphicsStateGuardian *gsg);

#if INDEX
#define GraphicsEngine_C_make_output_p_ppsippip GraphicsEngine$13$make_output
#endif

// C++ _inCAAAAwoVp(GraphicsPipe *pipe, std::string const &name, int sort, FrameBufferProperties const &fb_prop, WindowProperties const &win_prop, int flags) ==> GraphicsEngine$_$make_output(GraphicsEngine *param0, GraphicsPipe *param1, char const *param2, int param3, FrameBufferProperties const *param4, WindowProperties const *param5, int param6)(GraphicsEngine *, GraphicsPipe *, char const *, int, FrameBufferProperties const *, WindowProperties const *, int)
extern GraphicsOutput * GraphicsEngine$14$make_output(GraphicsEngine *self, GraphicsPipe *pipe, char const *name, int sort, FrameBufferProperties const *fb_prop, WindowProperties const *win_prop, int flags);

#if INDEX
#define GraphicsEngine_C_make_output_p_ppsippi GraphicsEngine$14$make_output
#endif

// C++ _inCAAAAn59A(GraphicsOutput *host, std::string const &name, int sort, int x_size, int y_size) ==> GraphicsEngine$_$make_buffer(GraphicsEngine *param0, GraphicsOutput *param1, char const *param2, int param3, int param4, int param5)(GraphicsEngine *, GraphicsOutput *, char const *, int, int, int)
extern GraphicsOutput * GraphicsEngine$15$make_buffer(GraphicsEngine *self, GraphicsOutput *host, char const *name, int sort, int x_size, int y_size);

#if INDEX
#define GraphicsEngine_C_make_buffer_p_ppsiii GraphicsEngine$15$make_buffer
#endif

// C++ _inCAAAAhjI_(GraphicsStateGuardian *gsg, std::string const &name, int sort, int x_size, int y_size) ==> GraphicsEngine$_$make_buffer(GraphicsEngine *param0, GraphicsStateGuardian *param1, char const *param2, int param3, int param4, int param5)(GraphicsEngine *, GraphicsStateGuardian *, char const *, int, int, int)
extern GraphicsOutput * GraphicsEngine$16$make_buffer(GraphicsEngine *self, GraphicsStateGuardian *gsg, char const *name, int sort, int x_size, int y_size);
// COLLISION : GraphicsEngine_C_make_buffer_p_ppsiii GraphicsEngine$16$make_buffer

// C++ _inCAAAAaoR1(GraphicsOutput *host, std::string const &name, int sort, int x_size, int y_size) ==> GraphicsEngine$_$make_parasite(GraphicsEngine *param0, GraphicsOutput *param1, char const *param2, int param3, int param4, int param5)(GraphicsEngine *, GraphicsOutput *, char const *, int, int, int)
extern GraphicsOutput * GraphicsEngine$17$make_parasite(GraphicsEngine *self, GraphicsOutput *host, char const *name, int sort, int x_size, int y_size);

#if INDEX
#define GraphicsEngine_C_make_parasite_p_ppsiii GraphicsEngine$17$make_parasite
#endif

// C++ _inCAAAA_ZrR(GraphicsOutput *window, int sort) ==> GraphicsEngine$_$add_window(GraphicsEngine *param0, GraphicsOutput *param1, int param2)(GraphicsEngine *, GraphicsOutput *, int)
extern bool GraphicsEngine$18$add_window(GraphicsEngine *self, GraphicsOutput *window, int sort);

#if INDEX
#define GraphicsEngine_C_add_window_B_ppi GraphicsEngine$18$add_window
#endif

// C++ _inCAAAAQEjj(GraphicsOutput *window) ==> GraphicsEngine$_$remove_window(GraphicsEngine *param0, GraphicsOutput *param1)(GraphicsEngine *, GraphicsOutput *)
extern bool GraphicsEngine$19$remove_window(GraphicsEngine *self, GraphicsOutput *window);

#if INDEX
#define GraphicsEngine_C_remove_window_B_pp GraphicsEngine$19$remove_window
#endif

// C++ _inCAAAAbizP() ==> GraphicsEngine$_$remove_all_windows(GraphicsEngine *param0)(GraphicsEngine *)
extern void GraphicsEngine$20$remove_all_windows(GraphicsEngine *self);

#if INDEX
#define GraphicsEngine_C_remove_all_windows_v_p GraphicsEngine$20$remove_all_windows
#endif

// C++ _inCAAAA7tzD(bool swapchain) ==> GraphicsEngine$_$reset_all_windows(GraphicsEngine *param0, bool param1)(GraphicsEngine *, bool)
extern void GraphicsEngine$21$reset_all_windows(GraphicsEngine *self, bool swapchain);

#if INDEX
#define GraphicsEngine_C_reset_all_windows_v_pB GraphicsEngine$21$reset_all_windows
#endif

// C++ _inCAAAAqWta() ==> GraphicsEngine$_$is_empty(GraphicsEngine const *param0)(GraphicsEngine const *)
extern bool GraphicsEngine$22$is_empty(GraphicsEngine const *self);

#if INDEX
#define GraphicsEngine_C_is_empty_B_p GraphicsEngine$22$is_empty
#endif

// C++ _inCAAAAxJBp() ==> GraphicsEngine$_$get_num_windows(GraphicsEngine const *param0)(GraphicsEngine const *)
extern int GraphicsEngine$23$get_num_windows(GraphicsEngine const *self);

#if INDEX
#define GraphicsEngine_C_get_num_windows_i_p GraphicsEngine$23$get_num_windows
#endif

// C++ _inCAAAALl7l(int n) ==> GraphicsEngine$_$get_window(GraphicsEngine const *param0, int param1)(GraphicsEngine const *, int)
extern GraphicsOutput * GraphicsEngine$24$get_window(GraphicsEngine const *self, int n);

#if INDEX
#define GraphicsEngine_C_get_window_p_pi GraphicsEngine$24$get_window
#endif

// C++ _inCAAAA4GAK() ==> GraphicsEngine$_$render_frame(GraphicsEngine *param0)(GraphicsEngine *)
extern void GraphicsEngine$25$render_frame(GraphicsEngine *self);

#if INDEX
#define GraphicsEngine_C_render_frame_v_p GraphicsEngine$25$render_frame
#endif

// C++ _inCAAAAfeD_() ==> GraphicsEngine$_$open_windows(GraphicsEngine *param0)(GraphicsEngine *)
extern void GraphicsEngine$26$open_windows(GraphicsEngine *self);

#if INDEX
#define GraphicsEngine_C_open_windows_v_p GraphicsEngine$26$open_windows
#endif

// C++ _inCAAAANMb_() ==> GraphicsEngine$_$sync_frame(GraphicsEngine *param0)(GraphicsEngine *)
extern void GraphicsEngine$27$sync_frame(GraphicsEngine *self);

#if INDEX
#define GraphicsEngine_C_sync_frame_v_p GraphicsEngine$27$sync_frame
#endif

// C++ _inCAAAAmoKK() ==> GraphicsEngine$_$ready_flip(GraphicsEngine *param0)(GraphicsEngine *)
extern void GraphicsEngine$28$ready_flip(GraphicsEngine *self);

#if INDEX
#define GraphicsEngine_C_ready_flip_v_p GraphicsEngine$28$ready_flip
#endif

// C++ _inCAAAAbWRO() ==> GraphicsEngine$_$flip_frame(GraphicsEngine *param0)(GraphicsEngine *)
extern void GraphicsEngine$29$flip_frame(GraphicsEngine *self);

#if INDEX
#define GraphicsEngine_C_flip_frame_v_p GraphicsEngine$29$flip_frame
#endif

// C++ _inCAAAA8ADE(Texture *tex, GraphicsStateGuardian *gsg) ==> GraphicsEngine$_$extract_texture_data(GraphicsEngine *param0, Texture *param1, GraphicsStateGuardian *param2)(GraphicsEngine *, Texture *, GraphicsStateGuardian *)
extern bool GraphicsEngine$30$extract_texture_data(GraphicsEngine *self, Texture *tex, GraphicsStateGuardian *gsg);

#if INDEX
#define GraphicsEngine_C_extract_texture_data_B_ppp GraphicsEngine$30$extract_texture_data
#endif

// C++ _inCAAAAFtSe(LVecBase3i const &work_groups, ShaderAttrib const *sattr, GraphicsStateGuardian *gsg) ==> GraphicsEngine$_$dispatch_compute(GraphicsEngine *param0, LVecBase3i const *param1, ShaderAttrib const *param2, GraphicsStateGuardian *param3)(GraphicsEngine *, LVecBase3i const *, ShaderAttrib const *, GraphicsStateGuardian *)
extern void GraphicsEngine$31$dispatch_compute(GraphicsEngine *self, LVecBase3i const *work_groups, ShaderAttrib const *sattr, GraphicsStateGuardian *gsg);

#if INDEX
#define GraphicsEngine_C_dispatch_compute_v_pppp GraphicsEngine$31$dispatch_compute
#endif

// C++ _inCAAAAB52G() ==> GraphicsEngine$_$get_global_ptr()()
extern GraphicsEngine * GraphicsEngine$32$get_global_ptr(void);

#if INDEX
#define GraphicsEngine_C_get_global_ptr_p_v GraphicsEngine$32$get_global_ptr
#endif

// C++ _inCAAAA_UQG(Texture *tex) ==> GraphicsEngine$_$texture_uploaded(GraphicsEngine *param0, Texture *param1)(GraphicsEngine *, Texture *)
extern void GraphicsEngine$33$texture_uploaded(GraphicsEngine *self, Texture *tex);

#if INDEX
#define GraphicsEngine_C_texture_uploaded_v_pp GraphicsEngine$33$texture_uploaded
#endif

// C++ _inCAAAAP18_(DisplayRegion *region, GraphicsStateGuardian *gsg) ==> GraphicsEngine$_$do_get_screenshot(GraphicsEngine *param0, DisplayRegion *param1, GraphicsStateGuardian *param2)(GraphicsEngine *, DisplayRegion *, GraphicsStateGuardian *)
extern char ** GraphicsEngine$34$do_get_screenshot(GraphicsEngine *self, DisplayRegion *region, GraphicsStateGuardian *gsg);

#if INDEX
#define GraphicsEngine_C_do_get_screenshot_p_ppp GraphicsEngine$34$do_get_screenshot
#endif

// C++ _inCAAAAT0cY(CullHandler *cull_handler, SceneSetup *scene_setup, GraphicsStateGuardian *gsg, Thread *current_thread) ==> GraphicsEngine$_$do_cull(CullHandler *param0, SceneSetup *param1, GraphicsStateGuardian *param2, Thread *param3)(CullHandler *, SceneSetup *, GraphicsStateGuardian *, Thread *)
extern void GraphicsEngine$35$do_cull(CullHandler *cull_handler, SceneSetup *scene_setup, GraphicsStateGuardian *gsg, Thread *current_thread);

#if INDEX
#define GraphicsEngine_C_do_cull_v_pppp GraphicsEngine$35$do_cull
#endif


// GraphicsOutput

// C++ _inCAAAA_FL1() ==> GraphicsOutput$_$upcast_to_GraphicsOutputBase(GraphicsOutput *param0)(GraphicsOutput *)
extern GraphicsOutputBase * GraphicsOutput$1$upcast_to_GraphicsOutputBase(GraphicsOutput *self);

#if INDEX
#define GraphicsOutput_C_upcast_to_GraphicsOutputBase_p_p GraphicsOutput$1$upcast_to_GraphicsOutputBase
#endif

// C++ _inCAAAApLTb() ==> GraphicsOutput$_$upcast_to_DrawableRegion(GraphicsOutput *param0)(GraphicsOutput *)
extern DrawableRegion * GraphicsOutput$2$upcast_to_DrawableRegion(GraphicsOutput *self);

#if INDEX
#define GraphicsOutput_C_upcast_to_DrawableRegion_p_p GraphicsOutput$2$upcast_to_DrawableRegion
#endif

// C++ _inCAAAA6R3_() ==> GraphicsOutput$_$get_gsg(GraphicsOutput const *param0)(GraphicsOutput const *)
extern GraphicsStateGuardian * GraphicsOutput$3$get_gsg(GraphicsOutput const *self);

#if INDEX
#define GraphicsOutput_C_get_gsg_p_p GraphicsOutput$3$get_gsg
#endif

// C++ _inCAAAARmhe() ==> GraphicsOutput$_$get_pipe(GraphicsOutput const *param0)(GraphicsOutput const *)
extern GraphicsPipe * GraphicsOutput$4$get_pipe(GraphicsOutput const *self);

#if INDEX
#define GraphicsOutput_C_get_pipe_p_p GraphicsOutput$4$get_pipe
#endif

// C++ _inCAAAAs2Rt() ==> GraphicsOutput$_$get_engine(GraphicsOutput const *param0)(GraphicsOutput const *)
extern GraphicsEngine * GraphicsOutput$5$get_engine(GraphicsOutput const *self);

#if INDEX
#define GraphicsOutput_C_get_engine_p_p GraphicsOutput$5$get_engine
#endif

// C++ _inCAAAAhafm() ==> GraphicsOutput$_$get_name(GraphicsOutput const *param0)(GraphicsOutput const *)
extern char const * GraphicsOutput$6$get_name(GraphicsOutput const *self);

#if INDEX
#define GraphicsOutput_C_get_name_s_p GraphicsOutput$6$get_name
#endif

// C++ _inCAAAAZzOT() ==> GraphicsOutput$_$count_textures(GraphicsOutput const *param0)(GraphicsOutput const *)
extern int GraphicsOutput$7$count_textures(GraphicsOutput const *self);

#if INDEX
#define GraphicsOutput_C_count_textures_i_p GraphicsOutput$7$count_textures
#endif

// C++ _inCAAAAL5u4() ==> GraphicsOutput$_$has_texture(GraphicsOutput const *param0)(GraphicsOutput const *)
extern bool GraphicsOutput$8$has_texture(GraphicsOutput const *self);

#if INDEX
#define GraphicsOutput_C_has_texture_B_p GraphicsOutput$8$has_texture
#endif

// C++ _inCAAAAOT2F(int i) ==> GraphicsOutput$_$get_texture(GraphicsOutput const *param0, int param1)(GraphicsOutput const *, int)
extern Texture * GraphicsOutput$9$get_texture(GraphicsOutput const *self, int i);

#if INDEX
#define GraphicsOutput_C_get_texture_p_pi GraphicsOutput$9$get_texture
#endif

// C++ _inCAAAAjbtr() ==> GraphicsOutput$_$get_texture(GraphicsOutput const *param0)(GraphicsOutput const *)
extern Texture * GraphicsOutput$10$get_texture(GraphicsOutput const *self);

#if INDEX
#define GraphicsOutput_C_get_texture_p_p GraphicsOutput$10$get_texture
#endif

// C++ _inCAAAAr9lk(int i) ==> GraphicsOutput$_$get_texture_plane(GraphicsOutput const *param0, int param1)(GraphicsOutput const *, int)
extern DrawableRegion$_RenderTexturePlane GraphicsOutput$11$get_texture_plane(GraphicsOutput const *self, int i);

#if INDEX
#define GraphicsOutput_C_get_texture_plane_p_pi GraphicsOutput$11$get_texture_plane
#endif

// C++ _inCAAAAtRfb() ==> GraphicsOutput$_$get_texture_plane(GraphicsOutput const *param0)(GraphicsOutput const *)
extern DrawableRegion$_RenderTexturePlane GraphicsOutput$12$get_texture_plane(GraphicsOutput const *self);

#if INDEX
#define GraphicsOutput_C_get_texture_plane_p_p GraphicsOutput$12$get_texture_plane
#endif

// C++ _inCAAAAtK3h(int i) ==> GraphicsOutput$_$get_rtm_mode(GraphicsOutput const *param0, int param1)(GraphicsOutput const *, int)
extern GraphicsOutput$_RenderTextureMode GraphicsOutput$13$get_rtm_mode(GraphicsOutput const *self, int i);

#if INDEX
#define GraphicsOutput_C_get_rtm_mode_p_pi GraphicsOutput$13$get_rtm_mode
#endif

// C++ _inCAAAAeXTd() ==> GraphicsOutput$_$get_rtm_mode(GraphicsOutput const *param0)(GraphicsOutput const *)
extern GraphicsOutput$_RenderTextureMode GraphicsOutput$14$get_rtm_mode(GraphicsOutput const *self);

#if INDEX
#define GraphicsOutput_C_get_rtm_mode_p_p GraphicsOutput$14$get_rtm_mode
#endif

// C++ _inCAAAAy_19() ==> GraphicsOutput$_$clear_render_textures(GraphicsOutput *param0)(GraphicsOutput *)
extern void GraphicsOutput$15$clear_render_textures(GraphicsOutput *self);

#if INDEX
#define GraphicsOutput_C_clear_render_textures_v_p GraphicsOutput$15$clear_render_textures
#endif

// C++ _inCAAAAEdHR(Texture *tex, GraphicsOutput::RenderTextureMode mode, DrawableRegion::RenderTexturePlane bitplane) ==> GraphicsOutput$_$add_render_texture(GraphicsOutput *param0, Texture *param1, GraphicsOutput::RenderTextureMode param2, DrawableRegion::RenderTexturePlane param3)(GraphicsOutput *, Texture *, GraphicsOutput::RenderTextureMode, DrawableRegion::RenderTexturePlane)
extern void GraphicsOutput$16$add_render_texture(GraphicsOutput *self, Texture *tex, GraphicsOutput$_RenderTextureMode mode, DrawableRegion$_RenderTexturePlane bitplane);

#if INDEX
#define GraphicsOutput_C_add_render_texture_v_pppp GraphicsOutput$16$add_render_texture
#endif

// C++ _inCAAAAyxSR(Texture *tex, GraphicsOutput::RenderTextureMode mode) ==> GraphicsOutput$_$add_render_texture(GraphicsOutput *param0, Texture *param1, GraphicsOutput::RenderTextureMode param2)(GraphicsOutput *, Texture *, GraphicsOutput::RenderTextureMode)
extern void GraphicsOutput$17$add_render_texture(GraphicsOutput *self, Texture *tex, GraphicsOutput$_RenderTextureMode mode);

#if INDEX
#define GraphicsOutput_C_add_render_texture_v_ppp GraphicsOutput$17$add_render_texture
#endif

// C++ _inCAAAAcdjE(Texture *tex, bool allow_bind, bool to_ram) ==> GraphicsOutput$_$setup_render_texture(GraphicsOutput *param0, Texture *param1, bool param2, bool param3)(GraphicsOutput *, Texture *, bool, bool)
extern void GraphicsOutput$18$setup_render_texture(GraphicsOutput *self, Texture *tex, bool allow_bind, bool to_ram);

#if INDEX
#define GraphicsOutput_C_setup_render_texture_v_ppBB GraphicsOutput$18$setup_render_texture
#endif

// C++ _inCAAAASOyT() ==> GraphicsOutput$_$get_size(GraphicsOutput const *param0)(GraphicsOutput const *)
extern LVecBase2i const * GraphicsOutput$19$get_size(GraphicsOutput const *self);

#if INDEX
#define GraphicsOutput_C_get_size_p_p GraphicsOutput$19$get_size
#endif

// C++ _inCAAAApVEG() ==> GraphicsOutput$_$get_x_size(GraphicsOutput const *param0)(GraphicsOutput const *)
extern int GraphicsOutput$20$get_x_size(GraphicsOutput const *self);

#if INDEX
#define GraphicsOutput_C_get_x_size_i_p GraphicsOutput$20$get_x_size
#endif

// C++ _inCAAAA5zZG() ==> GraphicsOutput$_$get_y_size(GraphicsOutput const *param0)(GraphicsOutput const *)
extern int GraphicsOutput$21$get_y_size(GraphicsOutput const *self);

#if INDEX
#define GraphicsOutput_C_get_y_size_i_p GraphicsOutput$21$get_y_size
#endif

// C++ _inCAAAA_R39() ==> GraphicsOutput$_$get_fb_size(GraphicsOutput const *param0)(GraphicsOutput const *)
extern LVecBase2i * GraphicsOutput$22$get_fb_size(GraphicsOutput const *self);

#if INDEX
#define GraphicsOutput_C_get_fb_size_p_p GraphicsOutput$22$get_fb_size
#endif

// C++ _inCAAAArFNb() ==> GraphicsOutput$_$get_fb_x_size(GraphicsOutput const *param0)(GraphicsOutput const *)
extern int GraphicsOutput$23$get_fb_x_size(GraphicsOutput const *self);

#if INDEX
#define GraphicsOutput_C_get_fb_x_size_i_p GraphicsOutput$23$get_fb_x_size
#endif

// C++ _inCAAAAXHNp() ==> GraphicsOutput$_$get_fb_y_size(GraphicsOutput const *param0)(GraphicsOutput const *)
extern int GraphicsOutput$24$get_fb_y_size(GraphicsOutput const *self);

#if INDEX
#define GraphicsOutput_C_get_fb_y_size_i_p GraphicsOutput$24$get_fb_y_size
#endif

// C++ _inCAAAApnIO() ==> GraphicsOutput$_$get_sbs_left_size(GraphicsOutput const *param0)(GraphicsOutput const *)
extern LVecBase2i * GraphicsOutput$25$get_sbs_left_size(GraphicsOutput const *self);

#if INDEX
#define GraphicsOutput_C_get_sbs_left_size_p_p GraphicsOutput$25$get_sbs_left_size
#endif

// C++ _inCAAAAfzZk() ==> GraphicsOutput$_$get_sbs_left_x_size(GraphicsOutput const *param0)(GraphicsOutput const *)
extern int GraphicsOutput$26$get_sbs_left_x_size(GraphicsOutput const *self);

#if INDEX
#define GraphicsOutput_C_get_sbs_left_x_size_i_p GraphicsOutput$26$get_sbs_left_x_size
#endif

// C++ _inCAAAAtXck() ==> GraphicsOutput$_$get_sbs_left_y_size(GraphicsOutput const *param0)(GraphicsOutput const *)
extern int GraphicsOutput$27$get_sbs_left_y_size(GraphicsOutput const *self);

#if INDEX
#define GraphicsOutput_C_get_sbs_left_y_size_i_p GraphicsOutput$27$get_sbs_left_y_size
#endif

// C++ _inCAAAAf_ck() ==> GraphicsOutput$_$get_sbs_right_size(GraphicsOutput const *param0)(GraphicsOutput const *)
extern LVecBase2i * GraphicsOutput$28$get_sbs_right_size(GraphicsOutput const *self);

#if INDEX
#define GraphicsOutput_C_get_sbs_right_size_p_p GraphicsOutput$28$get_sbs_right_size
#endif

// C++ _inCAAAApDlt() ==> GraphicsOutput$_$get_sbs_right_x_size(GraphicsOutput const *param0)(GraphicsOutput const *)
extern int GraphicsOutput$29$get_sbs_right_x_size(GraphicsOutput const *self);

#if INDEX
#define GraphicsOutput_C_get_sbs_right_x_size_i_p GraphicsOutput$29$get_sbs_right_x_size
#endif

// C++ _inCAAAAp40u() ==> GraphicsOutput$_$get_sbs_right_y_size(GraphicsOutput const *param0)(GraphicsOutput const *)
extern int GraphicsOutput$30$get_sbs_right_y_size(GraphicsOutput const *self);

#if INDEX
#define GraphicsOutput_C_get_sbs_right_y_size_i_p GraphicsOutput$30$get_sbs_right_y_size
#endif

// C++ _inCAAAAqgyg() ==> GraphicsOutput$_$has_size(GraphicsOutput const *param0)(GraphicsOutput const *)
extern bool GraphicsOutput$31$has_size(GraphicsOutput const *self);

#if INDEX
#define GraphicsOutput_C_has_size_B_p GraphicsOutput$31$has_size
#endif

// C++ _inCAAAAewNA() ==> GraphicsOutput$_$is_valid(GraphicsOutput const *param0)(GraphicsOutput const *)
extern bool GraphicsOutput$32$is_valid(GraphicsOutput const *self);

#if INDEX
#define GraphicsOutput_C_is_valid_B_p GraphicsOutput$32$is_valid
#endif

// C++ _inCAAAAf9W_() ==> GraphicsOutput$_$is_nonzero_size(GraphicsOutput const *param0)(GraphicsOutput const *)
extern bool GraphicsOutput$33$is_nonzero_size(GraphicsOutput const *self);

#if INDEX
#define GraphicsOutput_C_is_nonzero_size_B_p GraphicsOutput$33$is_nonzero_size
#endif

// C++ _inCAAAAKShL(bool active) ==> GraphicsOutput$_$set_active(GraphicsOutput *param0, bool param1)(GraphicsOutput *, bool)
extern void GraphicsOutput$34$set_active(GraphicsOutput *self, bool active);

#if INDEX
#define GraphicsOutput_C_set_active_v_pB GraphicsOutput$34$set_active
#endif

// C++ _inCAAAACPRe() ==> GraphicsOutput$_$is_active(GraphicsOutput const *param0)(GraphicsOutput const *)
extern bool GraphicsOutput$35$is_active(GraphicsOutput const *self);

#if INDEX
#define GraphicsOutput_C_is_active_B_p GraphicsOutput$35$is_active
#endif

// C++ _inCAAAAHoke(bool one_shot) ==> GraphicsOutput$_$set_one_shot(GraphicsOutput *param0, bool param1)(GraphicsOutput *, bool)
extern void GraphicsOutput$36$set_one_shot(GraphicsOutput *self, bool one_shot);

#if INDEX
#define GraphicsOutput_C_set_one_shot_v_pB GraphicsOutput$36$set_one_shot
#endif

// C++ _inCAAAA2vFO() ==> GraphicsOutput$_$get_one_shot(GraphicsOutput const *param0)(GraphicsOutput const *)
extern bool GraphicsOutput$37$get_one_shot(GraphicsOutput const *self);

#if INDEX
#define GraphicsOutput_C_get_one_shot_B_p GraphicsOutput$37$get_one_shot
#endif

// C++ _inCAAAANoPm(bool inverted) ==> GraphicsOutput$_$set_inverted(GraphicsOutput *param0, bool param1)(GraphicsOutput *, bool)
extern void GraphicsOutput$38$set_inverted(GraphicsOutput *self, bool inverted);

#if INDEX
#define GraphicsOutput_C_set_inverted_v_pB GraphicsOutput$38$set_inverted
#endif

// C++ _inCAAAAx4vV() ==> GraphicsOutput$_$get_inverted(GraphicsOutput const *param0)(GraphicsOutput const *)
extern bool GraphicsOutput$39$get_inverted(GraphicsOutput const *self);

#if INDEX
#define GraphicsOutput_C_get_inverted_B_p GraphicsOutput$39$get_inverted
#endif

// C++ _inCAAAAnTba(bool swap_eyes) ==> GraphicsOutput$_$set_swap_eyes(GraphicsOutput *param0, bool param1)(GraphicsOutput *, bool)
extern void GraphicsOutput$40$set_swap_eyes(GraphicsOutput *self, bool swap_eyes);

#if INDEX
#define GraphicsOutput_C_set_swap_eyes_v_pB GraphicsOutput$40$set_swap_eyes
#endif

// C++ _inCAAAAjPni() ==> GraphicsOutput$_$get_swap_eyes(GraphicsOutput const *param0)(GraphicsOutput const *)
extern bool GraphicsOutput$41$get_swap_eyes(GraphicsOutput const *self);

#if INDEX
#define GraphicsOutput_C_get_swap_eyes_B_p GraphicsOutput$41$get_swap_eyes
#endif

// C++ _inCAAAAPGYQ(bool red_blue_stereo, unsigned int left_eye_color_mask, unsigned int right_eye_color_mask) ==> GraphicsOutput$_$set_red_blue_stereo(GraphicsOutput *param0, bool param1, unsigned int param2, unsigned int param3)(GraphicsOutput *, bool, unsigned int, unsigned int)
extern void GraphicsOutput$42$set_red_blue_stereo(GraphicsOutput *self, bool red_blue_stereo, unsigned int left_eye_color_mask, unsigned int right_eye_color_mask);

#if INDEX
#define GraphicsOutput_C_set_red_blue_stereo_v_pBII GraphicsOutput$42$set_red_blue_stereo
#endif

// C++ _inCAAAAgl0N() ==> GraphicsOutput$_$get_red_blue_stereo(GraphicsOutput const *param0)(GraphicsOutput const *)
extern bool GraphicsOutput$43$get_red_blue_stereo(GraphicsOutput const *self);

#if INDEX
#define GraphicsOutput_C_get_red_blue_stereo_B_p GraphicsOutput$43$get_red_blue_stereo
#endif

// C++ _inCAAAAhaUJ() ==> GraphicsOutput$_$get_left_eye_color_mask(GraphicsOutput const *param0)(GraphicsOutput const *)
extern unsigned int GraphicsOutput$44$get_left_eye_color_mask(GraphicsOutput const *self);

#if INDEX
#define GraphicsOutput_C_get_left_eye_color_mask_I_p GraphicsOutput$44$get_left_eye_color_mask
#endif

// C++ _inCAAAAoNZy() ==> GraphicsOutput$_$get_right_eye_color_mask(GraphicsOutput const *param0)(GraphicsOutput const *)
extern unsigned int GraphicsOutput$45$get_right_eye_color_mask(GraphicsOutput const *self);

#if INDEX
#define GraphicsOutput_C_get_right_eye_color_mask_I_p GraphicsOutput$45$get_right_eye_color_mask
#endif

// C++ _inCAAAAXkdS(bool side_by_side_stereo) ==> GraphicsOutput$_$set_side_by_side_stereo(GraphicsOutput *param0, bool param1)(GraphicsOutput *, bool)
extern void GraphicsOutput$46$set_side_by_side_stereo(GraphicsOutput *self, bool side_by_side_stereo);

#if INDEX
#define GraphicsOutput_C_set_side_by_side_stereo_v_pB GraphicsOutput$46$set_side_by_side_stereo
#endif

// C++ _inCAAAARihV(bool side_by_side_stereo, LVecBase4 const &sbs_left_dimensions, LVecBase4 const &sbs_right_dimensions) ==> GraphicsOutput$_$set_side_by_side_stereo(GraphicsOutput *param0, bool param1, LVecBase4 const *param2, LVecBase4 const *param3)(GraphicsOutput *, bool, LVecBase4 const *, LVecBase4 const *)
extern void GraphicsOutput$47$set_side_by_side_stereo(GraphicsOutput *self, bool side_by_side_stereo, LVecBase4 const *sbs_left_dimensions, LVecBase4 const *sbs_right_dimensions);

#if INDEX
#define GraphicsOutput_C_set_side_by_side_stereo_v_pBpp GraphicsOutput$47$set_side_by_side_stereo
#endif

// C++ _inCAAAA4I_i() ==> GraphicsOutput$_$get_side_by_side_stereo(GraphicsOutput const *param0)(GraphicsOutput const *)
extern bool GraphicsOutput$48$get_side_by_side_stereo(GraphicsOutput const *self);

#if INDEX
#define GraphicsOutput_C_get_side_by_side_stereo_B_p GraphicsOutput$48$get_side_by_side_stereo
#endif

// C++ _inCAAAAD7Sq() ==> GraphicsOutput$_$get_sbs_left_dimensions(GraphicsOutput const *param0)(GraphicsOutput const *)
extern LVecBase4 const * GraphicsOutput$49$get_sbs_left_dimensions(GraphicsOutput const *self);

#if INDEX
#define GraphicsOutput_C_get_sbs_left_dimensions_p_p GraphicsOutput$49$get_sbs_left_dimensions
#endif

// C++ _inCAAAAf7uq() ==> GraphicsOutput$_$get_sbs_right_dimensions(GraphicsOutput const *param0)(GraphicsOutput const *)
extern LVecBase4 const * GraphicsOutput$50$get_sbs_right_dimensions(GraphicsOutput const *self);

#if INDEX
#define GraphicsOutput_C_get_sbs_right_dimensions_p_p GraphicsOutput$50$get_sbs_right_dimensions
#endif

// C++ _inCAAAAjFO0() ==> GraphicsOutput$_$get_fb_properties(GraphicsOutput const *param0)(GraphicsOutput const *)
extern FrameBufferProperties const * GraphicsOutput$51$get_fb_properties(GraphicsOutput const *self);

#if INDEX
#define GraphicsOutput_C_get_fb_properties_p_p GraphicsOutput$51$get_fb_properties
#endif

// C++ _inCAAAAp1Tf() ==> GraphicsOutput$_$is_stereo(GraphicsOutput const *param0)(GraphicsOutput const *)
extern bool GraphicsOutput$52$is_stereo(GraphicsOutput const *self);

#if INDEX
#define GraphicsOutput_C_is_stereo_B_p GraphicsOutput$52$is_stereo
#endif

// C++ _inCAAAAjxx5() ==> GraphicsOutput$_$clear_delete_flag(GraphicsOutput *param0)(GraphicsOutput *)
extern void GraphicsOutput$53$clear_delete_flag(GraphicsOutput *self);

#if INDEX
#define GraphicsOutput_C_clear_delete_flag_v_p GraphicsOutput$53$clear_delete_flag
#endif

// C++ _inCAAAAsJD_() ==> GraphicsOutput$_$get_delete_flag(GraphicsOutput const *param0)(GraphicsOutput const *)
extern bool GraphicsOutput$54$get_delete_flag(GraphicsOutput const *self);

#if INDEX
#define GraphicsOutput_C_get_delete_flag_B_p GraphicsOutput$54$get_delete_flag
#endif

// C++ _inCAAAAQqjF(int sort) ==> GraphicsOutput$_$set_sort(GraphicsOutput *param0, int param1)(GraphicsOutput *, int)
extern void GraphicsOutput$55$set_sort(GraphicsOutput *self, int sort);

#if INDEX
#define GraphicsOutput_C_set_sort_v_pi GraphicsOutput$55$set_sort
#endif

// C++ _inCAAAAcE4c() ==> GraphicsOutput$_$get_sort(GraphicsOutput const *param0)(GraphicsOutput const *)
extern int GraphicsOutput$56$get_sort(GraphicsOutput const *self);

#if INDEX
#define GraphicsOutput_C_get_sort_i_p GraphicsOutput$56$get_sort
#endif

// C++ _inCAAAAyqqS(int child_sort) ==> GraphicsOutput$_$set_child_sort(GraphicsOutput *param0, int param1)(GraphicsOutput *, int)
extern void GraphicsOutput$57$set_child_sort(GraphicsOutput *self, int child_sort);

#if INDEX
#define GraphicsOutput_C_set_child_sort_v_pi GraphicsOutput$57$set_child_sort
#endif

// C++ _inCAAAA_qOW() ==> GraphicsOutput$_$clear_child_sort(GraphicsOutput *param0)(GraphicsOutput *)
extern void GraphicsOutput$58$clear_child_sort(GraphicsOutput *self);

#if INDEX
#define GraphicsOutput_C_clear_child_sort_v_p GraphicsOutput$58$clear_child_sort
#endif

// C++ _inCAAAAx5eS() ==> GraphicsOutput$_$get_child_sort(GraphicsOutput const *param0)(GraphicsOutput const *)
extern int GraphicsOutput$59$get_child_sort(GraphicsOutput const *self);

#if INDEX
#define GraphicsOutput_C_get_child_sort_i_p GraphicsOutput$59$get_child_sort
#endif

// C++ _inCAAAAys0m() ==> GraphicsOutput$_$trigger_copy(GraphicsOutput *param0)(GraphicsOutput *)
extern AsyncFuture * GraphicsOutput$60$trigger_copy(GraphicsOutput *self);

#if INDEX
#define GraphicsOutput_C_trigger_copy_p_p GraphicsOutput$60$trigger_copy
#endif

// C++ _inCAAAADSih() ==> GraphicsOutput$_$make_display_region(GraphicsOutput *param0)(GraphicsOutput *)
extern DisplayRegion * GraphicsOutput$61$make_display_region(GraphicsOutput *self);

#if INDEX
#define GraphicsOutput_C_make_display_region_p_p GraphicsOutput$61$make_display_region
#endif

// C++ _inCAAAAWihV(LVecBase4 const &dimensions) ==> GraphicsOutput$_$make_display_region(GraphicsOutput *param0, LVecBase4 const *param1)(GraphicsOutput *, LVecBase4 const *)
extern DisplayRegion * GraphicsOutput$62$make_display_region(GraphicsOutput *self, LVecBase4 const *dimensions);

#if INDEX
#define GraphicsOutput_C_make_display_region_p_pp GraphicsOutput$62$make_display_region
#endif

// C++ _inCAAAAdfJO(PN_stdfloat l, PN_stdfloat r, PN_stdfloat b, PN_stdfloat t) ==> GraphicsOutput$_$make_display_region(GraphicsOutput *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4)(GraphicsOutput *, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern DisplayRegion * GraphicsOutput$63$make_display_region(GraphicsOutput *self, PN_stdfloat l, PN_stdfloat r, PN_stdfloat b, PN_stdfloat t);

#if INDEX
#define GraphicsOutput_C_make_display_region_p_pffff GraphicsOutput$63$make_display_region
#endif

// C++ _inCAAAArH1t() ==> GraphicsOutput$_$make_mono_display_region(GraphicsOutput *param0)(GraphicsOutput *)
extern DisplayRegion * GraphicsOutput$64$make_mono_display_region(GraphicsOutput *self);

#if INDEX
#define GraphicsOutput_C_make_mono_display_region_p_p GraphicsOutput$64$make_mono_display_region
#endif

// C++ _inCAAAAq92V(LVecBase4 const &dimensions) ==> GraphicsOutput$_$make_mono_display_region(GraphicsOutput *param0, LVecBase4 const *param1)(GraphicsOutput *, LVecBase4 const *)
extern DisplayRegion * GraphicsOutput$65$make_mono_display_region(GraphicsOutput *self, LVecBase4 const *dimensions);

#if INDEX
#define GraphicsOutput_C_make_mono_display_region_p_pp GraphicsOutput$65$make_mono_display_region
#endif

// C++ _inCAAAAcSKH(PN_stdfloat l, PN_stdfloat r, PN_stdfloat b, PN_stdfloat t) ==> GraphicsOutput$_$make_mono_display_region(GraphicsOutput *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4)(GraphicsOutput *, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern DisplayRegion * GraphicsOutput$66$make_mono_display_region(GraphicsOutput *self, PN_stdfloat l, PN_stdfloat r, PN_stdfloat b, PN_stdfloat t);

#if INDEX
#define GraphicsOutput_C_make_mono_display_region_p_pffff GraphicsOutput$66$make_mono_display_region
#endif

// C++ _inCAAAAbYGK() ==> GraphicsOutput$_$make_stereo_display_region(GraphicsOutput *param0)(GraphicsOutput *)
extern StereoDisplayRegion * GraphicsOutput$67$make_stereo_display_region(GraphicsOutput *self);

#if INDEX
#define GraphicsOutput_C_make_stereo_display_region_p_p GraphicsOutput$67$make_stereo_display_region
#endif

// C++ _inCAAAAb2_z(LVecBase4 const &dimensions) ==> GraphicsOutput$_$make_stereo_display_region(GraphicsOutput *param0, LVecBase4 const *param1)(GraphicsOutput *, LVecBase4 const *)
extern StereoDisplayRegion * GraphicsOutput$68$make_stereo_display_region(GraphicsOutput *self, LVecBase4 const *dimensions);

#if INDEX
#define GraphicsOutput_C_make_stereo_display_region_p_pp GraphicsOutput$68$make_stereo_display_region
#endif

// C++ _inCAAAAj0Qo(PN_stdfloat l, PN_stdfloat r, PN_stdfloat b, PN_stdfloat t) ==> GraphicsOutput$_$make_stereo_display_region(GraphicsOutput *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4)(GraphicsOutput *, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern StereoDisplayRegion * GraphicsOutput$69$make_stereo_display_region(GraphicsOutput *self, PN_stdfloat l, PN_stdfloat r, PN_stdfloat b, PN_stdfloat t);

#if INDEX
#define GraphicsOutput_C_make_stereo_display_region_p_pffff GraphicsOutput$69$make_stereo_display_region
#endif

// C++ _inCAAAAyMVJ(DisplayRegion *display_region) ==> GraphicsOutput$_$remove_display_region(GraphicsOutput *param0, DisplayRegion *param1)(GraphicsOutput *, DisplayRegion *)
extern bool GraphicsOutput$70$remove_display_region(GraphicsOutput *self, DisplayRegion *display_region);

#if INDEX
#define GraphicsOutput_C_remove_display_region_B_pp GraphicsOutput$70$remove_display_region
#endif

// C++ _inCAAAAVlIl() ==> GraphicsOutput$_$remove_all_display_regions(GraphicsOutput *param0)(GraphicsOutput *)
extern void GraphicsOutput$71$remove_all_display_regions(GraphicsOutput *self);

#if INDEX
#define GraphicsOutput_C_remove_all_display_regions_v_p GraphicsOutput$71$remove_all_display_regions
#endif

// C++ _inCAAAAlL68() ==> GraphicsOutput$_$get_overlay_display_region(GraphicsOutput const *param0)(GraphicsOutput const *)
extern DisplayRegion * GraphicsOutput$72$get_overlay_display_region(GraphicsOutput const *self);

#if INDEX
#define GraphicsOutput_C_get_overlay_display_region_p_p GraphicsOutput$72$get_overlay_display_region
#endif

// C++ _inCAAAAXV31(DisplayRegion *display_region) ==> GraphicsOutput$_$set_overlay_display_region(GraphicsOutput *param0, DisplayRegion *param1)(GraphicsOutput *, DisplayRegion *)
extern void GraphicsOutput$73$set_overlay_display_region(GraphicsOutput *self, DisplayRegion *display_region);

#if INDEX
#define GraphicsOutput_C_set_overlay_display_region_v_pp GraphicsOutput$73$set_overlay_display_region
#endif

// C++ _inCAAAAHxxm() ==> GraphicsOutput$_$get_num_display_regions(GraphicsOutput const *param0)(GraphicsOutput const *)
extern int GraphicsOutput$74$get_num_display_regions(GraphicsOutput const *self);

#if INDEX
#define GraphicsOutput_C_get_num_display_regions_i_p GraphicsOutput$74$get_num_display_regions
#endif

// C++ _inCAAAA1bhW(int n) ==> GraphicsOutput$_$get_display_region(GraphicsOutput const *param0, int param1)(GraphicsOutput const *, int)
extern char ** GraphicsOutput$75$get_display_region(GraphicsOutput const *self, int n);

#if INDEX
#define GraphicsOutput_C_get_display_region_p_pi GraphicsOutput$75$get_display_region
#endif

// C++ _inCAAAA_TMd() ==> GraphicsOutput$_$get_num_active_display_regions(GraphicsOutput const *param0)(GraphicsOutput const *)
extern int GraphicsOutput$76$get_num_active_display_regions(GraphicsOutput const *self);

#if INDEX
#define GraphicsOutput_C_get_num_active_display_regions_i_p GraphicsOutput$76$get_num_active_display_regions
#endif

// C++ _inCAAAAjI4S(int n) ==> GraphicsOutput$_$get_active_display_region(GraphicsOutput const *param0, int param1)(GraphicsOutput const *, int)
extern char ** GraphicsOutput$77$get_active_display_region(GraphicsOutput const *self, int n);

#if INDEX
#define GraphicsOutput_C_get_active_display_region_p_pi GraphicsOutput$77$get_active_display_region
#endif

// C++ _inCAAAAJRb6(std::string const &name, int x_size, int y_size, Texture *tex, bool to_ram, FrameBufferProperties *fbp) ==> GraphicsOutput$_$make_texture_buffer(GraphicsOutput *param0, char const *param1, int param2, int param3, Texture *param4, bool param5, FrameBufferProperties *param6)(GraphicsOutput *, char const *, int, int, Texture *, bool, FrameBufferProperties *)
extern GraphicsOutput * GraphicsOutput$78$make_texture_buffer(GraphicsOutput *self, char const *name, int x_size, int y_size, Texture *tex, bool to_ram, FrameBufferProperties *fbp);

#if INDEX
#define GraphicsOutput_C_make_texture_buffer_p_psiipBp GraphicsOutput$78$make_texture_buffer
#endif

// C++ _inCAAAA9T_8(std::string const &name, int x_size, int y_size, Texture *tex, bool to_ram) ==> GraphicsOutput$_$make_texture_buffer(GraphicsOutput *param0, char const *param1, int param2, int param3, Texture *param4, bool param5)(GraphicsOutput *, char const *, int, int, Texture *, bool)
extern GraphicsOutput * GraphicsOutput$79$make_texture_buffer(GraphicsOutput *self, char const *name, int x_size, int y_size, Texture *tex, bool to_ram);

#if INDEX
#define GraphicsOutput_C_make_texture_buffer_p_psiipB GraphicsOutput$79$make_texture_buffer
#endif

// C++ _inCAAAA7HEy(std::string const &name, int x_size, int y_size, Texture *tex) ==> GraphicsOutput$_$make_texture_buffer(GraphicsOutput *param0, char const *param1, int param2, int param3, Texture *param4)(GraphicsOutput *, char const *, int, int, Texture *)
extern GraphicsOutput * GraphicsOutput$80$make_texture_buffer(GraphicsOutput *self, char const *name, int x_size, int y_size, Texture *tex);

#if INDEX
#define GraphicsOutput_C_make_texture_buffer_p_psiip GraphicsOutput$80$make_texture_buffer
#endif

// C++ _inCAAAA_gm3(std::string const &name, int x_size, int y_size) ==> GraphicsOutput$_$make_texture_buffer(GraphicsOutput *param0, char const *param1, int param2, int param3)(GraphicsOutput *, char const *, int, int)
extern GraphicsOutput * GraphicsOutput$81$make_texture_buffer(GraphicsOutput *self, char const *name, int x_size, int y_size);

#if INDEX
#define GraphicsOutput_C_make_texture_buffer_p_psii GraphicsOutput$81$make_texture_buffer
#endif

// C++ _inCAAAAuP1F(std::string const &name, int size, NodePath &camera_rig, DrawMask camera_mask, bool to_ram, FrameBufferProperties *fbp) ==> GraphicsOutput$_$make_cube_map(GraphicsOutput *param0, char const *param1, int param2, NodePath *param3, DrawMask *param4, bool param5, FrameBufferProperties *param6)(GraphicsOutput *, char const *, int, NodePath *, DrawMask *, bool, FrameBufferProperties *)
extern GraphicsOutput * GraphicsOutput$82$make_cube_map(GraphicsOutput *self, char const *name, int size, NodePath *camera_rig, DrawMask *camera_mask, bool to_ram, FrameBufferProperties *fbp);

#if INDEX
#define GraphicsOutput_C_make_cube_map_p_psippBp GraphicsOutput$82$make_cube_map
#endif

// C++ _inCAAAA81YI(std::string const &name, int size, NodePath &camera_rig, DrawMask camera_mask, bool to_ram) ==> GraphicsOutput$_$make_cube_map(GraphicsOutput *param0, char const *param1, int param2, NodePath *param3, DrawMask *param4, bool param5)(GraphicsOutput *, char const *, int, NodePath *, DrawMask *, bool)
extern GraphicsOutput * GraphicsOutput$83$make_cube_map(GraphicsOutput *self, char const *name, int size, NodePath *camera_rig, DrawMask *camera_mask, bool to_ram);

#if INDEX
#define GraphicsOutput_C_make_cube_map_p_psippB GraphicsOutput$83$make_cube_map
#endif

// C++ _inCAAAAp5c9(std::string const &name, int size, NodePath &camera_rig, DrawMask camera_mask) ==> GraphicsOutput$_$make_cube_map(GraphicsOutput *param0, char const *param1, int param2, NodePath *param3, DrawMask *param4)(GraphicsOutput *, char const *, int, NodePath *, DrawMask *)
extern GraphicsOutput * GraphicsOutput$84$make_cube_map(GraphicsOutput *self, char const *name, int size, NodePath *camera_rig, DrawMask *camera_mask);

#if INDEX
#define GraphicsOutput_C_make_cube_map_p_psipp GraphicsOutput$84$make_cube_map
#endif

// C++ _inCAAAA8CZi(std::string const &name, int size, NodePath &camera_rig) ==> GraphicsOutput$_$make_cube_map(GraphicsOutput *param0, char const *param1, int param2, NodePath *param3)(GraphicsOutput *, char const *, int, NodePath *)
extern GraphicsOutput * GraphicsOutput$85$make_cube_map(GraphicsOutput *self, char const *name, int size, NodePath *camera_rig);

#if INDEX
#define GraphicsOutput_C_make_cube_map_p_psip GraphicsOutput$85$make_cube_map
#endif

// C++ _inCAAAAkb6h(std::string const &prefix) ==> GraphicsOutput$_$make_screenshot_filename(char const *param0)(char const *)
extern Filename * GraphicsOutput$86$make_screenshot_filename(char const *prefix);

#if INDEX
#define GraphicsOutput_C_make_screenshot_filename_p_s GraphicsOutput$86$make_screenshot_filename
#endif

// C++ _inCAAAAPz_F() ==> GraphicsOutput$_$make_screenshot_filename()()
extern Filename * GraphicsOutput$87$make_screenshot_filename(void);

#if INDEX
#define GraphicsOutput_C_make_screenshot_filename_p_v GraphicsOutput$87$make_screenshot_filename
#endif

// C++ _inCAAAAHRS5(std::string const &prefix) ==> GraphicsOutput$_$save_screenshot_default(GraphicsOutput *param0, char const *param1)(GraphicsOutput *, char const *)
extern Filename * GraphicsOutput$88$save_screenshot_default(GraphicsOutput *self, char const *prefix);

#if INDEX
#define GraphicsOutput_C_save_screenshot_default_p_ps GraphicsOutput$88$save_screenshot_default
#endif

// C++ _inCAAAA8zcS() ==> GraphicsOutput$_$save_screenshot_default(GraphicsOutput *param0)(GraphicsOutput *)
extern Filename * GraphicsOutput$89$save_screenshot_default(GraphicsOutput *self);

#if INDEX
#define GraphicsOutput_C_save_screenshot_default_p_p GraphicsOutput$89$save_screenshot_default
#endif

// C++ _inCAAAAVJQI(Filename const &filename, std::string const &image_comment) ==> GraphicsOutput$_$save_screenshot(GraphicsOutput *param0, Filename const *param1, char const *param2)(GraphicsOutput *, Filename const *, char const *)
extern bool GraphicsOutput$90$save_screenshot(GraphicsOutput *self, Filename const *filename, char const *image_comment);

#if INDEX
#define GraphicsOutput_C_save_screenshot_B_pps GraphicsOutput$90$save_screenshot
#endif

// C++ _inCAAAAoVLU(Filename const &filename) ==> GraphicsOutput$_$save_screenshot(GraphicsOutput *param0, Filename const *param1)(GraphicsOutput *, Filename const *)
extern bool GraphicsOutput$91$save_screenshot(GraphicsOutput *self, Filename const *filename);

#if INDEX
#define GraphicsOutput_C_save_screenshot_B_pp GraphicsOutput$91$save_screenshot
#endif

// C++ _inCAAAAKXv9() ==> GraphicsOutput$_$get_screenshot(GraphicsOutput *param0)(GraphicsOutput *)
extern char ** GraphicsOutput$92$get_screenshot(GraphicsOutput *self);

#if INDEX
#define GraphicsOutput_C_get_screenshot_p_p GraphicsOutput$92$get_screenshot
#endif

// C++ _inCAAAAIsHW(PNMImage &image) ==> GraphicsOutput$_$get_screenshot(GraphicsOutput *param0, PNMImage *param1)(GraphicsOutput *, PNMImage *)
extern bool GraphicsOutput$93$get_screenshot(GraphicsOutput *self, PNMImage *image);

#if INDEX
#define GraphicsOutput_C_get_screenshot_B_pp GraphicsOutput$93$get_screenshot
#endif

// C++ _inCAAAAUNk3() ==> GraphicsOutput$_$get_texture_card(GraphicsOutput *param0)(GraphicsOutput *)
extern NodePath * GraphicsOutput$94$get_texture_card(GraphicsOutput *self);

#if INDEX
#define GraphicsOutput_C_get_texture_card_p_p GraphicsOutput$94$get_texture_card
#endif

// C++ _inCAAAA2Eyc(GraphicsOutput *graphics_output) ==> GraphicsOutput$_$share_depth_buffer(GraphicsOutput *param0, GraphicsOutput *param1)(GraphicsOutput *, GraphicsOutput *)
extern bool GraphicsOutput$95$share_depth_buffer(GraphicsOutput *self, GraphicsOutput *graphics_output);

#if INDEX
#define GraphicsOutput_C_share_depth_buffer_B_pp GraphicsOutput$95$share_depth_buffer
#endif

// C++ _inCAAAAX5g9() ==> GraphicsOutput$_$unshare_depth_buffer(GraphicsOutput *param0)(GraphicsOutput *)
extern void GraphicsOutput$96$unshare_depth_buffer(GraphicsOutput *self);

#if INDEX
#define GraphicsOutput_C_unshare_depth_buffer_v_p GraphicsOutput$96$unshare_depth_buffer
#endif

// C++ _inCAAAAHdDD() ==> GraphicsOutput$_$get_supports_render_texture(GraphicsOutput const *param0)(GraphicsOutput const *)
extern bool GraphicsOutput$97$get_supports_render_texture(GraphicsOutput const *self);

#if INDEX
#define GraphicsOutput_C_get_supports_render_texture_B_p GraphicsOutput$97$get_supports_render_texture
#endif

// C++ _inCAAAAWtdR() ==> GraphicsOutput$_$flip_ready(GraphicsOutput const *param0)(GraphicsOutput const *)
extern bool GraphicsOutput$98$flip_ready(GraphicsOutput const *self);

#if INDEX
#define GraphicsOutput_C_flip_ready_B_p GraphicsOutput$98$flip_ready
#endif

// C++ _inCAAAAybdT() ==> GraphicsOutput$_$get_host(GraphicsOutput *param0)(GraphicsOutput *)
extern GraphicsOutput * GraphicsOutput$99$get_host(GraphicsOutput *self);

#if INDEX
#define GraphicsOutput_C_get_host_p_p GraphicsOutput$99$get_host
#endif

// C++ _inCAAAAlotv() ==> GraphicsOutput$_$request_open(GraphicsOutput *param0)(GraphicsOutput *)
extern void GraphicsOutput$100$request_open(GraphicsOutput *self);

#if INDEX
#define GraphicsOutput_C_request_open_v_p GraphicsOutput$100$request_open
#endif

// C++ _inCAAAAzaxC() ==> GraphicsOutput$_$request_close(GraphicsOutput *param0)(GraphicsOutput *)
extern void GraphicsOutput$101$request_close(GraphicsOutput *self);

#if INDEX
#define GraphicsOutput_C_request_close_v_p GraphicsOutput$101$request_close
#endif

// C++ _inCAAAAUvbu() ==> GraphicsOutput$_$set_close_now(GraphicsOutput *param0)(GraphicsOutput *)
extern void GraphicsOutput$102$set_close_now(GraphicsOutput *self);

#if INDEX
#define GraphicsOutput_C_set_close_now_v_p GraphicsOutput$102$set_close_now
#endif

// C++ _inCAAAAUe0V(bool swapchain) ==> GraphicsOutput$_$reset_window(GraphicsOutput *param0, bool param1)(GraphicsOutput *, bool)
extern void GraphicsOutput$103$reset_window(GraphicsOutput *self, bool swapchain);

#if INDEX
#define GraphicsOutput_C_reset_window_v_pB GraphicsOutput$103$reset_window
#endif

// C++ _inCAAAA789G() ==> GraphicsOutput$_$clear_pipe(GraphicsOutput *param0)(GraphicsOutput *)
extern void GraphicsOutput$104$clear_pipe(GraphicsOutput *self);

#if INDEX
#define GraphicsOutput_C_clear_pipe_v_p GraphicsOutput$104$clear_pipe
#endif

// C++ _inCAAAA8lfQ(int x, int y) ==> GraphicsOutput$_$set_size_and_recalc(GraphicsOutput *param0, int param1, int param2)(GraphicsOutput *, int, int)
extern void GraphicsOutput$105$set_size_and_recalc(GraphicsOutput *self, int x, int y);

#if INDEX
#define GraphicsOutput_C_set_size_and_recalc_v_pii GraphicsOutput$105$set_size_and_recalc
#endif

// C++ _inCAAAAGZGE(Thread *current_thread) ==> GraphicsOutput$_$clear(GraphicsOutput *param0, Thread *param1)(GraphicsOutput *, Thread *)
extern void GraphicsOutput$106$clear(GraphicsOutput *self, Thread *current_thread);

#if INDEX
#define GraphicsOutput_C_clear_v_pp GraphicsOutput$106$clear
#endif

// C++ _inCAAAAReqS(GraphicsOutput::FrameMode mode, Thread *current_thread) ==> GraphicsOutput$_$begin_frame(GraphicsOutput *param0, GraphicsOutput::FrameMode param1, Thread *param2)(GraphicsOutput *, GraphicsOutput::FrameMode, Thread *)
extern bool GraphicsOutput$107$begin_frame(GraphicsOutput *self, GraphicsOutput$_FrameMode mode, Thread *current_thread);

#if INDEX
#define GraphicsOutput_C_begin_frame_B_ppp GraphicsOutput$107$begin_frame
#endif

// C++ _inCAAAAGRcf(GraphicsOutput::FrameMode mode, Thread *current_thread) ==> GraphicsOutput$_$end_frame(GraphicsOutput *param0, GraphicsOutput::FrameMode param1, Thread *param2)(GraphicsOutput *, GraphicsOutput::FrameMode, Thread *)
extern void GraphicsOutput$108$end_frame(GraphicsOutput *self, GraphicsOutput$_FrameMode mode, Thread *current_thread);

#if INDEX
#define GraphicsOutput_C_end_frame_v_ppp GraphicsOutput$108$end_frame
#endif

// C++ _inCAAAALuWT(DisplayRegionPipelineReader *new_dr) ==> GraphicsOutput$_$change_scenes(GraphicsOutput *param0, DisplayRegionPipelineReader *param1)(GraphicsOutput *, DisplayRegionPipelineReader *)
extern void GraphicsOutput$109$change_scenes(GraphicsOutput *self, DisplayRegionPipelineReader *new_dr);

#if INDEX
#define GraphicsOutput_C_change_scenes_v_pp GraphicsOutput$109$change_scenes
#endif

// C++ _inCAAAAwVsH(int page) ==> GraphicsOutput$_$select_target_tex_page(GraphicsOutput *param0, int param1)(GraphicsOutput *, int)
extern void GraphicsOutput$110$select_target_tex_page(GraphicsOutput *self, int page);

#if INDEX
#define GraphicsOutput_C_select_target_tex_page_v_pi GraphicsOutput$110$select_target_tex_page
#endif

// C++ _inCAAAA1enF() ==> GraphicsOutput$_$begin_flip(GraphicsOutput *param0)(GraphicsOutput *)
extern void GraphicsOutput$111$begin_flip(GraphicsOutput *self);

#if INDEX
#define GraphicsOutput_C_begin_flip_v_p GraphicsOutput$111$begin_flip
#endif

// C++ _inCAAAAcnBN() ==> GraphicsOutput$_$ready_flip(GraphicsOutput *param0)(GraphicsOutput *)
extern void GraphicsOutput$112$ready_flip(GraphicsOutput *self);

#if INDEX
#define GraphicsOutput_C_ready_flip_v_p GraphicsOutput$112$ready_flip
#endif

// C++ _inCAAAA7mZN() ==> GraphicsOutput$_$end_flip(GraphicsOutput *param0)(GraphicsOutput *)
extern void GraphicsOutput$113$end_flip(GraphicsOutput *self);

#if INDEX
#define GraphicsOutput_C_end_flip_v_p GraphicsOutput$113$end_flip
#endif

// C++ _inCAAAAR5pW() ==> GraphicsOutput$_$process_events(GraphicsOutput *param0)(GraphicsOutput *)
extern void GraphicsOutput$114$process_events(GraphicsOutput *self);

#if INDEX
#define GraphicsOutput_C_process_events_v_p GraphicsOutput$114$process_events
#endif

// C++ _inCAAAA3tej() ==> GraphicsOutput$_$get_cull_window_pcollector(GraphicsOutput *param0)(GraphicsOutput *)
extern PStatCollector * GraphicsOutput$115$get_cull_window_pcollector(GraphicsOutput *self);

#if INDEX
#define GraphicsOutput_C_get_cull_window_pcollector_p_p GraphicsOutput$115$get_cull_window_pcollector
#endif

// C++ _inCAAAAn9rz() ==> GraphicsOutput$_$get_draw_window_pcollector(GraphicsOutput *param0)(GraphicsOutput *)
extern PStatCollector * GraphicsOutput$116$get_draw_window_pcollector(GraphicsOutput *self);

#if INDEX
#define GraphicsOutput_C_get_draw_window_pcollector_p_p GraphicsOutput$116$get_draw_window_pcollector
#endif

// C++ _inCAAAAbTT5() ==> GraphicsOutput$_$get_clear_window_pcollector(GraphicsOutput *param0)(GraphicsOutput *)
extern PStatCollector * GraphicsOutput$117$get_clear_window_pcollector(GraphicsOutput *self);

#if INDEX
#define GraphicsOutput_C_get_clear_window_pcollector_p_p GraphicsOutput$117$get_clear_window_pcollector
#endif

// C++ _inCAAAAg2P6() ==> GraphicsOutput$_$get_class_type()()
extern int GraphicsOutput$118$get_class_type(void);

#if INDEX
#define GraphicsOutput_C_get_class_type_i_v GraphicsOutput$118$get_class_type
#endif

// C++ _inCAAAAixRY() ==> GraphicsOutput$_$init_type()()
extern void GraphicsOutput$119$init_type(void);

#if INDEX
#define GraphicsOutput_C_init_type_v_v GraphicsOutput$119$init_type
#endif

// C++ _inCAAAATv97() ==> GraphicsOutput$_$get_type(GraphicsOutput const *param0)(GraphicsOutput const *)
extern int GraphicsOutput$120$get_type(GraphicsOutput const *self);

#if INDEX
#define GraphicsOutput_C_get_type_i_p GraphicsOutput$120$get_type
#endif

// C++ _inCAAAAZahG() ==> GraphicsOutput$_$force_init_type(GraphicsOutput *param0)(GraphicsOutput *)
extern int GraphicsOutput$121$force_init_type(GraphicsOutput *self);

#if INDEX
#define GraphicsOutput_C_force_init_type_i_p GraphicsOutput$121$force_init_type
#endif


// GraphicsOutputBase

// C++ _inCAAAAlfJN() ==> GraphicsOutputBase$_$downcast_to_GraphicsOutput(GraphicsOutputBase *param0)(GraphicsOutputBase *)
extern GraphicsOutput * GraphicsOutputBase$1$downcast_to_GraphicsOutput(GraphicsOutputBase *self);

#if INDEX
#define GraphicsOutputBase_C_downcast_to_GraphicsOutput_p_p GraphicsOutputBase$1$downcast_to_GraphicsOutput
#endif


// GraphicsWindow

// C++ _inCAAAAhbmW() ==> GraphicsWindow$_$get_properties(GraphicsWindow const *param0)(GraphicsWindow const *)
extern WindowProperties const * GraphicsWindow$1$get_properties(GraphicsWindow const *self);

#if INDEX
#define GraphicsWindow_C_get_properties_p_p GraphicsWindow$1$get_properties
#endif

// C++ _inCAAAA0Htu() ==> GraphicsWindow$_$get_requested_properties(GraphicsWindow const *param0)(GraphicsWindow const *)
extern WindowProperties const * GraphicsWindow$2$get_requested_properties(GraphicsWindow const *self);

#if INDEX
#define GraphicsWindow_C_get_requested_properties_p_p GraphicsWindow$2$get_requested_properties
#endif

// C++ _inCAAAAYZ4X() ==> GraphicsWindow$_$clear_rejected_properties(GraphicsWindow *param0)(GraphicsWindow *)
extern void GraphicsWindow$3$clear_rejected_properties(GraphicsWindow *self);

#if INDEX
#define GraphicsWindow_C_clear_rejected_properties_v_p GraphicsWindow$3$clear_rejected_properties
#endif

// C++ _inCAAAAcXSI() ==> GraphicsWindow$_$get_rejected_properties(GraphicsWindow const *param0)(GraphicsWindow const *)
extern WindowProperties * GraphicsWindow$4$get_rejected_properties(GraphicsWindow const *self);

#if INDEX
#define GraphicsWindow_C_get_rejected_properties_p_p GraphicsWindow$4$get_rejected_properties
#endif

// C++ _inCAAAAGdcu(WindowProperties const &requested_properties) ==> GraphicsWindow$_$request_properties(GraphicsWindow *param0, WindowProperties const *param1)(GraphicsWindow *, WindowProperties const *)
extern void GraphicsWindow$5$request_properties(GraphicsWindow *self, WindowProperties const *requested_properties);

#if INDEX
#define GraphicsWindow_C_request_properties_v_pp GraphicsWindow$5$request_properties
#endif

// C++ _inCAAAAu9q8() ==> GraphicsWindow$_$is_closed(GraphicsWindow const *param0)(GraphicsWindow const *)
extern bool GraphicsWindow$6$is_closed(GraphicsWindow const *self);

#if INDEX
#define GraphicsWindow_C_is_closed_B_p GraphicsWindow$6$is_closed
#endif

// C++ _inCAAAAJaEs() ==> GraphicsWindow$_$is_fullscreen(GraphicsWindow const *param0)(GraphicsWindow const *)
extern bool GraphicsWindow$7$is_fullscreen(GraphicsWindow const *self);

#if INDEX
#define GraphicsWindow_C_is_fullscreen_B_p GraphicsWindow$7$is_fullscreen
#endif

// C++ _inCAAAAjIs6(std::string const &window_event) ==> GraphicsWindow$_$set_window_event(GraphicsWindow *param0, char const *param1)(GraphicsWindow *, char const *)
extern void GraphicsWindow$8$set_window_event(GraphicsWindow *self, char const *window_event);

#if INDEX
#define GraphicsWindow_C_set_window_event_v_ps GraphicsWindow$8$set_window_event
#endif

// C++ _inCAAAA_R55() ==> GraphicsWindow$_$get_window_event(GraphicsWindow const *param0)(GraphicsWindow const *)
extern char const * GraphicsWindow$9$get_window_event(GraphicsWindow const *self);

#if INDEX
#define GraphicsWindow_C_get_window_event_s_p GraphicsWindow$9$get_window_event
#endif

// C++ _inCAAAAzr9L(std::string const &close_request_event) ==> GraphicsWindow$_$set_close_request_event(GraphicsWindow *param0, char const *param1)(GraphicsWindow *, char const *)
extern void GraphicsWindow$10$set_close_request_event(GraphicsWindow *self, char const *close_request_event);

#if INDEX
#define GraphicsWindow_C_set_close_request_event_v_ps GraphicsWindow$10$set_close_request_event
#endif

// C++ _inCAAAAg_ue() ==> GraphicsWindow$_$get_close_request_event(GraphicsWindow const *param0)(GraphicsWindow const *)
extern char const * GraphicsWindow$11$get_close_request_event(GraphicsWindow const *self);

#if INDEX
#define GraphicsWindow_C_get_close_request_event_s_p GraphicsWindow$11$get_close_request_event
#endif

// C++ _inCAAAAN9Aq(bool unexposed_draw) ==> GraphicsWindow$_$set_unexposed_draw(GraphicsWindow *param0, bool param1)(GraphicsWindow *, bool)
extern void GraphicsWindow$12$set_unexposed_draw(GraphicsWindow *self, bool unexposed_draw);

#if INDEX
#define GraphicsWindow_C_set_unexposed_draw_v_pB GraphicsWindow$12$set_unexposed_draw
#endif

// C++ _inCAAAALj90() ==> GraphicsWindow$_$get_unexposed_draw(GraphicsWindow const *param0)(GraphicsWindow const *)
extern bool GraphicsWindow$13$get_unexposed_draw(GraphicsWindow const *self);

#if INDEX
#define GraphicsWindow_C_get_unexposed_draw_B_p GraphicsWindow$13$get_unexposed_draw
#endif

// C++ _inCAAAAYAaM() ==> GraphicsWindow$_$get_window_handle(GraphicsWindow const *param0)(GraphicsWindow const *)
extern WindowHandle * GraphicsWindow$14$get_window_handle(GraphicsWindow const *self);

#if INDEX
#define GraphicsWindow_C_get_window_handle_p_p GraphicsWindow$14$get_window_handle
#endif

// C++ _inCAAAAWc_C() ==> GraphicsWindow$_$get_num_input_devices(GraphicsWindow const *param0)(GraphicsWindow const *)
extern int GraphicsWindow$15$get_num_input_devices(GraphicsWindow const *self);

#if INDEX
#define GraphicsWindow_C_get_num_input_devices_i_p GraphicsWindow$15$get_num_input_devices
#endif

// C++ _inCAAAALnm1(int i) ==> GraphicsWindow$_$get_input_device(GraphicsWindow const *param0, int param1)(GraphicsWindow const *, int)
extern InputDevice * GraphicsWindow$16$get_input_device(GraphicsWindow const *self, int i);

#if INDEX
#define GraphicsWindow_C_get_input_device_p_pi GraphicsWindow$16$get_input_device
#endif

// C++ _inCAAAAqhfW(int device) ==> GraphicsWindow$_$get_input_device_name(GraphicsWindow const *param0, int param1)(GraphicsWindow const *, int)
extern char const * GraphicsWindow$17$get_input_device_name(GraphicsWindow const *self, int device);

#if INDEX
#define GraphicsWindow_C_get_input_device_name_s_pi GraphicsWindow$17$get_input_device_name
#endif

// C++ _inCAAAAYErM(int device) ==> GraphicsWindow$_$has_pointer(GraphicsWindow const *param0, int param1)(GraphicsWindow const *, int)
extern bool GraphicsWindow$18$has_pointer(GraphicsWindow const *self, int device);

#if INDEX
#define GraphicsWindow_C_has_pointer_B_pi GraphicsWindow$18$has_pointer
#endif

// C++ _inCAAAAeEpH(int device) ==> GraphicsWindow$_$has_keyboard(GraphicsWindow const *param0, int param1)(GraphicsWindow const *, int)
extern bool GraphicsWindow$19$has_keyboard(GraphicsWindow const *self, int device);

#if INDEX
#define GraphicsWindow_C_has_keyboard_B_pi GraphicsWindow$19$has_keyboard
#endif

// C++ _inCAAAAzz5k() ==> GraphicsWindow$_$get_keyboard_map(GraphicsWindow const *param0)(GraphicsWindow const *)
extern ButtonMap * GraphicsWindow$20$get_keyboard_map(GraphicsWindow const *self);

#if INDEX
#define GraphicsWindow_C_get_keyboard_map_p_p GraphicsWindow$20$get_keyboard_map
#endif

// C++ _inCAAAACg1v(int device) ==> GraphicsWindow$_$enable_pointer_events(GraphicsWindow *param0, int param1)(GraphicsWindow *, int)
extern void GraphicsWindow$21$enable_pointer_events(GraphicsWindow *self, int device);

#if INDEX
#define GraphicsWindow_C_enable_pointer_events_v_pi GraphicsWindow$21$enable_pointer_events
#endif

// C++ _inCAAAAyQiD(int device) ==> GraphicsWindow$_$disable_pointer_events(GraphicsWindow *param0, int param1)(GraphicsWindow *, int)
extern void GraphicsWindow$22$disable_pointer_events(GraphicsWindow *self, int device);

#if INDEX
#define GraphicsWindow_C_disable_pointer_events_v_pi GraphicsWindow$22$disable_pointer_events
#endif

// C++ _inCAAAAxqr_(int device) ==> GraphicsWindow$_$get_pointer(GraphicsWindow const *param0, int param1)(GraphicsWindow const *, int)
extern MouseData * GraphicsWindow$23$get_pointer(GraphicsWindow const *self, int device);

#if INDEX
#define GraphicsWindow_C_get_pointer_p_pi GraphicsWindow$23$get_pointer
#endif

// C++ _inCAAAAPl6f(int device, int x, int y) ==> GraphicsWindow$_$move_pointer(GraphicsWindow *param0, int param1, int param2, int param3)(GraphicsWindow *, int, int, int)
extern bool GraphicsWindow$24$move_pointer(GraphicsWindow *self, int device, int x, int y);

#if INDEX
#define GraphicsWindow_C_move_pointer_B_piii GraphicsWindow$24$move_pointer
#endif

// C++ _inCAAAA_nZW() ==> GraphicsWindow$_$close_ime(GraphicsWindow *param0)(GraphicsWindow *)
extern void GraphicsWindow$25$close_ime(GraphicsWindow *self);

#if INDEX
#define GraphicsWindow_C_close_ime_v_p GraphicsWindow$25$close_ime
#endif

// C++ _inCAAAAncJF(GraphicsWindowProc const *wnd_proc_object) ==> GraphicsWindow$_$add_window_proc(GraphicsWindow *param0, GraphicsWindowProc const *param1)(GraphicsWindow *, GraphicsWindowProc const *)
extern void GraphicsWindow$26$add_window_proc(GraphicsWindow *self, GraphicsWindowProc const *wnd_proc_object);

#if INDEX
#define GraphicsWindow_C_add_window_proc_v_pp GraphicsWindow$26$add_window_proc
#endif

// C++ _inCAAAAuqru(GraphicsWindowProc const *wnd_proc_object) ==> GraphicsWindow$_$remove_window_proc(GraphicsWindow *param0, GraphicsWindowProc const *param1)(GraphicsWindow *, GraphicsWindowProc const *)
extern void GraphicsWindow$27$remove_window_proc(GraphicsWindow *self, GraphicsWindowProc const *wnd_proc_object);

#if INDEX
#define GraphicsWindow_C_remove_window_proc_v_pp GraphicsWindow$27$remove_window_proc
#endif

// C++ _inCAAAAAVWl() ==> GraphicsWindow$_$clear_window_procs(GraphicsWindow *param0)(GraphicsWindow *)
extern void GraphicsWindow$28$clear_window_procs(GraphicsWindow *self);

#if INDEX
#define GraphicsWindow_C_clear_window_procs_v_p GraphicsWindow$28$clear_window_procs
#endif

// C++ _inCAAAAaS0I() ==> GraphicsWindow$_$supports_window_procs(GraphicsWindow const *param0)(GraphicsWindow const *)
extern bool GraphicsWindow$29$supports_window_procs(GraphicsWindow const *self);

#if INDEX
#define GraphicsWindow_C_supports_window_procs_B_p GraphicsWindow$29$supports_window_procs
#endif

// C++ _inCAAAAgP2V(GraphicsWindowProcCallbackData *callbackData) ==> GraphicsWindow$_$is_touch_event(GraphicsWindow *param0, GraphicsWindowProcCallbackData *param1)(GraphicsWindow *, GraphicsWindowProcCallbackData *)
extern bool GraphicsWindow$30$is_touch_event(GraphicsWindow *self, GraphicsWindowProcCallbackData *callbackData);

#if INDEX
#define GraphicsWindow_C_is_touch_event_B_pp GraphicsWindow$30$is_touch_event
#endif

// C++ _inCAAAA6LCP() ==> GraphicsWindow$_$get_num_touches(GraphicsWindow *param0)(GraphicsWindow *)
extern int GraphicsWindow$31$get_num_touches(GraphicsWindow *self);

#if INDEX
#define GraphicsWindow_C_get_num_touches_i_p GraphicsWindow$31$get_num_touches
#endif

// C++ _inCAAAAjYqK(int index) ==> GraphicsWindow$_$get_touch_info(GraphicsWindow *param0, int param1)(GraphicsWindow *, int)
extern TouchInfo * GraphicsWindow$32$get_touch_info(GraphicsWindow *self, int index);

#if INDEX
#define GraphicsWindow_C_get_touch_info_p_pi GraphicsWindow$32$get_touch_info
#endif

// C++ _inCAAAArMy1() ==> GraphicsWindow$_$request_open(GraphicsWindow *param0)(GraphicsWindow *)
extern void GraphicsWindow$33$request_open(GraphicsWindow *self);

#if INDEX
#define GraphicsWindow_C_request_open_v_p GraphicsWindow$33$request_open
#endif

// C++ _inCAAAAZ62I() ==> GraphicsWindow$_$request_close(GraphicsWindow *param0)(GraphicsWindow *)
extern void GraphicsWindow$34$request_close(GraphicsWindow *self);

#if INDEX
#define GraphicsWindow_C_request_close_v_p GraphicsWindow$34$request_close
#endif

// C++ _inCAAAAv4f0() ==> GraphicsWindow$_$set_close_now(GraphicsWindow *param0)(GraphicsWindow *)
extern void GraphicsWindow$35$set_close_now(GraphicsWindow *self);

#if INDEX
#define GraphicsWindow_C_set_close_now_v_p GraphicsWindow$35$set_close_now
#endif

// C++ _inCAAAAkBtc() ==> GraphicsWindow$_$process_events(GraphicsWindow *param0)(GraphicsWindow *)
extern void GraphicsWindow$36$process_events(GraphicsWindow *self);

#if INDEX
#define GraphicsWindow_C_process_events_v_p GraphicsWindow$36$process_events
#endif

// C++ _inCAAAAVjxt(WindowProperties &properties) ==> GraphicsWindow$_$set_properties_now(GraphicsWindow *param0, WindowProperties *param1)(GraphicsWindow *, WindowProperties *)
extern void GraphicsWindow$37$set_properties_now(GraphicsWindow *self, WindowProperties *properties);

#if INDEX
#define GraphicsWindow_C_set_properties_now_v_pp GraphicsWindow$37$set_properties_now
#endif

// C++ _inCAAAAjGVA() ==> GraphicsWindow$_$get_class_type()()
extern int GraphicsWindow$38$get_class_type(void);

#if INDEX
#define GraphicsWindow_C_get_class_type_i_v GraphicsWindow$38$get_class_type
#endif

// C++ _inCAAAA_LXe() ==> GraphicsWindow$_$init_type()()
extern void GraphicsWindow$39$init_type(void);

#if INDEX
#define GraphicsWindow_C_init_type_v_v GraphicsWindow$39$init_type
#endif

// C++ _inCAAAA7DBC() ==> GraphicsWindow$_$get_type(GraphicsWindow const *param0)(GraphicsWindow const *)
extern int GraphicsWindow$40$get_type(GraphicsWindow const *self);

#if INDEX
#define GraphicsWindow_C_get_type_i_p GraphicsWindow$40$get_type
#endif

// C++ _inCAAAAuglM() ==> GraphicsWindow$_$force_init_type(GraphicsWindow *param0)(GraphicsWindow *)
extern int GraphicsWindow$41$force_init_type(GraphicsWindow *self);

#if INDEX
#define GraphicsWindow_C_force_init_type_i_p GraphicsWindow$41$force_init_type
#endif


// InternalName

// C++ _inCAAAAMlqi(std::string const &name) ==> InternalName$_$make(char const *param0)(char const *)
extern char ** InternalName$1$make(char const *name);

#if INDEX
#define InternalName_C_make_p_s InternalName$1$make
#endif

// C++ _inCAAAAJP_c(std::string const &name, int index) ==> InternalName$_$make(char const *param0, int param1)(char const *, int)
extern char ** InternalName$2$make(char const *name, int index);

#if INDEX
#define InternalName_C_make_p_si InternalName$2$make
#endif

// C++ _inCAAAA3rOD(std::string const &basename) ==> InternalName$_$append(InternalName *param0, char const *param1)(InternalName *, char const *)
extern char ** InternalName$3$append(InternalName *self, char const *basename);

#if INDEX
#define InternalName_C_append_p_ps InternalName$3$append
#endif

// C++ _inCAAAAxW48() ==> InternalName$_$get_parent(InternalName const *param0)(InternalName const *)
extern InternalName * InternalName$4$get_parent(InternalName const *self);

#if INDEX
#define InternalName_C_get_parent_p_p InternalName$4$get_parent
#endif

// C++ _inCAAAAKewZ() ==> InternalName$_$get_name(InternalName const *param0)(InternalName const *)
extern char const * InternalName$5$get_name(InternalName const *self);

#if INDEX
#define InternalName_C_get_name_s_p InternalName$5$get_name
#endif

// C++ _inCAAAAzwAG(std::string const &sep) ==> InternalName$_$join(InternalName const *param0, char const *param1)(InternalName const *, char const *)
extern char const * InternalName$6$join(InternalName const *self, char const *sep);

#if INDEX
#define InternalName_C_join_s_ss InternalName$6$join
#endif

// C++ _inCAAAAlDZ2() ==> InternalName$_$get_basename(InternalName const *param0)(InternalName const *)
extern char const * InternalName$7$get_basename(InternalName const *self);

#if INDEX
#define InternalName_C_get_basename_s_p InternalName$7$get_basename
#endif

// C++ _inCAAAAqA3D(std::string const &basename) ==> InternalName$_$find_ancestor(InternalName const *param0, char const *param1)(InternalName const *, char const *)
extern int InternalName$8$find_ancestor(InternalName const *self, char const *basename);

#if INDEX
#define InternalName_C_find_ancestor_i_ss InternalName$8$find_ancestor
#endif

// C++ _inCAAAAymmN(int n) ==> InternalName$_$get_ancestor(InternalName const *param0, int param1)(InternalName const *, int)
extern InternalName const * InternalName$9$get_ancestor(InternalName const *self, int n);

#if INDEX
#define InternalName_C_get_ancestor_s_si InternalName$9$get_ancestor
#endif

// C++ _inCAAAADhts() ==> InternalName$_$get_top(InternalName const *param0)(InternalName const *)
extern InternalName const * InternalName$10$get_top(InternalName const *self);

#if INDEX
#define InternalName_C_get_top_s_p InternalName$10$get_top
#endif

// C++ _inCAAAAi8VP(int n) ==> InternalName$_$get_net_basename(InternalName const *param0, int param1)(InternalName const *, int)
extern char const * InternalName$11$get_net_basename(InternalName const *self, int n);

#if INDEX
#define InternalName_C_get_net_basename_s_si InternalName$11$get_net_basename
#endif

// C++ _inCAAAAygU7(std::ostream &out) ==> InternalName$_$output(InternalName const *param0, std::ostream *param1)(InternalName const *, std::ostream *)
extern void InternalName$12$output(InternalName const *self, std$_ostream *out);

#if INDEX
#define InternalName_C_output_v_sp InternalName$12$output
#endif

// C++ _inCAAAAOVm7() ==> InternalName$_$get_root()()
extern char ** InternalName$13$get_root(void);

#if INDEX
#define InternalName_C_get_root_p_v InternalName$13$get_root
#endif

// C++ _inCAAAA6f4T() ==> InternalName$_$get_error()()
extern char ** InternalName$14$get_error(void);

#if INDEX
#define InternalName_C_get_error_p_v InternalName$14$get_error
#endif

// C++ _inCAAAAa072() ==> InternalName$_$get_vertex()()
extern char ** InternalName$15$get_vertex(void);

#if INDEX
#define InternalName_C_get_vertex_p_v InternalName$15$get_vertex
#endif

// C++ _inCAAAA2d7w() ==> InternalName$_$get_normal()()
extern char ** InternalName$16$get_normal(void);

#if INDEX
#define InternalName_C_get_normal_p_v InternalName$16$get_normal
#endif

// C++ _inCAAAABCM_() ==> InternalName$_$get_tangent()()
extern char ** InternalName$17$get_tangent(void);

#if INDEX
#define InternalName_C_get_tangent_p_v InternalName$17$get_tangent
#endif

// C++ _inCAAAAHp_A(std::string const &name) ==> InternalName$_$get_tangent_name(char const *param0)(char const *)
extern char ** InternalName$18$get_tangent_name(char const *name);

#if INDEX
#define InternalName_C_get_tangent_name_p_s InternalName$18$get_tangent_name
#endif

// C++ _inCAAAAgGjH() ==> InternalName$_$get_binormal()()
extern char ** InternalName$19$get_binormal(void);

#if INDEX
#define InternalName_C_get_binormal_p_v InternalName$19$get_binormal
#endif

// C++ _inCAAAA8aPj(std::string const &name) ==> InternalName$_$get_binormal_name(char const *param0)(char const *)
extern char ** InternalName$20$get_binormal_name(char const *name);

#if INDEX
#define InternalName_C_get_binormal_name_p_s InternalName$20$get_binormal_name
#endif

// C++ _inCAAAAaaiB() ==> InternalName$_$get_texcoord()()
extern char ** InternalName$21$get_texcoord(void);

#if INDEX
#define InternalName_C_get_texcoord_p_v InternalName$21$get_texcoord
#endif

// C++ _inCAAAAGWNd(std::string const &name) ==> InternalName$_$get_texcoord_name(char const *param0)(char const *)
extern char ** InternalName$22$get_texcoord_name(char const *name);

#if INDEX
#define InternalName_C_get_texcoord_name_p_s InternalName$22$get_texcoord_name
#endif

// C++ _inCAAAAkPBk() ==> InternalName$_$get_color()()
extern char ** InternalName$23$get_color(void);

#if INDEX
#define InternalName_C_get_color_p_v InternalName$23$get_color
#endif

// C++ _inCAAAAEmsm() ==> InternalName$_$get_rotate()()
extern char ** InternalName$24$get_rotate(void);

#if INDEX
#define InternalName_C_get_rotate_p_v InternalName$24$get_rotate
#endif

// C++ _inCAAAA1bcz() ==> InternalName$_$get_size()()
extern char ** InternalName$25$get_size(void);

#if INDEX
#define InternalName_C_get_size_p_v InternalName$25$get_size
#endif

// C++ _inCAAAAoQxT() ==> InternalName$_$get_aspect_ratio()()
extern char ** InternalName$26$get_aspect_ratio(void);

#if INDEX
#define InternalName_C_get_aspect_ratio_p_v InternalName$26$get_aspect_ratio
#endif

// C++ _inCAAAAOgr2() ==> InternalName$_$get_transform_blend()()
extern char ** InternalName$27$get_transform_blend(void);

#if INDEX
#define InternalName_C_get_transform_blend_p_v InternalName$27$get_transform_blend
#endif

// C++ _inCAAAAZaFB() ==> InternalName$_$get_transform_weight()()
extern char ** InternalName$28$get_transform_weight(void);

#if INDEX
#define InternalName_C_get_transform_weight_p_v InternalName$28$get_transform_weight
#endif

// C++ _inCAAAAPrB9() ==> InternalName$_$get_transform_index()()
extern char ** InternalName$29$get_transform_index(void);

#if INDEX
#define InternalName_C_get_transform_index_p_v InternalName$29$get_transform_index
#endif

// C++ _inCAAAAFeUd(InternalName *column, std::string const &slider) ==> InternalName$_$get_morph(InternalName *param0, char const *param1)(InternalName *, char const *)
extern char ** InternalName$30$get_morph(InternalName *column, char const *slider);

#if INDEX
#define InternalName_C_get_morph_p_ps InternalName$30$get_morph
#endif

// C++ _inCAAAATtkc() ==> InternalName$_$get_index()()
extern char ** InternalName$31$get_index(void);

#if INDEX
#define InternalName_C_get_index_p_v InternalName$31$get_index
#endif

// C++ _inCAAAAr1c_() ==> InternalName$_$get_world()()
extern char ** InternalName$32$get_world(void);

#if INDEX
#define InternalName_C_get_world_p_v InternalName$32$get_world
#endif

// C++ _inCAAAAJLm5() ==> InternalName$_$get_camera()()
extern char ** InternalName$33$get_camera(void);

#if INDEX
#define InternalName_C_get_camera_p_v InternalName$33$get_camera
#endif

// C++ _inCAAAASAUz() ==> InternalName$_$get_model()()
extern char ** InternalName$34$get_model(void);

#if INDEX
#define InternalName_C_get_model_p_v InternalName$34$get_model
#endif

// C++ _inCAAAAokyx() ==> InternalName$_$get_view()()
extern char ** InternalName$35$get_view(void);

#if INDEX
#define InternalName_C_get_view_p_v InternalName$35$get_view
#endif

// C++ _inCAAAAjlgd() ==> InternalName$_$register_with_read_factory()()
extern void InternalName$36$register_with_read_factory(void);

#if INDEX
#define InternalName_C_register_with_read_factory_v_v InternalName$36$register_with_read_factory
#endif

// C++ _inCAAAAV26P(BamWriter *manager, Datagram &me) ==> InternalName$_$write_datagram(InternalName *param0, BamWriter *param1, Datagram *param2)(InternalName *, BamWriter *, Datagram *)
extern void InternalName$37$write_datagram(InternalName *self, BamWriter *manager, Datagram *me);

#if INDEX
#define InternalName_C_write_datagram_v_ppp InternalName$37$write_datagram
#endif

// C++ _inCAAAAmP2E(BamReader *manager) ==> InternalName$_$finalize(InternalName *param0, BamReader *param1)(InternalName *, BamReader *)
extern void InternalName$38$finalize(InternalName *self, BamReader *manager);

#if INDEX
#define InternalName_C_finalize_v_pp InternalName$38$finalize
#endif

// C++ _inCAAAAAZei() ==> InternalName$_$get_class_type()()
extern int InternalName$39$get_class_type(void);

#if INDEX
#define InternalName_C_get_class_type_i_v InternalName$39$get_class_type
#endif

// C++ _inCAAAAlJaU() ==> InternalName$_$init_type()()
extern void InternalName$40$init_type(void);

#if INDEX
#define InternalName_C_init_type_v_v InternalName$40$init_type
#endif

// C++ _inCAAAAQn6E() ==> InternalName$_$get_type(InternalName const *param0)(InternalName const *)
extern int InternalName$41$get_type(InternalName const *self);

#if INDEX
#define InternalName_C_get_type_i_p InternalName$41$get_type
#endif

// C++ _inCAAAAENPw() ==> InternalName$_$force_init_type(InternalName *param0)(InternalName *)
extern int InternalName$42$force_init_type(InternalName *self);

#if INDEX
#define InternalName_C_force_init_type_i_p InternalName$42$force_init_type
#endif


// LPoint2d

// C++ _inCAAAAtKnR() ==> LPoint2d$_$LPoint2d()()
extern LPoint2d * LPoint2d$1$LPoint2d(void);

#if INDEX
#define LPoint2d_C_ctor_p_v LPoint2d$1$LPoint2d
#endif

// C++ _inCAAAAJNdF(LPoint2d const &) ==> LPoint2d$_$LPoint2d(LPoint2d const *param0)(LPoint2d const *)
extern LPoint2d * LPoint2d$2$LPoint2d(LPoint2d const *arg0);

#if INDEX
#define LPoint2d_C_ctor_p_p LPoint2d$2$LPoint2d
#endif

// C++ _inCAAAAkCZP(LVecBase2d const &copy) ==> LPoint2d$_$LPoint2d(LVecBase2d const *param0)(LVecBase2d const *)
extern LPoint2d * LPoint2d$3$LPoint2d(LVecBase2d const *copy);
// COLLISION : LPoint2d_C_ctor_p_p LPoint2d$3$LPoint2d

// C++ _inCAAAA38Ro(double fill_value) ==> LPoint2d$_$LPoint2d(double param0)(double)
extern LPoint2d * LPoint2d$4$LPoint2d(double fill_value);

#if INDEX
#define LPoint2d_C_ctor_p_d LPoint2d$4$LPoint2d
#endif

// C++ _inCAAAAVLaV(double x, double y) ==> LPoint2d$_$LPoint2d(double param0, double param1)(double, double)
extern LPoint2d * LPoint2d$5$LPoint2d(double x, double y);

#if INDEX
#define LPoint2d_C_ctor_p_dd LPoint2d$5$LPoint2d
#endif

// C++ _inCAAAArnmp() ==> LPoint2d$_$zero()()
extern LPoint2d const * LPoint2d$6$zero(void);

#if INDEX
#define LPoint2d_C_zero_p_v LPoint2d$6$zero
#endif

// C++ _inCAAAAAGP2() ==> LPoint2d$_$unit_x()()
extern LPoint2d const * LPoint2d$7$unit_x(void);

#if INDEX
#define LPoint2d_C_unit_x_p_v LPoint2d$7$unit_x
#endif

// C++ _inCAAAAYRZ2() ==> LPoint2d$_$unit_y()()
extern LPoint2d const * LPoint2d$8$unit_y(void);

#if INDEX
#define LPoint2d_C_unit_y_p_v LPoint2d$8$unit_y
#endif

// C++ _inCAAAAdqyw() ==> LPoint2d$_$normalized(LPoint2d const *param0)(LPoint2d const *)
extern LPoint2d * LPoint2d$9$normalized(LPoint2d const *self);

#if INDEX
#define LPoint2d_C_normalized_p_p LPoint2d$9$normalized
#endif

// C++ _inCAAAAi_k4(LVecBase2d const &onto) ==> LPoint2d$_$project(LPoint2d const *param0, LVecBase2d const *param1)(LPoint2d const *, LVecBase2d const *)
extern LPoint2d * LPoint2d$10$project(LPoint2d const *self, LVecBase2d const *onto);

#if INDEX
#define LPoint2d_C_project_p_pp LPoint2d$10$project
#endif

// C++ _inCAAAAmtGF() ==> LPoint2d$_$get_class_type()()
extern int LPoint2d$11$get_class_type(void);

#if INDEX
#define LPoint2d_C_get_class_type_i_v LPoint2d$11$get_class_type
#endif

// C++ _inCAAAA1Skj() ==> LPoint2d$_$init_type()()
extern void LPoint2d$12$init_type(void);

#if INDEX
#define LPoint2d_C_init_type_v_v LPoint2d$12$init_type
#endif


// LPoint2f

// C++ _inCAAAAzKKY() ==> LPoint2f$_$LPoint2f()()
extern LPoint2f * LPoint2f$1$LPoint2f(void);

#if INDEX
#define LPoint2f_C_ctor_p_v LPoint2f$1$LPoint2f
#endif

// C++ _inCAAAADtDz(LPoint2f const &) ==> LPoint2f$_$LPoint2f(LPoint2f const *param0)(LPoint2f const *)
extern LPoint2f * LPoint2f$2$LPoint2f(LPoint2f const *arg0);

#if INDEX
#define LPoint2f_C_ctor_p_p LPoint2f$2$LPoint2f
#endif

// C++ _inCAAAAtY8N(LVecBase2f const &copy) ==> LPoint2f$_$LPoint2f(LVecBase2f const *param0)(LVecBase2f const *)
extern LPoint2f * LPoint2f$3$LPoint2f(LVecBase2f const *copy);
// COLLISION : LPoint2f_C_ctor_p_p LPoint2f$3$LPoint2f

// C++ _inCAAAACtvQ(float fill_value) ==> LPoint2f$_$LPoint2f(float param0)(float)
extern LPoint2f * LPoint2f$4$LPoint2f(float fill_value);

#if INDEX
#define LPoint2f_C_ctor_p_f LPoint2f$4$LPoint2f
#endif

// C++ _inCAAAAqlQB(float x, float y) ==> LPoint2f$_$LPoint2f(float param0, float param1)(float, float)
extern LPoint2f * LPoint2f$5$LPoint2f(float x, float y);

#if INDEX
#define LPoint2f_C_ctor_p_ff LPoint2f$5$LPoint2f
#endif

// C++ _inCAAAAqnt3() ==> LPoint2f$_$zero()()
extern LPoint2f const * LPoint2f$6$zero(void);

#if INDEX
#define LPoint2f_C_zero_p_v LPoint2f$6$zero
#endif

// C++ _inCAAAACGWE() ==> LPoint2f$_$unit_x()()
extern LPoint2f const * LPoint2f$7$unit_x(void);

#if INDEX
#define LPoint2f_C_unit_x_p_v LPoint2f$7$unit_x
#endif

// C++ _inCAAAAaRgE() ==> LPoint2f$_$unit_y()()
extern LPoint2f const * LPoint2f$8$unit_y(void);

#if INDEX
#define LPoint2f_C_unit_y_p_v LPoint2f$8$unit_y
#endif

// C++ _inCAAAASq5_() ==> LPoint2f$_$normalized(LPoint2f const *param0)(LPoint2f const *)
extern LPoint2f * LPoint2f$9$normalized(LPoint2f const *self);

#if INDEX
#define LPoint2f_C_normalized_p_p LPoint2f$9$normalized
#endif

// C++ _inCAAAAP_bo(LVecBase2f const &onto) ==> LPoint2f$_$project(LPoint2f const *param0, LVecBase2f const *param1)(LPoint2f const *, LVecBase2f const *)
extern LPoint2f * LPoint2f$10$project(LPoint2f const *self, LVecBase2f const *onto);

#if INDEX
#define LPoint2f_C_project_p_pp LPoint2f$10$project
#endif

// C++ _inCAAAAntNT() ==> LPoint2f$_$get_class_type()()
extern int LPoint2f$11$get_class_type(void);

#if INDEX
#define LPoint2f_C_get_class_type_i_v LPoint2f$11$get_class_type
#endif

// C++ _inCAAAA0Stx() ==> LPoint2f$_$init_type()()
extern void LPoint2f$12$init_type(void);

#if INDEX
#define LPoint2f_C_init_type_v_v LPoint2f$12$init_type
#endif


// LPoint2i

// C++ _inCAAAA8q_h() ==> LPoint2i$_$LPoint2i()()
extern LPoint2i * LPoint2i$1$LPoint2i(void);

#if INDEX
#define LPoint2i_C_ctor_p_v LPoint2i$1$LPoint2i
#endif

// C++ _inCAAAA5_d3(LPoint2i const &) ==> LPoint2i$_$LPoint2i(LPoint2i const *param0)(LPoint2i const *)
extern LPoint2i * LPoint2i$2$LPoint2i(LPoint2i const *arg0);

#if INDEX
#define LPoint2i_C_ctor_p_p LPoint2i$2$LPoint2i
#endif

// C++ _inCAAAAzLwr(LVecBase2i const &copy) ==> LPoint2i$_$LPoint2i(LVecBase2i const *param0)(LVecBase2i const *)
extern LPoint2i * LPoint2i$3$LPoint2i(LVecBase2i const *copy);
// COLLISION : LPoint2i_C_ctor_p_p LPoint2i$3$LPoint2i

// C++ _inCAAAAWar6(int fill_value) ==> LPoint2i$_$LPoint2i(int param0)(int)
extern LPoint2i * LPoint2i$4$LPoint2i(int fill_value);

#if INDEX
#define LPoint2i_C_ctor_p_i LPoint2i$4$LPoint2i
#endif

// C++ _inCAAAA87LW(int x, int y) ==> LPoint2i$_$LPoint2i(int param0, int param1)(int, int)
extern LPoint2i * LPoint2i$5$LPoint2i(int x, int y);

#if INDEX
#define LPoint2i_C_ctor_p_ii LPoint2i$5$LPoint2i
#endif

// C++ _inCAAAAkH3s() ==> LPoint2i$_$zero()()
extern LPoint2i const * LPoint2i$6$zero(void);

#if INDEX
#define LPoint2i_C_zero_p_v LPoint2i$6$zero
#endif

// C++ _inCAAAADmg5() ==> LPoint2i$_$unit_x()()
extern LPoint2i const * LPoint2i$7$unit_x(void);

#if INDEX
#define LPoint2i_C_unit_x_p_v LPoint2i$7$unit_x
#endif

// C++ _inCAAAAbxq5() ==> LPoint2i$_$unit_y()()
extern LPoint2i const * LPoint2i$8$unit_y(void);

#if INDEX
#define LPoint2i_C_unit_y_p_v LPoint2i$8$unit_y
#endif

// C++ _inCAAAApNXI() ==> LPoint2i$_$get_class_type()()
extern int LPoint2i$9$get_class_type(void);

#if INDEX
#define LPoint2i_C_get_class_type_i_v LPoint2i$9$get_class_type
#endif

// C++ _inCAAAAyy3m() ==> LPoint2i$_$init_type()()
extern void LPoint2i$10$init_type(void);

#if INDEX
#define LPoint2i_C_init_type_v_v LPoint2i$10$init_type
#endif


// LPoint3d

// C++ _inCAAAAt3tX() ==> LPoint3d$_$LPoint3d()()
extern LPoint3d * LPoint3d$1$LPoint3d(void);

#if INDEX
#define LPoint3d_C_ctor_p_v LPoint3d$1$LPoint3d
#endif

// C++ _inCAAAApSLM(LPoint3d const &) ==> LPoint3d$_$LPoint3d(LPoint3d const *param0)(LPoint3d const *)
extern LPoint3d * LPoint3d$2$LPoint3d(LPoint3d const *arg0);

#if INDEX
#define LPoint3d_C_ctor_p_p LPoint3d$2$LPoint3d
#endif

// C++ _inCAAAA9DSo(LVecBase2d const &copy, double z) ==> LPoint3d$_$LPoint3d(LVecBase2d const *param0, double param1)(LVecBase2d const *, double)
extern LPoint3d * LPoint3d$3$LPoint3d(LVecBase2d const *copy, double z);

#if INDEX
#define LPoint3d_C_ctor_p_pd LPoint3d$3$LPoint3d
#endif

// C++ _inCAAAASkXG(LVecBase3d const &copy) ==> LPoint3d$_$LPoint3d(LVecBase3d const *param0)(LVecBase3d const *)
extern LPoint3d * LPoint3d$4$LPoint3d(LVecBase3d const *copy);
// COLLISION : LPoint3d_C_ctor_p_p LPoint3d$4$LPoint3d

// C++ _inCAAAA3ZYu(double fill_value) ==> LPoint3d$_$LPoint3d(double param0)(double)
extern LPoint3d * LPoint3d$5$LPoint3d(double fill_value);

#if INDEX
#define LPoint3d_C_ctor_p_d LPoint3d$5$LPoint3d
#endif

// C++ _inCAAAAk1qU(double x, double y, double z) ==> LPoint3d$_$LPoint3d(double param0, double param1, double param2)(double, double, double)
extern LPoint3d * LPoint3d$6$LPoint3d(double x, double y, double z);

#if INDEX
#define LPoint3d_C_ctor_p_ddd LPoint3d$6$LPoint3d
#endif

// C++ _inCAAAAru0q() ==> LPoint3d$_$zero()()
extern LPoint3d const * LPoint3d$7$zero(void);

#if INDEX
#define LPoint3d_C_zero_p_v LPoint3d$7$zero
#endif

// C++ _inCAAAAAPd3() ==> LPoint3d$_$unit_x()()
extern LPoint3d const * LPoint3d$8$unit_x(void);

#if INDEX
#define LPoint3d_C_unit_x_p_v LPoint3d$8$unit_x
#endif

// C++ _inCAAAAYen3() ==> LPoint3d$_$unit_y()()
extern LPoint3d const * LPoint3d$9$unit_y(void);

#if INDEX
#define LPoint3d_C_unit_y_p_v LPoint3d$9$unit_y
#endif

// C++ _inCAAAAQpw3() ==> LPoint3d$_$unit_z()()
extern LPoint3d const * LPoint3d$10$unit_z(void);

#if INDEX
#define LPoint3d_C_unit_z_p_v LPoint3d$10$unit_z
#endif

// C++ _inCAAAAOilp() ==> LPoint3d$_$get_xy(LPoint3d const *param0)(LPoint3d const *)
extern LPoint2d * LPoint3d$11$get_xy(LPoint3d const *self);

#if INDEX
#define LPoint3d_C_get_xy_p_p LPoint3d$11$get_xy
#endif

// C++ _inCAAAAWTvp() ==> LPoint3d$_$get_xz(LPoint3d const *param0)(LPoint3d const *)
extern LPoint2d * LPoint3d$12$get_xz(LPoint3d const *self);

#if INDEX
#define LPoint3d_C_get_xz_p_p LPoint3d$12$get_xz
#endif

// C++ _inCAAAAIHvZ() ==> LPoint3d$_$get_yz(LPoint3d const *param0)(LPoint3d const *)
extern LPoint2d * LPoint3d$13$get_yz(LPoint3d const *self);

#if INDEX
#define LPoint3d_C_get_yz_p_p LPoint3d$13$get_yz
#endif

// C++ _inCAAAAwvhl(LVecBase3d const &other) ==> LPoint3d$_$cross(LPoint3d const *param0, LVecBase3d const *param1)(LPoint3d const *, LVecBase3d const *)
extern LPoint3d * LPoint3d$14$cross(LPoint3d const *self, LVecBase3d const *other);

#if INDEX
#define LPoint3d_C_cross_p_pp LPoint3d$14$cross
#endif

// C++ _inCAAAAdTAy() ==> LPoint3d$_$normalized(LPoint3d const *param0)(LPoint3d const *)
extern LPoint3d * LPoint3d$15$normalized(LPoint3d const *self);

#if INDEX
#define LPoint3d_C_normalized_p_p LPoint3d$15$normalized
#endif

// C++ _inCAAAAjmUN(LVecBase3d const &onto) ==> LPoint3d$_$project(LPoint3d const *param0, LVecBase3d const *param1)(LPoint3d const *, LVecBase3d const *)
extern LPoint3d * LPoint3d$16$project(LPoint3d const *self, LVecBase3d const *onto);

#if INDEX
#define LPoint3d_C_project_p_pp LPoint3d$16$project
#endif

// C++ _inCAAAAXRr5(CoordinateSystem cs) ==> LPoint3d$_$origin(CoordinateSystem param0)(CoordinateSystem)
extern LPoint3d const * LPoint3d$17$origin(CoordinateSystem cs);

#if INDEX
#define LPoint3d_C_origin_p_p LPoint3d$17$origin
#endif

// C++ _inCAAAAN1zx() ==> LPoint3d$_$origin()()
extern LPoint3d const * LPoint3d$18$origin(void);

#if INDEX
#define LPoint3d_C_origin_p_v LPoint3d$18$origin
#endif

// C++ _inCAAAAx8Y0(double right, double fwd, double up, CoordinateSystem cs) ==> LPoint3d$_$rfu(double param0, double param1, double param2, CoordinateSystem param3)(double, double, double, CoordinateSystem)
extern LPoint3d * LPoint3d$19$rfu(double right, double fwd, double up, CoordinateSystem cs);

#if INDEX
#define LPoint3d_C_rfu_p_dddp LPoint3d$19$rfu
#endif

// C++ _inCAAAAs_qG(double right, double fwd, double up) ==> LPoint3d$_$rfu(double param0, double param1, double param2)(double, double, double)
extern LPoint3d * LPoint3d$20$rfu(double right, double fwd, double up);

#if INDEX
#define LPoint3d_C_rfu_p_ddd LPoint3d$20$rfu
#endif

// C++ _inCAAAAmkUG() ==> LPoint3d$_$get_class_type()()
extern int LPoint3d$21$get_class_type(void);

#if INDEX
#define LPoint3d_C_get_class_type_i_v LPoint3d$21$get_class_type
#endif

// C++ _inCAAAA1byk() ==> LPoint3d$_$init_type()()
extern void LPoint3d$22$init_type(void);

#if INDEX
#define LPoint3d_C_init_type_v_v LPoint3d$22$init_type
#endif


// LPoint3f

// C++ _inCAAAAz3Qe() ==> LPoint3f$_$LPoint3f()()
extern LPoint3f * LPoint3f$1$LPoint3f(void);

#if INDEX
#define LPoint3f_C_ctor_p_v LPoint3f$1$LPoint3f
#endif

// C++ _inCAAAAjyx5(LPoint3f const &) ==> LPoint3f$_$LPoint3f(LPoint3f const *param0)(LPoint3f const *)
extern LPoint3f * LPoint3f$2$LPoint3f(LPoint3f const *arg0);

#if INDEX
#define LPoint3f_C_ctor_p_p LPoint3f$2$LPoint3f
#endif

// C++ _inCAAAAL4E1(LVecBase2f const &copy, float z) ==> LPoint3f$_$LPoint3f(LVecBase2f const *param0, float param1)(LVecBase2f const *, float)
extern LPoint3f * LPoint3f$3$LPoint3f(LVecBase2f const *copy, float z);

#if INDEX
#define LPoint3f_C_ctor_p_pf LPoint3f$3$LPoint3f
#endif

// C++ _inCAAAAb_6E(LVecBase3f const &copy) ==> LPoint3f$_$LPoint3f(LVecBase3f const *param0)(LVecBase3f const *)
extern LPoint3f * LPoint3f$4$LPoint3f(LVecBase3f const *copy);
// COLLISION : LPoint3f_C_ctor_p_p LPoint3f$4$LPoint3f

// C++ _inCAAAACO2W(float fill_value) ==> LPoint3f$_$LPoint3f(float param0)(float)
extern LPoint3f * LPoint3f$5$LPoint3f(float fill_value);

#if INDEX
#define LPoint3f_C_ctor_p_f LPoint3f$5$LPoint3f
#endif

// C++ _inCAAAAMxu6(float x, float y, float z) ==> LPoint3f$_$LPoint3f(float param0, float param1, float param2)(float, float, float)
extern LPoint3f * LPoint3f$6$LPoint3f(float x, float y, float z);

#if INDEX
#define LPoint3f_C_ctor_p_fff LPoint3f$6$LPoint3f
#endif

// C++ _inCAAAAqu74() ==> LPoint3f$_$zero()()
extern LPoint3f const * LPoint3f$7$zero(void);

#if INDEX
#define LPoint3f_C_zero_p_v LPoint3f$7$zero
#endif

// C++ _inCAAAACPkF() ==> LPoint3f$_$unit_x()()
extern LPoint3f const * LPoint3f$8$unit_x(void);

#if INDEX
#define LPoint3f_C_unit_x_p_v LPoint3f$8$unit_x
#endif

// C++ _inCAAAAaeuF() ==> LPoint3f$_$unit_y()()
extern LPoint3f const * LPoint3f$9$unit_y(void);

#if INDEX
#define LPoint3f_C_unit_y_p_v LPoint3f$9$unit_y
#endif

// C++ _inCAAAASp3F() ==> LPoint3f$_$unit_z()()
extern LPoint3f const * LPoint3f$10$unit_z(void);

#if INDEX
#define LPoint3f_C_unit_z_p_v LPoint3f$10$unit_z
#endif

// C++ _inCAAAAxis3() ==> LPoint3f$_$get_xy(LPoint3f const *param0)(LPoint3f const *)
extern LPoint2f * LPoint3f$11$get_xy(LPoint3f const *self);

#if INDEX
#define LPoint3f_C_get_xy_p_p LPoint3f$11$get_xy
#endif

// C++ _inCAAAApT23() ==> LPoint3f$_$get_xz(LPoint3f const *param0)(LPoint3f const *)
extern LPoint2f * LPoint3f$12$get_xz(LPoint3f const *self);

#if INDEX
#define LPoint3f_C_get_xz_p_p LPoint3f$12$get_xz
#endif

// C++ _inCAAAALH2n() ==> LPoint3f$_$get_yz(LPoint3f const *param0)(LPoint3f const *)
extern LPoint2f * LPoint3f$13$get_yz(LPoint3f const *self);

#if INDEX
#define LPoint3f_C_get_yz_p_p LPoint3f$13$get_yz
#endif

// C++ _inCAAAA3m20(LVecBase3f const &other) ==> LPoint3f$_$cross(LPoint3f const *param0, LVecBase3f const *param1)(LPoint3f const *, LVecBase3f const *)
extern LPoint3f * LPoint3f$14$cross(LPoint3f const *self, LVecBase3f const *other);

#if INDEX
#define LPoint3f_C_cross_p_pp LPoint3f$14$cross
#endif

// C++ _inCAAAATTHA() ==> LPoint3f$_$normalized(LPoint3f const *param0)(LPoint3f const *)
extern LPoint3f * LPoint3f$15$normalized(LPoint3f const *self);

#if INDEX
#define LPoint3f_C_normalized_p_p LPoint3f$15$normalized
#endif

// C++ _inCAAAAPmL9(LVecBase3f const &onto) ==> LPoint3f$_$project(LPoint3f const *param0, LVecBase3f const *param1)(LPoint3f const *, LVecBase3f const *)
extern LPoint3f * LPoint3f$16$project(LPoint3f const *self, LVecBase3f const *onto);

#if INDEX
#define LPoint3f_C_project_p_pp LPoint3f$16$project
#endif

// C++ _inCAAAAVRyH(CoordinateSystem cs) ==> LPoint3f$_$origin(CoordinateSystem param0)(CoordinateSystem)
extern LPoint3f const * LPoint3f$17$origin(CoordinateSystem cs);

#if INDEX
#define LPoint3f_C_origin_p_p LPoint3f$17$origin
#endif

// C++ _inCAAAAM16_() ==> LPoint3f$_$origin()()
extern LPoint3f const * LPoint3f$18$origin(void);

#if INDEX
#define LPoint3f_C_origin_p_v LPoint3f$18$origin
#endif

// C++ _inCAAAAkaIy(float right, float fwd, float up, CoordinateSystem cs) ==> LPoint3f$_$rfu(float param0, float param1, float param2, CoordinateSystem param3)(float, float, float, CoordinateSystem)
extern LPoint3f * LPoint3f$19$rfu(float right, float fwd, float up, CoordinateSystem cs);

#if INDEX
#define LPoint3f_C_rfu_p_fffp LPoint3f$19$rfu
#endif

// C++ _inCAAAA2tjk(float right, float fwd, float up) ==> LPoint3f$_$rfu(float param0, float param1, float param2)(float, float, float)
extern LPoint3f * LPoint3f$20$rfu(float right, float fwd, float up);

#if INDEX
#define LPoint3f_C_rfu_p_fff LPoint3f$20$rfu
#endif

// C++ _inCAAAAnkbU() ==> LPoint3f$_$get_class_type()()
extern int LPoint3f$21$get_class_type(void);

#if INDEX
#define LPoint3f_C_get_class_type_i_v LPoint3f$21$get_class_type
#endif

// C++ _inCAAAA0b7y() ==> LPoint3f$_$init_type()()
extern void LPoint3f$22$init_type(void);

#if INDEX
#define LPoint3f_C_init_type_v_v LPoint3f$22$init_type
#endif


// LPoint3i

// C++ _inCAAAA8XFo() ==> LPoint3i$_$LPoint3i()()
extern LPoint3i * LPoint3i$1$LPoint3i(void);

#if INDEX
#define LPoint3i_C_ctor_p_v LPoint3i$1$LPoint3i
#endif

// C++ _inCAAAAZBL_(LPoint3i const &) ==> LPoint3i$_$LPoint3i(LPoint3i const *param0)(LPoint3i const *)
extern LPoint3i * LPoint3i$2$LPoint3i(LPoint3i const *arg0);

#if INDEX
#define LPoint3i_C_ctor_p_p LPoint3i$2$LPoint3i
#endif

// C++ _inCAAAApsqB(LVecBase2i const &copy, int z) ==> LPoint3i$_$LPoint3i(LVecBase2i const *param0, int param1)(LVecBase2i const *, int)
extern LPoint3i * LPoint3i$3$LPoint3i(LVecBase2i const *copy, int z);

#if INDEX
#define LPoint3i_C_ctor_p_pi LPoint3i$3$LPoint3i
#endif

// C++ _inCAAAApsvi(LVecBase3i const &copy) ==> LPoint3i$_$LPoint3i(LVecBase3i const *param0)(LVecBase3i const *)
extern LPoint3i * LPoint3i$4$LPoint3i(LVecBase3i const *copy);
// COLLISION : LPoint3i_C_ctor_p_p LPoint3i$4$LPoint3i

// C++ _inCAAAAX_xA(int fill_value) ==> LPoint3i$_$LPoint3i(int param0)(int)
extern LPoint3i * LPoint3i$5$LPoint3i(int fill_value);

#if INDEX
#define LPoint3i_C_ctor_p_i LPoint3i$5$LPoint3i
#endif

// C++ _inCAAAATdST(int x, int y, int z) ==> LPoint3i$_$LPoint3i(int param0, int param1, int param2)(int, int, int)
extern LPoint3i * LPoint3i$6$LPoint3i(int x, int y, int z);

#if INDEX
#define LPoint3i_C_ctor_p_iii LPoint3i$6$LPoint3i
#endif

// C++ _inCAAAAkOFu() ==> LPoint3i$_$zero()()
extern LPoint3i const * LPoint3i$7$zero(void);

#if INDEX
#define LPoint3i_C_zero_p_v LPoint3i$7$zero
#endif

// C++ _inCAAAADvu6() ==> LPoint3i$_$unit_x()()
extern LPoint3i const * LPoint3i$8$unit_x(void);

#if INDEX
#define LPoint3i_C_unit_x_p_v LPoint3i$8$unit_x
#endif

// C++ _inCAAAAb_46() ==> LPoint3i$_$unit_y()()
extern LPoint3i const * LPoint3i$9$unit_y(void);

#if INDEX
#define LPoint3i_C_unit_y_p_v LPoint3i$9$unit_y
#endif

// C++ _inCAAAATJC7() ==> LPoint3i$_$unit_z()()
extern LPoint3i const * LPoint3i$10$unit_z(void);

#if INDEX
#define LPoint3i_C_unit_z_p_v LPoint3i$10$unit_z
#endif

// C++ _inCAAAAzC3s() ==> LPoint3i$_$get_xy(LPoint3i const *param0)(LPoint3i const *)
extern LPoint2i * LPoint3i$11$get_xy(LPoint3i const *self);

#if INDEX
#define LPoint3i_C_get_xy_p_p LPoint3i$11$get_xy
#endif

// C++ _inCAAAArzAt() ==> LPoint3i$_$get_xz(LPoint3i const *param0)(LPoint3i const *)
extern LPoint2i * LPoint3i$12$get_xz(LPoint3i const *self);

#if INDEX
#define LPoint3i_C_get_xz_p_p LPoint3i$12$get_xz
#endif

// C++ _inCAAAANnAd() ==> LPoint3i$_$get_yz(LPoint3i const *param0)(LPoint3i const *)
extern LPoint2i * LPoint3i$13$get_yz(LPoint3i const *self);

#if INDEX
#define LPoint3i_C_get_yz_p_p LPoint3i$13$get_yz
#endif

// C++ _inCAAAAV42r(LVecBase3i const &other) ==> LPoint3i$_$cross(LPoint3i const *param0, LVecBase3i const *param1)(LPoint3i const *, LVecBase3i const *)
extern LPoint3i * LPoint3i$14$cross(LPoint3i const *self, LVecBase3i const *other);

#if INDEX
#define LPoint3i_C_cross_p_pp LPoint3i$14$cross
#endif

// C++ _inCAAAAUx98(CoordinateSystem cs) ==> LPoint3i$_$origin(CoordinateSystem param0)(CoordinateSystem)
extern LPoint3i const * LPoint3i$15$origin(CoordinateSystem cs);

#if INDEX
#define LPoint3i_C_origin_p_p LPoint3i$15$origin
#endif

// C++ _inCAAAAOVE1() ==> LPoint3i$_$origin()()
extern LPoint3i const * LPoint3i$16$origin(void);

#if INDEX
#define LPoint3i_C_origin_p_v LPoint3i$16$origin
#endif

// C++ _inCAAAAShPP(int right, int fwd, int up, CoordinateSystem cs) ==> LPoint3i$_$rfu(int param0, int param1, int param2, CoordinateSystem param3)(int, int, int, CoordinateSystem)
extern LPoint3i * LPoint3i$17$rfu(int right, int fwd, int up, CoordinateSystem cs);

#if INDEX
#define LPoint3i_C_rfu_p_iiip LPoint3i$17$rfu
#endif

// C++ _inCAAAArQFh(int right, int fwd, int up) ==> LPoint3i$_$rfu(int param0, int param1, int param2)(int, int, int)
extern LPoint3i * LPoint3i$18$rfu(int right, int fwd, int up);

#if INDEX
#define LPoint3i_C_rfu_p_iii LPoint3i$18$rfu
#endif

// C++ _inCAAAApElJ() ==> LPoint3i$_$get_class_type()()
extern int LPoint3i$19$get_class_type(void);

#if INDEX
#define LPoint3i_C_get_class_type_i_v LPoint3i$19$get_class_type
#endif

// C++ _inCAAAAy7Fo() ==> LPoint3i$_$init_type()()
extern void LPoint3i$20$init_type(void);

#if INDEX
#define LPoint3i_C_init_type_v_v LPoint3i$20$init_type
#endif


// LPoint4d

// C++ _inCAAAAtU0d() ==> LPoint4d$_$LPoint4d()()
extern LPoint4d * LPoint4d$1$LPoint4d(void);

#if INDEX
#define LPoint4d_C_ctor_p_v LPoint4d$1$LPoint4d
#endif

// C++ _inCAAAAJ44S(LPoint4d const &) ==> LPoint4d$_$LPoint4d(LPoint4d const *param0)(LPoint4d const *)
extern LPoint4d * LPoint4d$2$LPoint4d(LPoint4d const *arg0);

#if INDEX
#define LPoint4d_C_ctor_p_p LPoint4d$2$LPoint4d
#endif

// C++ _inCAAAAzkRf(LVecBase3d const &copy, double w) ==> LPoint4d$_$LPoint4d(LVecBase3d const *param0, double param1)(LVecBase3d const *, double)
extern LPoint4d * LPoint4d$3$LPoint4d(LVecBase3d const *copy, double w);

#if INDEX
#define LPoint4d_C_ctor_p_pd LPoint4d$3$LPoint4d
#endif

// C++ _inCAAAAJZW9(LVecBase4d const &copy) ==> LPoint4d$_$LPoint4d(LVecBase4d const *param0)(LVecBase4d const *)
extern LPoint4d * LPoint4d$4$LPoint4d(LVecBase4d const *copy);
// COLLISION : LPoint4d_C_ctor_p_p LPoint4d$4$LPoint4d

// C++ _inCAAAA36e0(double fill_value) ==> LPoint4d$_$LPoint4d(double param0)(double)
extern LPoint4d * LPoint4d$5$LPoint4d(double fill_value);

#if INDEX
#define LPoint4d_C_ctor_p_d LPoint4d$5$LPoint4d
#endif

// C++ _inCAAAACpeG(double x, double y, double z, double w) ==> LPoint4d$_$LPoint4d(double param0, double param1, double param2, double param3)(double, double, double, double)
extern LPoint4d * LPoint4d$6$LPoint4d(double x, double y, double z, double w);

#if INDEX
#define LPoint4d_C_ctor_p_dddd LPoint4d$6$LPoint4d
#endif

// C++ _inCAAAAr1Cs() ==> LPoint4d$_$zero()()
extern LPoint4d const * LPoint4d$7$zero(void);

#if INDEX
#define LPoint4d_C_zero_p_v LPoint4d$7$zero
#endif

// C++ _inCAAAAA0r4() ==> LPoint4d$_$unit_x()()
extern LPoint4d const * LPoint4d$8$unit_x(void);

#if INDEX
#define LPoint4d_C_unit_x_p_v LPoint4d$8$unit_x
#endif

// C++ _inCAAAAYH14() ==> LPoint4d$_$unit_y()()
extern LPoint4d const * LPoint4d$9$unit_y(void);

#if INDEX
#define LPoint4d_C_unit_y_p_v LPoint4d$9$unit_y
#endif

// C++ _inCAAAAQW_4() ==> LPoint4d$_$unit_z()()
extern LPoint4d const * LPoint4d$10$unit_z(void);

#if INDEX
#define LPoint4d_C_unit_z_p_v LPoint4d$10$unit_z
#endif

// C++ _inCAAAAIlh4() ==> LPoint4d$_$unit_w()()
extern LPoint4d const * LPoint4d$11$unit_w(void);

#if INDEX
#define LPoint4d_C_unit_w_p_v LPoint4d$11$unit_w
#endif

// C++ _inCAAAAnoZd() ==> LPoint4d$_$get_xyz(LPoint4d const *param0)(LPoint4d const *)
extern LPoint3d * LPoint4d$12$get_xyz(LPoint4d const *self);

#if INDEX
#define LPoint4d_C_get_xyz_p_p LPoint4d$12$get_xyz
#endif

// C++ _inCAAAAO5zq() ==> LPoint4d$_$get_xy(LPoint4d const *param0)(LPoint4d const *)
extern LPoint2d * LPoint4d$13$get_xy(LPoint4d const *self);

#if INDEX
#define LPoint4d_C_get_xy_p_p LPoint4d$13$get_xy
#endif

// C++ _inCAAAAdcOz() ==> LPoint4d$_$normalized(LPoint4d const *param0)(LPoint4d const *)
extern LPoint4d * LPoint4d$14$normalized(LPoint4d const *self);

#if INDEX
#define LPoint4d_C_normalized_p_p LPoint4d$14$normalized
#endif

// C++ _inCAAAAjtEi(LVecBase4d const &onto) ==> LPoint4d$_$project(LPoint4d const *param0, LVecBase4d const *param1)(LPoint4d const *, LVecBase4d const *)
extern LPoint4d * LPoint4d$15$project(LPoint4d const *self, LVecBase4d const *onto);

#if INDEX
#define LPoint4d_C_project_p_pp LPoint4d$15$project
#endif

// C++ _inCAAAAmbiH() ==> LPoint4d$_$get_class_type()()
extern int LPoint4d$16$get_class_type(void);

#if INDEX
#define LPoint4d_C_get_class_type_i_v LPoint4d$16$get_class_type
#endif

// C++ _inCAAAA1gAm() ==> LPoint4d$_$init_type()()
extern void LPoint4d$17$init_type(void);

#if INDEX
#define LPoint4d_C_init_type_v_v LPoint4d$17$init_type
#endif


// LPoint4f

// C++ _inCAAAAzUXk() ==> LPoint4f$_$LPoint4f()()
extern LPoint4f * LPoint4f$1$LPoint4f(void);

#if INDEX
#define LPoint4f_C_ctor_p_v LPoint4f$1$LPoint4f
#endif

// C++ _inCAAAACYfA(LPoint4f const &) ==> LPoint4f$_$LPoint4f(LPoint4f const *param0)(LPoint4f const *)
extern LPoint4f * LPoint4f$2$LPoint4f(LPoint4f const *arg0);

#if INDEX
#define LPoint4f_C_ctor_p_p LPoint4f$2$LPoint4f
#endif

// C++ _inCAAAA9aCs(LVecBase3f const &copy, float w) ==> LPoint4f$_$LPoint4f(LVecBase3f const *param0, float param1)(LVecBase3f const *, float)
extern LPoint4f * LPoint4f$3$LPoint4f(LVecBase3f const *copy, float w);

#if INDEX
#define LPoint4f_C_ctor_p_pf LPoint4f$3$LPoint4f
#endif

// C++ _inCAAAASD57(LVecBase4f const &copy) ==> LPoint4f$_$LPoint4f(LVecBase4f const *param0)(LVecBase4f const *)
extern LPoint4f * LPoint4f$4$LPoint4f(LVecBase4f const *copy);
// COLLISION : LPoint4f_C_ctor_p_p LPoint4f$4$LPoint4f

// C++ _inCAAAACj8c(float fill_value) ==> LPoint4f$_$LPoint4f(float param0)(float)
extern LPoint4f * LPoint4f$5$LPoint4f(float fill_value);

#if INDEX
#define LPoint4f_C_ctor_p_f LPoint4f$5$LPoint4f
#endif

// C++ _inCAAAAzr8M(float x, float y, float z, float w) ==> LPoint4f$_$LPoint4f(float param0, float param1, float param2, float param3)(float, float, float, float)
extern LPoint4f * LPoint4f$6$LPoint4f(float x, float y, float z, float w);

#if INDEX
#define LPoint4f_C_ctor_p_ffff LPoint4f$6$LPoint4f
#endif

// C++ _inCAAAAq1J6() ==> LPoint4f$_$zero()()
extern LPoint4f const * LPoint4f$7$zero(void);

#if INDEX
#define LPoint4f_C_zero_p_v LPoint4f$7$zero
#endif

// C++ _inCAAAAC0yG() ==> LPoint4f$_$unit_x()()
extern LPoint4f const * LPoint4f$8$unit_x(void);

#if INDEX
#define LPoint4f_C_unit_x_p_v LPoint4f$8$unit_x
#endif

// C++ _inCAAAAaH8G() ==> LPoint4f$_$unit_y()()
extern LPoint4f const * LPoint4f$9$unit_y(void);

#if INDEX
#define LPoint4f_C_unit_y_p_v LPoint4f$9$unit_y
#endif

// C++ _inCAAAASWGH() ==> LPoint4f$_$unit_z()()
extern LPoint4f const * LPoint4f$10$unit_z(void);

#if INDEX
#define LPoint4f_C_unit_z_p_v LPoint4f$10$unit_z
#endif

// C++ _inCAAAAKloG() ==> LPoint4f$_$unit_w()()
extern LPoint4f const * LPoint4f$11$unit_w(void);

#if INDEX
#define LPoint4f_C_unit_w_p_v LPoint4f$11$unit_w
#endif

// C++ _inCAAAAkogr() ==> LPoint4f$_$get_xyz(LPoint4f const *param0)(LPoint4f const *)
extern LPoint3f * LPoint4f$12$get_xyz(LPoint4f const *self);

#if INDEX
#define LPoint4f_C_get_xyz_p_p LPoint4f$12$get_xyz
#endif

// C++ _inCAAAAx564() ==> LPoint4f$_$get_xy(LPoint4f const *param0)(LPoint4f const *)
extern LPoint2f * LPoint4f$13$get_xy(LPoint4f const *self);

#if INDEX
#define LPoint4f_C_get_xy_p_p LPoint4f$13$get_xy
#endif

// C++ _inCAAAATcVB() ==> LPoint4f$_$normalized(LPoint4f const *param0)(LPoint4f const *)
extern LPoint4f * LPoint4f$14$normalized(LPoint4f const *self);

#if INDEX
#define LPoint4f_C_normalized_p_p LPoint4f$14$normalized
#endif

// C++ _inCAAAAIt7R(LVecBase4f const &onto) ==> LPoint4f$_$project(LPoint4f const *param0, LVecBase4f const *param1)(LPoint4f const *, LVecBase4f const *)
extern LPoint4f * LPoint4f$15$project(LPoint4f const *self, LVecBase4f const *onto);

#if INDEX
#define LPoint4f_C_project_p_pp LPoint4f$15$project
#endif

// C++ _inCAAAAnbpV() ==> LPoint4f$_$get_class_type()()
extern int LPoint4f$16$get_class_type(void);

#if INDEX
#define LPoint4f_C_get_class_type_i_v LPoint4f$16$get_class_type
#endif

// C++ _inCAAAA0gJ0() ==> LPoint4f$_$init_type()()
extern void LPoint4f$17$init_type(void);

#if INDEX
#define LPoint4f_C_init_type_v_v LPoint4f$17$init_type
#endif


// LPoint4i

// C++ _inCAAAA80Lu() ==> LPoint4i$_$LPoint4i()()
extern LPoint4i * LPoint4i$1$LPoint4i(void);

#if INDEX
#define LPoint4i_C_ctor_p_v LPoint4i$1$LPoint4i
#endif

// C++ _inCAAAA4r4E(LPoint4i const &) ==> LPoint4i$_$LPoint4i(LPoint4i const *param0)(LPoint4i const *)
extern LPoint4i * LPoint4i$2$LPoint4i(LPoint4i const *arg0);

#if INDEX
#define LPoint4i_C_ctor_p_p LPoint4i$2$LPoint4i
#endif

// C++ _inCAAAAwJp4(LVecBase3i const &copy, int w) ==> LPoint4i$_$LPoint4i(LVecBase3i const *param0, int param1)(LVecBase3i const *, int)
extern LPoint4i * LPoint4i$3$LPoint4i(LVecBase3i const *copy, int w);

#if INDEX
#define LPoint4i_C_ctor_p_pi LPoint4i$3$LPoint4i
#endif

// C++ _inCAAAAnRtZ(LVecBase4i const &copy) ==> LPoint4i$_$LPoint4i(LVecBase4i const *param0)(LVecBase4i const *)
extern LPoint4i * LPoint4i$4$LPoint4i(LVecBase4i const *copy);
// COLLISION : LPoint4i_C_ctor_p_p LPoint4i$4$LPoint4i

// C++ _inCAAAAXc4G(int fill_value) ==> LPoint4i$_$LPoint4i(int param0)(int)
extern LPoint4i * LPoint4i$5$LPoint4i(int fill_value);

#if INDEX
#define LPoint4i_C_ctor_p_i LPoint4i$5$LPoint4i
#endif

// C++ _inCAAAAl_bH(int x, int y, int z, int w) ==> LPoint4i$_$LPoint4i(int param0, int param1, int param2, int param3)(int, int, int, int)
extern LPoint4i * LPoint4i$6$LPoint4i(int x, int y, int z, int w);

#if INDEX
#define LPoint4i_C_ctor_p_iiii LPoint4i$6$LPoint4i
#endif

// C++ _inCAAAAkVTv() ==> LPoint4i$_$zero()()
extern LPoint4i const * LPoint4i$7$zero(void);

#if INDEX
#define LPoint4i_C_zero_p_v LPoint4i$7$zero
#endif

// C++ _inCAAAADU97() ==> LPoint4i$_$unit_x()()
extern LPoint4i const * LPoint4i$8$unit_x(void);

#if INDEX
#define LPoint4i_C_unit_x_p_v LPoint4i$8$unit_x
#endif

// C++ _inCAAAAbnG8() ==> LPoint4i$_$unit_y()()
extern LPoint4i const * LPoint4i$9$unit_y(void);

#if INDEX
#define LPoint4i_C_unit_y_p_v LPoint4i$9$unit_y
#endif

// C++ _inCAAAAT2Q8() ==> LPoint4i$_$unit_z()()
extern LPoint4i const * LPoint4i$10$unit_z(void);

#if INDEX
#define LPoint4i_C_unit_z_p_v LPoint4i$10$unit_z
#endif

// C++ _inCAAAALFz7() ==> LPoint4i$_$unit_w()()
extern LPoint4i const * LPoint4i$11$unit_w(void);

#if INDEX
#define LPoint4i_C_unit_w_p_v LPoint4i$11$unit_w
#endif

// C++ _inCAAAAiIqg() ==> LPoint4i$_$get_xyz(LPoint4i const *param0)(LPoint4i const *)
extern LPoint3i * LPoint4i$12$get_xyz(LPoint4i const *self);

#if INDEX
#define LPoint4i_C_get_xyz_p_p LPoint4i$12$get_xyz
#endif

// C++ _inCAAAAzZFu() ==> LPoint4i$_$get_xy(LPoint4i const *param0)(LPoint4i const *)
extern LPoint2i * LPoint4i$13$get_xy(LPoint4i const *self);

#if INDEX
#define LPoint4i_C_get_xy_p_p LPoint4i$13$get_xy
#endif

// C++ _inCAAAAp70K() ==> LPoint4i$_$get_class_type()()
extern int LPoint4i$14$get_class_type(void);

#if INDEX
#define LPoint4i_C_get_class_type_i_v LPoint4i$14$get_class_type
#endif

// C++ _inCAAAAyASp() ==> LPoint4i$_$init_type()()
extern void LPoint4i$15$init_type(void);

#if INDEX
#define LPoint4i_C_init_type_v_v LPoint4i$15$init_type
#endif


// LVecBase2d

// C++ _inCAAAAGdnQ() ==> LVecBase2d$_$LVecBase2d()()
extern LVecBase2d * LVecBase2d$1$LVecBase2d(void);

#if INDEX
#define LVecBase2d_C_ctor_p_v LVecBase2d$1$LVecBase2d
#endif

// C++ _inCAAAACUdE(LVecBase2d const &) ==> LVecBase2d$_$LVecBase2d(LVecBase2d const *param0)(LVecBase2d const *)
extern LVecBase2d * LVecBase2d$2$LVecBase2d(LVecBase2d const *arg0);

#if INDEX
#define LVecBase2d_C_ctor_p_p LVecBase2d$2$LVecBase2d
#endif

// C++ _inCAAAA_8nX(LVecBase2d::EVector2 const &v) ==> LVecBase2d$_$LVecBase2d(LVecBase2d::EVector2 const *param0)(LVecBase2d::EVector2 const *)
extern LVecBase2d * LVecBase2d$3$LVecBase2d(LVecBase2d$_EVector2 const *v);
// COLLISION : LVecBase2d_C_ctor_p_p LVecBase2d$3$LVecBase2d

// C++ _inCAAAAi9B6(double fill_value) ==> LVecBase2d$_$LVecBase2d(double param0)(double)
extern LVecBase2d * LVecBase2d$4$LVecBase2d(double fill_value);

#if INDEX
#define LVecBase2d_C_ctor_p_d LVecBase2d$4$LVecBase2d
#endif

// C++ _inCAAAACY0M(double x, double y) ==> LVecBase2d$_$LVecBase2d(double param0, double param1)(double, double)
extern LVecBase2d * LVecBase2d$5$LVecBase2d(double x, double y);

#if INDEX
#define LVecBase2d_C_ctor_p_dd LVecBase2d$5$LVecBase2d
#endif

// C++ _inCAAAAxrvf() ==> LVecBase2d$_$zero()()
extern LVecBase2d const * LVecBase2d$6$zero(void);

#if INDEX
#define LVecBase2d_C_zero_p_v LVecBase2d$6$zero
#endif

// C++ _inCAAAA52lD() ==> LVecBase2d$_$unit_x()()
extern LVecBase2d const * LVecBase2d$7$unit_x(void);

#if INDEX
#define LVecBase2d_C_unit_x_p_v LVecBase2d$7$unit_x
#endif

// C++ _inCAAAA72zf() ==> LVecBase2d$_$unit_y()()
extern LVecBase2d const * LVecBase2d$8$unit_y(void);

#if INDEX
#define LVecBase2d_C_unit_y_p_v LVecBase2d$8$unit_y
#endif

// C++ _inCAAAAP1fJ() ==> LVecBase2d$_$size()()
extern int LVecBase2d$9$size(void);

#if INDEX
#define LVecBase2d_C_size_i_v LVecBase2d$9$size
#endif

// C++ _inCAAAAmuWQ() ==> LVecBase2d$_$is_nan(LVecBase2d const *param0)(LVecBase2d const *)
extern bool LVecBase2d$10$is_nan(LVecBase2d const *self);

#if INDEX
#define LVecBase2d_C_is_nan_B_p LVecBase2d$10$is_nan
#endif

// C++ _inCAAAAUrv1(int i) ==> LVecBase2d$_$get_cell(LVecBase2d const *param0, int param1)(LVecBase2d const *, int)
extern double LVecBase2d$11$get_cell(LVecBase2d const *self, int i);

#if INDEX
#define LVecBase2d_C_get_cell_d_pi LVecBase2d$11$get_cell
#endif

// C++ _inCAAAA3_g8(int i, double value) ==> LVecBase2d$_$set_cell(LVecBase2d *param0, int param1, double param2)(LVecBase2d *, int, double)
extern void LVecBase2d$12$set_cell(LVecBase2d *self, int i, double value);

#if INDEX
#define LVecBase2d_C_set_cell_v_pid LVecBase2d$12$set_cell
#endif

// C++ _inCAAAAQsPh() ==> LVecBase2d$_$get_x(LVecBase2d const *param0)(LVecBase2d const *)
extern double LVecBase2d$13$get_x(LVecBase2d const *self);

#if INDEX
#define LVecBase2d_C_get_x_d_p LVecBase2d$13$get_x
#endif

// C++ _inCAAAAQIIm() ==> LVecBase2d$_$get_y(LVecBase2d const *param0)(LVecBase2d const *)
extern double LVecBase2d$14$get_y(LVecBase2d const *self);

#if INDEX
#define LVecBase2d_C_get_y_d_p LVecBase2d$14$get_y
#endif

// C++ _inCAAAAKZlY(double value) ==> LVecBase2d$_$set_x(LVecBase2d *param0, double param1)(LVecBase2d *, double)
extern void LVecBase2d$15$set_x(LVecBase2d *self, double value);

#if INDEX
#define LVecBase2d_C_set_x_v_pd LVecBase2d$15$set_x
#endif

// C++ _inCAAAAK9dd(double value) ==> LVecBase2d$_$set_y(LVecBase2d *param0, double param1)(LVecBase2d *, double)
extern void LVecBase2d$16$set_y(LVecBase2d *self, double value);

#if INDEX
#define LVecBase2d_C_set_y_v_pd LVecBase2d$16$set_y
#endif

// C++ _inCAAAA0P6a(int i, double value) ==> LVecBase2d$_$add_to_cell(LVecBase2d *param0, int param1, double param2)(LVecBase2d *, int, double)
extern void LVecBase2d$17$add_to_cell(LVecBase2d *self, int i, double value);

#if INDEX
#define LVecBase2d_C_add_to_cell_v_pid LVecBase2d$17$add_to_cell
#endif

// C++ _inCAAAArQCX(double value) ==> LVecBase2d$_$add_x(LVecBase2d *param0, double param1)(LVecBase2d *, double)
extern void LVecBase2d$18$add_x(LVecBase2d *self, double value);

#if INDEX
#define LVecBase2d_C_add_x_v_pd LVecBase2d$18$add_x
#endif

// C++ _inCAAAAr06b(double value) ==> LVecBase2d$_$add_y(LVecBase2d *param0, double param1)(LVecBase2d *, double)
extern void LVecBase2d$19$add_y(LVecBase2d *self, double value);

#if INDEX
#define LVecBase2d_C_add_y_v_pd LVecBase2d$19$add_y
#endif

// C++ _inCAAAAu9TU() ==> LVecBase2d$_$get_data(LVecBase2d const *param0)(LVecBase2d const *)
extern void LVecBase2d$20$get_data(LVecBase2d const *self);

#if INDEX
#define LVecBase2d_C_get_data_v_p LVecBase2d$20$get_data
#endif

// C++ _inCAAAAkVkl() ==> LVecBase2d$_$get_num_components()()
extern int LVecBase2d$21$get_num_components(void);

#if INDEX
#define LVecBase2d_C_get_num_components_i_v LVecBase2d$21$get_num_components
#endif

// C++ _inCAAAAbbqU() ==> LVecBase2d$_$begin(LVecBase2d *param0)(LVecBase2d *)
extern void LVecBase2d$22$begin(LVecBase2d *self);

#if INDEX
#define LVecBase2d_C_begin_v_p LVecBase2d$22$begin
#endif

// C++ _inCAAAAeeU7() ==> LVecBase2d$_$begin(LVecBase2d const *param0)(LVecBase2d const *)
extern void LVecBase2d$23$begin(LVecBase2d const *self);
// COLLISION : LVecBase2d_C_begin_v_p LVecBase2d$23$begin

// C++ _inCAAAA1d_r() ==> LVecBase2d$_$end(LVecBase2d *param0)(LVecBase2d *)
extern void LVecBase2d$24$end(LVecBase2d *self);

#if INDEX
#define LVecBase2d_C_end_v_p LVecBase2d$24$end
#endif

// C++ _inCAAAAneLg() ==> LVecBase2d$_$end(LVecBase2d const *param0)(LVecBase2d const *)
extern void LVecBase2d$25$end(LVecBase2d const *self);
// COLLISION : LVecBase2d_C_end_v_p LVecBase2d$25$end

// C++ _inCAAAAsasc(double fill_value) ==> LVecBase2d$_$fill(LVecBase2d *param0, double param1)(LVecBase2d *, double)
extern void LVecBase2d$26$fill(LVecBase2d *self, double fill_value);

#if INDEX
#define LVecBase2d_C_fill_v_pd LVecBase2d$26$fill
#endif

// C++ _inCAAAAbAy_(double x, double y) ==> LVecBase2d$_$set(LVecBase2d *param0, double param1, double param2)(LVecBase2d *, double, double)
extern void LVecBase2d$27$set(LVecBase2d *self, double x, double y);

#if INDEX
#define LVecBase2d_C_set_v_pdd LVecBase2d$27$set
#endif

// C++ _inCAAAAcCJC(LVecBase2d const &other) ==> LVecBase2d$_$dot(LVecBase2d const *param0, LVecBase2d const *param1)(LVecBase2d const *, LVecBase2d const *)
extern double LVecBase2d$28$dot(LVecBase2d const *self, LVecBase2d const *other);

#if INDEX
#define LVecBase2d_C_dot_d_pp LVecBase2d$28$dot
#endif

// C++ _inCAAAAqI8r() ==> LVecBase2d$_$length_squared(LVecBase2d const *param0)(LVecBase2d const *)
extern double LVecBase2d$29$length_squared(LVecBase2d const *self);

#if INDEX
#define LVecBase2d_C_length_squared_d_p LVecBase2d$29$length_squared
#endif

// C++ _inCAAAAMHIM() ==> LVecBase2d$_$length(LVecBase2d const *param0)(LVecBase2d const *)
extern double LVecBase2d$30$length(LVecBase2d const *self);

#if INDEX
#define LVecBase2d_C_length_d_p LVecBase2d$30$length
#endif

// C++ _inCAAAAZAih() ==> LVecBase2d$_$normalize(LVecBase2d *param0)(LVecBase2d *)
extern bool LVecBase2d$31$normalize(LVecBase2d *self);

#if INDEX
#define LVecBase2d_C_normalize_B_p LVecBase2d$31$normalize
#endif

// C++ _inCAAAAJWS_() ==> LVecBase2d$_$normalized(LVecBase2d const *param0)(LVecBase2d const *)
extern LVecBase2d * LVecBase2d$32$normalized(LVecBase2d const *self);

#if INDEX
#define LVecBase2d_C_normalized_p_p LVecBase2d$32$normalized
#endif

// C++ _inCAAAAmCxs(LVecBase2d const &onto) ==> LVecBase2d$_$project(LVecBase2d const *param0, LVecBase2d const *param1)(LVecBase2d const *, LVecBase2d const *)
extern LVecBase2d * LVecBase2d$33$project(LVecBase2d const *self, LVecBase2d const *onto);

#if INDEX
#define LVecBase2d_C_project_p_pp LVecBase2d$33$project
#endif

// C++ _inCAAAAcKgs(LVecBase2d const &other) ==> LVecBase2d$_$compare_to(LVecBase2d const *param0, LVecBase2d const *param1)(LVecBase2d const *, LVecBase2d const *)
extern int LVecBase2d$34$compare_to(LVecBase2d const *self, LVecBase2d const *other);

#if INDEX
#define LVecBase2d_C_compare_to_i_pp LVecBase2d$34$compare_to
#endif

// C++ _inCAAAAe1W3(LVecBase2d const &other, double threshold) ==> LVecBase2d$_$compare_to(LVecBase2d const *param0, LVecBase2d const *param1, double param2)(LVecBase2d const *, LVecBase2d const *, double)
extern int LVecBase2d$35$compare_to(LVecBase2d const *self, LVecBase2d const *other, double threshold);

#if INDEX
#define LVecBase2d_C_compare_to_i_ppd LVecBase2d$35$compare_to
#endif

// C++ _inCAAAAF_5A() ==> LVecBase2d$_$get_hash(LVecBase2d const *param0)(LVecBase2d const *)
extern std$_size_t LVecBase2d$36$get_hash(LVecBase2d const *self);

#if INDEX
#define LVecBase2d_C_get_hash_l_p LVecBase2d$36$get_hash
#endif

// C++ _inCAAAA1_3f(double threshold) ==> LVecBase2d$_$get_hash(LVecBase2d const *param0, double param1)(LVecBase2d const *, double)
extern std$_size_t LVecBase2d$37$get_hash(LVecBase2d const *self, double threshold);

#if INDEX
#define LVecBase2d_C_get_hash_l_pd LVecBase2d$37$get_hash
#endif

// C++ _inCAAAAvnO3(std::size_t hash) ==> LVecBase2d$_$add_hash(LVecBase2d const *param0, std::size_t param1)(LVecBase2d const *, std::size_t)
extern std$_size_t LVecBase2d$38$add_hash(LVecBase2d const *self, std$_size_t hash);

#if INDEX
#define LVecBase2d_C_add_hash_l_pl LVecBase2d$38$add_hash
#endif

// C++ _inCAAAAxLlP(std::size_t hash, double threshold) ==> LVecBase2d$_$add_hash(LVecBase2d const *param0, std::size_t param1, double param2)(LVecBase2d const *, std::size_t, double)
extern std$_size_t LVecBase2d$39$add_hash(LVecBase2d const *self, std$_size_t hash, double threshold);

#if INDEX
#define LVecBase2d_C_add_hash_l_pld LVecBase2d$39$add_hash
#endif

// C++ _inCAAAAC65R(ChecksumHashGenerator &hashgen) ==> LVecBase2d$_$generate_hash(LVecBase2d const *param0, ChecksumHashGenerator *param1)(LVecBase2d const *, ChecksumHashGenerator *)
extern void LVecBase2d$40$generate_hash(LVecBase2d const *self, ChecksumHashGenerator *hashgen);

#if INDEX
#define LVecBase2d_C_generate_hash_v_pp LVecBase2d$40$generate_hash
#endif

// C++ _inCAAAA1h_1(ChecksumHashGenerator &hashgen, double threshold) ==> LVecBase2d$_$generate_hash(LVecBase2d const *param0, ChecksumHashGenerator *param1, double param2)(LVecBase2d const *, ChecksumHashGenerator *, double)
extern void LVecBase2d$41$generate_hash(LVecBase2d const *self, ChecksumHashGenerator *hashgen, double threshold);

#if INDEX
#define LVecBase2d_C_generate_hash_v_ppd LVecBase2d$41$generate_hash
#endif

// C++ _inCAAAAqaaN(LVecBase2d const &other) ==> LVecBase2d$_$componentwise_mult(LVecBase2d *param0, LVecBase2d const *param1)(LVecBase2d *, LVecBase2d const *)
extern void LVecBase2d$42$componentwise_mult(LVecBase2d *self, LVecBase2d const *other);

#if INDEX
#define LVecBase2d_C_componentwise_mult_v_pp LVecBase2d$42$componentwise_mult
#endif

// C++ _inCAAAA48dK(LVecBase2d const &other) ==> LVecBase2d$_$fmax(LVecBase2d const *param0, LVecBase2d const *param1)(LVecBase2d const *, LVecBase2d const *)
extern LVecBase2d * LVecBase2d$43$fmax(LVecBase2d const *self, LVecBase2d const *other);

#if INDEX
#define LVecBase2d_C_fmax_p_pp LVecBase2d$43$fmax
#endif

// C++ _inCAAAAWI9I(LVecBase2d const &other) ==> LVecBase2d$_$fmin(LVecBase2d const *param0, LVecBase2d const *param1)(LVecBase2d const *, LVecBase2d const *)
extern LVecBase2d * LVecBase2d$44$fmin(LVecBase2d const *self, LVecBase2d const *other);

#if INDEX
#define LVecBase2d_C_fmin_p_pp LVecBase2d$44$fmin
#endif

// C++ _inCAAAAnTK9(LVecBase2d const &other) ==> LVecBase2d$_$almost_equal(LVecBase2d const *param0, LVecBase2d const *param1)(LVecBase2d const *, LVecBase2d const *)
extern bool LVecBase2d$45$almost_equal(LVecBase2d const *self, LVecBase2d const *other);

#if INDEX
#define LVecBase2d_C_almost_equal_B_pp LVecBase2d$45$almost_equal
#endif

// C++ _inCAAAA_OqN(LVecBase2d const &other, double threshold) ==> LVecBase2d$_$almost_equal(LVecBase2d const *param0, LVecBase2d const *param1, double param2)(LVecBase2d const *, LVecBase2d const *, double)
extern bool LVecBase2d$46$almost_equal(LVecBase2d const *self, LVecBase2d const *other, double threshold);

#if INDEX
#define LVecBase2d_C_almost_equal_B_ppd LVecBase2d$46$almost_equal
#endif

// C++ _inCAAAA15IH(std::ostream &out) ==> LVecBase2d$_$output(LVecBase2d const *param0, std::ostream *param1)(LVecBase2d const *, std::ostream *)
extern void LVecBase2d$47$output(LVecBase2d const *self, std$_ostream *out);

#if INDEX
#define LVecBase2d_C_output_v_pp LVecBase2d$47$output
#endif

// C++ _inCAAAAvThE(Datagram &destination) ==> LVecBase2d$_$write_datagram_fixed(LVecBase2d const *param0, Datagram *param1)(LVecBase2d const *, Datagram *)
extern void LVecBase2d$48$write_datagram_fixed(LVecBase2d const *self, Datagram *destination);

#if INDEX
#define LVecBase2d_C_write_datagram_fixed_v_pp LVecBase2d$48$write_datagram_fixed
#endif

// C++ _inCAAAAvkCB(DatagramIterator &source) ==> LVecBase2d$_$read_datagram_fixed(LVecBase2d *param0, DatagramIterator *param1)(LVecBase2d *, DatagramIterator *)
extern void LVecBase2d$49$read_datagram_fixed(LVecBase2d *self, DatagramIterator *source);

#if INDEX
#define LVecBase2d_C_read_datagram_fixed_v_pp LVecBase2d$49$read_datagram_fixed
#endif

// C++ _inCAAAAYKaB(Datagram &destination) ==> LVecBase2d$_$write_datagram(LVecBase2d const *param0, Datagram *param1)(LVecBase2d const *, Datagram *)
extern void LVecBase2d$50$write_datagram(LVecBase2d const *self, Datagram *destination);

#if INDEX
#define LVecBase2d_C_write_datagram_v_pp LVecBase2d$50$write_datagram
#endif

// C++ _inCAAAAYCdT(DatagramIterator &source) ==> LVecBase2d$_$read_datagram(LVecBase2d *param0, DatagramIterator *param1)(LVecBase2d *, DatagramIterator *)
extern void LVecBase2d$51$read_datagram(LVecBase2d *self, DatagramIterator *source);

#if INDEX
#define LVecBase2d_C_read_datagram_v_pp LVecBase2d$51$read_datagram
#endif

// C++ _inCAAAAQUfX() ==> LVecBase2d$_$get_v(LVecBase2d const *param0)(LVecBase2d const *)
extern LVecBase2d$_EVector2 * LVecBase2d$52$get_v(LVecBase2d const *self);

#if INDEX
#define LVecBase2d_C_get_v_p_p LVecBase2d$52$get_v
#endif

// C++ _inCAAAAvAPQ() ==> LVecBase2d$_$get_class_type()()
extern int LVecBase2d$53$get_class_type(void);

#if INDEX
#define LVecBase2d_C_get_class_type_i_v LVecBase2d$53$get_class_type
#endif

// C++ _inCAAAAoLaw() ==> LVecBase2d$_$init_type()()
extern void LVecBase2d$54$init_type(void);

#if INDEX
#define LVecBase2d_C_init_type_v_v LVecBase2d$54$init_type
#endif


// LVecBase2f

// C++ _inCAAAAgaIU() ==> LVecBase2f$_$LVecBase2f()()
extern LVecBase2f * LVecBase2f$1$LVecBase2f(void);

#if INDEX
#define LVecBase2f_C_ctor_p_v LVecBase2f$1$LVecBase2f
#endif

// C++ _inCAAAAVQfL(LVecBase2f const &) ==> LVecBase2f$_$LVecBase2f(LVecBase2f const *param0)(LVecBase2f const *)
extern LVecBase2f * LVecBase2f$2$LVecBase2f(LVecBase2f const *arg0);

#if INDEX
#define LVecBase2f_C_ctor_p_p LVecBase2f$2$LVecBase2f
#endif

// C++ _inCAAAA2wpe(LVecBase2f::EVector2 const &v) ==> LVecBase2f$_$LVecBase2f(LVecBase2f::EVector2 const *param0)(LVecBase2f::EVector2 const *)
extern LVecBase2f * LVecBase2f$3$LVecBase2f(LVecBase2f$_EVector2 const *v);
// COLLISION : LVecBase2f_C_ctor_p_p LVecBase2f$3$LVecBase2f

// C++ _inCAAAAlRq3(float fill_value) ==> LVecBase2f$_$LVecBase2f(float param0)(float)
extern LVecBase2f * LVecBase2f$4$LVecBase2f(float fill_value);

#if INDEX
#define LVecBase2f_C_ctor_p_f LVecBase2f$4$LVecBase2f
#endif

// C++ _inCAAAAoQsK(float x, float y) ==> LVecBase2f$_$LVecBase2f(float param0, float param1)(float, float)
extern LVecBase2f * LVecBase2f$5$LVecBase2f(float x, float y);

#if INDEX
#define LVecBase2f_C_ctor_p_ff LVecBase2f$5$LVecBase2f
#endif

// C++ _inCAAAAfGvP() ==> LVecBase2f$_$zero()()
extern LVecBase2f const * LVecBase2f$6$zero(void);

#if INDEX
#define LVecBase2f_C_zero_p_v LVecBase2f$6$zero
#endif

// C++ _inCAAAAaClz() ==> LVecBase2f$_$unit_x()()
extern LVecBase2f const * LVecBase2f$7$unit_x(void);

#if INDEX
#define LVecBase2f_C_unit_x_p_v LVecBase2f$7$unit_x
#endif

// C++ _inCAAAAVCzP() ==> LVecBase2f$_$unit_y()()
extern LVecBase2f const * LVecBase2f$8$unit_y(void);

#if INDEX
#define LVecBase2f_C_unit_y_p_v LVecBase2f$8$unit_y
#endif

// C++ _inCAAAAoYf5() ==> LVecBase2f$_$size()()
extern int LVecBase2f$9$size(void);

#if INDEX
#define LVecBase2f_C_size_i_v LVecBase2f$9$size
#endif

// C++ _inCAAAAI5WA() ==> LVecBase2f$_$is_nan(LVecBase2f const *param0)(LVecBase2f const *)
extern bool LVecBase2f$10$is_nan(LVecBase2f const *self);

#if INDEX
#define LVecBase2f_C_is_nan_B_p LVecBase2f$10$is_nan
#endif

// C++ _inCAAAAy_vl(int i) ==> LVecBase2f$_$get_cell(LVecBase2f const *param0, int param1)(LVecBase2f const *, int)
extern float LVecBase2f$11$get_cell(LVecBase2f const *self, int i);

#if INDEX
#define LVecBase2f_C_get_cell_f_pi LVecBase2f$11$get_cell
#endif

// C++ _inCAAAAnQnT(int i, float value) ==> LVecBase2f$_$set_cell(LVecBase2f *param0, int param1, float param2)(LVecBase2f *, int, float)
extern void LVecBase2f$12$set_cell(LVecBase2f *self, int i, float value);

#if INDEX
#define LVecBase2f_C_set_cell_v_pif LVecBase2f$12$set_cell
#endif

// C++ _inCAAAAuYPR() ==> LVecBase2f$_$get_x(LVecBase2f const *param0)(LVecBase2f const *)
extern float LVecBase2f$13$get_x(LVecBase2f const *self);

#if INDEX
#define LVecBase2f_C_get_x_f_p LVecBase2f$13$get_x
#endif

// C++ _inCAAAAu8IW() ==> LVecBase2f$_$get_y(LVecBase2f const *param0)(LVecBase2f const *)
extern float LVecBase2f$14$get_y(LVecBase2f const *self);

#if INDEX
#define LVecBase2f_C_get_y_f_p LVecBase2f$14$get_y
#endif

// C++ _inCAAAAgvpl(float value) ==> LVecBase2f$_$set_x(LVecBase2f *param0, float param1)(LVecBase2f *, float)
extern void LVecBase2f$15$set_x(LVecBase2f *self, float value);

#if INDEX
#define LVecBase2f_C_set_x_v_pf LVecBase2f$15$set_x
#endif

// C++ _inCAAAAgLiq(float value) ==> LVecBase2f$_$set_y(LVecBase2f *param0, float param1)(LVecBase2f *, float)
extern void LVecBase2f$16$set_y(LVecBase2f *self, float value);

#if INDEX
#define LVecBase2f_C_set_y_v_pf LVecBase2f$16$set_y
#endif

// C++ _inCAAAAqznS(int i, float value) ==> LVecBase2f$_$add_to_cell(LVecBase2f *param0, int param1, float param2)(LVecBase2f *, int, float)
extern void LVecBase2f$17$add_to_cell(LVecBase2f *self, int i, float value);

#if INDEX
#define LVecBase2f_C_add_to_cell_v_pif LVecBase2f$17$add_to_cell
#endif

// C++ _inCAAAABpGk(float value) ==> LVecBase2f$_$add_x(LVecBase2f *param0, float param1)(LVecBase2f *, float)
extern void LVecBase2f$18$add_x(LVecBase2f *self, float value);

#if INDEX
#define LVecBase2f_C_add_x_v_pf LVecBase2f$18$add_x
#endif

// C++ _inCAAAABN_o(float value) ==> LVecBase2f$_$add_y(LVecBase2f *param0, float param1)(LVecBase2f *, float)
extern void LVecBase2f$19$add_y(LVecBase2f *self, float value);

#if INDEX
#define LVecBase2f_C_add_y_v_pf LVecBase2f$19$add_y
#endif

// C++ _inCAAAAMuTE() ==> LVecBase2f$_$get_data(LVecBase2f const *param0)(LVecBase2f const *)
extern void LVecBase2f$20$get_data(LVecBase2f const *self);

#if INDEX
#define LVecBase2f_C_get_data_v_p LVecBase2f$20$get_data
#endif

// C++ _inCAAAAC4kV() ==> LVecBase2f$_$get_num_components()()
extern int LVecBase2f$21$get_num_components(void);

#if INDEX
#define LVecBase2f_C_get_num_components_i_v LVecBase2f$21$get_num_components
#endif

// C++ _inCAAAA9oqE() ==> LVecBase2f$_$begin(LVecBase2f *param0)(LVecBase2f *)
extern void LVecBase2f$22$begin(LVecBase2f *self);

#if INDEX
#define LVecBase2f_C_begin_v_p LVecBase2f$22$begin
#endif

// C++ _inCAAAA1FVr() ==> LVecBase2f$_$begin(LVecBase2f const *param0)(LVecBase2f const *)
extern void LVecBase2f$23$begin(LVecBase2f const *self);
// COLLISION : LVecBase2f_C_begin_v_p LVecBase2f$23$begin

// C++ _inCAAAAeX_b() ==> LVecBase2f$_$end(LVecBase2f *param0)(LVecBase2f *)
extern void LVecBase2f$24$end(LVecBase2f *self);

#if INDEX
#define LVecBase2f_C_end_v_p LVecBase2f$24$end
#endif

// C++ _inCAAAAJCLQ() ==> LVecBase2f$_$end(LVecBase2f const *param0)(LVecBase2f const *)
extern void LVecBase2f$25$end(LVecBase2f const *self);
// COLLISION : LVecBase2f_C_end_v_p LVecBase2f$25$end

// C++ _inCAAAA91nF(float fill_value) ==> LVecBase2f$_$fill(LVecBase2f *param0, float param1)(LVecBase2f *, float)
extern void LVecBase2f$26$fill(LVecBase2f *self, float fill_value);

#if INDEX
#define LVecBase2f_C_fill_v_pf LVecBase2f$26$fill
#endif

// C++ _inCAAAAmT_9(float x, float y) ==> LVecBase2f$_$set(LVecBase2f *param0, float param1, float param2)(LVecBase2f *, float, float)
extern void LVecBase2f$27$set(LVecBase2f *self, float x, float y);

#if INDEX
#define LVecBase2f_C_set_v_pff LVecBase2f$27$set
#endif

// C++ _inCAAAA9RXz(LVecBase2f const &other) ==> LVecBase2f$_$dot(LVecBase2f const *param0, LVecBase2f const *param1)(LVecBase2f const *, LVecBase2f const *)
extern float LVecBase2f$28$dot(LVecBase2f const *self, LVecBase2f const *other);

#if INDEX
#define LVecBase2f_C_dot_f_pp LVecBase2f$28$dot
#endif

// C++ _inCAAAAIV8b() ==> LVecBase2f$_$length_squared(LVecBase2f const *param0)(LVecBase2f const *)
extern float LVecBase2f$29$length_squared(LVecBase2f const *self);

#if INDEX
#define LVecBase2f_C_length_squared_f_p LVecBase2f$29$length_squared
#endif

// C++ _inCAAAAvbI8() ==> LVecBase2f$_$length(LVecBase2f const *param0)(LVecBase2f const *)
extern float LVecBase2f$30$length(LVecBase2f const *self);

#if INDEX
#define LVecBase2f_C_length_f_p LVecBase2f$30$length
#endif

// C++ _inCAAAA7siR() ==> LVecBase2f$_$normalize(LVecBase2f *param0)(LVecBase2f *)
extern bool LVecBase2f$31$normalize(LVecBase2f *self);

#if INDEX
#define LVecBase2f_C_normalize_B_p LVecBase2f$31$normalize
#endif

// C++ _inCAAAA0cTu() ==> LVecBase2f$_$normalized(LVecBase2f const *param0)(LVecBase2f const *)
extern LVecBase2f * LVecBase2f$32$normalized(LVecBase2f const *self);

#if INDEX
#define LVecBase2f_C_normalized_p_p LVecBase2f$32$normalized
#endif

// C++ _inCAAAAkm2c(LVecBase2f const &onto) ==> LVecBase2f$_$project(LVecBase2f const *param0, LVecBase2f const *param1)(LVecBase2f const *, LVecBase2f const *)
extern LVecBase2f * LVecBase2f$33$project(LVecBase2f const *self, LVecBase2f const *onto);

#if INDEX
#define LVecBase2f_C_project_p_pp LVecBase2f$33$project
#endif

// C++ _inCAAAAVWAg(LVecBase2f const &other) ==> LVecBase2f$_$compare_to(LVecBase2f const *param0, LVecBase2f const *param1)(LVecBase2f const *, LVecBase2f const *)
extern int LVecBase2f$34$compare_to(LVecBase2f const *self, LVecBase2f const *other);

#if INDEX
#define LVecBase2f_C_compare_to_i_pp LVecBase2f$34$compare_to
#endif

// C++ _inCAAAAgmxE(LVecBase2f const &other, float threshold) ==> LVecBase2f$_$compare_to(LVecBase2f const *param0, LVecBase2f const *param1, float param2)(LVecBase2f const *, LVecBase2f const *, float)
extern int LVecBase2f$35$compare_to(LVecBase2f const *self, LVecBase2f const *other, float threshold);

#if INDEX
#define LVecBase2f_C_compare_to_i_ppf LVecBase2f$35$compare_to
#endif

// C++ _inCAAAAit5w() ==> LVecBase2f$_$get_hash(LVecBase2f const *param0)(LVecBase2f const *)
extern std$_size_t LVecBase2f$36$get_hash(LVecBase2f const *self);

#if INDEX
#define LVecBase2f_C_get_hash_l_p LVecBase2f$36$get_hash
#endif

// C++ _inCAAAAcmf3(float threshold) ==> LVecBase2f$_$get_hash(LVecBase2f const *param0, float param1)(LVecBase2f const *, float)
extern std$_size_t LVecBase2f$37$get_hash(LVecBase2f const *self, float threshold);

#if INDEX
#define LVecBase2f_C_get_hash_l_pf LVecBase2f$37$get_hash
#endif

// C++ _inCAAAAIsPn(std::size_t hash) ==> LVecBase2f$_$add_hash(LVecBase2f const *param0, std::size_t param1)(LVecBase2f const *, std::size_t)
extern std$_size_t LVecBase2f$38$add_hash(LVecBase2f const *self, std$_size_t hash);

#if INDEX
#define LVecBase2f_C_add_hash_l_pl LVecBase2f$38$add_hash
#endif

// C++ _inCAAAAGrY6(std::size_t hash, float threshold) ==> LVecBase2f$_$add_hash(LVecBase2f const *param0, std::size_t param1, float param2)(LVecBase2f const *, std::size_t, float)
extern std$_size_t LVecBase2f$39$add_hash(LVecBase2f const *self, std$_size_t hash, float threshold);

#if INDEX
#define LVecBase2f_C_add_hash_l_plf LVecBase2f$39$add_hash
#endif

// C++ _inCAAAAsW5B(ChecksumHashGenerator &hashgen) ==> LVecBase2f$_$generate_hash(LVecBase2f const *param0, ChecksumHashGenerator *param1)(LVecBase2f const *, ChecksumHashGenerator *)
extern void LVecBase2f$40$generate_hash(LVecBase2f const *self, ChecksumHashGenerator *hashgen);

#if INDEX
#define LVecBase2f_C_generate_hash_v_pp LVecBase2f$40$generate_hash
#endif

// C++ _inCAAAAiO1N(ChecksumHashGenerator &hashgen, float threshold) ==> LVecBase2f$_$generate_hash(LVecBase2f const *param0, ChecksumHashGenerator *param1, float param2)(LVecBase2f const *, ChecksumHashGenerator *, float)
extern void LVecBase2f$41$generate_hash(LVecBase2f const *self, ChecksumHashGenerator *hashgen, float threshold);

#if INDEX
#define LVecBase2f_C_generate_hash_v_ppf LVecBase2f$41$generate_hash
#endif

// C++ _inCAAAAMnKH(LVecBase2f const &other) ==> LVecBase2f$_$componentwise_mult(LVecBase2f *param0, LVecBase2f const *param1)(LVecBase2f *, LVecBase2f const *)
extern void LVecBase2f$42$componentwise_mult(LVecBase2f *self, LVecBase2f const *other);

#if INDEX
#define LVecBase2f_C_componentwise_mult_v_pp LVecBase2f$42$componentwise_mult
#endif

// C++ _inCAAAAljgh(LVecBase2f const &other) ==> LVecBase2f$_$fmax(LVecBase2f const *param0, LVecBase2f const *param1)(LVecBase2f const *, LVecBase2f const *)
extern LVecBase2f * LVecBase2f$43$fmax(LVecBase2f const *self, LVecBase2f const *other);

#if INDEX
#define LVecBase2f_C_fmax_p_pp LVecBase2f$43$fmax
#endif

// C++ _inCAAAALXBg(LVecBase2f const &other) ==> LVecBase2f$_$fmin(LVecBase2f const *param0, LVecBase2f const *param1)(LVecBase2f const *, LVecBase2f const *)
extern LVecBase2f * LVecBase2f$44$fmin(LVecBase2f const *self, LVecBase2f const *other);

#if INDEX
#define LVecBase2f_C_fmin_p_pp LVecBase2f$44$fmin
#endif

// C++ _inCAAAANeTt(LVecBase2f const &other) ==> LVecBase2f$_$almost_equal(LVecBase2f const *param0, LVecBase2f const *param1)(LVecBase2f const *, LVecBase2f const *)
extern bool LVecBase2f$45$almost_equal(LVecBase2f const *self, LVecBase2f const *other);

#if INDEX
#define LVecBase2f_C_almost_equal_B_pp LVecBase2f$45$almost_equal
#endif

// C++ _inCAAAAnTFd(LVecBase2f const &other, float threshold) ==> LVecBase2f$_$almost_equal(LVecBase2f const *param0, LVecBase2f const *param1, float param2)(LVecBase2f const *, LVecBase2f const *, float)
extern bool LVecBase2f$46$almost_equal(LVecBase2f const *self, LVecBase2f const *other, float threshold);

#if INDEX
#define LVecBase2f_C_almost_equal_B_ppf LVecBase2f$46$almost_equal
#endif

// C++ _inCAAAAUmI3(std::ostream &out) ==> LVecBase2f$_$output(LVecBase2f const *param0, std::ostream *param1)(LVecBase2f const *, std::ostream *)
extern void LVecBase2f$47$output(LVecBase2f const *self, std$_ostream *out);

#if INDEX
#define LVecBase2f_C_output_v_pp LVecBase2f$47$output
#endif

// C++ _inCAAAAO_h0(Datagram &destination) ==> LVecBase2f$_$write_datagram_fixed(LVecBase2f const *param0, Datagram *param1)(LVecBase2f const *, Datagram *)
extern void LVecBase2f$48$write_datagram_fixed(LVecBase2f const *self, Datagram *destination);

#if INDEX
#define LVecBase2f_C_write_datagram_fixed_v_pp LVecBase2f$48$write_datagram_fixed
#endif

// C++ _inCAAAAOJCx(DatagramIterator &source) ==> LVecBase2f$_$read_datagram_fixed(LVecBase2f *param0, DatagramIterator *param1)(LVecBase2f *, DatagramIterator *)
extern void LVecBase2f$49$read_datagram_fixed(LVecBase2f *self, DatagramIterator *source);

#if INDEX
#define LVecBase2f_C_read_datagram_fixed_v_pp LVecBase2f$49$read_datagram_fixed
#endif

// C++ _inCAAAA2Mbx(Datagram &destination) ==> LVecBase2f$_$write_datagram(LVecBase2f const *param0, Datagram *param1)(LVecBase2f const *, Datagram *)
extern void LVecBase2f$50$write_datagram(LVecBase2f const *self, Datagram *destination);

#if INDEX
#define LVecBase2f_C_write_datagram_v_pp LVecBase2f$50$write_datagram
#endif

// C++ _inCAAAA3ccD(DatagramIterator &source) ==> LVecBase2f$_$read_datagram(LVecBase2f *param0, DatagramIterator *param1)(LVecBase2f *, DatagramIterator *)
extern void LVecBase2f$51$read_datagram(LVecBase2f *self, DatagramIterator *source);

#if INDEX
#define LVecBase2f_C_read_datagram_v_pp LVecBase2f$51$read_datagram
#endif

// C++ _inCAAAAugfH() ==> LVecBase2f$_$get_v(LVecBase2f const *param0)(LVecBase2f const *)
extern LVecBase2f$_EVector2 * LVecBase2f$52$get_v(LVecBase2f const *self);

#if INDEX
#define LVecBase2f_C_get_v_p_p LVecBase2f$52$get_v
#endif

// C++ _inCAAAAKNOA() ==> LVecBase2f$_$get_class_type()()
extern int LVecBase2f$53$get_class_type(void);

#if INDEX
#define LVecBase2f_C_get_class_type_i_v LVecBase2f$53$get_class_type
#endif

// C++ _inCAAAAGYag() ==> LVecBase2f$_$init_type()()
extern void LVecBase2f$54$init_type(void);

#if INDEX
#define LVecBase2f_C_init_type_v_v LVecBase2f$54$init_type
#endif


// LVecBase2i

// C++ _inCAAAAtBdZ() ==> LVecBase2i$_$LVecBase2i()()
extern LVecBase2i * LVecBase2i$1$LVecBase2i(void);

#if INDEX
#define LVecBase2i_C_ctor_p_v LVecBase2i$1$LVecBase2i
#endif

// C++ _inCAAAAaaD2(LVecBase2i const &) ==> LVecBase2i$_$LVecBase2i(LVecBase2i const *param0)(LVecBase2i const *)
extern LVecBase2i * LVecBase2i$2$LVecBase2i(LVecBase2i const *arg0);

#if INDEX
#define LVecBase2i_C_ctor_p_p LVecBase2i$2$LVecBase2i
#endif

// C++ _inCAAAAW2MJ(LVecBase2i::EVector2 const &v) ==> LVecBase2i$_$LVecBase2i(LVecBase2i::EVector2 const *param0)(LVecBase2i::EVector2 const *)
extern LVecBase2i * LVecBase2i$3$LVecBase2i(LVecBase2i$_EVector2 const *v);
// COLLISION : LVecBase2i_C_ctor_p_p LVecBase2i$3$LVecBase2i

// C++ _inCAAAAjSAD(int fill_value) ==> LVecBase2i$_$LVecBase2i(int param0)(int)
extern LVecBase2i * LVecBase2i$4$LVecBase2i(int fill_value);

#if INDEX
#define LVecBase2i_C_ctor_p_i LVecBase2i$4$LVecBase2i
#endif

// C++ _inCAAAAFeso(int x, int y) ==> LVecBase2i$_$LVecBase2i(int param0, int param1)(int, int)
extern LVecBase2i * LVecBase2i$5$LVecBase2i(int x, int y);

#if INDEX
#define LVecBase2i_C_ctor_p_ii LVecBase2i$5$LVecBase2i
#endif

// C++ _inCAAAAGJw3() ==> LVecBase2i$_$zero()()
extern LVecBase2i const * LVecBase2i$6$zero(void);

#if INDEX
#define LVecBase2i_C_zero_p_v LVecBase2i$6$zero
#endif

// C++ _inCAAAA63nb() ==> LVecBase2i$_$unit_x()()
extern LVecBase2i const * LVecBase2i$7$unit_x(void);

#if INDEX
#define LVecBase2i_C_unit_x_p_v LVecBase2i$7$unit_x
#endif

// C++ _inCAAAA4313() ==> LVecBase2i$_$unit_y()()
extern LVecBase2i const * LVecBase2i$8$unit_y(void);

#if INDEX
#define LVecBase2i_C_unit_y_p_v LVecBase2i$8$unit_y
#endif

// C++ _inCAAAAT6gh() ==> LVecBase2i$_$size()()
extern int LVecBase2i$9$size(void);

#if INDEX
#define LVecBase2i_C_size_i_v LVecBase2i$9$size
#endif

// C++ _inCAAAAceXo() ==> LVecBase2i$_$is_nan(LVecBase2i const *param0)(LVecBase2i const *)
extern bool LVecBase2i$10$is_nan(LVecBase2i const *self);

#if INDEX
#define LVecBase2i_C_is_nan_B_p LVecBase2i$10$is_nan
#endif

// C++ _inCAAAANawN(int i) ==> LVecBase2i$_$get_cell(LVecBase2i const *param0, int param1)(LVecBase2i const *, int)
extern int LVecBase2i$11$get_cell(LVecBase2i const *self, int i);

#if INDEX
#define LVecBase2i_C_get_cell_i_pi LVecBase2i$11$get_cell
#endif

// C++ _inCAAAAK9CT(int i, int value) ==> LVecBase2i$_$set_cell(LVecBase2i *param0, int param1, int param2)(LVecBase2i *, int, int)
extern void LVecBase2i$12$set_cell(LVecBase2i *self, int i, int value);

#if INDEX
#define LVecBase2i_C_set_cell_v_pii LVecBase2i$12$set_cell
#endif

// C++ _inCAAAAnKQ5() ==> LVecBase2i$_$get_x(LVecBase2i const *param0)(LVecBase2i const *)
extern int LVecBase2i$13$get_x(LVecBase2i const *self);

#if INDEX
#define LVecBase2i_C_get_x_i_p LVecBase2i$13$get_x
#endif

// C++ _inCAAAAnmI_() ==> LVecBase2i$_$get_y(LVecBase2i const *param0)(LVecBase2i const *)
extern int LVecBase2i$14$get_y(LVecBase2i const *self);

#if INDEX
#define LVecBase2i_C_get_y_i_p LVecBase2i$14$get_y
#endif

// C++ _inCAAAA5Urw(int value) ==> LVecBase2i$_$set_x(LVecBase2i *param0, int param1)(LVecBase2i *, int)
extern void LVecBase2i$15$set_x(LVecBase2i *self, int value);

#if INDEX
#define LVecBase2i_C_set_x_v_pi LVecBase2i$15$set_x
#endif

// C++ _inCAAAA5wj1(int value) ==> LVecBase2i$_$set_y(LVecBase2i *param0, int param1)(LVecBase2i *, int)
extern void LVecBase2i$16$set_y(LVecBase2i *self, int value);

#if INDEX
#define LVecBase2i_C_set_y_v_pi LVecBase2i$16$set_y
#endif

// C++ _inCAAAAjSE7(int i, int value) ==> LVecBase2i$_$add_to_cell(LVecBase2i *param0, int param1, int param2)(LVecBase2i *, int, int)
extern void LVecBase2i$17$add_to_cell(LVecBase2i *self, int i, int value);

#if INDEX
#define LVecBase2i_C_add_to_cell_v_pii LVecBase2i$17$add_to_cell
#endif

// C++ _inCAAAAIsIv(int value) ==> LVecBase2i$_$add_x(LVecBase2i *param0, int param1)(LVecBase2i *, int)
extern void LVecBase2i$18$add_x(LVecBase2i *self, int value);

#if INDEX
#define LVecBase2i_C_add_x_v_pi LVecBase2i$18$add_x
#endif

// C++ _inCAAAAIIB0(int value) ==> LVecBase2i$_$add_y(LVecBase2i *param0, int param1)(LVecBase2i *, int)
extern void LVecBase2i$19$add_y(LVecBase2i *self, int value);

#if INDEX
#define LVecBase2i_C_add_y_v_pi LVecBase2i$19$add_y
#endif

// C++ _inCAAAAwQUs() ==> LVecBase2i$_$get_data(LVecBase2i const *param0)(LVecBase2i const *)
extern void LVecBase2i$20$get_data(LVecBase2i const *self);

#if INDEX
#define LVecBase2i_C_get_data_v_p LVecBase2i$20$get_data
#endif

// C++ _inCAAAA7ok9() ==> LVecBase2i$_$get_num_components()()
extern int LVecBase2i$21$get_num_components(void);

#if INDEX
#define LVecBase2i_C_get_num_components_i_v LVecBase2i$21$get_num_components
#endif

// C++ _inCAAAAmZqs() ==> LVecBase2i$_$begin(LVecBase2i *param0)(LVecBase2i *)
extern void LVecBase2i$22$begin(LVecBase2i *self);

#if INDEX
#define LVecBase2i_C_begin_v_p LVecBase2i$22$begin
#endif

// C++ _inCAAAAjOWT() ==> LVecBase2i$_$begin(LVecBase2i const *param0)(LVecBase2i const *)
extern void LVecBase2i$23$begin(LVecBase2i const *self);
// COLLISION : LVecBase2i_C_begin_v_p LVecBase2i$23$begin

// C++ _inCAAAA6C_D() ==> LVecBase2i$_$end(LVecBase2i *param0)(LVecBase2i *)
extern void LVecBase2i$24$end(LVecBase2i *self);

#if INDEX
#define LVecBase2i_C_end_v_p LVecBase2i$24$end
#endif

// C++ _inCAAAASfM4() ==> LVecBase2i$_$end(LVecBase2i const *param0)(LVecBase2i const *)
extern void LVecBase2i$25$end(LVecBase2i const *self);
// COLLISION : LVecBase2i_C_end_v_p LVecBase2i$25$end

// C++ _inCAAAABZvo(int fill_value) ==> LVecBase2i$_$fill(LVecBase2i *param0, int param1)(LVecBase2i *, int)
extern void LVecBase2i$26$fill(LVecBase2i *self, int fill_value);

#if INDEX
#define LVecBase2i_C_fill_v_pi LVecBase2i$26$fill
#endif

// C++ _inCAAAAbE9S(int x, int y) ==> LVecBase2i$_$set(LVecBase2i *param0, int param1, int param2)(LVecBase2i *, int, int)
extern void LVecBase2i$27$set(LVecBase2i *self, int x, int y);

#if INDEX
#define LVecBase2i_C_set_v_pii LVecBase2i$27$set
#endif

// C++ _inCAAAA7TNd(LVecBase2i const &other) ==> LVecBase2i$_$dot(LVecBase2i const *param0, LVecBase2i const *param1)(LVecBase2i const *, LVecBase2i const *)
extern int LVecBase2i$28$dot(LVecBase2i const *self, LVecBase2i const *other);

#if INDEX
#define LVecBase2i_C_dot_i_pp LVecBase2i$28$dot
#endif

// C++ _inCAAAAsl9D() ==> LVecBase2i$_$length_squared(LVecBase2i const *param0)(LVecBase2i const *)
extern int LVecBase2i$29$length_squared(LVecBase2i const *self);

#if INDEX
#define LVecBase2i_C_length_squared_i_p LVecBase2i$29$length_squared
#endif

// C++ _inCAAAA9jRt(LVecBase2i const &other) ==> LVecBase2i$_$compare_to(LVecBase2i const *param0, LVecBase2i const *param1)(LVecBase2i const *, LVecBase2i const *)
extern int LVecBase2i$30$compare_to(LVecBase2i const *self, LVecBase2i const *other);

#if INDEX
#define LVecBase2i_C_compare_to_i_pp LVecBase2i$30$compare_to
#endif

// C++ _inCAAAAq87Y() ==> LVecBase2i$_$get_hash(LVecBase2i const *param0)(LVecBase2i const *)
extern std$_size_t LVecBase2i$31$get_hash(LVecBase2i const *self);

#if INDEX
#define LVecBase2i_C_get_hash_l_p LVecBase2i$31$get_hash
#endif

// C++ _inCAAAA0UQP(std::size_t hash) ==> LVecBase2i$_$add_hash(LVecBase2i const *param0, std::size_t param1)(LVecBase2i const *, std::size_t)
extern std$_size_t LVecBase2i$32$add_hash(LVecBase2i const *self, std$_size_t hash);

#if INDEX
#define LVecBase2i_C_add_hash_l_pl LVecBase2i$32$add_hash
#endif

// C++ _inCAAAAXD6p(ChecksumHashGenerator &hashgen) ==> LVecBase2i$_$generate_hash(LVecBase2i const *param0, ChecksumHashGenerator *param1)(LVecBase2i const *, ChecksumHashGenerator *)
extern void LVecBase2i$33$generate_hash(LVecBase2i const *self, ChecksumHashGenerator *hashgen);

#if INDEX
#define LVecBase2i_C_generate_hash_v_pp LVecBase2i$33$generate_hash
#endif

// C++ _inCAAAAwV29(LVecBase2i const &other) ==> LVecBase2i$_$componentwise_mult(LVecBase2i *param0, LVecBase2i const *param1)(LVecBase2i *, LVecBase2i const *)
extern void LVecBase2i$34$componentwise_mult(LVecBase2i *self, LVecBase2i const *other);

#if INDEX
#define LVecBase2i_C_componentwise_mult_v_pp LVecBase2i$34$componentwise_mult
#endif

// C++ _inCAAAAwfHE(LVecBase2i const &other) ==> LVecBase2i$_$fmax(LVecBase2i const *param0, LVecBase2i const *param1)(LVecBase2i const *, LVecBase2i const *)
extern LVecBase2i * LVecBase2i$35$fmax(LVecBase2i const *self, LVecBase2i const *other);

#if INDEX
#define LVecBase2i_C_fmax_p_pp LVecBase2i$35$fmax
#endif

// C++ _inCAAAAusnC(LVecBase2i const &other) ==> LVecBase2i$_$fmin(LVecBase2i const *param0, LVecBase2i const *param1)(LVecBase2i const *, LVecBase2i const *)
extern LVecBase2i * LVecBase2i$36$fmin(LVecBase2i const *self, LVecBase2i const *other);

#if INDEX
#define LVecBase2i_C_fmin_p_pp LVecBase2i$36$fmin
#endif

// C++ _inCAAAAfkiV(LVecBase2i const &other) ==> LVecBase2i$_$almost_equal(LVecBase2i const *param0, LVecBase2i const *param1)(LVecBase2i const *, LVecBase2i const *)
extern bool LVecBase2i$37$almost_equal(LVecBase2i const *self, LVecBase2i const *other);

#if INDEX
#define LVecBase2i_C_almost_equal_B_pp LVecBase2i$37$almost_equal
#endif

// C++ _inCAAAA_gWE(LVecBase2i const &other, int threshold) ==> LVecBase2i$_$almost_equal(LVecBase2i const *param0, LVecBase2i const *param1, int param2)(LVecBase2i const *, LVecBase2i const *, int)
extern bool LVecBase2i$38$almost_equal(LVecBase2i const *self, LVecBase2i const *other, int threshold);

#if INDEX
#define LVecBase2i_C_almost_equal_B_ppi LVecBase2i$38$almost_equal
#endif

// C++ _inCAAAAJlJf(std::ostream &out) ==> LVecBase2i$_$output(LVecBase2i const *param0, std::ostream *param1)(LVecBase2i const *, std::ostream *)
extern void LVecBase2i$39$output(LVecBase2i const *self, std$_ostream *out);

#if INDEX
#define LVecBase2i_C_output_v_pp LVecBase2i$39$output
#endif

// C++ _inCAAAATYic(Datagram &destination) ==> LVecBase2i$_$write_datagram_fixed(LVecBase2i const *param0, Datagram *param1)(LVecBase2i const *, Datagram *)
extern void LVecBase2i$40$write_datagram_fixed(LVecBase2i const *self, Datagram *destination);

#if INDEX
#define LVecBase2i_C_write_datagram_fixed_v_pp LVecBase2i$40$write_datagram_fixed
#endif

// C++ _inCAAAAbIEZ(DatagramIterator &source) ==> LVecBase2i$_$read_datagram_fixed(LVecBase2i *param0, DatagramIterator *param1)(LVecBase2i *, DatagramIterator *)
extern void LVecBase2i$41$read_datagram_fixed(LVecBase2i *self, DatagramIterator *source);

#if INDEX
#define LVecBase2i_C_read_datagram_fixed_v_pp LVecBase2i$41$read_datagram_fixed
#endif

// C++ _inCAAAAu9cZ(Datagram &destination) ==> LVecBase2i$_$write_datagram(LVecBase2i const *param0, Datagram *param1)(LVecBase2i const *, Datagram *)
extern void LVecBase2i$42$write_datagram(LVecBase2i const *self, Datagram *destination);

#if INDEX
#define LVecBase2i_C_write_datagram_v_pp LVecBase2i$42$write_datagram
#endif

// C++ _inCAAAAOtdr(DatagramIterator &source) ==> LVecBase2i$_$read_datagram(LVecBase2i *param0, DatagramIterator *param1)(LVecBase2i *, DatagramIterator *)
extern void LVecBase2i$43$read_datagram(LVecBase2i *self, DatagramIterator *source);

#if INDEX
#define LVecBase2i_C_read_datagram_v_pp LVecBase2i$43$read_datagram
#endif

// C++ _inCAAAAnShv() ==> LVecBase2i$_$get_v(LVecBase2i const *param0)(LVecBase2i const *)
extern LVecBase2i$_EVector2 * LVecBase2i$44$get_v(LVecBase2i const *self);

#if INDEX
#define LVecBase2i_C_get_v_p_p LVecBase2i$44$get_v
#endif

// C++ _inCAAAAb8Po() ==> LVecBase2i$_$get_class_type()()
extern int LVecBase2i$45$get_class_type(void);

#if INDEX
#define LVecBase2i_C_get_class_type_i_v LVecBase2i$45$get_class_type
#endif

// C++ _inCAAAAKrbI() ==> LVecBase2i$_$init_type()()
extern void LVecBase2i$46$init_type(void);

#if INDEX
#define LVecBase2i_C_init_type_v_v LVecBase2i$46$init_type
#endif


// LVecBase3d

// C++ _inCAAAAjiry() ==> LVecBase3d$_$LVecBase3d()()
extern LVecBase3d * LVecBase3d$1$LVecBase3d(void);

#if INDEX
#define LVecBase3d_C_ctor_p_v LVecBase3d$1$LVecBase3d
#endif

// C++ _inCAAAAOLqf(LVecBase2d const &copy, double z) ==> LVecBase3d$_$LVecBase3d(LVecBase2d const *param0, double param1)(LVecBase2d const *, double)
extern LVecBase3d * LVecBase3d$2$LVecBase3d(LVecBase2d const *copy, double z);

#if INDEX
#define LVecBase3d_C_ctor_p_pd LVecBase3d$2$LVecBase3d
#endif

// C++ _inCAAAAuakN(LVecBase3d const &) ==> LVecBase3d$_$LVecBase3d(LVecBase3d const *param0)(LVecBase3d const *)
extern LVecBase3d * LVecBase3d$3$LVecBase3d(LVecBase3d const *arg0);

#if INDEX
#define LVecBase3d_C_ctor_p_p LVecBase3d$3$LVecBase3d
#endif

// C++ _inCAAAAN8un(LVecBase3d::EVector3 const &v) ==> LVecBase3d$_$LVecBase3d(LVecBase3d::EVector3 const *param0)(LVecBase3d::EVector3 const *)
extern LVecBase3d * LVecBase3d$4$LVecBase3d(LVecBase3d$_EVector3 const *v);
// COLLISION : LVecBase3d_C_ctor_p_p LVecBase3d$4$LVecBase3d

// C++ _inCAAAA_fFc(double fill_value) ==> LVecBase3d$_$LVecBase3d(double param0)(double)
extern LVecBase3d * LVecBase3d$5$LVecBase3d(double fill_value);

#if INDEX
#define LVecBase3d_C_ctor_p_d LVecBase3d$5$LVecBase3d
#endif

// C++ _inCAAAApccq(double x, double y, double z) ==> LVecBase3d$_$LVecBase3d(double param0, double param1, double param2)(double, double, double)
extern LVecBase3d * LVecBase3d$6$LVecBase3d(double x, double y, double z);

#if INDEX
#define LVecBase3d_C_ctor_p_ddd LVecBase3d$6$LVecBase3d
#endif

// C++ _inCAAAAtrfB() ==> LVecBase3d$_$zero()()
extern LVecBase3d const * LVecBase3d$7$zero(void);

#if INDEX
#define LVecBase3d_C_zero_p_v LVecBase3d$7$zero
#endif

// C++ _inCAAAAExVl() ==> LVecBase3d$_$unit_x()()
extern LVecBase3d const * LVecBase3d$8$unit_x(void);

#if INDEX
#define LVecBase3d_C_unit_x_p_v LVecBase3d$8$unit_x
#endif

// C++ _inCAAAAHxjB() ==> LVecBase3d$_$unit_y()()
extern LVecBase3d const * LVecBase3d$9$unit_y(void);

#if INDEX
#define LVecBase3d_C_unit_y_p_v LVecBase3d$9$unit_y
#endif

// C++ _inCAAAABxxd() ==> LVecBase3d$_$unit_z()()
extern LVecBase3d const * LVecBase3d$10$unit_z(void);

#if INDEX
#define LVecBase3d_C_unit_z_p_v LVecBase3d$10$unit_z
#endif

// C++ _inCAAAA61Pr() ==> LVecBase3d$_$size()()
extern int LVecBase3d$11$size(void);

#if INDEX
#define LVecBase3d_C_size_i_v LVecBase3d$11$size
#endif

// C++ _inCAAAA7uGy() ==> LVecBase3d$_$is_nan(LVecBase3d const *param0)(LVecBase3d const *)
extern bool LVecBase3d$12$is_nan(LVecBase3d const *self);

#if INDEX
#define LVecBase3d_C_is_nan_B_p LVecBase3d$12$is_nan
#endif

// C++ _inCAAAAgqfX(int i) ==> LVecBase3d$_$get_cell(LVecBase3d const *param0, int param1)(LVecBase3d const *, int)
extern double LVecBase3d$13$get_cell(LVecBase3d const *self, int i);

#if INDEX
#define LVecBase3d_C_get_cell_d_pi LVecBase3d$13$get_cell
#endif

// C++ _inCAAAA8t_C() ==> LVecBase3d$_$get_x(LVecBase3d const *param0)(LVecBase3d const *)
extern double LVecBase3d$14$get_x(LVecBase3d const *self);

#if INDEX
#define LVecBase3d_C_get_x_d_p LVecBase3d$14$get_x
#endif

// C++ _inCAAAA8J4H() ==> LVecBase3d$_$get_y(LVecBase3d const *param0)(LVecBase3d const *)
extern double LVecBase3d$15$get_y(LVecBase3d const *self);

#if INDEX
#define LVecBase3d_C_get_y_d_p LVecBase3d$15$get_y
#endif

// C++ _inCAAAA8lwM() ==> LVecBase3d$_$get_z(LVecBase3d const *param0)(LVecBase3d const *)
extern double LVecBase3d$16$get_z(LVecBase3d const *self);

#if INDEX
#define LVecBase3d_C_get_z_d_p LVecBase3d$16$get_z
#endif

// C++ _inCAAAAj_Qe(int i, double value) ==> LVecBase3d$_$set_cell(LVecBase3d *param0, int param1, double param2)(LVecBase3d *, int, double)
extern void LVecBase3d$17$set_cell(LVecBase3d *self, int i, double value);

#if INDEX
#define LVecBase3d_C_set_cell_v_pid LVecBase3d$17$set_cell
#endif

// C++ _inCAAAAfZV6(double value) ==> LVecBase3d$_$set_x(LVecBase3d *param0, double param1)(LVecBase3d *, double)
extern void LVecBase3d$18$set_x(LVecBase3d *self, double value);

#if INDEX
#define LVecBase3d_C_set_x_v_pd LVecBase3d$18$set_x
#endif

// C++ _inCAAAAf9N_(double value) ==> LVecBase3d$_$set_y(LVecBase3d *param0, double param1)(LVecBase3d *, double)
extern void LVecBase3d$19$set_y(LVecBase3d *self, double value);

#if INDEX
#define LVecBase3d_C_set_y_v_pd LVecBase3d$19$set_y
#endif

// C++ _inCAAAAeBGE(double value) ==> LVecBase3d$_$set_z(LVecBase3d *param0, double param1)(LVecBase3d *, double)
extern void LVecBase3d$20$set_z(LVecBase3d *self, double value);

#if INDEX
#define LVecBase3d_C_set_z_v_pd LVecBase3d$20$set_z
#endif

// C++ _inCAAAAwlZ5() ==> LVecBase3d$_$get_xy(LVecBase3d const *param0)(LVecBase3d const *)
extern LVecBase2d * LVecBase3d$21$get_xy(LVecBase3d const *self);

#if INDEX
#define LVecBase3d_C_get_xy_p_p LVecBase3d$21$get_xy
#endif

// C++ _inCAAAA1lnV() ==> LVecBase3d$_$get_xz(LVecBase3d const *param0)(LVecBase3d const *)
extern LVecBase2d * LVecBase3d$22$get_xz(LVecBase3d const *self);

#if INDEX
#define LVecBase3d_C_get_xz_p_p LVecBase3d$22$get_xz
#endif

// C++ _inCAAAA1Jfa() ==> LVecBase3d$_$get_yz(LVecBase3d const *param0)(LVecBase3d const *)
extern LVecBase2d * LVecBase3d$23$get_yz(LVecBase3d const *self);

#if INDEX
#define LVecBase3d_C_get_yz_p_p LVecBase3d$23$get_yz
#endif

// C++ _inCAAAALMq8(int i, double value) ==> LVecBase3d$_$add_to_cell(LVecBase3d *param0, int param1, double param2)(LVecBase3d *, int, double)
extern void LVecBase3d$24$add_to_cell(LVecBase3d *self, int i, double value);

#if INDEX
#define LVecBase3d_C_add_to_cell_v_pid LVecBase3d$24$add_to_cell
#endif

// C++ _inCAAAA0Qy4(double value) ==> LVecBase3d$_$add_x(LVecBase3d *param0, double param1)(LVecBase3d *, double)
extern void LVecBase3d$25$add_x(LVecBase3d *self, double value);

#if INDEX
#define LVecBase3d_C_add_x_v_pd LVecBase3d$25$add_x
#endif

// C++ _inCAAAA00q9(double value) ==> LVecBase3d$_$add_y(LVecBase3d *param0, double param1)(LVecBase3d *, double)
extern void LVecBase3d$26$add_y(LVecBase3d *self, double value);

#if INDEX
#define LVecBase3d_C_add_y_v_pd LVecBase3d$26$add_y
#endif

// C++ _inCAAAA3YjC(double value) ==> LVecBase3d$_$add_z(LVecBase3d *param0, double param1)(LVecBase3d *, double)
extern void LVecBase3d$27$add_z(LVecBase3d *self, double value);

#if INDEX
#define LVecBase3d_C_add_z_v_pd LVecBase3d$27$add_z
#endif

// C++ _inCAAAAd9D2() ==> LVecBase3d$_$get_data(LVecBase3d const *param0)(LVecBase3d const *)
extern void LVecBase3d$28$get_data(LVecBase3d const *self);

#if INDEX
#define LVecBase3d_C_get_data_v_p LVecBase3d$28$get_data
#endif

// C++ _inCAAAAQVUH() ==> LVecBase3d$_$get_num_components()()
extern int LVecBase3d$29$get_num_components(void);

#if INDEX
#define LVecBase3d_C_get_num_components_i_v LVecBase3d$29$get_num_components
#endif

// C++ _inCAAAAMba2() ==> LVecBase3d$_$begin(LVecBase3d *param0)(LVecBase3d *)
extern void LVecBase3d$30$begin(LVecBase3d *self);

#if INDEX
#define LVecBase3d_C_begin_v_p LVecBase3d$30$begin
#endif

// C++ _inCAAAAyeEd() ==> LVecBase3d$_$begin(LVecBase3d const *param0)(LVecBase3d const *)
extern void LVecBase3d$31$begin(LVecBase3d const *self);
// COLLISION : LVecBase3d_C_begin_v_p LVecBase3d$31$begin

// C++ _inCAAAAZSvN() ==> LVecBase3d$_$end(LVecBase3d *param0)(LVecBase3d *)
extern void LVecBase3d$32$end(LVecBase3d *self);

#if INDEX
#define LVecBase3d_C_end_v_p LVecBase3d$32$end
#endif

// C++ _inCAAAA7e7B() ==> LVecBase3d$_$end(LVecBase3d const *param0)(LVecBase3d const *)
extern void LVecBase3d$33$end(LVecBase3d const *self);
// COLLISION : LVecBase3d_C_end_v_p LVecBase3d$33$end

// C++ _inCAAAAxac_(double fill_value) ==> LVecBase3d$_$fill(LVecBase3d *param0, double param1)(LVecBase3d *, double)
extern void LVecBase3d$34$fill(LVecBase3d *self, double fill_value);

#if INDEX
#define LVecBase3d_C_fill_v_pd LVecBase3d$34$fill
#endif

// C++ _inCAAAAL816(double x, double y, double z) ==> LVecBase3d$_$set(LVecBase3d *param0, double param1, double param2, double param3)(LVecBase3d *, double, double, double)
extern void LVecBase3d$35$set(LVecBase3d *self, double x, double y, double z);

#if INDEX
#define LVecBase3d_C_set_v_pddd LVecBase3d$35$set
#endif

// C++ _inCAAAA4N6j(LVecBase3d const &other) ==> LVecBase3d$_$dot(LVecBase3d const *param0, LVecBase3d const *param1)(LVecBase3d const *, LVecBase3d const *)
extern double LVecBase3d$36$dot(LVecBase3d const *self, LVecBase3d const *other);

#if INDEX
#define LVecBase3d_C_dot_d_pp LVecBase3d$36$dot
#endif

// C++ _inCAAAAGIsN() ==> LVecBase3d$_$length_squared(LVecBase3d const *param0)(LVecBase3d const *)
extern double LVecBase3d$37$length_squared(LVecBase3d const *self);

#if INDEX
#define LVecBase3d_C_length_squared_d_p LVecBase3d$37$length_squared
#endif

// C++ _inCAAAA5E4t() ==> LVecBase3d$_$length(LVecBase3d const *param0)(LVecBase3d const *)
extern double LVecBase3d$38$length(LVecBase3d const *self);

#if INDEX
#define LVecBase3d_C_length_d_p LVecBase3d$38$length
#endif

// C++ _inCAAAAtBSD() ==> LVecBase3d$_$normalize(LVecBase3d *param0)(LVecBase3d *)
extern bool LVecBase3d$39$normalize(LVecBase3d *self);

#if INDEX
#define LVecBase3d_C_normalize_B_p LVecBase3d$39$normalize
#endif

// C++ _inCAAAA9XCg() ==> LVecBase3d$_$normalized(LVecBase3d const *param0)(LVecBase3d const *)
extern LVecBase3d * LVecBase3d$40$normalized(LVecBase3d const *self);

#if INDEX
#define LVecBase3d_C_normalized_p_p LVecBase3d$40$normalized
#endif

// C++ _inCAAAAa8hq(LVecBase3d const &onto) ==> LVecBase3d$_$project(LVecBase3d const *param0, LVecBase3d const *param1)(LVecBase3d const *, LVecBase3d const *)
extern LVecBase3d * LVecBase3d$41$project(LVecBase3d const *self, LVecBase3d const *onto);

#if INDEX
#define LVecBase3d_C_project_p_pp LVecBase3d$41$project
#endif

// C++ _inCAAAAvmLU(LVecBase3d const &other) ==> LVecBase3d$_$cross(LVecBase3d const *param0, LVecBase3d const *param1)(LVecBase3d const *, LVecBase3d const *)
extern LVecBase3d * LVecBase3d$42$cross(LVecBase3d const *self, LVecBase3d const *other);

#if INDEX
#define LVecBase3d_C_cross_p_pp LVecBase3d$42$cross
#endif

// C++ _inCAAAAwK45() ==> LVecBase3d$_$get_standardized_hpr(LVecBase3d const *param0)(LVecBase3d const *)
extern LVecBase3d * LVecBase3d$43$get_standardized_hpr(LVecBase3d const *self);

#if INDEX
#define LVecBase3d_C_get_standardized_hpr_p_p LVecBase3d$43$get_standardized_hpr
#endif

// C++ _inCAAAAAqT1(LVecBase3d const &other) ==> LVecBase3d$_$compare_to(LVecBase3d const *param0, LVecBase3d const *param1)(LVecBase3d const *, LVecBase3d const *)
extern int LVecBase3d$44$compare_to(LVecBase3d const *self, LVecBase3d const *other);

#if INDEX
#define LVecBase3d_C_compare_to_i_pp LVecBase3d$44$compare_to
#endif

// C++ _inCAAAADVKA(LVecBase3d const &other, double threshold) ==> LVecBase3d$_$compare_to(LVecBase3d const *param0, LVecBase3d const *param1, double param2)(LVecBase3d const *, LVecBase3d const *, double)
extern int LVecBase3d$45$compare_to(LVecBase3d const *self, LVecBase3d const *other, double threshold);

#if INDEX
#define LVecBase3d_C_compare_to_i_ppd LVecBase3d$45$compare_to
#endif

// C++ _inCAAAAQ_pi() ==> LVecBase3d$_$get_hash(LVecBase3d const *param0)(LVecBase3d const *)
extern std$_size_t LVecBase3d$46$get_hash(LVecBase3d const *self);

#if INDEX
#define LVecBase3d_C_get_hash_l_p LVecBase3d$46$get_hash
#endif

// C++ _inCAAAABwnB(double threshold) ==> LVecBase3d$_$get_hash(LVecBase3d const *param0, double param1)(LVecBase3d const *, double)
extern std$_size_t LVecBase3d$47$get_hash(LVecBase3d const *self, double threshold);

#if INDEX
#define LVecBase3d_C_get_hash_l_pd LVecBase3d$47$get_hash
#endif

// C++ _inCAAAADn_Y(std::size_t hash) ==> LVecBase3d$_$add_hash(LVecBase3d const *param0, std::size_t param1)(LVecBase3d const *, std::size_t)
extern std$_size_t LVecBase3d$48$add_hash(LVecBase3d const *self, std$_size_t hash);

#if INDEX
#define LVecBase3d_C_add_hash_l_pl LVecBase3d$48$add_hash
#endif

// C++ _inCAAAAeLVx(std::size_t hash, double threshold) ==> LVecBase3d$_$add_hash(LVecBase3d const *param0, std::size_t param1, double param2)(LVecBase3d const *, std::size_t, double)
extern std$_size_t LVecBase3d$49$add_hash(LVecBase3d const *self, std$_size_t hash, double threshold);

#if INDEX
#define LVecBase3d_C_add_hash_l_pld LVecBase3d$49$add_hash
#endif

// C++ _inCAAAA_lpz(ChecksumHashGenerator &hashgen) ==> LVecBase3d$_$generate_hash(LVecBase3d const *param0, ChecksumHashGenerator *param1)(LVecBase3d const *, ChecksumHashGenerator *)
extern void LVecBase3d$50$generate_hash(LVecBase3d const *self, ChecksumHashGenerator *hashgen);

#if INDEX
#define LVecBase3d_C_generate_hash_v_pp LVecBase3d$50$generate_hash
#endif

// C++ _inCAAAAhhvX(ChecksumHashGenerator &hashgen, double threshold) ==> LVecBase3d$_$generate_hash(LVecBase3d const *param0, ChecksumHashGenerator *param1, double param2)(LVecBase3d const *, ChecksumHashGenerator *, double)
extern void LVecBase3d$51$generate_hash(LVecBase3d const *self, ChecksumHashGenerator *hashgen, double threshold);

#if INDEX
#define LVecBase3d_C_generate_hash_v_ppd LVecBase3d$51$generate_hash
#endif

// C++ _inCAAAAFpUv(LVecBase3d const &other) ==> LVecBase3d$_$componentwise_mult(LVecBase3d *param0, LVecBase3d const *param1)(LVecBase3d *, LVecBase3d const *)
extern void LVecBase3d$52$componentwise_mult(LVecBase3d *self, LVecBase3d const *other);

#if INDEX
#define LVecBase3d_C_componentwise_mult_v_pp LVecBase3d$52$componentwise_mult
#endif

// C++ _inCAAAAN40s(LVecBase3d const &other) ==> LVecBase3d$_$fmax(LVecBase3d const *param0, LVecBase3d const *param1)(LVecBase3d const *, LVecBase3d const *)
extern LVecBase3d * LVecBase3d$53$fmax(LVecBase3d const *self, LVecBase3d const *other);

#if INDEX
#define LVecBase3d_C_fmax_p_pp LVecBase3d$53$fmax
#endif

// C++ _inCAAAAjFUr(LVecBase3d const &other) ==> LVecBase3d$_$fmin(LVecBase3d const *param0, LVecBase3d const *param1)(LVecBase3d const *, LVecBase3d const *)
extern LVecBase3d * LVecBase3d$54$fmin(LVecBase3d const *self, LVecBase3d const *other);

#if INDEX
#define LVecBase3d_C_fmin_p_pp LVecBase3d$54$fmin
#endif

// C++ _inCAAAAmWqm(LVecBase3d const &other) ==> LVecBase3d$_$cross_into(LVecBase3d *param0, LVecBase3d const *param1)(LVecBase3d *, LVecBase3d const *)
extern void LVecBase3d$55$cross_into(LVecBase3d *self, LVecBase3d const *other);

#if INDEX
#define LVecBase3d_C_cross_into_v_pp LVecBase3d$55$cross_into
#endif

// C++ _inCAAAAgl6W(LVecBase3d const &other) ==> LVecBase3d$_$almost_equal(LVecBase3d const *param0, LVecBase3d const *param1)(LVecBase3d const *, LVecBase3d const *)
extern bool LVecBase3d$56$almost_equal(LVecBase3d const *self, LVecBase3d const *other);

#if INDEX
#define LVecBase3d_C_almost_equal_B_pp LVecBase3d$56$almost_equal
#endif

// C++ _inCAAAA6Cbn(LVecBase3d const &other, double threshold) ==> LVecBase3d$_$almost_equal(LVecBase3d const *param0, LVecBase3d const *param1, double param2)(LVecBase3d const *, LVecBase3d const *, double)
extern bool LVecBase3d$57$almost_equal(LVecBase3d const *self, LVecBase3d const *other, double threshold);

#if INDEX
#define LVecBase3d_C_almost_equal_B_ppd LVecBase3d$57$almost_equal
#endif

// C++ _inCAAAAq54o(std::ostream &out) ==> LVecBase3d$_$output(LVecBase3d const *param0, std::ostream *param1)(LVecBase3d const *, std::ostream *)
extern void LVecBase3d$58$output(LVecBase3d const *self, std$_ostream *out);

#if INDEX
#define LVecBase3d_C_output_v_pp LVecBase3d$58$output
#endif

// C++ _inCAAAA8TRm(Datagram &destination) ==> LVecBase3d$_$write_datagram_fixed(LVecBase3d const *param0, Datagram *param1)(LVecBase3d const *, Datagram *)
extern void LVecBase3d$59$write_datagram_fixed(LVecBase3d const *self, Datagram *destination);

#if INDEX
#define LVecBase3d_C_write_datagram_fixed_v_pp LVecBase3d$59$write_datagram_fixed
#endif

// C++ _inCAAAA4kyi(DatagramIterator &source) ==> LVecBase3d$_$read_datagram_fixed(LVecBase3d *param0, DatagramIterator *param1)(LVecBase3d *, DatagramIterator *)
extern void LVecBase3d$60$read_datagram_fixed(LVecBase3d *self, DatagramIterator *source);

#if INDEX
#define LVecBase3d_C_read_datagram_fixed_v_pp LVecBase3d$60$read_datagram_fixed
#endif

// C++ _inCAAAAPKKj(Datagram &destination) ==> LVecBase3d$_$write_datagram(LVecBase3d const *param0, Datagram *param1)(LVecBase3d const *, Datagram *)
extern void LVecBase3d$61$write_datagram(LVecBase3d const *self, Datagram *destination);

#if INDEX
#define LVecBase3d_C_write_datagram_v_pp LVecBase3d$61$write_datagram
#endif

// C++ _inCAAAAkPM1(DatagramIterator &source) ==> LVecBase3d$_$read_datagram(LVecBase3d *param0, DatagramIterator *param1)(LVecBase3d *, DatagramIterator *)
extern void LVecBase3d$62$read_datagram(LVecBase3d *self, DatagramIterator *source);

#if INDEX
#define LVecBase3d_C_read_datagram_v_pp LVecBase3d$62$read_datagram
#endif

// C++ _inCAAAA_VP5() ==> LVecBase3d$_$get_v(LVecBase3d const *param0)(LVecBase3d const *)
extern LVecBase3d$_EVector3 * LVecBase3d$63$get_v(LVecBase3d const *self);

#if INDEX
#define LVecBase3d_C_get_v_p_p LVecBase3d$63$get_v
#endif

// C++ _inCAAAAyA_x() ==> LVecBase3d$_$get_class_type()()
extern int LVecBase3d$64$get_class_type(void);

#if INDEX
#define LVecBase3d_C_get_class_type_i_v LVecBase3d$64$get_class_type
#endif

// C++ _inCAAAAULKS() ==> LVecBase3d$_$init_type()()
extern void LVecBase3d$65$init_type(void);

#if INDEX
#define LVecBase3d_C_init_type_v_v LVecBase3d$65$init_type
#endif


// LVecBase3f

// C++ _inCAAAA9GM2() ==> LVecBase3f$_$LVecBase3f()()
extern LVecBase3f * LVecBase3f$1$LVecBase3f(void);

#if INDEX
#define LVecBase3f_C_ctor_p_v LVecBase3f$1$LVecBase3f
#endif

// C++ _inCAAAA5NlT(LVecBase2f const &copy, float z) ==> LVecBase3f$_$LVecBase3f(LVecBase2f const *param0, float param1)(LVecBase2f const *, float)
extern LVecBase3f * LVecBase3f$2$LVecBase3f(LVecBase2f const *copy, float z);

#if INDEX
#define LVecBase3f_C_ctor_p_pf LVecBase3f$2$LVecBase3f
#endif

// C++ _inCAAAARRmU(LVecBase3f const &) ==> LVecBase3f$_$LVecBase3f(LVecBase3f const *param0)(LVecBase3f const *)
extern LVecBase3f * LVecBase3f$3$LVecBase3f(LVecBase3f const *arg0);

#if INDEX
#define LVecBase3f_C_ctor_p_p LVecBase3f$3$LVecBase3f
#endif

// C++ _inCAAAAEwwu(LVecBase3f::EVector3 const &v) ==> LVecBase3f$_$LVecBase3f(LVecBase3f::EVector3 const *param0)(LVecBase3f::EVector3 const *)
extern LVecBase3f * LVecBase3f$4$LVecBase3f(LVecBase3f$_EVector3 const *v);
// COLLISION : LVecBase3f_C_ctor_p_p LVecBase3f$4$LVecBase3f

// C++ _inCAAAABPuZ(float fill_value) ==> LVecBase3f$_$LVecBase3f(float param0)(float)
extern LVecBase3f * LVecBase3f$5$LVecBase3f(float fill_value);

#if INDEX
#define LVecBase3f_C_ctor_p_f LVecBase3f$5$LVecBase3f
#endif

// C++ _inCAAAAnj6v(float x, float y, float z) ==> LVecBase3f$_$LVecBase3f(float param0, float param1, float param2)(float, float, float)
extern LVecBase3f * LVecBase3f$6$LVecBase3f(float x, float y, float z);

#if INDEX
#define LVecBase3f_C_ctor_p_fff LVecBase3f$6$LVecBase3f
#endif

// C++ _inCAAAAKGfx() ==> LVecBase3f$_$zero()()
extern LVecBase3f const * LVecBase3f$7$zero(void);

#if INDEX
#define LVecBase3f_C_zero_p_v LVecBase3f$7$zero
#endif

// C++ _inCAAAAmCVV() ==> LVecBase3f$_$unit_x()()
extern LVecBase3f const * LVecBase3f$8$unit_x(void);

#if INDEX
#define LVecBase3f_C_unit_x_p_v LVecBase3f$8$unit_x
#endif

// C++ _inCAAAAgCjx() ==> LVecBase3f$_$unit_y()()
extern LVecBase3f const * LVecBase3f$9$unit_y(void);

#if INDEX
#define LVecBase3f_C_unit_y_p_v LVecBase3f$9$unit_y
#endif

// C++ _inCAAAAjCxN() ==> LVecBase3f$_$unit_z()()
extern LVecBase3f const * LVecBase3f$10$unit_z(void);

#if INDEX
#define LVecBase3f_C_unit_z_p_v LVecBase3f$10$unit_z
#endif

// C++ _inCAAAAEZPb() ==> LVecBase3f$_$size()()
extern int LVecBase3f$11$size(void);

#if INDEX
#define LVecBase3f_C_size_i_v LVecBase3f$11$size
#endif

// C++ _inCAAAAd5Gi() ==> LVecBase3f$_$is_nan(LVecBase3f const *param0)(LVecBase3f const *)
extern bool LVecBase3f$12$is_nan(LVecBase3f const *self);

#if INDEX
#define LVecBase3f_C_is_nan_B_p LVecBase3f$12$is_nan
#endif

// C++ _inCAAAAO_fH(int i) ==> LVecBase3f$_$get_cell(LVecBase3f const *param0, int param1)(LVecBase3f const *, int)
extern float LVecBase3f$13$get_cell(LVecBase3f const *self, int i);

#if INDEX
#define LVecBase3f_C_get_cell_f_pi LVecBase3f$13$get_cell
#endif

// C++ _inCAAAAdY_y() ==> LVecBase3f$_$get_x(LVecBase3f const *param0)(LVecBase3f const *)
extern float LVecBase3f$14$get_x(LVecBase3f const *self);

#if INDEX
#define LVecBase3f_C_get_x_f_p LVecBase3f$14$get_x
#endif

// C++ _inCAAAAd843() ==> LVecBase3f$_$get_y(LVecBase3f const *param0)(LVecBase3f const *)
extern float LVecBase3f$15$get_y(LVecBase3f const *self);

#if INDEX
#define LVecBase3f_C_get_y_f_p LVecBase3f$15$get_y
#endif

// C++ _inCAAAAdQw8() ==> LVecBase3f$_$get_z(LVecBase3f const *param0)(LVecBase3f const *)
extern float LVecBase3f$16$get_z(LVecBase3f const *self);

#if INDEX
#define LVecBase3f_C_get_z_f_p LVecBase3f$16$get_z
#endif

// C++ _inCAAAAUQX1(int i, float value) ==> LVecBase3f$_$set_cell(LVecBase3f *param0, int param1, float param2)(LVecBase3f *, int, float)
extern void LVecBase3f$17$set_cell(LVecBase3f *self, int i, float value);

#if INDEX
#define LVecBase3f_C_set_cell_v_pif LVecBase3f$17$set_cell
#endif

// C++ _inCAAAAcuZH(float value) ==> LVecBase3f$_$set_x(LVecBase3f *param0, float param1)(LVecBase3f *, float)
extern void LVecBase3f$18$set_x(LVecBase3f *self, float value);

#if INDEX
#define LVecBase3f_C_set_x_v_pf LVecBase3f$18$set_x
#endif

// C++ _inCAAAAcKSM(float value) ==> LVecBase3f$_$set_y(LVecBase3f *param0, float param1)(LVecBase3f *, float)
extern void LVecBase3f$19$set_y(LVecBase3f *self, float value);

#if INDEX
#define LVecBase3f_C_set_y_v_pf LVecBase3f$19$set_y
#endif

// C++ _inCAAAAcWKR(float value) ==> LVecBase3f$_$set_z(LVecBase3f *param0, float param1)(LVecBase3f *, float)
extern void LVecBase3f$20$set_z(LVecBase3f *self, float value);

#if INDEX
#define LVecBase3f_C_set_z_v_pf LVecBase3f$20$set_z
#endif

// C++ _inCAAAAWJYp() ==> LVecBase3f$_$get_xy(LVecBase3f const *param0)(LVecBase3f const *)
extern LVecBase2f * LVecBase3f$21$get_xy(LVecBase3f const *self);

#if INDEX
#define LVecBase3f_C_get_xy_p_p LVecBase3f$21$get_xy
#endif

// C++ _inCAAAAbJmF() ==> LVecBase3f$_$get_xz(LVecBase3f const *param0)(LVecBase3f const *)
extern LVecBase2f * LVecBase3f$22$get_xz(LVecBase3f const *self);

#if INDEX
#define LVecBase3f_C_get_xz_p_p LVecBase3f$22$get_xz
#endif

// C++ _inCAAAAbleK() ==> LVecBase3f$_$get_yz(LVecBase3f const *param0)(LVecBase3f const *)
extern LVecBase2f * LVecBase3f$23$get_yz(LVecBase3f const *self);

#if INDEX
#define LVecBase3f_C_get_yz_p_p LVecBase3f$23$get_yz
#endif

// C++ _inCAAAAHyX0(int i, float value) ==> LVecBase3f$_$add_to_cell(LVecBase3f *param0, int param1, float param2)(LVecBase3f *, int, float)
extern void LVecBase3f$24$add_to_cell(LVecBase3f *self, int i, float value);

#if INDEX
#define LVecBase3f_C_add_to_cell_v_pif LVecBase3f$24$add_to_cell
#endif

// C++ _inCAAAA1m2F(float value) ==> LVecBase3f$_$add_x(LVecBase3f *param0, float param1)(LVecBase3f *, float)
extern void LVecBase3f$25$add_x(LVecBase3f *self, float value);

#if INDEX
#define LVecBase3f_C_add_x_v_pf LVecBase3f$25$add_x
#endif

// C++ _inCAAAA1CvK(float value) ==> LVecBase3f$_$add_y(LVecBase3f *param0, float param1)(LVecBase3f *, float)
extern void LVecBase3f$26$add_y(LVecBase3f *self, float value);

#if INDEX
#define LVecBase3f_C_add_y_v_pf LVecBase3f$26$add_y
#endif

// C++ _inCAAAA1unP(float value) ==> LVecBase3f$_$add_z(LVecBase3f *param0, float param1)(LVecBase3f *, float)
extern void LVecBase3f$27$add_z(LVecBase3f *self, float value);

#if INDEX
#define LVecBase3f_C_add_z_v_pf LVecBase3f$27$add_z
#endif

// C++ _inCAAAAjRCm() ==> LVecBase3f$_$get_data(LVecBase3f const *param0)(LVecBase3f const *)
extern void LVecBase3f$28$get_data(LVecBase3f const *self);

#if INDEX
#define LVecBase3f_C_get_data_v_p LVecBase3f$28$get_data
#endif

// C++ _inCAAAAx5U3() ==> LVecBase3f$_$get_num_components()()
extern int LVecBase3f$29$get_num_components(void);

#if INDEX
#define LVecBase3f_C_get_num_components_i_v LVecBase3f$29$get_num_components
#endif

// C++ _inCAAAAuoam() ==> LVecBase3f$_$begin(LVecBase3f *param0)(LVecBase3f *)
extern void LVecBase3f$30$begin(LVecBase3f *self);

#if INDEX
#define LVecBase3f_C_begin_v_p LVecBase3f$30$begin
#endif

// C++ _inCAAAApFFN() ==> LVecBase3f$_$begin(LVecBase3f const *param0)(LVecBase3f const *)
extern void LVecBase3f$31$begin(LVecBase3f const *self);
// COLLISION : LVecBase3f_C_begin_v_p LVecBase3f$31$begin

// C++ _inCAAAADXu9() ==> LVecBase3f$_$end(LVecBase3f *param0)(LVecBase3f *)
extern void LVecBase3f$32$end(LVecBase3f *self);

#if INDEX
#define LVecBase3f_C_end_v_p LVecBase3f$32$end
#endif

// C++ _inCAAAAaC7x() ==> LVecBase3f$_$end(LVecBase3f const *param0)(LVecBase3f const *)
extern void LVecBase3f$33$end(LVecBase3f const *self);
// COLLISION : LVecBase3f_C_end_v_p LVecBase3f$33$end

// C++ _inCAAAAq1Xn(float fill_value) ==> LVecBase3f$_$fill(LVecBase3f *param0, float param1)(LVecBase3f *, float)
extern void LVecBase3f$34$fill(LVecBase3f *self, float fill_value);

#if INDEX
#define LVecBase3f_C_fill_v_pf LVecBase3f$34$fill
#endif

// C++ _inCAAAAOavy(float x, float y, float z) ==> LVecBase3f$_$set(LVecBase3f *param0, float param1, float param2, float param3)(LVecBase3f *, float, float, float)
extern void LVecBase3f$35$set(LVecBase3f *self, float x, float y, float z);

#if INDEX
#define LVecBase3f_C_set_v_pfff LVecBase3f$35$set
#endif

// C++ _inCAAAAaDIV(LVecBase3f const &other) ==> LVecBase3f$_$dot(LVecBase3f const *param0, LVecBase3f const *param1)(LVecBase3f const *, LVecBase3f const *)
extern float LVecBase3f$36$dot(LVecBase3f const *self, LVecBase3f const *other);

#if INDEX
#define LVecBase3f_C_dot_f_pp LVecBase3f$36$dot
#endif

// C++ _inCAAAAlUs9() ==> LVecBase3f$_$length_squared(LVecBase3f const *param0)(LVecBase3f const *)
extern float LVecBase3f$37$length_squared(LVecBase3f const *self);

#if INDEX
#define LVecBase3f_C_length_squared_f_p LVecBase3f$37$length_squared
#endif

// C++ _inCAAAAbb4d() ==> LVecBase3f$_$length(LVecBase3f const *param0)(LVecBase3f const *)
extern float LVecBase3f$38$length(LVecBase3f const *self);

#if INDEX
#define LVecBase3f_C_length_f_p LVecBase3f$38$length
#endif

// C++ _inCAAAAOsSz() ==> LVecBase3f$_$normalize(LVecBase3f *param0)(LVecBase3f *)
extern bool LVecBase3f$39$normalize(LVecBase3f *self);

#if INDEX
#define LVecBase3f_C_normalize_B_p LVecBase3f$39$normalize
#endif

// C++ _inCAAAAYcDQ() ==> LVecBase3f$_$normalized(LVecBase3f const *param0)(LVecBase3f const *)
extern LVecBase3f * LVecBase3f$40$normalized(LVecBase3f const *self);

#if INDEX
#define LVecBase3f_C_normalized_p_p LVecBase3f$40$normalized
#endif

// C++ _inCAAAAQhma(LVecBase3f const &onto) ==> LVecBase3f$_$project(LVecBase3f const *param0, LVecBase3f const *param1)(LVecBase3f const *, LVecBase3f const *)
extern LVecBase3f * LVecBase3f$41$project(LVecBase3f const *self, LVecBase3f const *onto);

#if INDEX
#define LVecBase3f_C_project_p_pp LVecBase3f$41$project
#endif

// C++ _inCAAAAaJ6l(LVecBase3f const &other) ==> LVecBase3f$_$cross(LVecBase3f const *param0, LVecBase3f const *param1)(LVecBase3f const *, LVecBase3f const *)
extern LVecBase3f * LVecBase3f$42$cross(LVecBase3f const *self, LVecBase3f const *other);

#if INDEX
#define LVecBase3f_C_cross_p_pp LVecBase3f$42$cross
#endif

// C++ _inCAAAAW_5p() ==> LVecBase3f$_$get_standardized_hpr(LVecBase3f const *param0)(LVecBase3f const *)
extern LVecBase3f * LVecBase3f$43$get_standardized_hpr(LVecBase3f const *self);

#if INDEX
#define LVecBase3f_C_get_standardized_hpr_p_p LVecBase3f$43$get_standardized_hpr
#endif

// C++ _inCAAAA53zo(LVecBase3f const &other) ==> LVecBase3f$_$compare_to(LVecBase3f const *param0, LVecBase3f const *param1)(LVecBase3f const *, LVecBase3f const *)
extern int LVecBase3f$44$compare_to(LVecBase3f const *self, LVecBase3f const *other);

#if INDEX
#define LVecBase3f_C_compare_to_i_pp LVecBase3f$44$compare_to
#endif

// C++ _inCAAAA8GlN(LVecBase3f const &other, float threshold) ==> LVecBase3f$_$compare_to(LVecBase3f const *param0, LVecBase3f const *param1, float param2)(LVecBase3f const *, LVecBase3f const *, float)
extern int LVecBase3f$45$compare_to(LVecBase3f const *self, LVecBase3f const *other, float threshold);

#if INDEX
#define LVecBase3f_C_compare_to_i_ppf LVecBase3f$45$compare_to
#endif

// C++ _inCAAAAOipS() ==> LVecBase3f$_$get_hash(LVecBase3f const *param0)(LVecBase3f const *)
extern std$_size_t LVecBase3f$46$get_hash(LVecBase3f const *self);

#if INDEX
#define LVecBase3f_C_get_hash_l_p LVecBase3f$46$get_hash
#endif

// C++ _inCAAAAgnPZ(float threshold) ==> LVecBase3f$_$get_hash(LVecBase3f const *param0, float param1)(LVecBase3f const *, float)
extern std$_size_t LVecBase3f$47$get_hash(LVecBase3f const *self, float threshold);

#if INDEX
#define LVecBase3f_C_get_hash_l_pf LVecBase3f$47$get_hash
#endif

// C++ _inCAAAA8t_I(std::size_t hash) ==> LVecBase3f$_$add_hash(LVecBase3f const *param0, std::size_t param1)(LVecBase3f const *, std::size_t)
extern std$_size_t LVecBase3f$48$add_hash(LVecBase3f const *self, std$_size_t hash);

#if INDEX
#define LVecBase3f_C_add_hash_l_pl LVecBase3f$48$add_hash
#endif

// C++ _inCAAAAyrIc(std::size_t hash, float threshold) ==> LVecBase3f$_$add_hash(LVecBase3f const *param0, std::size_t param1, float param2)(LVecBase3f const *, std::size_t, float)
extern std$_size_t LVecBase3f$49$add_hash(LVecBase3f const *self, std$_size_t hash, float threshold);

#if INDEX
#define LVecBase3f_C_add_hash_l_plf LVecBase3f$49$add_hash
#endif

// C++ _inCAAAAZWpj(ChecksumHashGenerator &hashgen) ==> LVecBase3f$_$generate_hash(LVecBase3f const *param0, ChecksumHashGenerator *param1)(LVecBase3f const *, ChecksumHashGenerator *)
extern void LVecBase3f$50$generate_hash(LVecBase3f const *self, ChecksumHashGenerator *hashgen);

#if INDEX
#define LVecBase3f_C_generate_hash_v_pp LVecBase3f$50$generate_hash
#endif

// C++ _inCAAAARJlv(ChecksumHashGenerator &hashgen, float threshold) ==> LVecBase3f$_$generate_hash(LVecBase3f const *param0, ChecksumHashGenerator *param1, float param2)(LVecBase3f const *, ChecksumHashGenerator *, float)
extern void LVecBase3f$51$generate_hash(LVecBase3f const *self, ChecksumHashGenerator *hashgen, float threshold);

#if INDEX
#define LVecBase3f_C_generate_hash_v_ppf LVecBase3f$51$generate_hash
#endif

// C++ _inCAAAAnVEp(LVecBase3f const &other) ==> LVecBase3f$_$componentwise_mult(LVecBase3f *param0, LVecBase3f const *param1)(LVecBase3f *, LVecBase3f const *)
extern void LVecBase3f$52$componentwise_mult(LVecBase3f *self, LVecBase3f const *other);

#if INDEX
#define LVecBase3f_C_componentwise_mult_v_pp LVecBase3f$52$componentwise_mult
#endif

// C++ _inCAAAApn3D(LVecBase3f const &other) ==> LVecBase3f$_$fmax(LVecBase3f const *param0, LVecBase3f const *param1)(LVecBase3f const *, LVecBase3f const *)
extern LVecBase3f * LVecBase3f$53$fmax(LVecBase3f const *self, LVecBase3f const *other);

#if INDEX
#define LVecBase3f_C_fmax_p_pp LVecBase3f$53$fmax
#endif

// C++ _inCAAAAHaYC(LVecBase3f const &other) ==> LVecBase3f$_$fmin(LVecBase3f const *param0, LVecBase3f const *param1)(LVecBase3f const *, LVecBase3f const *)
extern LVecBase3f * LVecBase3f$54$fmin(LVecBase3f const *self, LVecBase3f const *other);

#if INDEX
#define LVecBase3f_C_fmin_p_pp LVecBase3f$54$fmin
#endif

// C++ _inCAAAAvCKa(LVecBase3f const &other) ==> LVecBase3f$_$cross_into(LVecBase3f *param0, LVecBase3f const *param1)(LVecBase3f *, LVecBase3f const *)
extern void LVecBase3f$55$cross_into(LVecBase3f *self, LVecBase3f const *other);

#if INDEX
#define LVecBase3f_C_cross_into_v_pp LVecBase3f$55$cross_into
#endif

// C++ _inCAAAA2ADH(LVecBase3f const &other) ==> LVecBase3f$_$almost_equal(LVecBase3f const *param0, LVecBase3f const *param1)(LVecBase3f const *, LVecBase3f const *)
extern bool LVecBase3f$56$almost_equal(LVecBase3f const *self, LVecBase3f const *other);

#if INDEX
#define LVecBase3f_C_almost_equal_B_pp LVecBase3f$56$almost_equal
#endif

// C++ _inCAAAAjJ12(LVecBase3f const &other, float threshold) ==> LVecBase3f$_$almost_equal(LVecBase3f const *param0, LVecBase3f const *param1, float param2)(LVecBase3f const *, LVecBase3f const *, float)
extern bool LVecBase3f$57$almost_equal(LVecBase3f const *self, LVecBase3f const *other, float threshold);

#if INDEX
#define LVecBase3f_C_almost_equal_B_ppf LVecBase3f$57$almost_equal
#endif

// C++ _inCAAAAIm4Y(std::ostream &out) ==> LVecBase3f$_$output(LVecBase3f const *param0, std::ostream *param1)(LVecBase3f const *, std::ostream *)
extern void LVecBase3f$58$output(LVecBase3f const *self, std$_ostream *out);

#if INDEX
#define LVecBase3f_C_output_v_pp LVecBase3f$58$output
#endif

// C++ _inCAAAAi_RW(Datagram &destination) ==> LVecBase3f$_$write_datagram_fixed(LVecBase3f const *param0, Datagram *param1)(LVecBase3f const *, Datagram *)
extern void LVecBase3f$59$write_datagram_fixed(LVecBase3f const *self, Datagram *destination);

#if INDEX
#define LVecBase3f_C_write_datagram_fixed_v_pp LVecBase3f$59$write_datagram_fixed
#endif

// C++ _inCAAAAaJyS(DatagramIterator &source) ==> LVecBase3f$_$read_datagram_fixed(LVecBase3f *param0, DatagramIterator *param1)(LVecBase3f *, DatagramIterator *)
extern void LVecBase3f$60$read_datagram_fixed(LVecBase3f *self, DatagramIterator *source);

#if INDEX
#define LVecBase3f_C_read_datagram_fixed_v_pp LVecBase3f$60$read_datagram_fixed
#endif

// C++ _inCAAAAqMLT(Datagram &destination) ==> LVecBase3f$_$write_datagram(LVecBase3f const *param0, Datagram *param1)(LVecBase3f const *, Datagram *)
extern void LVecBase3f$61$write_datagram(LVecBase3f const *self, Datagram *destination);

#if INDEX
#define LVecBase3f_C_write_datagram_v_pp LVecBase3f$61$write_datagram
#endif

// C++ _inCAAAAKcMl(DatagramIterator &source) ==> LVecBase3f$_$read_datagram(LVecBase3f *param0, DatagramIterator *param1)(LVecBase3f *, DatagramIterator *)
extern void LVecBase3f$62$read_datagram(LVecBase3f *self, DatagramIterator *source);

#if INDEX
#define LVecBase3f_C_read_datagram_v_pp LVecBase3f$62$read_datagram
#endif

// C++ _inCAAAAdgPp() ==> LVecBase3f$_$get_v(LVecBase3f const *param0)(LVecBase3f const *)
extern LVecBase3f$_EVector3 * LVecBase3f$63$get_v(LVecBase3f const *self);

#if INDEX
#define LVecBase3f_C_get_v_p_p LVecBase3f$63$get_v
#endif

// C++ _inCAAAAdN_h() ==> LVecBase3f$_$get_class_type()()
extern int LVecBase3f$64$get_class_type(void);

#if INDEX
#define LVecBase3f_C_get_class_type_i_v LVecBase3f$64$get_class_type
#endif

// C++ _inCAAAAynKC() ==> LVecBase3f$_$init_type()()
extern void LVecBase3f$65$init_type(void);

#if INDEX
#define LVecBase3f_C_init_type_v_v LVecBase3f$65$init_type
#endif


// LVecBase3i

// C++ _inCAAAAIig7() ==> LVecBase3i$_$LVecBase3i()()
extern LVecBase3i * LVecBase3i$1$LVecBase3i(void);

#if INDEX
#define LVecBase3i_C_ctor_p_v LVecBase3i$1$LVecBase3i
#endif

// C++ _inCAAAAWrEZ(LVecBase2i const &copy, int z) ==> LVecBase3i$_$LVecBase3i(LVecBase2i const *param0, int param1)(LVecBase2i const *, int)
extern LVecBase3i * LVecBase3i$2$LVecBase3i(LVecBase2i const *copy, int z);

#if INDEX
#define LVecBase3i_C_ctor_p_pi LVecBase3i$2$LVecBase3i
#endif

// C++ _inCAAAAWXK_(LVecBase3i const &) ==> LVecBase3i$_$LVecBase3i(LVecBase3i const *param0)(LVecBase3i const *)
extern LVecBase3i * LVecBase3i$3$LVecBase3i(LVecBase3i const *arg0);

#if INDEX
#define LVecBase3i_C_ctor_p_p LVecBase3i$3$LVecBase3i
#endif

// C++ _inCAAAAEKUZ(LVecBase3i::EVector3 const &v) ==> LVecBase3i$_$LVecBase3i(LVecBase3i::EVector3 const *param0)(LVecBase3i::EVector3 const *)
extern LVecBase3i * LVecBase3i$4$LVecBase3i(LVecBase3i$_EVector3 const *v);
// COLLISION : LVecBase3i_C_ctor_p_p LVecBase3i$4$LVecBase3i

// C++ _inCAAAAO8Dl(int fill_value) ==> LVecBase3i$_$LVecBase3i(int param0)(int)
extern LVecBase3i * LVecBase3i$5$LVecBase3i(int fill_value);

#if INDEX
#define LVecBase3i_C_ctor_p_i LVecBase3i$5$LVecBase3i
#endif

// C++ _inCAAAAblMW(int x, int y, int z) ==> LVecBase3i$_$LVecBase3i(int param0, int param1, int param2)(int, int, int)
extern LVecBase3i * LVecBase3i$6$LVecBase3i(int x, int y, int z);

#if INDEX
#define LVecBase3i_C_ctor_p_iii LVecBase3i$6$LVecBase3i
#endif

// C++ _inCAAAA1EhZ() ==> LVecBase3i$_$zero()()
extern LVecBase3i const * LVecBase3i$7$zero(void);

#if INDEX
#define LVecBase3i_C_zero_p_v LVecBase3i$7$zero
#endif

// C++ _inCAAAAv3X9() ==> LVecBase3i$_$unit_x()()
extern LVecBase3i const * LVecBase3i$8$unit_x(void);

#if INDEX
#define LVecBase3i_C_unit_x_p_v LVecBase3i$8$unit_x
#endif

// C++ _inCAAAAs3lZ() ==> LVecBase3i$_$unit_y()()
extern LVecBase3i const * LVecBase3i$9$unit_y(void);

#if INDEX
#define LVecBase3i_C_unit_y_p_v LVecBase3i$9$unit_y
#endif

// C++ _inCAAAAS2z1() ==> LVecBase3i$_$unit_z()()
extern LVecBase3i const * LVecBase3i$10$unit_z(void);

#if INDEX
#define LVecBase3i_C_unit_z_p_v LVecBase3i$10$unit_z
#endif

// C++ _inCAAAAH6QD() ==> LVecBase3i$_$size()()
extern int LVecBase3i$11$size(void);

#if INDEX
#define LVecBase3i_C_size_i_v LVecBase3i$11$size
#endif

// C++ _inCAAAAgfHK() ==> LVecBase3i$_$is_nan(LVecBase3i const *param0)(LVecBase3i const *)
extern bool LVecBase3i$12$is_nan(LVecBase3i const *self);

#if INDEX
#define LVecBase3i_C_is_nan_B_p LVecBase3i$12$is_nan
#endif

// C++ _inCAAAAeagv(int i) ==> LVecBase3i$_$get_cell(LVecBase3i const *param0, int param1)(LVecBase3i const *, int)
extern int LVecBase3i$13$get_cell(LVecBase3i const *self, int i);

#if INDEX
#define LVecBase3i_C_get_cell_i_pi LVecBase3i$13$get_cell
#endif

// C++ _inCAAAAzKAb() ==> LVecBase3i$_$get_x(LVecBase3i const *param0)(LVecBase3i const *)
extern int LVecBase3i$14$get_x(LVecBase3i const *self);

#if INDEX
#define LVecBase3i_C_get_x_i_p LVecBase3i$14$get_x
#endif

// C++ _inCAAAAzm4f() ==> LVecBase3i$_$get_y(LVecBase3i const *param0)(LVecBase3i const *)
extern int LVecBase3i$15$get_y(LVecBase3i const *self);

#if INDEX
#define LVecBase3i_C_get_y_i_p LVecBase3i$15$get_y
#endif

// C++ _inCAAAAzCzk() ==> LVecBase3i$_$get_z(LVecBase3i const *param0)(LVecBase3i const *)
extern int LVecBase3i$16$get_z(LVecBase3i const *self);

#if INDEX
#define LVecBase3i_C_get_z_i_p LVecBase3i$16$get_z
#endif

// C++ _inCAAAA38y0(int i, int value) ==> LVecBase3i$_$set_cell(LVecBase3i *param0, int param1, int param2)(LVecBase3i *, int, int)
extern void LVecBase3i$17$set_cell(LVecBase3i *self, int i, int value);

#if INDEX
#define LVecBase3i_C_set_cell_v_pii LVecBase3i$17$set_cell
#endif

// C++ _inCAAAAFVbS(int value) ==> LVecBase3i$_$set_x(LVecBase3i *param0, int param1)(LVecBase3i *, int)
extern void LVecBase3i$18$set_x(LVecBase3i *self, int value);

#if INDEX
#define LVecBase3i_C_set_x_v_pi LVecBase3i$18$set_x
#endif

// C++ _inCAAAAFxTX(int value) ==> LVecBase3i$_$set_y(LVecBase3i *param0, int param1)(LVecBase3i *, int)
extern void LVecBase3i$19$set_y(LVecBase3i *self, int value);

#if INDEX
#define LVecBase3i_C_set_y_v_pi LVecBase3i$19$set_y
#endif

// C++ _inCAAAAFdMc(int value) ==> LVecBase3i$_$set_z(LVecBase3i *param0, int param1)(LVecBase3i *, int)
extern void LVecBase3i$20$set_z(LVecBase3i *self, int value);

#if INDEX
#define LVecBase3i_C_set_z_v_pi LVecBase3i$20$set_z
#endif

// C++ _inCAAAArGaR() ==> LVecBase3i$_$get_xy(LVecBase3i const *param0)(LVecBase3i const *)
extern LVecBase2i * LVecBase3i$21$get_xy(LVecBase3i const *self);

#if INDEX
#define LVecBase3i_C_get_xy_p_p LVecBase3i$21$get_xy
#endif

// C++ _inCAAAApGot() ==> LVecBase3i$_$get_xz(LVecBase3i const *param0)(LVecBase3i const *)
extern LVecBase2i * LVecBase3i$22$get_xz(LVecBase3i const *self);

#if INDEX
#define LVecBase3i_C_get_xz_p_p LVecBase3i$22$get_xz
#endif

// C++ _inCAAAApigy() ==> LVecBase3i$_$get_yz(LVecBase3i const *param0)(LVecBase3i const *)
extern LVecBase2i * LVecBase3i$23$get_yz(LVecBase3i const *self);

#if INDEX
#define LVecBase3i_C_get_yz_p_p LVecBase3i$23$get_yz
#endif

// C++ _inCAAAA3S0c(int i, int value) ==> LVecBase3i$_$add_to_cell(LVecBase3i *param0, int param1, int param2)(LVecBase3i *, int, int)
extern void LVecBase3i$24$add_to_cell(LVecBase3i *self, int i, int value);

#if INDEX
#define LVecBase3i_C_add_to_cell_v_pii LVecBase3i$24$add_to_cell
#endif

// C++ _inCAAAA8v4Q(int value) ==> LVecBase3i$_$add_x(LVecBase3i *param0, int param1)(LVecBase3i *, int)
extern void LVecBase3i$25$add_x(LVecBase3i *self, int value);

#if INDEX
#define LVecBase3i_C_add_x_v_pi LVecBase3i$25$add_x
#endif

// C++ _inCAAAA8LxV(int value) ==> LVecBase3i$_$add_y(LVecBase3i *param0, int param1)(LVecBase3i *, int)
extern void LVecBase3i$26$add_y(LVecBase3i *self, int value);

#if INDEX
#define LVecBase3i_C_add_y_v_pi LVecBase3i$26$add_y
#endif

// C++ _inCAAAA8Xpa(int value) ==> LVecBase3i$_$add_z(LVecBase3i *param0, int param1)(LVecBase3i *, int)
extern void LVecBase3i$27$add_z(LVecBase3i *self, int value);

#if INDEX
#define LVecBase3i_C_add_z_v_pi LVecBase3i$27$add_z
#endif

// C++ _inCAAAAkQEO() ==> LVecBase3i$_$get_data(LVecBase3i const *param0)(LVecBase3i const *)
extern void LVecBase3i$28$get_data(LVecBase3i const *self);

#if INDEX
#define LVecBase3i_C_get_data_v_p LVecBase3i$28$get_data
#endif

// C++ _inCAAAAnoUf() ==> LVecBase3i$_$get_num_components()()
extern int LVecBase3i$29$get_num_components(void);

#if INDEX
#define LVecBase3i_C_get_num_components_i_v LVecBase3i$29$get_num_components
#endif

// C++ _inCAAAAKYaO() ==> LVecBase3i$_$begin(LVecBase3i *param0)(LVecBase3i *)
extern void LVecBase3i$30$begin(LVecBase3i *self);

#if INDEX
#define LVecBase3i_C_begin_v_p LVecBase3i$30$begin
#endif

// C++ _inCAAAAUNG1() ==> LVecBase3i$_$begin(LVecBase3i const *param0)(LVecBase3i const *)
extern void LVecBase3i$31$begin(LVecBase3i const *self);
// COLLISION : LVecBase3i_C_begin_v_p LVecBase3i$31$begin

// C++ _inCAAAANCvl() ==> LVecBase3i$_$end(LVecBase3i *param0)(LVecBase3i *)
extern void LVecBase3i$32$end(LVecBase3i *self);

#if INDEX
#define LVecBase3i_C_end_v_p LVecBase3i$32$end
#endif

// C++ _inCAAAAmf8Z() ==> LVecBase3i$_$end(LVecBase3i const *param0)(LVecBase3i const *)
extern void LVecBase3i$33$end(LVecBase3i const *self);
// COLLISION : LVecBase3i_C_end_v_p LVecBase3i$33$end

// C++ _inCAAAA1ZfK(int fill_value) ==> LVecBase3i$_$fill(LVecBase3i *param0, int param1)(LVecBase3i *, int)
extern void LVecBase3i$34$fill(LVecBase3i *self, int fill_value);

#if INDEX
#define LVecBase3i_C_fill_v_pi LVecBase3i$34$fill
#endif

// C++ _inCAAAAEfm8(int x, int y, int z) ==> LVecBase3i$_$set(LVecBase3i *param0, int param1, int param2, int param3)(LVecBase3i *, int, int, int)
extern void LVecBase3i$35$set(LVecBase3i *self, int x, int y, int z);

#if INDEX
#define LVecBase3i_C_set_v_piii LVecBase3i$35$set
#endif

// C++ _inCAAAAVa__(LVecBase3i const &other) ==> LVecBase3i$_$dot(LVecBase3i const *param0, LVecBase3i const *param1)(LVecBase3i const *, LVecBase3i const *)
extern int LVecBase3i$36$dot(LVecBase3i const *self, LVecBase3i const *other);

#if INDEX
#define LVecBase3i_C_dot_i_pp LVecBase3i$36$dot
#endif

// C++ _inCAAAA7ltl() ==> LVecBase3i$_$length_squared(LVecBase3i const *param0)(LVecBase3i const *)
extern int LVecBase3i$37$length_squared(LVecBase3i const *self);

#if INDEX
#define LVecBase3i_C_length_squared_i_p LVecBase3i$37$length_squared
#endif

// C++ _inCAAAAUHkg(LVecBase3i const &other) ==> LVecBase3i$_$cross(LVecBase3i const *param0, LVecBase3i const *param1)(LVecBase3i const *, LVecBase3i const *)
extern LVecBase3i * LVecBase3i$38$cross(LVecBase3i const *self, LVecBase3i const *other);

#if INDEX
#define LVecBase3i_C_cross_p_pp LVecBase3i$38$cross
#endif

// C++ _inCAAAARCE2(LVecBase3i const &other) ==> LVecBase3i$_$compare_to(LVecBase3i const *param0, LVecBase3i const *param1)(LVecBase3i const *, LVecBase3i const *)
extern int LVecBase3i$39$compare_to(LVecBase3i const *self, LVecBase3i const *other);

#if INDEX
#define LVecBase3i_C_compare_to_i_pp LVecBase3i$39$compare_to
#endif

// C++ _inCAAAAH9r6() ==> LVecBase3i$_$get_hash(LVecBase3i const *param0)(LVecBase3i const *)
extern std$_size_t LVecBase3i$40$get_hash(LVecBase3i const *self);

#if INDEX
#define LVecBase3i_C_get_hash_l_p LVecBase3i$40$get_hash
#endif

// C++ _inCAAAAnUAx(std::size_t hash) ==> LVecBase3i$_$add_hash(LVecBase3i const *param0, std::size_t param1)(LVecBase3i const *, std::size_t)
extern std$_size_t LVecBase3i$41$add_hash(LVecBase3i const *self, std$_size_t hash);

#if INDEX
#define LVecBase3i_C_add_hash_l_pl LVecBase3i$41$add_hash
#endif

// C++ _inCAAAADDqL(ChecksumHashGenerator &hashgen) ==> LVecBase3i$_$generate_hash(LVecBase3i const *param0, ChecksumHashGenerator *param1)(LVecBase3i const *, ChecksumHashGenerator *)
extern void LVecBase3i$42$generate_hash(LVecBase3i const *self, ChecksumHashGenerator *hashgen);

#if INDEX
#define LVecBase3i_C_generate_hash_v_pp LVecBase3i$42$generate_hash
#endif

// C++ _inCAAAA0ivf(LVecBase3i const &other) ==> LVecBase3i$_$componentwise_mult(LVecBase3i *param0, LVecBase3i const *param1)(LVecBase3i *, LVecBase3i const *)
extern void LVecBase3i$43$componentwise_mult(LVecBase3i *self, LVecBase3i const *other);

#if INDEX
#define LVecBase3i_C_componentwise_mult_v_pp LVecBase3i$43$componentwise_mult
#endif

// C++ _inCAAAAjjem(LVecBase3i const &other) ==> LVecBase3i$_$fmax(LVecBase3i const *param0, LVecBase3i const *param1)(LVecBase3i const *, LVecBase3i const *)
extern LVecBase3i * LVecBase3i$44$fmax(LVecBase3i const *self, LVecBase3i const *other);

#if INDEX
#define LVecBase3i_C_fmax_p_pp LVecBase3i$44$fmax
#endif

// C++ _inCAAAA9W_k(LVecBase3i const &other) ==> LVecBase3i$_$fmin(LVecBase3i const *param0, LVecBase3i const *param1)(LVecBase3i const *, LVecBase3i const *)
extern LVecBase3i * LVecBase3i$45$fmin(LVecBase3i const *self, LVecBase3i const *other);

#if INDEX
#define LVecBase3i_C_fmin_p_pp LVecBase3i$45$fmin
#endif

// C++ _inCAAAAiAcn(LVecBase3i const &other) ==> LVecBase3i$_$cross_into(LVecBase3i *param0, LVecBase3i const *param1)(LVecBase3i *, LVecBase3i const *)
extern void LVecBase3i$46$cross_into(LVecBase3i *self, LVecBase3i const *other);

#if INDEX
#define LVecBase3i_C_cross_into_v_pp LVecBase3i$46$cross_into
#endif

// C++ _inCAAAAaoTv(LVecBase3i const &other) ==> LVecBase3i$_$almost_equal(LVecBase3i const *param0, LVecBase3i const *param1)(LVecBase3i const *, LVecBase3i const *)
extern bool LVecBase3i$47$almost_equal(LVecBase3i const *self, LVecBase3i const *other);

#if INDEX
#define LVecBase3i_C_almost_equal_B_pp LVecBase3i$47$almost_equal
#endif

// C++ _inCAAAAyuGe(LVecBase3i const &other, int threshold) ==> LVecBase3i$_$almost_equal(LVecBase3i const *param0, LVecBase3i const *param1, int param2)(LVecBase3i const *, LVecBase3i const *, int)
extern bool LVecBase3i$48$almost_equal(LVecBase3i const *self, LVecBase3i const *other, int threshold);

#if INDEX
#define LVecBase3i_C_almost_equal_B_ppi LVecBase3i$48$almost_equal
#endif

// C++ _inCAAAA9k5A(std::ostream &out) ==> LVecBase3i$_$output(LVecBase3i const *param0, std::ostream *param1)(LVecBase3i const *, std::ostream *)
extern void LVecBase3i$49$output(LVecBase3i const *self, std$_ostream *out);

#if INDEX
#define LVecBase3i_C_output_v_pp LVecBase3i$49$output
#endif

// C++ _inCAAAAmYS_(Datagram &destination) ==> LVecBase3i$_$write_datagram_fixed(LVecBase3i const *param0, Datagram *param1)(LVecBase3i const *, Datagram *)
extern void LVecBase3i$50$write_datagram_fixed(LVecBase3i const *self, Datagram *destination);

#if INDEX
#define LVecBase3i_C_write_datagram_fixed_v_pp LVecBase3i$50$write_datagram_fixed
#endif

// C++ _inCAAAAmL06(DatagramIterator &source) ==> LVecBase3i$_$read_datagram_fixed(LVecBase3i *param0, DatagramIterator *param1)(LVecBase3i *, DatagramIterator *)
extern void LVecBase3i$51$read_datagram_fixed(LVecBase3i *self, DatagramIterator *source);

#if INDEX
#define LVecBase3i_C_read_datagram_fixed_v_pp LVecBase3i$51$read_datagram_fixed
#endif

// C++ _inCAAAAT9M7(Datagram &destination) ==> LVecBase3i$_$write_datagram(LVecBase3i const *param0, Datagram *param1)(LVecBase3i const *, Datagram *)
extern void LVecBase3i$52$write_datagram(LVecBase3i const *self, Datagram *destination);

#if INDEX
#define LVecBase3i_C_write_datagram_v_pp LVecBase3i$52$write_datagram
#endif

// C++ _inCAAAAStNN(DatagramIterator &source) ==> LVecBase3i$_$read_datagram(LVecBase3i *param0, DatagramIterator *param1)(LVecBase3i *, DatagramIterator *)
extern void LVecBase3i$53$read_datagram(LVecBase3i *self, DatagramIterator *source);

#if INDEX
#define LVecBase3i_C_read_datagram_v_pp LVecBase3i$53$read_datagram
#endif

// C++ _inCAAAAzSRR() ==> LVecBase3i$_$get_v(LVecBase3i const *param0)(LVecBase3i const *)
extern LVecBase3i$_EVector3 * LVecBase3i$54$get_v(LVecBase3i const *self);

#if INDEX
#define LVecBase3i_C_get_v_p_p LVecBase3i$54$get_v
#endif

// C++ _inCAAAAn9_J() ==> LVecBase3i$_$get_class_type()()
extern int LVecBase3i$55$get_class_type(void);

#if INDEX
#define LVecBase3i_C_get_class_type_i_v LVecBase3i$55$get_class_type
#endif

// C++ _inCAAAAZrLq() ==> LVecBase3i$_$init_type()()
extern void LVecBase3i$56$init_type(void);

#if INDEX
#define LVecBase3i_C_init_type_v_v LVecBase3i$56$init_type
#endif


// LVecBase4d

// C++ _inCAAAAfAuU() ==> LVecBase4d$_$LVecBase4d()()
extern LVecBase4d * LVecBase4d$1$LVecBase4d(void);

#if INDEX
#define LVecBase4d_C_ctor_p_v LVecBase4d$1$LVecBase4d
#endif

// C++ _inCAAAAwq_z(LPoint3d const &point) ==> LVecBase4d$_$LVecBase4d(LPoint3d const *param0)(LPoint3d const *)
extern LVecBase4d * LVecBase4d$2$LVecBase4d(LPoint3d const *point);

#if INDEX
#define LVecBase4d_C_ctor_p_p LVecBase4d$2$LVecBase4d
#endif

// C++ _inCAAAAqJxo(LVecBase3d const &copy, double w) ==> LVecBase4d$_$LVecBase4d(LVecBase3d const *param0, double param1)(LVecBase3d const *, double)
extern LVecBase4d * LVecBase4d$3$LVecBase4d(LVecBase3d const *copy, double w);

#if INDEX
#define LVecBase4d_C_ctor_p_pd LVecBase4d$3$LVecBase4d
#endif

// C++ _inCAAAAKfrW(LVecBase4d const &) ==> LVecBase4d$_$LVecBase4d(LVecBase4d const *param0)(LVecBase4d const *)
extern LVecBase4d * LVecBase4d$4$LVecBase4d(LVecBase4d const *arg0);
// COLLISION : LVecBase4d_C_ctor_p_p LVecBase4d$4$LVecBase4d

// C++ _inCAAAAb013(LVecBase4d::EVector4 const &v) ==> LVecBase4d$_$LVecBase4d(LVecBase4d::EVector4 const *param0)(LVecBase4d::EVector4 const *)
extern LVecBase4d * LVecBase4d$5$LVecBase4d(LVecBase4d$_EVector4 const *v);
// COLLISION : LVecBase4d_C_ctor_p_p LVecBase4d$5$LVecBase4d

// C++ _inCAAAAm8pA(LVector3d const &vector) ==> LVecBase4d$_$LVecBase4d(LVector3d const *param0)(LVector3d const *)
extern LVecBase4d * LVecBase4d$6$LVecBase4d(LVector3d const *vector);
// COLLISION : LVecBase4d_C_ctor_p_p LVecBase4d$6$LVecBase4d

// C++ _inCAAAA6Q3P(UnalignedLVecBase4d const &copy) ==> LVecBase4d$_$LVecBase4d(UnalignedLVecBase4d const *param0)(UnalignedLVecBase4d const *)
extern LVecBase4d * LVecBase4d$7$LVecBase4d(UnalignedLVecBase4d const *copy);
// COLLISION : LVecBase4d_C_ctor_p_p LVecBase4d$7$LVecBase4d

// C++ _inCAAAA5BJ_(double fill_value) ==> LVecBase4d$_$LVecBase4d(double param0)(double)
extern LVecBase4d * LVecBase4d$8$LVecBase4d(double fill_value);

#if INDEX
#define LVecBase4d_C_ctor_p_d LVecBase4d$8$LVecBase4d
#endif

// C++ _inCAAAAGENf(double x, double y, double z, double w) ==> LVecBase4d$_$LVecBase4d(double param0, double param1, double param2, double param3)(double, double, double, double)
extern LVecBase4d * LVecBase4d$9$LVecBase4d(double x, double y, double z, double w);

#if INDEX
#define LVecBase4d_C_ctor_p_dddd LVecBase4d$9$LVecBase4d
#endif

// C++ _inCAAAAYrPj() ==> LVecBase4d$_$zero()()
extern LVecBase4d const * LVecBase4d$10$zero(void);

#if INDEX
#define LVecBase4d_C_zero_p_v LVecBase4d$10$zero
#endif

// C++ _inCAAAAQxFH() ==> LVecBase4d$_$unit_x()()
extern LVecBase4d const * LVecBase4d$11$unit_x(void);

#if INDEX
#define LVecBase4d_C_unit_x_p_v LVecBase4d$11$unit_x
#endif

// C++ _inCAAAASxTj() ==> LVecBase4d$_$unit_y()()
extern LVecBase4d const * LVecBase4d$12$unit_y(void);

#if INDEX
#define LVecBase4d_C_unit_y_p_v LVecBase4d$12$unit_y
#endif

// C++ _inCAAAAsxh_() ==> LVecBase4d$_$unit_z()()
extern LVecBase4d const * LVecBase4d$13$unit_z(void);

#if INDEX
#define LVecBase4d_C_unit_z_p_v LVecBase4d$13$unit_z
#endif

// C++ _inCAAAAVx3q() ==> LVecBase4d$_$unit_w()()
extern LVecBase4d const * LVecBase4d$14$unit_w(void);

#if INDEX
#define LVecBase4d_C_unit_w_p_v LVecBase4d$14$unit_w
#endif

// C++ _inCAAAAWK_M() ==> LVecBase4d$_$size()()
extern int LVecBase4d$15$size(void);

#if INDEX
#define LVecBase4d_C_size_i_v LVecBase4d$15$size
#endif

// C++ _inCAAAAPu2T() ==> LVecBase4d$_$is_nan(LVecBase4d const *param0)(LVecBase4d const *)
extern bool LVecBase4d$16$is_nan(LVecBase4d const *self);

#if INDEX
#define LVecBase4d_C_is_nan_B_p LVecBase4d$16$is_nan
#endif

// C++ _inCAAAA_qP5(int i) ==> LVecBase4d$_$get_cell(LVecBase4d const *param0, int param1)(LVecBase4d const *, int)
extern double LVecBase4d$17$get_cell(LVecBase4d const *self, int i);

#if INDEX
#define LVecBase4d_C_get_cell_d_pi LVecBase4d$17$get_cell
#endif

// C++ _inCAAAAf_AA(int i, double value) ==> LVecBase4d$_$set_cell(LVecBase4d *param0, int param1, double param2)(LVecBase4d *, int, double)
extern void LVecBase4d$18$set_cell(LVecBase4d *self, int i, double value);

#if INDEX
#define LVecBase4d_C_set_cell_v_pid LVecBase4d$18$set_cell
#endif

// C++ _inCAAAArtvk() ==> LVecBase4d$_$get_x(LVecBase4d const *param0)(LVecBase4d const *)
extern double LVecBase4d$19$get_x(LVecBase4d const *self);

#if INDEX
#define LVecBase4d_C_get_x_d_p LVecBase4d$19$get_x
#endif

// C++ _inCAAAArJop() ==> LVecBase4d$_$get_y(LVecBase4d const *param0)(LVecBase4d const *)
extern double LVecBase4d$20$get_y(LVecBase4d const *self);

#if INDEX
#define LVecBase4d_C_get_y_d_p LVecBase4d$20$get_y
#endif

// C++ _inCAAAArlgu() ==> LVecBase4d$_$get_z(LVecBase4d const *param0)(LVecBase4d const *)
extern double LVecBase4d$21$get_z(LVecBase4d const *self);

#if INDEX
#define LVecBase4d_C_get_z_d_p LVecBase4d$21$get_z
#endif

// C++ _inCAAAArx3f() ==> LVecBase4d$_$get_w(LVecBase4d const *param0)(LVecBase4d const *)
extern double LVecBase4d$22$get_w(LVecBase4d const *self);

#if INDEX
#define LVecBase4d_C_get_w_d_p LVecBase4d$22$get_w
#endif

// C++ _inCAAAALN9u() ==> LVecBase4d$_$get_xyz(LVecBase4d const *param0)(LVecBase4d const *)
extern LVecBase3d * LVecBase4d$23$get_xyz(LVecBase4d const *self);

#if INDEX
#define LVecBase4d_C_get_xyz_p_p LVecBase4d$23$get_xyz
#endif

// C++ _inCAAAAEmJb() ==> LVecBase4d$_$get_xy(LVecBase4d const *param0)(LVecBase4d const *)
extern LVecBase2d * LVecBase4d$24$get_xy(LVecBase4d const *self);

#if INDEX
#define LVecBase4d_C_get_xy_p_p LVecBase4d$24$get_xy
#endif

// C++ _inCAAAAjGFc(double value) ==> LVecBase4d$_$set_x(LVecBase4d *param0, double param1)(LVecBase4d *, double)
extern void LVecBase4d$25$set_x(LVecBase4d *self, double value);

#if INDEX
#define LVecBase4d_C_set_x_v_pd LVecBase4d$25$set_x
#endif

// C++ _inCAAAAji9g(double value) ==> LVecBase4d$_$set_y(LVecBase4d *param0, double param1)(LVecBase4d *, double)
extern void LVecBase4d$26$set_y(LVecBase4d *self, double value);

#if INDEX
#define LVecBase4d_C_set_y_v_pd LVecBase4d$26$set_y
#endif

// C++ _inCAAAAje2l(double value) ==> LVecBase4d$_$set_z(LVecBase4d *param0, double param1)(LVecBase4d *, double)
extern void LVecBase4d$27$set_z(LVecBase4d *self, double value);

#if INDEX
#define LVecBase4d_C_set_z_v_pd LVecBase4d$27$set_z
#endif

// C++ _inCAAAAjqMX(double value) ==> LVecBase4d$_$set_w(LVecBase4d *param0, double param1)(LVecBase4d *, double)
extern void LVecBase4d$28$set_w(LVecBase4d *self, double value);

#if INDEX
#define LVecBase4d_C_set_w_v_pd LVecBase4d$28$set_w
#endif

// C++ _inCAAAAfMae(int i, double value) ==> LVecBase4d$_$add_to_cell(LVecBase4d *param0, int param1, double param2)(LVecBase4d *, int, double)
extern void LVecBase4d$29$add_to_cell(LVecBase4d *self, int i, double value);

#if INDEX
#define LVecBase4d_C_add_to_cell_v_pid LVecBase4d$29$add_to_cell
#endif

// C++ _inCAAAAARia(double value) ==> LVecBase4d$_$add_x(LVecBase4d *param0, double param1)(LVecBase4d *, double)
extern void LVecBase4d$30$add_x(LVecBase4d *self, double value);

#if INDEX
#define LVecBase4d_C_add_x_v_pd LVecBase4d$30$add_x
#endif

// C++ _inCAAAAA1af(double value) ==> LVecBase4d$_$add_y(LVecBase4d *param0, double param1)(LVecBase4d *, double)
extern void LVecBase4d$31$add_y(LVecBase4d *self, double value);

#if INDEX
#define LVecBase4d_C_add_y_v_pd LVecBase4d$31$add_y
#endif

// C++ _inCAAAAAZTk(double value) ==> LVecBase4d$_$add_z(LVecBase4d *param0, double param1)(LVecBase4d *, double)
extern void LVecBase4d$32$add_z(LVecBase4d *self, double value);

#if INDEX
#define LVecBase4d_C_add_z_v_pd LVecBase4d$32$add_z
#endif

// C++ _inCAAAAANqV(double value) ==> LVecBase4d$_$add_w(LVecBase4d *param0, double param1)(LVecBase4d *, double)
extern void LVecBase4d$33$add_w(LVecBase4d *self, double value);

#if INDEX
#define LVecBase4d_C_add_w_v_pd LVecBase4d$33$add_w
#endif

// C++ _inCAAAAx8zX() ==> LVecBase4d$_$get_data(LVecBase4d const *param0)(LVecBase4d const *)
extern void LVecBase4d$34$get_data(LVecBase4d const *self);

#if INDEX
#define LVecBase4d_C_get_data_v_p LVecBase4d$34$get_data
#endif

// C++ _inCAAAAPVEp() ==> LVecBase4d$_$get_num_components()()
extern int LVecBase4d$35$get_num_components(void);

#if INDEX
#define LVecBase4d_C_get_num_components_i_v LVecBase4d$35$get_num_components
#endif

// C++ _inCAAAAgbKY() ==> LVecBase4d$_$begin(LVecBase4d *param0)(LVecBase4d *)
extern void LVecBase4d$36$begin(LVecBase4d *self);

#if INDEX
#define LVecBase4d_C_begin_v_p LVecBase4d$36$begin
#endif

// C++ _inCAAAAhe0_() ==> LVecBase4d$_$begin(LVecBase4d const *param0)(LVecBase4d const *)
extern void LVecBase4d$37$begin(LVecBase4d const *self);
// COLLISION : LVecBase4d_C_begin_v_p LVecBase4d$37$begin

// C++ _inCAAAAKSfv() ==> LVecBase4d$_$end(LVecBase4d *param0)(LVecBase4d *)
extern void LVecBase4d$38$end(LVecBase4d *self);

#if INDEX
#define LVecBase4d_C_end_v_p LVecBase4d$38$end
#endif

// C++ _inCAAAAMRrj() ==> LVecBase4d$_$end(LVecBase4d const *param0)(LVecBase4d const *)
extern void LVecBase4d$39$end(LVecBase4d const *self);
// COLLISION : LVecBase4d_C_end_v_p LVecBase4d$39$end

// C++ _inCAAAAFbMg(double fill_value) ==> LVecBase4d$_$fill(LVecBase4d *param0, double param1)(LVecBase4d *, double)
extern void LVecBase4d$40$fill(LVecBase4d *self, double fill_value);

#if INDEX
#define LVecBase4d_C_fill_v_pd LVecBase4d$40$fill
#endif

// C++ _inCAAAAdT7O(double x, double y, double z, double w) ==> LVecBase4d$_$set(LVecBase4d *param0, double param1, double param2, double param3, double param4)(LVecBase4d *, double, double, double, double)
extern void LVecBase4d$41$set(LVecBase4d *self, double x, double y, double z, double w);

#if INDEX
#define LVecBase4d_C_set_v_pdddd LVecBase4d$41$set
#endif

// C++ _inCAAAAVfrF(LVecBase4d const &other) ==> LVecBase4d$_$dot(LVecBase4d const *param0, LVecBase4d const *param1)(LVecBase4d const *, LVecBase4d const *)
extern double LVecBase4d$42$dot(LVecBase4d const *self, LVecBase4d const *other);

#if INDEX
#define LVecBase4d_C_dot_d_pp LVecBase4d$42$dot
#endif

// C++ _inCAAAATIcv() ==> LVecBase4d$_$length_squared(LVecBase4d const *param0)(LVecBase4d const *)
extern double LVecBase4d$43$length_squared(LVecBase4d const *self);

#if INDEX
#define LVecBase4d_C_length_squared_d_p LVecBase4d$43$length_squared
#endif

// C++ _inCAAAAVEoP() ==> LVecBase4d$_$length(LVecBase4d const *param0)(LVecBase4d const *)
extern double LVecBase4d$44$length(LVecBase4d const *self);

#if INDEX
#define LVecBase4d_C_length_d_p LVecBase4d$44$length
#endif

// C++ _inCAAAAwBCl() ==> LVecBase4d$_$normalize(LVecBase4d *param0)(LVecBase4d *)
extern bool LVecBase4d$45$normalize(LVecBase4d *self);

#if INDEX
#define LVecBase4d_C_normalize_B_p LVecBase4d$45$normalize
#endif

// C++ _inCAAAAhXyB() ==> LVecBase4d$_$normalized(LVecBase4d const *param0)(LVecBase4d const *)
extern LVecBase4d * LVecBase4d$46$normalized(LVecBase4d const *self);

#if INDEX
#define LVecBase4d_C_normalized_p_p LVecBase4d$46$normalized
#endif

// C++ _inCAAAAO3Ro(LVecBase4d const &onto) ==> LVecBase4d$_$project(LVecBase4d const *param0, LVecBase4d const *param1)(LVecBase4d const *, LVecBase4d const *)
extern LVecBase4d * LVecBase4d$47$project(LVecBase4d const *self, LVecBase4d const *onto);

#if INDEX
#define LVecBase4d_C_project_p_pp LVecBase4d$47$project
#endif

// C++ _inCAAAA0LH_(LVecBase4d const &other) ==> LVecBase4d$_$compare_to(LVecBase4d const *param0, LVecBase4d const *param1)(LVecBase4d const *, LVecBase4d const *)
extern int LVecBase4d$48$compare_to(LVecBase4d const *self, LVecBase4d const *other);

#if INDEX
#define LVecBase4d_C_compare_to_i_pp LVecBase4d$48$compare_to
#endif

// C++ _inCAAAA319I(LVecBase4d const &other, double threshold) ==> LVecBase4d$_$compare_to(LVecBase4d const *param0, LVecBase4d const *param1, double param2)(LVecBase4d const *, LVecBase4d const *, double)
extern int LVecBase4d$49$compare_to(LVecBase4d const *self, LVecBase4d const *other, double threshold);

#if INDEX
#define LVecBase4d_C_compare_to_i_ppd LVecBase4d$49$compare_to
#endif

// C++ _inCAAAA8_ZE() ==> LVecBase4d$_$get_hash(LVecBase4d const *param0)(LVecBase4d const *)
extern std$_size_t LVecBase4d$50$get_hash(LVecBase4d const *self);

#if INDEX
#define LVecBase4d_C_get_hash_l_p LVecBase4d$50$get_hash
#endif

// C++ _inCAAAASwXj(double threshold) ==> LVecBase4d$_$get_hash(LVecBase4d const *param0, double param1)(LVecBase4d const *, double)
extern std$_size_t LVecBase4d$51$get_hash(LVecBase4d const *self, double threshold);

#if INDEX
#define LVecBase4d_C_get_hash_l_pd LVecBase4d$51$get_hash
#endif

// C++ _inCAAAA0gu6(std::size_t hash) ==> LVecBase4d$_$add_hash(LVecBase4d const *param0, std::size_t param1)(LVecBase4d const *, std::size_t)
extern std$_size_t LVecBase4d$52$add_hash(LVecBase4d const *self, std$_size_t hash);

#if INDEX
#define LVecBase4d_C_add_hash_l_pl LVecBase4d$52$add_hash
#endif

// C++ _inCAAAAKLFT(std::size_t hash, double threshold) ==> LVecBase4d$_$add_hash(LVecBase4d const *param0, std::size_t param1, double param2)(LVecBase4d const *, std::size_t, double)
extern std$_size_t LVecBase4d$53$add_hash(LVecBase4d const *self, std$_size_t hash, double threshold);

#if INDEX
#define LVecBase4d_C_add_hash_l_pld LVecBase4d$53$add_hash
#endif

// C++ _inCAAAArlZV(ChecksumHashGenerator &hashgen) ==> LVecBase4d$_$generate_hash(LVecBase4d const *param0, ChecksumHashGenerator *param1)(LVecBase4d const *, ChecksumHashGenerator *)
extern void LVecBase4d$54$generate_hash(LVecBase4d const *self, ChecksumHashGenerator *hashgen);

#if INDEX
#define LVecBase4d_C_generate_hash_v_pp LVecBase4d$54$generate_hash
#endif

// C++ _inCAAAAMhf5(ChecksumHashGenerator &hashgen, double threshold) ==> LVecBase4d$_$generate_hash(LVecBase4d const *param0, ChecksumHashGenerator *param1, double param2)(LVecBase4d const *, ChecksumHashGenerator *, double)
extern void LVecBase4d$55$generate_hash(LVecBase4d const *self, ChecksumHashGenerator *hashgen, double threshold);

#if INDEX
#define LVecBase4d_C_generate_hash_v_ppd LVecBase4d$55$generate_hash
#endif

// C++ _inCAAAAh_OR(LVecBase4d const &other) ==> LVecBase4d$_$componentwise_mult(LVecBase4d *param0, LVecBase4d const *param1)(LVecBase4d *, LVecBase4d const *)
extern void LVecBase4d$56$componentwise_mult(LVecBase4d *self, LVecBase4d const *other);

#if INDEX
#define LVecBase4d_C_componentwise_mult_v_pp LVecBase4d$56$componentwise_mult
#endif

// C++ _inCAAAAR1LP(LVecBase4d const &other) ==> LVecBase4d$_$fmax(LVecBase4d const *param0, LVecBase4d const *param1)(LVecBase4d const *, LVecBase4d const *)
extern LVecBase4d * LVecBase4d$57$fmax(LVecBase4d const *self, LVecBase4d const *other);

#if INDEX
#define LVecBase4d_C_fmax_p_pp LVecBase4d$57$fmax
#endif

// C++ _inCAAAA_BrN(LVecBase4d const &other) ==> LVecBase4d$_$fmin(LVecBase4d const *param0, LVecBase4d const *param1)(LVecBase4d const *, LVecBase4d const *)
extern LVecBase4d * LVecBase4d$58$fmin(LVecBase4d const *self, LVecBase4d const *other);

#if INDEX
#define LVecBase4d_C_fmin_p_pp LVecBase4d$58$fmin
#endif

// C++ _inCAAAAcoqw(LVecBase4d const &other) ==> LVecBase4d$_$almost_equal(LVecBase4d const *param0, LVecBase4d const *param1)(LVecBase4d const *, LVecBase4d const *)
extern bool LVecBase4d$59$almost_equal(LVecBase4d const *self, LVecBase4d const *other);

#if INDEX
#define LVecBase4d_C_almost_equal_B_pp LVecBase4d$59$almost_equal
#endif

// C++ _inCAAAA9ILB(LVecBase4d const &other, double threshold) ==> LVecBase4d$_$almost_equal(LVecBase4d const *param0, LVecBase4d const *param1, double param2)(LVecBase4d const *, LVecBase4d const *, double)
extern bool LVecBase4d$60$almost_equal(LVecBase4d const *self, LVecBase4d const *other, double threshold);

#if INDEX
#define LVecBase4d_C_almost_equal_B_ppd LVecBase4d$60$almost_equal
#endif

// C++ _inCAAAAe5oK(std::ostream &out) ==> LVecBase4d$_$output(LVecBase4d const *param0, std::ostream *param1)(LVecBase4d const *, std::ostream *)
extern void LVecBase4d$61$output(LVecBase4d const *self, std$_ostream *out);

#if INDEX
#define LVecBase4d_C_output_v_pp LVecBase4d$61$output
#endif

// C++ _inCAAAAQsBI(Datagram &destination) ==> LVecBase4d$_$write_datagram_fixed(LVecBase4d const *param0, Datagram *param1)(LVecBase4d const *, Datagram *)
extern void LVecBase4d$62$write_datagram_fixed(LVecBase4d const *self, Datagram *destination);

#if INDEX
#define LVecBase4d_C_write_datagram_fixed_v_pp LVecBase4d$62$write_datagram_fixed
#endif

// C++ _inCAAAAUkiE(DatagramIterator &source) ==> LVecBase4d$_$read_datagram_fixed(LVecBase4d *param0, DatagramIterator *param1)(LVecBase4d *, DatagramIterator *)
extern void LVecBase4d$63$read_datagram_fixed(LVecBase4d *self, DatagramIterator *source);

#if INDEX
#define LVecBase4d_C_read_datagram_fixed_v_pp LVecBase4d$63$read_datagram_fixed
#endif

// C++ _inCAAAAjJ6E(Datagram &destination) ==> LVecBase4d$_$write_datagram(LVecBase4d const *param0, Datagram *param1)(LVecBase4d const *, Datagram *)
extern void LVecBase4d$64$write_datagram(LVecBase4d const *self, Datagram *destination);

#if INDEX
#define LVecBase4d_C_write_datagram_v_pp LVecBase4d$64$write_datagram
#endif

// C++ _inCAAAA4P8W(DatagramIterator &source) ==> LVecBase4d$_$read_datagram(LVecBase4d *param0, DatagramIterator *param1)(LVecBase4d *, DatagramIterator *)
extern void LVecBase4d$65$read_datagram(LVecBase4d *self, DatagramIterator *source);

#if INDEX
#define LVecBase4d_C_read_datagram_v_pp LVecBase4d$65$read_datagram
#endif

// C++ _inCAAAArV_a() ==> LVecBase4d$_$get_v(LVecBase4d const *param0)(LVecBase4d const *)
extern LVecBase4d$_EVector4 * LVecBase4d$66$get_v(LVecBase4d const *self);

#if INDEX
#define LVecBase4d_C_get_v_p_p LVecBase4d$66$get_v
#endif

// C++ _inCAAAAGAvT() ==> LVecBase4d$_$get_class_type()()
extern int LVecBase4d$67$get_class_type(void);

#if INDEX
#define LVecBase4d_C_get_class_type_i_v LVecBase4d$67$get_class_type
#endif

// C++ _inCAAAABL6z() ==> LVecBase4d$_$init_type()()
extern void LVecBase4d$68$init_type(void);

#if INDEX
#define LVecBase4d_C_init_type_v_v LVecBase4d$68$init_type
#endif


// LVecBase4f

// C++ _inCAAAA5kRY() ==> LVecBase4f$_$LVecBase4f()()
extern LVecBase4f * LVecBase4f$1$LVecBase4f(void);

#if INDEX
#define LVecBase4f_C_ctor_p_v LVecBase4f$1$LVecBase4f
#endif

// C++ _inCAAAAOd95(LPoint3f const &point) ==> LVecBase4f$_$LVecBase4f(LPoint3f const *param0)(LPoint3f const *)
extern LVecBase4f * LVecBase4f$2$LVecBase4f(LPoint3f const *point);

#if INDEX
#define LVecBase4f_C_ctor_p_p LVecBase4f$2$LVecBase4f
#endif

// C++ _inCAAAA1zsc(LVecBase3f const &copy, float w) ==> LVecBase4f$_$LVecBase4f(LVecBase3f const *param0, float param1)(LVecBase3f const *, float)
extern LVecBase4f * LVecBase4f$3$LVecBase4f(LVecBase3f const *copy, float w);

#if INDEX
#define LVecBase4f_C_ctor_p_pf LVecBase4f$3$LVecBase4f
#endif

// C++ _inCAAAAdTtd(LVecBase4f const &) ==> LVecBase4f$_$LVecBase4f(LVecBase4f const *param0)(LVecBase4f const *)
extern LVecBase4f * LVecBase4f$4$LVecBase4f(LVecBase4f const *arg0);
// COLLISION : LVecBase4f_C_ctor_p_p LVecBase4f$4$LVecBase4f

// C++ _inCAAAASw3_(LVecBase4f::EVector4 const &v) ==> LVecBase4f$_$LVecBase4f(LVecBase4f::EVector4 const *param0)(LVecBase4f::EVector4 const *)
extern LVecBase4f * LVecBase4f$5$LVecBase4f(LVecBase4f$_EVector4 const *v);
// COLLISION : LVecBase4f_C_ctor_p_p LVecBase4f$5$LVecBase4f

// C++ _inCAAAABwSS(LVector3f const &vector) ==> LVecBase4f$_$LVecBase4f(LVector3f const *param0)(LVector3f const *)
extern LVecBase4f * LVecBase4f$6$LVecBase4f(LVector3f const *vector);
// COLLISION : LVecBase4f_C_ctor_p_p LVecBase4f$6$LVecBase4f

// C++ _inCAAAAaF0L(UnalignedLVecBase4f const &copy) ==> LVecBase4f$_$LVecBase4f(UnalignedLVecBase4f const *param0)(UnalignedLVecBase4f const *)
extern LVecBase4f * LVecBase4f$7$LVecBase4f(UnalignedLVecBase4f const *copy);
// COLLISION : LVecBase4f_C_ctor_p_p LVecBase4f$7$LVecBase4f

// C++ _inCAAAAity7(float fill_value) ==> LVecBase4f$_$LVecBase4f(float param0)(float)
extern LVecBase4f * LVecBase4f$8$LVecBase4f(float fill_value);

#if INDEX
#define LVecBase4f_C_ctor_p_f LVecBase4f$8$LVecBase4f
#endif

// C++ _inCAAAADRvG(float x, float y, float z, float w) ==> LVecBase4f$_$LVecBase4f(float param0, float param1, float param2, float param3)(float, float, float, float)
extern LVecBase4f * LVecBase4f$9$LVecBase4f(float x, float y, float z, float w);

#if INDEX
#define LVecBase4f_C_ctor_p_ffff LVecBase4f$9$LVecBase4f
#endif

// C++ _inCAAAAmHPT() ==> LVecBase4f$_$zero()()
extern LVecBase4f const * LVecBase4f$10$zero(void);

#if INDEX
#define LVecBase4f_C_zero_p_v LVecBase4f$10$zero
#endif

// C++ _inCAAAAxCF3() ==> LVecBase4f$_$unit_x()()
extern LVecBase4f const * LVecBase4f$11$unit_x(void);

#if INDEX
#define LVecBase4f_C_unit_x_p_v LVecBase4f$11$unit_x
#endif

// C++ _inCAAAAMdTT() ==> LVecBase4f$_$unit_y()()
extern LVecBase4f const * LVecBase4f$12$unit_y(void);

#if INDEX
#define LVecBase4f_C_unit_y_p_v LVecBase4f$12$unit_y
#endif

// C++ _inCAAAAOdhv() ==> LVecBase4f$_$unit_z()()
extern LVecBase4f const * LVecBase4f$13$unit_z(void);

#if INDEX
#define LVecBase4f_C_unit_z_p_v LVecBase4f$13$unit_z
#endif

// C++ _inCAAAA3C3a() ==> LVecBase4f$_$unit_w()()
extern LVecBase4f const * LVecBase4f$14$unit_w(void);

#if INDEX
#define LVecBase4f_C_unit_w_p_v LVecBase4f$14$unit_w
#endif

// C++ _inCAAAA3Z_8() ==> LVecBase4f$_$size()()
extern int LVecBase4f$15$size(void);

#if INDEX
#define LVecBase4f_C_size_i_v LVecBase4f$15$size
#endif

// C++ _inCAAAAx62D() ==> LVecBase4f$_$is_nan(LVecBase4f const *param0)(LVecBase4f const *)
extern bool LVecBase4f$16$is_nan(LVecBase4f const *self);

#if INDEX
#define LVecBase4f_C_is_nan_B_p LVecBase4f$16$is_nan
#endif

// C++ _inCAAAAd_Pp(int i) ==> LVecBase4f$_$get_cell(LVecBase4f const *param0, int param1)(LVecBase4f const *, int)
extern float LVecBase4f$17$get_cell(LVecBase4f const *self, int i);

#if INDEX
#define LVecBase4f_C_get_cell_f_pi LVecBase4f$17$get_cell
#endif

// C++ _inCAAAAAQHX(int i, float value) ==> LVecBase4f$_$set_cell(LVecBase4f *param0, int param1, float param2)(LVecBase4f *, int, float)
extern void LVecBase4f$18$set_cell(LVecBase4f *self, int i, float value);

#if INDEX
#define LVecBase4f_C_set_cell_v_pif LVecBase4f$18$set_cell
#endif

// C++ _inCAAAAJYvU() ==> LVecBase4f$_$get_x(LVecBase4f const *param0)(LVecBase4f const *)
extern float LVecBase4f$19$get_x(LVecBase4f const *self);

#if INDEX
#define LVecBase4f_C_get_x_f_p LVecBase4f$19$get_x
#endif

// C++ _inCAAAAJ8oZ() ==> LVecBase4f$_$get_y(LVecBase4f const *param0)(LVecBase4f const *)
extern float LVecBase4f$20$get_y(LVecBase4f const *self);

#if INDEX
#define LVecBase4f_C_get_y_f_p LVecBase4f$20$get_y
#endif

// C++ _inCAAAAJQge() ==> LVecBase4f$_$get_z(LVecBase4f const *param0)(LVecBase4f const *)
extern float LVecBase4f$21$get_z(LVecBase4f const *self);

#if INDEX
#define LVecBase4f_C_get_z_f_p LVecBase4f$21$get_z
#endif

// C++ _inCAAAAJE3P() ==> LVecBase4f$_$get_w(LVecBase4f const *param0)(LVecBase4f const *)
extern float LVecBase4f$22$get_w(LVecBase4f const *self);

#if INDEX
#define LVecBase4f_C_get_w_f_p LVecBase4f$22$get_w
#endif

// C++ _inCAAAAph9e() ==> LVecBase4f$_$get_xyz(LVecBase4f const *param0)(LVecBase4f const *)
extern LVecBase3f * LVecBase4f$23$get_xyz(LVecBase4f const *self);

#if INDEX
#define LVecBase4f_C_get_xyz_p_p LVecBase4f$23$get_xyz
#endif

// C++ _inCAAAAqJIL() ==> LVecBase4f$_$get_xy(LVecBase4f const *param0)(LVecBase4f const *)
extern LVecBase2f * LVecBase4f$24$get_xy(LVecBase4f const *self);

#if INDEX
#define LVecBase4f_C_get_xy_p_p LVecBase4f$24$get_xy
#endif

// C++ _inCAAAAJuJp(float value) ==> LVecBase4f$_$set_x(LVecBase4f *param0, float param1)(LVecBase4f *, float)
extern void LVecBase4f$25$set_x(LVecBase4f *self, float value);

#if INDEX
#define LVecBase4f_C_set_x_v_pf LVecBase4f$25$set_x
#endif

// C++ _inCAAAAJKCu(float value) ==> LVecBase4f$_$set_y(LVecBase4f *param0, float param1)(LVecBase4f *, float)
extern void LVecBase4f$26$set_y(LVecBase4f *self, float value);

#if INDEX
#define LVecBase4f_C_set_y_v_pf LVecBase4f$26$set_y
#endif

// C++ _inCAAAAJW6y(float value) ==> LVecBase4f$_$set_z(LVecBase4f *param0, float param1)(LVecBase4f *, float)
extern void LVecBase4f$27$set_z(LVecBase4f *self, float value);

#if INDEX
#define LVecBase4f_C_set_z_v_pf LVecBase4f$27$set_z
#endif

// C++ _inCAAAAJCRk(float value) ==> LVecBase4f$_$set_w(LVecBase4f *param0, float param1)(LVecBase4f *, float)
extern void LVecBase4f$28$set_w(LVecBase4f *self, float value);

#if INDEX
#define LVecBase4f_C_set_w_v_pf LVecBase4f$28$set_w
#endif

// C++ _inCAAAAzyHW(int i, float value) ==> LVecBase4f$_$add_to_cell(LVecBase4f *param0, int param1, float param2)(LVecBase4f *, int, float)
extern void LVecBase4f$29$add_to_cell(LVecBase4f *self, int i, float value);

#if INDEX
#define LVecBase4f_C_add_to_cell_v_pif LVecBase4f$29$add_to_cell
#endif

// C++ _inCAAAAmmmn(float value) ==> LVecBase4f$_$add_x(LVecBase4f *param0, float param1)(LVecBase4f *, float)
extern void LVecBase4f$30$add_x(LVecBase4f *self, float value);

#if INDEX
#define LVecBase4f_C_add_x_v_pf LVecBase4f$30$add_x
#endif

// C++ _inCAAAAmCfs(float value) ==> LVecBase4f$_$add_y(LVecBase4f *param0, float param1)(LVecBase4f *, float)
extern void LVecBase4f$31$add_y(LVecBase4f *self, float value);

#if INDEX
#define LVecBase4f_C_add_y_v_pf LVecBase4f$31$add_y
#endif

// C++ _inCAAAAmuXx(float value) ==> LVecBase4f$_$add_z(LVecBase4f *param0, float param1)(LVecBase4f *, float)
extern void LVecBase4f$32$add_z(LVecBase4f *self, float value);

#if INDEX
#define LVecBase4f_C_add_z_v_pf LVecBase4f$32$add_z
#endif

// C++ _inCAAAAmaui(float value) ==> LVecBase4f$_$add_w(LVecBase4f *param0, float param1)(LVecBase4f *, float)
extern void LVecBase4f$33$add_w(LVecBase4f *self, float value);

#if INDEX
#define LVecBase4f_C_add_w_v_pf LVecBase4f$33$add_w
#endif

// C++ _inCAAAAXRyH() ==> LVecBase4f$_$get_data(LVecBase4f const *param0)(LVecBase4f const *)
extern void LVecBase4f$34$get_data(LVecBase4f const *self);

#if INDEX
#define LVecBase4f_C_get_data_v_p LVecBase4f$34$get_data
#endif

// C++ _inCAAAAt5EZ() ==> LVecBase4f$_$get_num_components()()
extern int LVecBase4f$35$get_num_components(void);

#if INDEX
#define LVecBase4f_C_get_num_components_i_v LVecBase4f$35$get_num_components
#endif

// C++ _inCAAAACnKI() ==> LVecBase4f$_$begin(LVecBase4f *param0)(LVecBase4f *)
extern void LVecBase4f$36$begin(LVecBase4f *self);

#if INDEX
#define LVecBase4f_C_begin_v_p LVecBase4f$36$begin
#endif

// C++ _inCAAAAcE1u() ==> LVecBase4f$_$begin(LVecBase4f const *param0)(LVecBase4f const *)
extern void LVecBase4f$37$begin(LVecBase4f const *self);
// COLLISION : LVecBase4f_C_begin_v_p LVecBase4f$37$begin

// C++ _inCAAAA3Xef() ==> LVecBase4f$_$end(LVecBase4f *param0)(LVecBase4f *)
extern void LVecBase4f$38$end(LVecBase4f *self);

#if INDEX
#define LVecBase4f_C_end_v_p LVecBase4f$38$end
#endif

// C++ _inCAAAAuCrT() ==> LVecBase4f$_$end(LVecBase4f const *param0)(LVecBase4f const *)
extern void LVecBase4f$39$end(LVecBase4f const *self);
// COLLISION : LVecBase4f_C_end_v_p LVecBase4f$39$end

// C++ _inCAAAAW1HJ(float fill_value) ==> LVecBase4f$_$fill(LVecBase4f *param0, float param1)(LVecBase4f *, float)
extern void LVecBase4f$40$fill(LVecBase4f *self, float fill_value);

#if INDEX
#define LVecBase4f_C_fill_v_pf LVecBase4f$40$fill
#endif

// C++ _inCAAAA__rX(float x, float y, float z, float w) ==> LVecBase4f$_$set(LVecBase4f *param0, float param1, float param2, float param3, float param4)(LVecBase4f *, float, float, float, float)
extern void LVecBase4f$41$set(LVecBase4f *self, float x, float y, float z, float w);

#if INDEX
#define LVecBase4f_C_set_v_pffff LVecBase4f$41$set
#endif

// C++ _inCAAAA2052(LVecBase4f const &other) ==> LVecBase4f$_$dot(LVecBase4f const *param0, LVecBase4f const *param1)(LVecBase4f const *, LVecBase4f const *)
extern float LVecBase4f$42$dot(LVecBase4f const *self, LVecBase4f const *other);

#if INDEX
#define LVecBase4f_C_dot_f_pp LVecBase4f$42$dot
#endif

// C++ _inCAAAAxUcf() ==> LVecBase4f$_$length_squared(LVecBase4f const *param0)(LVecBase4f const *)
extern float LVecBase4f$43$length_squared(LVecBase4f const *self);

#if INDEX
#define LVecBase4f_C_length_squared_f_p LVecBase4f$43$length_squared
#endif

// C++ _inCAAAA0Yo_() ==> LVecBase4f$_$length(LVecBase4f const *param0)(LVecBase4f const *)
extern float LVecBase4f$44$length(LVecBase4f const *self);

#if INDEX
#define LVecBase4f_C_length_f_p LVecBase4f$44$length
#endif

// C++ _inCAAAASsCV() ==> LVecBase4f$_$normalize(LVecBase4f *param0)(LVecBase4f *)
extern bool LVecBase4f$45$normalize(LVecBase4f *self);

#if INDEX
#define LVecBase4f_C_normalize_B_p LVecBase4f$45$normalize
#endif

// C++ _inCAAAALczx() ==> LVecBase4f$_$normalized(LVecBase4f const *param0)(LVecBase4f const *)
extern LVecBase4f * LVecBase4f$46$normalized(LVecBase4f const *self);

#if INDEX
#define LVecBase4f_C_normalized_p_p LVecBase4f$46$normalized
#endif

// C++ _inCAAAAMsWY(LVecBase4f const &onto) ==> LVecBase4f$_$project(LVecBase4f const *param0, LVecBase4f const *param1)(LVecBase4f const *, LVecBase4f const *)
extern LVecBase4f * LVecBase4f$47$project(LVecBase4f const *self, LVecBase4f const *onto);

#if INDEX
#define LVecBase4f_C_project_p_pp LVecBase4f$47$project
#endif

// C++ _inCAAAAtXnx(LVecBase4f const &other) ==> LVecBase4f$_$compare_to(LVecBase4f const *param0, LVecBase4f const *param1)(LVecBase4f const *, LVecBase4f const *)
extern int LVecBase4f$48$compare_to(LVecBase4f const *self, LVecBase4f const *other);

#if INDEX
#define LVecBase4f_C_compare_to_i_pp LVecBase4f$48$compare_to
#endif

// C++ _inCAAAAIZYW(LVecBase4f const &other, float threshold) ==> LVecBase4f$_$compare_to(LVecBase4f const *param0, LVecBase4f const *param1, float param2)(LVecBase4f const *, LVecBase4f const *, float)
extern int LVecBase4f$49$compare_to(LVecBase4f const *self, LVecBase4f const *other, float threshold);

#if INDEX
#define LVecBase4f_C_compare_to_i_ppf LVecBase4f$49$compare_to
#endif

// C++ _inCAAAAdiZ0() ==> LVecBase4f$_$get_hash(LVecBase4f const *param0)(LVecBase4f const *)
extern std$_size_t LVecBase4f$50$get_hash(LVecBase4f const *self);

#if INDEX
#define LVecBase4f_C_get_hash_l_p LVecBase4f$50$get_hash
#endif

// C++ _inCAAAAzn_6(float threshold) ==> LVecBase4f$_$get_hash(LVecBase4f const *param0, float param1)(LVecBase4f const *, float)
extern std$_size_t LVecBase4f$51$get_hash(LVecBase4f const *self, float threshold);

#if INDEX
#define LVecBase4f_C_get_hash_l_pf LVecBase4f$51$get_hash
#endif

// C++ _inCAAAARtvq(std::size_t hash) ==> LVecBase4f$_$add_hash(LVecBase4f const *param0, std::size_t param1)(LVecBase4f const *, std::size_t)
extern std$_size_t LVecBase4f$52$add_hash(LVecBase4f const *self, std$_size_t hash);

#if INDEX
#define LVecBase4f_C_add_hash_l_pl LVecBase4f$52$add_hash
#endif

// C++ _inCAAAAvr49(std::size_t hash, float threshold) ==> LVecBase4f$_$add_hash(LVecBase4f const *param0, std::size_t param1, float param2)(LVecBase4f const *, std::size_t, float)
extern std$_size_t LVecBase4f$53$add_hash(LVecBase4f const *self, std$_size_t hash, float threshold);

#if INDEX
#define LVecBase4f_C_add_hash_l_plf LVecBase4f$53$add_hash
#endif

// C++ _inCAAAA1RZF(ChecksumHashGenerator &hashgen) ==> LVecBase4f$_$generate_hash(LVecBase4f const *param0, ChecksumHashGenerator *param1)(LVecBase4f const *, ChecksumHashGenerator *)
extern void LVecBase4f$54$generate_hash(LVecBase4f const *self, ChecksumHashGenerator *hashgen);

#if INDEX
#define LVecBase4f_C_generate_hash_v_pp LVecBase4f$54$generate_hash
#endif

// C++ _inCAAAA9JVR(ChecksumHashGenerator &hashgen, float threshold) ==> LVecBase4f$_$generate_hash(LVecBase4f const *param0, ChecksumHashGenerator *param1, float param2)(LVecBase4f const *, ChecksumHashGenerator *, float)
extern void LVecBase4f$55$generate_hash(LVecBase4f const *self, ChecksumHashGenerator *hashgen, float threshold);

#if INDEX
#define LVecBase4f_C_generate_hash_v_ppf LVecBase4f$55$generate_hash
#endif

// C++ _inCAAAADE_K(LVecBase4f const &other) ==> LVecBase4f$_$componentwise_mult(LVecBase4f *param0, LVecBase4f const *param1)(LVecBase4f *, LVecBase4f const *)
extern void LVecBase4f$56$componentwise_mult(LVecBase4f *self, LVecBase4f const *other);

#if INDEX
#define LVecBase4f_C_componentwise_mult_v_pp LVecBase4f$56$componentwise_mult
#endif

// C++ _inCAAAA6rOm(LVecBase4f const &other) ==> LVecBase4f$_$fmax(LVecBase4f const *param0, LVecBase4f const *param1)(LVecBase4f const *, LVecBase4f const *)
extern LVecBase4f * LVecBase4f$57$fmax(LVecBase4f const *self, LVecBase4f const *other);

#if INDEX
#define LVecBase4f_C_fmax_p_pp LVecBase4f$57$fmax
#endif

// C++ _inCAAAAUfvk(LVecBase4f const &other) ==> LVecBase4f$_$fmin(LVecBase4f const *param0, LVecBase4f const *param1)(LVecBase4f const *, LVecBase4f const *)
extern LVecBase4f * LVecBase4f$58$fmin(LVecBase4f const *self, LVecBase4f const *other);

#if INDEX
#define LVecBase4f_C_fmin_p_pp LVecBase4f$58$fmin
#endif

// C++ _inCAAAAyKzg(LVecBase4f const &other) ==> LVecBase4f$_$almost_equal(LVecBase4f const *param0, LVecBase4f const *param1)(LVecBase4f const *, LVecBase4f const *)
extern bool LVecBase4f$59$almost_equal(LVecBase4f const *self, LVecBase4f const *other);

#if INDEX
#define LVecBase4f_C_almost_equal_B_pp LVecBase4f$59$almost_equal
#endif

// C++ _inCAAAA__lQ(LVecBase4f const &other, float threshold) ==> LVecBase4f$_$almost_equal(LVecBase4f const *param0, LVecBase4f const *param1, float param2)(LVecBase4f const *, LVecBase4f const *, float)
extern bool LVecBase4f$60$almost_equal(LVecBase4f const *self, LVecBase4f const *other, float threshold);

#if INDEX
#define LVecBase4f_C_almost_equal_B_ppf LVecBase4f$60$almost_equal
#endif

// C++ _inCAAAA9lo6(std::ostream &out) ==> LVecBase4f$_$output(LVecBase4f const *param0, std::ostream *param1)(LVecBase4f const *, std::ostream *)
extern void LVecBase4f$61$output(LVecBase4f const *self, std$_ostream *out);

#if INDEX
#define LVecBase4f_C_output_v_pp LVecBase4f$61$output
#endif

// C++ _inCAAAA3_B4(Datagram &destination) ==> LVecBase4f$_$write_datagram_fixed(LVecBase4f const *param0, Datagram *param1)(LVecBase4f const *, Datagram *)
extern void LVecBase4f$62$write_datagram_fixed(LVecBase4f const *self, Datagram *destination);

#if INDEX
#define LVecBase4f_C_write_datagram_fixed_v_pp LVecBase4f$62$write_datagram_fixed
#endif

// C++ _inCAAAA3Ii0(DatagramIterator &source) ==> LVecBase4f$_$read_datagram_fixed(LVecBase4f *param0, DatagramIterator *param1)(LVecBase4f *, DatagramIterator *)
extern void LVecBase4f$63$read_datagram_fixed(LVecBase4f *self, DatagramIterator *source);

#if INDEX
#define LVecBase4f_C_read_datagram_fixed_v_pp LVecBase4f$63$read_datagram_fixed
#endif

// C++ _inCAAAAZM70(Datagram &destination) ==> LVecBase4f$_$write_datagram(LVecBase4f const *param0, Datagram *param1)(LVecBase4f const *, Datagram *)
extern void LVecBase4f$64$write_datagram(LVecBase4f const *self, Datagram *destination);

#if INDEX
#define LVecBase4f_C_write_datagram_v_pp LVecBase4f$64$write_datagram
#endif

// C++ _inCAAAAec8G(DatagramIterator &source) ==> LVecBase4f$_$read_datagram(LVecBase4f *param0, DatagramIterator *param1)(LVecBase4f *, DatagramIterator *)
extern void LVecBase4f$65$read_datagram(LVecBase4f *self, DatagramIterator *source);

#if INDEX
#define LVecBase4f_C_read_datagram_v_pp LVecBase4f$65$read_datagram
#endif

// C++ _inCAAAAJg_K() ==> LVecBase4f$_$get_v(LVecBase4f const *param0)(LVecBase4f const *)
extern LVecBase4f$_EVector4 * LVecBase4f$66$get_v(LVecBase4f const *self);

#if INDEX
#define LVecBase4f_C_get_v_p_p LVecBase4f$66$get_v
#endif

// C++ _inCAAAAhKuD() ==> LVecBase4f$_$get_class_type()()
extern int LVecBase4f$67$get_class_type(void);

#if INDEX
#define LVecBase4f_C_get_class_type_i_v LVecBase4f$67$get_class_type
#endif

// C++ _inCAAAAfn6j() ==> LVecBase4f$_$init_type()()
extern void LVecBase4f$68$init_type(void);

#if INDEX
#define LVecBase4f_C_init_type_v_v LVecBase4f$68$init_type
#endif


// LVecBase4i

// C++ _inCAAAAUNkd() ==> LVecBase4i$_$LVecBase4i()()
extern LVecBase4i * LVecBase4i$1$LVecBase4i(void);

#if INDEX
#define LVecBase4i_C_ctor_p_v LVecBase4i$1$LVecBase4i
#endif

// C++ _inCAAAADH9C(LPoint3i const &point) ==> LVecBase4i$_$LVecBase4i(LPoint3i const *param0)(LPoint3i const *)
extern LVecBase4i * LVecBase4i$2$LVecBase4i(LPoint3i const *point);

#if INDEX
#define LVecBase4i_C_ctor_p_p LVecBase4i$2$LVecBase4i
#endif

// C++ _inCAAAAauLi(LVecBase3i const &copy, int w) ==> LVecBase4i$_$LVecBase4i(LVecBase3i const *param0, int param1)(LVecBase3i const *, int)
extern LVecBase4i * LVecBase4i$3$LVecBase4i(LVecBase3i const *copy, int w);

#if INDEX
#define LVecBase4i_C_ctor_p_pi LVecBase4i$3$LVecBase4i
#endif

// C++ _inCAAAATpRI(LVecBase4i const &) ==> LVecBase4i$_$LVecBase4i(LVecBase4i const *param0)(LVecBase4i const *)
extern LVecBase4i * LVecBase4i$4$LVecBase4i(LVecBase4i const *arg0);
// COLLISION : LVecBase4i_C_ctor_p_p LVecBase4i$4$LVecBase4i

// C++ _inCAAAAyPbp(LVecBase4i::EVector4 const &v) ==> LVecBase4i$_$LVecBase4i(LVecBase4i::EVector4 const *param0)(LVecBase4i::EVector4 const *)
extern LVecBase4i * LVecBase4i$5$LVecBase4i(LVecBase4i$_EVector4 const *v);
// COLLISION : LVecBase4i_C_ctor_p_p LVecBase4i$5$LVecBase4i

// C++ _inCAAAAx3xM(LVector3i const &vector) ==> LVecBase4i$_$LVecBase4i(LVector3i const *param0)(LVector3i const *)
extern LVecBase4i * LVecBase4i$6$LVecBase4i(LVector3i const *vector);
// COLLISION : LVecBase4i_C_ctor_p_p LVecBase4i$6$LVecBase4i

// C++ _inCAAAA7tyl(UnalignedLVecBase4i const &copy) ==> LVecBase4i$_$LVecBase4i(UnalignedLVecBase4i const *param0)(UnalignedLVecBase4i const *)
extern LVecBase4i * LVecBase4i$7$LVecBase4i(UnalignedLVecBase4i const *copy);
// COLLISION : LVecBase4i_C_ctor_p_p LVecBase4i$7$LVecBase4i

// C++ _inCAAAAqeHH(int fill_value) ==> LVecBase4i$_$LVecBase4i(int param0)(int)
extern LVecBase4i * LVecBase4i$8$LVecBase4i(int fill_value);

#if INDEX
#define LVecBase4i_C_ctor_p_i LVecBase4i$8$LVecBase4i
#endif

// C++ _inCAAAAdcHP(int x, int y, int z, int w) ==> LVecBase4i$_$LVecBase4i(int param0, int param1, int param2, int param3)(int, int, int, int)
extern LVecBase4i * LVecBase4i$9$LVecBase4i(int x, int y, int z, int w);

#if INDEX
#define LVecBase4i_C_ctor_p_iiii LVecBase4i$9$LVecBase4i
#endif

// C++ _inCAAAAmER7() ==> LVecBase4i$_$zero()()
extern LVecBase4i const * LVecBase4i$10$zero(void);

#if INDEX
#define LVecBase4i_C_zero_p_v LVecBase4i$10$zero
#endif

// C++ _inCAAAAD2Hf() ==> LVecBase4i$_$unit_x()()
extern LVecBase4i const * LVecBase4i$11$unit_x(void);

#if INDEX
#define LVecBase4i_C_unit_x_p_v LVecBase4i$11$unit_x
#endif

// C++ _inCAAAAB2V7() ==> LVecBase4i$_$unit_y()()
extern LVecBase4i const * LVecBase4i$12$unit_y(void);

#if INDEX
#define LVecBase4i_C_unit_y_p_v LVecBase4i$12$unit_y
#endif

// C++ _inCAAAAG2jX() ==> LVecBase4i$_$unit_z()()
extern LVecBase4i const * LVecBase4i$13$unit_z(void);

#if INDEX
#define LVecBase4i_C_unit_z_p_v LVecBase4i$13$unit_z
#endif

// C++ _inCAAAAd25C() ==> LVecBase4i$_$unit_w()()
extern LVecBase4i const * LVecBase4i$14$unit_w(void);

#if INDEX
#define LVecBase4i_C_unit_w_p_v LVecBase4i$14$unit_w
#endif

// C++ _inCAAAA06Al() ==> LVecBase4i$_$size()()
extern int LVecBase4i$15$size(void);

#if INDEX
#define LVecBase4i_C_size_i_v LVecBase4i$15$size
#endif

// C++ _inCAAAAzf3r() ==> LVecBase4i$_$is_nan(LVecBase4i const *param0)(LVecBase4i const *)
extern bool LVecBase4i$16$is_nan(LVecBase4i const *self);

#if INDEX
#define LVecBase4i_C_is_nan_B_p LVecBase4i$16$is_nan
#endif

// C++ _inCAAAAqdQR(int i) ==> LVecBase4i$_$get_cell(LVecBase4i const *param0, int param1)(LVecBase4i const *, int)
extern int LVecBase4i$17$get_cell(LVecBase4i const *self, int i);

#if INDEX
#define LVecBase4i_C_get_cell_i_pi LVecBase4i$17$get_cell
#endif

// C++ _inCAAAAj8iW(int i, int value) ==> LVecBase4i$_$set_cell(LVecBase4i *param0, int param1, int param2)(LVecBase4i *, int, int)
extern void LVecBase4i$18$set_cell(LVecBase4i *self, int i, int value);

#if INDEX
#define LVecBase4i_C_set_cell_v_pii LVecBase4i$18$set_cell
#endif

// C++ _inCAAAAMJw8() ==> LVecBase4i$_$get_x(LVecBase4i const *param0)(LVecBase4i const *)
extern int LVecBase4i$19$get_x(LVecBase4i const *self);

#if INDEX
#define LVecBase4i_C_get_x_i_p LVecBase4i$19$get_x
#endif

// C++ _inCAAAAPloB() ==> LVecBase4i$_$get_y(LVecBase4i const *param0)(LVecBase4i const *)
extern int LVecBase4i$20$get_y(LVecBase4i const *self);

#if INDEX
#define LVecBase4i_C_get_y_i_p LVecBase4i$20$get_y
#endif

// C++ _inCAAAAPBjG() ==> LVecBase4i$_$get_z(LVecBase4i const *param0)(LVecBase4i const *)
extern int LVecBase4i$21$get_z(LVecBase4i const *self);

#if INDEX
#define LVecBase4i_C_get_z_i_p LVecBase4i$21$get_z
#endif

// C++ _inCAAAAMt53() ==> LVecBase4i$_$get_w(LVecBase4i const *param0)(LVecBase4i const *)
extern int LVecBase4i$22$get_w(LVecBase4i const *self);

#if INDEX
#define LVecBase4i_C_get_w_i_p LVecBase4i$22$get_w
#endif

// C++ _inCAAAAUg_G() ==> LVecBase4i$_$get_xyz(LVecBase4i const *param0)(LVecBase4i const *)
extern LVecBase3i * LVecBase4i$23$get_xyz(LVecBase4i const *self);

#if INDEX
#define LVecBase4i_C_get_xyz_p_p LVecBase4i$23$get_xyz
#endif

// C++ _inCAAAA_GKz() ==> LVecBase4i$_$get_xy(LVecBase4i const *param0)(LVecBase4i const *)
extern LVecBase2i * LVecBase4i$24$get_xy(LVecBase4i const *self);

#if INDEX
#define LVecBase4i_C_get_xy_p_p LVecBase4i$24$get_xy
#endif

// C++ _inCAAAAQVL0(int value) ==> LVecBase4i$_$set_x(LVecBase4i *param0, int param1)(LVecBase4i *, int)
extern void LVecBase4i$25$set_x(LVecBase4i *self, int value);

#if INDEX
#define LVecBase4i_C_set_x_v_pi LVecBase4i$25$set_x
#endif

// C++ _inCAAAAQxD5(int value) ==> LVecBase4i$_$set_y(LVecBase4i *param0, int param1)(LVecBase4i *, int)
extern void LVecBase4i$26$set_y(LVecBase4i *self, int value);

#if INDEX
#define LVecBase4i_C_set_y_v_pi LVecBase4i$26$set_y
#endif

// C++ _inCAAAAQd89(int value) ==> LVecBase4i$_$set_z(LVecBase4i *param0, int param1)(LVecBase4i *, int)
extern void LVecBase4i$27$set_z(LVecBase4i *self, int value);

#if INDEX
#define LVecBase4i_C_set_z_v_pi LVecBase4i$27$set_z
#endif

// C++ _inCAAAAQJTv(int value) ==> LVecBase4i$_$set_w(LVecBase4i *param0, int param1)(LVecBase4i *, int)
extern void LVecBase4i$28$set_w(LVecBase4i *self, int value);

#if INDEX
#define LVecBase4i_C_set_w_v_pi LVecBase4i$28$set_w
#endif

// C++ _inCAAAAaSk_(int i, int value) ==> LVecBase4i$_$add_to_cell(LVecBase4i *param0, int param1, int param2)(LVecBase4i *, int, int)
extern void LVecBase4i$29$add_to_cell(LVecBase4i *self, int i, int value);

#if INDEX
#define LVecBase4i_C_add_to_cell_v_pii LVecBase4i$29$add_to_cell
#endif

// C++ _inCAAAAvvoy(int value) ==> LVecBase4i$_$add_x(LVecBase4i *param0, int param1)(LVecBase4i *, int)
extern void LVecBase4i$30$add_x(LVecBase4i *self, int value);

#if INDEX
#define LVecBase4i_C_add_x_v_pi LVecBase4i$30$add_x
#endif

// C++ _inCAAAAvLh3(int value) ==> LVecBase4i$_$add_y(LVecBase4i *param0, int param1)(LVecBase4i *, int)
extern void LVecBase4i$31$add_y(LVecBase4i *self, int value);

#if INDEX
#define LVecBase4i_C_add_y_v_pi LVecBase4i$31$add_y
#endif

// C++ _inCAAAAvXZ8(int value) ==> LVecBase4i$_$add_z(LVecBase4i *param0, int param1)(LVecBase4i *, int)
extern void LVecBase4i$32$add_z(LVecBase4i *self, int value);

#if INDEX
#define LVecBase4i_C_add_z_v_pi LVecBase4i$32$add_z
#endif

// C++ _inCAAAAvDwt(int value) ==> LVecBase4i$_$add_w(LVecBase4i *param0, int param1)(LVecBase4i *, int)
extern void LVecBase4i$33$add_w(LVecBase4i *self, int value);

#if INDEX
#define LVecBase4i_C_add_w_v_pi LVecBase4i$33$add_w
#endif

// C++ _inCAAAAJQ0v() ==> LVecBase4i$_$get_data(LVecBase4i const *param0)(LVecBase4i const *)
extern void LVecBase4i$34$get_data(LVecBase4i const *self);

#if INDEX
#define LVecBase4i_C_get_data_v_p LVecBase4i$34$get_data
#endif

// C++ _inCAAAAToEB() ==> LVecBase4i$_$get_num_components()()
extern int LVecBase4i$35$get_num_components(void);

#if INDEX
#define LVecBase4i_C_get_num_components_i_v LVecBase4i$35$get_num_components
#endif

// C++ _inCAAAA9YKw() ==> LVecBase4i$_$begin(LVecBase4i *param0)(LVecBase4i *)
extern void LVecBase4i$36$begin(LVecBase4i *self);

#if INDEX
#define LVecBase4i_C_begin_v_p LVecBase4i$36$begin
#endif

// C++ _inCAAAA4N2W() ==> LVecBase4i$_$begin(LVecBase4i const *param0)(LVecBase4i const *)
extern void LVecBase4i$37$begin(LVecBase4i const *self);
// COLLISION : LVecBase4i_C_begin_v_p LVecBase4i$37$begin

// C++ _inCAAAAhDfH() ==> LVecBase4i$_$end(LVecBase4i *param0)(LVecBase4i *)
extern void LVecBase4i$38$end(LVecBase4i *self);

#if INDEX
#define LVecBase4i_C_end_v_p LVecBase4i$38$end
#endif

// C++ _inCAAAAJes7() ==> LVecBase4i$_$end(LVecBase4i const *param0)(LVecBase4i const *)
extern void LVecBase4i$39$end(LVecBase4i const *self);
// COLLISION : LVecBase4i_C_end_v_p LVecBase4i$39$end

// C++ _inCAAAAaaPs(int fill_value) ==> LVecBase4i$_$fill(LVecBase4i *param0, int param1)(LVecBase4i *, int)
extern void LVecBase4i$40$fill(LVecBase4i *self, int fill_value);

#if INDEX
#define LVecBase4i_C_fill_v_pi LVecBase4i$40$fill
#endif

// C++ _inCAAAAb_Ku(int x, int y, int z, int w) ==> LVecBase4i$_$set(LVecBase4i *param0, int param1, int param2, int param3, int param4)(LVecBase4i *, int, int, int, int)
extern void LVecBase4i$41$set(LVecBase4i *self, int x, int y, int z, int w);

#if INDEX
#define LVecBase4i_C_set_v_piiii LVecBase4i$41$set
#endif

// C++ _inCAAAAOIvg(LVecBase4i const &other) ==> LVecBase4i$_$dot(LVecBase4i const *param0, LVecBase4i const *param1)(LVecBase4i const *, LVecBase4i const *)
extern int LVecBase4i$42$dot(LVecBase4i const *self, LVecBase4i const *other);

#if INDEX
#define LVecBase4i_C_dot_i_pp LVecBase4i$42$dot
#endif

// C++ _inCAAAAHldH() ==> LVecBase4i$_$length_squared(LVecBase4i const *param0)(LVecBase4i const *)
extern int LVecBase4i$43$length_squared(LVecBase4i const *self);

#if INDEX
#define LVecBase4i_C_length_squared_i_p LVecBase4i$43$length_squared
#endif

// C++ _inCAAAAli4_(LVecBase4i const &other) ==> LVecBase4i$_$compare_to(LVecBase4i const *param0, LVecBase4i const *param1)(LVecBase4i const *, LVecBase4i const *)
extern int LVecBase4i$44$compare_to(LVecBase4i const *self, LVecBase4i const *other);

#if INDEX
#define LVecBase4i_C_compare_to_i_pp LVecBase4i$44$compare_to
#endif

// C++ _inCAAAAz9bc() ==> LVecBase4i$_$get_hash(LVecBase4i const *param0)(LVecBase4i const *)
extern std$_size_t LVecBase4i$45$get_hash(LVecBase4i const *self);

#if INDEX
#define LVecBase4i_C_get_hash_l_p LVecBase4i$45$get_hash
#endif

// C++ _inCAAAALUwS(std::size_t hash) ==> LVecBase4i$_$add_hash(LVecBase4i const *param0, std::size_t param1)(LVecBase4i const *, std::size_t)
extern std$_size_t LVecBase4i$46$add_hash(LVecBase4i const *self, std$_size_t hash);

#if INDEX
#define LVecBase4i_C_add_hash_l_pl LVecBase4i$46$add_hash
#endif

// C++ _inCAAAAuCat(ChecksumHashGenerator &hashgen) ==> LVecBase4i$_$generate_hash(LVecBase4i const *param0, ChecksumHashGenerator *param1)(LVecBase4i const *, ChecksumHashGenerator *)
extern void LVecBase4i$47$generate_hash(LVecBase4i const *self, ChecksumHashGenerator *hashgen);

#if INDEX
#define LVecBase4i_C_generate_hash_v_pp LVecBase4i$47$generate_hash
#endif

// C++ _inCAAAAIzpB(LVecBase4i const &other) ==> LVecBase4i$_$componentwise_mult(LVecBase4i *param0, LVecBase4i const *param1)(LVecBase4i *, LVecBase4i const *)
extern void LVecBase4i$48$componentwise_mult(LVecBase4i *self, LVecBase4i const *other);

#if INDEX
#define LVecBase4i_C_componentwise_mult_v_pp LVecBase4i$48$componentwise_mult
#endif

// C++ _inCAAAAXn1I(LVecBase4i const &other) ==> LVecBase4i$_$fmax(LVecBase4i const *param0, LVecBase4i const *param1)(LVecBase4i const *, LVecBase4i const *)
extern LVecBase4i * LVecBase4i$49$fmax(LVecBase4i const *self, LVecBase4i const *other);

#if INDEX
#define LVecBase4i_C_fmax_p_pp LVecBase4i$49$fmax
#endif

// C++ _inCAAAAJaVH(LVecBase4i const &other) ==> LVecBase4i$_$fmin(LVecBase4i const *param0, LVecBase4i const *param1)(LVecBase4i const *, LVecBase4i const *)
extern LVecBase4i * LVecBase4i$50$fmin(LVecBase4i const *self, LVecBase4i const *other);

#if INDEX
#define LVecBase4i_C_fmin_p_pp LVecBase4i$50$fmin
#endif

// C++ _inCAAAABiDJ(LVecBase4i const &other) ==> LVecBase4i$_$almost_equal(LVecBase4i const *param0, LVecBase4i const *param1)(LVecBase4i const *, LVecBase4i const *)
extern bool LVecBase4i$51$almost_equal(LVecBase4i const *self, LVecBase4i const *other);

#if INDEX
#define LVecBase4i_C_almost_equal_B_pp LVecBase4i$51$almost_equal
#endif

// C++ _inCAAAAxq33(LVecBase4i const &other, int threshold) ==> LVecBase4i$_$almost_equal(LVecBase4i const *param0, LVecBase4i const *param1, int param2)(LVecBase4i const *, LVecBase4i const *, int)
extern bool LVecBase4i$52$almost_equal(LVecBase4i const *self, LVecBase4i const *other, int threshold);

#if INDEX
#define LVecBase4i_C_almost_equal_B_ppi LVecBase4i$52$almost_equal
#endif

// C++ _inCAAAAgkpi(std::ostream &out) ==> LVecBase4i$_$output(LVecBase4i const *param0, std::ostream *param1)(LVecBase4i const *, std::ostream *)
extern void LVecBase4i$53$output(LVecBase4i const *self, std$_ostream *out);

#if INDEX
#define LVecBase4i_C_output_v_pp LVecBase4i$53$output
#endif

// C++ _inCAAAAKZCg(Datagram &destination) ==> LVecBase4i$_$write_datagram_fixed(LVecBase4i const *param0, Datagram *param1)(LVecBase4i const *, Datagram *)
extern void LVecBase4i$54$write_datagram_fixed(LVecBase4i const *self, Datagram *destination);

#if INDEX
#define LVecBase4i_C_write_datagram_fixed_v_pp LVecBase4i$54$write_datagram_fixed
#endif

// C++ _inCAAAAyLkc(DatagramIterator &source) ==> LVecBase4i$_$read_datagram_fixed(LVecBase4i *param0, DatagramIterator *param1)(LVecBase4i *, DatagramIterator *)
extern void LVecBase4i$55$read_datagram_fixed(LVecBase4i *self, DatagramIterator *source);

#if INDEX
#define LVecBase4i_C_read_datagram_fixed_v_pp LVecBase4i$55$read_datagram_fixed
#endif

// C++ _inCAAAAH98c(Datagram &destination) ==> LVecBase4i$_$write_datagram(LVecBase4i const *param0, Datagram *param1)(LVecBase4i const *, Datagram *)
extern void LVecBase4i$56$write_datagram(LVecBase4i const *self, Datagram *destination);

#if INDEX
#define LVecBase4i_C_write_datagram_v_pp LVecBase4i$56$write_datagram
#endif

// C++ _inCAAAAns9u(DatagramIterator &source) ==> LVecBase4i$_$read_datagram(LVecBase4i *param0, DatagramIterator *param1)(LVecBase4i *, DatagramIterator *)
extern void LVecBase4i$57$read_datagram(LVecBase4i *self, DatagramIterator *source);

#if INDEX
#define LVecBase4i_C_read_datagram_v_pp LVecBase4i$57$read_datagram
#endif

// C++ _inCAAAAMRBz() ==> LVecBase4i$_$get_v(LVecBase4i const *param0)(LVecBase4i const *)
extern LVecBase4i$_EVector4 * LVecBase4i$58$get_v(LVecBase4i const *self);

#if INDEX
#define LVecBase4i_C_get_v_p_p LVecBase4i$58$get_v
#endif

// C++ _inCAAAA09vr() ==> LVecBase4i$_$get_class_type()()
extern int LVecBase4i$59$get_class_type(void);

#if INDEX
#define LVecBase4i_C_get_class_type_i_v LVecBase4i$59$get_class_type
#endif

// C++ _inCAAAA1r7L() ==> LVecBase4i$_$init_type()()
extern void LVecBase4i$60$init_type(void);

#if INDEX
#define LVecBase4i_C_init_type_v_v LVecBase4i$60$init_type
#endif


// LVector2d

// C++ _inCAAAAwcd5() ==> LVector2d$_$LVector2d()()
extern LVector2d * LVector2d$1$LVector2d(void);

#if INDEX
#define LVector2d_C_ctor_p_v LVector2d$1$LVector2d
#endif

// C++ _inCAAAAqdIZ(LVecBase2d const &copy) ==> LVector2d$_$LVector2d(LVecBase2d const *param0)(LVecBase2d const *)
extern LVector2d * LVector2d$2$LVector2d(LVecBase2d const *copy);

#if INDEX
#define LVector2d_C_ctor_p_p LVector2d$2$LVector2d
#endif

// C++ _inCAAAAOxv8(LVector2d const &) ==> LVector2d$_$LVector2d(LVector2d const *param0)(LVector2d const *)
extern LVector2d * LVector2d$3$LVector2d(LVector2d const *arg0);
// COLLISION : LVector2d_C_ctor_p_p LVector2d$3$LVector2d

// C++ _inCAAAAeGDk(double fill_value) ==> LVector2d$_$LVector2d(double param0)(double)
extern LVector2d * LVector2d$4$LVector2d(double fill_value);

#if INDEX
#define LVector2d_C_ctor_p_d LVector2d$4$LVector2d
#endif

// C++ _inCAAAAAy7S(double x, double y) ==> LVector2d$_$LVector2d(double param0, double param1)(double, double)
extern LVector2d * LVector2d$5$LVector2d(double x, double y);

#if INDEX
#define LVector2d_C_ctor_p_dd LVector2d$5$LVector2d
#endif

// C++ _inCAAAA0FN9() ==> LVector2d$_$zero()()
extern LVector2d const * LVector2d$6$zero(void);

#if INDEX
#define LVector2d_C_zero_p_v LVector2d$6$zero
#endif

// C++ _inCAAAApXVS() ==> LVector2d$_$unit_x()()
extern LVector2d const * LVector2d$7$unit_x(void);

#if INDEX
#define LVector2d_C_unit_x_p_v LVector2d$7$unit_x
#endif

// C++ _inCAAAAp7OX() ==> LVector2d$_$unit_y()()
extern LVector2d const * LVector2d$8$unit_y(void);

#if INDEX
#define LVector2d_C_unit_y_p_v LVector2d$8$unit_y
#endif

// C++ _inCAAAASGJk() ==> LVector2d$_$normalized(LVector2d const *param0)(LVector2d const *)
extern LVector2d * LVector2d$9$normalized(LVector2d const *self);

#if INDEX
#define LVector2d_C_normalized_p_p LVector2d$9$normalized
#endif

// C++ _inCAAAAYmkd(LVecBase2d const &onto) ==> LVector2d$_$project(LVector2d const *param0, LVecBase2d const *param1)(LVector2d const *, LVecBase2d const *)
extern LVector2d * LVector2d$10$project(LVector2d const *self, LVecBase2d const *onto);

#if INDEX
#define LVector2d_C_project_p_pp LVector2d$10$project
#endif

// C++ _inCAAAAH_RS(LVector2d const &other) ==> LVector2d$_$signed_angle_rad(LVector2d const *param0, LVector2d const *param1)(LVector2d const *, LVector2d const *)
extern double LVector2d$11$signed_angle_rad(LVector2d const *self, LVector2d const *other);

#if INDEX
#define LVector2d_C_signed_angle_rad_d_pp LVector2d$11$signed_angle_rad
#endif

// C++ _inCAAAAoZBP(LVector2d const &other) ==> LVector2d$_$signed_angle_deg(LVector2d const *param0, LVector2d const *param1)(LVector2d const *, LVector2d const *)
extern double LVector2d$12$signed_angle_deg(LVector2d const *self, LVector2d const *other);

#if INDEX
#define LVector2d_C_signed_angle_deg_d_pp LVector2d$12$signed_angle_deg
#endif

// C++ _inCAAAA4Zsu() ==> LVector2d$_$get_class_type()()
extern int LVector2d$13$get_class_type(void);

#if INDEX
#define LVector2d_C_get_class_type_i_v LVector2d$13$get_class_type
#endif

// C++ _inCAAAAc6u9() ==> LVector2d$_$init_type()()
extern void LVector2d$14$init_type(void);

#if INDEX
#define LVector2d_C_init_type_v_v LVector2d$14$init_type
#endif


// LVector2f

// C++ _inCAAAAQv_8() ==> LVector2f$_$LVector2f()()
extern LVector2f * LVector2f$1$LVector2f(void);

#if INDEX
#define LVector2f_C_ctor_p_v LVector2f$1$LVector2f
#endif

// C++ _inCAAAA_wFf(LVecBase2f const &copy) ==> LVector2f$_$LVector2f(LVecBase2f const *param0)(LVecBase2f const *)
extern LVector2f * LVector2f$2$LVector2f(LVecBase2f const *copy);

#if INDEX
#define LVector2f_C_ctor_p_p LVector2f$2$LVector2f
#endif

// C++ _inCAAAA76VA(LVector2f const &) ==> LVector2f$_$LVector2f(LVector2f const *param0)(LVector2f const *)
extern LVector2f * LVector2f$3$LVector2f(LVector2f const *arg0);
// COLLISION : LVector2f_C_ctor_p_p LVector2f$3$LVector2f

// C++ _inCAAAAtvIb(float fill_value) ==> LVector2f$_$LVector2f(float param0)(float)
extern LVector2f * LVector2f$4$LVector2f(float fill_value);

#if INDEX
#define LVector2f_C_ctor_p_f LVector2f$4$LVector2f
#endif

// C++ _inCAAAAOs00(float x, float y) ==> LVector2f$_$LVector2f(float param0, float param1)(float, float)
extern LVector2f * LVector2f$5$LVector2f(float x, float y);

#if INDEX
#define LVector2f_C_ctor_p_ff LVector2f$5$LVector2f
#endif

// C++ _inCAAAAMCtA() ==> LVector2f$_$zero()()
extern LVector2f const * LVector2f$6$zero(void);

#if INDEX
#define LVector2f_C_zero_p_v LVector2f$6$zero
#endif

// C++ _inCAAAAyI1V() ==> LVector2f$_$unit_x()()
extern LVector2f const * LVector2f$7$unit_x(void);

#if INDEX
#define LVector2f_C_unit_x_p_v LVector2f$7$unit_x
#endif

// C++ _inCAAAAykua() ==> LVector2f$_$unit_y()()
extern LVector2f const * LVector2f$8$unit_y(void);

#if INDEX
#define LVector2f_C_unit_y_p_v LVector2f$8$unit_y
#endif

// C++ _inCAAAA7Gpn() ==> LVector2f$_$normalized(LVector2f const *param0)(LVector2f const *)
extern LVector2f * LVector2f$9$normalized(LVector2f const *self);

#if INDEX
#define LVector2f_C_normalized_p_p LVector2f$9$normalized
#endif

// C++ _inCAAAApiFZ(LVecBase2f const &onto) ==> LVector2f$_$project(LVector2f const *param0, LVecBase2f const *param1)(LVector2f const *, LVecBase2f const *)
extern LVector2f * LVector2f$10$project(LVector2f const *self, LVecBase2f const *onto);

#if INDEX
#define LVector2f_C_project_p_pp LVector2f$10$project
#endif

// C++ _inCAAAAe9_x(LVector2f const &other) ==> LVector2f$_$signed_angle_rad(LVector2f const *param0, LVector2f const *param1)(LVector2f const *, LVector2f const *)
extern float LVector2f$11$signed_angle_rad(LVector2f const *self, LVector2f const *other);

#if INDEX
#define LVector2f_C_signed_angle_rad_f_pp LVector2f$11$signed_angle_rad
#endif

// C++ _inCAAAA_avu(LVector2f const &other) ==> LVector2f$_$signed_angle_deg(LVector2f const *param0, LVector2f const *param1)(LVector2f const *, LVector2f const *)
extern float LVector2f$12$signed_angle_deg(LVector2f const *self, LVector2f const *other);

#if INDEX
#define LVector2f_C_signed_angle_deg_f_pp LVector2f$12$signed_angle_deg
#endif

// C++ _inCAAAAhYMy() ==> LVector2f$_$get_class_type()()
extern int LVector2f$13$get_class_type(void);

#if INDEX
#define LVector2f_C_get_class_type_i_v LVector2f$13$get_class_type
#endif

// C++ _inCAAAA06OB() ==> LVector2f$_$init_type()()
extern void LVector2f$14$init_type(void);

#if INDEX
#define LVector2f_C_init_type_v_v LVector2f$14$init_type
#endif


// LVector2i

// C++ _inCAAAABXQC() ==> LVector2i$_$LVector2i()()
extern LVector2i * LVector2i$1$LVector2i(void);

#if INDEX
#define LVector2i_C_ctor_p_v LVector2i$1$LVector2i
#endif

// C++ _inCAAAAF0Bo(LVecBase2i const &copy) ==> LVector2i$_$LVector2i(LVecBase2i const *param0)(LVecBase2i const *)
extern LVector2i * LVector2i$2$LVector2i(LVecBase2i const *copy);

#if INDEX
#define LVector2i_C_ctor_p_p LVector2i$2$LVector2i
#endif

// C++ _inCAAAAIwuF(LVector2i const &) ==> LVector2i$_$LVector2i(LVector2i const *param0)(LVector2i const *)
extern LVector2i * LVector2i$3$LVector2i(LVector2i const *arg0);
// COLLISION : LVector2i_C_ctor_p_p LVector2i$3$LVector2i

// C++ _inCAAAAk5GM(int fill_value) ==> LVector2i$_$LVector2i(int param0)(int)
extern LVector2i * LVector2i$4$LVector2i(int fill_value);

#if INDEX
#define LVector2i_C_ctor_p_i LVector2i$4$LVector2i
#endif

// C++ _inCAAAAVk_T(int x, int y) ==> LVector2i$_$LVector2i(int param0, int param1)(int, int)
extern LVector2i * LVector2i$5$LVector2i(int x, int y);

#if INDEX
#define LVector2i_C_ctor_p_ii LVector2i$5$LVector2i
#endif

// C++ _inCAAAAWD9l() ==> LVector2i$_$zero()()
extern LVector2i const * LVector2i$6$zero(void);

#if INDEX
#define LVector2i_C_zero_p_v LVector2i$6$zero
#endif

// C++ _inCAAAAIIF7() ==> LVector2i$_$unit_x()()
extern LVector2i const * LVector2i$7$unit_x(void);

#if INDEX
#define LVector2i_C_unit_x_p_v LVector2i$7$unit_x
#endif

// C++ _inCAAAAIk__() ==> LVector2i$_$unit_y()()
extern LVector2i const * LVector2i$8$unit_y(void);

#if INDEX
#define LVector2i_C_unit_y_p_v LVector2i$8$unit_y
#endif

// C++ _inCAAAAmfcX() ==> LVector2i$_$get_class_type()()
extern int LVector2i$9$get_class_type(void);

#if INDEX
#define LVector2i_C_get_class_type_i_v LVector2i$9$get_class_type
#endif

// C++ _inCAAAA_7em() ==> LVector2i$_$init_type()()
extern void LVector2i$10$init_type(void);

#if INDEX
#define LVector2i_C_init_type_v_v LVector2i$10$init_type
#endif


// LVector3d

// C++ _inCAAAADyhn() ==> LVector3d$_$LVector3d()()
extern LVector3d * LVector3d$1$LVector3d(void);

#if INDEX
#define LVector3d_C_ctor_p_v LVector3d$1$LVector3d
#endif

// C++ _inCAAAA_LFS(LVecBase2d const &copy, double z) ==> LVector3d$_$LVector3d(LVecBase2d const *param0, double param1)(LVecBase2d const *, double)
extern LVector3d * LVector3d$2$LVector3d(LVecBase2d const *copy, double z);

#if INDEX
#define LVector3d_C_ctor_p_pd LVector3d$2$LVector3d
#endif

// C++ _inCAAAAvfOH(LVecBase3d const &copy) ==> LVector3d$_$LVector3d(LVecBase3d const *param0)(LVecBase3d const *)
extern LVector3d * LVector3d$3$LVector3d(LVecBase3d const *copy);

#if INDEX
#define LVector3d_C_ctor_p_p LVector3d$3$LVector3d
#endif

// C++ _inCAAAAGbzG(LVector3d const &) ==> LVector3d$_$LVector3d(LVector3d const *param0)(LVector3d const *)
extern LVector3d * LVector3d$4$LVector3d(LVector3d const *arg0);
// COLLISION : LVector3d_C_ctor_p_p LVector3d$4$LVector3d

// C++ _inCAAAAvhGS(double fill_value) ==> LVector3d$_$LVector3d(double param0)(double)
extern LVector3d * LVector3d$5$LVector3d(double fill_value);

#if INDEX
#define LVector3d_C_ctor_p_d LVector3d$5$LVector3d
#endif

// C++ _inCAAAA_Wm1(double x, double y, double z) ==> LVector3d$_$LVector3d(double param0, double param1, double param2)(double, double, double)
extern LVector3d * LVector3d$6$LVector3d(double x, double y, double z);

#if INDEX
#define LVector3d_C_ctor_p_ddd LVector3d$6$LVector3d
#endif

// C++ _inCAAAA3lRk() ==> LVector3d$_$zero()()
extern LVector3d const * LVector3d$7$zero(void);

#if INDEX
#define LVector3d_C_zero_p_v LVector3d$7$zero
#endif

// C++ _inCAAAAp3Z5() ==> LVector3d$_$unit_x()()
extern LVector3d const * LVector3d$8$unit_x(void);

#if INDEX
#define LVector3d_C_unit_x_p_v LVector3d$8$unit_x
#endif

// C++ _inCAAAApbR_() ==> LVector3d$_$unit_y()()
extern LVector3d const * LVector3d$9$unit_y(void);

#if INDEX
#define LVector3d_C_unit_y_p_v LVector3d$9$unit_y
#endif

// C++ _inCAAAAo_KD() ==> LVector3d$_$unit_z()()
extern LVector3d const * LVector3d$10$unit_z(void);

#if INDEX
#define LVector3d_C_unit_z_p_v LVector3d$10$unit_z
#endif

// C++ _inCAAAAUj_9() ==> LVector3d$_$get_xy(LVector3d const *param0)(LVector3d const *)
extern LVector2d * LVector3d$11$get_xy(LVector3d const *self);

#if INDEX
#define LVector3d_C_get_xy_p_p LVector3d$11$get_xy
#endif

// C++ _inCAAAAVP4C() ==> LVector3d$_$get_xz(LVector3d const *param0)(LVector3d const *)
extern LVector2d * LVector3d$12$get_xz(LVector3d const *self);

#if INDEX
#define LVector3d_C_get_xz_p_p LVector3d$12$get_xz
#endif

// C++ _inCAAAAt_BD() ==> LVector3d$_$get_yz(LVector3d const *param0)(LVector3d const *)
extern LVector2d * LVector3d$13$get_yz(LVector3d const *self);

#if INDEX
#define LVector3d_C_get_yz_p_p LVector3d$13$get_yz
#endif

// C++ _inCAAAAPzz8(LVecBase3d const &other) ==> LVector3d$_$cross(LVector3d const *param0, LVecBase3d const *param1)(LVector3d const *, LVecBase3d const *)
extern LVector3d * LVector3d$14$cross(LVector3d const *self, LVecBase3d const *other);

#if INDEX
#define LVector3d_C_cross_p_pp LVector3d$14$cross
#endif

// C++ _inCAAAARmML() ==> LVector3d$_$normalized(LVector3d const *param0)(LVector3d const *)
extern LVector3d * LVector3d$15$normalized(LVector3d const *self);

#if INDEX
#define LVector3d_C_normalized_p_p LVector3d$15$normalized
#endif

// C++ _inCAAAAiGg1(LVecBase3d const &onto) ==> LVector3d$_$project(LVector3d const *param0, LVecBase3d const *param1)(LVector3d const *, LVecBase3d const *)
extern LVector3d * LVector3d$16$project(LVector3d const *self, LVecBase3d const *onto);

#if INDEX
#define LVector3d_C_project_p_pp LVector3d$16$project
#endif

// C++ _inCAAAA_6Zy(LVector3d const &other) ==> LVector3d$_$angle_rad(LVector3d const *param0, LVector3d const *param1)(LVector3d const *, LVector3d const *)
extern double LVector3d$17$angle_rad(LVector3d const *self, LVector3d const *other);

#if INDEX
#define LVector3d_C_angle_rad_d_pp LVector3d$17$angle_rad
#endif

// C++ _inCAAAAlnWj(LVector3d const &other) ==> LVector3d$_$angle_deg(LVector3d const *param0, LVector3d const *param1)(LVector3d const *, LVector3d const *)
extern double LVector3d$18$angle_deg(LVector3d const *self, LVector3d const *other);

#if INDEX
#define LVector3d_C_angle_deg_d_pp LVector3d$18$angle_deg
#endif

// C++ _inCAAAAI_w4(LVector3d const &other, LVector3d const &ref) ==> LVector3d$_$signed_angle_rad(LVector3d const *param0, LVector3d const *param1, LVector3d const *param2)(LVector3d const *, LVector3d const *, LVector3d const *)
extern double LVector3d$19$signed_angle_rad(LVector3d const *self, LVector3d const *other, LVector3d const *ref);

#if INDEX
#define LVector3d_C_signed_angle_rad_d_ppp LVector3d$19$signed_angle_rad
#endif

// C++ _inCAAAAlWg1(LVector3d const &other, LVector3d const &ref) ==> LVector3d$_$signed_angle_deg(LVector3d const *param0, LVector3d const *param1, LVector3d const *param2)(LVector3d const *, LVector3d const *, LVector3d const *)
extern double LVector3d$20$signed_angle_deg(LVector3d const *self, LVector3d const *other, LVector3d const *ref);

#if INDEX
#define LVector3d_C_signed_angle_deg_d_ppp LVector3d$20$signed_angle_deg
#endif

// C++ _inCAAAAl1PE(LVector3d const &other) ==> LVector3d$_$relative_angle_rad(LVector3d const *param0, LVector3d const *param1)(LVector3d const *, LVector3d const *)
extern double LVector3d$21$relative_angle_rad(LVector3d const *self, LVector3d const *other);

#if INDEX
#define LVector3d_C_relative_angle_rad_d_pp LVector3d$21$relative_angle_rad
#endif

// C++ _inCAAAAZkXK(LVector3d const &other) ==> LVector3d$_$relative_angle_deg(LVector3d const *param0, LVector3d const *param1)(LVector3d const *, LVector3d const *)
extern double LVector3d$22$relative_angle_deg(LVector3d const *self, LVector3d const *other);

#if INDEX
#define LVector3d_C_relative_angle_deg_d_pp LVector3d$22$relative_angle_deg
#endif

// C++ _inCAAAA8N5k(CoordinateSystem cs) ==> LVector3d$_$up(CoordinateSystem param0)(CoordinateSystem)
extern LVector3d * LVector3d$23$up(CoordinateSystem cs);

#if INDEX
#define LVector3d_C_up_p_p LVector3d$23$up
#endif

// C++ _inCAAAAI8sB() ==> LVector3d$_$up()()
extern LVector3d * LVector3d$24$up(void);

#if INDEX
#define LVector3d_C_up_p_v LVector3d$24$up
#endif

// C++ _inCAAAAQtOm(CoordinateSystem cs) ==> LVector3d$_$right(CoordinateSystem param0)(CoordinateSystem)
extern LVector3d * LVector3d$25$right(CoordinateSystem cs);

#if INDEX
#define LVector3d_C_right_p_p LVector3d$25$right
#endif

// C++ _inCAAAAxMXe() ==> LVector3d$_$right()()
extern LVector3d * LVector3d$26$right(void);

#if INDEX
#define LVector3d_C_right_p_v LVector3d$26$right
#endif

// C++ _inCAAAA8FXy(CoordinateSystem cs) ==> LVector3d$_$forward(CoordinateSystem param0)(CoordinateSystem)
extern LVector3d * LVector3d$27$forward(CoordinateSystem cs);

#if INDEX
#define LVector3d_C_forward_p_p LVector3d$27$forward
#endif

// C++ _inCAAAAPT7r() ==> LVector3d$_$forward()()
extern LVector3d * LVector3d$28$forward(void);

#if INDEX
#define LVector3d_C_forward_p_v LVector3d$28$forward
#endif

// C++ _inCAAAAgtYb(CoordinateSystem cs) ==> LVector3d$_$down(CoordinateSystem param0)(CoordinateSystem)
extern LVector3d * LVector3d$29$down(CoordinateSystem cs);

#if INDEX
#define LVector3d_C_down_p_p LVector3d$29$down
#endif

// C++ _inCAAAAKBKd() ==> LVector3d$_$down()()
extern LVector3d * LVector3d$30$down(void);

#if INDEX
#define LVector3d_C_down_p_v LVector3d$30$down
#endif

// C++ _inCAAAA2UWG(CoordinateSystem cs) ==> LVector3d$_$left(CoordinateSystem param0)(CoordinateSystem)
extern LVector3d * LVector3d$31$left(CoordinateSystem cs);

#if INDEX
#define LVector3d_C_left_p_p LVector3d$31$left
#endif

// C++ _inCAAAAcxJI() ==> LVector3d$_$left()()
extern LVector3d * LVector3d$32$left(void);

#if INDEX
#define LVector3d_C_left_p_v LVector3d$32$left
#endif

// C++ _inCAAAAWP96(CoordinateSystem cs) ==> LVector3d$_$back(CoordinateSystem param0)(CoordinateSystem)
extern LVector3d * LVector3d$33$back(CoordinateSystem cs);

#if INDEX
#define LVector3d_C_back_p_p LVector3d$33$back
#endif

// C++ _inCAAAAMyv8() ==> LVector3d$_$back()()
extern LVector3d * LVector3d$34$back(void);

#if INDEX
#define LVector3d_C_back_p_v LVector3d$34$back
#endif

// C++ _inCAAAAuPAa(double right, double fwd, double up, CoordinateSystem cs) ==> LVector3d$_$rfu(double param0, double param1, double param2, CoordinateSystem param3)(double, double, double, CoordinateSystem)
extern LVector3d * LVector3d$35$rfu(double right, double fwd, double up, CoordinateSystem cs);

#if INDEX
#define LVector3d_C_rfu_p_dddp LVector3d$35$rfu
#endif

// C++ _inCAAAAnVMh(double right, double fwd, double up) ==> LVector3d$_$rfu(double param0, double param1, double param2)(double, double, double)
extern LVector3d * LVector3d$36$rfu(double right, double fwd, double up);

#if INDEX
#define LVector3d_C_rfu_p_ddd LVector3d$36$rfu
#endif

// C++ _inCAAAAH5wV() ==> LVector3d$_$get_class_type()()
extern int LVector3d$37$get_class_type(void);

#if INDEX
#define LVector3d_C_get_class_type_i_v LVector3d$37$get_class_type
#endif

// C++ _inCAAAAdayk() ==> LVector3d$_$init_type()()
extern void LVector3d$38$init_type(void);

#if INDEX
#define LVector3d_C_init_type_v_v LVector3d$38$init_type
#endif


// LVector3f

// C++ _inCAAAAhACr() ==> LVector3f$_$LVector3f()()
extern LVector3f * LVector3f$1$LVector3f(void);

#if INDEX
#define LVector3f_C_ctor_p_v LVector3f$1$LVector3f
#endif

// C++ _inCAAAAMjgA(LVecBase2f const &copy, float z) ==> LVector3f$_$LVector3f(LVecBase2f const *param0, float param1)(LVecBase2f const *, float)
extern LVector3f * LVector3f$2$LVector3f(LVecBase2f const *copy, float z);

#if INDEX
#define LVector3f_C_ctor_p_pf LVector3f$2$LVector3f
#endif

// C++ _inCAAAAZ8LN(LVecBase3f const &copy) ==> LVector3f$_$LVector3f(LVecBase3f const *param0)(LVecBase3f const *)
extern LVector3f * LVector3f$3$LVector3f(LVecBase3f const *copy);

#if INDEX
#define LVector3f_C_ctor_p_p LVector3f$3$LVector3f
#endif

// C++ _inCAAAACTZK(LVector3f const &) ==> LVector3f$_$LVector3f(LVector3f const *param0)(LVector3f const *)
extern LVector3f * LVector3f$4$LVector3f(LVector3f const *arg0);
// COLLISION : LVector3f_C_ctor_p_p LVector3f$4$LVector3f

// C++ _inCAAAA6OMJ(float fill_value) ==> LVector3f$_$LVector3f(float param0)(float)
extern LVector3f * LVector3f$5$LVector3f(float fill_value);

#if INDEX
#define LVector3f_C_ctor_p_f LVector3f$5$LVector3f
#endif

// C++ _inCAAAAhp6I(float x, float y, float z) ==> LVector3f$_$LVector3f(float param0, float param1, float param2)(float, float, float)
extern LVector3f * LVector3f$6$LVector3f(float x, float y, float z);

#if INDEX
#define LVector3f_C_ctor_p_fff LVector3f$6$LVector3f
#endif

// C++ _inCAAAAMixn() ==> LVector3f$_$zero()()
extern LVector3f const * LVector3f$7$zero(void);

#if INDEX
#define LVector3f_C_zero_p_v LVector3f$7$zero
#endif

// C++ _inCAAAAyo58() ==> LVector3f$_$unit_x()()
extern LVector3f const * LVector3f$8$unit_x(void);

#if INDEX
#define LVector3f_C_unit_x_p_v LVector3f$8$unit_x
#endif

// C++ _inCAAAAxExB() ==> LVector3f$_$unit_y()()
extern LVector3f const * LVector3f$9$unit_y(void);

#if INDEX
#define LVector3f_C_unit_y_p_v LVector3f$9$unit_y
#endif

// C++ _inCAAAAxgqG() ==> LVector3f$_$unit_z()()
extern LVector3f const * LVector3f$10$unit_z(void);

#if INDEX
#define LVector3f_C_unit_z_p_v LVector3f$10$unit_z
#endif

// C++ _inCAAAA8jfB() ==> LVector3f$_$get_xy(LVector3f const *param0)(LVector3f const *)
extern LVector2f * LVector3f$11$get_xy(LVector3f const *self);

#if INDEX
#define LVector3f_C_get_xy_p_p LVector3f$11$get_xy
#endif

// C++ _inCAAAA8PYG() ==> LVector3f$_$get_xz(LVector3f const *param0)(LVector3f const *)
extern LVector2f * LVector3f$12$get_xz(LVector3f const *self);

#if INDEX
#define LVector3f_C_get_xz_p_p LVector3f$12$get_xz
#endif

// C++ _inCAAAAE_hG() ==> LVector3f$_$get_yz(LVector3f const *param0)(LVector3f const *)
extern LVector2f * LVector3f$13$get_yz(LVector3f const *self);

#if INDEX
#define LVector3f_C_get_yz_p_p LVector3f$13$get_yz
#endif

// C++ _inCAAAAXSXn(LVecBase3f const &other) ==> LVector3f$_$cross(LVector3f const *param0, LVecBase3f const *param1)(LVector3f const *, LVecBase3f const *)
extern LVector3f * LVector3f$14$cross(LVector3f const *self, LVecBase3f const *other);

#if INDEX
#define LVector3f_C_cross_p_pp LVector3f$14$cross
#endif

// C++ _inCAAAA6msO() ==> LVector3f$_$normalized(LVector3f const *param0)(LVector3f const *)
extern LVector3f * LVector3f$15$normalized(LVector3f const *self);

#if INDEX
#define LVector3f_C_normalized_p_p LVector3f$15$normalized
#endif

// C++ _inCAAAAzCBx(LVecBase3f const &onto) ==> LVector3f$_$project(LVector3f const *param0, LVecBase3f const *param1)(LVector3f const *, LVecBase3f const *)
extern LVector3f * LVector3f$16$project(LVector3f const *self, LVecBase3f const *onto);

#if INDEX
#define LVector3f_C_project_p_pp LVector3f$16$project
#endif

// C++ _inCAAAAi1_1(LVector3f const &other) ==> LVector3f$_$angle_rad(LVector3f const *param0, LVector3f const *param1)(LVector3f const *, LVector3f const *)
extern float LVector3f$17$angle_rad(LVector3f const *self, LVector3f const *other);

#if INDEX
#define LVector3f_C_angle_rad_f_pp LVector3f$17$angle_rad
#endif

// C++ _inCAAAASe7m(LVector3f const &other) ==> LVector3f$_$angle_deg(LVector3f const *param0, LVector3f const *param1)(LVector3f const *, LVector3f const *)
extern float LVector3f$18$angle_deg(LVector3f const *self, LVector3f const *other);

#if INDEX
#define LVector3f_C_angle_deg_f_pp LVector3f$18$angle_deg
#endif

// C++ _inCAAAAqxe0(LVector3f const &other, LVector3f const &ref) ==> LVector3f$_$signed_angle_rad(LVector3f const *param0, LVector3f const *param1, LVector3f const *param2)(LVector3f const *, LVector3f const *, LVector3f const *)
extern float LVector3f$19$signed_angle_rad(LVector3f const *self, LVector3f const *other, LVector3f const *ref);

#if INDEX
#define LVector3f_C_signed_angle_rad_f_ppp LVector3f$19$signed_angle_rad
#endif

// C++ _inCAAAADYOx(LVector3f const &other, LVector3f const &ref) ==> LVector3f$_$signed_angle_deg(LVector3f const *param0, LVector3f const *param1, LVector3f const *param2)(LVector3f const *, LVector3f const *, LVector3f const *)
extern float LVector3f$20$signed_angle_deg(LVector3f const *self, LVector3f const *other, LVector3f const *ref);

#if INDEX
#define LVector3f_C_signed_angle_deg_f_ppp LVector3f$20$signed_angle_deg
#endif

// C++ _inCAAAA_dvn(LVector3f const &other) ==> LVector3f$_$relative_angle_rad(LVector3f const *param0, LVector3f const *param1)(LVector3f const *, LVector3f const *)
extern float LVector3f$21$relative_angle_rad(LVector3f const *self, LVector3f const *other);

#if INDEX
#define LVector3f_C_relative_angle_rad_f_pp LVector3f$21$relative_angle_rad
#endif

// C++ _inCAAAAzM2t(LVector3f const &other) ==> LVector3f$_$relative_angle_deg(LVector3f const *param0, LVector3f const *param1)(LVector3f const *, LVector3f const *)
extern float LVector3f$22$relative_angle_deg(LVector3f const *self, LVector3f const *other);

#if INDEX
#define LVector3f_C_relative_angle_deg_f_pp LVector3f$22$relative_angle_deg
#endif

// C++ _inCAAAAlOZo(CoordinateSystem cs) ==> LVector3f$_$up(CoordinateSystem param0)(CoordinateSystem)
extern LVector3f * LVector3f$23$up(CoordinateSystem cs);

#if INDEX
#define LVector3f_C_up_p_p LVector3f$23$up
#endif

// C++ _inCAAAAz_MF() ==> LVector3f$_$up()()
extern LVector3f * LVector3f$24$up(void);

#if INDEX
#define LVector3f_C_up_p_v LVector3f$24$up
#endif

// C++ _inCAAAA3sup(CoordinateSystem cs) ==> LVector3f$_$right(CoordinateSystem param0)(CoordinateSystem)
extern LVector3f * LVector3f$25$right(CoordinateSystem cs);

#if INDEX
#define LVector3f_C_right_p_p LVector3f$25$right
#endif

// C++ _inCAAAAYM3h() ==> LVector3f$_$right()()
extern LVector3f * LVector3f$26$right(void);

#if INDEX
#define LVector3f_C_right_p_v LVector3f$26$right
#endif

// C++ _inCAAAAn621(CoordinateSystem cs) ==> LVector3f$_$forward(CoordinateSystem param0)(CoordinateSystem)
extern LVector3f * LVector3f$27$forward(CoordinateSystem cs);

#if INDEX
#define LVector3f_C_forward_p_p LVector3f$27$forward
#endif

// C++ _inCAAAAoQbv() ==> LVector3f$_$forward()()
extern LVector3f * LVector3f$28$forward(void);

#if INDEX
#define LVector3f_C_forward_p_v LVector3f$28$forward
#endif

// C++ _inCAAAA5s4e(CoordinateSystem cs) ==> LVector3f$_$down(CoordinateSystem param0)(CoordinateSystem)
extern LVector3f * LVector3f$29$down(CoordinateSystem cs);

#if INDEX
#define LVector3f_C_down_p_p LVector3f$29$down
#endif

// C++ _inCAAAAjBqg() ==> LVector3f$_$down()()
extern LVector3f * LVector3f$30$down(void);

#if INDEX
#define LVector3f_C_down_p_v LVector3f$30$down
#endif

// C++ _inCAAAAvT2J(CoordinateSystem cs) ==> LVector3f$_$left(CoordinateSystem param0)(CoordinateSystem)
extern LVector3f * LVector3f$31$left(CoordinateSystem cs);

#if INDEX
#define LVector3f_C_left_p_p LVector3f$31$left
#endif

// C++ _inCAAAA1_pL() ==> LVector3f$_$left()()
extern LVector3f * LVector3f$32$left(void);

#if INDEX
#define LVector3f_C_left_p_v LVector3f$32$left
#endif

// C++ _inCAAAAxPd_(CoordinateSystem cs) ==> LVector3f$_$back(CoordinateSystem param0)(CoordinateSystem)
extern LVector3f * LVector3f$33$back(CoordinateSystem cs);

#if INDEX
#define LVector3f_C_back_p_p LVector3f$33$back
#endif

// C++ _inCAAAAUzPA() ==> LVector3f$_$back()()
extern LVector3f * LVector3f$34$back(void);

#if INDEX
#define LVector3f_C_back_p_v LVector3f$34$back
#endif

// C++ _inCAAAAhSqR(float right, float fwd, float up, CoordinateSystem cs) ==> LVector3f$_$rfu(float param0, float param1, float param2, CoordinateSystem param3)(float, float, float, CoordinateSystem)
extern LVector3f * LVector3f$35$rfu(float right, float fwd, float up, CoordinateSystem cs);

#if INDEX
#define LVector3f_C_rfu_p_fffp LVector3f$35$rfu
#endif

// C++ _inCAAAAUW9c(float right, float fwd, float up) ==> LVector3f$_$rfu(float param0, float param1, float param2)(float, float, float)
extern LVector3f * LVector3f$36$rfu(float right, float fwd, float up);

#if INDEX
#define LVector3f_C_rfu_p_fff LVector3f$36$rfu
#endif

// C++ _inCAAAAg4QZ() ==> LVector3f$_$get_class_type()()
extern int LVector3f$37$get_class_type(void);

#if INDEX
#define LVector3f_C_get_class_type_i_v LVector3f$37$get_class_type
#endif

// C++ _inCAAAA0aSo() ==> LVector3f$_$init_type()()
extern void LVector3f$38$init_type(void);

#if INDEX
#define LVector3f_C_init_type_v_v LVector3f$38$init_type
#endif


// LVector3i

// C++ _inCAAAA30Tw() ==> LVector3i$_$LVector3i()()
extern LVector3i * LVector3i$1$LVector3i(void);

#if INDEX
#define LVector3i_C_ctor_p_v LVector3i$1$LVector3i
#endif

// C++ _inCAAAAEcgh(LVecBase2i const &copy, int z) ==> LVector3i$_$LVector3i(LVecBase2i const *param0, int param1)(LVecBase2i const *, int)
extern LVector3i * LVector3i$2$LVector3i(LVecBase2i const *copy, int z);

#if INDEX
#define LVector3i_C_ctor_p_pi LVector3i$2$LVector3i
#endif

// C++ _inCAAAACHGW(LVecBase3i const &copy) ==> LVector3i$_$LVector3i(LVecBase3i const *param0)(LVecBase3i const *)
extern LVector3i * LVector3i$3$LVector3i(LVecBase3i const *copy);

#if INDEX
#define LVector3i_C_ctor_p_p LVector3i$3$LVector3i
#endif

// C++ _inCAAAAxJxP(LVector3i const &) ==> LVector3i$_$LVector3i(LVector3i const *param0)(LVector3i const *)
extern LVector3i * LVector3i$4$LVector3i(LVector3i const *arg0);
// COLLISION : LVector3i_C_ctor_p_p LVector3i$4$LVector3i

// C++ _inCAAAAyYJ6(int fill_value) ==> LVector3i$_$LVector3i(int param0)(int)
extern LVector3i * LVector3i$5$LVector3i(int fill_value);

#if INDEX
#define LVector3i_C_ctor_p_i LVector3i$5$LVector3i
#endif

// C++ _inCAAAAd32R(int x, int y, int z) ==> LVector3i$_$LVector3i(int param0, int param1, int param2)(int, int, int)
extern LVector3i * LVector3i$6$LVector3i(int x, int y, int z);

#if INDEX
#define LVector3i_C_ctor_p_iii LVector3i$6$LVector3i
#endif

// C++ _inCAAAARjBN() ==> LVector3i$_$zero()()
extern LVector3i const * LVector3i$7$zero(void);

#if INDEX
#define LVector3i_C_zero_p_v LVector3i$7$zero
#endif

// C++ _inCAAAAPoJi() ==> LVector3i$_$unit_x()()
extern LVector3i const * LVector3i$8$unit_x(void);

#if INDEX
#define LVector3i_C_unit_x_p_v LVector3i$8$unit_x
#endif

// C++ _inCAAAAPEBn() ==> LVector3i$_$unit_y()()
extern LVector3i const * LVector3i$9$unit_y(void);

#if INDEX
#define LVector3i_C_unit_y_p_v LVector3i$9$unit_y
#endif

// C++ _inCAAAAPg6r() ==> LVector3i$_$unit_z()()
extern LVector3i const * LVector3i$10$unit_z(void);

#if INDEX
#define LVector3i_C_unit_z_p_v LVector3i$10$unit_z
#endif

// C++ _inCAAAA6kvm() ==> LVector3i$_$get_xy(LVector3i const *param0)(LVector3i const *)
extern LVector2i * LVector3i$11$get_xy(LVector3i const *self);

#if INDEX
#define LVector3i_C_get_xy_p_p LVector3i$11$get_xy
#endif

// C++ _inCAAAA6Ior() ==> LVector3i$_$get_xz(LVector3i const *param0)(LVector3i const *)
extern LVector2i * LVector3i$12$get_xz(LVector3i const *self);

#if INDEX
#define LVector3i_C_get_xz_p_p LVector3i$12$get_xz
#endif

// C++ _inCAAAAC4xr() ==> LVector3i$_$get_yz(LVector3i const *param0)(LVector3i const *)
extern LVector2i * LVector3i$13$get_yz(LVector3i const *self);

#if INDEX
#define LVector3i_C_get_yz_p_p LVector3i$13$get_yz
#endif

// C++ _inCAAAATBMH(LVecBase3i const &other) ==> LVector3i$_$cross(LVector3i const *param0, LVecBase3i const *param1)(LVector3i const *, LVecBase3i const *)
extern LVector3i * LVector3i$14$cross(LVector3i const *self, LVecBase3i const *other);

#if INDEX
#define LVector3i_C_cross_p_pp LVector3i$14$cross
#endif

// C++ _inCAAAAePpN(CoordinateSystem cs) ==> LVector3i$_$up(CoordinateSystem param0)(CoordinateSystem)
extern LVector3i * LVector3i$15$up(CoordinateSystem cs);

#if INDEX
#define LVector3i_C_up_p_p LVector3i$15$up
#endif

// C++ _inCAAAAp_cq() ==> LVector3i$_$up()()
extern LVector3i * LVector3i$16$up(void);

#if INDEX
#define LVector3i_C_up_p_v LVector3i$16$up
#endif

// C++ _inCAAAAyr_O(CoordinateSystem cs) ==> LVector3i$_$right(CoordinateSystem param0)(CoordinateSystem)
extern LVector3i * LVector3i$17$right(CoordinateSystem cs);

#if INDEX
#define LVector3i_C_right_p_p LVector3i$17$right
#endif

// C++ _inCAAAAfNHH() ==> LVector3i$_$right()()
extern LVector3i * LVector3i$18$right(void);

#if INDEX
#define LVector3i_C_right_p_v LVector3i$18$right
#endif

// C++ _inCAAAAi7Gb(CoordinateSystem cs) ==> LVector3i$_$forward(CoordinateSystem param0)(CoordinateSystem)
extern LVector3i * LVector3i$19$forward(CoordinateSystem cs);

#if INDEX
#define LVector3i_C_forward_p_p LVector3i$19$forward
#endif

// C++ _inCAAAAtRrU() ==> LVector3i$_$forward()()
extern LVector3i * LVector3i$20$forward(void);

#if INDEX
#define LVector3i_C_forward_p_v LVector3i$20$forward
#endif

// C++ _inCAAAACjIE(CoordinateSystem cs) ==> LVector3i$_$down(CoordinateSystem param0)(CoordinateSystem)
extern LVector3i * LVector3i$21$down(CoordinateSystem cs);

#if INDEX
#define LVector3i_C_down_p_p LVector3i$21$down
#endif

// C++ _inCAAAAkG6F() ==> LVector3i$_$down()()
extern LVector3i * LVector3i$22$down(void);

#if INDEX
#define LVector3i_C_down_p_v LVector3i$22$down
#endif

// C++ _inCAAAAVTGv(CoordinateSystem cs) ==> LVector3i$_$left(CoordinateSystem param0)(CoordinateSystem)
extern LVector3i * LVector3i$23$left(CoordinateSystem cs);

#if INDEX
#define LVector3i_C_left_p_p LVector3i$23$left
#endif

// C++ _inCAAAAz_5w() ==> LVector3i$_$left()()
extern LVector3i * LVector3i$24$left(void);

#if INDEX
#define LVector3i_C_left_p_v LVector3i$24$left
#endif

// C++ _inCAAAA0Otj(CoordinateSystem cs) ==> LVector3i$_$back(CoordinateSystem param0)(CoordinateSystem)
extern LVector3i * LVector3i$25$back(CoordinateSystem cs);

#if INDEX
#define LVector3i_C_back_p_p LVector3i$25$back
#endif

// C++ _inCAAAAqzfl() ==> LVector3i$_$back()()
extern LVector3i * LVector3i$26$back(void);

#if INDEX
#define LVector3i_C_back_p_v LVector3i$26$back
#endif

// C++ _inCAAAA9XC0(int right, int fwd, int up, CoordinateSystem cs) ==> LVector3i$_$rfu(int param0, int param1, int param2, CoordinateSystem param3)(int, int, int, CoordinateSystem)
extern LVector3i * LVector3i$27$rfu(int right, int fwd, int up, CoordinateSystem cs);

#if INDEX
#define LVector3i_C_rfu_p_iiip LVector3i$27$rfu
#endif

// C++ _inCAAAAS9Qt(int right, int fwd, int up) ==> LVector3i$_$rfu(int param0, int param1, int param2)(int, int, int)
extern LVector3i * LVector3i$28$rfu(int right, int fwd, int up);

#if INDEX
#define LVector3i_C_rfu_p_iii LVector3i$28$rfu
#endif

// C++ _inCAAAAm_g_() ==> LVector3i$_$get_class_type()()
extern int LVector3i$29$get_class_type(void);

#if INDEX
#define LVector3i_C_get_class_type_i_v LVector3i$29$get_class_type
#endif

// C++ _inCAAAA_biN() ==> LVector3i$_$init_type()()
extern void LVector3i$30$init_type(void);

#if INDEX
#define LVector3i_C_init_type_v_v LVector3i$30$init_type
#endif


// LVector4d

// C++ _inCAAAASTkV() ==> LVector4d$_$LVector4d()()
extern LVector4d * LVector4d$1$LVector4d(void);

#if INDEX
#define LVector4d_C_ctor_p_v LVector4d$1$LVector4d
#endif

// C++ _inCAAAAZALA(LVecBase3d const &copy, double w) ==> LVector4d$_$LVector4d(LVecBase3d const *param0, double param1)(LVecBase3d const *, double)
extern LVector4d * LVector4d$2$LVector4d(LVecBase3d const *copy, double w);

#if INDEX
#define LVector4d_C_ctor_p_pd LVector4d$2$LVector4d
#endif

// C++ _inCAAAArcU1(LVecBase4d const &copy) ==> LVector4d$_$LVector4d(LVecBase4d const *param0)(LVecBase4d const *)
extern LVector4d * LVector4d$3$LVector4d(LVecBase4d const *copy);

#if INDEX
#define LVector4d_C_ctor_p_p LVector4d$3$LVector4d
#endif

// C++ _inCAAAA_l2Q(LVector4d const &) ==> LVector4d$_$LVector4d(LVector4d const *param0)(LVector4d const *)
extern LVector4d * LVector4d$4$LVector4d(LVector4d const *arg0);
// COLLISION : LVector4d_C_ctor_p_p LVector4d$4$LVector4d

// C++ _inCAAAA8AKA(double fill_value) ==> LVector4d$_$LVector4d(double param0)(double)
extern LVector4d * LVector4d$5$LVector4d(double fill_value);

#if INDEX
#define LVector4d_C_ctor_p_d LVector4d$5$LVector4d
#endif

// C++ _inCAAAA72XI(double x, double y, double z, double w) ==> LVector4d$_$LVector4d(double param0, double param1, double param2, double param3)(double, double, double, double)
extern LVector4d * LVector4d$6$LVector4d(double x, double y, double z, double w);

#if INDEX
#define LVector4d_C_ctor_p_dddd LVector4d$6$LVector4d
#endif

// C++ _inCAAAA2FUL() ==> LVector4d$_$zero()()
extern LVector4d const * LVector4d$7$zero(void);

#if INDEX
#define LVector4d_C_zero_p_v LVector4d$7$zero
#endif

// C++ _inCAAAAoXcg() ==> LVector4d$_$unit_x()()
extern LVector4d const * LVector4d$8$unit_x(void);

#if INDEX
#define LVector4d_C_unit_x_p_v LVector4d$8$unit_x
#endif

// C++ _inCAAAAo7Vl() ==> LVector4d$_$unit_y()()
extern LVector4d const * LVector4d$9$unit_y(void);

#if INDEX
#define LVector4d_C_unit_y_p_v LVector4d$9$unit_y
#endif

// C++ _inCAAAAofNq() ==> LVector4d$_$unit_z()()
extern LVector4d const * LVector4d$10$unit_z(void);

#if INDEX
#define LVector4d_C_unit_z_p_v LVector4d$10$unit_z
#endif

// C++ _inCAAAAozkb() ==> LVector4d$_$unit_w()()
extern LVector4d const * LVector4d$11$unit_w(void);

#if INDEX
#define LVector4d_C_unit_w_p_v LVector4d$11$unit_w
#endif

// C++ _inCAAAAM7q3() ==> LVector4d$_$get_xyz(LVector4d const *param0)(LVector4d const *)
extern LVector3d * LVector4d$12$get_xyz(LVector4d const *self);

#if INDEX
#define LVector4d_C_get_xyz_p_p LVector4d$12$get_xyz
#endif

// C++ _inCAAAAVDDl() ==> LVector4d$_$get_xy(LVector4d const *param0)(LVector4d const *)
extern LVector2d * LVector4d$13$get_xy(LVector4d const *self);

#if INDEX
#define LVector4d_C_get_xy_p_p LVector4d$13$get_xy
#endif

// C++ _inCAAAARGQy() ==> LVector4d$_$normalized(LVector4d const *param0)(LVector4d const *)
extern LVector4d * LVector4d$14$normalized(LVector4d const *self);

#if INDEX
#define LVector4d_C_normalized_p_p LVector4d$14$normalized
#endif

// C++ _inCAAAA1mdN(LVecBase4d const &onto) ==> LVector4d$_$project(LVector4d const *param0, LVecBase4d const *param1)(LVector4d const *, LVecBase4d const *)
extern LVector4d * LVector4d$15$project(LVector4d const *self, LVecBase4d const *onto);

#if INDEX
#define LVector4d_C_project_p_pp LVector4d$15$project
#endif

// C++ _inCAAAAHZz8() ==> LVector4d$_$get_class_type()()
extern int LVector4d$16$get_class_type(void);

#if INDEX
#define LVector4d_C_get_class_type_i_v LVector4d$16$get_class_type
#endif

// C++ _inCAAAAe61L() ==> LVector4d$_$init_type()()
extern void LVector4d$17$init_type(void);

#if INDEX
#define LVector4d_C_init_type_v_v LVector4d$17$init_type
#endif


// LVector4f

// C++ _inCAAAA2hGZ() ==> LVector4f$_$LVector4f()()
extern LVector4f * LVector4f$1$LVector4f(void);

#if INDEX
#define LVector4f_C_ctor_p_v LVector4f$1$LVector4f
#endif

// C++ _inCAAAAMmmu(LVecBase3f const &copy, float w) ==> LVector4f$_$LVector4f(LVecBase3f const *param0, float param1)(LVecBase3f const *, float)
extern LVector4f * LVector4f$2$LVector4f(LVecBase3f const *copy, float w);

#if INDEX
#define LVector4f_C_ctor_p_pf LVector4f$2$LVector4f
#endif

// C++ _inCAAAA55R7(LVecBase4f const &copy) ==> LVector4f$_$LVector4f(LVecBase4f const *param0)(LVecBase4f const *)
extern LVector4f * LVector4f$3$LVector4f(LVecBase4f const *copy);

#if INDEX
#define LVector4f_C_ctor_p_p LVector4f$3$LVector4f
#endif

// C++ _inCAAAAJpcU(LVector4f const &) ==> LVector4f$_$LVector4f(LVector4f const *param0)(LVector4f const *)
extern LVector4f * LVector4f$4$LVector4f(LVector4f const *arg0);
// COLLISION : LVector4f_C_ctor_p_p LVector4f$4$LVector4f

// C++ _inCAAAAIgP3(float fill_value) ==> LVector4f$_$LVector4f(float param0)(float)
extern LVector4f * LVector4f$5$LVector4f(float fill_value);

#if INDEX
#define LVector4f_C_ctor_p_f LVector4f$5$LVector4f
#endif

// C++ _inCAAAAGLX9(float x, float y, float z, float w) ==> LVector4f$_$LVector4f(float param0, float param1, float param2, float param3)(float, float, float, float)
extern LVector4f * LVector4f$6$LVector4f(float x, float y, float z, float w);

#if INDEX
#define LVector4f_C_ctor_p_ffff LVector4f$6$LVector4f
#endif

// C++ _inCAAAAPC0O() ==> LVector4f$_$zero()()
extern LVector4f const * LVector4f$7$zero(void);

#if INDEX
#define LVector4f_C_zero_p_v LVector4f$7$zero
#endif

// C++ _inCAAAAxI8j() ==> LVector4f$_$unit_x()()
extern LVector4f const * LVector4f$8$unit_x(void);

#if INDEX
#define LVector4f_C_unit_x_p_v LVector4f$8$unit_x
#endif

// C++ _inCAAAAxk1o() ==> LVector4f$_$unit_y()()
extern LVector4f const * LVector4f$9$unit_y(void);

#if INDEX
#define LVector4f_C_unit_y_p_v LVector4f$9$unit_y
#endif

// C++ _inCAAAAxAtt() ==> LVector4f$_$unit_z()()
extern LVector4f const * LVector4f$10$unit_z(void);

#if INDEX
#define LVector4f_C_unit_z_p_v LVector4f$10$unit_z
#endif

// C++ _inCAAAAxsEf() ==> LVector4f$_$unit_w()()
extern LVector4f const * LVector4f$11$unit_w(void);

#if INDEX
#define LVector4f_C_unit_w_p_v LVector4f$11$unit_w
#endif

// C++ _inCAAAA17K7() ==> LVector4f$_$get_xyz(LVector4f const *param0)(LVector4f const *)
extern LVector3f * LVector4f$12$get_xyz(LVector4f const *self);

#if INDEX
#define LVector4f_C_get_xyz_p_p LVector4f$12$get_xyz
#endif

// C++ _inCAAAA8Djo() ==> LVector4f$_$get_xy(LVector4f const *param0)(LVector4f const *)
extern LVector2f * LVector4f$13$get_xy(LVector4f const *self);

#if INDEX
#define LVector4f_C_get_xy_p_p LVector4f$13$get_xy
#endif

// C++ _inCAAAA6Gw1() ==> LVector4f$_$normalized(LVector4f const *param0)(LVector4f const *)
extern LVector4f * LVector4f$14$normalized(LVector4f const *self);

#if INDEX
#define LVector4f_C_normalized_p_p LVector4f$14$normalized
#endif

// C++ _inCAAAAGh8I(LVecBase4f const &onto) ==> LVector4f$_$project(LVector4f const *param0, LVecBase4f const *param1)(LVector4f const *, LVecBase4f const *)
extern LVector4f * LVector4f$15$project(LVector4f const *self, LVecBase4f const *onto);

#if INDEX
#define LVector4f_C_project_p_pp LVector4f$15$project
#endif

// C++ _inCAAAAvYTA() ==> LVector4f$_$get_class_type()()
extern int LVector4f$16$get_class_type(void);

#if INDEX
#define LVector4f_C_get_class_type_i_v LVector4f$16$get_class_type
#endif

// C++ _inCAAAA16VP() ==> LVector4f$_$init_type()()
extern void LVector4f$17$init_type(void);

#if INDEX
#define LVector4f_C_init_type_v_v LVector4f$17$init_type
#endif


// LVector4i

// C++ _inCAAAAmVXe() ==> LVector4i$_$LVector4i()()
extern LVector4i * LVector4i$1$LVector4i(void);

#if INDEX
#define LVector4i_C_ctor_p_v LVector4i$1$LVector4i
#endif

// C++ _inCAAAAHRmP(LVecBase3i const &copy, int w) ==> LVector4i$_$LVector4i(LVecBase3i const *param0, int param1)(LVecBase3i const *, int)
extern LVector4i * LVector4i$2$LVector4i(LVecBase3i const *copy, int w);

#if INDEX
#define LVector4i_C_ctor_p_pi LVector4i$2$LVector4i
#endif

// C++ _inCAAAA_CME(LVecBase4i const &copy) ==> LVector4i$_$LVector4i(LVecBase4i const *param0)(LVecBase4i const *)
extern LVector4i * LVector4i$3$LVector4i(LVecBase4i const *copy);

#if INDEX
#define LVector4i_C_ctor_p_p LVector4i$3$LVector4i
#endif

// C++ _inCAAAA2j1Z(LVector4i const &) ==> LVector4i$_$LVector4i(LVector4i const *param0)(LVector4i const *)
extern LVector4i * LVector4i$4$LVector4i(LVector4i const *arg0);
// COLLISION : LVector4i_C_ctor_p_p LVector4i$4$LVector4i

// C++ _inCAAAAB_No(int fill_value) ==> LVector4i$_$LVector4i(int param0)(int)
extern LVector4i * LVector4i$5$LVector4i(int fill_value);

#if INDEX
#define LVector4i_C_ctor_p_i LVector4i$5$LVector4i
#endif

// C++ _inCAAAAxpif(int x, int y, int z, int w) ==> LVector4i$_$LVector4i(int param0, int param1, int param2, int param3)(int, int, int, int)
extern LVector4i * LVector4i$6$LVector4i(int x, int y, int z, int w);

#if INDEX
#define LVector4i_C_ctor_p_iiii LVector4i$6$LVector4i
#endif

// C++ _inCAAAARDE0() ==> LVector4i$_$zero()()
extern LVector4i const * LVector4i$7$zero(void);

#if INDEX
#define LVector4i_C_zero_p_v LVector4i$7$zero
#endif

// C++ _inCAAAAOIMJ() ==> LVector4i$_$unit_x()()
extern LVector4i const * LVector4i$8$unit_x(void);

#if INDEX
#define LVector4i_C_unit_x_p_v LVector4i$8$unit_x
#endif

// C++ _inCAAAAOkFO() ==> LVector4i$_$unit_y()()
extern LVector4i const * LVector4i$9$unit_y(void);

#if INDEX
#define LVector4i_C_unit_y_p_v LVector4i$9$unit_y
#endif

// C++ _inCAAAAOA9S() ==> LVector4i$_$unit_z()()
extern LVector4i const * LVector4i$10$unit_z(void);

#if INDEX
#define LVector4i_C_unit_z_p_v LVector4i$10$unit_z
#endif

// C++ _inCAAAAOsUE() ==> LVector4i$_$unit_w()()
extern LVector4i const * LVector4i$11$unit_w(void);

#if INDEX
#define LVector4i_C_unit_w_p_v LVector4i$11$unit_w
#endif

// C++ _inCAAAAq6ag() ==> LVector4i$_$get_xyz(LVector4i const *param0)(LVector4i const *)
extern LVector3i * LVector4i$12$get_xyz(LVector4i const *self);

#if INDEX
#define LVector4i_C_get_xyz_p_p LVector4i$12$get_xyz
#endif

// C++ _inCAAAA7EzN() ==> LVector4i$_$get_xy(LVector4i const *param0)(LVector4i const *)
extern LVector2i * LVector4i$13$get_xy(LVector4i const *self);

#if INDEX
#define LVector4i_C_get_xy_p_p LVector4i$13$get_xy
#endif

// C++ _inCAAAAlfjl() ==> LVector4i$_$get_class_type()()
extern int LVector4i$14$get_class_type(void);

#if INDEX
#define LVector4i_C_get_class_type_i_v LVector4i$14$get_class_type
#endif

// C++ _inCAAAA_7l0() ==> LVector4i$_$init_type()()
extern void LVector4i$15$init_type(void);

#if INDEX
#define LVector4i_C_init_type_v_v LVector4i$15$init_type
#endif


// Lens

// C++ _inCAAAAg23I() ==> Lens$_$make_copy(Lens const *param0)(Lens const *)
extern char ** Lens$1$make_copy(Lens const *self);

#if INDEX
#define Lens_C_make_copy_p_p Lens$1$make_copy
#endif

// C++ _inCAAAAUN_H(LPoint2 const &point2d, LPoint3 &near_point, LPoint3 &far_point) ==> Lens$_$extrude(Lens const *param0, LPoint2 const *param1, LPoint3 *param2, LPoint3 *param3)(Lens const *, LPoint2 const *, LPoint3 *, LPoint3 *)
extern bool Lens$2$extrude(Lens const *self, LPoint2 const *point2d, LPoint3 *near_point, LPoint3 *far_point);

#if INDEX
#define Lens_C_extrude_B_pppp Lens$2$extrude
#endif

// C++ _inCAAAAkiTI(LPoint3 const &point2d, LPoint3 &near_point, LPoint3 &far_point) ==> Lens$_$extrude(Lens const *param0, LPoint3 const *param1, LPoint3 *param2, LPoint3 *param3)(Lens const *, LPoint3 const *, LPoint3 *, LPoint3 *)
extern bool Lens$3$extrude(Lens const *self, LPoint3 const *point2d, LPoint3 *near_point, LPoint3 *far_point);
// COLLISION : Lens_C_extrude_B_pppp Lens$3$extrude

// C++ _inCAAAAI544(LPoint3 const &point2d, LPoint3 &point3d) ==> Lens$_$extrude_depth(Lens const *param0, LPoint3 const *param1, LPoint3 *param2)(Lens const *, LPoint3 const *, LPoint3 *)
extern bool Lens$4$extrude_depth(Lens const *self, LPoint3 const *point2d, LPoint3 *point3d);

#if INDEX
#define Lens_C_extrude_depth_B_ppp Lens$4$extrude_depth
#endif

// C++ _inCAAAAGNeD(LPoint2 const &point2d, LVector3 &vec3d) ==> Lens$_$extrude_vec(Lens const *param0, LPoint2 const *param1, LVector3 *param2)(Lens const *, LPoint2 const *, LVector3 *)
extern bool Lens$5$extrude_vec(Lens const *self, LPoint2 const *point2d, LVector3 *vec3d);

#if INDEX
#define Lens_C_extrude_vec_B_ppp Lens$5$extrude_vec
#endif

// C++ _inCAAAAJffD(LPoint3 const &point2d, LVector3 &vec3d) ==> Lens$_$extrude_vec(Lens const *param0, LPoint3 const *param1, LVector3 *param2)(Lens const *, LPoint3 const *, LVector3 *)
extern bool Lens$6$extrude_vec(Lens const *self, LPoint3 const *point2d, LVector3 *vec3d);
// COLLISION : Lens_C_extrude_vec_B_ppp Lens$6$extrude_vec

// C++ _inCAAAAhNpd(LPoint3 const &point3d, LPoint2 &point2d) ==> Lens$_$project(Lens const *param0, LPoint3 const *param1, LPoint2 *param2)(Lens const *, LPoint3 const *, LPoint2 *)
extern bool Lens$7$project(Lens const *self, LPoint3 const *point3d, LPoint2 *point2d);

#if INDEX
#define Lens_C_project_B_ppp Lens$7$project
#endif

// C++ _inCAAAAXpsd(LPoint3 const &point3d, LPoint3 &point2d) ==> Lens$_$project(Lens const *param0, LPoint3 const *param1, LPoint3 *param2)(Lens const *, LPoint3 const *, LPoint3 *)
extern bool Lens$8$project(Lens const *self, LPoint3 const *point3d, LPoint3 *point2d);
// COLLISION : Lens_C_project_B_ppp Lens$8$project

// C++ _inCAAAALuYi(std::string const &event) ==> Lens$_$set_change_event(Lens *param0, char const *param1)(Lens *, char const *)
extern void Lens$9$set_change_event(Lens *self, char const *event);

#if INDEX
#define Lens_C_set_change_event_v_ps Lens$9$set_change_event
#endif

// C++ _inCAAAAI_Ni() ==> Lens$_$get_change_event(Lens const *param0)(Lens const *)
extern char const * Lens$10$get_change_event(Lens const *self);

#if INDEX
#define Lens_C_get_change_event_s_p Lens$10$get_change_event
#endif

// C++ _inCAAAA0iUE(CoordinateSystem cs) ==> Lens$_$set_coordinate_system(Lens *param0, CoordinateSystem param1)(Lens *, CoordinateSystem)
extern void Lens$11$set_coordinate_system(Lens *self, CoordinateSystem cs);

#if INDEX
#define Lens_C_set_coordinate_system_v_pp Lens$11$set_coordinate_system
#endif

// C++ _inCAAAAsmpX() ==> Lens$_$get_coordinate_system(Lens const *param0)(Lens const *)
extern CoordinateSystem Lens$12$get_coordinate_system(Lens const *self);

#if INDEX
#define Lens_C_get_coordinate_system_p_p Lens$12$get_coordinate_system
#endif

// C++ _inCAAAAOuga() ==> Lens$_$clear(Lens *param0)(Lens *)
extern void Lens$13$clear(Lens *self);

#if INDEX
#define Lens_C_clear_v_p Lens$13$clear
#endif

// C++ _inCAAAAJjVd(LVecBase2 const &film_size) ==> Lens$_$set_film_size(Lens *param0, LVecBase2 const *param1)(Lens *, LVecBase2 const *)
extern void Lens$14$set_film_size(Lens *self, LVecBase2 const *film_size);

#if INDEX
#define Lens_C_set_film_size_v_pp Lens$14$set_film_size
#endif

// C++ _inCAAAAar31(PN_stdfloat width) ==> Lens$_$set_film_size(Lens *param0, PN_stdfloat param1)(Lens *, PN_stdfloat)
extern void Lens$15$set_film_size(Lens *self, PN_stdfloat width);

#if INDEX
#define Lens_C_set_film_size_v_pf Lens$15$set_film_size
#endif

// C++ _inCAAAAke0N(PN_stdfloat width, PN_stdfloat height) ==> Lens$_$set_film_size(Lens *param0, PN_stdfloat param1, PN_stdfloat param2)(Lens *, PN_stdfloat, PN_stdfloat)
extern void Lens$16$set_film_size(Lens *self, PN_stdfloat width, PN_stdfloat height);

#if INDEX
#define Lens_C_set_film_size_v_pff Lens$16$set_film_size
#endif

// C++ _inCAAAApaPJ() ==> Lens$_$get_film_size(Lens const *param0)(Lens const *)
extern LVecBase2 const * Lens$17$get_film_size(Lens const *self);

#if INDEX
#define Lens_C_get_film_size_p_p Lens$17$get_film_size
#endif

// C++ _inCAAAAznjM(LVecBase2 const &film_offset) ==> Lens$_$set_film_offset(Lens *param0, LVecBase2 const *param1)(Lens *, LVecBase2 const *)
extern void Lens$18$set_film_offset(Lens *self, LVecBase2 const *film_offset);

#if INDEX
#define Lens_C_set_film_offset_v_pp Lens$18$set_film_offset
#endif

// C++ _inCAAAAA7dQ(PN_stdfloat x, PN_stdfloat y) ==> Lens$_$set_film_offset(Lens *param0, PN_stdfloat param1, PN_stdfloat param2)(Lens *, PN_stdfloat, PN_stdfloat)
extern void Lens$19$set_film_offset(Lens *self, PN_stdfloat x, PN_stdfloat y);

#if INDEX
#define Lens_C_set_film_offset_v_pff Lens$19$set_film_offset
#endif

// C++ _inCAAAAY8t_() ==> Lens$_$get_film_offset(Lens const *param0)(Lens const *)
extern LVector2 const * Lens$20$get_film_offset(Lens const *self);

#if INDEX
#define Lens_C_get_film_offset_p_p Lens$20$get_film_offset
#endif

// C++ _inCAAAAKJcD(PN_stdfloat focal_length) ==> Lens$_$set_focal_length(Lens *param0, PN_stdfloat param1)(Lens *, PN_stdfloat)
extern void Lens$21$set_focal_length(Lens *self, PN_stdfloat focal_length);

#if INDEX
#define Lens_C_set_focal_length_v_pf Lens$21$set_focal_length
#endif

// C++ _inCAAAAaQhl() ==> Lens$_$get_focal_length(Lens const *param0)(Lens const *)
extern PN_stdfloat Lens$22$get_focal_length(Lens const *self);

#if INDEX
#define Lens_C_get_focal_length_f_p Lens$22$get_focal_length
#endif

// C++ _inCAAAANfwm(PN_stdfloat min_fov) ==> Lens$_$set_min_fov(Lens *param0, PN_stdfloat param1)(Lens *, PN_stdfloat)
extern void Lens$23$set_min_fov(Lens *self, PN_stdfloat min_fov);

#if INDEX
#define Lens_C_set_min_fov_v_pf Lens$23$set_min_fov
#endif

// C++ _inCAAAAwW8x(LVecBase2 const &fov) ==> Lens$_$set_fov(Lens *param0, LVecBase2 const *param1)(Lens *, LVecBase2 const *)
extern void Lens$24$set_fov(Lens *self, LVecBase2 const *fov);

#if INDEX
#define Lens_C_set_fov_v_pp Lens$24$set_fov
#endif

// C++ _inCAAAAn5Vz(PN_stdfloat fov) ==> Lens$_$set_fov(Lens *param0, PN_stdfloat param1)(Lens *, PN_stdfloat)
extern void Lens$25$set_fov(Lens *self, PN_stdfloat fov);

#if INDEX
#define Lens_C_set_fov_v_pf Lens$25$set_fov
#endif

// C++ _inCAAAAFDor(PN_stdfloat hfov, PN_stdfloat vfov) ==> Lens$_$set_fov(Lens *param0, PN_stdfloat param1, PN_stdfloat param2)(Lens *, PN_stdfloat, PN_stdfloat)
extern void Lens$26$set_fov(Lens *self, PN_stdfloat hfov, PN_stdfloat vfov);

#if INDEX
#define Lens_C_set_fov_v_pff Lens$26$set_fov
#endif

// C++ _inCAAAAGTNq() ==> Lens$_$get_fov(Lens const *param0)(Lens const *)
extern LVecBase2 const * Lens$27$get_fov(Lens const *self);

#if INDEX
#define Lens_C_get_fov_p_p Lens$27$get_fov
#endif

// C++ _inCAAAAFGjN() ==> Lens$_$get_hfov(Lens const *param0)(Lens const *)
extern PN_stdfloat Lens$28$get_hfov(Lens const *self);

#if INDEX
#define Lens_C_get_hfov_f_p Lens$28$get_hfov
#endif

// C++ _inCAAAA9tnO() ==> Lens$_$get_vfov(Lens const *param0)(Lens const *)
extern PN_stdfloat Lens$29$get_vfov(Lens const *self);

#if INDEX
#define Lens_C_get_vfov_f_p Lens$29$get_vfov
#endif

// C++ _inCAAAAuTcw() ==> Lens$_$get_min_fov(Lens const *param0)(Lens const *)
extern PN_stdfloat Lens$30$get_min_fov(Lens const *self);

#if INDEX
#define Lens_C_get_min_fov_f_p Lens$30$get_min_fov
#endif

// C++ _inCAAAAcR5a(PN_stdfloat aspect_ratio) ==> Lens$_$set_aspect_ratio(Lens *param0, PN_stdfloat param1)(Lens *, PN_stdfloat)
extern void Lens$31$set_aspect_ratio(Lens *self, PN_stdfloat aspect_ratio);

#if INDEX
#define Lens_C_set_aspect_ratio_v_pf Lens$31$set_aspect_ratio
#endif

// C++ _inCAAAAjb98() ==> Lens$_$get_aspect_ratio(Lens const *param0)(Lens const *)
extern PN_stdfloat Lens$32$get_aspect_ratio(Lens const *self);

#if INDEX
#define Lens_C_get_aspect_ratio_f_p Lens$32$get_aspect_ratio
#endif

// C++ _inCAAAAUjqV(PN_stdfloat near_distance) ==> Lens$_$set_near(Lens *param0, PN_stdfloat param1)(Lens *, PN_stdfloat)
extern void Lens$33$set_near(Lens *self, PN_stdfloat near_distance);

#if INDEX
#define Lens_C_set_near_v_pf Lens$33$set_near
#endif

// C++ _inCAAAAvVA4() ==> Lens$_$get_near(Lens const *param0)(Lens const *)
extern PN_stdfloat Lens$34$get_near(Lens const *self);

#if INDEX
#define Lens_C_get_near_f_p Lens$34$get_near
#endif

// C++ _inCAAAAqluY(PN_stdfloat far_distance) ==> Lens$_$set_far(Lens *param0, PN_stdfloat param1)(Lens *, PN_stdfloat)
extern void Lens$35$set_far(Lens *self, PN_stdfloat far_distance);

#if INDEX
#define Lens_C_set_far_v_pf Lens$35$set_far
#endif

// C++ _inCAAAA9WmP() ==> Lens$_$get_far(Lens const *param0)(Lens const *)
extern PN_stdfloat Lens$36$get_far(Lens const *self);

#if INDEX
#define Lens_C_get_far_f_p Lens$36$get_far
#endif

// C++ _inCAAAAHoCf(PN_stdfloat near_distance, PN_stdfloat far_distance) ==> Lens$_$set_near_far(Lens *param0, PN_stdfloat param1, PN_stdfloat param2)(Lens *, PN_stdfloat, PN_stdfloat)
extern void Lens$37$set_near_far(Lens *self, PN_stdfloat near_distance, PN_stdfloat far_distance);

#if INDEX
#define Lens_C_set_near_far_v_pff Lens$37$set_near_far
#endif

// C++ _inCAAAAyde1() ==> Lens$_$get_default_near()()
extern PN_stdfloat Lens$38$get_default_near(void);

#if INDEX
#define Lens_C_get_default_near_f_v Lens$38$get_default_near
#endif

// C++ _inCAAAAChjq() ==> Lens$_$get_default_far()()
extern PN_stdfloat Lens$39$get_default_far(void);

#if INDEX
#define Lens_C_get_default_far_f_v Lens$39$get_default_far
#endif

// C++ _inCAAAAG8U6(LVecBase3 const &view_hpr) ==> Lens$_$set_view_hpr(Lens *param0, LVecBase3 const *param1)(Lens *, LVecBase3 const *)
extern void Lens$40$set_view_hpr(Lens *self, LVecBase3 const *view_hpr);

#if INDEX
#define Lens_C_set_view_hpr_v_pp Lens$40$set_view_hpr
#endif

// C++ _inCAAAASEvf(PN_stdfloat h, PN_stdfloat p, PN_stdfloat r) ==> Lens$_$set_view_hpr(Lens *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3)(Lens *, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void Lens$41$set_view_hpr(Lens *self, PN_stdfloat h, PN_stdfloat p, PN_stdfloat r);

#if INDEX
#define Lens_C_set_view_hpr_v_pfff Lens$41$set_view_hpr
#endif

// C++ _inCAAAAzOnI() ==> Lens$_$get_view_hpr(Lens const *param0)(Lens const *)
extern LVecBase3 const * Lens$42$get_view_hpr(Lens const *self);

#if INDEX
#define Lens_C_get_view_hpr_p_p Lens$42$get_view_hpr
#endif

// C++ _inCAAAAxUJc(LVector3 const &view_vector, LVector3 const &up_vector) ==> Lens$_$set_view_vector(Lens *param0, LVector3 const *param1, LVector3 const *param2)(Lens *, LVector3 const *, LVector3 const *)
extern void Lens$43$set_view_vector(Lens *self, LVector3 const *view_vector, LVector3 const *up_vector);

#if INDEX
#define Lens_C_set_view_vector_v_ppp Lens$43$set_view_vector
#endif

// C++ _inCAAAAYeim(PN_stdfloat x, PN_stdfloat y, PN_stdfloat z, PN_stdfloat i, PN_stdfloat j, PN_stdfloat k) ==> Lens$_$set_view_vector(Lens *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5, PN_stdfloat param6)(Lens *, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void Lens$44$set_view_vector(Lens *self, PN_stdfloat x, PN_stdfloat y, PN_stdfloat z, PN_stdfloat i, PN_stdfloat j, PN_stdfloat k);

#if INDEX
#define Lens_C_set_view_vector_v_pffffff Lens$44$set_view_vector
#endif

// C++ _inCAAAAyzLu() ==> Lens$_$get_view_vector(Lens const *param0)(Lens const *)
extern LVector3 const * Lens$45$get_view_vector(Lens const *self);

#if INDEX
#define Lens_C_get_view_vector_p_p Lens$45$get_view_vector
#endif

// C++ _inCAAAAryc7() ==> Lens$_$get_up_vector(Lens const *param0)(Lens const *)
extern LVector3 const * Lens$46$get_up_vector(Lens const *self);

#if INDEX
#define Lens_C_get_up_vector_p_p Lens$46$get_up_vector
#endif

// C++ _inCAAAADlmp() ==> Lens$_$get_nodal_point(Lens const *param0)(Lens const *)
extern LPoint3 * Lens$47$get_nodal_point(Lens const *self);

#if INDEX
#define Lens_C_get_nodal_point_p_p Lens$47$get_nodal_point
#endif

// C++ _inCAAAAzfrM(PN_stdfloat interocular_distance) ==> Lens$_$set_interocular_distance(Lens *param0, PN_stdfloat param1)(Lens *, PN_stdfloat)
extern void Lens$48$set_interocular_distance(Lens *self, PN_stdfloat interocular_distance);

#if INDEX
#define Lens_C_set_interocular_distance_v_pf Lens$48$set_interocular_distance
#endif

// C++ _inCAAAACou8() ==> Lens$_$get_interocular_distance(Lens const *param0)(Lens const *)
extern PN_stdfloat Lens$49$get_interocular_distance(Lens const *self);

#if INDEX
#define Lens_C_get_interocular_distance_f_p Lens$49$get_interocular_distance
#endif

// C++ _inCAAAAV7_f(PN_stdfloat convergence_distance) ==> Lens$_$set_convergence_distance(Lens *param0, PN_stdfloat param1)(Lens *, PN_stdfloat)
extern void Lens$50$set_convergence_distance(Lens *self, PN_stdfloat convergence_distance);

#if INDEX
#define Lens_C_set_convergence_distance_v_pf Lens$50$set_convergence_distance
#endif

// C++ _inCAAAAjWCQ() ==> Lens$_$get_convergence_distance(Lens const *param0)(Lens const *)
extern PN_stdfloat Lens$51$get_convergence_distance(Lens const *self);

#if INDEX
#define Lens_C_get_convergence_distance_f_p Lens$51$get_convergence_distance
#endif

// C++ _inCAAAAd6hB(LMatrix4 const &view_mat) ==> Lens$_$set_view_mat(Lens *param0, LMatrix4 const *param1)(Lens *, LMatrix4 const *)
extern void Lens$52$set_view_mat(Lens *self, LMatrix4 const *view_mat);

#if INDEX
#define Lens_C_set_view_mat_v_pp Lens$52$set_view_mat
#endif

// C++ _inCAAAAM_m4() ==> Lens$_$get_view_mat(Lens const *param0)(Lens const *)
extern LMatrix4 const * Lens$53$get_view_mat(Lens const *self);

#if INDEX
#define Lens_C_get_view_mat_p_p Lens$53$get_view_mat
#endif

// C++ _inCAAAAkqkp() ==> Lens$_$clear_view_mat(Lens *param0)(Lens *)
extern void Lens$54$clear_view_mat(Lens *self);

#if INDEX
#define Lens_C_clear_view_mat_v_p Lens$54$clear_view_mat
#endif

// C++ _inCAAAAFbmD(LVecBase2 const &keystone) ==> Lens$_$set_keystone(Lens *param0, LVecBase2 const *param1)(Lens *, LVecBase2 const *)
extern void Lens$55$set_keystone(Lens *self, LVecBase2 const *keystone);

#if INDEX
#define Lens_C_set_keystone_v_pp Lens$55$set_keystone
#endif

// C++ _inCAAAAvPzC() ==> Lens$_$get_keystone(Lens const *param0)(Lens const *)
extern LVecBase2 const * Lens$56$get_keystone(Lens const *self);

#if INDEX
#define Lens_C_get_keystone_p_p Lens$56$get_keystone
#endif

// C++ _inCAAAAp1qZ() ==> Lens$_$clear_keystone(Lens *param0)(Lens *)
extern void Lens$57$clear_keystone(Lens *self);

#if INDEX
#define Lens_C_clear_keystone_v_p Lens$57$clear_keystone
#endif

// C++ _inCAAAAYIXx(LMatrix4 const &custom_film_mat) ==> Lens$_$set_custom_film_mat(Lens *param0, LMatrix4 const *param1)(Lens *, LMatrix4 const *)
extern void Lens$58$set_custom_film_mat(Lens *self, LMatrix4 const *custom_film_mat);

#if INDEX
#define Lens_C_set_custom_film_mat_v_pp Lens$58$set_custom_film_mat
#endif

// C++ _inCAAAAZBGv() ==> Lens$_$get_custom_film_mat(Lens const *param0)(Lens const *)
extern LMatrix4 const * Lens$59$get_custom_film_mat(Lens const *self);

#if INDEX
#define Lens_C_get_custom_film_mat_p_p Lens$59$get_custom_film_mat
#endif

// C++ _inCAAAABwR4() ==> Lens$_$clear_custom_film_mat(Lens *param0)(Lens *)
extern void Lens$60$clear_custom_film_mat(Lens *self);

#if INDEX
#define Lens_C_clear_custom_film_mat_v_p Lens$60$clear_custom_film_mat
#endif

// C++ _inCAAAAikJq(LVecBase3 const &ul, LVecBase3 const &ur, LVecBase3 const &ll, LVecBase3 const &lr, int flags) ==> Lens$_$set_frustum_from_corners(Lens *param0, LVecBase3 const *param1, LVecBase3 const *param2, LVecBase3 const *param3, LVecBase3 const *param4, int param5)(Lens *, LVecBase3 const *, LVecBase3 const *, LVecBase3 const *, LVecBase3 const *, int)
extern void Lens$61$set_frustum_from_corners(Lens *self, LVecBase3 const *ul, LVecBase3 const *ur, LVecBase3 const *ll, LVecBase3 const *lr, int flags);

#if INDEX
#define Lens_C_set_frustum_from_corners_v_pppppi Lens$61$set_frustum_from_corners
#endif

// C++ _inCAAAASJre() ==> Lens$_$recompute_all(Lens *param0)(Lens *)
extern void Lens$62$recompute_all(Lens *self);

#if INDEX
#define Lens_C_recompute_all_v_p Lens$62$recompute_all
#endif

// C++ _inCAAAA6Z__() ==> Lens$_$is_linear(Lens const *param0)(Lens const *)
extern bool Lens$63$is_linear(Lens const *self);

#if INDEX
#define Lens_C_is_linear_B_p Lens$63$is_linear
#endif

// C++ _inCAAAABoQp() ==> Lens$_$is_perspective(Lens const *param0)(Lens const *)
extern bool Lens$64$is_perspective(Lens const *self);

#if INDEX
#define Lens_C_is_perspective_B_p Lens$64$is_perspective
#endif

// C++ _inCAAAAlQp5() ==> Lens$_$is_orthographic(Lens const *param0)(Lens const *)
extern bool Lens$65$is_orthographic(Lens const *self);

#if INDEX
#define Lens_C_is_orthographic_B_p Lens$65$is_orthographic
#endif

// C++ _inCAAAAJeEy() ==> Lens$_$make_geometry(Lens *param0)(Lens *)
extern char ** Lens$66$make_geometry(Lens *self);

#if INDEX
#define Lens_C_make_geometry_p_p Lens$66$make_geometry
#endif

// C++ _inCAAAAb5g0() ==> Lens$_$make_bounds(Lens const *param0)(Lens const *)
extern char ** Lens$67$make_bounds(Lens const *self);

#if INDEX
#define Lens_C_make_bounds_p_p Lens$67$make_bounds
#endif

// C++ _inCAAAAAAmb(Lens::StereoChannel channel) ==> Lens$_$get_projection_mat(Lens const *param0, Lens::StereoChannel param1)(Lens const *, Lens::StereoChannel)
extern LMatrix4 const * Lens$68$get_projection_mat(Lens const *self, Lens$_StereoChannel channel);

#if INDEX
#define Lens_C_get_projection_mat_p_pp Lens$68$get_projection_mat
#endif

// C++ _inCAAAArmTG() ==> Lens$_$get_projection_mat(Lens const *param0)(Lens const *)
extern LMatrix4 const * Lens$69$get_projection_mat(Lens const *self);

#if INDEX
#define Lens_C_get_projection_mat_p_p Lens$69$get_projection_mat
#endif

// C++ _inCAAAAK_5F(Lens::StereoChannel channel) ==> Lens$_$get_projection_mat_inv(Lens const *param0, Lens::StereoChannel param1)(Lens const *, Lens::StereoChannel)
extern LMatrix4 const * Lens$70$get_projection_mat_inv(Lens const *self, Lens$_StereoChannel channel);

#if INDEX
#define Lens_C_get_projection_mat_inv_p_pp Lens$70$get_projection_mat_inv
#endif

// C++ _inCAAAAmcoU() ==> Lens$_$get_projection_mat_inv(Lens const *param0)(Lens const *)
extern LMatrix4 const * Lens$71$get_projection_mat_inv(Lens const *self);

#if INDEX
#define Lens_C_get_projection_mat_inv_p_p Lens$71$get_projection_mat_inv
#endif

// C++ _inCAAAAOjJ3() ==> Lens$_$get_film_mat(Lens const *param0)(Lens const *)
extern LMatrix4 const * Lens$72$get_film_mat(Lens const *self);

#if INDEX
#define Lens_C_get_film_mat_p_p Lens$72$get_film_mat
#endif

// C++ _inCAAAAHzXh() ==> Lens$_$get_film_mat_inv(Lens const *param0)(Lens const *)
extern LMatrix4 const * Lens$73$get_film_mat_inv(Lens const *self);

#if INDEX
#define Lens_C_get_film_mat_inv_p_p Lens$73$get_film_mat_inv
#endif

// C++ _inCAAAAFMDf() ==> Lens$_$get_lens_mat(Lens const *param0)(Lens const *)
extern LMatrix4 const * Lens$74$get_lens_mat(Lens const *self);

#if INDEX
#define Lens_C_get_lens_mat_p_p Lens$74$get_lens_mat
#endif

// C++ _inCAAAAAERJ() ==> Lens$_$get_lens_mat_inv(Lens const *param0)(Lens const *)
extern LMatrix4 const * Lens$75$get_lens_mat_inv(Lens const *self);

#if INDEX
#define Lens_C_get_lens_mat_inv_p_p Lens$75$get_lens_mat_inv
#endif

// C++ _inCAAAA9t29(std::ostream &out) ==> Lens$_$output(Lens const *param0, std::ostream *param1)(Lens const *, std::ostream *)
extern void Lens$76$output(Lens const *self, std$_ostream *out);

#if INDEX
#define Lens_C_output_v_pp Lens$76$output
#endif

// C++ _inCAAAAnKlR(std::ostream &out, int indent_level) ==> Lens$_$write(Lens const *param0, std::ostream *param1, int param2)(Lens const *, std::ostream *, int)
extern void Lens$77$write(Lens const *self, std$_ostream *out, int indent_level);

#if INDEX
#define Lens_C_write_v_ppi Lens$77$write
#endif

// C++ _inCAAAAHB_a(std::ostream &out) ==> Lens$_$write(Lens const *param0, std::ostream *param1)(Lens const *, std::ostream *)
extern void Lens$78$write(Lens const *self, std$_ostream *out);

#if INDEX
#define Lens_C_write_v_pp Lens$78$write
#endif

// C++ _inCAAAAgaL6() ==> Lens$_$get_last_change(Lens const *param0)(Lens const *)
extern UpdateSeq * Lens$79$get_last_change(Lens const *self);

#if INDEX
#define Lens_C_get_last_change_p_p Lens$79$get_last_change
#endif

// C++ _inCAAAAAaAg(BamWriter *manager, Datagram &dg) ==> Lens$_$write_datagram(Lens *param0, BamWriter *param1, Datagram *param2)(Lens *, BamWriter *, Datagram *)
extern void Lens$80$write_datagram(Lens *self, BamWriter *manager, Datagram *dg);

#if INDEX
#define Lens_C_write_datagram_v_ppp Lens$80$write_datagram
#endif

// C++ _inCAAAAvAbP() ==> Lens$_$get_type(Lens const *param0)(Lens const *)
extern int Lens$81$get_type(Lens const *self);

#if INDEX
#define Lens_C_get_type_i_p Lens$81$get_type
#endif

// C++ _inCAAAAYIEi() ==> Lens$_$force_init_type(Lens *param0)(Lens *)
extern int Lens$82$force_init_type(Lens *self);

#if INDEX
#define Lens_C_force_init_type_i_p Lens$82$force_init_type
#endif

// C++ _inCAAAAX6_e() ==> Lens$_$get_class_type()()
extern int Lens$83$get_class_type(void);

#if INDEX
#define Lens_C_get_class_type_i_v Lens$83$get_class_type
#endif

// C++ _inCAAAAgngG() ==> Lens$_$init_type()()
extern void Lens$84$init_type(void);

#if INDEX
#define Lens_C_init_type_v_v Lens$84$init_type
#endif


// LensNode

// C++ _inCAAAAPTYI(std::string const &name, Lens *lens) ==> LensNode$_$LensNode(char const *param0, Lens *param1)(char const *, Lens *)
extern LensNode * LensNode$1$LensNode(char const *name, Lens *lens);

#if INDEX
#define LensNode_C_ctor_p_sp LensNode$1$LensNode
#endif

// C++ _inCAAAAkd9d(std::string const &name) ==> LensNode$_$LensNode(char const *param0)(char const *)
extern LensNode * LensNode$2$LensNode(char const *name);

#if INDEX
#define LensNode_C_ctor_p_s LensNode$2$LensNode
#endif

// C++ _inCAAAASrXL(LMatrix4 const &mat) ==> LensNode$_$xform(LensNode *param0, LMatrix4 const *param1)(LensNode *, LMatrix4 const *)
extern void LensNode$3$xform(LensNode *self, LMatrix4 const *mat);

#if INDEX
#define LensNode_C_xform_v_pp LensNode$3$xform
#endif

// C++ _inCAAAA1vNW(Lens const &lens) ==> LensNode$_$copy_lens(LensNode *param0, Lens const *param1)(LensNode *, Lens const *)
extern void LensNode$4$copy_lens(LensNode *self, Lens const *lens);

#if INDEX
#define LensNode_C_copy_lens_v_pp LensNode$4$copy_lens
#endif

// C++ _inCAAAAm46f(int index, Lens const &lens) ==> LensNode$_$copy_lens(LensNode *param0, int param1, Lens const *param2)(LensNode *, int, Lens const *)
extern void LensNode$5$copy_lens(LensNode *self, int index, Lens const *lens);

#if INDEX
#define LensNode_C_copy_lens_v_pip LensNode$5$copy_lens
#endif

// C++ _inCAAAA_2fA(Lens *lens) ==> LensNode$_$set_lens(LensNode *param0, Lens *param1)(LensNode *, Lens *)
extern void LensNode$6$set_lens(LensNode *self, Lens *lens);

#if INDEX
#define LensNode_C_set_lens_v_pp LensNode$6$set_lens
#endif

// C++ _inCAAAAxtno(int index, Lens *lens) ==> LensNode$_$set_lens(LensNode *param0, int param1, Lens *param2)(LensNode *, int, Lens *)
extern void LensNode$7$set_lens(LensNode *self, int index, Lens *lens);

#if INDEX
#define LensNode_C_set_lens_v_pip LensNode$7$set_lens
#endif

// C++ _inCAAAA9zXB(int index) ==> LensNode$_$get_lens(LensNode const *param0, int param1)(LensNode const *, int)
extern Lens * LensNode$8$get_lens(LensNode const *self, int index);

#if INDEX
#define LensNode_C_get_lens_p_pi LensNode$8$get_lens
#endif

// C++ _inCAAAAd5Ow() ==> LensNode$_$get_lens(LensNode const *param0)(LensNode const *)
extern Lens * LensNode$9$get_lens(LensNode const *self);

#if INDEX
#define LensNode_C_get_lens_p_p LensNode$9$get_lens
#endif

// C++ _inCAAAAPGgB(int index, bool active) ==> LensNode$_$set_lens_active(LensNode *param0, int param1, bool param2)(LensNode *, int, bool)
extern bool LensNode$10$set_lens_active(LensNode *self, int index, bool active);

#if INDEX
#define LensNode_C_set_lens_active_B_piB LensNode$10$set_lens_active
#endif

// C++ _inCAAAALTIn(int index) ==> LensNode$_$get_lens_active(LensNode const *param0, int param1)(LensNode const *, int)
extern bool LensNode$11$get_lens_active(LensNode const *self, int index);

#if INDEX
#define LensNode_C_get_lens_active_B_pi LensNode$11$get_lens_active
#endif

// C++ _inCAAAA1JkY(int index) ==> LensNode$_$activate_lens(LensNode *param0, int param1)(LensNode *, int)
extern bool LensNode$12$activate_lens(LensNode *self, int index);

#if INDEX
#define LensNode_C_activate_lens_B_pi LensNode$12$activate_lens
#endif

// C++ _inCAAAASl8u(int index) ==> LensNode$_$deactivate_lens(LensNode *param0, int param1)(LensNode *, int)
extern bool LensNode$13$deactivate_lens(LensNode *self, int index);

#if INDEX
#define LensNode_C_deactivate_lens_B_pi LensNode$13$deactivate_lens
#endif

// C++ _inCAAAAQ0RN(LPoint3 const &pos) ==> LensNode$_$is_in_view(LensNode *param0, LPoint3 const *param1)(LensNode *, LPoint3 const *)
extern bool LensNode$14$is_in_view(LensNode *self, LPoint3 const *pos);

#if INDEX
#define LensNode_C_is_in_view_B_pp LensNode$14$is_in_view
#endif

// C++ _inCAAAAJyFt(int index, LPoint3 const &pos) ==> LensNode$_$is_in_view(LensNode *param0, int param1, LPoint3 const *param2)(LensNode *, int, LPoint3 const *)
extern bool LensNode$15$is_in_view(LensNode *self, int index, LPoint3 const *pos);

#if INDEX
#define LensNode_C_is_in_view_B_pip LensNode$15$is_in_view
#endif

// C++ _inCAAAACdMV() ==> LensNode$_$show_frustum(LensNode *param0)(LensNode *)
extern void LensNode$16$show_frustum(LensNode *self);

#if INDEX
#define LensNode_C_show_frustum_v_p LensNode$16$show_frustum
#endif

// C++ _inCAAAAZDm8() ==> LensNode$_$hide_frustum(LensNode *param0)(LensNode *)
extern void LensNode$17$hide_frustum(LensNode *self);

#if INDEX
#define LensNode_C_hide_frustum_v_p LensNode$17$hide_frustum
#endif

// C++ _inCAAAAXAL8() ==> LensNode$_$register_with_read_factory()()
extern void LensNode$18$register_with_read_factory(void);

#if INDEX
#define LensNode_C_register_with_read_factory_v_v LensNode$18$register_with_read_factory
#endif

// C++ _inCAAAADaAj(BamWriter *manager, Datagram &dg) ==> LensNode$_$write_datagram(LensNode *param0, BamWriter *param1, Datagram *param2)(LensNode *, BamWriter *, Datagram *)
extern void LensNode$19$write_datagram(LensNode *self, BamWriter *manager, Datagram *dg);

#if INDEX
#define LensNode_C_write_datagram_v_ppp LensNode$19$write_datagram
#endif

// C++ _inCAAAAF6_K() ==> LensNode$_$get_class_type()()
extern int LensNode$20$get_class_type(void);

#if INDEX
#define LensNode_C_get_class_type_i_v LensNode$20$get_class_type
#endif

// C++ _inCAAAAGCfp() ==> LensNode$_$init_type()()
extern void LensNode$21$init_type(void);

#if INDEX
#define LensNode_C_init_type_v_v LensNode$21$init_type
#endif

// C++ _inCAAAAtjBy() ==> LensNode$_$get_type(LensNode const *param0)(LensNode const *)
extern int LensNode$22$get_type(LensNode const *self);

#if INDEX
#define LensNode_C_get_type_i_p LensNode$22$get_type
#endif

// C++ _inCAAAAfaNn() ==> LensNode$_$force_init_type(LensNode *param0)(LensNode *)
extern int LensNode$23$force_init_type(LensNode *self);

#if INDEX
#define LensNode_C_force_init_type_i_p LensNode$23$force_init_type
#endif


// LinkedListNode

// C++ _inCAAAAKjNt() ==> LinkedListNode$_$downcast_to_PandaNode(LinkedListNode *param0)(LinkedListNode *)
extern PandaNode * LinkedListNode$1$downcast_to_PandaNode(LinkedListNode *self);

#if INDEX
#define LinkedListNode_C_downcast_to_PandaNode_p_p LinkedListNode$1$downcast_to_PandaNode
#endif


// Loader

// C++ _inCAAAAFJ3o() ==> Loader$_$upcast_to_TypedReferenceCount(Loader *param0)(Loader *)
extern TypedReferenceCount * Loader$1$upcast_to_TypedReferenceCount(Loader *self);

#if INDEX
#define Loader_C_upcast_to_TypedReferenceCount_p_p Loader$1$upcast_to_TypedReferenceCount
#endif

// C++ _inCAAAAEQJP() ==> Loader$_$upcast_to_Namable(Loader *param0)(Loader *)
extern Namable * Loader$2$upcast_to_Namable(Loader *self);

#if INDEX
#define Loader_C_upcast_to_Namable_p_p Loader$2$upcast_to_Namable
#endif

// C++ _inCAAAAmM_G(Loader const &) ==> Loader$_$Loader(Loader const *param0)(Loader const *)
extern Loader * Loader$3$Loader(Loader const *arg0);

#if INDEX
#define Loader_C_ctor_p_p Loader$3$Loader
#endif

// C++ _inCAAAAJSqR(std::string const &name) ==> Loader$_$Loader(char const *param0)(char const *)
extern Loader * Loader$4$Loader(char const *name);

#if INDEX
#define Loader_C_ctor_p_s Loader$4$Loader
#endif

// C++ _inCAAAAq8fi() ==> Loader$_$Loader()()
extern Loader * Loader$5$Loader(void);

#if INDEX
#define Loader_C_ctor_p_v Loader$5$Loader
#endif

// C++ _inCAAAAmL1N(AsyncTaskManager *task_manager) ==> Loader$_$set_task_manager(Loader *param0, AsyncTaskManager *param1)(Loader *, AsyncTaskManager *)
extern void Loader$6$set_task_manager(Loader *self, AsyncTaskManager *task_manager);

#if INDEX
#define Loader_C_set_task_manager_v_pp Loader$6$set_task_manager
#endif

// C++ _inCAAAAf__I() ==> Loader$_$get_task_manager(Loader const *param0)(Loader const *)
extern AsyncTaskManager * Loader$7$get_task_manager(Loader const *self);

#if INDEX
#define Loader_C_get_task_manager_p_p Loader$7$get_task_manager
#endif

// C++ _inCAAAAmcVR(std::string const &task_chain) ==> Loader$_$set_task_chain(Loader *param0, char const *param1)(Loader *, char const *)
extern void Loader$8$set_task_chain(Loader *self, char const *task_chain);

#if INDEX
#define Loader_C_set_task_chain_v_ps Loader$8$set_task_chain
#endif

// C++ _inCAAAAHjyK() ==> Loader$_$get_task_chain(Loader const *param0)(Loader const *)
extern char const * Loader$9$get_task_chain(Loader const *self);

#if INDEX
#define Loader_C_get_task_chain_s_p Loader$9$get_task_chain
#endif

// C++ _inCAAAAbFzS() ==> Loader$_$stop_threads(Loader *param0)(Loader *)
extern void Loader$10$stop_threads(Loader *self);

#if INDEX
#define Loader_C_stop_threads_v_p Loader$10$stop_threads
#endif

// C++ _inCAAAAehh9(AsyncTask *task) ==> Loader$_$remove(Loader *param0, AsyncTask *param1)(Loader *, AsyncTask *)
extern bool Loader$11$remove(Loader *self, AsyncTask *task);

#if INDEX
#define Loader_C_remove_B_pp Loader$11$remove
#endif

// C++ _inCAAAAPkHz(Filename const &filename, LoaderOptions const &options) ==> Loader$_$load_sync(Loader const *param0, Filename const *param1, LoaderOptions const *param2)(Loader const *, Filename const *, LoaderOptions const *)
extern char ** Loader$12$load_sync(Loader const *self, Filename const *filename, LoaderOptions const *options);

#if INDEX
#define Loader_C_load_sync_p_ppp Loader$12$load_sync
#endif

// C++ _inCAAAAz7yV(Filename const &filename) ==> Loader$_$load_sync(Loader const *param0, Filename const *param1)(Loader const *, Filename const *)
extern char ** Loader$13$load_sync(Loader const *self, Filename const *filename);

#if INDEX
#define Loader_C_load_sync_p_pp Loader$13$load_sync
#endif

// C++ _inCAAAArRYJ(Filename const &filename, LoaderOptions const &options) ==> Loader$_$make_async_request(Loader *param0, Filename const *param1, LoaderOptions const *param2)(Loader *, Filename const *, LoaderOptions const *)
extern char ** Loader$14$make_async_request(Loader *self, Filename const *filename, LoaderOptions const *options);

#if INDEX
#define Loader_C_make_async_request_p_ppp Loader$14$make_async_request
#endif

// C++ _inCAAAACUjc(Filename const &filename) ==> Loader$_$make_async_request(Loader *param0, Filename const *param1)(Loader *, Filename const *)
extern char ** Loader$15$make_async_request(Loader *self, Filename const *filename);

#if INDEX
#define Loader_C_make_async_request_p_pp Loader$15$make_async_request
#endif

// C++ _inCAAAAiGlw(AsyncTask *request) ==> Loader$_$load_async(Loader *param0, AsyncTask *param1)(Loader *, AsyncTask *)
extern void Loader$16$load_async(Loader *self, AsyncTask *request);

#if INDEX
#define Loader_C_load_async_v_pp Loader$16$load_async
#endif

// C++ _inCAAAAeSFK(Filename const &filename, LoaderOptions const &options, PandaNode *node) ==> Loader$_$save_sync(Loader const *param0, Filename const *param1, LoaderOptions const *param2, PandaNode *param3)(Loader const *, Filename const *, LoaderOptions const *, PandaNode *)
extern bool Loader$17$save_sync(Loader const *self, Filename const *filename, LoaderOptions const *options, PandaNode *node);

#if INDEX
#define Loader_C_save_sync_B_pppp Loader$17$save_sync
#endif

// C++ _inCAAAA7ykw(Filename const &filename, LoaderOptions const &options, PandaNode *node) ==> Loader$_$make_async_save_request(Loader *param0, Filename const *param1, LoaderOptions const *param2, PandaNode *param3)(Loader *, Filename const *, LoaderOptions const *, PandaNode *)
extern char ** Loader$18$make_async_save_request(Loader *self, Filename const *filename, LoaderOptions const *options, PandaNode *node);

#if INDEX
#define Loader_C_make_async_save_request_p_pppp Loader$18$make_async_save_request
#endif

// C++ _inCAAAADh1Q(AsyncTask *request) ==> Loader$_$save_async(Loader *param0, AsyncTask *param1)(Loader *, AsyncTask *)
extern void Loader$19$save_async(Loader *self, AsyncTask *request);

#if INDEX
#define Loader_C_save_async_v_pp Loader$19$save_async
#endif

// C++ _inCAAAA17N9(std::istream &in) ==> Loader$_$load_bam_stream(Loader *param0, std::istream *param1)(Loader *, std::istream *)
extern char ** Loader$20$load_bam_stream(Loader *self, std$_istream *in);

#if INDEX
#define Loader_C_load_bam_stream_p_pp Loader$20$load_bam_stream
#endif

// C++ _inCAAAATK1z(std::ostream &out) ==> Loader$_$output(Loader const *param0, std::ostream *param1)(Loader const *, std::ostream *)
extern void Loader$21$output(Loader const *self, std$_ostream *out);

#if INDEX
#define Loader_C_output_v_pp Loader$21$output
#endif

// C++ _inCAAAA4Ib_() ==> Loader$_$get_global_ptr()()
extern Loader * Loader$22$get_global_ptr(void);

#if INDEX
#define Loader_C_get_global_ptr_p_v Loader$22$get_global_ptr
#endif

// C++ _inCAAAA9reE() ==> Loader$_$get_class_type()()
extern int Loader$23$get_class_type(void);

#if INDEX
#define Loader_C_get_class_type_i_v Loader$23$get_class_type
#endif

// C++ _inCAAAA6DRH() ==> Loader$_$init_type()()
extern void Loader$24$init_type(void);

#if INDEX
#define Loader_C_init_type_v_v Loader$24$init_type
#endif

// C++ _inCAAAA7HB8() ==> Loader$_$get_type(Loader const *param0)(Loader const *)
extern int Loader$25$get_type(Loader const *self);

#if INDEX
#define Loader_C_get_type_i_p Loader$25$get_type
#endif

// C++ _inCAAAApktK() ==> Loader$_$force_init_type(Loader *param0)(Loader *)
extern int Loader$26$force_init_type(Loader *self);

#if INDEX
#define Loader_C_force_init_type_i_p Loader$26$force_init_type
#endif


// LoaderOptions

// C++ _inCAAAA5YaZ(LoaderOptions const &) ==> LoaderOptions$_$LoaderOptions(LoaderOptions const *param0)(LoaderOptions const *)
extern LoaderOptions * LoaderOptions$1$LoaderOptions(LoaderOptions const *arg0);

#if INDEX
#define LoaderOptions_C_ctor_p_p LoaderOptions$1$LoaderOptions
#endif

// C++ _inCAAAA19et(int flags) ==> LoaderOptions$_$LoaderOptions(int param0)(int)
extern LoaderOptions * LoaderOptions$2$LoaderOptions(int flags);

#if INDEX
#define LoaderOptions_C_ctor_p_i LoaderOptions$2$LoaderOptions
#endif

// C++ _inCAAAAMYtK() ==> LoaderOptions$_$LoaderOptions()()
extern LoaderOptions * LoaderOptions$3$LoaderOptions(void);

#if INDEX
#define LoaderOptions_C_ctor_p_v LoaderOptions$3$LoaderOptions
#endif

// C++ _inCAAAAkRhb(int flags, int texture_flags) ==> LoaderOptions$_$LoaderOptions(int param0, int param1)(int, int)
extern LoaderOptions * LoaderOptions$4$LoaderOptions(int flags, int texture_flags);

#if INDEX
#define LoaderOptions_C_ctor_p_ii LoaderOptions$4$LoaderOptions
#endif

// C++ _inCAAAAGDaf(int flags) ==> LoaderOptions$_$set_flags(LoaderOptions *param0, int param1)(LoaderOptions *, int)
extern void LoaderOptions$5$set_flags(LoaderOptions *self, int flags);

#if INDEX
#define LoaderOptions_C_set_flags_v_pi LoaderOptions$5$set_flags
#endif

// C++ _inCAAAAjYev() ==> LoaderOptions$_$get_flags(LoaderOptions const *param0)(LoaderOptions const *)
extern int LoaderOptions$6$get_flags(LoaderOptions const *self);

#if INDEX
#define LoaderOptions_C_get_flags_i_p LoaderOptions$6$get_flags
#endif

// C++ _inCAAAAedgq(int flags) ==> LoaderOptions$_$set_texture_flags(LoaderOptions *param0, int param1)(LoaderOptions *, int)
extern void LoaderOptions$7$set_texture_flags(LoaderOptions *self, int flags);

#if INDEX
#define LoaderOptions_C_set_texture_flags_v_pi LoaderOptions$7$set_texture_flags
#endif

// C++ _inCAAAAWo93() ==> LoaderOptions$_$get_texture_flags(LoaderOptions const *param0)(LoaderOptions const *)
extern int LoaderOptions$8$get_texture_flags(LoaderOptions const *self);

#if INDEX
#define LoaderOptions_C_get_texture_flags_i_p LoaderOptions$8$get_texture_flags
#endif

// C++ _inCAAAAloHl(int num_views) ==> LoaderOptions$_$set_texture_num_views(LoaderOptions *param0, int param1)(LoaderOptions *, int)
extern void LoaderOptions$9$set_texture_num_views(LoaderOptions *self, int num_views);

#if INDEX
#define LoaderOptions_C_set_texture_num_views_v_pi LoaderOptions$9$set_texture_num_views
#endif

// C++ _inCAAAALOQ8() ==> LoaderOptions$_$get_texture_num_views(LoaderOptions const *param0)(LoaderOptions const *)
extern int LoaderOptions$10$get_texture_num_views(LoaderOptions const *self);

#if INDEX
#define LoaderOptions_C_get_texture_num_views_i_p LoaderOptions$10$get_texture_num_views
#endif

// C++ _inCAAAAOzo7(AutoTextureScale scale) ==> LoaderOptions$_$set_auto_texture_scale(LoaderOptions *param0, AutoTextureScale param1)(LoaderOptions *, AutoTextureScale)
extern void LoaderOptions$11$set_auto_texture_scale(LoaderOptions *self, AutoTextureScale scale);

#if INDEX
#define LoaderOptions_C_set_auto_texture_scale_v_pp LoaderOptions$11$set_auto_texture_scale
#endif

// C++ _inCAAAAxpJO() ==> LoaderOptions$_$get_auto_texture_scale(LoaderOptions const *param0)(LoaderOptions const *)
extern AutoTextureScale LoaderOptions$12$get_auto_texture_scale(LoaderOptions const *self);

#if INDEX
#define LoaderOptions_C_get_auto_texture_scale_p_p LoaderOptions$12$get_auto_texture_scale
#endif

// C++ _inCAAAAWJSd(std::ostream &out) ==> LoaderOptions$_$output(LoaderOptions const *param0, std::ostream *param1)(LoaderOptions const *, std::ostream *)
extern void LoaderOptions$13$output(LoaderOptions const *self, std$_ostream *out);

#if INDEX
#define LoaderOptions_C_output_v_pp LoaderOptions$13$output
#endif


// MemoryBase

// C++ _inCAAAAVh0N() ==> MemoryBase$_$MemoryBase()()
extern MemoryBase * MemoryBase$1$MemoryBase(void);

#if INDEX
#define MemoryBase_C_ctor_p_v MemoryBase$1$MemoryBase
#endif

// C++ _inCAAAAIhuO(MemoryBase const &) ==> MemoryBase$_$MemoryBase(MemoryBase const *param0)(MemoryBase const *)
extern MemoryBase * MemoryBase$2$MemoryBase(MemoryBase const *arg0);

#if INDEX
#define MemoryBase_C_ctor_p_p MemoryBase$2$MemoryBase
#endif

// C++ _inCAAAAKg08() ==> MemoryBase$_$downcast_to_ReferenceCount(MemoryBase *param0)(MemoryBase *)
extern ReferenceCount * MemoryBase$3$downcast_to_ReferenceCount(MemoryBase *self);

#if INDEX
#define MemoryBase_C_downcast_to_ReferenceCount_p_p MemoryBase$3$downcast_to_ReferenceCount
#endif

// C++ _inCAAAAfhug() ==> MemoryBase$_$downcast_to_TypedObject(MemoryBase *param0)(MemoryBase *)
extern TypedObject * MemoryBase$4$downcast_to_TypedObject(MemoryBase *self);

#if INDEX
#define MemoryBase_C_downcast_to_TypedObject_p_p MemoryBase$4$downcast_to_TypedObject
#endif


// Namable

// C++ _inCAAAAPzAU() ==> Namable$_$downcast_to_PandaNode(Namable *param0)(Namable *)
extern PandaNode * Namable$1$downcast_to_PandaNode(Namable *self);

#if INDEX
#define Namable_C_downcast_to_PandaNode_p_p Namable$1$downcast_to_PandaNode
#endif

// C++ _inCAAAA2lYW() ==> Namable$_$downcast_to_Loader(Namable *param0)(Namable *)
extern Loader * Namable$2$downcast_to_Loader(Namable *self);

#if INDEX
#define Namable_C_downcast_to_Loader_p_p Namable$2$downcast_to_Loader
#endif

// C++ _inCAAAA5Y1p() ==> Namable$_$downcast_to_TextFont(Namable *param0)(Namable *)
extern TextFont * Namable$3$downcast_to_TextFont(Namable *self);

#if INDEX
#define Namable_C_downcast_to_TextFont_p_p Namable$3$downcast_to_TextFont
#endif

// C++ _inCAAAASRIH() ==> Namable$_$downcast_to_Texture(Namable *param0)(Namable *)
extern Texture * Namable$4$downcast_to_Texture(Namable *self);

#if INDEX
#define Namable_C_downcast_to_Texture_p_p Namable$4$downcast_to_Texture
#endif

// C++ _inCAAAAFtoz() ==> Namable$_$downcast_to_Thread(Namable *param0)(Namable *)
extern Thread * Namable$5$downcast_to_Thread(Namable *self);

#if INDEX
#define Namable_C_downcast_to_Thread_p_p Namable$5$downcast_to_Thread
#endif


// NodeCachedReferenceCount

// C++ _inCAAAAHv2I() ==> NodeCachedReferenceCount$_$get_node_ref_count(NodeCachedReferenceCount const *param0)(NodeCachedReferenceCount const *)
extern int NodeCachedReferenceCount$1$get_node_ref_count(NodeCachedReferenceCount const *self);

#if INDEX
#define NodeCachedReferenceCount_C_get_node_ref_count_i_p NodeCachedReferenceCount$1$get_node_ref_count
#endif

// C++ _inCAAAAC_qZ() ==> NodeCachedReferenceCount$_$node_ref(NodeCachedReferenceCount const *param0)(NodeCachedReferenceCount const *)
extern void NodeCachedReferenceCount$2$node_ref(NodeCachedReferenceCount const *self);

#if INDEX
#define NodeCachedReferenceCount_C_node_ref_v_p NodeCachedReferenceCount$2$node_ref
#endif

// C++ _inCAAAA35Q1() ==> NodeCachedReferenceCount$_$node_unref(NodeCachedReferenceCount const *param0)(NodeCachedReferenceCount const *)
extern bool NodeCachedReferenceCount$3$node_unref(NodeCachedReferenceCount const *self);

#if INDEX
#define NodeCachedReferenceCount_C_node_unref_B_p NodeCachedReferenceCount$3$node_unref
#endif

// C++ _inCAAAA6xUo() ==> NodeCachedReferenceCount$_$test_ref_count_integrity(NodeCachedReferenceCount const *param0)(NodeCachedReferenceCount const *)
extern bool NodeCachedReferenceCount$4$test_ref_count_integrity(NodeCachedReferenceCount const *self);

#if INDEX
#define NodeCachedReferenceCount_C_test_ref_count_integrity_B_p NodeCachedReferenceCount$4$test_ref_count_integrity
#endif

// C++ _inCAAAAwI10() ==> NodeCachedReferenceCount$_$get_referenced_bits(NodeCachedReferenceCount const *param0)(NodeCachedReferenceCount const *)
extern int NodeCachedReferenceCount$5$get_referenced_bits(NodeCachedReferenceCount const *self);

#if INDEX
#define NodeCachedReferenceCount_C_get_referenced_bits_i_p NodeCachedReferenceCount$5$get_referenced_bits
#endif

// C++ _inCAAAA_DaH() ==> NodeCachedReferenceCount$_$get_class_type()()
extern int NodeCachedReferenceCount$6$get_class_type(void);

#if INDEX
#define NodeCachedReferenceCount_C_get_class_type_i_v NodeCachedReferenceCount$6$get_class_type
#endif

// C++ _inCAAAA_Le_() ==> NodeCachedReferenceCount$_$init_type()()
extern void NodeCachedReferenceCount$7$init_type(void);

#if INDEX
#define NodeCachedReferenceCount_C_init_type_v_v NodeCachedReferenceCount$7$init_type
#endif


// NodePath

// C++ _inCAAAAdx9g() ==> NodePath$_$NodePath()()
extern NodePath * NodePath$1$NodePath(void);

#if INDEX
#define NodePath_C_ctor_p_v NodePath$1$NodePath
#endif

// C++ _inCAAAAsbyG(NodePath &&from) ==> NodePath$_$NodePath(NodePath *param0)(NodePath *)
extern NodePath * NodePath$2$NodePath(NodePath *from);

#if INDEX
#define NodePath_C_ctor_p_p NodePath$2$NodePath
#endif

// C++ _inCAAAAJaJj(NodePath const &copy) ==> NodePath$_$NodePath(NodePath const *param0)(NodePath const *)
extern NodePath * NodePath$3$NodePath(NodePath const *copy);
// COLLISION : NodePath_C_ctor_p_p NodePath$3$NodePath

// C++ _inCAAAAvecb(NodePath const &parent, PandaNode *child_node, Thread *current_thread) ==> NodePath$_$NodePath(NodePath const *param0, PandaNode *param1, Thread *param2)(NodePath const *, PandaNode *, Thread *)
extern NodePath * NodePath$4$NodePath(NodePath const *parent, PandaNode *child_node, Thread *current_thread);

#if INDEX
#define NodePath_C_ctor_p_ppp NodePath$4$NodePath
#endif

// C++ _inCAAAAnAhm(NodePath const &parent, PandaNode *child_node) ==> NodePath$_$NodePath(NodePath const *param0, PandaNode *param1)(NodePath const *, PandaNode *)
extern NodePath * NodePath$5$NodePath(NodePath const *parent, PandaNode *child_node);

#if INDEX
#define NodePath_C_ctor_p_pp NodePath$5$NodePath
#endif

// C++ _inCAAAAGF9J(PandaNode *node, Thread *current_thread) ==> NodePath$_$NodePath(PandaNode *param0, Thread *param1)(PandaNode *, Thread *)
extern NodePath * NodePath$6$NodePath(PandaNode *node, Thread *current_thread);
// COLLISION : NodePath_C_ctor_p_pp NodePath$6$NodePath

// C++ _inCAAAAH4wM(PandaNode *node) ==> NodePath$_$NodePath(PandaNode *param0)(PandaNode *)
extern NodePath * NodePath$7$NodePath(PandaNode *node);
// COLLISION : NodePath_C_ctor_p_p NodePath$7$NodePath

// C++ _inCAAAA_1FN(std::string const &top_node_name, Thread *current_thread) ==> NodePath$_$NodePath(char const *param0, Thread *param1)(char const *, Thread *)
extern NodePath * NodePath$8$NodePath(char const *top_node_name, Thread *current_thread);

#if INDEX
#define NodePath_C_ctor_p_sp NodePath$8$NodePath
#endif

// C++ _inCAAAAvQ3P(std::string const &top_node_name) ==> NodePath$_$NodePath(char const *param0)(char const *)
extern NodePath * NodePath$9$NodePath(char const *top_node_name);

#if INDEX
#define NodePath_C_ctor_p_s NodePath$9$NodePath
#endif

// C++ _inCAAAAh5bc(PandaNode *node, Thread *current_thread) ==> NodePath$_$any_path(PandaNode *param0, Thread *param1)(PandaNode *, Thread *)
extern NodePath * NodePath$10$any_path(PandaNode *node, Thread *current_thread);

#if INDEX
#define NodePath_C_any_path_p_pp NodePath$10$any_path
#endif

// C++ _inCAAAAoGNf(PandaNode *node) ==> NodePath$_$any_path(PandaNode *param0)(PandaNode *)
extern NodePath * NodePath$11$any_path(PandaNode *node);

#if INDEX
#define NodePath_C_any_path_p_p NodePath$11$any_path
#endif

// C++ _inCAAAApwgV() ==> NodePath$_$clear(NodePath *param0)(NodePath *)
extern void NodePath$12$clear(NodePath *self);

#if INDEX
#define NodePath_C_clear_v_p NodePath$12$clear
#endif

// C++ _inCAAAAH6GR() ==> NodePath$_$not_found()()
extern NodePath * NodePath$13$not_found(void);

#if INDEX
#define NodePath_C_not_found_p_v NodePath$13$not_found
#endif

// C++ _inCAAAAcqkY() ==> NodePath$_$removed()()
extern NodePath * NodePath$14$removed(void);

#if INDEX
#define NodePath_C_removed_p_v NodePath$14$removed
#endif

// C++ _inCAAAAKvgx() ==> NodePath$_$fail()()
extern NodePath * NodePath$15$fail(void);

#if INDEX
#define NodePath_C_fail_p_v NodePath$15$fail
#endif

// C++ _inCAAAAF4FI(int max_search_depth) ==> NodePath$_$set_max_search_depth(int param0)(int)
extern void NodePath$16$set_max_search_depth(int max_search_depth);

#if INDEX
#define NodePath_C_set_max_search_depth_v_i NodePath$16$set_max_search_depth
#endif

// C++ _inCAAAAjBwf() ==> NodePath$_$get_max_search_depth()()
extern int NodePath$17$get_max_search_depth(void);

#if INDEX
#define NodePath_C_get_max_search_depth_i_v NodePath$17$get_max_search_depth
#endif

// C++ _inCAAAA6BVO() ==> NodePath$_$is_empty(NodePath const *param0)(NodePath const *)
extern bool NodePath$18$is_empty(NodePath const *self);

#if INDEX
#define NodePath_C_is_empty_B_p NodePath$18$is_empty
#endif

// C++ _inCAAAAfPMM(Thread *current_thread) ==> NodePath$_$is_singleton(NodePath const *param0, Thread *param1)(NodePath const *, Thread *)
extern bool NodePath$19$is_singleton(NodePath const *self, Thread *current_thread);

#if INDEX
#define NodePath_C_is_singleton_B_pp NodePath$19$is_singleton
#endif

// C++ _inCAAAAnHP3() ==> NodePath$_$is_singleton(NodePath const *param0)(NodePath const *)
extern bool NodePath$20$is_singleton(NodePath const *self);

#if INDEX
#define NodePath_C_is_singleton_B_p NodePath$20$is_singleton
#endif

// C++ _inCAAAAdRIU(Thread *current_thread) ==> NodePath$_$get_num_nodes(NodePath const *param0, Thread *param1)(NodePath const *, Thread *)
extern int NodePath$21$get_num_nodes(NodePath const *self, Thread *current_thread);

#if INDEX
#define NodePath_C_get_num_nodes_i_pp NodePath$21$get_num_nodes
#endif

// C++ _inCAAAAMbn0() ==> NodePath$_$get_num_nodes(NodePath const *param0)(NodePath const *)
extern int NodePath$22$get_num_nodes(NodePath const *self);

#if INDEX
#define NodePath_C_get_num_nodes_i_p NodePath$22$get_num_nodes
#endif

// C++ _inCAAAAOx_k(int index, Thread *current_thread) ==> NodePath$_$get_node(NodePath const *param0, int param1, Thread *param2)(NodePath const *, int, Thread *)
extern PandaNode * NodePath$23$get_node(NodePath const *self, int index, Thread *current_thread);

#if INDEX
#define NodePath_C_get_node_p_pip NodePath$23$get_node
#endif

// C++ _inCAAAA5Kz9(int index) ==> NodePath$_$get_node(NodePath const *param0, int param1)(NodePath const *, int)
extern PandaNode * NodePath$24$get_node(NodePath const *self, int index);

#if INDEX
#define NodePath_C_get_node_p_pi NodePath$24$get_node
#endif

// C++ _inCAAAAH5pa(int index, Thread *current_thread) ==> NodePath$_$get_ancestor(NodePath const *param0, int param1, Thread *param2)(NodePath const *, int, Thread *)
extern NodePath * NodePath$25$get_ancestor(NodePath const *self, int index, Thread *current_thread);

#if INDEX
#define NodePath_C_get_ancestor_p_pip NodePath$25$get_ancestor
#endif

// C++ _inCAAAA4QOU(int index) ==> NodePath$_$get_ancestor(NodePath const *param0, int param1)(NodePath const *, int)
extern NodePath * NodePath$26$get_ancestor(NodePath const *self, int index);

#if INDEX
#define NodePath_C_get_ancestor_p_pi NodePath$26$get_ancestor
#endif

// C++ _inCAAAA17Vc() ==> NodePath$_$get_error_type(NodePath const *param0)(NodePath const *)
extern NodePath$_ErrorType NodePath$27$get_error_type(NodePath const *self);

#if INDEX
#define NodePath_C_get_error_type_p_p NodePath$27$get_error_type
#endif

// C++ _inCAAAAbOLd(Thread *current_thread) ==> NodePath$_$get_top_node(NodePath const *param0, Thread *param1)(NodePath const *, Thread *)
extern PandaNode * NodePath$28$get_top_node(NodePath const *self, Thread *current_thread);

#if INDEX
#define NodePath_C_get_top_node_p_pp NodePath$28$get_top_node
#endif

// C++ _inCAAAACGOI() ==> NodePath$_$get_top_node(NodePath const *param0)(NodePath const *)
extern PandaNode * NodePath$29$get_top_node(NodePath const *self);

#if INDEX
#define NodePath_C_get_top_node_p_p NodePath$29$get_top_node
#endif

// C++ _inCAAAAFyxv(Thread *current_thread) ==> NodePath$_$get_top(NodePath const *param0, Thread *param1)(NodePath const *, Thread *)
extern NodePath * NodePath$30$get_top(NodePath const *self, Thread *current_thread);

#if INDEX
#define NodePath_C_get_top_p_pp NodePath$30$get_top
#endif

// C++ _inCAAAAHiQF() ==> NodePath$_$get_top(NodePath const *param0)(NodePath const *)
extern NodePath * NodePath$31$get_top(NodePath const *self);

#if INDEX
#define NodePath_C_get_top_p_p NodePath$31$get_top
#endif

// C++ _inCAAAAC92U() ==> NodePath$_$node(NodePath const *param0)(NodePath const *)
extern PandaNode * NodePath$32$node(NodePath const *self);

#if INDEX
#define NodePath_C_node_p_p NodePath$32$node
#endif

// C++ _inCAAAAumo_() ==> NodePath$_$get_key(NodePath const *param0)(NodePath const *)
extern int NodePath$33$get_key(NodePath const *self);

#if INDEX
#define NodePath_C_get_key_i_p NodePath$33$get_key
#endif

// C++ _inCAAAAknMI(std::size_t hash) ==> NodePath$_$add_hash(NodePath const *param0, std::size_t param1)(NodePath const *, std::size_t)
extern std$_size_t NodePath$34$add_hash(NodePath const *self, std$_size_t hash);

#if INDEX
#define NodePath_C_add_hash_l_pl NodePath$34$add_hash
#endif

// C++ _inCAAAAanz3(NodePath const &other, Thread *current_thread) ==> NodePath$_$is_same_graph(NodePath const *param0, NodePath const *param1, Thread *param2)(NodePath const *, NodePath const *, Thread *)
extern bool NodePath$35$is_same_graph(NodePath const *self, NodePath const *other, Thread *current_thread);

#if INDEX
#define NodePath_C_is_same_graph_B_ppp NodePath$35$is_same_graph
#endif

// C++ _inCAAAARlGb(NodePath const &other) ==> NodePath$_$is_same_graph(NodePath const *param0, NodePath const *param1)(NodePath const *, NodePath const *)
extern bool NodePath$36$is_same_graph(NodePath const *self, NodePath const *other);

#if INDEX
#define NodePath_C_is_same_graph_B_pp NodePath$36$is_same_graph
#endif

// C++ _inCAAAAY3g7(NodePath const &other, Thread *current_thread) ==> NodePath$_$is_ancestor_of(NodePath const *param0, NodePath const *param1, Thread *param2)(NodePath const *, NodePath const *, Thread *)
extern bool NodePath$37$is_ancestor_of(NodePath const *self, NodePath const *other, Thread *current_thread);

#if INDEX
#define NodePath_C_is_ancestor_of_B_ppp NodePath$37$is_ancestor_of
#endif

// C++ _inCAAAAFCVk(NodePath const &other) ==> NodePath$_$is_ancestor_of(NodePath const *param0, NodePath const *param1)(NodePath const *, NodePath const *)
extern bool NodePath$38$is_ancestor_of(NodePath const *self, NodePath const *other);

#if INDEX
#define NodePath_C_is_ancestor_of_B_pp NodePath$38$is_ancestor_of
#endif

// C++ _inCAAAAT79O(NodePath const &other, Thread *current_thread) ==> NodePath$_$get_common_ancestor(NodePath const *param0, NodePath const *param1, Thread *param2)(NodePath const *, NodePath const *, Thread *)
extern NodePath * NodePath$39$get_common_ancestor(NodePath const *self, NodePath const *other, Thread *current_thread);

#if INDEX
#define NodePath_C_get_common_ancestor_p_ppp NodePath$39$get_common_ancestor
#endif

// C++ _inCAAAAiMjg(NodePath const &other) ==> NodePath$_$get_common_ancestor(NodePath const *param0, NodePath const *param1)(NodePath const *, NodePath const *)
extern NodePath * NodePath$40$get_common_ancestor(NodePath const *self, NodePath const *other);

#if INDEX
#define NodePath_C_get_common_ancestor_p_pp NodePath$40$get_common_ancestor
#endif

// C++ _inCAAAAbz5q(Thread *current_thread) ==> NodePath$_$get_children(NodePath const *param0, Thread *param1)(NodePath const *, Thread *)
extern NodePathCollection * NodePath$41$get_children(NodePath const *self, Thread *current_thread);

#if INDEX
#define NodePath_C_get_children_p_pp NodePath$41$get_children
#endif

// C++ _inCAAAAgb8V() ==> NodePath$_$get_children(NodePath const *param0)(NodePath const *)
extern NodePathCollection * NodePath$42$get_children(NodePath const *self);

#if INDEX
#define NodePath_C_get_children_p_p NodePath$42$get_children
#endif

// C++ _inCAAAAjAV2(Thread *current_thread) ==> NodePath$_$get_num_children(NodePath const *param0, Thread *param1)(NodePath const *, Thread *)
extern int NodePath$43$get_num_children(NodePath const *self, Thread *current_thread);

#if INDEX
#define NodePath_C_get_num_children_i_pp NodePath$43$get_num_children
#endif

// C++ _inCAAAASTCh() ==> NodePath$_$get_num_children(NodePath const *param0)(NodePath const *)
extern int NodePath$44$get_num_children(NodePath const *self);

#if INDEX
#define NodePath_C_get_num_children_i_p NodePath$44$get_num_children
#endif

// C++ _inCAAAAxKe9(int n, Thread *current_thread) ==> NodePath$_$get_child(NodePath const *param0, int param1, Thread *param2)(NodePath const *, int, Thread *)
extern NodePath * NodePath$45$get_child(NodePath const *self, int n, Thread *current_thread);

#if INDEX
#define NodePath_C_get_child_p_pip NodePath$45$get_child
#endif

// C++ _inCAAAAaFtX(int n) ==> NodePath$_$get_child(NodePath const *param0, int param1)(NodePath const *, int)
extern NodePath * NodePath$46$get_child(NodePath const *self, int n);

#if INDEX
#define NodePath_C_get_child_p_pi NodePath$46$get_child
#endif

// C++ _inCAAAAOQxT(Thread *current_thread) ==> NodePath$_$get_stashed_children(NodePath const *param0, Thread *param1)(NodePath const *, Thread *)
extern NodePathCollection * NodePath$47$get_stashed_children(NodePath const *self, Thread *current_thread);

#if INDEX
#define NodePath_C_get_stashed_children_p_pp NodePath$47$get_stashed_children
#endif

// C++ _inCAAAAwedS() ==> NodePath$_$get_stashed_children(NodePath const *param0)(NodePath const *)
extern NodePathCollection * NodePath$48$get_stashed_children(NodePath const *self);

#if INDEX
#define NodePath_C_get_stashed_children_p_p NodePath$48$get_stashed_children
#endif

// C++ _inCAAAAGzBj() ==> NodePath$_$count_num_descendants(NodePath const *param0)(NodePath const *)
extern int NodePath$49$count_num_descendants(NodePath const *self);

#if INDEX
#define NodePath_C_count_num_descendants_i_p NodePath$49$count_num_descendants
#endif

// C++ _inCAAAAkmIB(Thread *current_thread) ==> NodePath$_$has_parent(NodePath const *param0, Thread *param1)(NodePath const *, Thread *)
extern bool NodePath$50$has_parent(NodePath const *self, Thread *current_thread);

#if INDEX
#define NodePath_C_has_parent_B_pp NodePath$50$has_parent
#endif

// C++ _inCAAAAhc1w() ==> NodePath$_$has_parent(NodePath const *param0)(NodePath const *)
extern bool NodePath$51$has_parent(NodePath const *self);

#if INDEX
#define NodePath_C_has_parent_B_p NodePath$51$has_parent
#endif

// C++ _inCAAAABn7Y(Thread *current_thread) ==> NodePath$_$get_parent(NodePath const *param0, Thread *param1)(NodePath const *, Thread *)
extern NodePath * NodePath$52$get_parent(NodePath const *self, Thread *current_thread);

#if INDEX
#define NodePath_C_get_parent_p_pp NodePath$52$get_parent
#endif

// C++ _inCAAAADcoI() ==> NodePath$_$get_parent(NodePath const *param0)(NodePath const *)
extern NodePath * NodePath$53$get_parent(NodePath const *self);

#if INDEX
#define NodePath_C_get_parent_p_p NodePath$53$get_parent
#endif

// C++ _inCAAAAHJFY(Thread *current_thread) ==> NodePath$_$get_sort(NodePath const *param0, Thread *param1)(NodePath const *, Thread *)
extern int NodePath$54$get_sort(NodePath const *self, Thread *current_thread);

#if INDEX
#define NodePath_C_get_sort_i_pp NodePath$54$get_sort
#endif

// C++ _inCAAAAFeVI() ==> NodePath$_$get_sort(NodePath const *param0)(NodePath const *)
extern int NodePath$55$get_sort(NodePath const *self);

#if INDEX
#define NodePath_C_get_sort_i_p NodePath$55$get_sort
#endif

// C++ _inCAAAA1Apv(std::string const &path) ==> NodePath$_$find(NodePath const *param0, char const *param1)(NodePath const *, char const *)
extern NodePath * NodePath$56$find(NodePath const *self, char const *path);

#if INDEX
#define NodePath_C_find_p_ps NodePath$56$find
#endif

// C++ _inCAAAAQFrr(PandaNode *node) ==> NodePath$_$find_path_to(NodePath const *param0, PandaNode *param1)(NodePath const *, PandaNode *)
extern NodePath * NodePath$57$find_path_to(NodePath const *self, PandaNode *node);

#if INDEX
#define NodePath_C_find_path_to_p_pp NodePath$57$find_path_to
#endif

// C++ _inCAAAAdowK(std::string const &path) ==> NodePath$_$find_all_matches(NodePath const *param0, char const *param1)(NodePath const *, char const *)
extern NodePathCollection * NodePath$58$find_all_matches(NodePath const *self, char const *path);

#if INDEX
#define NodePath_C_find_all_matches_p_ps NodePath$58$find_all_matches
#endif

// C++ _inCAAAAO6Sn(PandaNode *node) ==> NodePath$_$find_all_paths_to(NodePath const *param0, PandaNode *param1)(NodePath const *, PandaNode *)
extern NodePathCollection * NodePath$59$find_all_paths_to(NodePath const *self, PandaNode *node);

#if INDEX
#define NodePath_C_find_all_paths_to_p_pp NodePath$59$find_all_paths_to
#endif

// C++ _inCAAAAdxiE(NodePath const &other, int sort, Thread *current_thread) ==> NodePath$_$reparent_to(NodePath *param0, NodePath const *param1, int param2, Thread *param3)(NodePath *, NodePath const *, int, Thread *)
extern void NodePath$60$reparent_to(NodePath *self, NodePath const *other, int sort, Thread *current_thread);

#if INDEX
#define NodePath_C_reparent_to_v_ppip NodePath$60$reparent_to
#endif

// C++ _inCAAAA4WHK(NodePath const &other, int sort) ==> NodePath$_$reparent_to(NodePath *param0, NodePath const *param1, int param2)(NodePath *, NodePath const *, int)
extern void NodePath$61$reparent_to(NodePath *self, NodePath const *other, int sort);

#if INDEX
#define NodePath_C_reparent_to_v_ppi NodePath$61$reparent_to
#endif

// C++ _inCAAAAzsyP(NodePath const &other) ==> NodePath$_$reparent_to(NodePath *param0, NodePath const *param1)(NodePath *, NodePath const *)
extern void NodePath$62$reparent_to(NodePath *self, NodePath const *other);

#if INDEX
#define NodePath_C_reparent_to_v_pp NodePath$62$reparent_to
#endif

// C++ _inCAAAAUB2k(NodePath const &other, int sort, Thread *current_thread) ==> NodePath$_$stash_to(NodePath *param0, NodePath const *param1, int param2, Thread *param3)(NodePath *, NodePath const *, int, Thread *)
extern void NodePath$63$stash_to(NodePath *self, NodePath const *other, int sort, Thread *current_thread);

#if INDEX
#define NodePath_C_stash_to_v_ppip NodePath$63$stash_to
#endif

// C++ _inCAAAAn8L1(NodePath const &other, int sort) ==> NodePath$_$stash_to(NodePath *param0, NodePath const *param1, int param2)(NodePath *, NodePath const *, int)
extern void NodePath$64$stash_to(NodePath *self, NodePath const *other, int sort);

#if INDEX
#define NodePath_C_stash_to_v_ppi NodePath$64$stash_to
#endif

// C++ _inCAAAAzzL_(NodePath const &other) ==> NodePath$_$stash_to(NodePath *param0, NodePath const *param1)(NodePath *, NodePath const *)
extern void NodePath$65$stash_to(NodePath *self, NodePath const *other);

#if INDEX
#define NodePath_C_stash_to_v_pp NodePath$65$stash_to
#endif

// C++ _inCAAAAVNjc(NodePath const &other, int sort, Thread *current_thread) ==> NodePath$_$wrt_reparent_to(NodePath *param0, NodePath const *param1, int param2, Thread *param3)(NodePath *, NodePath const *, int, Thread *)
extern void NodePath$66$wrt_reparent_to(NodePath *self, NodePath const *other, int sort, Thread *current_thread);

#if INDEX
#define NodePath_C_wrt_reparent_to_v_ppip NodePath$66$wrt_reparent_to
#endif

// C++ _inCAAAAln7s(NodePath const &other, int sort) ==> NodePath$_$wrt_reparent_to(NodePath *param0, NodePath const *param1, int param2)(NodePath *, NodePath const *, int)
extern void NodePath$67$wrt_reparent_to(NodePath *self, NodePath const *other, int sort);

#if INDEX
#define NodePath_C_wrt_reparent_to_v_ppi NodePath$67$wrt_reparent_to
#endif

// C++ _inCAAAAwFTN(NodePath const &other) ==> NodePath$_$wrt_reparent_to(NodePath *param0, NodePath const *param1)(NodePath *, NodePath const *)
extern void NodePath$68$wrt_reparent_to(NodePath *self, NodePath const *other);

#if INDEX
#define NodePath_C_wrt_reparent_to_v_pp NodePath$68$wrt_reparent_to
#endif

// C++ _inCAAAACtbj(NodePath const &other, int sort, Thread *current_thread) ==> NodePath$_$instance_to(NodePath const *param0, NodePath const *param1, int param2, Thread *param3)(NodePath const *, NodePath const *, int, Thread *)
extern NodePath * NodePath$69$instance_to(NodePath const *self, NodePath const *other, int sort, Thread *current_thread);

#if INDEX
#define NodePath_C_instance_to_p_ppip NodePath$69$instance_to
#endif

// C++ _inCAAAA2Mo6(NodePath const &other, int sort) ==> NodePath$_$instance_to(NodePath const *param0, NodePath const *param1, int param2)(NodePath const *, NodePath const *, int)
extern NodePath * NodePath$70$instance_to(NodePath const *self, NodePath const *other, int sort);

#if INDEX
#define NodePath_C_instance_to_p_ppi NodePath$70$instance_to
#endif

// C++ _inCAAAATlPD(NodePath const &other) ==> NodePath$_$instance_to(NodePath const *param0, NodePath const *param1)(NodePath const *, NodePath const *)
extern NodePath * NodePath$71$instance_to(NodePath const *self, NodePath const *other);

#if INDEX
#define NodePath_C_instance_to_p_pp NodePath$71$instance_to
#endif

// C++ _inCAAAARiLj(NodePath const &other, std::string const &name, int sort, Thread *current_thread) ==> NodePath$_$instance_under_node(NodePath const *param0, NodePath const *param1, char const *param2, int param3, Thread *param4)(NodePath const *, NodePath const *, char const *, int, Thread *)
extern NodePath * NodePath$72$instance_under_node(NodePath const *self, NodePath const *other, char const *name, int sort, Thread *current_thread);

#if INDEX
#define NodePath_C_instance_under_node_p_ppsip NodePath$72$instance_under_node
#endif

// C++ _inCAAAAEkeG(NodePath const &other, std::string const &name, int sort) ==> NodePath$_$instance_under_node(NodePath const *param0, NodePath const *param1, char const *param2, int param3)(NodePath const *, NodePath const *, char const *, int)
extern NodePath * NodePath$73$instance_under_node(NodePath const *self, NodePath const *other, char const *name, int sort);

#if INDEX
#define NodePath_C_instance_under_node_p_ppsi NodePath$73$instance_under_node
#endif

// C++ _inCAAAAerny(NodePath const &other, std::string const &name) ==> NodePath$_$instance_under_node(NodePath const *param0, NodePath const *param1, char const *param2)(NodePath const *, NodePath const *, char const *)
extern NodePath * NodePath$74$instance_under_node(NodePath const *self, NodePath const *other, char const *name);

#if INDEX
#define NodePath_C_instance_under_node_p_pps NodePath$74$instance_under_node
#endif

// C++ _inCAAAAtacp(NodePath const &other, int sort, Thread *current_thread) ==> NodePath$_$copy_to(NodePath const *param0, NodePath const *param1, int param2, Thread *param3)(NodePath const *, NodePath const *, int, Thread *)
extern NodePath * NodePath$75$copy_to(NodePath const *self, NodePath const *other, int sort, Thread *current_thread);

#if INDEX
#define NodePath_C_copy_to_p_ppip NodePath$75$copy_to
#endif

// C++ _inCAAAAxTlc(NodePath const &other, int sort) ==> NodePath$_$copy_to(NodePath const *param0, NodePath const *param1, int param2)(NodePath const *, NodePath const *, int)
extern NodePath * NodePath$76$copy_to(NodePath const *self, NodePath const *other, int sort);

#if INDEX
#define NodePath_C_copy_to_p_ppi NodePath$76$copy_to
#endif

// C++ _inCAAAAtI_l(NodePath const &other) ==> NodePath$_$copy_to(NodePath const *param0, NodePath const *param1)(NodePath const *, NodePath const *)
extern NodePath * NodePath$77$copy_to(NodePath const *self, NodePath const *other);

#if INDEX
#define NodePath_C_copy_to_p_pp NodePath$77$copy_to
#endif

// C++ _inCAAAA6KoR(PandaNode *node, int sort, Thread *current_thread) ==> NodePath$_$attach_new_node(NodePath const *param0, PandaNode *param1, int param2, Thread *param3)(NodePath const *, PandaNode *, int, Thread *)
extern NodePath * NodePath$78$attach_new_node(NodePath const *self, PandaNode *node, int sort, Thread *current_thread);

#if INDEX
#define NodePath_C_attach_new_node_p_ppip NodePath$78$attach_new_node
#endif

// C++ _inCAAAAnUwe(PandaNode *node, int sort) ==> NodePath$_$attach_new_node(NodePath const *param0, PandaNode *param1, int param2)(NodePath const *, PandaNode *, int)
extern NodePath * NodePath$79$attach_new_node(NodePath const *self, PandaNode *node, int sort);

#if INDEX
#define NodePath_C_attach_new_node_p_ppi NodePath$79$attach_new_node
#endif

// C++ _inCAAAA9EWP(PandaNode *node) ==> NodePath$_$attach_new_node(NodePath const *param0, PandaNode *param1)(NodePath const *, PandaNode *)
extern NodePath * NodePath$80$attach_new_node(NodePath const *self, PandaNode *node);

#if INDEX
#define NodePath_C_attach_new_node_p_pp NodePath$80$attach_new_node
#endif

// C++ _inCAAAAmasN(std::string const &name, int sort, Thread *current_thread) ==> NodePath$_$attach_new_node(NodePath const *param0, char const *param1, int param2, Thread *param3)(NodePath const *, char const *, int, Thread *)
extern NodePath * NodePath$81$attach_new_node(NodePath const *self, char const *name, int sort, Thread *current_thread);

#if INDEX
#define NodePath_C_attach_new_node_p_psip NodePath$81$attach_new_node
#endif

// C++ _inCAAAAjl0a(std::string const &name, int sort) ==> NodePath$_$attach_new_node(NodePath const *param0, char const *param1, int param2)(NodePath const *, char const *, int)
extern NodePath * NodePath$82$attach_new_node(NodePath const *self, char const *name, int sort);

#if INDEX
#define NodePath_C_attach_new_node_p_psi NodePath$82$attach_new_node
#endif

// C++ _inCAAAAk6aL(std::string const &name) ==> NodePath$_$attach_new_node(NodePath const *param0, char const *param1)(NodePath const *, char const *)
extern NodePath * NodePath$83$attach_new_node(NodePath const *self, char const *name);

#if INDEX
#define NodePath_C_attach_new_node_p_ps NodePath$83$attach_new_node
#endif

// C++ _inCAAAAMmwt(Thread *current_thread) ==> NodePath$_$remove_node(NodePath *param0, Thread *param1)(NodePath *, Thread *)
extern void NodePath$84$remove_node(NodePath *self, Thread *current_thread);

#if INDEX
#define NodePath_C_remove_node_v_pp NodePath$84$remove_node
#endif

// C++ _inCAAAAliuR() ==> NodePath$_$remove_node(NodePath *param0)(NodePath *)
extern void NodePath$85$remove_node(NodePath *self);

#if INDEX
#define NodePath_C_remove_node_v_p NodePath$85$remove_node
#endif

// C++ _inCAAAArQzO(Thread *current_thread) ==> NodePath$_$detach_node(NodePath *param0, Thread *param1)(NodePath *, Thread *)
extern void NodePath$86$detach_node(NodePath *self, Thread *current_thread);

#if INDEX
#define NodePath_C_detach_node_v_pp NodePath$86$detach_node
#endif

// C++ _inCAAAAgfzy() ==> NodePath$_$detach_node(NodePath *param0)(NodePath *)
extern void NodePath$87$detach_node(NodePath *self);

#if INDEX
#define NodePath_C_detach_node_v_p NodePath$87$detach_node
#endif

// C++ _inCAAAAhwrv(std::ostream &out) ==> NodePath$_$output(NodePath const *param0, std::ostream *param1)(NodePath const *, std::ostream *)
extern void NodePath$88$output(NodePath const *self, std$_ostream *out);

#if INDEX
#define NodePath_C_output_v_pp NodePath$88$output
#endif

// C++ _inCAAAAvoLL() ==> NodePath$_$ls(NodePath const *param0)(NodePath const *)
extern void NodePath$89$ls(NodePath const *self);

#if INDEX
#define NodePath_C_ls_v_p NodePath$89$ls
#endif

// C++ _inCAAAAjFej(std::ostream &out, int indent_level) ==> NodePath$_$ls(NodePath const *param0, std::ostream *param1, int param2)(NodePath const *, std::ostream *, int)
extern void NodePath$90$ls(NodePath const *self, std$_ostream *out, int indent_level);

#if INDEX
#define NodePath_C_ls_v_ppi NodePath$90$ls
#endif

// C++ _inCAAAA_0nP(std::ostream &out) ==> NodePath$_$ls(NodePath const *param0, std::ostream *param1)(NodePath const *, std::ostream *)
extern void NodePath$91$ls(NodePath const *self, std$_ostream *out);

#if INDEX
#define NodePath_C_ls_v_pp NodePath$91$ls
#endif

// C++ _inCAAAAh7pG() ==> NodePath$_$reverse_ls(NodePath const *param0)(NodePath const *)
extern void NodePath$92$reverse_ls(NodePath const *self);

#if INDEX
#define NodePath_C_reverse_ls_v_p NodePath$92$reverse_ls
#endif

// C++ _inCAAAAWQ62(std::ostream &out, int indent_level) ==> NodePath$_$reverse_ls(NodePath const *param0, std::ostream *param1, int param2)(NodePath const *, std::ostream *, int)
extern int NodePath$93$reverse_ls(NodePath const *self, std$_ostream *out, int indent_level);

#if INDEX
#define NodePath_C_reverse_ls_i_ppi NodePath$93$reverse_ls
#endif

// C++ _inCAAAAGsGI(std::ostream &out) ==> NodePath$_$reverse_ls(NodePath const *param0, std::ostream *param1)(NodePath const *, std::ostream *)
extern int NodePath$94$reverse_ls(NodePath const *self, std$_ostream *out);

#if INDEX
#define NodePath_C_reverse_ls_i_pp NodePath$94$reverse_ls
#endif

// C++ _inCAAAA8qvj(NodePath const &other, Thread *current_thread) ==> NodePath$_$get_state(NodePath const *param0, NodePath const *param1, Thread *param2)(NodePath const *, NodePath const *, Thread *)
extern char ** NodePath$95$get_state(NodePath const *self, NodePath const *other, Thread *current_thread);

#if INDEX
#define NodePath_C_get_state_p_ppp NodePath$95$get_state
#endif

// C++ _inCAAAAu5LY(NodePath const &other) ==> NodePath$_$get_state(NodePath const *param0, NodePath const *param1)(NodePath const *, NodePath const *)
extern char ** NodePath$96$get_state(NodePath const *self, NodePath const *other);

#if INDEX
#define NodePath_C_get_state_p_pp NodePath$96$get_state
#endif

// C++ _inCAAAANmZv(Thread *current_thread) ==> NodePath$_$get_state(NodePath const *param0, Thread *param1)(NodePath const *, Thread *)
extern RenderState const * NodePath$97$get_state(NodePath const *self, Thread *current_thread);
// COLLISION : NodePath_C_get_state_p_pp NodePath$97$get_state

// C++ _inCAAAAMd52() ==> NodePath$_$get_state(NodePath const *param0)(NodePath const *)
extern RenderState const * NodePath$98$get_state(NodePath const *self);

#if INDEX
#define NodePath_C_get_state_p_p NodePath$98$get_state
#endif

// C++ _inCAAAAIp0D(NodePath const &other, RenderState const *state, Thread *current_thread) ==> NodePath$_$set_state(NodePath *param0, NodePath const *param1, RenderState const *param2, Thread *param3)(NodePath *, NodePath const *, RenderState const *, Thread *)
extern void NodePath$99$set_state(NodePath *self, NodePath const *other, RenderState const *state, Thread *current_thread);

#if INDEX
#define NodePath_C_set_state_v_pppp NodePath$99$set_state
#endif

// C++ _inCAAAAojNF(NodePath const &other, RenderState const *state) ==> NodePath$_$set_state(NodePath *param0, NodePath const *param1, RenderState const *param2)(NodePath *, NodePath const *, RenderState const *)
extern void NodePath$100$set_state(NodePath *self, NodePath const *other, RenderState const *state);

#if INDEX
#define NodePath_C_set_state_v_ppp NodePath$100$set_state
#endif

// C++ _inCAAAADhE4(RenderState const *state, Thread *current_thread) ==> NodePath$_$set_state(NodePath *param0, RenderState const *param1, Thread *param2)(NodePath *, RenderState const *, Thread *)
extern void NodePath$101$set_state(NodePath *self, RenderState const *state, Thread *current_thread);
// COLLISION : NodePath_C_set_state_v_ppp NodePath$101$set_state

// C++ _inCAAAAYTbI(RenderState const *state) ==> NodePath$_$set_state(NodePath *param0, RenderState const *param1)(NodePath *, RenderState const *)
extern void NodePath$102$set_state(NodePath *self, RenderState const *state);

#if INDEX
#define NodePath_C_set_state_v_pp NodePath$102$set_state
#endif

// C++ _inCAAAAT2Wy(Thread *current_thread) ==> NodePath$_$get_net_state(NodePath const *param0, Thread *param1)(NodePath const *, Thread *)
extern char ** NodePath$103$get_net_state(NodePath const *self, Thread *current_thread);

#if INDEX
#define NodePath_C_get_net_state_p_pp NodePath$103$get_net_state
#endif

// C++ _inCAAAAxk0S() ==> NodePath$_$get_net_state(NodePath const *param0)(NodePath const *)
extern char ** NodePath$104$get_net_state(NodePath const *self);

#if INDEX
#define NodePath_C_get_net_state_p_p NodePath$104$get_net_state
#endif

// C++ _inCAAAA_hqK(RenderAttrib const *attrib, int priority) ==> NodePath$_$set_attrib(NodePath *param0, RenderAttrib const *param1, int param2)(NodePath *, RenderAttrib const *, int)
extern void NodePath$105$set_attrib(NodePath *self, RenderAttrib const *attrib, int priority);

#if INDEX
#define NodePath_C_set_attrib_v_ppi NodePath$105$set_attrib
#endif

// C++ _inCAAAAsv7c(RenderAttrib const *attrib) ==> NodePath$_$set_attrib(NodePath *param0, RenderAttrib const *param1)(NodePath *, RenderAttrib const *)
extern void NodePath$106$set_attrib(NodePath *self, RenderAttrib const *attrib);

#if INDEX
#define NodePath_C_set_attrib_v_pp NodePath$106$set_attrib
#endif

// C++ _inCAAAAEHFA(TypeHandle type) ==> NodePath$_$get_attrib(NodePath const *param0, int param1)(NodePath const *, int)
extern RenderAttrib const * NodePath$107$get_attrib(NodePath const *self, int type);

#if INDEX
#define NodePath_C_get_attrib_p_pi NodePath$107$get_attrib
#endif

// C++ _inCAAAA_GQo(TypeHandle type) ==> NodePath$_$has_attrib(NodePath const *param0, int param1)(NodePath const *, int)
extern bool NodePath$108$has_attrib(NodePath const *self, int type);

#if INDEX
#define NodePath_C_has_attrib_B_pi NodePath$108$has_attrib
#endif

// C++ _inCAAAA9ZOD(TypeHandle type) ==> NodePath$_$clear_attrib(NodePath *param0, int param1)(NodePath *, int)
extern void NodePath$109$clear_attrib(NodePath *self, int type);

#if INDEX
#define NodePath_C_clear_attrib_v_pi NodePath$109$clear_attrib
#endif

// C++ _inCAAAADDCe(RenderEffect const *effect) ==> NodePath$_$set_effect(NodePath *param0, RenderEffect const *param1)(NodePath *, RenderEffect const *)
extern void NodePath$110$set_effect(NodePath *self, RenderEffect const *effect);

#if INDEX
#define NodePath_C_set_effect_v_pp NodePath$110$set_effect
#endif

// C++ _inCAAAAYm6g(TypeHandle type) ==> NodePath$_$get_effect(NodePath const *param0, int param1)(NodePath const *, int)
extern RenderEffect const * NodePath$111$get_effect(NodePath const *self, int type);

#if INDEX
#define NodePath_C_get_effect_p_pi NodePath$111$get_effect
#endif

// C++ _inCAAAA_pJJ(TypeHandle type) ==> NodePath$_$has_effect(NodePath const *param0, int param1)(NodePath const *, int)
extern bool NodePath$112$has_effect(NodePath const *self, int type);

#if INDEX
#define NodePath_C_has_effect_B_pi NodePath$112$has_effect
#endif

// C++ _inCAAAAEpe3(TypeHandle type) ==> NodePath$_$clear_effect(NodePath *param0, int param1)(NodePath *, int)
extern void NodePath$113$clear_effect(NodePath *self, int type);

#if INDEX
#define NodePath_C_clear_effect_v_pi NodePath$113$clear_effect
#endif

// C++ _inCAAAAPD2Q(RenderEffects const *effects) ==> NodePath$_$set_effects(NodePath *param0, RenderEffects const *param1)(NodePath *, RenderEffects const *)
extern void NodePath$114$set_effects(NodePath *self, RenderEffects const *effects);

#if INDEX
#define NodePath_C_set_effects_v_pp NodePath$114$set_effects
#endif

// C++ _inCAAAAuJzu() ==> NodePath$_$get_effects(NodePath const *param0)(NodePath const *)
extern RenderEffects const * NodePath$115$get_effects(NodePath const *self);

#if INDEX
#define NodePath_C_get_effects_p_p NodePath$115$get_effects
#endif

// C++ _inCAAAAZ8BC() ==> NodePath$_$clear_effects(NodePath *param0)(NodePath *)
extern void NodePath$116$clear_effects(NodePath *self);

#if INDEX
#define NodePath_C_clear_effects_v_p NodePath$116$clear_effects
#endif

// C++ _inCAAAAu8Qi(NodePath const &other, Thread *current_thread) ==> NodePath$_$get_transform(NodePath const *param0, NodePath const *param1, Thread *param2)(NodePath const *, NodePath const *, Thread *)
extern char ** NodePath$117$get_transform(NodePath const *self, NodePath const *other, Thread *current_thread);

#if INDEX
#define NodePath_C_get_transform_p_ppp NodePath$117$get_transform
#endif

// C++ _inCAAAA25iF(NodePath const &other) ==> NodePath$_$get_transform(NodePath const *param0, NodePath const *param1)(NodePath const *, NodePath const *)
extern char ** NodePath$118$get_transform(NodePath const *self, NodePath const *other);

#if INDEX
#define NodePath_C_get_transform_p_pp NodePath$118$get_transform
#endif

// C++ _inCAAAA_qAT(Thread *current_thread) ==> NodePath$_$get_transform(NodePath const *param0, Thread *param1)(NodePath const *, Thread *)
extern TransformState const * NodePath$119$get_transform(NodePath const *self, Thread *current_thread);
// COLLISION : NodePath_C_get_transform_p_pp NodePath$119$get_transform

// C++ _inCAAAAbFez() ==> NodePath$_$get_transform(NodePath const *param0)(NodePath const *)
extern TransformState const * NodePath$120$get_transform(NodePath const *self);

#if INDEX
#define NodePath_C_get_transform_p_p NodePath$120$get_transform
#endif

// C++ _inCAAAA4KfH(NodePath const &other, Thread *current_thread) ==> NodePath$_$clear_transform(NodePath *param0, NodePath const *param1, Thread *param2)(NodePath *, NodePath const *, Thread *)
extern void NodePath$121$clear_transform(NodePath *self, NodePath const *other, Thread *current_thread);

#if INDEX
#define NodePath_C_clear_transform_v_ppp NodePath$121$clear_transform
#endif

// C++ _inCAAAAQssv(NodePath const &other) ==> NodePath$_$clear_transform(NodePath *param0, NodePath const *param1)(NodePath *, NodePath const *)
extern void NodePath$122$clear_transform(NodePath *self, NodePath const *other);

#if INDEX
#define NodePath_C_clear_transform_v_pp NodePath$122$clear_transform
#endif

// C++ _inCAAAAw8h9(Thread *current_thread) ==> NodePath$_$clear_transform(NodePath *param0, Thread *param1)(NodePath *, Thread *)
extern void NodePath$123$clear_transform(NodePath *self, Thread *current_thread);
// COLLISION : NodePath_C_clear_transform_v_pp NodePath$123$clear_transform

// C++ _inCAAAAH5x7() ==> NodePath$_$clear_transform(NodePath *param0)(NodePath *)
extern void NodePath$124$clear_transform(NodePath *self);

#if INDEX
#define NodePath_C_clear_transform_v_p NodePath$124$clear_transform
#endif

// C++ _inCAAAAV_k2(NodePath const &other, TransformState const *transform, Thread *current_thread) ==> NodePath$_$set_transform(NodePath *param0, NodePath const *param1, TransformState const *param2, Thread *param3)(NodePath *, NodePath const *, TransformState const *, Thread *)
extern void NodePath$125$set_transform(NodePath *self, NodePath const *other, TransformState const *transform, Thread *current_thread);

#if INDEX
#define NodePath_C_set_transform_v_pppp NodePath$125$set_transform
#endif

// C++ _inCAAAAOC4G(NodePath const &other, TransformState const *transform) ==> NodePath$_$set_transform(NodePath *param0, NodePath const *param1, TransformState const *param2)(NodePath *, NodePath const *, TransformState const *)
extern void NodePath$126$set_transform(NodePath *self, NodePath const *other, TransformState const *transform);

#if INDEX
#define NodePath_C_set_transform_v_ppp NodePath$126$set_transform
#endif

// C++ _inCAAAACDwY(TransformState const *transform, Thread *current_thread) ==> NodePath$_$set_transform(NodePath *param0, TransformState const *param1, Thread *param2)(NodePath *, TransformState const *, Thread *)
extern void NodePath$127$set_transform(NodePath *self, TransformState const *transform, Thread *current_thread);
// COLLISION : NodePath_C_set_transform_v_ppp NodePath$127$set_transform

// C++ _inCAAAAOl1c(TransformState const *transform) ==> NodePath$_$set_transform(NodePath *param0, TransformState const *param1)(NodePath *, TransformState const *)
extern void NodePath$128$set_transform(NodePath *self, TransformState const *transform);

#if INDEX
#define NodePath_C_set_transform_v_pp NodePath$128$set_transform
#endif

// C++ _inCAAAAkhio(Thread *current_thread) ==> NodePath$_$get_net_transform(NodePath const *param0, Thread *param1)(NodePath const *, Thread *)
extern char ** NodePath$129$get_net_transform(NodePath const *self, Thread *current_thread);

#if INDEX
#define NodePath_C_get_net_transform_p_pp NodePath$129$get_net_transform
#endif

// C++ _inCAAAAdCm_() ==> NodePath$_$get_net_transform(NodePath const *param0)(NodePath const *)
extern char ** NodePath$130$get_net_transform(NodePath const *self);

#if INDEX
#define NodePath_C_get_net_transform_p_p NodePath$130$get_net_transform
#endif

// C++ _inCAAAAPA07(NodePath const &other, Thread *current_thread) ==> NodePath$_$get_prev_transform(NodePath const *param0, NodePath const *param1, Thread *param2)(NodePath const *, NodePath const *, Thread *)
extern char ** NodePath$131$get_prev_transform(NodePath const *self, NodePath const *other, Thread *current_thread);

#if INDEX
#define NodePath_C_get_prev_transform_p_ppp NodePath$131$get_prev_transform
#endif

// C++ _inCAAAAIeYC(NodePath const &other) ==> NodePath$_$get_prev_transform(NodePath const *param0, NodePath const *param1)(NodePath const *, NodePath const *)
extern char ** NodePath$132$get_prev_transform(NodePath const *self, NodePath const *other);

#if INDEX
#define NodePath_C_get_prev_transform_p_pp NodePath$132$get_prev_transform
#endif

// C++ _inCAAAAUJSd(Thread *current_thread) ==> NodePath$_$get_prev_transform(NodePath const *param0, Thread *param1)(NodePath const *, Thread *)
extern TransformState const * NodePath$133$get_prev_transform(NodePath const *self, Thread *current_thread);
// COLLISION : NodePath_C_get_prev_transform_p_pp NodePath$133$get_prev_transform

// C++ _inCAAAAaXOe() ==> NodePath$_$get_prev_transform(NodePath const *param0)(NodePath const *)
extern TransformState const * NodePath$134$get_prev_transform(NodePath const *self);

#if INDEX
#define NodePath_C_get_prev_transform_p_p NodePath$134$get_prev_transform
#endif

// C++ _inCAAAAbxkj(NodePath const &other, TransformState const *transform, Thread *current_thread) ==> NodePath$_$set_prev_transform(NodePath *param0, NodePath const *param1, TransformState const *param2, Thread *param3)(NodePath *, NodePath const *, TransformState const *, Thread *)
extern void NodePath$135$set_prev_transform(NodePath *self, NodePath const *other, TransformState const *transform, Thread *current_thread);

#if INDEX
#define NodePath_C_set_prev_transform_v_pppp NodePath$135$set_prev_transform
#endif

// C++ _inCAAAAKELE(NodePath const &other, TransformState const *transform) ==> NodePath$_$set_prev_transform(NodePath *param0, NodePath const *param1, TransformState const *param2)(NodePath *, NodePath const *, TransformState const *)
extern void NodePath$136$set_prev_transform(NodePath *self, NodePath const *other, TransformState const *transform);

#if INDEX
#define NodePath_C_set_prev_transform_v_ppp NodePath$136$set_prev_transform
#endif

// C++ _inCAAAATR3n(TransformState const *transform, Thread *current_thread) ==> NodePath$_$set_prev_transform(NodePath *param0, TransformState const *param1, Thread *param2)(NodePath *, TransformState const *, Thread *)
extern void NodePath$137$set_prev_transform(NodePath *self, TransformState const *transform, Thread *current_thread);
// COLLISION : NodePath_C_set_prev_transform_v_ppp NodePath$137$set_prev_transform

// C++ _inCAAAAgmBw(TransformState const *transform) ==> NodePath$_$set_prev_transform(NodePath *param0, TransformState const *param1)(NodePath *, TransformState const *)
extern void NodePath$138$set_prev_transform(NodePath *self, TransformState const *transform);

#if INDEX
#define NodePath_C_set_prev_transform_v_pp NodePath$138$set_prev_transform
#endif

// C++ _inCAAAAU8Kx(Thread *current_thread) ==> NodePath$_$get_net_prev_transform(NodePath const *param0, Thread *param1)(NodePath const *, Thread *)
extern char ** NodePath$139$get_net_prev_transform(NodePath const *self, Thread *current_thread);

#if INDEX
#define NodePath_C_get_net_prev_transform_p_pp NodePath$139$get_net_prev_transform
#endif

// C++ _inCAAAAq_Pd() ==> NodePath$_$get_net_prev_transform(NodePath const *param0)(NodePath const *)
extern char ** NodePath$140$get_net_prev_transform(NodePath const *self);

#if INDEX
#define NodePath_C_get_net_prev_transform_p_p NodePath$140$get_net_prev_transform
#endif

// C++ _inCAAAA3i6b(LVecBase3 const &pos) ==> NodePath$_$set_pos(NodePath *param0, LVecBase3 const *param1)(NodePath *, LVecBase3 const *)
extern void NodePath$141$set_pos(NodePath *self, LVecBase3 const *pos);

#if INDEX
#define NodePath_C_set_pos_v_pp NodePath$141$set_pos
#endif

// C++ _inCAAAAXD9n(NodePath const &other, LVecBase3 const &pos) ==> NodePath$_$set_pos(NodePath *param0, NodePath const *param1, LVecBase3 const *param2)(NodePath *, NodePath const *, LVecBase3 const *)
extern void NodePath$142$set_pos(NodePath *self, NodePath const *other, LVecBase3 const *pos);

#if INDEX
#define NodePath_C_set_pos_v_ppp NodePath$142$set_pos
#endif

// C++ _inCAAAAH3iU(NodePath const &other, PN_stdfloat x, PN_stdfloat y, PN_stdfloat z) ==> NodePath$_$set_pos(NodePath *param0, NodePath const *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4)(NodePath *, NodePath const *, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void NodePath$143$set_pos(NodePath *self, NodePath const *other, PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);

#if INDEX
#define NodePath_C_set_pos_v_ppfff NodePath$143$set_pos
#endif

// C++ _inCAAAAoMAH(PN_stdfloat x, PN_stdfloat y, PN_stdfloat z) ==> NodePath$_$set_pos(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3)(NodePath *, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void NodePath$144$set_pos(NodePath *self, PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);

#if INDEX
#define NodePath_C_set_pos_v_pfff NodePath$144$set_pos
#endif

// C++ _inCAAAAUVBV(NodePath const &other, PN_stdfloat x) ==> NodePath$_$set_x(NodePath *param0, NodePath const *param1, PN_stdfloat param2)(NodePath *, NodePath const *, PN_stdfloat)
extern void NodePath$145$set_x(NodePath *self, NodePath const *other, PN_stdfloat x);

#if INDEX
#define NodePath_C_set_x_v_ppf NodePath$145$set_x
#endif

// C++ _inCAAAAV_sG(PN_stdfloat x) ==> NodePath$_$set_x(NodePath *param0, PN_stdfloat param1)(NodePath *, PN_stdfloat)
extern void NodePath$146$set_x(NodePath *self, PN_stdfloat x);

#if INDEX
#define NodePath_C_set_x_v_pf NodePath$146$set_x
#endif

// C++ _inCAAAA2pBF(NodePath const &other, PN_stdfloat y) ==> NodePath$_$set_y(NodePath *param0, NodePath const *param1, PN_stdfloat param2)(NodePath *, NodePath const *, PN_stdfloat)
extern void NodePath$147$set_y(NodePath *self, NodePath const *other, PN_stdfloat y);

#if INDEX
#define NodePath_C_set_y_v_ppf NodePath$147$set_y
#endif

// C++ _inCAAAAyss2(PN_stdfloat y) ==> NodePath$_$set_y(NodePath *param0, PN_stdfloat param1)(NodePath *, PN_stdfloat)
extern void NodePath$148$set_y(NodePath *self, PN_stdfloat y);

#if INDEX
#define NodePath_C_set_y_v_pf NodePath$148$set_y
#endif

// C++ _inCAAAAX8B1(NodePath const &other, PN_stdfloat z) ==> NodePath$_$set_z(NodePath *param0, NodePath const *param1, PN_stdfloat param2)(NodePath *, NodePath const *, PN_stdfloat)
extern void NodePath$149$set_z(NodePath *self, NodePath const *other, PN_stdfloat z);

#if INDEX
#define NodePath_C_set_z_v_ppf NodePath$149$set_z
#endif

// C++ _inCAAAAQQsm(PN_stdfloat z) ==> NodePath$_$set_z(NodePath *param0, PN_stdfloat param1)(NodePath *, PN_stdfloat)
extern void NodePath$150$set_z(NodePath *self, PN_stdfloat z);

#if INDEX
#define NodePath_C_set_z_v_pf NodePath$150$set_z
#endif

// C++ _inCAAAAlMna(LVecBase3 const &pos) ==> NodePath$_$set_fluid_pos(NodePath *param0, LVecBase3 const *param1)(NodePath *, LVecBase3 const *)
extern void NodePath$151$set_fluid_pos(NodePath *self, LVecBase3 const *pos);

#if INDEX
#define NodePath_C_set_fluid_pos_v_pp NodePath$151$set_fluid_pos
#endif

// C++ _inCAAAAXcgd(NodePath const &other, LVecBase3 const &pos) ==> NodePath$_$set_fluid_pos(NodePath *param0, NodePath const *param1, LVecBase3 const *param2)(NodePath *, NodePath const *, LVecBase3 const *)
extern void NodePath$152$set_fluid_pos(NodePath *self, NodePath const *other, LVecBase3 const *pos);

#if INDEX
#define NodePath_C_set_fluid_pos_v_ppp NodePath$152$set_fluid_pos
#endif

// C++ _inCAAAAIRoJ(NodePath const &other, PN_stdfloat x, PN_stdfloat y, PN_stdfloat z) ==> NodePath$_$set_fluid_pos(NodePath *param0, NodePath const *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4)(NodePath *, NodePath const *, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void NodePath$153$set_fluid_pos(NodePath *self, NodePath const *other, PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);

#if INDEX
#define NodePath_C_set_fluid_pos_v_ppfff NodePath$153$set_fluid_pos
#endif

// C++ _inCAAAAR0jl(PN_stdfloat x, PN_stdfloat y, PN_stdfloat z) ==> NodePath$_$set_fluid_pos(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3)(NodePath *, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void NodePath$154$set_fluid_pos(NodePath *self, PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);

#if INDEX
#define NodePath_C_set_fluid_pos_v_pfff NodePath$154$set_fluid_pos
#endif

// C++ _inCAAAAhjSk(NodePath const &other, PN_stdfloat x) ==> NodePath$_$set_fluid_x(NodePath *param0, NodePath const *param1, PN_stdfloat param2)(NodePath *, NodePath const *, PN_stdfloat)
extern void NodePath$155$set_fluid_x(NodePath *self, NodePath const *other, PN_stdfloat x);

#if INDEX
#define NodePath_C_set_fluid_x_v_ppf NodePath$155$set_fluid_x
#endif

// C++ _inCAAAAiqfN(PN_stdfloat x) ==> NodePath$_$set_fluid_x(NodePath *param0, PN_stdfloat param1)(NodePath *, PN_stdfloat)
extern void NodePath$156$set_fluid_x(NodePath *self, PN_stdfloat x);

#if INDEX
#define NodePath_C_set_fluid_x_v_pf NodePath$156$set_fluid_x
#endif

// C++ _inCAAAARBlk(NodePath const &other, PN_stdfloat y) ==> NodePath$_$set_fluid_y(NodePath *param0, NodePath const *param1, PN_stdfloat param2)(NodePath *, NodePath const *, PN_stdfloat)
extern void NodePath$157$set_fluid_y(NodePath *self, NodePath const *other, PN_stdfloat y);

#if INDEX
#define NodePath_C_set_fluid_y_v_ppf NodePath$157$set_fluid_y
#endif

// C++ _inCAAAAyIyN(PN_stdfloat y) ==> NodePath$_$set_fluid_y(NodePath *param0, PN_stdfloat param1)(NodePath *, PN_stdfloat)
extern void NodePath$158$set_fluid_y(NodePath *self, PN_stdfloat y);

#if INDEX
#define NodePath_C_set_fluid_y_v_pf NodePath$158$set_fluid_y
#endif

// C++ _inCAAAABf5k(NodePath const &other, PN_stdfloat z) ==> NodePath$_$set_fluid_z(NodePath *param0, NodePath const *param1, PN_stdfloat param2)(NodePath *, NodePath const *, PN_stdfloat)
extern void NodePath$159$set_fluid_z(NodePath *self, NodePath const *other, PN_stdfloat z);

#if INDEX
#define NodePath_C_set_fluid_z_v_ppf NodePath$159$set_fluid_z
#endif

// C++ _inCAAAACvGO(PN_stdfloat z) ==> NodePath$_$set_fluid_z(NodePath *param0, PN_stdfloat param1)(NodePath *, PN_stdfloat)
extern void NodePath$160$set_fluid_z(NodePath *self, PN_stdfloat z);

#if INDEX
#define NodePath_C_set_fluid_z_v_pf NodePath$160$set_fluid_z
#endif

// C++ _inCAAAAOo4T() ==> NodePath$_$get_pos(NodePath const *param0)(NodePath const *)
extern LPoint3 * NodePath$161$get_pos(NodePath const *self);

#if INDEX
#define NodePath_C_get_pos_p_p NodePath$161$get_pos
#endif

// C++ _inCAAAACfLu(NodePath const &other) ==> NodePath$_$get_pos(NodePath const *param0, NodePath const *param1)(NodePath const *, NodePath const *)
extern LPoint3 * NodePath$162$get_pos(NodePath const *self, NodePath const *other);

#if INDEX
#define NodePath_C_get_pos_p_pp NodePath$162$get_pos
#endif

// C++ _inCAAAA0lol() ==> NodePath$_$get_x(NodePath const *param0)(NodePath const *)
extern PN_stdfloat NodePath$163$get_x(NodePath const *self);

#if INDEX
#define NodePath_C_get_x_f_p NodePath$163$get_x
#endif

// C++ _inCAAAAsQU6(NodePath const &other) ==> NodePath$_$get_x(NodePath const *param0, NodePath const *param1)(NodePath const *, NodePath const *)
extern PN_stdfloat NodePath$164$get_x(NodePath const *self, NodePath const *other);

#if INDEX
#define NodePath_C_get_x_f_pp NodePath$164$get_x
#endif

// C++ _inCAAAAaSpV() ==> NodePath$_$get_y(NodePath const *param0)(NodePath const *)
extern PN_stdfloat NodePath$165$get_y(NodePath const *self);

#if INDEX
#define NodePath_C_get_y_f_p NodePath$165$get_y
#endif

// C++ _inCAAAAKEUq(NodePath const &other) ==> NodePath$_$get_y(NodePath const *param0, NodePath const *param1)(NodePath const *, NodePath const *)
extern PN_stdfloat NodePath$166$get_y(NodePath const *self, NodePath const *other);

#if INDEX
#define NodePath_C_get_y_f_pp NodePath$166$get_y
#endif

// C++ _inCAAAAxcoF() ==> NodePath$_$get_z(NodePath const *param0)(NodePath const *)
extern PN_stdfloat NodePath$167$get_z(NodePath const *self);

#if INDEX
#define NodePath_C_get_z_f_p NodePath$167$get_z
#endif

// C++ _inCAAAAo5Ua(NodePath const &other) ==> NodePath$_$get_z(NodePath const *param0, NodePath const *param1)(NodePath const *, NodePath const *)
extern PN_stdfloat NodePath$168$get_z(NodePath const *self, NodePath const *other);

#if INDEX
#define NodePath_C_get_z_f_pp NodePath$168$get_z
#endif

// C++ _inCAAAAdM8H() ==> NodePath$_$get_pos_delta(NodePath const *param0)(NodePath const *)
extern LVector3 * NodePath$169$get_pos_delta(NodePath const *self);

#if INDEX
#define NodePath_C_get_pos_delta_p_p NodePath$169$get_pos_delta
#endif

// C++ _inCAAAAjYBa(NodePath const &other) ==> NodePath$_$get_pos_delta(NodePath const *param0, NodePath const *param1)(NodePath const *, NodePath const *)
extern LVector3 * NodePath$170$get_pos_delta(NodePath const *self, NodePath const *other);

#if INDEX
#define NodePath_C_get_pos_delta_p_pp NodePath$170$get_pos_delta
#endif

// C++ _inCAAAAZaLX(LVecBase3 const &hpr) ==> NodePath$_$set_hpr(NodePath *param0, LVecBase3 const *param1)(NodePath *, LVecBase3 const *)
extern void NodePath$171$set_hpr(NodePath *self, LVecBase3 const *hpr);

#if INDEX
#define NodePath_C_set_hpr_v_pp NodePath$171$set_hpr
#endif

// C++ _inCAAAA97Lj(NodePath const &other, LVecBase3 const &hpr) ==> NodePath$_$set_hpr(NodePath *param0, NodePath const *param1, LVecBase3 const *param2)(NodePath *, NodePath const *, LVecBase3 const *)
extern void NodePath$172$set_hpr(NodePath *self, NodePath const *other, LVecBase3 const *hpr);

#if INDEX
#define NodePath_C_set_hpr_v_ppp NodePath$172$set_hpr
#endif

// C++ _inCAAAAd_xP(NodePath const &other, PN_stdfloat h, PN_stdfloat p, PN_stdfloat r) ==> NodePath$_$set_hpr(NodePath *param0, NodePath const *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4)(NodePath *, NodePath const *, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void NodePath$173$set_hpr(NodePath *self, NodePath const *other, PN_stdfloat h, PN_stdfloat p, PN_stdfloat r);

#if INDEX
#define NodePath_C_set_hpr_v_ppfff NodePath$173$set_hpr
#endif

// C++ _inCAAAAGFPC(PN_stdfloat h, PN_stdfloat p, PN_stdfloat r) ==> NodePath$_$set_hpr(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3)(NodePath *, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void NodePath$174$set_hpr(NodePath *self, PN_stdfloat h, PN_stdfloat p, PN_stdfloat r);

#if INDEX
#define NodePath_C_set_hpr_v_pfff NodePath$174$set_hpr
#endif

// C++ _inCAAAA4d8U(NodePath const &other, PN_stdfloat h) ==> NodePath$_$set_h(NodePath *param0, NodePath const *param1, PN_stdfloat param2)(NodePath *, NodePath const *, PN_stdfloat)
extern void NodePath$175$set_h(NodePath *self, NodePath const *other, PN_stdfloat h);

#if INDEX
#define NodePath_C_set_h_v_ppf NodePath$175$set_h
#endif

// C++ _inCAAAAJHoG(PN_stdfloat h) ==> NodePath$_$set_h(NodePath *param0, PN_stdfloat param1)(NodePath *, PN_stdfloat)
extern void NodePath$176$set_h(NodePath *self, PN_stdfloat h);

#if INDEX
#define NodePath_C_set_h_v_pf NodePath$176$set_h
#endif

// C++ _inCAAAAmx_U(NodePath const &other, PN_stdfloat p) ==> NodePath$_$set_p(NodePath *param0, NodePath const *param1, PN_stdfloat param2)(NodePath *, NodePath const *, PN_stdfloat)
extern void NodePath$177$set_p(NodePath *self, NodePath const *other, PN_stdfloat p);

#if INDEX
#define NodePath_C_set_p_v_ppf NodePath$177$set_p
#endif

// C++ _inCAAAAbbqG(PN_stdfloat p) ==> NodePath$_$set_p(NodePath *param0, PN_stdfloat param1)(NodePath *, PN_stdfloat)
extern void NodePath$178$set_p(NodePath *self, PN_stdfloat p);

#if INDEX
#define NodePath_C_set_p_v_pf NodePath$178$set_p
#endif

// C++ _inCAAAAlY_0(NodePath const &other, PN_stdfloat r) ==> NodePath$_$set_r(NodePath *param0, NodePath const *param1, PN_stdfloat param2)(NodePath *, NodePath const *, PN_stdfloat)
extern void NodePath$179$set_r(NodePath *self, NodePath const *other, PN_stdfloat r);

#if INDEX
#define NodePath_C_set_r_v_ppf NodePath$179$set_r
#endif

// C++ _inCAAAAe0qm(PN_stdfloat r) ==> NodePath$_$set_r(NodePath *param0, PN_stdfloat param1)(NodePath *, PN_stdfloat)
extern void NodePath$180$set_r(NodePath *self, PN_stdfloat r);

#if INDEX
#define NodePath_C_set_r_v_pf NodePath$180$set_r
#endif

// C++ _inCAAAAkhJP() ==> NodePath$_$get_hpr(NodePath const *param0)(NodePath const *)
extern LVecBase3 * NodePath$181$get_hpr(NodePath const *self);

#if INDEX
#define NodePath_C_get_hpr_p_p NodePath$181$get_hpr
#endif

// C++ _inCAAAAYUap(NodePath const &other) ==> NodePath$_$get_hpr(NodePath const *param0, NodePath const *param1)(NodePath const *, NodePath const *)
extern LVecBase3 * NodePath$182$get_hpr(NodePath const *self, NodePath const *other);

#if INDEX
#define NodePath_C_get_hpr_p_pp NodePath$182$get_hpr
#endif

// C++ _inCAAAAQtjl() ==> NodePath$_$get_h(NodePath const *param0)(NodePath const *)
extern PN_stdfloat NodePath$183$get_h(NodePath const *self);

#if INDEX
#define NodePath_C_get_h_f_p NodePath$183$get_h
#endif

// C++ _inCAAAAAZP6(NodePath const &other) ==> NodePath$_$get_h(NodePath const *param0, NodePath const *param1)(NodePath const *, NodePath const *)
extern PN_stdfloat NodePath$184$get_h(NodePath const *self, NodePath const *other);

#if INDEX
#define NodePath_C_get_h_f_pp NodePath$184$get_h
#endif

// C++ _inCAAAACJll() ==> NodePath$_$get_p(NodePath const *param0)(NodePath const *)
extern PN_stdfloat NodePath$185$get_p(NodePath const *self);

#if INDEX
#define NodePath_C_get_p_f_p NodePath$185$get_p
#endif

// C++ _inCAAAAS1R6(NodePath const &other) ==> NodePath$_$get_p(NodePath const *param0, NodePath const *param1)(NodePath const *, NodePath const *)
extern PN_stdfloat NodePath$186$get_p(NodePath const *self, NodePath const *other);

#if INDEX
#define NodePath_C_get_p_f_pp NodePath$186$get_p
#endif

// C++ _inCAAAAHwlF() ==> NodePath$_$get_r(NodePath const *param0)(NodePath const *)
extern PN_stdfloat NodePath$187$get_r(NodePath const *self);

#if INDEX
#define NodePath_C_get_r_f_p NodePath$187$get_r
#endif

// C++ _inCAAAAWcRa(NodePath const &other) ==> NodePath$_$get_r(NodePath const *param0, NodePath const *param1)(NodePath const *, NodePath const *)
extern PN_stdfloat NodePath$188$get_r(NodePath const *self, NodePath const *other);

#if INDEX
#define NodePath_C_get_r_f_pp NodePath$188$get_r
#endif

// C++ _inCAAAAdE08(LQuaternion const &quat) ==> NodePath$_$set_quat(NodePath *param0, LQuaternion const *param1)(NodePath *, LQuaternion const *)
extern void NodePath$189$set_quat(NodePath *self, LQuaternion const *quat);

#if INDEX
#define NodePath_C_set_quat_v_pp NodePath$189$set_quat
#endif

// C++ _inCAAAAyWJG(NodePath const &other, LQuaternion const &quat) ==> NodePath$_$set_quat(NodePath *param0, NodePath const *param1, LQuaternion const *param2)(NodePath *, NodePath const *, LQuaternion const *)
extern void NodePath$190$set_quat(NodePath *self, NodePath const *other, LQuaternion const *quat);

#if INDEX
#define NodePath_C_set_quat_v_ppp NodePath$190$set_quat
#endif

// C++ _inCAAAAwDPW() ==> NodePath$_$get_quat(NodePath const *param0)(NodePath const *)
extern LQuaternion * NodePath$191$get_quat(NodePath const *self);

#if INDEX
#define NodePath_C_get_quat_p_p NodePath$191$get_quat
#endif

// C++ _inCAAAACURf(NodePath const &other) ==> NodePath$_$get_quat(NodePath const *param0, NodePath const *param1)(NodePath const *, NodePath const *)
extern LQuaternion * NodePath$192$get_quat(NodePath const *self, NodePath const *other);

#if INDEX
#define NodePath_C_get_quat_p_pp NodePath$192$get_quat
#endif

// C++ _inCAAAA0C60(LVecBase3 const &scale) ==> NodePath$_$set_scale(NodePath *param0, LVecBase3 const *param1)(NodePath *, LVecBase3 const *)
extern void NodePath$193$set_scale(NodePath *self, LVecBase3 const *scale);

#if INDEX
#define NodePath_C_set_scale_v_pp NodePath$193$set_scale
#endif

// C++ _inCAAAAy9Ck(NodePath const &other, LVecBase3 const &scale) ==> NodePath$_$set_scale(NodePath *param0, NodePath const *param1, LVecBase3 const *param2)(NodePath *, NodePath const *, LVecBase3 const *)
extern void NodePath$194$set_scale(NodePath *self, NodePath const *other, LVecBase3 const *scale);

#if INDEX
#define NodePath_C_set_scale_v_ppp NodePath$194$set_scale
#endif

// C++ _inCAAAAUeUW(NodePath const &other, PN_stdfloat scale) ==> NodePath$_$set_scale(NodePath *param0, NodePath const *param1, PN_stdfloat param2)(NodePath *, NodePath const *, PN_stdfloat)
extern void NodePath$195$set_scale(NodePath *self, NodePath const *other, PN_stdfloat scale);

#if INDEX
#define NodePath_C_set_scale_v_ppf NodePath$195$set_scale
#endif

// C++ _inCAAAAYR8m(NodePath const &other, PN_stdfloat sx, PN_stdfloat sy, PN_stdfloat sz) ==> NodePath$_$set_scale(NodePath *param0, NodePath const *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4)(NodePath *, NodePath const *, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void NodePath$196$set_scale(NodePath *self, NodePath const *other, PN_stdfloat sx, PN_stdfloat sy, PN_stdfloat sz);

#if INDEX
#define NodePath_C_set_scale_v_ppfff NodePath$196$set_scale
#endif

// C++ _inCAAAAoedx(PN_stdfloat scale) ==> NodePath$_$set_scale(NodePath *param0, PN_stdfloat param1)(NodePath *, PN_stdfloat)
extern void NodePath$197$set_scale(NodePath *self, PN_stdfloat scale);

#if INDEX
#define NodePath_C_set_scale_v_pf NodePath$197$set_scale
#endif

// C++ _inCAAAAWJll(PN_stdfloat sx, PN_stdfloat sy, PN_stdfloat sz) ==> NodePath$_$set_scale(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3)(NodePath *, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void NodePath$198$set_scale(NodePath *self, PN_stdfloat sx, PN_stdfloat sy, PN_stdfloat sz);

#if INDEX
#define NodePath_C_set_scale_v_pfff NodePath$198$set_scale
#endif

// C++ _inCAAAA6fYm(NodePath const &other, PN_stdfloat sx) ==> NodePath$_$set_sx(NodePath *param0, NodePath const *param1, PN_stdfloat param2)(NodePath *, NodePath const *, PN_stdfloat)
extern void NodePath$199$set_sx(NodePath *self, NodePath const *other, PN_stdfloat sx);

#if INDEX
#define NodePath_C_set_sx_v_ppf NodePath$199$set_sx
#endif

// C++ _inCAAAAOtAb(PN_stdfloat sx) ==> NodePath$_$set_sx(NodePath *param0, PN_stdfloat param1)(NodePath *, PN_stdfloat)
extern void NodePath$200$set_sx(NodePath *self, PN_stdfloat sx);

#if INDEX
#define NodePath_C_set_sx_v_pf NodePath$200$set_sx
#endif

// C++ _inCAAAAiMim(NodePath const &other, PN_stdfloat sy) ==> NodePath$_$set_sy(NodePath *param0, NodePath const *param1, PN_stdfloat param2)(NodePath *, NodePath const *, PN_stdfloat)
extern void NodePath$201$set_sy(NodePath *self, NodePath const *other, PN_stdfloat sy);

#if INDEX
#define NodePath_C_set_sy_v_ppf NodePath$201$set_sy
#endif

// C++ _inCAAAAWeKb(PN_stdfloat sy) ==> NodePath$_$set_sy(NodePath *param0, PN_stdfloat param1)(NodePath *, PN_stdfloat)
extern void NodePath$202$set_sy(NodePath *self, PN_stdfloat sy);

#if INDEX
#define NodePath_C_set_sy_v_pf NodePath$202$set_sy
#endif

// C++ _inCAAAAq9rm(NodePath const &other, PN_stdfloat sz) ==> NodePath$_$set_sz(NodePath *param0, NodePath const *param1, PN_stdfloat param2)(NodePath *, NodePath const *, PN_stdfloat)
extern void NodePath$203$set_sz(NodePath *self, NodePath const *other, PN_stdfloat sz);

#if INDEX
#define NodePath_C_set_sz_v_ppf NodePath$203$set_sz
#endif

// C++ _inCAAAAePUb(PN_stdfloat sz) ==> NodePath$_$set_sz(NodePath *param0, PN_stdfloat param1)(NodePath *, PN_stdfloat)
extern void NodePath$204$set_sz(NodePath *self, PN_stdfloat sz);

#if INDEX
#define NodePath_C_set_sz_v_pf NodePath$204$set_sz
#endif

// C++ _inCAAAA5djS() ==> NodePath$_$get_scale(NodePath const *param0)(NodePath const *)
extern LVecBase3 * NodePath$205$get_scale(NodePath const *self);

#if INDEX
#define NodePath_C_get_scale_p_p NodePath$205$get_scale
#endif

// C++ _inCAAAAam1z(NodePath const &other) ==> NodePath$_$get_scale(NodePath const *param0, NodePath const *param1)(NodePath const *, NodePath const *)
extern LVecBase3 * NodePath$206$get_scale(NodePath const *self, NodePath const *other);

#if INDEX
#define NodePath_C_get_scale_p_pp NodePath$206$get_scale
#endif

// C++ _inCAAAAn63U() ==> NodePath$_$get_sx(NodePath const *param0)(NodePath const *)
extern PN_stdfloat NodePath$207$get_sx(NodePath const *self);

#if INDEX
#define NodePath_C_get_sx_f_p NodePath$207$get_sx
#endif

// C++ _inCAAAACXrr(NodePath const &other) ==> NodePath$_$get_sx(NodePath const *param0, NodePath const *param1)(NodePath const *, NodePath const *)
extern PN_stdfloat NodePath$208$get_sx(NodePath const *self, NodePath const *other);

#if INDEX
#define NodePath_C_get_sx_f_pp NodePath$208$get_sx
#endif

// C++ _inCAAAAvrBV() ==> NodePath$_$get_sy(NodePath const *param0)(NodePath const *)
extern PN_stdfloat NodePath$209$get_sy(NodePath const *self);

#if INDEX
#define NodePath_C_get_sy_f_p NodePath$209$get_sy
#endif

// C++ _inCAAAAKE1r(NodePath const &other) ==> NodePath$_$get_sy(NodePath const *param0, NodePath const *param1)(NodePath const *, NodePath const *)
extern PN_stdfloat NodePath$210$get_sy(NodePath const *self, NodePath const *other);

#if INDEX
#define NodePath_C_get_sy_f_pp NodePath$210$get_sy
#endif

// C++ _inCAAAAXULV() ==> NodePath$_$get_sz(NodePath const *param0)(NodePath const *)
extern PN_stdfloat NodePath$211$get_sz(NodePath const *self);

#if INDEX
#define NodePath_C_get_sz_f_p NodePath$211$get_sz
#endif

// C++ _inCAAAAS18r(NodePath const &other) ==> NodePath$_$get_sz(NodePath const *param0, NodePath const *param1)(NodePath const *, NodePath const *)
extern PN_stdfloat NodePath$212$get_sz(NodePath const *self, NodePath const *other);

#if INDEX
#define NodePath_C_get_sz_f_pp NodePath$212$get_sz
#endif

// C++ _inCAAAAz2zt(LVecBase3 const &shear) ==> NodePath$_$set_shear(NodePath *param0, LVecBase3 const *param1)(NodePath *, LVecBase3 const *)
extern void NodePath$213$set_shear(NodePath *self, LVecBase3 const *shear);

#if INDEX
#define NodePath_C_set_shear_v_pp NodePath$213$set_shear
#endif

// C++ _inCAAAAXu7c(NodePath const &other, LVecBase3 const &shear) ==> NodePath$_$set_shear(NodePath *param0, NodePath const *param1, LVecBase3 const *param2)(NodePath *, NodePath const *, LVecBase3 const *)
extern void NodePath$214$set_shear(NodePath *self, NodePath const *other, LVecBase3 const *shear);

#if INDEX
#define NodePath_C_set_shear_v_ppp NodePath$214$set_shear
#endif

// C++ _inCAAAAvF0f(NodePath const &other, PN_stdfloat shxy, PN_stdfloat shxz, PN_stdfloat shyz) ==> NodePath$_$set_shear(NodePath *param0, NodePath const *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4)(NodePath *, NodePath const *, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void NodePath$215$set_shear(NodePath *self, NodePath const *other, PN_stdfloat shxy, PN_stdfloat shxz, PN_stdfloat shyz);

#if INDEX
#define NodePath_C_set_shear_v_ppfff NodePath$215$set_shear
#endif

// C++ _inCAAAAz8de(PN_stdfloat shxy, PN_stdfloat shxz, PN_stdfloat shyz) ==> NodePath$_$set_shear(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3)(NodePath *, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void NodePath$216$set_shear(NodePath *self, PN_stdfloat shxy, PN_stdfloat shxz, PN_stdfloat shyz);

#if INDEX
#define NodePath_C_set_shear_v_pfff NodePath$216$set_shear
#endif

// C++ _inCAAAAqMme(NodePath const &other, PN_stdfloat shxy) ==> NodePath$_$set_shxy(NodePath *param0, NodePath const *param1, PN_stdfloat param2)(NodePath *, NodePath const *, PN_stdfloat)
extern void NodePath$217$set_shxy(NodePath *self, NodePath const *other, PN_stdfloat shxy);

#if INDEX
#define NodePath_C_set_shxy_v_ppf NodePath$217$set_shxy
#endif

// C++ _inCAAAAdaen(PN_stdfloat shxy) ==> NodePath$_$set_shxy(NodePath *param0, PN_stdfloat param1)(NodePath *, PN_stdfloat)
extern void NodePath$218$set_shxy(NodePath *self, PN_stdfloat shxy);

#if INDEX
#define NodePath_C_set_shxy_v_pf NodePath$218$set_shxy
#endif

// C++ _inCAAAAoM06(NodePath const &other, PN_stdfloat shxz) ==> NodePath$_$set_shxz(NodePath *param0, NodePath const *param1, PN_stdfloat param2)(NodePath *, NodePath const *, PN_stdfloat)
extern void NodePath$219$set_shxz(NodePath *self, NodePath const *other, PN_stdfloat shxz);

#if INDEX
#define NodePath_C_set_shxz_v_ppf NodePath$219$set_shxz
#endif

// C++ _inCAAAAaasD(PN_stdfloat shxz) ==> NodePath$_$set_shxz(NodePath *param0, PN_stdfloat param1)(NodePath *, PN_stdfloat)
extern void NodePath$220$set_shxz(NodePath *self, PN_stdfloat shxz);

#if INDEX
#define NodePath_C_set_shxz_v_pf NodePath$220$set_shxz
#endif

// C++ _inCAAAAogt_(NodePath const &other, PN_stdfloat shyz) ==> NodePath$_$set_shyz(NodePath *param0, NodePath const *param1, PN_stdfloat param2)(NodePath *, NodePath const *, PN_stdfloat)
extern void NodePath$221$set_shyz(NodePath *self, NodePath const *other, PN_stdfloat shyz);

#if INDEX
#define NodePath_C_set_shyz_v_ppf NodePath$221$set_shyz
#endif

// C++ _inCAAAAamkI(PN_stdfloat shyz) ==> NodePath$_$set_shyz(NodePath *param0, PN_stdfloat param1)(NodePath *, PN_stdfloat)
extern void NodePath$222$set_shyz(NodePath *self, PN_stdfloat shyz);

#if INDEX
#define NodePath_C_set_shyz_v_pf NodePath$222$set_shyz
#endif

// C++ _inCAAAAyRcL() ==> NodePath$_$get_shear(NodePath const *param0)(NodePath const *)
extern LVecBase3 * NodePath$223$get_shear(NodePath const *self);

#if INDEX
#define NodePath_C_get_shear_p_p NodePath$223$get_shear
#endif

// C++ _inCAAAAXxss(NodePath const &other) ==> NodePath$_$get_shear(NodePath const *param0, NodePath const *param1)(NodePath const *, NodePath const *)
extern LVecBase3 * NodePath$224$get_shear(NodePath const *self, NodePath const *other);

#if INDEX
#define NodePath_C_get_shear_p_pp NodePath$224$get_shear
#endif

// C++ _inCAAAA5jpx() ==> NodePath$_$get_shxy(NodePath const *param0)(NodePath const *)
extern PN_stdfloat NodePath$225$get_shxy(NodePath const *self);

#if INDEX
#define NodePath_C_get_shxy_f_p NodePath$225$get_shxy
#endif

// C++ _inCAAAAbLq6(NodePath const &other) ==> NodePath$_$get_shxy(NodePath const *param0, NodePath const *param1)(NodePath const *, NodePath const *)
extern PN_stdfloat NodePath$226$get_shxy(NodePath const *self, NodePath const *other);

#if INDEX
#define NodePath_C_get_shxy_f_pp NodePath$226$get_shxy
#endif

// C++ _inCAAAA8j3N() ==> NodePath$_$get_shxz(NodePath const *param0)(NodePath const *)
extern PN_stdfloat NodePath$227$get_shxz(NodePath const *self);

#if INDEX
#define NodePath_C_get_shxz_f_p NodePath$227$get_shxz
#endif

// C++ _inCAAAAWL4W(NodePath const &other) ==> NodePath$_$get_shxz(NodePath const *param0, NodePath const *param1)(NodePath const *, NodePath const *)
extern PN_stdfloat NodePath$228$get_shxz(NodePath const *self, NodePath const *other);

#if INDEX
#define NodePath_C_get_shxz_f_pp NodePath$228$get_shxz
#endif

// C++ _inCAAAA8PuS() ==> NodePath$_$get_shyz(NodePath const *param0)(NodePath const *)
extern PN_stdfloat NodePath$229$get_shyz(NodePath const *self);

#if INDEX
#define NodePath_C_get_shyz_f_p NodePath$229$get_shyz
#endif

// C++ _inCAAAAWXwb(NodePath const &other) ==> NodePath$_$get_shyz(NodePath const *param0, NodePath const *param1)(NodePath const *, NodePath const *)
extern PN_stdfloat NodePath$230$get_shyz(NodePath const *self, NodePath const *other);

#if INDEX
#define NodePath_C_get_shyz_f_pp NodePath$230$get_shyz
#endif

// C++ _inCAAAApP2N(LVecBase3 const &pos, LVecBase3 const &hpr) ==> NodePath$_$set_pos_hpr(NodePath *param0, LVecBase3 const *param1, LVecBase3 const *param2)(NodePath *, LVecBase3 const *, LVecBase3 const *)
extern void NodePath$231$set_pos_hpr(NodePath *self, LVecBase3 const *pos, LVecBase3 const *hpr);

#if INDEX
#define NodePath_C_set_pos_hpr_v_ppp NodePath$231$set_pos_hpr
#endif

// C++ _inCAAAAfJIB(NodePath const &other, LVecBase3 const &pos, LVecBase3 const &hpr) ==> NodePath$_$set_pos_hpr(NodePath *param0, NodePath const *param1, LVecBase3 const *param2, LVecBase3 const *param3)(NodePath *, NodePath const *, LVecBase3 const *, LVecBase3 const *)
extern void NodePath$232$set_pos_hpr(NodePath *self, NodePath const *other, LVecBase3 const *pos, LVecBase3 const *hpr);

#if INDEX
#define NodePath_C_set_pos_hpr_v_pppp NodePath$232$set_pos_hpr
#endif

// C++ _inCAAAAFQ5Y(NodePath const &other, PN_stdfloat x, PN_stdfloat y, PN_stdfloat z, PN_stdfloat h, PN_stdfloat p, PN_stdfloat r) ==> NodePath$_$set_pos_hpr(NodePath *param0, NodePath const *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5, PN_stdfloat param6, PN_stdfloat param7)(NodePath *, NodePath const *, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void NodePath$233$set_pos_hpr(NodePath *self, NodePath const *other, PN_stdfloat x, PN_stdfloat y, PN_stdfloat z, PN_stdfloat h, PN_stdfloat p, PN_stdfloat r);

#if INDEX
#define NodePath_C_set_pos_hpr_v_ppffffff NodePath$233$set_pos_hpr
#endif

// C++ _inCAAAAEAqj(PN_stdfloat x, PN_stdfloat y, PN_stdfloat z, PN_stdfloat h, PN_stdfloat p, PN_stdfloat r) ==> NodePath$_$set_pos_hpr(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5, PN_stdfloat param6)(NodePath *, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void NodePath$234$set_pos_hpr(NodePath *self, PN_stdfloat x, PN_stdfloat y, PN_stdfloat z, PN_stdfloat h, PN_stdfloat p, PN_stdfloat r);

#if INDEX
#define NodePath_C_set_pos_hpr_v_pffffff NodePath$234$set_pos_hpr
#endif

// C++ _inCAAAAbZLS(LVecBase3 const &pos, LQuaternion const &quat) ==> NodePath$_$set_pos_quat(NodePath *param0, LVecBase3 const *param1, LQuaternion const *param2)(NodePath *, LVecBase3 const *, LQuaternion const *)
extern void NodePath$235$set_pos_quat(NodePath *self, LVecBase3 const *pos, LQuaternion const *quat);

#if INDEX
#define NodePath_C_set_pos_quat_v_ppp NodePath$235$set_pos_quat
#endif

// C++ _inCAAAAOLQ7(NodePath const &other, LVecBase3 const &pos, LQuaternion const &quat) ==> NodePath$_$set_pos_quat(NodePath *param0, NodePath const *param1, LVecBase3 const *param2, LQuaternion const *param3)(NodePath *, NodePath const *, LVecBase3 const *, LQuaternion const *)
extern void NodePath$236$set_pos_quat(NodePath *self, NodePath const *other, LVecBase3 const *pos, LQuaternion const *quat);

#if INDEX
#define NodePath_C_set_pos_quat_v_pppp NodePath$236$set_pos_quat
#endif

// C++ _inCAAAAbUjX(LVecBase3 const &hpr, LVecBase3 const &scale) ==> NodePath$_$set_hpr_scale(NodePath *param0, LVecBase3 const *param1, LVecBase3 const *param2)(NodePath *, LVecBase3 const *, LVecBase3 const *)
extern void NodePath$237$set_hpr_scale(NodePath *self, LVecBase3 const *hpr, LVecBase3 const *scale);

#if INDEX
#define NodePath_C_set_hpr_scale_v_ppp NodePath$237$set_hpr_scale
#endif

// C++ _inCAAAAML6W(NodePath const &other, LVecBase3 const &hpr, LVecBase3 const &scale) ==> NodePath$_$set_hpr_scale(NodePath *param0, NodePath const *param1, LVecBase3 const *param2, LVecBase3 const *param3)(NodePath *, NodePath const *, LVecBase3 const *, LVecBase3 const *)
extern void NodePath$238$set_hpr_scale(NodePath *self, NodePath const *other, LVecBase3 const *hpr, LVecBase3 const *scale);

#if INDEX
#define NodePath_C_set_hpr_scale_v_pppp NodePath$238$set_hpr_scale
#endif

// C++ _inCAAAA1c4Y(NodePath const &other, PN_stdfloat h, PN_stdfloat p, PN_stdfloat r, PN_stdfloat sx, PN_stdfloat sy, PN_stdfloat sz) ==> NodePath$_$set_hpr_scale(NodePath *param0, NodePath const *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5, PN_stdfloat param6, PN_stdfloat param7)(NodePath *, NodePath const *, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void NodePath$239$set_hpr_scale(NodePath *self, NodePath const *other, PN_stdfloat h, PN_stdfloat p, PN_stdfloat r, PN_stdfloat sx, PN_stdfloat sy, PN_stdfloat sz);

#if INDEX
#define NodePath_C_set_hpr_scale_v_ppffffff NodePath$239$set_hpr_scale
#endif

// C++ _inCAAAA7L8H(PN_stdfloat h, PN_stdfloat p, PN_stdfloat r, PN_stdfloat sx, PN_stdfloat sy, PN_stdfloat sz) ==> NodePath$_$set_hpr_scale(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5, PN_stdfloat param6)(NodePath *, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void NodePath$240$set_hpr_scale(NodePath *self, PN_stdfloat h, PN_stdfloat p, PN_stdfloat r, PN_stdfloat sx, PN_stdfloat sy, PN_stdfloat sz);

#if INDEX
#define NodePath_C_set_hpr_scale_v_pffffff NodePath$240$set_hpr_scale
#endif

// C++ _inCAAAArl_T(LQuaternion const &quat, LVecBase3 const &scale) ==> NodePath$_$set_quat_scale(NodePath *param0, LQuaternion const *param1, LVecBase3 const *param2)(NodePath *, LQuaternion const *, LVecBase3 const *)
extern void NodePath$241$set_quat_scale(NodePath *self, LQuaternion const *quat, LVecBase3 const *scale);

#if INDEX
#define NodePath_C_set_quat_scale_v_ppp NodePath$241$set_quat_scale
#endif

// C++ _inCAAAA_ZUg(NodePath const &other, LQuaternion const &quat, LVecBase3 const &scale) ==> NodePath$_$set_quat_scale(NodePath *param0, NodePath const *param1, LQuaternion const *param2, LVecBase3 const *param3)(NodePath *, NodePath const *, LQuaternion const *, LVecBase3 const *)
extern void NodePath$242$set_quat_scale(NodePath *self, NodePath const *other, LQuaternion const *quat, LVecBase3 const *scale);

#if INDEX
#define NodePath_C_set_quat_scale_v_pppp NodePath$242$set_quat_scale
#endif

// C++ _inCAAAAOMdP(LVecBase3 const &pos, LVecBase3 const &hpr, LVecBase3 const &scale) ==> NodePath$_$set_pos_hpr_scale(NodePath *param0, LVecBase3 const *param1, LVecBase3 const *param2, LVecBase3 const *param3)(NodePath *, LVecBase3 const *, LVecBase3 const *, LVecBase3 const *)
extern void NodePath$243$set_pos_hpr_scale(NodePath *self, LVecBase3 const *pos, LVecBase3 const *hpr, LVecBase3 const *scale);

#if INDEX
#define NodePath_C_set_pos_hpr_scale_v_pppp NodePath$243$set_pos_hpr_scale
#endif

// C++ _inCAAAAblzG(NodePath const &other, LVecBase3 const &pos, LVecBase3 const &hpr, LVecBase3 const &scale) ==> NodePath$_$set_pos_hpr_scale(NodePath *param0, NodePath const *param1, LVecBase3 const *param2, LVecBase3 const *param3, LVecBase3 const *param4)(NodePath *, NodePath const *, LVecBase3 const *, LVecBase3 const *, LVecBase3 const *)
extern void NodePath$244$set_pos_hpr_scale(NodePath *self, NodePath const *other, LVecBase3 const *pos, LVecBase3 const *hpr, LVecBase3 const *scale);

#if INDEX
#define NodePath_C_set_pos_hpr_scale_v_ppppp NodePath$244$set_pos_hpr_scale
#endif

// C++ _inCAAAAIfbx(NodePath const &other, PN_stdfloat x, PN_stdfloat y, PN_stdfloat z, PN_stdfloat h, PN_stdfloat p, PN_stdfloat r, PN_stdfloat sx, PN_stdfloat sy, PN_stdfloat sz) ==> NodePath$_$set_pos_hpr_scale(NodePath *param0, NodePath const *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5, PN_stdfloat param6, PN_stdfloat param7, PN_stdfloat param8, PN_stdfloat param9, PN_stdfloat param10)(NodePath *, NodePath const *, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void NodePath$245$set_pos_hpr_scale(NodePath *self, NodePath const *other, PN_stdfloat x, PN_stdfloat y, PN_stdfloat z, PN_stdfloat h, PN_stdfloat p, PN_stdfloat r, PN_stdfloat sx, PN_stdfloat sy, PN_stdfloat sz);

#if INDEX
#define NodePath_C_set_pos_hpr_scale_v_ppfffffffff NodePath$245$set_pos_hpr_scale
#endif

// C++ _inCAAAAG24J(PN_stdfloat x, PN_stdfloat y, PN_stdfloat z, PN_stdfloat h, PN_stdfloat p, PN_stdfloat r, PN_stdfloat sx, PN_stdfloat sy, PN_stdfloat sz) ==> NodePath$_$set_pos_hpr_scale(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5, PN_stdfloat param6, PN_stdfloat param7, PN_stdfloat param8, PN_stdfloat param9)(NodePath *, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void NodePath$246$set_pos_hpr_scale(NodePath *self, PN_stdfloat x, PN_stdfloat y, PN_stdfloat z, PN_stdfloat h, PN_stdfloat p, PN_stdfloat r, PN_stdfloat sx, PN_stdfloat sy, PN_stdfloat sz);

#if INDEX
#define NodePath_C_set_pos_hpr_scale_v_pfffffffff NodePath$246$set_pos_hpr_scale
#endif

// C++ _inCAAAAu9HI(LVecBase3 const &pos, LQuaternion const &quat, LVecBase3 const &scale) ==> NodePath$_$set_pos_quat_scale(NodePath *param0, LVecBase3 const *param1, LQuaternion const *param2, LVecBase3 const *param3)(NodePath *, LVecBase3 const *, LQuaternion const *, LVecBase3 const *)
extern void NodePath$247$set_pos_quat_scale(NodePath *self, LVecBase3 const *pos, LQuaternion const *quat, LVecBase3 const *scale);

#if INDEX
#define NodePath_C_set_pos_quat_scale_v_pppp NodePath$247$set_pos_quat_scale
#endif

// C++ _inCAAAAch_2(NodePath const &other, LVecBase3 const &pos, LQuaternion const &quat, LVecBase3 const &scale) ==> NodePath$_$set_pos_quat_scale(NodePath *param0, NodePath const *param1, LVecBase3 const *param2, LQuaternion const *param3, LVecBase3 const *param4)(NodePath *, NodePath const *, LVecBase3 const *, LQuaternion const *, LVecBase3 const *)
extern void NodePath$248$set_pos_quat_scale(NodePath *self, NodePath const *other, LVecBase3 const *pos, LQuaternion const *quat, LVecBase3 const *scale);

#if INDEX
#define NodePath_C_set_pos_quat_scale_v_ppppp NodePath$248$set_pos_quat_scale
#endif

// C++ _inCAAAAfHzz(LVecBase3 const &pos, LVecBase3 const &hpr, LVecBase3 const &scale, LVecBase3 const &shear) ==> NodePath$_$set_pos_hpr_scale_shear(NodePath *param0, LVecBase3 const *param1, LVecBase3 const *param2, LVecBase3 const *param3, LVecBase3 const *param4)(NodePath *, LVecBase3 const *, LVecBase3 const *, LVecBase3 const *, LVecBase3 const *)
extern void NodePath$249$set_pos_hpr_scale_shear(NodePath *self, LVecBase3 const *pos, LVecBase3 const *hpr, LVecBase3 const *scale, LVecBase3 const *shear);

#if INDEX
#define NodePath_C_set_pos_hpr_scale_shear_v_ppppp NodePath$249$set_pos_hpr_scale_shear
#endif

// C++ _inCAAAApHY1(NodePath const &other, LVecBase3 const &pos, LVecBase3 const &hpr, LVecBase3 const &scale, LVecBase3 const &shear) ==> NodePath$_$set_pos_hpr_scale_shear(NodePath *param0, NodePath const *param1, LVecBase3 const *param2, LVecBase3 const *param3, LVecBase3 const *param4, LVecBase3 const *param5)(NodePath *, NodePath const *, LVecBase3 const *, LVecBase3 const *, LVecBase3 const *, LVecBase3 const *)
extern void NodePath$250$set_pos_hpr_scale_shear(NodePath *self, NodePath const *other, LVecBase3 const *pos, LVecBase3 const *hpr, LVecBase3 const *scale, LVecBase3 const *shear);

#if INDEX
#define NodePath_C_set_pos_hpr_scale_shear_v_pppppp NodePath$250$set_pos_hpr_scale_shear
#endif

// C++ _inCAAAABeHo(LVecBase3 const &pos, LQuaternion const &quat, LVecBase3 const &scale, LVecBase3 const &shear) ==> NodePath$_$set_pos_quat_scale_shear(NodePath *param0, LVecBase3 const *param1, LQuaternion const *param2, LVecBase3 const *param3, LVecBase3 const *param4)(NodePath *, LVecBase3 const *, LQuaternion const *, LVecBase3 const *, LVecBase3 const *)
extern void NodePath$251$set_pos_quat_scale_shear(NodePath *self, LVecBase3 const *pos, LQuaternion const *quat, LVecBase3 const *scale, LVecBase3 const *shear);

#if INDEX
#define NodePath_C_set_pos_quat_scale_shear_v_ppppp NodePath$251$set_pos_quat_scale_shear
#endif

// C++ _inCAAAAhGyX(NodePath const &other, LVecBase3 const &pos, LQuaternion const &quat, LVecBase3 const &scale, LVecBase3 const &shear) ==> NodePath$_$set_pos_quat_scale_shear(NodePath *param0, NodePath const *param1, LVecBase3 const *param2, LQuaternion const *param3, LVecBase3 const *param4, LVecBase3 const *param5)(NodePath *, NodePath const *, LVecBase3 const *, LQuaternion const *, LVecBase3 const *, LVecBase3 const *)
extern void NodePath$252$set_pos_quat_scale_shear(NodePath *self, NodePath const *other, LVecBase3 const *pos, LQuaternion const *quat, LVecBase3 const *scale, LVecBase3 const *shear);

#if INDEX
#define NodePath_C_set_pos_quat_scale_shear_v_pppppp NodePath$252$set_pos_quat_scale_shear
#endif

// C++ _inCAAAAFnWj(LMatrix4 const &mat) ==> NodePath$_$set_mat(NodePath *param0, LMatrix4 const *param1)(NodePath *, LMatrix4 const *)
extern void NodePath$253$set_mat(NodePath *self, LMatrix4 const *mat);

#if INDEX
#define NodePath_C_set_mat_v_pp NodePath$253$set_mat
#endif

// C++ _inCAAAAbult(NodePath const &other, LMatrix4 const &mat) ==> NodePath$_$set_mat(NodePath *param0, NodePath const *param1, LMatrix4 const *param2)(NodePath *, NodePath const *, LMatrix4 const *)
extern void NodePath$254$set_mat(NodePath *self, NodePath const *other, LMatrix4 const *mat);

#if INDEX
#define NodePath_C_set_mat_v_ppp NodePath$254$set_mat
#endif

// C++ _inCAAAAZ8BU() ==> NodePath$_$clear_mat(NodePath *param0)(NodePath *)
extern void NodePath$255$clear_mat(NodePath *self);

#if INDEX
#define NodePath_C_clear_mat_v_p NodePath$255$clear_mat
#endif

// C++ _inCAAAAuM1u() ==> NodePath$_$has_mat(NodePath const *param0)(NodePath const *)
extern bool NodePath$256$has_mat(NodePath const *self);

#if INDEX
#define NodePath_C_has_mat_B_p NodePath$256$has_mat
#endif

// C++ _inCAAAAIMoG() ==> NodePath$_$get_mat(NodePath const *param0)(NodePath const *)
extern LMatrix4 const * NodePath$257$get_mat(NodePath const *self);

#if INDEX
#define NodePath_C_get_mat_p_p NodePath$257$get_mat
#endif

// C++ _inCAAAA_p5g(NodePath const &other) ==> NodePath$_$get_mat(NodePath const *param0, NodePath const *param1)(NodePath const *, NodePath const *)
extern LMatrix4 * NodePath$258$get_mat(NodePath const *self, NodePath const *other);

#if INDEX
#define NodePath_C_get_mat_p_pp NodePath$258$get_mat
#endif

// C++ _inCAAAAfn8N(LPoint3 const &point, LVector3 const &up) ==> NodePath$_$look_at(NodePath *param0, LPoint3 const *param1, LVector3 const *param2)(NodePath *, LPoint3 const *, LVector3 const *)
extern void NodePath$259$look_at(NodePath *self, LPoint3 const *point, LVector3 const *up);

#if INDEX
#define NodePath_C_look_at_v_ppp NodePath$259$look_at
#endif

// C++ _inCAAAA9LIH(LPoint3 const &point) ==> NodePath$_$look_at(NodePath *param0, LPoint3 const *param1)(NodePath *, LPoint3 const *)
extern void NodePath$260$look_at(NodePath *self, LPoint3 const *point);

#if INDEX
#define NodePath_C_look_at_v_pp NodePath$260$look_at
#endif

// C++ _inCAAAA8uIG(NodePath const &other, LPoint3 const &point, LVector3 const &up) ==> NodePath$_$look_at(NodePath *param0, NodePath const *param1, LPoint3 const *param2, LVector3 const *param3)(NodePath *, NodePath const *, LPoint3 const *, LVector3 const *)
extern void NodePath$261$look_at(NodePath *self, NodePath const *other, LPoint3 const *point, LVector3 const *up);

#if INDEX
#define NodePath_C_look_at_v_pppp NodePath$261$look_at
#endif

// C++ _inCAAAAn40q(NodePath const &other, LPoint3 const &point) ==> NodePath$_$look_at(NodePath *param0, NodePath const *param1, LPoint3 const *param2)(NodePath *, NodePath const *, LPoint3 const *)
extern void NodePath$262$look_at(NodePath *self, NodePath const *other, LPoint3 const *point);
// COLLISION : NodePath_C_look_at_v_ppp NodePath$262$look_at

// C++ _inCAAAA62Ls(NodePath const &other) ==> NodePath$_$look_at(NodePath *param0, NodePath const *param1)(NodePath *, NodePath const *)
extern void NodePath$263$look_at(NodePath *self, NodePath const *other);
// COLLISION : NodePath_C_look_at_v_pp NodePath$263$look_at

// C++ _inCAAAApYhi(NodePath const &other, PN_stdfloat x, PN_stdfloat y, PN_stdfloat z) ==> NodePath$_$look_at(NodePath *param0, NodePath const *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4)(NodePath *, NodePath const *, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void NodePath$264$look_at(NodePath *self, NodePath const *other, PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);

#if INDEX
#define NodePath_C_look_at_v_ppfff NodePath$264$look_at
#endif

// C++ _inCAAAAz8_U(PN_stdfloat x, PN_stdfloat y, PN_stdfloat z) ==> NodePath$_$look_at(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3)(NodePath *, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void NodePath$265$look_at(NodePath *self, PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);

#if INDEX
#define NodePath_C_look_at_v_pfff NodePath$265$look_at
#endif

// C++ _inCAAAAfeLO(LPoint3 const &point, LVector3 const &up) ==> NodePath$_$heads_up(NodePath *param0, LPoint3 const *param1, LVector3 const *param2)(NodePath *, LPoint3 const *, LVector3 const *)
extern void NodePath$266$heads_up(NodePath *self, LPoint3 const *point, LVector3 const *up);

#if INDEX
#define NodePath_C_heads_up_v_ppp NodePath$266$heads_up
#endif

// C++ _inCAAAA1Hpz(LPoint3 const &point) ==> NodePath$_$heads_up(NodePath *param0, LPoint3 const *param1)(NodePath *, LPoint3 const *)
extern void NodePath$267$heads_up(NodePath *self, LPoint3 const *point);

#if INDEX
#define NodePath_C_heads_up_v_pp NodePath$267$heads_up
#endif

// C++ _inCAAAA0GtV(NodePath const &other, LPoint3 const &point, LVector3 const &up) ==> NodePath$_$heads_up(NodePath *param0, NodePath const *param1, LPoint3 const *param2, LVector3 const *param3)(NodePath *, NodePath const *, LPoint3 const *, LVector3 const *)
extern void NodePath$268$heads_up(NodePath *self, NodePath const *other, LPoint3 const *point, LVector3 const *up);

#if INDEX
#define NodePath_C_heads_up_v_pppp NodePath$268$heads_up
#endif

// C++ _inCAAAAqmcr(NodePath const &other, LPoint3 const &point) ==> NodePath$_$heads_up(NodePath *param0, NodePath const *param1, LPoint3 const *param2)(NodePath *, NodePath const *, LPoint3 const *)
extern void NodePath$269$heads_up(NodePath *self, NodePath const *other, LPoint3 const *point);
// COLLISION : NodePath_C_heads_up_v_ppp NodePath$269$heads_up

// C++ _inCAAAAwIWV(NodePath const &other) ==> NodePath$_$heads_up(NodePath *param0, NodePath const *param1)(NodePath *, NodePath const *)
extern void NodePath$270$heads_up(NodePath *self, NodePath const *other);
// COLLISION : NodePath_C_heads_up_v_pp NodePath$270$heads_up

// C++ _inCAAAANhpj(NodePath const &other, PN_stdfloat x, PN_stdfloat y, PN_stdfloat z) ==> NodePath$_$heads_up(NodePath *param0, NodePath const *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4)(NodePath *, NodePath const *, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void NodePath$271$heads_up(NodePath *self, NodePath const *other, PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);

#if INDEX
#define NodePath_C_heads_up_v_ppfff NodePath$271$heads_up
#endif

// C++ _inCAAAAUUnx(PN_stdfloat x, PN_stdfloat y, PN_stdfloat z) ==> NodePath$_$heads_up(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3)(NodePath *, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void NodePath$272$heads_up(NodePath *self, PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);

#if INDEX
#define NodePath_C_heads_up_v_pfff NodePath$272$heads_up
#endif

// C++ _inCAAAADR9y(NodePath const &other, LVecBase3 const &point) ==> NodePath$_$get_relative_point(NodePath const *param0, NodePath const *param1, LVecBase3 const *param2)(NodePath const *, NodePath const *, LVecBase3 const *)
extern LPoint3 * NodePath$273$get_relative_point(NodePath const *self, NodePath const *other, LVecBase3 const *point);

#if INDEX
#define NodePath_C_get_relative_point_p_ppp NodePath$273$get_relative_point
#endif

// C++ _inCAAAAqeF2(NodePath const &other, LVecBase3 const &vec) ==> NodePath$_$get_relative_vector(NodePath const *param0, NodePath const *param1, LVecBase3 const *param2)(NodePath const *, NodePath const *, LVecBase3 const *)
extern LVector3 * NodePath$274$get_relative_vector(NodePath const *self, NodePath const *other, LVecBase3 const *vec);

#if INDEX
#define NodePath_C_get_relative_vector_p_ppp NodePath$274$get_relative_vector
#endif

// C++ _inCAAAAgctf(NodePath const &other) ==> NodePath$_$get_distance(NodePath const *param0, NodePath const *param1)(NodePath const *, NodePath const *)
extern PN_stdfloat NodePath$275$get_distance(NodePath const *self, NodePath const *other);

#if INDEX
#define NodePath_C_get_distance_f_pp NodePath$275$get_distance
#endif

// C++ _inCAAAAS0zC(LColor const &color, int priority) ==> NodePath$_$set_color(NodePath *param0, LColor const *param1, int param2)(NodePath *, LColor const *, int)
extern void NodePath$276$set_color(NodePath *self, LColor const *color, int priority);

#if INDEX
#define NodePath_C_set_color_v_ppi NodePath$276$set_color
#endif

// C++ _inCAAAASCGd(LColor const &color) ==> NodePath$_$set_color(NodePath *param0, LColor const *param1)(NodePath *, LColor const *)
extern void NodePath$277$set_color(NodePath *self, LColor const *color);

#if INDEX
#define NodePath_C_set_color_v_pp NodePath$277$set_color
#endif

// C++ _inCAAAAOQ2g(PN_stdfloat r, PN_stdfloat g, PN_stdfloat b, PN_stdfloat a, int priority) ==> NodePath$_$set_color(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, int param5)(NodePath *, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat, int)
extern void NodePath$278$set_color(NodePath *self, PN_stdfloat r, PN_stdfloat g, PN_stdfloat b, PN_stdfloat a, int priority);

#if INDEX
#define NodePath_C_set_color_v_pffffi NodePath$278$set_color
#endif

// C++ _inCAAAA5CWF(PN_stdfloat r, PN_stdfloat g, PN_stdfloat b, PN_stdfloat a) ==> NodePath$_$set_color(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4)(NodePath *, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void NodePath$279$set_color(NodePath *self, PN_stdfloat r, PN_stdfloat g, PN_stdfloat b, PN_stdfloat a);

#if INDEX
#define NodePath_C_set_color_v_pffff NodePath$279$set_color
#endif

// C++ _inCAAAAafsM(PN_stdfloat r, PN_stdfloat g, PN_stdfloat b) ==> NodePath$_$set_color(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3)(NodePath *, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void NodePath$280$set_color(NodePath *self, PN_stdfloat r, PN_stdfloat g, PN_stdfloat b);

#if INDEX
#define NodePath_C_set_color_v_pfff NodePath$280$set_color
#endif

// C++ _inCAAAAw27z(int priority) ==> NodePath$_$set_color_off(NodePath *param0, int param1)(NodePath *, int)
extern void NodePath$281$set_color_off(NodePath *self, int priority);

#if INDEX
#define NodePath_C_set_color_off_v_pi NodePath$281$set_color_off
#endif

// C++ _inCAAAAE1gC() ==> NodePath$_$set_color_off(NodePath *param0)(NodePath *)
extern void NodePath$282$set_color_off(NodePath *self);

#if INDEX
#define NodePath_C_set_color_off_v_p NodePath$282$set_color_off
#endif

// C++ _inCAAAA1mr9() ==> NodePath$_$clear_color(NodePath *param0)(NodePath *)
extern void NodePath$283$clear_color(NodePath *self);

#if INDEX
#define NodePath_C_clear_color_v_p NodePath$283$clear_color
#endif

// C++ _inCAAAAbz4h() ==> NodePath$_$has_color(NodePath const *param0)(NodePath const *)
extern bool NodePath$284$has_color(NodePath const *self);

#if INDEX
#define NodePath_C_has_color_B_p NodePath$284$has_color
#endif

// C++ _inCAAAAkzr5() ==> NodePath$_$get_color(NodePath const *param0)(NodePath const *)
extern LColor * NodePath$285$get_color(NodePath const *self);

#if INDEX
#define NodePath_C_get_color_p_p NodePath$285$get_color
#endif

// C++ _inCAAAAh9q2() ==> NodePath$_$has_color_scale(NodePath const *param0)(NodePath const *)
extern bool NodePath$286$has_color_scale(NodePath const *self);

#if INDEX
#define NodePath_C_has_color_scale_B_p NodePath$286$has_color_scale
#endif

// C++ _inCAAAANGLo() ==> NodePath$_$clear_color_scale(NodePath *param0)(NodePath *)
extern void NodePath$287$clear_color_scale(NodePath *self);

#if INDEX
#define NodePath_C_clear_color_scale_v_p NodePath$287$clear_color_scale
#endif

// C++ _inCAAAAEUIg(LVecBase4 const &scale, int priority) ==> NodePath$_$set_color_scale(NodePath *param0, LVecBase4 const *param1, int param2)(NodePath *, LVecBase4 const *, int)
extern void NodePath$288$set_color_scale(NodePath *self, LVecBase4 const *scale, int priority);

#if INDEX
#define NodePath_C_set_color_scale_v_ppi NodePath$288$set_color_scale
#endif

// C++ _inCAAAAd9dr(LVecBase4 const &scale) ==> NodePath$_$set_color_scale(NodePath *param0, LVecBase4 const *param1)(NodePath *, LVecBase4 const *)
extern void NodePath$289$set_color_scale(NodePath *self, LVecBase4 const *scale);

#if INDEX
#define NodePath_C_set_color_scale_v_pp NodePath$289$set_color_scale
#endif

// C++ _inCAAAAV6Aq(PN_stdfloat sx, PN_stdfloat sy, PN_stdfloat sz, PN_stdfloat sa, int priority) ==> NodePath$_$set_color_scale(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, int param5)(NodePath *, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat, int)
extern void NodePath$290$set_color_scale(NodePath *self, PN_stdfloat sx, PN_stdfloat sy, PN_stdfloat sz, PN_stdfloat sa, int priority);

#if INDEX
#define NodePath_C_set_color_scale_v_pffffi NodePath$290$set_color_scale
#endif

// C++ _inCAAAA9niJ(PN_stdfloat sx, PN_stdfloat sy, PN_stdfloat sz, PN_stdfloat sa) ==> NodePath$_$set_color_scale(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4)(NodePath *, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void NodePath$291$set_color_scale(NodePath *self, PN_stdfloat sx, PN_stdfloat sy, PN_stdfloat sz, PN_stdfloat sa);

#if INDEX
#define NodePath_C_set_color_scale_v_pffff NodePath$291$set_color_scale
#endif

// C++ _inCAAAAmPCX(LVecBase4 const &scale, int priority) ==> NodePath$_$compose_color_scale(NodePath *param0, LVecBase4 const *param1, int param2)(NodePath *, LVecBase4 const *, int)
extern void NodePath$292$compose_color_scale(NodePath *self, LVecBase4 const *scale, int priority);

#if INDEX
#define NodePath_C_compose_color_scale_v_ppi NodePath$292$compose_color_scale
#endif

// C++ _inCAAAAKBwX(LVecBase4 const &scale) ==> NodePath$_$compose_color_scale(NodePath *param0, LVecBase4 const *param1)(NodePath *, LVecBase4 const *)
extern void NodePath$293$compose_color_scale(NodePath *self, LVecBase4 const *scale);

#if INDEX
#define NodePath_C_compose_color_scale_v_pp NodePath$293$compose_color_scale
#endif

// C++ _inCAAAA6Th7(PN_stdfloat sx, PN_stdfloat sy, PN_stdfloat sz, PN_stdfloat sa, int priority) ==> NodePath$_$compose_color_scale(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, int param5)(NodePath *, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat, int)
extern void NodePath$294$compose_color_scale(NodePath *self, PN_stdfloat sx, PN_stdfloat sy, PN_stdfloat sz, PN_stdfloat sa, int priority);

#if INDEX
#define NodePath_C_compose_color_scale_v_pffffi NodePath$294$compose_color_scale
#endif

// C++ _inCAAAARYgN(PN_stdfloat sx, PN_stdfloat sy, PN_stdfloat sz, PN_stdfloat sa) ==> NodePath$_$compose_color_scale(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4)(NodePath *, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void NodePath$295$compose_color_scale(NodePath *self, PN_stdfloat sx, PN_stdfloat sy, PN_stdfloat sz, PN_stdfloat sa);

#if INDEX
#define NodePath_C_compose_color_scale_v_pffff NodePath$295$compose_color_scale
#endif

// C++ _inCAAAAhzGl(int priority) ==> NodePath$_$set_color_scale_off(NodePath *param0, int param1)(NodePath *, int)
extern void NodePath$296$set_color_scale_off(NodePath *self, int priority);

#if INDEX
#define NodePath_C_set_color_scale_off_v_pi NodePath$296$set_color_scale_off
#endif

// C++ _inCAAAAPZ4L() ==> NodePath$_$set_color_scale_off(NodePath *param0)(NodePath *)
extern void NodePath$297$set_color_scale_off(NodePath *self);

#if INDEX
#define NodePath_C_set_color_scale_off_v_p NodePath$297$set_color_scale_off
#endif

// C++ _inCAAAAWTli(PN_stdfloat scale, int priority) ==> NodePath$_$set_alpha_scale(NodePath *param0, PN_stdfloat param1, int param2)(NodePath *, PN_stdfloat, int)
extern void NodePath$298$set_alpha_scale(NodePath *self, PN_stdfloat scale, int priority);

#if INDEX
#define NodePath_C_set_alpha_scale_v_pfi NodePath$298$set_alpha_scale
#endif

// C++ _inCAAAAKriG(PN_stdfloat scale) ==> NodePath$_$set_alpha_scale(NodePath *param0, PN_stdfloat param1)(NodePath *, PN_stdfloat)
extern void NodePath$299$set_alpha_scale(NodePath *self, PN_stdfloat scale);

#if INDEX
#define NodePath_C_set_alpha_scale_v_pf NodePath$299$set_alpha_scale
#endif

// C++ _inCAAAAs85Y(PN_stdfloat scale, int priority) ==> NodePath$_$set_all_color_scale(NodePath *param0, PN_stdfloat param1, int param2)(NodePath *, PN_stdfloat, int)
extern void NodePath$300$set_all_color_scale(NodePath *self, PN_stdfloat scale, int priority);

#if INDEX
#define NodePath_C_set_all_color_scale_v_pfi NodePath$300$set_all_color_scale
#endif

// C++ _inCAAAA_ALr(PN_stdfloat scale) ==> NodePath$_$set_all_color_scale(NodePath *param0, PN_stdfloat param1)(NodePath *, PN_stdfloat)
extern void NodePath$301$set_all_color_scale(NodePath *self, PN_stdfloat scale);

#if INDEX
#define NodePath_C_set_all_color_scale_v_pf NodePath$301$set_all_color_scale
#endif

// C++ _inCAAAAeAGa(PN_stdfloat sr) ==> NodePath$_$set_sr(NodePath *param0, PN_stdfloat param1)(NodePath *, PN_stdfloat)
extern void NodePath$302$set_sr(NodePath *self, PN_stdfloat sr);

#if INDEX
#define NodePath_C_set_sr_v_pf NodePath$302$set_sr
#endif

// C++ _inCAAAAGuaY(PN_stdfloat sg) ==> NodePath$_$set_sg(NodePath *param0, PN_stdfloat param1)(NodePath *, PN_stdfloat)
extern void NodePath$303$set_sg(NodePath *self, PN_stdfloat sg);

#if INDEX
#define NodePath_C_set_sg_v_pf NodePath$303$set_sg
#endif

// C++ _inCAAAAeypX(PN_stdfloat sb) ==> NodePath$_$set_sb(NodePath *param0, PN_stdfloat param1)(NodePath *, PN_stdfloat)
extern void NodePath$304$set_sb(NodePath *self, PN_stdfloat sb);

#if INDEX
#define NodePath_C_set_sb_v_pf NodePath$304$set_sb
#endif

// C++ _inCAAAAWBgX(PN_stdfloat sa) ==> NodePath$_$set_sa(NodePath *param0, PN_stdfloat param1)(NodePath *, PN_stdfloat)
extern void NodePath$305$set_sa(NodePath *self, PN_stdfloat sa);

#if INDEX
#define NodePath_C_set_sa_v_pf NodePath$305$set_sa
#endif

// C++ _inCAAAAH9dO() ==> NodePath$_$get_color_scale(NodePath const *param0)(NodePath const *)
extern LVecBase4 const * NodePath$306$get_color_scale(NodePath const *self);

#if INDEX
#define NodePath_C_get_color_scale_p_p NodePath$306$get_color_scale
#endif

// C++ _inCAAAAXd9T() ==> NodePath$_$get_sr(NodePath const *param0)(NodePath const *)
extern PN_stdfloat NodePath$307$get_sr(NodePath const *self);

#if INDEX
#define NodePath_C_get_sr_f_p NodePath$307$get_sr
#endif

// C++ _inCAAAA_7RS() ==> NodePath$_$get_sg(NodePath const *param0)(NodePath const *)
extern PN_stdfloat NodePath$308$get_sg(NodePath const *self);

#if INDEX
#define NodePath_C_get_sg_f_p NodePath$308$get_sg
#endif

// C++ _inCAAAAXPhR() ==> NodePath$_$get_sb(NodePath const *param0)(NodePath const *)
extern PN_stdfloat NodePath$309$get_sb(NodePath const *self);

#if INDEX
#define NodePath_C_get_sb_f_p NodePath$309$get_sb
#endif

// C++ _inCAAAAveXR() ==> NodePath$_$get_sa(NodePath const *param0)(NodePath const *)
extern PN_stdfloat NodePath$310$get_sa(NodePath const *self);

#if INDEX
#define NodePath_C_get_sa_f_p NodePath$310$get_sa
#endif

// C++ _inCAAAAOmzA(NodePath const &light, int priority) ==> NodePath$_$set_light(NodePath *param0, NodePath const *param1, int param2)(NodePath *, NodePath const *, int)
extern void NodePath$311$set_light(NodePath *self, NodePath const *light, int priority);

#if INDEX
#define NodePath_C_set_light_v_ppi NodePath$311$set_light
#endif

// C++ _inCAAAAVcVg(NodePath const &light) ==> NodePath$_$set_light(NodePath *param0, NodePath const *param1)(NodePath *, NodePath const *)
extern void NodePath$312$set_light(NodePath *self, NodePath const *light);

#if INDEX
#define NodePath_C_set_light_v_pp NodePath$312$set_light
#endif

// C++ _inCAAAAmGGU(NodePath const &light, int priority) ==> NodePath$_$set_light_off(NodePath *param0, NodePath const *param1, int param2)(NodePath *, NodePath const *, int)
extern void NodePath$313$set_light_off(NodePath *self, NodePath const *light, int priority);

#if INDEX
#define NodePath_C_set_light_off_v_ppi NodePath$313$set_light_off
#endif

// C++ _inCAAAAs0Fm(NodePath const &light) ==> NodePath$_$set_light_off(NodePath *param0, NodePath const *param1)(NodePath *, NodePath const *)
extern void NodePath$314$set_light_off(NodePath *self, NodePath const *light);

#if INDEX
#define NodePath_C_set_light_off_v_pp NodePath$314$set_light_off
#endif

// C++ _inCAAAA3hHT(int priority) ==> NodePath$_$set_light_off(NodePath *param0, int param1)(NodePath *, int)
extern void NodePath$315$set_light_off(NodePath *self, int priority);

#if INDEX
#define NodePath_C_set_light_off_v_pi NodePath$315$set_light_off
#endif

// C++ _inCAAAA8iuh() ==> NodePath$_$set_light_off(NodePath *param0)(NodePath *)
extern void NodePath$316$set_light_off(NodePath *self);

#if INDEX
#define NodePath_C_set_light_off_v_p NodePath$316$set_light_off
#endif

// C++ _inCAAAA_y39() ==> NodePath$_$clear_light(NodePath *param0)(NodePath *)
extern void NodePath$317$clear_light(NodePath *self);

#if INDEX
#define NodePath_C_clear_light_v_p NodePath$317$clear_light
#endif

// C++ _inCAAAAF_28(NodePath const &light) ==> NodePath$_$clear_light(NodePath *param0, NodePath const *param1)(NodePath *, NodePath const *)
extern void NodePath$318$clear_light(NodePath *self, NodePath const *light);

#if INDEX
#define NodePath_C_clear_light_v_pp NodePath$318$clear_light
#endif

// C++ _inCAAAALCWi(NodePath const &light) ==> NodePath$_$has_light(NodePath const *param0, NodePath const *param1)(NodePath const *, NodePath const *)
extern bool NodePath$319$has_light(NodePath const *self, NodePath const *light);

#if INDEX
#define NodePath_C_has_light_B_pp NodePath$319$has_light
#endif

// C++ _inCAAAAKg80() ==> NodePath$_$has_light_off(NodePath const *param0)(NodePath const *)
extern bool NodePath$320$has_light_off(NodePath const *self);

#if INDEX
#define NodePath_C_has_light_off_B_p NodePath$320$has_light_off
#endif

// C++ _inCAAAA3UBH(NodePath const &light) ==> NodePath$_$has_light_off(NodePath const *param0, NodePath const *param1)(NodePath const *, NodePath const *)
extern bool NodePath$321$has_light_off(NodePath const *self, NodePath const *light);

#if INDEX
#define NodePath_C_has_light_off_B_pp NodePath$321$has_light_off
#endif

// C++ _inCAAAApYL4(NodePath const &clip_plane, int priority) ==> NodePath$_$set_clip_plane(NodePath *param0, NodePath const *param1, int param2)(NodePath *, NodePath const *, int)
extern void NodePath$322$set_clip_plane(NodePath *self, NodePath const *clip_plane, int priority);

#if INDEX
#define NodePath_C_set_clip_plane_v_ppi NodePath$322$set_clip_plane
#endif

// C++ _inCAAAA1XO3(NodePath const &clip_plane) ==> NodePath$_$set_clip_plane(NodePath *param0, NodePath const *param1)(NodePath *, NodePath const *)
extern void NodePath$323$set_clip_plane(NodePath *self, NodePath const *clip_plane);

#if INDEX
#define NodePath_C_set_clip_plane_v_pp NodePath$323$set_clip_plane
#endif

// C++ _inCAAAA6bye(NodePath const &clip_plane, int priority) ==> NodePath$_$set_clip_plane_off(NodePath *param0, NodePath const *param1, int param2)(NodePath *, NodePath const *, int)
extern void NodePath$324$set_clip_plane_off(NodePath *self, NodePath const *clip_plane, int priority);

#if INDEX
#define NodePath_C_set_clip_plane_off_v_ppi NodePath$324$set_clip_plane_off
#endif

// C++ _inCAAAA2qvC(NodePath const &clip_plane) ==> NodePath$_$set_clip_plane_off(NodePath *param0, NodePath const *param1)(NodePath *, NodePath const *)
extern void NodePath$325$set_clip_plane_off(NodePath *self, NodePath const *clip_plane);

#if INDEX
#define NodePath_C_set_clip_plane_off_v_pp NodePath$325$set_clip_plane_off
#endif

// C++ _inCAAAA28yc(int priority) ==> NodePath$_$set_clip_plane_off(NodePath *param0, int param1)(NodePath *, int)
extern void NodePath$326$set_clip_plane_off(NodePath *self, int priority);

#if INDEX
#define NodePath_C_set_clip_plane_off_v_pi NodePath$326$set_clip_plane_off
#endif

// C++ _inCAAAAcSB6() ==> NodePath$_$set_clip_plane_off(NodePath *param0)(NodePath *)
extern void NodePath$327$set_clip_plane_off(NodePath *self);

#if INDEX
#define NodePath_C_set_clip_plane_off_v_p NodePath$327$set_clip_plane_off
#endif

// C++ _inCAAAAteSh() ==> NodePath$_$clear_clip_plane(NodePath *param0)(NodePath *)
extern void NodePath$328$clear_clip_plane(NodePath *self);

#if INDEX
#define NodePath_C_clear_clip_plane_v_p NodePath$328$clear_clip_plane
#endif

// C++ _inCAAAABURf(NodePath const &clip_plane) ==> NodePath$_$clear_clip_plane(NodePath *param0, NodePath const *param1)(NodePath *, NodePath const *)
extern void NodePath$329$clear_clip_plane(NodePath *self, NodePath const *clip_plane);

#if INDEX
#define NodePath_C_clear_clip_plane_v_pp NodePath$329$clear_clip_plane
#endif

// C++ _inCAAAAUt_T(NodePath const &clip_plane) ==> NodePath$_$has_clip_plane(NodePath const *param0, NodePath const *param1)(NodePath const *, NodePath const *)
extern bool NodePath$330$has_clip_plane(NodePath const *self, NodePath const *clip_plane);

#if INDEX
#define NodePath_C_has_clip_plane_B_pp NodePath$330$has_clip_plane
#endif

// C++ _inCAAAAvnN5() ==> NodePath$_$has_clip_plane_off(NodePath const *param0)(NodePath const *)
extern bool NodePath$331$has_clip_plane_off(NodePath const *self);

#if INDEX
#define NodePath_C_has_clip_plane_off_B_p NodePath$331$has_clip_plane_off
#endif

// C++ _inCAAAAZ8Wd(NodePath const &clip_plane) ==> NodePath$_$has_clip_plane_off(NodePath const *param0, NodePath const *param1)(NodePath const *, NodePath const *)
extern bool NodePath$332$has_clip_plane_off(NodePath const *self, NodePath const *clip_plane);

#if INDEX
#define NodePath_C_has_clip_plane_off_B_pp NodePath$332$has_clip_plane_off
#endif

// C++ _inCAAAAE9XS(LPoint3 const &a, LPoint3 const &b) ==> NodePath$_$set_scissor(NodePath *param0, LPoint3 const *param1, LPoint3 const *param2)(NodePath *, LPoint3 const *, LPoint3 const *)
extern void NodePath$333$set_scissor(NodePath *self, LPoint3 const *a, LPoint3 const *b);

#if INDEX
#define NodePath_C_set_scissor_v_ppp NodePath$333$set_scissor
#endif

// C++ _inCAAAAyDBC(LPoint3 const &a, LPoint3 const &b, LPoint3 const &c, LPoint3 const &d) ==> NodePath$_$set_scissor(NodePath *param0, LPoint3 const *param1, LPoint3 const *param2, LPoint3 const *param3, LPoint3 const *param4)(NodePath *, LPoint3 const *, LPoint3 const *, LPoint3 const *, LPoint3 const *)
extern void NodePath$334$set_scissor(NodePath *self, LPoint3 const *a, LPoint3 const *b, LPoint3 const *c, LPoint3 const *d);

#if INDEX
#define NodePath_C_set_scissor_v_ppppp NodePath$334$set_scissor
#endif

// C++ _inCAAAANCEX(NodePath const &other, LPoint3 const &a, LPoint3 const &b) ==> NodePath$_$set_scissor(NodePath *param0, NodePath const *param1, LPoint3 const *param2, LPoint3 const *param3)(NodePath *, NodePath const *, LPoint3 const *, LPoint3 const *)
extern void NodePath$335$set_scissor(NodePath *self, NodePath const *other, LPoint3 const *a, LPoint3 const *b);

#if INDEX
#define NodePath_C_set_scissor_v_pppp NodePath$335$set_scissor
#endif

// C++ _inCAAAAjStV(NodePath const &other, LPoint3 const &a, LPoint3 const &b, LPoint3 const &c, LPoint3 const &d) ==> NodePath$_$set_scissor(NodePath *param0, NodePath const *param1, LPoint3 const *param2, LPoint3 const *param3, LPoint3 const *param4, LPoint3 const *param5)(NodePath *, NodePath const *, LPoint3 const *, LPoint3 const *, LPoint3 const *, LPoint3 const *)
extern void NodePath$336$set_scissor(NodePath *self, NodePath const *other, LPoint3 const *a, LPoint3 const *b, LPoint3 const *c, LPoint3 const *d);

#if INDEX
#define NodePath_C_set_scissor_v_pppppp NodePath$336$set_scissor
#endif

// C++ _inCAAAAbjJd(PN_stdfloat left, PN_stdfloat right, PN_stdfloat bottom, PN_stdfloat top) ==> NodePath$_$set_scissor(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4)(NodePath *, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void NodePath$337$set_scissor(NodePath *self, PN_stdfloat left, PN_stdfloat right, PN_stdfloat bottom, PN_stdfloat top);

#if INDEX
#define NodePath_C_set_scissor_v_pffff NodePath$337$set_scissor
#endif

// C++ _inCAAAA0gei() ==> NodePath$_$clear_scissor(NodePath *param0)(NodePath *)
extern void NodePath$338$clear_scissor(NodePath *self);

#if INDEX
#define NodePath_C_clear_scissor_v_p NodePath$338$clear_scissor
#endif

// C++ _inCAAAAuv7f() ==> NodePath$_$has_scissor(NodePath const *param0)(NodePath const *)
extern bool NodePath$339$has_scissor(NodePath const *self);

#if INDEX
#define NodePath_C_has_scissor_B_p NodePath$339$has_scissor
#endif

// C++ _inCAAAAOhjp(NodePath const &occluder) ==> NodePath$_$set_occluder(NodePath *param0, NodePath const *param1)(NodePath *, NodePath const *)
extern void NodePath$340$set_occluder(NodePath *self, NodePath const *occluder);

#if INDEX
#define NodePath_C_set_occluder_v_pp NodePath$340$set_occluder
#endif

// C++ _inCAAAAn6ch() ==> NodePath$_$clear_occluder(NodePath *param0)(NodePath *)
extern void NodePath$341$clear_occluder(NodePath *self);

#if INDEX
#define NodePath_C_clear_occluder_v_p NodePath$341$clear_occluder
#endif

// C++ _inCAAAAcaDt(NodePath const &occluder) ==> NodePath$_$clear_occluder(NodePath *param0, NodePath const *param1)(NodePath *, NodePath const *)
extern void NodePath$342$clear_occluder(NodePath *self, NodePath const *occluder);

#if INDEX
#define NodePath_C_clear_occluder_v_pp NodePath$342$clear_occluder
#endif

// C++ _inCAAAAzNny(NodePath const &occluder) ==> NodePath$_$has_occluder(NodePath const *param0, NodePath const *param1)(NodePath const *, NodePath const *)
extern bool NodePath$343$has_occluder(NodePath const *self, NodePath const *occluder);

#if INDEX
#define NodePath_C_has_occluder_B_pp NodePath$343$has_occluder
#endif

// C++ _inCAAAA9Xmj(std::string const &bin_name, int draw_order, int priority) ==> NodePath$_$set_bin(NodePath *param0, char const *param1, int param2, int param3)(NodePath *, char const *, int, int)
extern void NodePath$344$set_bin(NodePath *self, char const *bin_name, int draw_order, int priority);

#if INDEX
#define NodePath_C_set_bin_v_psii NodePath$344$set_bin
#endif

// C++ _inCAAAARL_D(std::string const &bin_name, int draw_order) ==> NodePath$_$set_bin(NodePath *param0, char const *param1, int param2)(NodePath *, char const *, int)
extern void NodePath$345$set_bin(NodePath *self, char const *bin_name, int draw_order);

#if INDEX
#define NodePath_C_set_bin_v_psi NodePath$345$set_bin
#endif

// C++ _inCAAAAbzEW() ==> NodePath$_$clear_bin(NodePath *param0)(NodePath *)
extern void NodePath$346$clear_bin(NodePath *self);

#if INDEX
#define NodePath_C_clear_bin_v_p NodePath$346$clear_bin
#endif

// C++ _inCAAAATmsC() ==> NodePath$_$has_bin(NodePath const *param0)(NodePath const *)
extern bool NodePath$347$has_bin(NodePath const *self);

#if INDEX
#define NodePath_C_has_bin_B_p NodePath$347$has_bin
#endif

// C++ _inCAAAALAFg() ==> NodePath$_$get_bin_name(NodePath const *param0)(NodePath const *)
extern char const * NodePath$348$get_bin_name(NodePath const *self);

#if INDEX
#define NodePath_C_get_bin_name_s_p NodePath$348$get_bin_name
#endif

// C++ _inCAAAA2Nw9() ==> NodePath$_$get_bin_draw_order(NodePath const *param0)(NodePath const *)
extern int NodePath$349$get_bin_draw_order(NodePath const *self);

#if INDEX
#define NodePath_C_get_bin_draw_order_i_p NodePath$349$get_bin_draw_order
#endif

// C++ _inCAAAA7p69(Texture *tex, SamplerState const &sampler, int priority) ==> NodePath$_$set_texture(NodePath *param0, Texture *param1, SamplerState const *param2, int param3)(NodePath *, Texture *, SamplerState const *, int)
extern void NodePath$350$set_texture(NodePath *self, Texture *tex, SamplerState const *sampler, int priority);

#if INDEX
#define NodePath_C_set_texture_v_pppi NodePath$350$set_texture
#endif

// C++ _inCAAAA4oDr(Texture *tex, SamplerState const &sampler) ==> NodePath$_$set_texture(NodePath *param0, Texture *param1, SamplerState const *param2)(NodePath *, Texture *, SamplerState const *)
extern void NodePath$351$set_texture(NodePath *self, Texture *tex, SamplerState const *sampler);

#if INDEX
#define NodePath_C_set_texture_v_ppp NodePath$351$set_texture
#endif

// C++ _inCAAAAFEvx(Texture *tex, int priority) ==> NodePath$_$set_texture(NodePath *param0, Texture *param1, int param2)(NodePath *, Texture *, int)
extern void NodePath$352$set_texture(NodePath *self, Texture *tex, int priority);

#if INDEX
#define NodePath_C_set_texture_v_ppi NodePath$352$set_texture
#endif

// C++ _inCAAAAchTm(Texture *tex) ==> NodePath$_$set_texture(NodePath *param0, Texture *param1)(NodePath *, Texture *)
extern void NodePath$353$set_texture(NodePath *self, Texture *tex);

#if INDEX
#define NodePath_C_set_texture_v_pp NodePath$353$set_texture
#endif

// C++ _inCAAAAYd0V(TextureStage *stage, Texture *tex, SamplerState const &sampler, int priority) ==> NodePath$_$set_texture(NodePath *param0, TextureStage *param1, Texture *param2, SamplerState const *param3, int param4)(NodePath *, TextureStage *, Texture *, SamplerState const *, int)
extern void NodePath$354$set_texture(NodePath *self, TextureStage *stage, Texture *tex, SamplerState const *sampler, int priority);

#if INDEX
#define NodePath_C_set_texture_v_ppppi NodePath$354$set_texture
#endif

// C++ _inCAAAAUSy5(TextureStage *stage, Texture *tex, SamplerState const &sampler) ==> NodePath$_$set_texture(NodePath *param0, TextureStage *param1, Texture *param2, SamplerState const *param3)(NodePath *, TextureStage *, Texture *, SamplerState const *)
extern void NodePath$355$set_texture(NodePath *self, TextureStage *stage, Texture *tex, SamplerState const *sampler);

#if INDEX
#define NodePath_C_set_texture_v_pppp NodePath$355$set_texture
#endif

// C++ _inCAAAAgM3e(TextureStage *stage, Texture *tex, int priority) ==> NodePath$_$set_texture(NodePath *param0, TextureStage *param1, Texture *param2, int param3)(NodePath *, TextureStage *, Texture *, int)
extern void NodePath$356$set_texture(NodePath *self, TextureStage *stage, Texture *tex, int priority);
// COLLISION : NodePath_C_set_texture_v_pppi NodePath$356$set_texture

// C++ _inCAAAAtHou(TextureStage *stage, Texture *tex) ==> NodePath$_$set_texture(NodePath *param0, TextureStage *param1, Texture *param2)(NodePath *, TextureStage *, Texture *)
extern void NodePath$357$set_texture(NodePath *self, TextureStage *stage, Texture *tex);
// COLLISION : NodePath_C_set_texture_v_ppp NodePath$357$set_texture

// C++ _inCAAAAHq1d(TextureStage *stage, int priority) ==> NodePath$_$set_texture_off(NodePath *param0, TextureStage *param1, int param2)(NodePath *, TextureStage *, int)
extern void NodePath$358$set_texture_off(NodePath *self, TextureStage *stage, int priority);

#if INDEX
#define NodePath_C_set_texture_off_v_ppi NodePath$358$set_texture_off
#endif

// C++ _inCAAAAwSb0(TextureStage *stage) ==> NodePath$_$set_texture_off(NodePath *param0, TextureStage *param1)(NodePath *, TextureStage *)
extern void NodePath$359$set_texture_off(NodePath *self, TextureStage *stage);

#if INDEX
#define NodePath_C_set_texture_off_v_pp NodePath$359$set_texture_off
#endif

// C++ _inCAAAAw4bU(int priority) ==> NodePath$_$set_texture_off(NodePath *param0, int param1)(NodePath *, int)
extern void NodePath$360$set_texture_off(NodePath *self, int priority);

#if INDEX
#define NodePath_C_set_texture_off_v_pi NodePath$360$set_texture_off
#endif

// C++ _inCAAAA_4vA() ==> NodePath$_$set_texture_off(NodePath *param0)(NodePath *)
extern void NodePath$361$set_texture_off(NodePath *self);

#if INDEX
#define NodePath_C_set_texture_off_v_p NodePath$361$set_texture_off
#endif

// C++ _inCAAAANNBp() ==> NodePath$_$clear_texture(NodePath *param0)(NodePath *)
extern void NodePath$362$clear_texture(NodePath *self);

#if INDEX
#define NodePath_C_clear_texture_v_p NodePath$362$clear_texture
#endif

// C++ _inCAAAAcr3x(TextureStage *stage) ==> NodePath$_$clear_texture(NodePath *param0, TextureStage *param1)(NodePath *, TextureStage *)
extern void NodePath$363$clear_texture(NodePath *self, TextureStage *stage);

#if INDEX
#define NodePath_C_clear_texture_v_pp NodePath$363$clear_texture
#endif

// C++ _inCAAAAqlwf() ==> NodePath$_$has_texture(NodePath const *param0)(NodePath const *)
extern bool NodePath$364$has_texture(NodePath const *self);

#if INDEX
#define NodePath_C_has_texture_B_p NodePath$364$has_texture
#endif

// C++ _inCAAAACNaQ(TextureStage *stage) ==> NodePath$_$has_texture(NodePath const *param0, TextureStage *param1)(NodePath const *, TextureStage *)
extern bool NodePath$365$has_texture(NodePath const *self, TextureStage *stage);

#if INDEX
#define NodePath_C_has_texture_B_pp NodePath$365$has_texture
#endif

// C++ _inCAAAAxE64() ==> NodePath$_$has_texture_off(NodePath const *param0)(NodePath const *)
extern bool NodePath$366$has_texture_off(NodePath const *self);

#if INDEX
#define NodePath_C_has_texture_off_B_p NodePath$366$has_texture_off
#endif

// C++ _inCAAAAL45P(TextureStage *stage) ==> NodePath$_$has_texture_off(NodePath const *param0, TextureStage *param1)(NodePath const *, TextureStage *)
extern bool NodePath$367$has_texture_off(NodePath const *self, TextureStage *stage);

#if INDEX
#define NodePath_C_has_texture_off_B_pp NodePath$367$has_texture_off
#endif

// C++ _inCAAAAPll3() ==> NodePath$_$get_texture(NodePath const *param0)(NodePath const *)
extern Texture * NodePath$368$get_texture(NodePath const *self);

#if INDEX
#define NodePath_C_get_texture_p_p NodePath$368$get_texture
#endif

// C++ _inCAAAAhMNo(TextureStage *stage) ==> NodePath$_$get_texture(NodePath const *param0, TextureStage *param1)(NodePath const *, TextureStage *)
extern Texture * NodePath$369$get_texture(NodePath const *self, TextureStage *stage);

#if INDEX
#define NodePath_C_get_texture_p_pp NodePath$369$get_texture
#endif

// C++ _inCAAAAeUR6(Texture *tex, Texture *new_tex) ==> NodePath$_$replace_texture(NodePath *param0, Texture *param1, Texture *param2)(NodePath *, Texture *, Texture *)
extern void NodePath$370$replace_texture(NodePath *self, Texture *tex, Texture *new_tex);

#if INDEX
#define NodePath_C_replace_texture_v_ppp NodePath$370$replace_texture
#endif

// C++ _inCAAAAE2EV() ==> NodePath$_$get_texture_sampler(NodePath const *param0)(NodePath const *)
extern SamplerState const * NodePath$371$get_texture_sampler(NodePath const *self);

#if INDEX
#define NodePath_C_get_texture_sampler_p_p NodePath$371$get_texture_sampler
#endif

// C++ _inCAAAA35fO(TextureStage *stage) ==> NodePath$_$get_texture_sampler(NodePath const *param0, TextureStage *param1)(NodePath const *, TextureStage *)
extern SamplerState const * NodePath$372$get_texture_sampler(NodePath const *self, TextureStage *stage);

#if INDEX
#define NodePath_C_get_texture_sampler_p_pp NodePath$372$get_texture_sampler
#endif

// C++ _inCAAAAx_K4(Shader const *sha, int priority) ==> NodePath$_$set_shader(NodePath *param0, Shader const *param1, int param2)(NodePath *, Shader const *, int)
extern void NodePath$373$set_shader(NodePath *self, Shader const *sha, int priority);

#if INDEX
#define NodePath_C_set_shader_v_ppi NodePath$373$set_shader
#endif

// C++ _inCAAAAOCeD(Shader const *sha) ==> NodePath$_$set_shader(NodePath *param0, Shader const *param1)(NodePath *, Shader const *)
extern void NodePath$374$set_shader(NodePath *self, Shader const *sha);

#if INDEX
#define NodePath_C_set_shader_v_pp NodePath$374$set_shader
#endif

// C++ _inCAAAAaMRX(int priority) ==> NodePath$_$set_shader_off(NodePath *param0, int param1)(NodePath *, int)
extern void NodePath$375$set_shader_off(NodePath *self, int priority);

#if INDEX
#define NodePath_C_set_shader_off_v_pi NodePath$375$set_shader_off
#endif

// C++ _inCAAAAzipq() ==> NodePath$_$set_shader_off(NodePath *param0)(NodePath *)
extern void NodePath$376$set_shader_off(NodePath *self);

#if INDEX
#define NodePath_C_set_shader_off_v_p NodePath$376$set_shader_off
#endif

// C++ _inCAAAAvooe(BitMask32 shader_switch, int priority) ==> NodePath$_$set_shader_auto(NodePath *param0, BitMask32 *param1, int param2)(NodePath *, BitMask32 *, int)
extern void NodePath$377$set_shader_auto(NodePath *self, BitMask32 *shader_switch, int priority);

#if INDEX
#define NodePath_C_set_shader_auto_v_ppi NodePath$377$set_shader_auto
#endif

// C++ _inCAAAAtc9p(BitMask32 shader_switch) ==> NodePath$_$set_shader_auto(NodePath *param0, BitMask32 *param1)(NodePath *, BitMask32 *)
extern void NodePath$378$set_shader_auto(NodePath *self, BitMask32 *shader_switch);

#if INDEX
#define NodePath_C_set_shader_auto_v_pp NodePath$378$set_shader_auto
#endif

// C++ _inCAAAA0Slp(int priority) ==> NodePath$_$set_shader_auto(NodePath *param0, int param1)(NodePath *, int)
extern void NodePath$379$set_shader_auto(NodePath *self, int priority);

#if INDEX
#define NodePath_C_set_shader_auto_v_pi NodePath$379$set_shader_auto
#endif

// C++ _inCAAAA7C4V() ==> NodePath$_$set_shader_auto(NodePath *param0)(NodePath *)
extern void NodePath$380$set_shader_auto(NodePath *self);

#if INDEX
#define NodePath_C_set_shader_auto_v_p NodePath$380$set_shader_auto
#endif

// C++ _inCAAAAWwTt() ==> NodePath$_$clear_shader(NodePath *param0)(NodePath *)
extern void NodePath$381$clear_shader(NodePath *self);

#if INDEX
#define NodePath_C_clear_shader_v_p NodePath$381$clear_shader
#endif

// C++ _inCAAAAWBYA(CPT_InternalName id, LMatrix3 const &v, int priority) ==> NodePath$_$set_shader_input(NodePath *param0, CPT_InternalName *param1, LMatrix3 const *param2, int param3)(NodePath *, CPT_InternalName *, LMatrix3 const *, int)
extern void NodePath$382$set_shader_input(NodePath *self, CPT_InternalName *id, LMatrix3 const *v, int priority);

#if INDEX
#define NodePath_C_set_shader_input_v_pspi NodePath$382$set_shader_input
#endif

// C++ _inCAAAA8Zkw(CPT_InternalName id, LMatrix3 const &v) ==> NodePath$_$set_shader_input(NodePath *param0, CPT_InternalName *param1, LMatrix3 const *param2)(NodePath *, CPT_InternalName *, LMatrix3 const *)
extern void NodePath$383$set_shader_input(NodePath *self, CPT_InternalName *id, LMatrix3 const *v);

#if INDEX
#define NodePath_C_set_shader_input_v_psp NodePath$383$set_shader_input
#endif

// C++ _inCAAAAeGYc(CPT_InternalName id, LMatrix4 const &v, int priority) ==> NodePath$_$set_shader_input(NodePath *param0, CPT_InternalName *param1, LMatrix4 const *param2, int param3)(NodePath *, CPT_InternalName *, LMatrix4 const *, int)
extern void NodePath$384$set_shader_input(NodePath *self, CPT_InternalName *id, LMatrix4 const *v, int priority);
// COLLISION : NodePath_C_set_shader_input_v_pspi NodePath$384$set_shader_input

// C++ _inCAAAA3WkM(CPT_InternalName id, LMatrix4 const &v) ==> NodePath$_$set_shader_input(NodePath *param0, CPT_InternalName *param1, LMatrix4 const *param2)(NodePath *, CPT_InternalName *, LMatrix4 const *)
extern void NodePath$385$set_shader_input(NodePath *self, CPT_InternalName *id, LMatrix4 const *v);
// COLLISION : NodePath_C_set_shader_input_v_psp NodePath$385$set_shader_input

// C++ _inCAAAAGNEb(CPT_InternalName id, LVecBase2 const &v, int priority) ==> NodePath$_$set_shader_input(NodePath *param0, CPT_InternalName *param1, LVecBase2 const *param2, int param3)(NodePath *, CPT_InternalName *, LVecBase2 const *, int)
extern void NodePath$386$set_shader_input(NodePath *self, CPT_InternalName *id, LVecBase2 const *v, int priority);
// COLLISION : NodePath_C_set_shader_input_v_pspi NodePath$386$set_shader_input

// C++ _inCAAAA1Svg(CPT_InternalName id, LVecBase2 const &v) ==> NodePath$_$set_shader_input(NodePath *param0, CPT_InternalName *param1, LVecBase2 const *param2)(NodePath *, CPT_InternalName *, LVecBase2 const *)
extern void NodePath$387$set_shader_input(NodePath *self, CPT_InternalName *id, LVecBase2 const *v);
// COLLISION : NodePath_C_set_shader_input_v_psp NodePath$387$set_shader_input

// C++ _inCAAAAs2g7(CPT_InternalName id, LVecBase2i const &v, int priority) ==> NodePath$_$set_shader_input(NodePath *param0, CPT_InternalName *param1, LVecBase2i const *param2, int param3)(NodePath *, CPT_InternalName *, LVecBase2i const *, int)
extern void NodePath$388$set_shader_input(NodePath *self, CPT_InternalName *id, LVecBase2i const *v, int priority);
// COLLISION : NodePath_C_set_shader_input_v_pspi NodePath$388$set_shader_input

// C++ _inCAAAAvyGw(CPT_InternalName id, LVecBase2i const &v) ==> NodePath$_$set_shader_input(NodePath *param0, CPT_InternalName *param1, LVecBase2i const *param2)(NodePath *, CPT_InternalName *, LVecBase2i const *)
extern void NodePath$389$set_shader_input(NodePath *self, CPT_InternalName *id, LVecBase2i const *v);
// COLLISION : NodePath_C_set_shader_input_v_psp NodePath$389$set_shader_input

// C++ _inCAAAAwgGb(CPT_InternalName id, LVecBase3 const &v, int priority) ==> NodePath$_$set_shader_input(NodePath *param0, CPT_InternalName *param1, LVecBase3 const *param2, int param3)(NodePath *, CPT_InternalName *, LVecBase3 const *, int)
extern void NodePath$390$set_shader_input(NodePath *self, CPT_InternalName *id, LVecBase3 const *v, int priority);
// COLLISION : NodePath_C_set_shader_input_v_pspi NodePath$390$set_shader_input

// C++ _inCAAAA7_yg(CPT_InternalName id, LVecBase3 const &v) ==> NodePath$_$set_shader_input(NodePath *param0, CPT_InternalName *param1, LVecBase3 const *param2)(NodePath *, CPT_InternalName *, LVecBase3 const *)
extern void NodePath$391$set_shader_input(NodePath *self, CPT_InternalName *id, LVecBase3 const *v);
// COLLISION : NodePath_C_set_shader_input_v_psp NodePath$391$set_shader_input

// C++ _inCAAAAaal7(CPT_InternalName id, LVecBase3i const &v, int priority) ==> NodePath$_$set_shader_input(NodePath *param0, CPT_InternalName *param1, LVecBase3i const *param2, int param3)(NodePath *, CPT_InternalName *, LVecBase3i const *, int)
extern void NodePath$392$set_shader_input(NodePath *self, CPT_InternalName *id, LVecBase3i const *v, int priority);
// COLLISION : NodePath_C_set_shader_input_v_pspi NodePath$392$set_shader_input

// C++ _inCAAAAheIw(CPT_InternalName id, LVecBase3i const &v) ==> NodePath$_$set_shader_input(NodePath *param0, CPT_InternalName *param1, LVecBase3i const *param2)(NodePath *, CPT_InternalName *, LVecBase3i const *)
extern void NodePath$393$set_shader_input(NodePath *self, CPT_InternalName *id, LVecBase3i const *v);
// COLLISION : NodePath_C_set_shader_input_v_psp NodePath$393$set_shader_input

// C++ _inCAAAAiELb(CPT_InternalName id, LVecBase4 const &v, int priority) ==> NodePath$_$set_shader_input(NodePath *param0, CPT_InternalName *param1, LVecBase4 const *param2, int param3)(NodePath *, CPT_InternalName *, LVecBase4 const *, int)
extern void NodePath$394$set_shader_input(NodePath *self, CPT_InternalName *id, LVecBase4 const *v, int priority);
// COLLISION : NodePath_C_set_shader_input_v_pspi NodePath$394$set_shader_input

// C++ _inCAAAAJd0g(CPT_InternalName id, LVecBase4 const &v) ==> NodePath$_$set_shader_input(NodePath *param0, CPT_InternalName *param1, LVecBase4 const *param2)(NodePath *, CPT_InternalName *, LVecBase4 const *)
extern void NodePath$395$set_shader_input(NodePath *self, CPT_InternalName *id, LVecBase4 const *v);
// COLLISION : NodePath_C_set_shader_input_v_psp NodePath$395$set_shader_input

// C++ _inCAAAAI_n7(CPT_InternalName id, LVecBase4i const &v, int priority) ==> NodePath$_$set_shader_input(NodePath *param0, CPT_InternalName *param1, LVecBase4i const *param2, int param3)(NodePath *, CPT_InternalName *, LVecBase4i const *, int)
extern void NodePath$396$set_shader_input(NodePath *self, CPT_InternalName *id, LVecBase4i const *v, int priority);
// COLLISION : NodePath_C_set_shader_input_v_pspi NodePath$396$set_shader_input

// C++ _inCAAAAT9Lw(CPT_InternalName id, LVecBase4i const &v) ==> NodePath$_$set_shader_input(NodePath *param0, CPT_InternalName *param1, LVecBase4i const *param2)(NodePath *, CPT_InternalName *, LVecBase4i const *)
extern void NodePath$397$set_shader_input(NodePath *self, CPT_InternalName *id, LVecBase4i const *v);
// COLLISION : NodePath_C_set_shader_input_v_psp NodePath$397$set_shader_input

// C++ _inCAAAA_yEU(CPT_InternalName id, NodePath const &np, int priority) ==> NodePath$_$set_shader_input(NodePath *param0, CPT_InternalName *param1, NodePath const *param2, int param3)(NodePath *, CPT_InternalName *, NodePath const *, int)
extern void NodePath$398$set_shader_input(NodePath *self, CPT_InternalName *id, NodePath const *np, int priority);
// COLLISION : NodePath_C_set_shader_input_v_pspi NodePath$398$set_shader_input

// C++ _inCAAAAULTE(CPT_InternalName id, NodePath const &np) ==> NodePath$_$set_shader_input(NodePath *param0, CPT_InternalName *param1, NodePath const *param2)(NodePath *, CPT_InternalName *, NodePath const *)
extern void NodePath$399$set_shader_input(NodePath *self, CPT_InternalName *id, NodePath const *np);
// COLLISION : NodePath_C_set_shader_input_v_psp NodePath$399$set_shader_input

// C++ _inCAAAA0P__(CPT_InternalName id, PN_stdfloat n1, PN_stdfloat n2, PN_stdfloat n3, PN_stdfloat n4, int priority) ==> NodePath$_$set_shader_input(NodePath *param0, CPT_InternalName *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5, int param6)(NodePath *, CPT_InternalName *, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat, int)
extern void NodePath$400$set_shader_input(NodePath *self, CPT_InternalName *id, PN_stdfloat n1, PN_stdfloat n2, PN_stdfloat n3, PN_stdfloat n4, int priority);

#if INDEX
#define NodePath_C_set_shader_input_v_psffffi NodePath$400$set_shader_input
#endif

// C++ _inCAAAAeAwP(CPT_InternalName id, PN_stdfloat n1, PN_stdfloat n2, PN_stdfloat n3, PN_stdfloat n4) ==> NodePath$_$set_shader_input(NodePath *param0, CPT_InternalName *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5)(NodePath *, CPT_InternalName *, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void NodePath$401$set_shader_input(NodePath *self, CPT_InternalName *id, PN_stdfloat n1, PN_stdfloat n2, PN_stdfloat n3, PN_stdfloat n4);

#if INDEX
#define NodePath_C_set_shader_input_v_psffff NodePath$401$set_shader_input
#endif

// C++ _inCAAAANiw4(CPT_InternalName id, PN_stdfloat n1, PN_stdfloat n2, PN_stdfloat n3) ==> NodePath$_$set_shader_input(NodePath *param0, CPT_InternalName *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4)(NodePath *, CPT_InternalName *, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void NodePath$402$set_shader_input(NodePath *self, CPT_InternalName *id, PN_stdfloat n1, PN_stdfloat n2, PN_stdfloat n3);

#if INDEX
#define NodePath_C_set_shader_input_v_psfff NodePath$402$set_shader_input
#endif

// C++ _inCAAAANVzy(CPT_InternalName id, PN_stdfloat n1, PN_stdfloat n2) ==> NodePath$_$set_shader_input(NodePath *param0, CPT_InternalName *param1, PN_stdfloat param2, PN_stdfloat param3)(NodePath *, CPT_InternalName *, PN_stdfloat, PN_stdfloat)
extern void NodePath$403$set_shader_input(NodePath *self, CPT_InternalName *id, PN_stdfloat n1, PN_stdfloat n2);

#if INDEX
#define NodePath_C_set_shader_input_v_psff NodePath$403$set_shader_input
#endif

// C++ _inCAAAAg8Ek(CPT_InternalName id, PTA_LMatrix3 const &v, int priority) ==> NodePath$_$set_shader_input(NodePath *param0, CPT_InternalName *param1, PTA_LMatrix3 const *param2, int param3)(NodePath *, CPT_InternalName *, PTA_LMatrix3 const *, int)
extern void NodePath$404$set_shader_input(NodePath *self, CPT_InternalName *id, PTA_LMatrix3 const *v, int priority);
// COLLISION : NodePath_C_set_shader_input_v_pspi NodePath$404$set_shader_input

// C++ _inCAAAADLGj(CPT_InternalName id, PTA_LMatrix3 const &v) ==> NodePath$_$set_shader_input(NodePath *param0, CPT_InternalName *param1, PTA_LMatrix3 const *param2)(NodePath *, CPT_InternalName *, PTA_LMatrix3 const *)
extern void NodePath$405$set_shader_input(NodePath *self, CPT_InternalName *id, PTA_LMatrix3 const *v);
// COLLISION : NodePath_C_set_shader_input_v_psp NodePath$405$set_shader_input

// C++ _inCAAAAM80F(CPT_InternalName id, PTA_LMatrix4 const &v, int priority) ==> NodePath$_$set_shader_input(NodePath *param0, CPT_InternalName *param1, PTA_LMatrix4 const *param2, int param3)(NodePath *, CPT_InternalName *, PTA_LMatrix4 const *, int)
extern void NodePath$406$set_shader_input(NodePath *self, CPT_InternalName *id, PTA_LMatrix4 const *v, int priority);
// COLLISION : NodePath_C_set_shader_input_v_pspi NodePath$406$set_shader_input

// C++ _inCAAAA3I2E(CPT_InternalName id, PTA_LMatrix4 const &v) ==> NodePath$_$set_shader_input(NodePath *param0, CPT_InternalName *param1, PTA_LMatrix4 const *param2)(NodePath *, CPT_InternalName *, PTA_LMatrix4 const *)
extern void NodePath$407$set_shader_input(NodePath *self, CPT_InternalName *id, PTA_LMatrix4 const *v);
// COLLISION : NodePath_C_set_shader_input_v_psp NodePath$407$set_shader_input

// C++ _inCAAAAG1ud(CPT_InternalName id, PTA_LVecBase2 const &v, int priority) ==> NodePath$_$set_shader_input(NodePath *param0, CPT_InternalName *param1, PTA_LVecBase2 const *param2, int param3)(NodePath *, CPT_InternalName *, PTA_LVecBase2 const *, int)
extern void NodePath$408$set_shader_input(NodePath *self, CPT_InternalName *id, PTA_LVecBase2 const *v, int priority);
// COLLISION : NodePath_C_set_shader_input_v_pspi NodePath$408$set_shader_input

// C++ _inCAAAA3qH_(CPT_InternalName id, PTA_LVecBase2 const &v) ==> NodePath$_$set_shader_input(NodePath *param0, CPT_InternalName *param1, PTA_LVecBase2 const *param2)(NodePath *, CPT_InternalName *, PTA_LVecBase2 const *)
extern void NodePath$409$set_shader_input(NodePath *self, CPT_InternalName *id, PTA_LVecBase2 const *v);
// COLLISION : NodePath_C_set_shader_input_v_psp NodePath$409$set_shader_input

// C++ _inCAAAAgmxb(CPT_InternalName id, PTA_LVecBase2i const &v, int priority) ==> NodePath$_$set_shader_input(NodePath *param0, CPT_InternalName *param1, PTA_LVecBase2i const *param2, int param3)(NodePath *, CPT_InternalName *, PTA_LVecBase2i const *, int)
extern void NodePath$410$set_shader_input(NodePath *self, CPT_InternalName *id, PTA_LVecBase2i const *v, int priority);
// COLLISION : NodePath_C_set_shader_input_v_pspi NodePath$410$set_shader_input

// C++ _inCAAAAx0En(CPT_InternalName id, PTA_LVecBase2i const &v) ==> NodePath$_$set_shader_input(NodePath *param0, CPT_InternalName *param1, PTA_LVecBase2i const *param2)(NodePath *, CPT_InternalName *, PTA_LVecBase2i const *)
extern void NodePath$411$set_shader_input(NodePath *self, CPT_InternalName *id, PTA_LVecBase2i const *v);
// COLLISION : NodePath_C_set_shader_input_v_psp NodePath$411$set_shader_input

// C++ _inCAAAA8xvV(CPT_InternalName id, PTA_LVecBase3 const &v, int priority) ==> NodePath$_$set_shader_input(NodePath *param0, CPT_InternalName *param1, PTA_LVecBase3 const *param2, int param3)(NodePath *, CPT_InternalName *, PTA_LVecBase3 const *, int)
extern void NodePath$412$set_shader_input(NodePath *self, CPT_InternalName *id, PTA_LVecBase3 const *v, int priority);
// COLLISION : NodePath_C_set_shader_input_v_pspi NodePath$412$set_shader_input

// C++ _inCAAAAAwH2(CPT_InternalName id, PTA_LVecBase3 const &v) ==> NodePath$_$set_shader_input(NodePath *param0, CPT_InternalName *param1, PTA_LVecBase3 const *param2)(NodePath *, CPT_InternalName *, PTA_LVecBase3 const *)
extern void NodePath$413$set_shader_input(NodePath *self, CPT_InternalName *id, PTA_LVecBase3 const *v);
// COLLISION : NodePath_C_set_shader_input_v_psp NodePath$413$set_shader_input

// C++ _inCAAAAzoxT(CPT_InternalName id, PTA_LVecBase3i const &v, int priority) ==> NodePath$_$set_shader_input(NodePath *param0, CPT_InternalName *param1, PTA_LVecBase3i const *param2, int param3)(NodePath *, CPT_InternalName *, PTA_LVecBase3i const *, int)
extern void NodePath$414$set_shader_input(NodePath *self, CPT_InternalName *id, PTA_LVecBase3i const *v, int priority);
// COLLISION : NodePath_C_set_shader_input_v_pspi NodePath$414$set_shader_input

// C++ _inCAAAACuEf(CPT_InternalName id, PTA_LVecBase3i const &v) ==> NodePath$_$set_shader_input(NodePath *param0, CPT_InternalName *param1, PTA_LVecBase3i const *param2)(NodePath *, CPT_InternalName *, PTA_LVecBase3i const *)
extern void NodePath$415$set_shader_input(NodePath *self, CPT_InternalName *id, PTA_LVecBase3i const *v);
// COLLISION : NodePath_C_set_shader_input_v_psp NodePath$415$set_shader_input

// C++ _inCAAAAjrvN(CPT_InternalName id, PTA_LVecBase4 const &v, int priority) ==> NodePath$_$set_shader_input(NodePath *param0, CPT_InternalName *param1, PTA_LVecBase4 const *param2, int param3)(NodePath *, CPT_InternalName *, PTA_LVecBase4 const *, int)
extern void NodePath$416$set_shader_input(NodePath *self, CPT_InternalName *id, PTA_LVecBase4 const *v, int priority);
// COLLISION : NodePath_C_set_shader_input_v_pspi NodePath$416$set_shader_input

// C++ _inCAAAAR_Hu(CPT_InternalName id, PTA_LVecBase4 const &v) ==> NodePath$_$set_shader_input(NodePath *param0, CPT_InternalName *param1, PTA_LVecBase4 const *param2)(NodePath *, CPT_InternalName *, PTA_LVecBase4 const *)
extern void NodePath$417$set_shader_input(NodePath *self, CPT_InternalName *id, PTA_LVecBase4 const *v);
// COLLISION : NodePath_C_set_shader_input_v_psp NodePath$417$set_shader_input

// C++ _inCAAAACxxL(CPT_InternalName id, PTA_LVecBase4i const &v, int priority) ==> NodePath$_$set_shader_input(NodePath *param0, CPT_InternalName *param1, PTA_LVecBase4i const *param2, int param3)(NodePath *, CPT_InternalName *, PTA_LVecBase4i const *, int)
extern void NodePath$418$set_shader_input(NodePath *self, CPT_InternalName *id, PTA_LVecBase4i const *v, int priority);
// COLLISION : NodePath_C_set_shader_input_v_pspi NodePath$418$set_shader_input

// C++ _inCAAAATgEX(CPT_InternalName id, PTA_LVecBase4i const &v) ==> NodePath$_$set_shader_input(NodePath *param0, CPT_InternalName *param1, PTA_LVecBase4i const *param2)(NodePath *, CPT_InternalName *, PTA_LVecBase4i const *)
extern void NodePath$419$set_shader_input(NodePath *self, CPT_InternalName *id, PTA_LVecBase4i const *v);
// COLLISION : NodePath_C_set_shader_input_v_psp NodePath$419$set_shader_input

// C++ _inCAAAAwB0q(CPT_InternalName id, PTA_double const &v, int priority) ==> NodePath$_$set_shader_input(NodePath *param0, CPT_InternalName *param1, PTA_double const *param2, int param3)(NodePath *, CPT_InternalName *, PTA_double const *, int)
extern void NodePath$420$set_shader_input(NodePath *self, CPT_InternalName *id, PTA_double const *v, int priority);
// COLLISION : NodePath_C_set_shader_input_v_pspi NodePath$420$set_shader_input

// C++ _inCAAAAplZf(CPT_InternalName id, PTA_double const &v) ==> NodePath$_$set_shader_input(NodePath *param0, CPT_InternalName *param1, PTA_double const *param2)(NodePath *, CPT_InternalName *, PTA_double const *)
extern void NodePath$421$set_shader_input(NodePath *self, CPT_InternalName *id, PTA_double const *v);
// COLLISION : NodePath_C_set_shader_input_v_psp NodePath$421$set_shader_input

// C++ _inCAAAAOR8U(CPT_InternalName id, PTA_float const &v, int priority) ==> NodePath$_$set_shader_input(NodePath *param0, CPT_InternalName *param1, PTA_float const *param2, int param3)(NodePath *, CPT_InternalName *, PTA_float const *, int)
extern void NodePath$422$set_shader_input(NodePath *self, CPT_InternalName *id, PTA_float const *v, int priority);
// COLLISION : NodePath_C_set_shader_input_v_pspi NodePath$422$set_shader_input

// C++ _inCAAAAvCna(CPT_InternalName id, PTA_float const &v) ==> NodePath$_$set_shader_input(NodePath *param0, CPT_InternalName *param1, PTA_float const *param2)(NodePath *, CPT_InternalName *, PTA_float const *)
extern void NodePath$423$set_shader_input(NodePath *self, CPT_InternalName *id, PTA_float const *v);
// COLLISION : NodePath_C_set_shader_input_v_psp NodePath$423$set_shader_input

// C++ _inCAAAAS_0B(CPT_InternalName id, PTA_int const &v, int priority) ==> NodePath$_$set_shader_input(NodePath *param0, CPT_InternalName *param1, PTA_int const *param2, int param3)(NodePath *, CPT_InternalName *, PTA_int const *, int)
extern void NodePath$424$set_shader_input(NodePath *self, CPT_InternalName *id, PTA_int const *v, int priority);
// COLLISION : NodePath_C_set_shader_input_v_pspi NodePath$424$set_shader_input

// C++ _inCAAAAvhUh(CPT_InternalName id, PTA_int const &v) ==> NodePath$_$set_shader_input(NodePath *param0, CPT_InternalName *param1, PTA_int const *param2)(NodePath *, CPT_InternalName *, PTA_int const *)
extern void NodePath$425$set_shader_input(NodePath *self, CPT_InternalName *id, PTA_int const *v);
// COLLISION : NodePath_C_set_shader_input_v_psp NodePath$425$set_shader_input

// C++ _inCAAAAja9D(CPT_InternalName id, ShaderBuffer *buf, int priority) ==> NodePath$_$set_shader_input(NodePath *param0, CPT_InternalName *param1, ShaderBuffer *param2, int param3)(NodePath *, CPT_InternalName *, ShaderBuffer *, int)
extern void NodePath$426$set_shader_input(NodePath *self, CPT_InternalName *id, ShaderBuffer *buf, int priority);
// COLLISION : NodePath_C_set_shader_input_v_pspi NodePath$426$set_shader_input

// C++ _inCAAAAt0RP(CPT_InternalName id, ShaderBuffer *buf) ==> NodePath$_$set_shader_input(NodePath *param0, CPT_InternalName *param1, ShaderBuffer *param2)(NodePath *, CPT_InternalName *, ShaderBuffer *)
extern void NodePath$427$set_shader_input(NodePath *self, CPT_InternalName *id, ShaderBuffer *buf);
// COLLISION : NodePath_C_set_shader_input_v_psp NodePath$427$set_shader_input

// C++ _inCAAAANs3k(CPT_InternalName id, Texture *tex, SamplerState const &sampler, int priority) ==> NodePath$_$set_shader_input(NodePath *param0, CPT_InternalName *param1, Texture *param2, SamplerState const *param3, int param4)(NodePath *, CPT_InternalName *, Texture *, SamplerState const *, int)
extern void NodePath$428$set_shader_input(NodePath *self, CPT_InternalName *id, Texture *tex, SamplerState const *sampler, int priority);

#if INDEX
#define NodePath_C_set_shader_input_v_psppi NodePath$428$set_shader_input
#endif

// C++ _inCAAAAveSm(CPT_InternalName id, Texture *tex, SamplerState const &sampler) ==> NodePath$_$set_shader_input(NodePath *param0, CPT_InternalName *param1, Texture *param2, SamplerState const *param3)(NodePath *, CPT_InternalName *, Texture *, SamplerState const *)
extern void NodePath$429$set_shader_input(NodePath *self, CPT_InternalName *id, Texture *tex, SamplerState const *sampler);

#if INDEX
#define NodePath_C_set_shader_input_v_pspp NodePath$429$set_shader_input
#endif

// C++ _inCAAAAHt_e(CPT_InternalName id, Texture *tex, bool read, bool write, int z, int n, int priority) ==> NodePath$_$set_shader_input(NodePath *param0, CPT_InternalName *param1, Texture *param2, bool param3, bool param4, int param5, int param6, int param7)(NodePath *, CPT_InternalName *, Texture *, bool, bool, int, int, int)
extern void NodePath$430$set_shader_input(NodePath *self, CPT_InternalName *id, Texture *tex, bool read, bool write, int z, int n, int priority);

#if INDEX
#define NodePath_C_set_shader_input_v_pspBBiii NodePath$430$set_shader_input
#endif

// C++ _inCAAAAr7f_(CPT_InternalName id, Texture *tex, bool read, bool write, int z, int n) ==> NodePath$_$set_shader_input(NodePath *param0, CPT_InternalName *param1, Texture *param2, bool param3, bool param4, int param5, int param6)(NodePath *, CPT_InternalName *, Texture *, bool, bool, int, int)
extern void NodePath$431$set_shader_input(NodePath *self, CPT_InternalName *id, Texture *tex, bool read, bool write, int z, int n);

#if INDEX
#define NodePath_C_set_shader_input_v_pspBBii NodePath$431$set_shader_input
#endif

// C++ _inCAAAAhcRO(CPT_InternalName id, Texture *tex, bool read, bool write, int z) ==> NodePath$_$set_shader_input(NodePath *param0, CPT_InternalName *param1, Texture *param2, bool param3, bool param4, int param5)(NodePath *, CPT_InternalName *, Texture *, bool, bool, int)
extern void NodePath$432$set_shader_input(NodePath *self, CPT_InternalName *id, Texture *tex, bool read, bool write, int z);

#if INDEX
#define NodePath_C_set_shader_input_v_pspBBi NodePath$432$set_shader_input
#endif

// C++ _inCAAAAhAJW(CPT_InternalName id, Texture *tex, bool read, bool write) ==> NodePath$_$set_shader_input(NodePath *param0, CPT_InternalName *param1, Texture *param2, bool param3, bool param4)(NodePath *, CPT_InternalName *, Texture *, bool, bool)
extern void NodePath$433$set_shader_input(NodePath *self, CPT_InternalName *id, Texture *tex, bool read, bool write);

#if INDEX
#define NodePath_C_set_shader_input_v_pspBB NodePath$433$set_shader_input
#endif

// C++ _inCAAAA_Ni0(CPT_InternalName id, Texture *tex, int priority) ==> NodePath$_$set_shader_input(NodePath *param0, CPT_InternalName *param1, Texture *param2, int param3)(NodePath *, CPT_InternalName *, Texture *, int)
extern void NodePath$434$set_shader_input(NodePath *self, CPT_InternalName *id, Texture *tex, int priority);
// COLLISION : NodePath_C_set_shader_input_v_pspi NodePath$434$set_shader_input

// C++ _inCAAAA_jM6(CPT_InternalName id, Texture *tex) ==> NodePath$_$set_shader_input(NodePath *param0, CPT_InternalName *param1, Texture *param2)(NodePath *, CPT_InternalName *, Texture *)
extern void NodePath$435$set_shader_input(NodePath *self, CPT_InternalName *id, Texture *tex);
// COLLISION : NodePath_C_set_shader_input_v_psp NodePath$435$set_shader_input

// C++ _inCAAAArRyK(CPT_InternalName id, int n1, int n2, int n3, int n4, int priority) ==> NodePath$_$set_shader_input(NodePath *param0, CPT_InternalName *param1, int param2, int param3, int param4, int param5, int param6)(NodePath *, CPT_InternalName *, int, int, int, int, int)
extern void NodePath$436$set_shader_input(NodePath *self, CPT_InternalName *id, int n1, int n2, int n3, int n4, int priority);

#if INDEX
#define NodePath_C_set_shader_input_v_psiiiii NodePath$436$set_shader_input
#endif

// C++ _inCAAAA58hL(CPT_InternalName id, int n1, int n2, int n3, int n4) ==> NodePath$_$set_shader_input(NodePath *param0, CPT_InternalName *param1, int param2, int param3, int param4, int param5)(NodePath *, CPT_InternalName *, int, int, int, int)
extern void NodePath$437$set_shader_input(NodePath *self, CPT_InternalName *id, int n1, int n2, int n3, int n4);

#if INDEX
#define NodePath_C_set_shader_input_v_psiiii NodePath$437$set_shader_input
#endif

// C++ _inCAAAAWd4r(CPT_InternalName id, int n1, int n2, int n3) ==> NodePath$_$set_shader_input(NodePath *param0, CPT_InternalName *param1, int param2, int param3, int param4)(NodePath *, CPT_InternalName *, int, int, int)
extern void NodePath$438$set_shader_input(NodePath *self, CPT_InternalName *id, int n1, int n2, int n3);

#if INDEX
#define NodePath_C_set_shader_input_v_psiii NodePath$438$set_shader_input
#endif

// C++ _inCAAAAP_Ec(CPT_InternalName id, int n1, int n2) ==> NodePath$_$set_shader_input(NodePath *param0, CPT_InternalName *param1, int param2, int param3)(NodePath *, CPT_InternalName *, int, int)
extern void NodePath$439$set_shader_input(NodePath *self, CPT_InternalName *id, int n1, int n2);

#if INDEX
#define NodePath_C_set_shader_input_v_psii NodePath$439$set_shader_input
#endif

// C++ _inCAAAAoLkB(ShaderInput &&input) ==> NodePath$_$set_shader_input(NodePath *param0, ShaderInput *param1)(NodePath *, ShaderInput *)
extern void NodePath$440$set_shader_input(NodePath *self, ShaderInput *input);

#if INDEX
#define NodePath_C_set_shader_input_v_pp NodePath$440$set_shader_input
#endif

// C++ _inCAAAA8uUt(ShaderInput const &input) ==> NodePath$_$set_shader_input(NodePath *param0, ShaderInput const *param1)(NodePath *, ShaderInput const *)
extern void NodePath$441$set_shader_input(NodePath *self, ShaderInput const *input);
// COLLISION : NodePath_C_set_shader_input_v_pp NodePath$441$set_shader_input

// C++ _inCAAAA_xqL(CPT_InternalName id) ==> NodePath$_$clear_shader_input(NodePath *param0, CPT_InternalName *param1)(NodePath *, CPT_InternalName *)
extern void NodePath$442$clear_shader_input(NodePath *self, CPT_InternalName *id);

#if INDEX
#define NodePath_C_clear_shader_input_v_ps NodePath$442$clear_shader_input
#endif

// C++ _inCAAAAs3Az(int instance_count) ==> NodePath$_$set_instance_count(NodePath *param0, int param1)(NodePath *, int)
extern void NodePath$443$set_instance_count(NodePath *self, int instance_count);

#if INDEX
#define NodePath_C_set_instance_count_v_pi NodePath$443$set_instance_count
#endif

// C++ _inCAAAAXRer() ==> NodePath$_$get_shader(NodePath const *param0)(NodePath const *)
extern Shader const * NodePath$444$get_shader(NodePath const *self);

#if INDEX
#define NodePath_C_get_shader_p_p NodePath$444$get_shader
#endif

// C++ _inCAAAA1RQl(CPT_InternalName id) ==> NodePath$_$get_shader_input(NodePath const *param0, CPT_InternalName *param1)(NodePath const *, CPT_InternalName *)
extern ShaderInput * NodePath$445$get_shader_input(NodePath const *self, CPT_InternalName *id);

#if INDEX
#define NodePath_C_get_shader_input_p_ps NodePath$445$get_shader_input
#endif

// C++ _inCAAAAFCMn() ==> NodePath$_$get_instance_count(NodePath const *param0)(NodePath const *)
extern int NodePath$446$get_instance_count(NodePath const *self);

#if INDEX
#define NodePath_C_get_instance_count_i_p NodePath$446$get_instance_count
#endif

// C++ _inCAAAAM5dH(NodePath const &other, TextureStage *stage, TransformState const *transform) ==> NodePath$_$set_tex_transform(NodePath *param0, NodePath const *param1, TextureStage *param2, TransformState const *param3)(NodePath *, NodePath const *, TextureStage *, TransformState const *)
extern void NodePath$447$set_tex_transform(NodePath *self, NodePath const *other, TextureStage *stage, TransformState const *transform);

#if INDEX
#define NodePath_C_set_tex_transform_v_pppp NodePath$447$set_tex_transform
#endif

// C++ _inCAAAA7rVh(TextureStage *stage, TransformState const *transform) ==> NodePath$_$set_tex_transform(NodePath *param0, TextureStage *param1, TransformState const *param2)(NodePath *, TextureStage *, TransformState const *)
extern void NodePath$448$set_tex_transform(NodePath *self, TextureStage *stage, TransformState const *transform);

#if INDEX
#define NodePath_C_set_tex_transform_v_ppp NodePath$448$set_tex_transform
#endif

// C++ _inCAAAAPvbV() ==> NodePath$_$clear_tex_transform(NodePath *param0)(NodePath *)
extern void NodePath$449$clear_tex_transform(NodePath *self);

#if INDEX
#define NodePath_C_clear_tex_transform_v_p NodePath$449$clear_tex_transform
#endif

// C++ _inCAAAA7hmM(TextureStage *stage) ==> NodePath$_$clear_tex_transform(NodePath *param0, TextureStage *param1)(NodePath *, TextureStage *)
extern void NodePath$450$clear_tex_transform(NodePath *self, TextureStage *stage);

#if INDEX
#define NodePath_C_clear_tex_transform_v_pp NodePath$450$clear_tex_transform
#endif

// C++ _inCAAAAW20G(TextureStage *stage) ==> NodePath$_$has_tex_transform(NodePath const *param0, TextureStage *param1)(NodePath const *, TextureStage *)
extern bool NodePath$451$has_tex_transform(NodePath const *self, TextureStage *stage);

#if INDEX
#define NodePath_C_has_tex_transform_B_pp NodePath$451$has_tex_transform
#endif

// C++ _inCAAAAkXI_(NodePath const &other, TextureStage *stage) ==> NodePath$_$get_tex_transform(NodePath const *param0, NodePath const *param1, TextureStage *param2)(NodePath const *, NodePath const *, TextureStage *)
extern char ** NodePath$452$get_tex_transform(NodePath const *self, NodePath const *other, TextureStage *stage);

#if INDEX
#define NodePath_C_get_tex_transform_p_ppp NodePath$452$get_tex_transform
#endif

// C++ _inCAAAAz2ne(TextureStage *stage) ==> NodePath$_$get_tex_transform(NodePath const *param0, TextureStage *param1)(NodePath const *, TextureStage *)
extern char ** NodePath$453$get_tex_transform(NodePath const *self, TextureStage *stage);

#if INDEX
#define NodePath_C_get_tex_transform_p_pp NodePath$453$get_tex_transform
#endif

// C++ _inCAAAApJci(NodePath const &other, TextureStage *stage, LVecBase2 const &uv) ==> NodePath$_$set_tex_offset(NodePath *param0, NodePath const *param1, TextureStage *param2, LVecBase2 const *param3)(NodePath *, NodePath const *, TextureStage *, LVecBase2 const *)
extern void NodePath$454$set_tex_offset(NodePath *self, NodePath const *other, TextureStage *stage, LVecBase2 const *uv);

#if INDEX
#define NodePath_C_set_tex_offset_v_pppp NodePath$454$set_tex_offset
#endif

// C++ _inCAAAAsHUq(NodePath const &other, TextureStage *stage, PN_stdfloat u, PN_stdfloat v) ==> NodePath$_$set_tex_offset(NodePath *param0, NodePath const *param1, TextureStage *param2, PN_stdfloat param3, PN_stdfloat param4)(NodePath *, NodePath const *, TextureStage *, PN_stdfloat, PN_stdfloat)
extern void NodePath$455$set_tex_offset(NodePath *self, NodePath const *other, TextureStage *stage, PN_stdfloat u, PN_stdfloat v);

#if INDEX
#define NodePath_C_set_tex_offset_v_pppff NodePath$455$set_tex_offset
#endif

// C++ _inCAAAAgjDc(TextureStage *stage, LVecBase2 const &uv) ==> NodePath$_$set_tex_offset(NodePath *param0, TextureStage *param1, LVecBase2 const *param2)(NodePath *, TextureStage *, LVecBase2 const *)
extern void NodePath$456$set_tex_offset(NodePath *self, TextureStage *stage, LVecBase2 const *uv);

#if INDEX
#define NodePath_C_set_tex_offset_v_ppp NodePath$456$set_tex_offset
#endif

// C++ _inCAAAA3n_9(TextureStage *stage, PN_stdfloat u, PN_stdfloat v) ==> NodePath$_$set_tex_offset(NodePath *param0, TextureStage *param1, PN_stdfloat param2, PN_stdfloat param3)(NodePath *, TextureStage *, PN_stdfloat, PN_stdfloat)
extern void NodePath$457$set_tex_offset(NodePath *self, TextureStage *stage, PN_stdfloat u, PN_stdfloat v);

#if INDEX
#define NodePath_C_set_tex_offset_v_ppff NodePath$457$set_tex_offset
#endif

// C++ _inCAAAAe6E_(NodePath const &other, TextureStage *stage, PN_stdfloat r) ==> NodePath$_$set_tex_rotate(NodePath *param0, NodePath const *param1, TextureStage *param2, PN_stdfloat param3)(NodePath *, NodePath const *, TextureStage *, PN_stdfloat)
extern void NodePath$458$set_tex_rotate(NodePath *self, NodePath const *other, TextureStage *stage, PN_stdfloat r);

#if INDEX
#define NodePath_C_set_tex_rotate_v_pppf NodePath$458$set_tex_rotate
#endif

// C++ _inCAAAAfo1H(TextureStage *stage, PN_stdfloat r) ==> NodePath$_$set_tex_rotate(NodePath *param0, TextureStage *param1, PN_stdfloat param2)(NodePath *, TextureStage *, PN_stdfloat)
extern void NodePath$459$set_tex_rotate(NodePath *self, TextureStage *stage, PN_stdfloat r);

#if INDEX
#define NodePath_C_set_tex_rotate_v_ppf NodePath$459$set_tex_rotate
#endif

// C++ _inCAAAAe3Ue(NodePath const &other, TextureStage *stage, LVecBase2 const &scale) ==> NodePath$_$set_tex_scale(NodePath *param0, NodePath const *param1, TextureStage *param2, LVecBase2 const *param3)(NodePath *, NodePath const *, TextureStage *, LVecBase2 const *)
extern void NodePath$460$set_tex_scale(NodePath *self, NodePath const *other, TextureStage *stage, LVecBase2 const *scale);

#if INDEX
#define NodePath_C_set_tex_scale_v_pppp NodePath$460$set_tex_scale
#endif

// C++ _inCAAAA6wZe(NodePath const &other, TextureStage *stage, LVecBase3 const &scale) ==> NodePath$_$set_tex_scale(NodePath *param0, NodePath const *param1, TextureStage *param2, LVecBase3 const *param3)(NodePath *, NodePath const *, TextureStage *, LVecBase3 const *)
extern void NodePath$461$set_tex_scale(NodePath *self, NodePath const *other, TextureStage *stage, LVecBase3 const *scale);
// COLLISION : NodePath_C_set_tex_scale_v_pppp NodePath$461$set_tex_scale

// C++ _inCAAAAHGAD(NodePath const &other, TextureStage *stage, PN_stdfloat scale) ==> NodePath$_$set_tex_scale(NodePath *param0, NodePath const *param1, TextureStage *param2, PN_stdfloat param3)(NodePath *, NodePath const *, TextureStage *, PN_stdfloat)
extern void NodePath$462$set_tex_scale(NodePath *self, NodePath const *other, TextureStage *stage, PN_stdfloat scale);

#if INDEX
#define NodePath_C_set_tex_scale_v_pppf NodePath$462$set_tex_scale
#endif

// C++ _inCAAAAxRiC(NodePath const &other, TextureStage *stage, PN_stdfloat su, PN_stdfloat sv) ==> NodePath$_$set_tex_scale(NodePath *param0, NodePath const *param1, TextureStage *param2, PN_stdfloat param3, PN_stdfloat param4)(NodePath *, NodePath const *, TextureStage *, PN_stdfloat, PN_stdfloat)
extern void NodePath$463$set_tex_scale(NodePath *self, NodePath const *other, TextureStage *stage, PN_stdfloat su, PN_stdfloat sv);

#if INDEX
#define NodePath_C_set_tex_scale_v_pppff NodePath$463$set_tex_scale
#endif

// C++ _inCAAAAPifO(NodePath const &other, TextureStage *stage, PN_stdfloat su, PN_stdfloat sv, PN_stdfloat sw) ==> NodePath$_$set_tex_scale(NodePath *param0, NodePath const *param1, TextureStage *param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5)(NodePath *, NodePath const *, TextureStage *, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void NodePath$464$set_tex_scale(NodePath *self, NodePath const *other, TextureStage *stage, PN_stdfloat su, PN_stdfloat sv, PN_stdfloat sw);

#if INDEX
#define NodePath_C_set_tex_scale_v_pppfff NodePath$464$set_tex_scale
#endif

// C++ _inCAAAA6dKe(TextureStage *stage, LVecBase2 const &scale) ==> NodePath$_$set_tex_scale(NodePath *param0, TextureStage *param1, LVecBase2 const *param2)(NodePath *, TextureStage *, LVecBase2 const *)
extern void NodePath$465$set_tex_scale(NodePath *self, TextureStage *stage, LVecBase2 const *scale);

#if INDEX
#define NodePath_C_set_tex_scale_v_ppp NodePath$465$set_tex_scale
#endif

// C++ _inCAAAADsLe(TextureStage *stage, LVecBase3 const &scale) ==> NodePath$_$set_tex_scale(NodePath *param0, TextureStage *param1, LVecBase3 const *param2)(NodePath *, TextureStage *, LVecBase3 const *)
extern void NodePath$466$set_tex_scale(NodePath *self, TextureStage *stage, LVecBase3 const *scale);
// COLLISION : NodePath_C_set_tex_scale_v_ppp NodePath$466$set_tex_scale

// C++ _inCAAAAawVn(TextureStage *stage, PN_stdfloat scale) ==> NodePath$_$set_tex_scale(NodePath *param0, TextureStage *param1, PN_stdfloat param2)(NodePath *, TextureStage *, PN_stdfloat)
extern void NodePath$467$set_tex_scale(NodePath *self, TextureStage *stage, PN_stdfloat scale);

#if INDEX
#define NodePath_C_set_tex_scale_v_ppf NodePath$467$set_tex_scale
#endif

// C++ _inCAAAACwLn(TextureStage *stage, PN_stdfloat su, PN_stdfloat sv) ==> NodePath$_$set_tex_scale(NodePath *param0, TextureStage *param1, PN_stdfloat param2, PN_stdfloat param3)(NodePath *, TextureStage *, PN_stdfloat, PN_stdfloat)
extern void NodePath$468$set_tex_scale(NodePath *self, TextureStage *stage, PN_stdfloat su, PN_stdfloat sv);

#if INDEX
#define NodePath_C_set_tex_scale_v_ppff NodePath$468$set_tex_scale
#endif

// C++ _inCAAAAiKKq(TextureStage *stage, PN_stdfloat su, PN_stdfloat sv, PN_stdfloat sw) ==> NodePath$_$set_tex_scale(NodePath *param0, TextureStage *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4)(NodePath *, TextureStage *, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void NodePath$469$set_tex_scale(NodePath *self, TextureStage *stage, PN_stdfloat su, PN_stdfloat sv, PN_stdfloat sw);

#if INDEX
#define NodePath_C_set_tex_scale_v_ppfff NodePath$469$set_tex_scale
#endif

// C++ _inCAAAAtMN_(NodePath const &other, TextureStage *stage) ==> NodePath$_$get_tex_offset(NodePath const *param0, NodePath const *param1, TextureStage *param2)(NodePath const *, NodePath const *, TextureStage *)
extern LVecBase2 * NodePath$470$get_tex_offset(NodePath const *self, NodePath const *other, TextureStage *stage);

#if INDEX
#define NodePath_C_get_tex_offset_p_ppp NodePath$470$get_tex_offset
#endif

// C++ _inCAAAAOSVy(TextureStage *stage) ==> NodePath$_$get_tex_offset(NodePath const *param0, TextureStage *param1)(NodePath const *, TextureStage *)
extern LVecBase2 * NodePath$471$get_tex_offset(NodePath const *self, TextureStage *stage);

#if INDEX
#define NodePath_C_get_tex_offset_p_pp NodePath$471$get_tex_offset
#endif

// C++ _inCAAAAgsWE(NodePath const &other, TextureStage *stage) ==> NodePath$_$get_tex_rotate(NodePath const *param0, NodePath const *param1, TextureStage *param2)(NodePath const *, NodePath const *, TextureStage *)
extern PN_stdfloat NodePath$472$get_tex_rotate(NodePath const *self, NodePath const *other, TextureStage *stage);

#if INDEX
#define NodePath_C_get_tex_rotate_f_ppp NodePath$472$get_tex_rotate
#endif

// C++ _inCAAAAF4f4(TextureStage *stage) ==> NodePath$_$get_tex_rotate(NodePath const *param0, TextureStage *param1)(NodePath const *, TextureStage *)
extern PN_stdfloat NodePath$473$get_tex_rotate(NodePath const *self, TextureStage *stage);

#if INDEX
#define NodePath_C_get_tex_rotate_f_pp NodePath$473$get_tex_rotate
#endif

// C++ _inCAAAAhlUo(NodePath const &other, TextureStage *stage) ==> NodePath$_$get_tex_scale(NodePath const *param0, NodePath const *param1, TextureStage *param2)(NodePath const *, NodePath const *, TextureStage *)
extern LVecBase2 * NodePath$474$get_tex_scale(NodePath const *self, NodePath const *other, TextureStage *stage);

#if INDEX
#define NodePath_C_get_tex_scale_p_ppp NodePath$474$get_tex_scale
#endif

// C++ _inCAAAA6J_f(TextureStage *stage) ==> NodePath$_$get_tex_scale(NodePath const *param0, TextureStage *param1)(NodePath const *, TextureStage *)
extern LVecBase2 * NodePath$475$get_tex_scale(NodePath const *self, TextureStage *stage);

#if INDEX
#define NodePath_C_get_tex_scale_p_pp NodePath$475$get_tex_scale
#endif

// C++ _inCAAAATG_w(NodePath const &other, TextureStage *stage, LVecBase3 const &uvw) ==> NodePath$_$set_tex_pos(NodePath *param0, NodePath const *param1, TextureStage *param2, LVecBase3 const *param3)(NodePath *, NodePath const *, TextureStage *, LVecBase3 const *)
extern void NodePath$476$set_tex_pos(NodePath *self, NodePath const *other, TextureStage *stage, LVecBase3 const *uvw);

#if INDEX
#define NodePath_C_set_tex_pos_v_pppp NodePath$476$set_tex_pos
#endif

// C++ _inCAAAAru67(NodePath const &other, TextureStage *stage, PN_stdfloat u, PN_stdfloat v, PN_stdfloat w) ==> NodePath$_$set_tex_pos(NodePath *param0, NodePath const *param1, TextureStage *param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5)(NodePath *, NodePath const *, TextureStage *, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void NodePath$477$set_tex_pos(NodePath *self, NodePath const *other, TextureStage *stage, PN_stdfloat u, PN_stdfloat v, PN_stdfloat w);

#if INDEX
#define NodePath_C_set_tex_pos_v_pppfff NodePath$477$set_tex_pos
#endif

// C++ _inCAAAAHtN9(TextureStage *stage, LVecBase3 const &uvw) ==> NodePath$_$set_tex_pos(NodePath *param0, TextureStage *param1, LVecBase3 const *param2)(NodePath *, TextureStage *, LVecBase3 const *)
extern void NodePath$478$set_tex_pos(NodePath *self, TextureStage *stage, LVecBase3 const *uvw);

#if INDEX
#define NodePath_C_set_tex_pos_v_ppp NodePath$478$set_tex_pos
#endif

// C++ _inCAAAAfj4v(TextureStage *stage, PN_stdfloat u, PN_stdfloat v, PN_stdfloat w) ==> NodePath$_$set_tex_pos(NodePath *param0, TextureStage *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4)(NodePath *, TextureStage *, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void NodePath$479$set_tex_pos(NodePath *self, TextureStage *stage, PN_stdfloat u, PN_stdfloat v, PN_stdfloat w);

#if INDEX
#define NodePath_C_set_tex_pos_v_ppfff NodePath$479$set_tex_pos
#endif

// C++ _inCAAAAuhsY(NodePath const &other, TextureStage *stage, LVecBase3 const &hpr) ==> NodePath$_$set_tex_hpr(NodePath *param0, NodePath const *param1, TextureStage *param2, LVecBase3 const *param3)(NodePath *, NodePath const *, TextureStage *, LVecBase3 const *)
extern void NodePath$480$set_tex_hpr(NodePath *self, NodePath const *other, TextureStage *stage, LVecBase3 const *hpr);

#if INDEX
#define NodePath_C_set_tex_hpr_v_pppp NodePath$480$set_tex_hpr
#endif

// C++ _inCAAAAmLpj(NodePath const &other, TextureStage *stage, PN_stdfloat h, PN_stdfloat p, PN_stdfloat r) ==> NodePath$_$set_tex_hpr(NodePath *param0, NodePath const *param1, TextureStage *param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5)(NodePath *, NodePath const *, TextureStage *, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void NodePath$481$set_tex_hpr(NodePath *self, NodePath const *other, TextureStage *stage, PN_stdfloat h, PN_stdfloat p, PN_stdfloat r);

#if INDEX
#define NodePath_C_set_tex_hpr_v_pppfff NodePath$481$set_tex_hpr
#endif

// C++ _inCAAAAaI7k(TextureStage *stage, LVecBase3 const &hpr) ==> NodePath$_$set_tex_hpr(NodePath *param0, TextureStage *param1, LVecBase3 const *param2)(NodePath *, TextureStage *, LVecBase3 const *)
extern void NodePath$482$set_tex_hpr(NodePath *self, TextureStage *stage, LVecBase3 const *hpr);

#if INDEX
#define NodePath_C_set_tex_hpr_v_ppp NodePath$482$set_tex_hpr
#endif

// C++ _inCAAAABykX(TextureStage *stage, PN_stdfloat h, PN_stdfloat p, PN_stdfloat r) ==> NodePath$_$set_tex_hpr(NodePath *param0, TextureStage *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4)(NodePath *, TextureStage *, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void NodePath$483$set_tex_hpr(NodePath *self, TextureStage *stage, PN_stdfloat h, PN_stdfloat p, PN_stdfloat r);

#if INDEX
#define NodePath_C_set_tex_hpr_v_ppfff NodePath$483$set_tex_hpr
#endif

// C++ _inCAAAAJ7Vi(NodePath const &other, TextureStage *stage) ==> NodePath$_$get_tex_pos(NodePath const *param0, NodePath const *param1, TextureStage *param2)(NodePath const *, NodePath const *, TextureStage *)
extern LVecBase3 * NodePath$484$get_tex_pos(NodePath const *self, NodePath const *other, TextureStage *stage);

#if INDEX
#define NodePath_C_get_tex_pos_p_ppp NodePath$484$get_tex_pos
#endif

// C++ _inCAAAApg2Y(TextureStage *stage) ==> NodePath$_$get_tex_pos(NodePath const *param0, TextureStage *param1)(NodePath const *, TextureStage *)
extern LVecBase3 * NodePath$485$get_tex_pos(NodePath const *self, TextureStage *stage);

#if INDEX
#define NodePath_C_get_tex_pos_p_pp NodePath$485$get_tex_pos
#endif

// C++ _inCAAAAH0DK(NodePath const &other, TextureStage *stage) ==> NodePath$_$get_tex_hpr(NodePath const *param0, NodePath const *param1, TextureStage *param2)(NodePath const *, NodePath const *, TextureStage *)
extern LVecBase3 * NodePath$486$get_tex_hpr(NodePath const *self, NodePath const *other, TextureStage *stage);

#if INDEX
#define NodePath_C_get_tex_hpr_p_ppp NodePath$486$get_tex_hpr
#endif

// C++ _inCAAAA_wiA(TextureStage *stage) ==> NodePath$_$get_tex_hpr(NodePath const *param0, TextureStage *param1)(NodePath const *, TextureStage *)
extern LVecBase3 * NodePath$487$get_tex_hpr(NodePath const *self, TextureStage *stage);

#if INDEX
#define NodePath_C_get_tex_hpr_p_pp NodePath$487$get_tex_hpr
#endif

// C++ _inCAAAAbZgd(NodePath const &other, TextureStage *stage) ==> NodePath$_$get_tex_scale_3d(NodePath const *param0, NodePath const *param1, TextureStage *param2)(NodePath const *, NodePath const *, TextureStage *)
extern LVecBase3 * NodePath$488$get_tex_scale_3d(NodePath const *self, NodePath const *other, TextureStage *stage);

#if INDEX
#define NodePath_C_get_tex_scale_3d_p_ppp NodePath$488$get_tex_scale_3d
#endif

// C++ _inCAAAAKAhK(TextureStage *stage) ==> NodePath$_$get_tex_scale_3d(NodePath const *param0, TextureStage *param1)(NodePath const *, TextureStage *)
extern LVecBase3 * NodePath$489$get_tex_scale_3d(NodePath const *self, TextureStage *stage);

#if INDEX
#define NodePath_C_get_tex_scale_3d_p_pp NodePath$489$get_tex_scale_3d
#endif

// C++ _inCAAAAdzav(TextureStage *stage, RenderAttrib::TexGenMode mode, LTexCoord3 const &constant_value, int priority) ==> NodePath$_$set_tex_gen(NodePath *param0, TextureStage *param1, RenderAttrib::TexGenMode param2, LTexCoord3 const *param3, int param4)(NodePath *, TextureStage *, RenderAttrib::TexGenMode, LTexCoord3 const *, int)
extern void NodePath$490$set_tex_gen(NodePath *self, TextureStage *stage, RenderAttrib$_TexGenMode mode, LTexCoord3 const *constant_value, int priority);

#if INDEX
#define NodePath_C_set_tex_gen_v_ppppi NodePath$490$set_tex_gen
#endif

// C++ _inCAAAAb0sJ(TextureStage *stage, RenderAttrib::TexGenMode mode, LTexCoord3 const &constant_value) ==> NodePath$_$set_tex_gen(NodePath *param0, TextureStage *param1, RenderAttrib::TexGenMode param2, LTexCoord3 const *param3)(NodePath *, TextureStage *, RenderAttrib::TexGenMode, LTexCoord3 const *)
extern void NodePath$491$set_tex_gen(NodePath *self, TextureStage *stage, RenderAttrib$_TexGenMode mode, LTexCoord3 const *constant_value);

#if INDEX
#define NodePath_C_set_tex_gen_v_pppp NodePath$491$set_tex_gen
#endif

// C++ _inCAAAAEZu2(TextureStage *stage, RenderAttrib::TexGenMode mode, int priority) ==> NodePath$_$set_tex_gen(NodePath *param0, TextureStage *param1, RenderAttrib::TexGenMode param2, int param3)(NodePath *, TextureStage *, RenderAttrib::TexGenMode, int)
extern void NodePath$492$set_tex_gen(NodePath *self, TextureStage *stage, RenderAttrib$_TexGenMode mode, int priority);

#if INDEX
#define NodePath_C_set_tex_gen_v_pppi NodePath$492$set_tex_gen
#endif

// C++ _inCAAAAz8w0(TextureStage *stage, RenderAttrib::TexGenMode mode) ==> NodePath$_$set_tex_gen(NodePath *param0, TextureStage *param1, RenderAttrib::TexGenMode param2)(NodePath *, TextureStage *, RenderAttrib::TexGenMode)
extern void NodePath$493$set_tex_gen(NodePath *self, TextureStage *stage, RenderAttrib$_TexGenMode mode);

#if INDEX
#define NodePath_C_set_tex_gen_v_ppp NodePath$493$set_tex_gen
#endif

// C++ _inCAAAAiojB() ==> NodePath$_$clear_tex_gen(NodePath *param0)(NodePath *)
extern void NodePath$494$clear_tex_gen(NodePath *self);

#if INDEX
#define NodePath_C_clear_tex_gen_v_p NodePath$494$clear_tex_gen
#endif

// C++ _inCAAAAY_YK(TextureStage *stage) ==> NodePath$_$clear_tex_gen(NodePath *param0, TextureStage *param1)(NodePath *, TextureStage *)
extern void NodePath$495$clear_tex_gen(NodePath *self, TextureStage *stage);

#if INDEX
#define NodePath_C_clear_tex_gen_v_pp NodePath$495$clear_tex_gen
#endif

// C++ _inCAAAAePbA(TextureStage *stage) ==> NodePath$_$has_tex_gen(NodePath const *param0, TextureStage *param1)(NodePath const *, TextureStage *)
extern bool NodePath$496$has_tex_gen(NodePath const *self, TextureStage *stage);

#if INDEX
#define NodePath_C_has_tex_gen_B_pp NodePath$496$has_tex_gen
#endif

// C++ _inCAAAA7MOY(TextureStage *stage) ==> NodePath$_$get_tex_gen(NodePath const *param0, TextureStage *param1)(NodePath const *, TextureStage *)
extern RenderAttrib$_TexGenMode NodePath$497$get_tex_gen(NodePath const *self, TextureStage *stage);

#if INDEX
#define NodePath_C_get_tex_gen_p_pp NodePath$497$get_tex_gen
#endif

// C++ _inCAAAAIC4h(TextureStage *stage, NodePath const &from, NodePath const &to, int lens_index) ==> NodePath$_$set_tex_projector(NodePath *param0, TextureStage *param1, NodePath const *param2, NodePath const *param3, int param4)(NodePath *, TextureStage *, NodePath const *, NodePath const *, int)
extern void NodePath$498$set_tex_projector(NodePath *self, TextureStage *stage, NodePath const *from, NodePath const *to, int lens_index);

#if INDEX
#define NodePath_C_set_tex_projector_v_ppppi NodePath$498$set_tex_projector
#endif

// C++ _inCAAAAvD7f(TextureStage *stage, NodePath const &from, NodePath const &to) ==> NodePath$_$set_tex_projector(NodePath *param0, TextureStage *param1, NodePath const *param2, NodePath const *param3)(NodePath *, TextureStage *, NodePath const *, NodePath const *)
extern void NodePath$499$set_tex_projector(NodePath *self, TextureStage *stage, NodePath const *from, NodePath const *to);

#if INDEX
#define NodePath_C_set_tex_projector_v_pppp NodePath$499$set_tex_projector
#endif

// C++ _inCAAAAfHQL() ==> NodePath$_$clear_tex_projector(NodePath *param0)(NodePath *)
extern void NodePath$500$clear_tex_projector(NodePath *self);

#if INDEX
#define NodePath_C_clear_tex_projector_v_p NodePath$500$clear_tex_projector
#endif

// C++ _inCAAAAYLcC(TextureStage *stage) ==> NodePath$_$clear_tex_projector(NodePath *param0, TextureStage *param1)(NodePath *, TextureStage *)
extern void NodePath$501$clear_tex_projector(NodePath *self, TextureStage *stage);

#if INDEX
#define NodePath_C_clear_tex_projector_v_pp NodePath$501$clear_tex_projector
#endif

// C++ _inCAAAAmg0n(TextureStage *stage) ==> NodePath$_$has_tex_projector(NodePath const *param0, TextureStage *param1)(NodePath const *, TextureStage *)
extern bool NodePath$502$has_tex_projector(NodePath const *self, TextureStage *stage);

#if INDEX
#define NodePath_C_has_tex_projector_B_pp NodePath$502$has_tex_projector
#endif

// C++ _inCAAAAqz7d(TextureStage *stage) ==> NodePath$_$get_tex_projector_from(NodePath const *param0, TextureStage *param1)(NodePath const *, TextureStage *)
extern NodePath * NodePath$503$get_tex_projector_from(NodePath const *self, TextureStage *stage);

#if INDEX
#define NodePath_C_get_tex_projector_from_p_pp NodePath$503$get_tex_projector_from
#endif

// C++ _inCAAAAQ1wy(TextureStage *stage) ==> NodePath$_$get_tex_projector_to(NodePath const *param0, TextureStage *param1)(NodePath const *, TextureStage *)
extern NodePath * NodePath$504$get_tex_projector_to(NodePath const *self, TextureStage *stage);

#if INDEX
#define NodePath_C_get_tex_projector_to_p_pp NodePath$504$get_tex_projector_to
#endif

// C++ _inCAAAAyMJ7(TextureStage *stage, Texture *tex, NodePath const &projector) ==> NodePath$_$project_texture(NodePath *param0, TextureStage *param1, Texture *param2, NodePath const *param3)(NodePath *, TextureStage *, Texture *, NodePath const *)
extern void NodePath$505$project_texture(NodePath *self, TextureStage *stage, Texture *tex, NodePath const *projector);

#if INDEX
#define NodePath_C_project_texture_v_pppp NodePath$505$project_texture
#endif

// C++ _inCAAAAfb_F(TextureStage *stage) ==> NodePath$_$clear_project_texture(NodePath *param0, TextureStage *param1)(NodePath *, TextureStage *)
extern void NodePath$506$clear_project_texture(NodePath *self, TextureStage *stage);

#if INDEX
#define NodePath_C_clear_project_texture_v_pp NodePath$506$clear_project_texture
#endif

// C++ _inCAAAAdBqp(std::string const &texcoord_name) ==> NodePath$_$has_texcoord(NodePath const *param0, char const *param1)(NodePath const *, char const *)
extern bool NodePath$507$has_texcoord(NodePath const *self, char const *texcoord_name);

#if INDEX
#define NodePath_C_has_texcoord_B_ps NodePath$507$has_texcoord
#endif

// C++ _inCAAAAO0Oo(InternalName const *name) ==> NodePath$_$has_vertex_column(NodePath const *param0, InternalName const *param1)(NodePath const *, InternalName const *)
extern bool NodePath$508$has_vertex_column(NodePath const *self, InternalName const *name);

#if INDEX
#define NodePath_C_has_vertex_column_B_ps NodePath$508$has_vertex_column
#endif

// C++ _inCAAAA5Dji() ==> NodePath$_$find_all_vertex_columns(NodePath const *param0)(NodePath const *)
extern InternalNameCollection * NodePath$509$find_all_vertex_columns(NodePath const *self);

#if INDEX
#define NodePath_C_find_all_vertex_columns_p_p NodePath$509$find_all_vertex_columns
#endif

// C++ _inCAAAABbwS(std::string const &name) ==> NodePath$_$find_all_vertex_columns(NodePath const *param0, char const *param1)(NodePath const *, char const *)
extern InternalNameCollection * NodePath$510$find_all_vertex_columns(NodePath const *self, char const *name);

#if INDEX
#define NodePath_C_find_all_vertex_columns_p_ps NodePath$510$find_all_vertex_columns
#endif

// C++ _inCAAAAUJtH() ==> NodePath$_$find_all_texcoords(NodePath const *param0)(NodePath const *)
extern InternalNameCollection * NodePath$511$find_all_texcoords(NodePath const *self);

#if INDEX
#define NodePath_C_find_all_texcoords_p_p NodePath$511$find_all_texcoords
#endif

// C++ _inCAAAA5Izf(std::string const &name) ==> NodePath$_$find_all_texcoords(NodePath const *param0, char const *param1)(NodePath const *, char const *)
extern InternalNameCollection * NodePath$512$find_all_texcoords(NodePath const *self, char const *name);

#if INDEX
#define NodePath_C_find_all_texcoords_p_ps NodePath$512$find_all_texcoords
#endif

// C++ _inCAAAAlksv(TextureStage *stage) ==> NodePath$_$find_texture(NodePath const *param0, TextureStage *param1)(NodePath const *, TextureStage *)
extern Texture * NodePath$513$find_texture(NodePath const *self, TextureStage *stage);

#if INDEX
#define NodePath_C_find_texture_p_pp NodePath$513$find_texture
#endif

// C++ _inCAAAAuh06(std::string const &name) ==> NodePath$_$find_texture(NodePath const *param0, char const *param1)(NodePath const *, char const *)
extern Texture * NodePath$514$find_texture(NodePath const *self, char const *name);

#if INDEX
#define NodePath_C_find_texture_p_ps NodePath$514$find_texture
#endif

// C++ _inCAAAA_z1D() ==> NodePath$_$find_all_textures(NodePath const *param0)(NodePath const *)
extern TextureCollection * NodePath$515$find_all_textures(NodePath const *self);

#if INDEX
#define NodePath_C_find_all_textures_p_p NodePath$515$find_all_textures
#endif

// C++ _inCAAAAZ8Sw(TextureStage *stage) ==> NodePath$_$find_all_textures(NodePath const *param0, TextureStage *param1)(NodePath const *, TextureStage *)
extern TextureCollection * NodePath$516$find_all_textures(NodePath const *self, TextureStage *stage);

#if INDEX
#define NodePath_C_find_all_textures_p_pp NodePath$516$find_all_textures
#endif

// C++ _inCAAAAnyiG(std::string const &name) ==> NodePath$_$find_all_textures(NodePath const *param0, char const *param1)(NodePath const *, char const *)
extern TextureCollection * NodePath$517$find_all_textures(NodePath const *self, char const *name);

#if INDEX
#define NodePath_C_find_all_textures_p_ps NodePath$517$find_all_textures
#endif

// C++ _inCAAAACE6q(std::string const &name) ==> NodePath$_$find_texture_stage(NodePath const *param0, char const *param1)(NodePath const *, char const *)
extern TextureStage * NodePath$518$find_texture_stage(NodePath const *self, char const *name);

#if INDEX
#define NodePath_C_find_texture_stage_p_ps NodePath$518$find_texture_stage
#endif

// C++ _inCAAAAcefu() ==> NodePath$_$find_all_texture_stages(NodePath const *param0)(NodePath const *)
extern TextureStageCollection * NodePath$519$find_all_texture_stages(NodePath const *self);

#if INDEX
#define NodePath_C_find_all_texture_stages_p_p NodePath$519$find_all_texture_stages
#endif

// C++ _inCAAAAmute(std::string const &name) ==> NodePath$_$find_all_texture_stages(NodePath const *param0, char const *param1)(NodePath const *, char const *)
extern TextureStageCollection * NodePath$520$find_all_texture_stages(NodePath const *self, char const *name);

#if INDEX
#define NodePath_C_find_all_texture_stages_p_ps NodePath$520$find_all_texture_stages
#endif

// C++ _inCAAAAPvtN(TextureStage *stage) ==> NodePath$_$unify_texture_stages(NodePath *param0, TextureStage *param1)(NodePath *, TextureStage *)
extern void NodePath$521$unify_texture_stages(NodePath *self, TextureStage *stage);

#if INDEX
#define NodePath_C_unify_texture_stages_v_pp NodePath$521$unify_texture_stages
#endif

// C++ _inCAAAAGFUc(std::string const &name) ==> NodePath$_$find_material(NodePath const *param0, char const *param1)(NodePath const *, char const *)
extern Material * NodePath$522$find_material(NodePath const *self, char const *name);

#if INDEX
#define NodePath_C_find_material_p_ps NodePath$522$find_material
#endif

// C++ _inCAAAAnq8r() ==> NodePath$_$find_all_materials(NodePath const *param0)(NodePath const *)
extern MaterialCollection * NodePath$523$find_all_materials(NodePath const *self);

#if INDEX
#define NodePath_C_find_all_materials_p_p NodePath$523$find_all_materials
#endif

// C++ _inCAAAAznDE(std::string const &name) ==> NodePath$_$find_all_materials(NodePath const *param0, char const *param1)(NodePath const *, char const *)
extern MaterialCollection * NodePath$524$find_all_materials(NodePath const *self, char const *name);

#if INDEX
#define NodePath_C_find_all_materials_p_ps NodePath$524$find_all_materials
#endif

// C++ _inCAAAAfZam(Material *tex, int priority) ==> NodePath$_$set_material(NodePath *param0, Material *param1, int param2)(NodePath *, Material *, int)
extern void NodePath$525$set_material(NodePath *self, Material *tex, int priority);

#if INDEX
#define NodePath_C_set_material_v_ppi NodePath$525$set_material
#endif

// C++ _inCAAAA2Xcl(Material *tex) ==> NodePath$_$set_material(NodePath *param0, Material *param1)(NodePath *, Material *)
extern void NodePath$526$set_material(NodePath *self, Material *tex);

#if INDEX
#define NodePath_C_set_material_v_pp NodePath$526$set_material
#endif

// C++ _inCAAAAgcpR(int priority) ==> NodePath$_$set_material_off(NodePath *param0, int param1)(NodePath *, int)
extern void NodePath$527$set_material_off(NodePath *self, int priority);

#if INDEX
#define NodePath_C_set_material_off_v_pi NodePath$527$set_material_off
#endif

// C++ _inCAAAA_bEb() ==> NodePath$_$set_material_off(NodePath *param0)(NodePath *)
extern void NodePath$528$set_material_off(NodePath *self);

#if INDEX
#define NodePath_C_set_material_off_v_p NodePath$528$set_material_off
#endif

// C++ _inCAAAABVUw() ==> NodePath$_$clear_material(NodePath *param0)(NodePath *)
extern void NodePath$529$clear_material(NodePath *self);

#if INDEX
#define NodePath_C_clear_material_v_p NodePath$529$clear_material
#endif

// C++ _inCAAAAV_e6() ==> NodePath$_$has_material(NodePath const *param0)(NodePath const *)
extern bool NodePath$530$has_material(NodePath const *self);

#if INDEX
#define NodePath_C_has_material_B_p NodePath$530$has_material
#endif

// C++ _inCAAAAr_RS() ==> NodePath$_$get_material(NodePath const *param0)(NodePath const *)
extern char ** NodePath$531$get_material(NodePath const *self);

#if INDEX
#define NodePath_C_get_material_p_p NodePath$531$get_material
#endif

// C++ _inCAAAAW7m7(Material *mat, Material *new_mat) ==> NodePath$_$replace_material(NodePath *param0, Material *param1, Material *param2)(NodePath *, Material *, Material *)
extern void NodePath$532$replace_material(NodePath *self, Material *mat, Material *new_mat);

#if INDEX
#define NodePath_C_replace_material_v_ppp NodePath$532$replace_material
#endif

// C++ _inCAAAAmIDI(Fog *fog, int priority) ==> NodePath$_$set_fog(NodePath *param0, Fog *param1, int param2)(NodePath *, Fog *, int)
extern void NodePath$533$set_fog(NodePath *self, Fog *fog, int priority);

#if INDEX
#define NodePath_C_set_fog_v_ppi NodePath$533$set_fog
#endif

// C++ _inCAAAAvA0X(Fog *fog) ==> NodePath$_$set_fog(NodePath *param0, Fog *param1)(NodePath *, Fog *)
extern void NodePath$534$set_fog(NodePath *self, Fog *fog);

#if INDEX
#define NodePath_C_set_fog_v_pp NodePath$534$set_fog
#endif

// C++ _inCAAAA9qa5(int priority) ==> NodePath$_$set_fog_off(NodePath *param0, int param1)(NodePath *, int)
extern void NodePath$535$set_fog_off(NodePath *self, int priority);

#if INDEX
#define NodePath_C_set_fog_off_v_pi NodePath$535$set_fog_off
#endif

// C++ _inCAAAAfgI_() ==> NodePath$_$set_fog_off(NodePath *param0)(NodePath *)
extern void NodePath$536$set_fog_off(NodePath *self);

#if INDEX
#define NodePath_C_set_fog_off_v_p NodePath$536$set_fog_off
#endif

// C++ _inCAAAAPL5h() ==> NodePath$_$clear_fog(NodePath *param0)(NodePath *)
extern void NodePath$537$clear_fog(NodePath *self);

#if INDEX
#define NodePath_C_clear_fog_v_p NodePath$537$clear_fog
#endif

// C++ _inCAAAAJ3dh() ==> NodePath$_$has_fog(NodePath const *param0)(NodePath const *)
extern bool NodePath$538$has_fog(NodePath const *self);

#if INDEX
#define NodePath_C_has_fog_B_p NodePath$538$has_fog
#endif

// C++ _inCAAAAXW1z() ==> NodePath$_$has_fog_off(NodePath const *param0)(NodePath const *)
extern bool NodePath$539$has_fog_off(NodePath const *self);

#if INDEX
#define NodePath_C_has_fog_off_B_p NodePath$539$has_fog_off
#endif

// C++ _inCAAAAW3Q5() ==> NodePath$_$get_fog(NodePath const *param0)(NodePath const *)
extern Fog * NodePath$540$get_fog(NodePath const *self);

#if INDEX
#define NodePath_C_get_fog_p_p NodePath$540$get_fog
#endif

// C++ _inCAAAA3mJB(int priority) ==> NodePath$_$set_render_mode_wireframe(NodePath *param0, int param1)(NodePath *, int)
extern void NodePath$541$set_render_mode_wireframe(NodePath *self, int priority);

#if INDEX
#define NodePath_C_set_render_mode_wireframe_v_pi NodePath$541$set_render_mode_wireframe
#endif

// C++ _inCAAAAE5Vy() ==> NodePath$_$set_render_mode_wireframe(NodePath *param0)(NodePath *)
extern void NodePath$542$set_render_mode_wireframe(NodePath *self);

#if INDEX
#define NodePath_C_set_render_mode_wireframe_v_p NodePath$542$set_render_mode_wireframe
#endif

// C++ _inCAAAAGdFx(int priority) ==> NodePath$_$set_render_mode_filled(NodePath *param0, int param1)(NodePath *, int)
extern void NodePath$543$set_render_mode_filled(NodePath *self, int priority);

#if INDEX
#define NodePath_C_set_render_mode_filled_v_pi NodePath$543$set_render_mode_filled
#endif

// C++ _inCAAAAMX6K() ==> NodePath$_$set_render_mode_filled(NodePath *param0)(NodePath *)
extern void NodePath$544$set_render_mode_filled(NodePath *self);

#if INDEX
#define NodePath_C_set_render_mode_filled_v_p NodePath$544$set_render_mode_filled
#endif

// C++ _inCAAAA7ay3(LColor const &wireframe_color, int priority) ==> NodePath$_$set_render_mode_filled_wireframe(NodePath *param0, LColor const *param1, int param2)(NodePath *, LColor const *, int)
extern void NodePath$545$set_render_mode_filled_wireframe(NodePath *self, LColor const *wireframe_color, int priority);

#if INDEX
#define NodePath_C_set_render_mode_filled_wireframe_v_ppi NodePath$545$set_render_mode_filled_wireframe
#endif

// C++ _inCAAAAwWo6(LColor const &wireframe_color) ==> NodePath$_$set_render_mode_filled_wireframe(NodePath *param0, LColor const *param1)(NodePath *, LColor const *)
extern void NodePath$546$set_render_mode_filled_wireframe(NodePath *self, LColor const *wireframe_color);

#if INDEX
#define NodePath_C_set_render_mode_filled_wireframe_v_pp NodePath$546$set_render_mode_filled_wireframe
#endif

// C++ _inCAAAA1ZKD(PN_stdfloat thickness, int priority) ==> NodePath$_$set_render_mode_thickness(NodePath *param0, PN_stdfloat param1, int param2)(NodePath *, PN_stdfloat, int)
extern void NodePath$547$set_render_mode_thickness(NodePath *self, PN_stdfloat thickness, int priority);

#if INDEX
#define NodePath_C_set_render_mode_thickness_v_pfi NodePath$547$set_render_mode_thickness
#endif

// C++ _inCAAAAY_8S(PN_stdfloat thickness) ==> NodePath$_$set_render_mode_thickness(NodePath *param0, PN_stdfloat param1)(NodePath *, PN_stdfloat)
extern void NodePath$548$set_render_mode_thickness(NodePath *self, PN_stdfloat thickness);

#if INDEX
#define NodePath_C_set_render_mode_thickness_v_pf NodePath$548$set_render_mode_thickness
#endif

// C++ _inCAAAAaI_p(bool perspective, int priority) ==> NodePath$_$set_render_mode_perspective(NodePath *param0, bool param1, int param2)(NodePath *, bool, int)
extern void NodePath$549$set_render_mode_perspective(NodePath *self, bool perspective, int priority);

#if INDEX
#define NodePath_C_set_render_mode_perspective_v_pBi NodePath$549$set_render_mode_perspective
#endif

// C++ _inCAAAA0c2x(bool perspective) ==> NodePath$_$set_render_mode_perspective(NodePath *param0, bool param1)(NodePath *, bool)
extern void NodePath$550$set_render_mode_perspective(NodePath *self, bool perspective);

#if INDEX
#define NodePath_C_set_render_mode_perspective_v_pB NodePath$550$set_render_mode_perspective
#endif

// C++ _inCAAAAOkES(RenderModeAttrib::Mode mode, PN_stdfloat thickness, int priority) ==> NodePath$_$set_render_mode(NodePath *param0, RenderModeAttrib::Mode param1, PN_stdfloat param2, int param3)(NodePath *, RenderModeAttrib::Mode, PN_stdfloat, int)
extern void NodePath$551$set_render_mode(NodePath *self, RenderModeAttrib$_Mode mode, PN_stdfloat thickness, int priority);

#if INDEX
#define NodePath_C_set_render_mode_v_ppfi NodePath$551$set_render_mode
#endif

// C++ _inCAAAAVaB2(RenderModeAttrib::Mode mode, PN_stdfloat thickness) ==> NodePath$_$set_render_mode(NodePath *param0, RenderModeAttrib::Mode param1, PN_stdfloat param2)(NodePath *, RenderModeAttrib::Mode, PN_stdfloat)
extern void NodePath$552$set_render_mode(NodePath *self, RenderModeAttrib$_Mode mode, PN_stdfloat thickness);

#if INDEX
#define NodePath_C_set_render_mode_v_ppf NodePath$552$set_render_mode
#endif

// C++ _inCAAAA65TZ() ==> NodePath$_$clear_render_mode(NodePath *param0)(NodePath *)
extern void NodePath$553$clear_render_mode(NodePath *self);

#if INDEX
#define NodePath_C_clear_render_mode_v_p NodePath$553$clear_render_mode
#endif

// C++ _inCAAAAnDaf() ==> NodePath$_$has_render_mode(NodePath const *param0)(NodePath const *)
extern bool NodePath$554$has_render_mode(NodePath const *self);

#if INDEX
#define NodePath_C_has_render_mode_B_p NodePath$554$has_render_mode
#endif

// C++ _inCAAAAACN3() ==> NodePath$_$get_render_mode(NodePath const *param0)(NodePath const *)
extern RenderModeAttrib$_Mode NodePath$555$get_render_mode(NodePath const *self);

#if INDEX
#define NodePath_C_get_render_mode_p_p NodePath$555$get_render_mode
#endif

// C++ _inCAAAAUPaP() ==> NodePath$_$get_render_mode_thickness(NodePath const *param0)(NodePath const *)
extern PN_stdfloat NodePath$556$get_render_mode_thickness(NodePath const *self);

#if INDEX
#define NodePath_C_get_render_mode_thickness_f_p NodePath$556$get_render_mode_thickness
#endif

// C++ _inCAAAApnN2() ==> NodePath$_$get_render_mode_perspective(NodePath const *param0)(NodePath const *)
extern bool NodePath$557$get_render_mode_perspective(NodePath const *self);

#if INDEX
#define NodePath_C_get_render_mode_perspective_B_p NodePath$557$get_render_mode_perspective
#endif

// C++ _inCAAAAUKd_(bool two_sided, int priority) ==> NodePath$_$set_two_sided(NodePath *param0, bool param1, int param2)(NodePath *, bool, int)
extern void NodePath$558$set_two_sided(NodePath *self, bool two_sided, int priority);

#if INDEX
#define NodePath_C_set_two_sided_v_pBi NodePath$558$set_two_sided
#endif

// C++ _inCAAAA_M_e(bool two_sided) ==> NodePath$_$set_two_sided(NodePath *param0, bool param1)(NodePath *, bool)
extern void NodePath$559$set_two_sided(NodePath *self, bool two_sided);

#if INDEX
#define NodePath_C_set_two_sided_v_pB NodePath$559$set_two_sided
#endif

// C++ _inCAAAAoJBF() ==> NodePath$_$clear_two_sided(NodePath *param0)(NodePath *)
extern void NodePath$560$clear_two_sided(NodePath *self);

#if INDEX
#define NodePath_C_clear_two_sided_v_p NodePath$560$clear_two_sided
#endif

// C++ _inCAAAAotTb() ==> NodePath$_$has_two_sided(NodePath const *param0)(NodePath const *)
extern bool NodePath$561$has_two_sided(NodePath const *self);

#if INDEX
#define NodePath_C_has_two_sided_B_p NodePath$561$has_two_sided
#endif

// C++ _inCAAAAFtGz() ==> NodePath$_$get_two_sided(NodePath const *param0)(NodePath const *)
extern bool NodePath$562$get_two_sided(NodePath const *self);

#if INDEX
#define NodePath_C_get_two_sided_B_p NodePath$562$get_two_sided
#endif

// C++ _inCAAAAY7DP(bool depth_test, int priority) ==> NodePath$_$set_depth_test(NodePath *param0, bool param1, int param2)(NodePath *, bool, int)
extern void NodePath$563$set_depth_test(NodePath *self, bool depth_test, int priority);

#if INDEX
#define NodePath_C_set_depth_test_v_pBi NodePath$563$set_depth_test
#endif

// C++ _inCAAAA2UQ_(bool depth_test) ==> NodePath$_$set_depth_test(NodePath *param0, bool param1)(NodePath *, bool)
extern void NodePath$564$set_depth_test(NodePath *self, bool depth_test);

#if INDEX
#define NodePath_C_set_depth_test_v_pB NodePath$564$set_depth_test
#endif

// C++ _inCAAAAMMNz() ==> NodePath$_$clear_depth_test(NodePath *param0)(NodePath *)
extern void NodePath$565$clear_depth_test(NodePath *self);

#if INDEX
#define NodePath_C_clear_depth_test_v_p NodePath$565$clear_depth_test
#endif

// C++ _inCAAAAgl7H() ==> NodePath$_$has_depth_test(NodePath const *param0)(NodePath const *)
extern bool NodePath$566$has_depth_test(NodePath const *self);

#if INDEX
#define NodePath_C_has_depth_test_B_p NodePath$566$has_depth_test
#endif

// C++ _inCAAAANiuf() ==> NodePath$_$get_depth_test(NodePath const *param0)(NodePath const *)
extern bool NodePath$567$get_depth_test(NodePath const *self);

#if INDEX
#define NodePath_C_get_depth_test_B_p NodePath$567$get_depth_test
#endif

// C++ _inCAAAArwkt(bool depth_write, int priority) ==> NodePath$_$set_depth_write(NodePath *param0, bool param1, int param2)(NodePath *, bool, int)
extern void NodePath$568$set_depth_write(NodePath *self, bool depth_write, int priority);

#if INDEX
#define NodePath_C_set_depth_write_v_pBi NodePath$568$set_depth_write
#endif

// C++ _inCAAAAADOz(bool depth_write) ==> NodePath$_$set_depth_write(NodePath *param0, bool param1)(NodePath *, bool)
extern void NodePath$569$set_depth_write(NodePath *self, bool depth_write);

#if INDEX
#define NodePath_C_set_depth_write_v_pB NodePath$569$set_depth_write
#endif

// C++ _inCAAAAwNqE() ==> NodePath$_$clear_depth_write(NodePath *param0)(NodePath *)
extern void NodePath$570$clear_depth_write(NodePath *self);

#if INDEX
#define NodePath_C_clear_depth_write_v_p NodePath$570$clear_depth_write
#endif

// C++ _inCAAAAQs8G() ==> NodePath$_$has_depth_write(NodePath const *param0)(NodePath const *)
extern bool NodePath$571$has_depth_write(NodePath const *self);

#if INDEX
#define NodePath_C_has_depth_write_B_p NodePath$571$has_depth_write
#endif

// C++ _inCAAAATsve() ==> NodePath$_$get_depth_write(NodePath const *param0)(NodePath const *)
extern bool NodePath$572$get_depth_write(NodePath const *self);

#if INDEX
#define NodePath_C_get_depth_write_B_p NodePath$572$get_depth_write
#endif

// C++ _inCAAAAKKf_(int bias, int priority) ==> NodePath$_$set_depth_offset(NodePath *param0, int param1, int param2)(NodePath *, int, int)
extern void NodePath$573$set_depth_offset(NodePath *self, int bias, int priority);

#if INDEX
#define NodePath_C_set_depth_offset_v_pii NodePath$573$set_depth_offset
#endif

// C++ _inCAAAAgnKF(int bias) ==> NodePath$_$set_depth_offset(NodePath *param0, int param1)(NodePath *, int)
extern void NodePath$574$set_depth_offset(NodePath *self, int bias);

#if INDEX
#define NodePath_C_set_depth_offset_v_pi NodePath$574$set_depth_offset
#endif

// C++ _inCAAAAijjA() ==> NodePath$_$clear_depth_offset(NodePath *param0)(NodePath *)
extern void NodePath$575$clear_depth_offset(NodePath *self);

#if INDEX
#define NodePath_C_clear_depth_offset_v_p NodePath$575$clear_depth_offset
#endif

// C++ _inCAAAADnrS() ==> NodePath$_$has_depth_offset(NodePath const *param0)(NodePath const *)
extern bool NodePath$576$has_depth_offset(NodePath const *self);

#if INDEX
#define NodePath_C_has_depth_offset_B_p NodePath$576$has_depth_offset
#endif

// C++ _inCAAAAeneq() ==> NodePath$_$get_depth_offset(NodePath const *param0)(NodePath const *)
extern int NodePath$577$get_depth_offset(NodePath const *self);

#if INDEX
#define NodePath_C_get_depth_offset_i_p NodePath$577$get_depth_offset
#endif

// C++ _inCAAAAgUnu(NodePath const &camera, PN_stdfloat offset) ==> NodePath$_$do_billboard_axis(NodePath *param0, NodePath const *param1, PN_stdfloat param2)(NodePath *, NodePath const *, PN_stdfloat)
extern void NodePath$578$do_billboard_axis(NodePath *self, NodePath const *camera, PN_stdfloat offset);

#if INDEX
#define NodePath_C_do_billboard_axis_v_ppf NodePath$578$do_billboard_axis
#endif

// C++ _inCAAAACzu3(NodePath const &camera, PN_stdfloat offset) ==> NodePath$_$do_billboard_point_eye(NodePath *param0, NodePath const *param1, PN_stdfloat param2)(NodePath *, NodePath const *, PN_stdfloat)
extern void NodePath$579$do_billboard_point_eye(NodePath *self, NodePath const *camera, PN_stdfloat offset);

#if INDEX
#define NodePath_C_do_billboard_point_eye_v_ppf NodePath$579$do_billboard_point_eye
#endif

// C++ _inCAAAAJABf(NodePath const &camera, PN_stdfloat offset) ==> NodePath$_$do_billboard_point_world(NodePath *param0, NodePath const *param1, PN_stdfloat param2)(NodePath *, NodePath const *, PN_stdfloat)
extern void NodePath$580$do_billboard_point_world(NodePath *self, NodePath const *camera, PN_stdfloat offset);

#if INDEX
#define NodePath_C_do_billboard_point_world_v_ppf NodePath$580$do_billboard_point_world
#endif

// C++ _inCAAAAAIR6(NodePath const &camera, PN_stdfloat offset) ==> NodePath$_$set_billboard_axis(NodePath *param0, NodePath const *param1, PN_stdfloat param2)(NodePath *, NodePath const *, PN_stdfloat)
extern void NodePath$581$set_billboard_axis(NodePath *self, NodePath const *camera, PN_stdfloat offset);

#if INDEX
#define NodePath_C_set_billboard_axis_v_ppf NodePath$581$set_billboard_axis
#endif

// C++ _inCAAAA_Crd(PN_stdfloat offset) ==> NodePath$_$set_billboard_axis(NodePath *param0, PN_stdfloat param1)(NodePath *, PN_stdfloat)
extern void NodePath$582$set_billboard_axis(NodePath *self, PN_stdfloat offset);

#if INDEX
#define NodePath_C_set_billboard_axis_v_pf NodePath$582$set_billboard_axis
#endif

// C++ _inCAAAAxiDy() ==> NodePath$_$set_billboard_axis(NodePath *param0)(NodePath *)
extern void NodePath$583$set_billboard_axis(NodePath *self);

#if INDEX
#define NodePath_C_set_billboard_axis_v_p NodePath$583$set_billboard_axis
#endif

// C++ _inCAAAAB2DY(NodePath const &camera, PN_stdfloat offset, bool fixed_depth) ==> NodePath$_$set_billboard_point_eye(NodePath *param0, NodePath const *param1, PN_stdfloat param2, bool param3)(NodePath *, NodePath const *, PN_stdfloat, bool)
extern void NodePath$584$set_billboard_point_eye(NodePath *self, NodePath const *camera, PN_stdfloat offset, bool fixed_depth);

#if INDEX
#define NodePath_C_set_billboard_point_eye_v_ppfB NodePath$584$set_billboard_point_eye
#endif

// C++ _inCAAAAg38f(NodePath const &camera, PN_stdfloat offset) ==> NodePath$_$set_billboard_point_eye(NodePath *param0, NodePath const *param1, PN_stdfloat param2)(NodePath *, NodePath const *, PN_stdfloat)
extern void NodePath$585$set_billboard_point_eye(NodePath *self, NodePath const *camera, PN_stdfloat offset);

#if INDEX
#define NodePath_C_set_billboard_point_eye_v_ppf NodePath$585$set_billboard_point_eye
#endif

// C++ _inCAAAAg9xE(PN_stdfloat offset, bool fixed_depth) ==> NodePath$_$set_billboard_point_eye(NodePath *param0, PN_stdfloat param1, bool param2)(NodePath *, PN_stdfloat, bool)
extern void NodePath$586$set_billboard_point_eye(NodePath *self, PN_stdfloat offset, bool fixed_depth);

#if INDEX
#define NodePath_C_set_billboard_point_eye_v_pfB NodePath$586$set_billboard_point_eye
#endif

// C++ _inCAAAA6_vm(PN_stdfloat offset) ==> NodePath$_$set_billboard_point_eye(NodePath *param0, PN_stdfloat param1)(NodePath *, PN_stdfloat)
extern void NodePath$587$set_billboard_point_eye(NodePath *self, PN_stdfloat offset);

#if INDEX
#define NodePath_C_set_billboard_point_eye_v_pf NodePath$587$set_billboard_point_eye
#endif

// C++ _inCAAAAXCeP() ==> NodePath$_$set_billboard_point_eye(NodePath *param0)(NodePath *)
extern void NodePath$588$set_billboard_point_eye(NodePath *self);

#if INDEX
#define NodePath_C_set_billboard_point_eye_v_p NodePath$588$set_billboard_point_eye
#endif

// C++ _inCAAAAGXTK(NodePath const &camera, PN_stdfloat offset) ==> NodePath$_$set_billboard_point_world(NodePath *param0, NodePath const *param1, PN_stdfloat param2)(NodePath *, NodePath const *, PN_stdfloat)
extern void NodePath$589$set_billboard_point_world(NodePath *self, NodePath const *camera, PN_stdfloat offset);

#if INDEX
#define NodePath_C_set_billboard_point_world_v_ppf NodePath$589$set_billboard_point_world
#endif

// C++ _inCAAAAh3kk(PN_stdfloat offset) ==> NodePath$_$set_billboard_point_world(NodePath *param0, PN_stdfloat param1)(NodePath *, PN_stdfloat)
extern void NodePath$590$set_billboard_point_world(NodePath *self, PN_stdfloat offset);

#if INDEX
#define NodePath_C_set_billboard_point_world_v_pf NodePath$590$set_billboard_point_world
#endif

// C++ _inCAAAAKJae() ==> NodePath$_$set_billboard_point_world(NodePath *param0)(NodePath *)
extern void NodePath$591$set_billboard_point_world(NodePath *self);

#if INDEX
#define NodePath_C_set_billboard_point_world_v_p NodePath$591$set_billboard_point_world
#endif

// C++ _inCAAAAaATv() ==> NodePath$_$clear_billboard(NodePath *param0)(NodePath *)
extern void NodePath$592$clear_billboard(NodePath *self);

#if INDEX
#define NodePath_C_clear_billboard_v_p NodePath$592$clear_billboard
#endif

// C++ _inCAAAA3oWg() ==> NodePath$_$has_billboard(NodePath const *param0)(NodePath const *)
extern bool NodePath$593$has_billboard(NodePath const *self);

#if INDEX
#define NodePath_C_has_billboard_B_p NodePath$593$has_billboard
#endif

// C++ _inCAAAALfMs(NodePath const &reference) ==> NodePath$_$set_compass(NodePath *param0, NodePath const *param1)(NodePath *, NodePath const *)
extern void NodePath$594$set_compass(NodePath *self, NodePath const *reference);

#if INDEX
#define NodePath_C_set_compass_v_pp NodePath$594$set_compass
#endif

// C++ _inCAAAApaNt() ==> NodePath$_$set_compass(NodePath *param0)(NodePath *)
extern void NodePath$595$set_compass(NodePath *self);

#if INDEX
#define NodePath_C_set_compass_v_p NodePath$595$set_compass
#endif

// C++ _inCAAAAT898() ==> NodePath$_$clear_compass(NodePath *param0)(NodePath *)
extern void NodePath$596$clear_compass(NodePath *self);

#if INDEX
#define NodePath_C_clear_compass_v_p NodePath$596$clear_compass
#endif

// C++ _inCAAAAqX5i() ==> NodePath$_$has_compass(NodePath const *param0)(NodePath const *)
extern bool NodePath$597$has_compass(NodePath const *self);

#if INDEX
#define NodePath_C_has_compass_B_p NodePath$597$has_compass
#endif

// C++ _inCAAAAqfz0(TransparencyAttrib::Mode mode, int priority) ==> NodePath$_$set_transparency(NodePath *param0, TransparencyAttrib::Mode param1, int param2)(NodePath *, TransparencyAttrib::Mode, int)
extern void NodePath$598$set_transparency(NodePath *self, TransparencyAttrib$_Mode mode, int priority);

#if INDEX
#define NodePath_C_set_transparency_v_ppi NodePath$598$set_transparency
#endif

// C++ _inCAAAAdYx9(TransparencyAttrib::Mode mode) ==> NodePath$_$set_transparency(NodePath *param0, TransparencyAttrib::Mode param1)(NodePath *, TransparencyAttrib::Mode)
extern void NodePath$599$set_transparency(NodePath *self, TransparencyAttrib$_Mode mode);

#if INDEX
#define NodePath_C_set_transparency_v_pp NodePath$599$set_transparency
#endif

// C++ _inCAAAAcU7Z() ==> NodePath$_$clear_transparency(NodePath *param0)(NodePath *)
extern void NodePath$600$clear_transparency(NodePath *self);

#if INDEX
#define NodePath_C_clear_transparency_v_p NodePath$600$clear_transparency
#endif

// C++ _inCAAAAfD3E() ==> NodePath$_$has_transparency(NodePath const *param0)(NodePath const *)
extern bool NodePath$601$has_transparency(NodePath const *self);

#if INDEX
#define NodePath_C_has_transparency_B_p NodePath$601$has_transparency
#endif

// C++ _inCAAAA4Coc() ==> NodePath$_$get_transparency(NodePath const *param0)(NodePath const *)
extern TransparencyAttrib$_Mode NodePath$602$get_transparency(NodePath const *self);

#if INDEX
#define NodePath_C_get_transparency_p_p NodePath$602$get_transparency
#endif

// C++ _inCAAAAR8KL(LogicOpAttrib::Operation op, int priority) ==> NodePath$_$set_logic_op(NodePath *param0, LogicOpAttrib::Operation param1, int param2)(NodePath *, LogicOpAttrib::Operation, int)
extern void NodePath$603$set_logic_op(NodePath *self, LogicOpAttrib$_Operation op, int priority);

#if INDEX
#define NodePath_C_set_logic_op_v_ppi NodePath$603$set_logic_op
#endif

// C++ _inCAAAAjN9a(LogicOpAttrib::Operation op) ==> NodePath$_$set_logic_op(NodePath *param0, LogicOpAttrib::Operation param1)(NodePath *, LogicOpAttrib::Operation)
extern void NodePath$604$set_logic_op(NodePath *self, LogicOpAttrib$_Operation op);

#if INDEX
#define NodePath_C_set_logic_op_v_pp NodePath$604$set_logic_op
#endif

// C++ _inCAAAAi6dD() ==> NodePath$_$clear_logic_op(NodePath *param0)(NodePath *)
extern void NodePath$605$clear_logic_op(NodePath *self);

#if INDEX
#define NodePath_C_clear_logic_op_v_p NodePath$605$clear_logic_op
#endif

// C++ _inCAAAA3jPA() ==> NodePath$_$has_logic_op(NodePath const *param0)(NodePath const *)
extern bool NodePath$606$has_logic_op(NodePath const *self);

#if INDEX
#define NodePath_C_has_logic_op_B_p NodePath$606$has_logic_op
#endif

// C++ _inCAAAASjCY() ==> NodePath$_$get_logic_op(NodePath const *param0)(NodePath const *)
extern LogicOpAttrib$_Operation NodePath$607$get_logic_op(NodePath const *self);

#if INDEX
#define NodePath_C_get_logic_op_p_p NodePath$607$get_logic_op
#endif

// C++ _inCAAAAC4tu(unsigned short int mode, int priority) ==> NodePath$_$set_antialias(NodePath *param0, unsigned short int param1, int param2)(NodePath *, unsigned short int, int)
extern void NodePath$608$set_antialias(NodePath *self, unsigned short int mode, int priority);

#if INDEX
#define NodePath_C_set_antialias_v_pHi NodePath$608$set_antialias
#endif

// C++ _inCAAAALHl2(unsigned short int mode) ==> NodePath$_$set_antialias(NodePath *param0, unsigned short int param1)(NodePath *, unsigned short int)
extern void NodePath$609$set_antialias(NodePath *self, unsigned short int mode);

#if INDEX
#define NodePath_C_set_antialias_v_pH NodePath$609$set_antialias
#endif

// C++ _inCAAAAVKqH() ==> NodePath$_$clear_antialias(NodePath *param0)(NodePath *)
extern void NodePath$610$clear_antialias(NodePath *self);

#if INDEX
#define NodePath_C_clear_antialias_v_p NodePath$610$clear_antialias
#endif

// C++ _inCAAAASWgH() ==> NodePath$_$has_antialias(NodePath const *param0)(NodePath const *)
extern bool NodePath$611$has_antialias(NodePath const *self);

#if INDEX
#define NodePath_C_has_antialias_B_p NodePath$611$has_antialias
#endif

// C++ _inCAAAA9RTf() ==> NodePath$_$get_antialias(NodePath const *param0)(NodePath const *)
extern unsigned short int NodePath$612$get_antialias(NodePath const *self);

#if INDEX
#define NodePath_C_get_antialias_H_p NodePath$612$get_antialias
#endif

// C++ _inCAAAAg2wE() ==> NodePath$_$has_audio_volume(NodePath const *param0)(NodePath const *)
extern bool NodePath$613$has_audio_volume(NodePath const *self);

#if INDEX
#define NodePath_C_has_audio_volume_B_p NodePath$613$has_audio_volume
#endif

// C++ _inCAAAAkl6M() ==> NodePath$_$clear_audio_volume(NodePath *param0)(NodePath *)
extern void NodePath$614$clear_audio_volume(NodePath *self);

#if INDEX
#define NodePath_C_clear_audio_volume_v_p NodePath$614$clear_audio_volume
#endif

// C++ _inCAAAATFV0(PN_stdfloat volume, int priority) ==> NodePath$_$set_audio_volume(NodePath *param0, PN_stdfloat param1, int param2)(NodePath *, PN_stdfloat, int)
extern void NodePath$615$set_audio_volume(NodePath *self, PN_stdfloat volume, int priority);

#if INDEX
#define NodePath_C_set_audio_volume_v_pfi NodePath$615$set_audio_volume
#endif

// C++ _inCAAAA8CYy(PN_stdfloat volume) ==> NodePath$_$set_audio_volume(NodePath *param0, PN_stdfloat param1)(NodePath *, PN_stdfloat)
extern void NodePath$616$set_audio_volume(NodePath *self, PN_stdfloat volume);

#if INDEX
#define NodePath_C_set_audio_volume_v_pf NodePath$616$set_audio_volume
#endif

// C++ _inCAAAA1cXV(int priority) ==> NodePath$_$set_audio_volume_off(NodePath *param0, int param1)(NodePath *, int)
extern void NodePath$617$set_audio_volume_off(NodePath *self, int priority);

#if INDEX
#define NodePath_C_set_audio_volume_off_v_pi NodePath$617$set_audio_volume_off
#endif

// C++ _inCAAAAvp9t() ==> NodePath$_$set_audio_volume_off(NodePath *param0)(NodePath *)
extern void NodePath$618$set_audio_volume_off(NodePath *self);

#if INDEX
#define NodePath_C_set_audio_volume_off_v_p NodePath$618$set_audio_volume_off
#endif

// C++ _inCAAAA92jc() ==> NodePath$_$get_audio_volume(NodePath const *param0)(NodePath const *)
extern PN_stdfloat NodePath$619$get_audio_volume(NodePath const *self);

#if INDEX
#define NodePath_C_get_audio_volume_f_p NodePath$619$get_audio_volume
#endif

// C++ _inCAAAACLIx() ==> NodePath$_$get_net_audio_volume(NodePath const *param0)(NodePath const *)
extern PN_stdfloat NodePath$620$get_net_audio_volume(NodePath const *self);

#if INDEX
#define NodePath_C_get_net_audio_volume_f_p NodePath$620$get_net_audio_volume
#endif

// C++ _inCAAAAblUl(int adjustment) ==> NodePath$_$adjust_all_priorities(NodePath *param0, int param1)(NodePath *, int)
extern void NodePath$621$adjust_all_priorities(NodePath *self, int adjustment);

#if INDEX
#define NodePath_C_adjust_all_priorities_v_pi NodePath$621$adjust_all_priorities
#endif

// C++ _inCAAAADwv_() ==> NodePath$_$show(NodePath *param0)(NodePath *)
extern void NodePath$622$show(NodePath *self);

#if INDEX
#define NodePath_C_show_v_p NodePath$622$show
#endif

// C++ _inCAAAAlrmX(DrawMask camera_mask) ==> NodePath$_$show(NodePath *param0, DrawMask *param1)(NodePath *, DrawMask *)
extern void NodePath$623$show(NodePath *self, DrawMask *camera_mask);

#if INDEX
#define NodePath_C_show_v_pp NodePath$623$show
#endif

// C++ _inCAAAA9Pk3() ==> NodePath$_$show_through(NodePath *param0)(NodePath *)
extern void NodePath$624$show_through(NodePath *self);

#if INDEX
#define NodePath_C_show_through_v_p NodePath$624$show_through
#endif

// C++ _inCAAAAKRaa(DrawMask camera_mask) ==> NodePath$_$show_through(NodePath *param0, DrawMask *param1)(NodePath *, DrawMask *)
extern void NodePath$625$show_through(NodePath *self, DrawMask *camera_mask);

#if INDEX
#define NodePath_C_show_through_v_pp NodePath$625$show_through
#endif

// C++ _inCAAAArDIm() ==> NodePath$_$hide(NodePath *param0)(NodePath *)
extern void NodePath$626$hide(NodePath *self);

#if INDEX
#define NodePath_C_hide_v_p NodePath$626$hide
#endif

// C++ _inCAAAAE___(DrawMask camera_mask) ==> NodePath$_$hide(NodePath *param0, DrawMask *param1)(NodePath *, DrawMask *)
extern void NodePath$627$hide(NodePath *self, DrawMask *camera_mask);

#if INDEX
#define NodePath_C_hide_v_pp NodePath$627$hide
#endif

// C++ _inCAAAAriih(DrawMask camera_mask) ==> NodePath$_$is_hidden(NodePath const *param0, DrawMask *param1)(NodePath const *, DrawMask *)
extern bool NodePath$628$is_hidden(NodePath const *self, DrawMask *camera_mask);

#if INDEX
#define NodePath_C_is_hidden_B_pp NodePath$628$is_hidden
#endif

// C++ _inCAAAAYTUU() ==> NodePath$_$is_hidden(NodePath const *param0)(NodePath const *)
extern bool NodePath$629$is_hidden(NodePath const *self);

#if INDEX
#define NodePath_C_is_hidden_B_p NodePath$629$is_hidden
#endif

// C++ _inCAAAA1YF_(DrawMask camera_mask, Thread *current_thread) ==> NodePath$_$get_hidden_ancestor(NodePath const *param0, DrawMask *param1, Thread *param2)(NodePath const *, DrawMask *, Thread *)
extern NodePath * NodePath$630$get_hidden_ancestor(NodePath const *self, DrawMask *camera_mask, Thread *current_thread);

#if INDEX
#define NodePath_C_get_hidden_ancestor_p_ppp NodePath$630$get_hidden_ancestor
#endif

// C++ _inCAAAAeZqP(DrawMask camera_mask) ==> NodePath$_$get_hidden_ancestor(NodePath const *param0, DrawMask *param1)(NodePath const *, DrawMask *)
extern NodePath * NodePath$631$get_hidden_ancestor(NodePath const *self, DrawMask *camera_mask);

#if INDEX
#define NodePath_C_get_hidden_ancestor_p_pp NodePath$631$get_hidden_ancestor
#endif

// C++ _inCAAAAICma() ==> NodePath$_$get_hidden_ancestor(NodePath const *param0)(NodePath const *)
extern NodePath * NodePath$632$get_hidden_ancestor(NodePath const *self);

#if INDEX
#define NodePath_C_get_hidden_ancestor_p_p NodePath$632$get_hidden_ancestor
#endif

// C++ _inCAAAAtlrQ(int sort, Thread *current_thread) ==> NodePath$_$stash(NodePath *param0, int param1, Thread *param2)(NodePath *, int, Thread *)
extern void NodePath$633$stash(NodePath *self, int sort, Thread *current_thread);

#if INDEX
#define NodePath_C_stash_v_pip NodePath$633$stash
#endif

// C++ _inCAAAA2Ms1(int sort) ==> NodePath$_$stash(NodePath *param0, int param1)(NodePath *, int)
extern void NodePath$634$stash(NodePath *self, int sort);

#if INDEX
#define NodePath_C_stash_v_pi NodePath$634$stash
#endif

// C++ _inCAAAAinzQ() ==> NodePath$_$stash(NodePath *param0)(NodePath *)
extern void NodePath$635$stash(NodePath *self);

#if INDEX
#define NodePath_C_stash_v_p NodePath$635$stash
#endif

// C++ _inCAAAA01HZ(int sort, Thread *current_thread) ==> NodePath$_$unstash(NodePath *param0, int param1, Thread *param2)(NodePath *, int, Thread *)
extern void NodePath$636$unstash(NodePath *self, int sort, Thread *current_thread);

#if INDEX
#define NodePath_C_unstash_v_pip NodePath$636$unstash
#endif

// C++ _inCAAAAbNQv(int sort) ==> NodePath$_$unstash(NodePath *param0, int param1)(NodePath *, int)
extern void NodePath$637$unstash(NodePath *self, int sort);

#if INDEX
#define NodePath_C_unstash_v_pi NodePath$637$unstash
#endif

// C++ _inCAAAAMkf6() ==> NodePath$_$unstash(NodePath *param0)(NodePath *)
extern void NodePath$638$unstash(NodePath *self);

#if INDEX
#define NodePath_C_unstash_v_p NodePath$638$unstash
#endif

// C++ _inCAAAA6_Bh(Thread *current_thread) ==> NodePath$_$unstash_all(NodePath *param0, Thread *param1)(NodePath *, Thread *)
extern void NodePath$639$unstash_all(NodePath *self, Thread *current_thread);

#if INDEX
#define NodePath_C_unstash_all_v_pp NodePath$639$unstash_all
#endif

// C++ _inCAAAAw2AF() ==> NodePath$_$unstash_all(NodePath *param0)(NodePath *)
extern void NodePath$640$unstash_all(NodePath *self);

#if INDEX
#define NodePath_C_unstash_all_v_p NodePath$640$unstash_all
#endif

// C++ _inCAAAA_PEj() ==> NodePath$_$is_stashed(NodePath const *param0)(NodePath const *)
extern bool NodePath$641$is_stashed(NodePath const *self);

#if INDEX
#define NodePath_C_is_stashed_B_p NodePath$641$is_stashed
#endif

// C++ _inCAAAA7VVR(Thread *current_thread) ==> NodePath$_$get_stashed_ancestor(NodePath const *param0, Thread *param1)(NodePath const *, Thread *)
extern NodePath * NodePath$642$get_stashed_ancestor(NodePath const *self, Thread *current_thread);

#if INDEX
#define NodePath_C_get_stashed_ancestor_p_pp NodePath$642$get_stashed_ancestor
#endif

// C++ _inCAAAAZTAQ() ==> NodePath$_$get_stashed_ancestor(NodePath const *param0)(NodePath const *)
extern NodePath * NodePath$643$get_stashed_ancestor(NodePath const *self);

#if INDEX
#define NodePath_C_get_stashed_ancestor_p_p NodePath$643$get_stashed_ancestor
#endif

// C++ _inCAAAABdNw() ==> NodePath$_$get_collide_mask(NodePath const *param0)(NodePath const *)
extern CollideMask * NodePath$644$get_collide_mask(NodePath const *self);

#if INDEX
#define NodePath_C_get_collide_mask_p_p NodePath$644$get_collide_mask
#endif

// C++ _inCAAAAqTbI(CollideMask new_mask, CollideMask bits_to_change, TypeHandle node_type) ==> NodePath$_$set_collide_mask(NodePath *param0, CollideMask *param1, CollideMask *param2, int param3)(NodePath *, CollideMask *, CollideMask *, int)
extern void NodePath$645$set_collide_mask(NodePath *self, CollideMask *new_mask, CollideMask *bits_to_change, int node_type);

#if INDEX
#define NodePath_C_set_collide_mask_v_pppi NodePath$645$set_collide_mask
#endif

// C++ _inCAAAAeVQw(CollideMask new_mask, CollideMask bits_to_change) ==> NodePath$_$set_collide_mask(NodePath *param0, CollideMask *param1, CollideMask *param2)(NodePath *, CollideMask *, CollideMask *)
extern void NodePath$646$set_collide_mask(NodePath *self, CollideMask *new_mask, CollideMask *bits_to_change);

#if INDEX
#define NodePath_C_set_collide_mask_v_ppp NodePath$646$set_collide_mask
#endif

// C++ _inCAAAADt_y(CollideMask new_mask) ==> NodePath$_$set_collide_mask(NodePath *param0, CollideMask *param1)(NodePath *, CollideMask *)
extern void NodePath$647$set_collide_mask(NodePath *self, CollideMask *new_mask);

#if INDEX
#define NodePath_C_set_collide_mask_v_pp NodePath$647$set_collide_mask
#endif

// C++ _inCAAAAHPj2(NodePath const &other) ==> NodePath$_$compare_to(NodePath const *param0, NodePath const *param1)(NodePath const *, NodePath const *)
extern int NodePath$648$compare_to(NodePath const *self, NodePath const *other);

#if INDEX
#define NodePath_C_compare_to_i_pp NodePath$648$compare_to
#endif

// C++ _inCAAAAcyNU(WeakNodePath const &other) ==> NodePath$_$compare_to(NodePath const *param0, WeakNodePath const *param1)(NodePath const *, WeakNodePath const *)
extern int NodePath$649$compare_to(NodePath const *self, WeakNodePath const *other);
// COLLISION : NodePath_C_compare_to_i_pp NodePath$649$compare_to

// C++ _inCAAAAAcUK(Thread *current_thread) ==> NodePath$_$verify_complete(NodePath const *param0, Thread *param1)(NodePath const *, Thread *)
extern bool NodePath$650$verify_complete(NodePath const *self, Thread *current_thread);

#if INDEX
#define NodePath_C_verify_complete_B_pp NodePath$650$verify_complete
#endif

// C++ _inCAAAATqrp() ==> NodePath$_$verify_complete(NodePath const *param0)(NodePath const *)
extern bool NodePath$651$verify_complete(NodePath const *self);

#if INDEX
#define NodePath_C_verify_complete_B_p NodePath$651$verify_complete
#endif

// C++ _inCAAAAgz7H(GraphicsStateGuardianBase *gsg) ==> NodePath$_$premunge_scene(NodePath *param0, GraphicsStateGuardianBase *param1)(NodePath *, GraphicsStateGuardianBase *)
extern void NodePath$652$premunge_scene(NodePath *self, GraphicsStateGuardianBase *gsg);

#if INDEX
#define NodePath_C_premunge_scene_v_pp NodePath$652$premunge_scene
#endif

// C++ _inCAAAAXuCN() ==> NodePath$_$premunge_scene(NodePath *param0)(NodePath *)
extern void NodePath$653$premunge_scene(NodePath *self);

#if INDEX
#define NodePath_C_premunge_scene_v_p NodePath$653$premunge_scene
#endif

// C++ _inCAAAA0HH0(GraphicsStateGuardianBase *gsg) ==> NodePath$_$prepare_scene(NodePath *param0, GraphicsStateGuardianBase *param1)(NodePath *, GraphicsStateGuardianBase *)
extern void NodePath$654$prepare_scene(NodePath *self, GraphicsStateGuardianBase *gsg);

#if INDEX
#define NodePath_C_prepare_scene_v_pp NodePath$654$prepare_scene
#endif

// C++ _inCAAAA1psR() ==> NodePath$_$show_bounds(NodePath *param0)(NodePath *)
extern void NodePath$655$show_bounds(NodePath *self);

#if INDEX
#define NodePath_C_show_bounds_v_p NodePath$655$show_bounds
#endif

// C++ _inCAAAApl7q() ==> NodePath$_$show_tight_bounds(NodePath *param0)(NodePath *)
extern void NodePath$656$show_tight_bounds(NodePath *self);

#if INDEX
#define NodePath_C_show_tight_bounds_v_p NodePath$656$show_tight_bounds
#endif

// C++ _inCAAAA0fG5() ==> NodePath$_$hide_bounds(NodePath *param0)(NodePath *)
extern void NodePath$657$hide_bounds(NodePath *self);

#if INDEX
#define NodePath_C_hide_bounds_v_p NodePath$657$hide_bounds
#endif

// C++ _inCAAAAfllh(Thread *current_thread) ==> NodePath$_$get_bounds(NodePath const *param0, Thread *param1)(NodePath const *, Thread *)
extern char ** NodePath$658$get_bounds(NodePath const *self, Thread *current_thread);

#if INDEX
#define NodePath_C_get_bounds_p_pp NodePath$658$get_bounds
#endif

// C++ _inCAAAApOSR() ==> NodePath$_$get_bounds(NodePath const *param0)(NodePath const *)
extern char ** NodePath$659$get_bounds(NodePath const *self);

#if INDEX
#define NodePath_C_get_bounds_p_p NodePath$659$get_bounds
#endif

// C++ _inCAAAAtE3U() ==> NodePath$_$force_recompute_bounds(NodePath *param0)(NodePath *)
extern void NodePath$660$force_recompute_bounds(NodePath *self);

#if INDEX
#define NodePath_C_force_recompute_bounds_v_p NodePath$660$force_recompute_bounds
#endif

// C++ _inCAAAAbtvv(std::ostream &out) ==> NodePath$_$write_bounds(NodePath const *param0, std::ostream *param1)(NodePath const *, std::ostream *)
extern void NodePath$661$write_bounds(NodePath const *self, std$_ostream *out);

#if INDEX
#define NodePath_C_write_bounds_v_pp NodePath$661$write_bounds
#endif

// C++ _inCAAAA1zdW(LPoint3 &min_point, LPoint3 &max_point, NodePath const &other, Thread *current_thread) ==> NodePath$_$calc_tight_bounds(NodePath const *param0, LPoint3 *param1, LPoint3 *param2, NodePath const *param3, Thread *param4)(NodePath const *, LPoint3 *, LPoint3 *, NodePath const *, Thread *)
extern bool NodePath$662$calc_tight_bounds(NodePath const *self, LPoint3 *min_point, LPoint3 *max_point, NodePath const *other, Thread *current_thread);

#if INDEX
#define NodePath_C_calc_tight_bounds_B_ppppp NodePath$662$calc_tight_bounds
#endif

// C++ _inCAAAA4gNv(LPoint3 &min_point, LPoint3 &max_point, NodePath const &other) ==> NodePath$_$calc_tight_bounds(NodePath const *param0, LPoint3 *param1, LPoint3 *param2, NodePath const *param3)(NodePath const *, LPoint3 *, LPoint3 *, NodePath const *)
extern bool NodePath$663$calc_tight_bounds(NodePath const *self, LPoint3 *min_point, LPoint3 *max_point, NodePath const *other);

#if INDEX
#define NodePath_C_calc_tight_bounds_B_pppp NodePath$663$calc_tight_bounds
#endif

// C++ _inCAAAAnuPD(LPoint3 &min_point, LPoint3 &max_point) ==> NodePath$_$calc_tight_bounds(NodePath const *param0, LPoint3 *param1, LPoint3 *param2)(NodePath const *, LPoint3 *, LPoint3 *)
extern bool NodePath$664$calc_tight_bounds(NodePath const *self, LPoint3 *min_point, LPoint3 *max_point);

#if INDEX
#define NodePath_C_calc_tight_bounds_B_ppp NodePath$664$calc_tight_bounds
#endif

// C++ _inCAAAAznLC() ==> NodePath$_$flatten_light(NodePath *param0)(NodePath *)
extern int NodePath$665$flatten_light(NodePath *self);

#if INDEX
#define NodePath_C_flatten_light_i_p NodePath$665$flatten_light
#endif

// C++ _inCAAAAqVep() ==> NodePath$_$flatten_medium(NodePath *param0)(NodePath *)
extern int NodePath$666$flatten_medium(NodePath *self);

#if INDEX
#define NodePath_C_flatten_medium_i_p NodePath$666$flatten_medium
#endif

// C++ _inCAAAAgdaT() ==> NodePath$_$flatten_strong(NodePath *param0)(NodePath *)
extern int NodePath$667$flatten_strong(NodePath *self);

#if INDEX
#define NodePath_C_flatten_strong_i_p NodePath$667$flatten_strong
#endif

// C++ _inCAAAA7D5n() ==> NodePath$_$apply_texture_colors(NodePath *param0)(NodePath *)
extern void NodePath$668$apply_texture_colors(NodePath *self);

#if INDEX
#define NodePath_C_apply_texture_colors_v_p NodePath$668$apply_texture_colors
#endif

// C++ _inCAAAAhlC6() ==> NodePath$_$clear_model_nodes(NodePath *param0)(NodePath *)
extern int NodePath$669$clear_model_nodes(NodePath *self);

#if INDEX
#define NodePath_C_clear_model_nodes_i_p NodePath$669$clear_model_nodes
#endif

// C++ _inCAAAAhGOQ(std::string const &key, std::string const &value) ==> NodePath$_$set_tag(NodePath *param0, char const *param1, char const *param2)(NodePath *, char const *, char const *)
extern void NodePath$670$set_tag(NodePath *self, char const *key, char const *value);

#if INDEX
#define NodePath_C_set_tag_v_pss NodePath$670$set_tag
#endif

// C++ _inCAAAAQY2H(std::string const &key) ==> NodePath$_$get_tag(NodePath const *param0, char const *param1)(NodePath const *, char const *)
extern char const * NodePath$671$get_tag(NodePath const *self, char const *key);

#if INDEX
#define NodePath_C_get_tag_s_ps NodePath$671$get_tag
#endif

// C++ _inCAAAAnHIn(vector_string &keys) ==> NodePath$_$get_tag_keys(NodePath const *param0, vector_string *param1)(NodePath const *, vector_string *)
extern void NodePath$672$get_tag_keys(NodePath const *self, vector_string *keys);

#if INDEX
#define NodePath_C_get_tag_keys_v_pp NodePath$672$get_tag_keys
#endif

// C++ _inCAAAASYDw(std::string const &key) ==> NodePath$_$has_tag(NodePath const *param0, char const *param1)(NodePath const *, char const *)
extern bool NodePath$673$has_tag(NodePath const *self, char const *key);

#if INDEX
#define NodePath_C_has_tag_B_ps NodePath$673$has_tag
#endif

// C++ _inCAAAAXAl5(std::string const &key) ==> NodePath$_$clear_tag(NodePath *param0, char const *param1)(NodePath *, char const *)
extern void NodePath$674$clear_tag(NodePath *self, char const *key);

#if INDEX
#define NodePath_C_clear_tag_v_ps NodePath$674$clear_tag
#endif

// C++ _inCAAAA7R1r(std::string const &key) ==> NodePath$_$get_net_tag(NodePath const *param0, char const *param1)(NodePath const *, char const *)
extern char const * NodePath$675$get_net_tag(NodePath const *self, char const *key);

#if INDEX
#define NodePath_C_get_net_tag_s_ps NodePath$675$get_net_tag
#endif

// C++ _inCAAAAUSCU(std::string const &key) ==> NodePath$_$has_net_tag(NodePath const *param0, char const *param1)(NodePath const *, char const *)
extern bool NodePath$676$has_net_tag(NodePath const *self, char const *key);

#if INDEX
#define NodePath_C_has_net_tag_B_ps NodePath$676$has_net_tag
#endif

// C++ _inCAAAAwjYk(std::string const &key) ==> NodePath$_$find_net_tag(NodePath const *param0, char const *param1)(NodePath const *, char const *)
extern NodePath * NodePath$677$find_net_tag(NodePath const *self, char const *key);

#if INDEX
#define NodePath_C_find_net_tag_p_ps NodePath$677$find_net_tag
#endif

// C++ _inCAAAAM5gv() ==> NodePath$_$list_tags(NodePath const *param0)(NodePath const *)
extern void NodePath$678$list_tags(NodePath const *self);

#if INDEX
#define NodePath_C_list_tags_v_p NodePath$678$list_tags
#endif

// C++ _inCAAAABaVw(std::string const &name) ==> NodePath$_$set_name(NodePath *param0, char const *param1)(NodePath *, char const *)
extern void NodePath$679$set_name(NodePath *self, char const *name);

#if INDEX
#define NodePath_C_set_name_v_ps NodePath$679$set_name
#endif

// C++ _inCAAAAbkeW() ==> NodePath$_$get_name(NodePath const *param0)(NodePath const *)
extern char const * NodePath$680$get_name(NodePath const *self);

#if INDEX
#define NodePath_C_get_name_s_p NodePath$680$get_name
#endif

// C++ _inCAAAAlOTE(Filename const &filename) ==> NodePath$_$write_bam_file(NodePath const *param0, Filename const *param1)(NodePath const *, Filename const *)
extern bool NodePath$681$write_bam_file(NodePath const *self, Filename const *filename);

#if INDEX
#define NodePath_C_write_bam_file_B_pp NodePath$681$write_bam_file
#endif

// C++ _inCAAAAM4M3(std::ostream &out) ==> NodePath$_$write_bam_stream(NodePath const *param0, std::ostream *param1)(NodePath const *, std::ostream *)
extern bool NodePath$682$write_bam_stream(NodePath const *self, std$_ostream *out);

#if INDEX
#define NodePath_C_write_bam_stream_B_pp NodePath$682$write_bam_stream
#endif

// C++ _inCAAAAHnyV() ==> NodePath$_$encode_to_bam_stream(NodePath const *param0)(NodePath const *)
extern vector_uchar NodePath$683$encode_to_bam_stream(NodePath const *self);

#if INDEX
#define NodePath_C_encode_to_bam_stream_p_p NodePath$683$encode_to_bam_stream
#endif

// C++ _inCAAAApNJt(vector_uchar &data, BamWriter *writer) ==> NodePath$_$encode_to_bam_stream(NodePath const *param0, vector_uchar *param1, BamWriter *param2)(NodePath const *, vector_uchar *, BamWriter *)
extern bool NodePath$684$encode_to_bam_stream(NodePath const *self, vector_uchar *data, BamWriter *writer);

#if INDEX
#define NodePath_C_encode_to_bam_stream_B_ppp NodePath$684$encode_to_bam_stream
#endif

// C++ _inCAAAAiROo(vector_uchar &data) ==> NodePath$_$encode_to_bam_stream(NodePath const *param0, vector_uchar *param1)(NodePath const *, vector_uchar *)
extern bool NodePath$685$encode_to_bam_stream(NodePath const *self, vector_uchar *data);

#if INDEX
#define NodePath_C_encode_to_bam_stream_B_pp NodePath$685$encode_to_bam_stream
#endif

// C++ _inCAAAAkjek(vector_uchar data, BamReader *reader) ==> NodePath$_$decode_from_bam_stream(vector_uchar param0, BamReader *param1)(vector_uchar, BamReader *)
extern NodePath * NodePath$686$decode_from_bam_stream(vector_uchar data, BamReader *reader);

#if INDEX
#define NodePath_C_decode_from_bam_stream_p_pp NodePath$686$decode_from_bam_stream
#endif

// C++ _inCAAAA7uhk(vector_uchar data) ==> NodePath$_$decode_from_bam_stream(vector_uchar param0)(vector_uchar)
extern NodePath * NodePath$687$decode_from_bam_stream(vector_uchar data);

#if INDEX
#define NodePath_C_decode_from_bam_stream_p_p NodePath$687$decode_from_bam_stream
#endif

// C++ _inCAAAATpul(BamWriter *manager, Datagram &dg) ==> NodePath$_$write_datagram(NodePath const *param0, BamWriter *param1, Datagram *param2)(NodePath const *, BamWriter *, Datagram *)
extern void NodePath$688$write_datagram(NodePath const *self, BamWriter *manager, Datagram *dg);

#if INDEX
#define NodePath_C_write_datagram_v_ppp NodePath$688$write_datagram
#endif

// C++ _inCAAAAy3ym(DatagramIterator &scan, BamReader *manager) ==> NodePath$_$fillin(NodePath *param0, DatagramIterator *param1, BamReader *param2)(NodePath *, DatagramIterator *, BamReader *)
extern void NodePath$689$fillin(NodePath *self, DatagramIterator *scan, BamReader *manager);

#if INDEX
#define NodePath_C_fillin_v_ppp NodePath$689$fillin
#endif

// C++ _inCAAAAt3wh() ==> NodePath$_$get_class_type()()
extern int NodePath$690$get_class_type(void);

#if INDEX
#define NodePath_C_get_class_type_i_v NodePath$690$get_class_type
#endif

// C++ _inCAAAAS3QA() ==> NodePath$_$init_type()()
extern void NodePath$691$init_type(void);

#if INDEX
#define NodePath_C_init_type_v_v NodePath$691$init_type
#endif

// C++ _inCAAAAzUGI() ==> NodePath$_$downcast_to_CActor(NodePath *param0)(NodePath *)
extern CActor * NodePath$692$downcast_to_CActor(NodePath *self);

#if INDEX
#define NodePath_C_downcast_to_CActor_p_p NodePath$692$downcast_to_CActor
#endif


// NodePathCollection

// C++ _inCAAAA3iXv() ==> NodePathCollection$_$NodePathCollection()()
extern NodePathCollection * NodePathCollection$1$NodePathCollection(void);

#if INDEX
#define NodePathCollection_C_ctor_p_v NodePathCollection$1$NodePathCollection
#endif

// C++ _inCAAAA2o9H(NodePathCollection const &) ==> NodePathCollection$_$NodePathCollection(NodePathCollection const *param0)(NodePathCollection const *)
extern NodePathCollection * NodePathCollection$2$NodePathCollection(NodePathCollection const *arg0);

#if INDEX
#define NodePathCollection_C_ctor_p_p NodePathCollection$2$NodePathCollection
#endif

// C++ _inCAAAAoj7i(NodePath const &node_path) ==> NodePathCollection$_$add_path(NodePathCollection *param0, NodePath const *param1)(NodePathCollection *, NodePath const *)
extern void NodePathCollection$3$add_path(NodePathCollection *self, NodePath const *node_path);

#if INDEX
#define NodePathCollection_C_add_path_v_pp NodePathCollection$3$add_path
#endif

// C++ _inCAAAA_4Zw(NodePath const &node_path) ==> NodePathCollection$_$remove_path(NodePathCollection *param0, NodePath const *param1)(NodePathCollection *, NodePath const *)
extern bool NodePathCollection$4$remove_path(NodePathCollection *self, NodePath const *node_path);

#if INDEX
#define NodePathCollection_C_remove_path_B_pp NodePathCollection$4$remove_path
#endif

// C++ _inCAAAAD16c(NodePathCollection const &other) ==> NodePathCollection$_$add_paths_from(NodePathCollection *param0, NodePathCollection const *param1)(NodePathCollection *, NodePathCollection const *)
extern void NodePathCollection$5$add_paths_from(NodePathCollection *self, NodePathCollection const *other);

#if INDEX
#define NodePathCollection_C_add_paths_from_v_pp NodePathCollection$5$add_paths_from
#endif

// C++ _inCAAAAPgsC(NodePathCollection const &other) ==> NodePathCollection$_$remove_paths_from(NodePathCollection *param0, NodePathCollection const *param1)(NodePathCollection *, NodePathCollection const *)
extern void NodePathCollection$6$remove_paths_from(NodePathCollection *self, NodePathCollection const *other);

#if INDEX
#define NodePathCollection_C_remove_paths_from_v_pp NodePathCollection$6$remove_paths_from
#endif

// C++ _inCAAAAfBHO() ==> NodePathCollection$_$remove_duplicate_paths(NodePathCollection *param0)(NodePathCollection *)
extern void NodePathCollection$7$remove_duplicate_paths(NodePathCollection *self);

#if INDEX
#define NodePathCollection_C_remove_duplicate_paths_v_p NodePathCollection$7$remove_duplicate_paths
#endif

// C++ _inCAAAAW5qJ(NodePath const &path) ==> NodePathCollection$_$has_path(NodePathCollection const *param0, NodePath const *param1)(NodePathCollection const *, NodePath const *)
extern bool NodePathCollection$8$has_path(NodePathCollection const *self, NodePath const *path);

#if INDEX
#define NodePathCollection_C_has_path_B_pp NodePathCollection$8$has_path
#endif

// C++ _inCAAAAOyfl() ==> NodePathCollection$_$clear(NodePathCollection *param0)(NodePathCollection *)
extern void NodePathCollection$9$clear(NodePathCollection *self);

#if INDEX
#define NodePathCollection_C_clear_v_p NodePathCollection$9$clear
#endif

// C++ _inCAAAAETyp(std::size_t num) ==> NodePathCollection$_$reserve(NodePathCollection *param0, std::size_t param1)(NodePathCollection *, std::size_t)
extern void NodePathCollection$10$reserve(NodePathCollection *self, std$_size_t num);

#if INDEX
#define NodePathCollection_C_reserve_v_pl NodePathCollection$10$reserve
#endif

// C++ _inCAAAAYTzI() ==> NodePathCollection$_$is_empty(NodePathCollection const *param0)(NodePathCollection const *)
extern bool NodePathCollection$11$is_empty(NodePathCollection const *self);

#if INDEX
#define NodePathCollection_C_is_empty_B_p NodePathCollection$11$is_empty
#endif

// C++ _inCAAAA6KKi() ==> NodePathCollection$_$get_num_paths(NodePathCollection const *param0)(NodePathCollection const *)
extern int NodePathCollection$12$get_num_paths(NodePathCollection const *self);

#if INDEX
#define NodePathCollection_C_get_num_paths_i_p NodePathCollection$12$get_num_paths
#endif

// C++ _inCAAAA02PJ(int index) ==> NodePathCollection$_$get_path(NodePathCollection const *param0, int param1)(NodePathCollection const *, int)
extern NodePath * NodePathCollection$13$get_path(NodePathCollection const *self, int index);

#if INDEX
#define NodePathCollection_C_get_path_p_pi NodePathCollection$13$get_path
#endif

// C++ _inCAAAA6EWD() ==> NodePathCollection$_$size(NodePathCollection const *param0)(NodePathCollection const *)
extern std$_size_t NodePathCollection$14$size(NodePathCollection const *self);

#if INDEX
#define NodePathCollection_C_size_l_p NodePathCollection$14$size
#endif

// C++ _inCAAAA2qmT(NodePath const &node_path) ==> NodePathCollection$_$append(NodePathCollection *param0, NodePath const *param1)(NodePathCollection *, NodePath const *)
extern void NodePathCollection$15$append(NodePathCollection *self, NodePath const *node_path);

#if INDEX
#define NodePathCollection_C_append_v_pp NodePathCollection$15$append
#endif

// C++ _inCAAAAOz1K(NodePathCollection const &other) ==> NodePathCollection$_$extend(NodePathCollection *param0, NodePathCollection const *param1)(NodePathCollection *, NodePathCollection const *)
extern void NodePathCollection$16$extend(NodePathCollection *self, NodePathCollection const *other);

#if INDEX
#define NodePathCollection_C_extend_v_pp NodePathCollection$16$extend
#endif

// C++ _inCAAAA3QA8() ==> NodePathCollection$_$ls(NodePathCollection const *param0)(NodePathCollection const *)
extern void NodePathCollection$17$ls(NodePathCollection const *self);

#if INDEX
#define NodePathCollection_C_ls_v_p NodePathCollection$17$ls
#endif

// C++ _inCAAAANmWd(std::ostream &out, int indent_level) ==> NodePathCollection$_$ls(NodePathCollection const *param0, std::ostream *param1, int param2)(NodePathCollection const *, std::ostream *, int)
extern void NodePathCollection$18$ls(NodePathCollection const *self, std$_ostream *out, int indent_level);

#if INDEX
#define NodePathCollection_C_ls_v_ppi NodePathCollection$18$ls
#endif

// C++ _inCAAAAz69N(std::ostream &out) ==> NodePathCollection$_$ls(NodePathCollection const *param0, std::ostream *param1)(NodePathCollection const *, std::ostream *)
extern void NodePathCollection$19$ls(NodePathCollection const *self, std$_ostream *out);

#if INDEX
#define NodePathCollection_C_ls_v_pp NodePathCollection$19$ls
#endif

// C++ _inCAAAAwBt6(std::string const &path) ==> NodePathCollection$_$find_all_matches(NodePathCollection const *param0, char const *param1)(NodePathCollection const *, char const *)
extern NodePathCollection * NodePathCollection$20$find_all_matches(NodePathCollection const *self, char const *path);

#if INDEX
#define NodePathCollection_C_find_all_matches_p_ps NodePathCollection$20$find_all_matches
#endif

// C++ _inCAAAAb1jO(NodePath const &other) ==> NodePathCollection$_$reparent_to(NodePathCollection *param0, NodePath const *param1)(NodePathCollection *, NodePath const *)
extern void NodePathCollection$21$reparent_to(NodePathCollection *self, NodePath const *other);

#if INDEX
#define NodePathCollection_C_reparent_to_v_pp NodePathCollection$21$reparent_to
#endif

// C++ _inCAAAAqRqE(NodePath const &other) ==> NodePathCollection$_$wrt_reparent_to(NodePathCollection *param0, NodePath const *param1)(NodePathCollection *, NodePath const *)
extern void NodePathCollection$22$wrt_reparent_to(NodePathCollection *self, NodePath const *other);

#if INDEX
#define NodePathCollection_C_wrt_reparent_to_v_pp NodePathCollection$22$wrt_reparent_to
#endif

// C++ _inCAAAA7UQK() ==> NodePathCollection$_$show(NodePathCollection *param0)(NodePathCollection *)
extern void NodePathCollection$23$show(NodePathCollection *self);

#if INDEX
#define NodePathCollection_C_show_v_p NodePathCollection$23$show
#endif

// C++ _inCAAAA583n() ==> NodePathCollection$_$hide(NodePathCollection *param0)(NodePathCollection *)
extern void NodePathCollection$24$hide(NodePathCollection *self);

#if INDEX
#define NodePathCollection_C_hide_v_p NodePathCollection$24$hide
#endif

// C++ _inCAAAAiPiS() ==> NodePathCollection$_$stash(NodePathCollection *param0)(NodePathCollection *)
extern void NodePathCollection$25$stash(NodePathCollection *self);

#if INDEX
#define NodePathCollection_C_stash_v_p NodePathCollection$25$stash
#endif

// C++ _inCAAAALTV5() ==> NodePathCollection$_$unstash(NodePathCollection *param0)(NodePathCollection *)
extern void NodePathCollection$26$unstash(NodePathCollection *self);

#if INDEX
#define NodePathCollection_C_unstash_v_p NodePathCollection$26$unstash
#endif

// C++ _inCAAAAMNIX() ==> NodePathCollection$_$detach(NodePathCollection *param0)(NodePathCollection *)
extern void NodePathCollection$27$detach(NodePathCollection *self);

#if INDEX
#define NodePathCollection_C_detach_v_p NodePathCollection$27$detach
#endif

// C++ _inCAAAANmTQ() ==> NodePathCollection$_$get_collide_mask(NodePathCollection const *param0)(NodePathCollection const *)
extern CollideMask * NodePathCollection$28$get_collide_mask(NodePathCollection const *self);

#if INDEX
#define NodePathCollection_C_get_collide_mask_p_p NodePathCollection$28$get_collide_mask
#endif

// C++ _inCAAAAfRZx(CollideMask new_mask, CollideMask bits_to_change, TypeHandle node_type) ==> NodePathCollection$_$set_collide_mask(NodePathCollection *param0, CollideMask *param1, CollideMask *param2, int param3)(NodePathCollection *, CollideMask *, CollideMask *, int)
extern void NodePathCollection$29$set_collide_mask(NodePathCollection *self, CollideMask *new_mask, CollideMask *bits_to_change, int node_type);

#if INDEX
#define NodePathCollection_C_set_collide_mask_v_pppi NodePathCollection$29$set_collide_mask
#endif

// C++ _inCAAAA9VpQ(CollideMask new_mask, CollideMask bits_to_change) ==> NodePathCollection$_$set_collide_mask(NodePathCollection *param0, CollideMask *param1, CollideMask *param2)(NodePathCollection *, CollideMask *, CollideMask *)
extern void NodePathCollection$30$set_collide_mask(NodePathCollection *self, CollideMask *new_mask, CollideMask *bits_to_change);

#if INDEX
#define NodePathCollection_C_set_collide_mask_v_ppp NodePathCollection$30$set_collide_mask
#endif

// C++ _inCAAAAbhhb(CollideMask new_mask) ==> NodePathCollection$_$set_collide_mask(NodePathCollection *param0, CollideMask *param1)(NodePathCollection *, CollideMask *)
extern void NodePathCollection$31$set_collide_mask(NodePathCollection *self, CollideMask *new_mask);

#if INDEX
#define NodePathCollection_C_set_collide_mask_v_pp NodePathCollection$31$set_collide_mask
#endif

// C++ _inCAAAARpnc(LPoint3 &min_point, LPoint3 &max_point) ==> NodePathCollection$_$calc_tight_bounds(NodePathCollection const *param0, LPoint3 *param1, LPoint3 *param2)(NodePathCollection const *, LPoint3 *, LPoint3 *)
extern bool NodePathCollection$32$calc_tight_bounds(NodePathCollection const *self, LPoint3 *min_point, LPoint3 *max_point);

#if INDEX
#define NodePathCollection_C_calc_tight_bounds_B_ppp NodePathCollection$32$calc_tight_bounds
#endif

// C++ _inCAAAAuhXW(Texture *tex, int priority) ==> NodePathCollection$_$set_texture(NodePathCollection *param0, Texture *param1, int param2)(NodePathCollection *, Texture *, int)
extern void NodePathCollection$33$set_texture(NodePathCollection *self, Texture *tex, int priority);

#if INDEX
#define NodePathCollection_C_set_texture_v_ppi NodePathCollection$33$set_texture
#endif

// C++ _inCAAAAcvmo(Texture *tex) ==> NodePathCollection$_$set_texture(NodePathCollection *param0, Texture *param1)(NodePathCollection *, Texture *)
extern void NodePathCollection$34$set_texture(NodePathCollection *self, Texture *tex);

#if INDEX
#define NodePathCollection_C_set_texture_v_pp NodePathCollection$34$set_texture
#endif

// C++ _inCAAAAw4DL(TextureStage *stage, Texture *tex, int priority) ==> NodePathCollection$_$set_texture(NodePathCollection *param0, TextureStage *param1, Texture *param2, int param3)(NodePathCollection *, TextureStage *, Texture *, int)
extern void NodePathCollection$35$set_texture(NodePathCollection *self, TextureStage *stage, Texture *tex, int priority);

#if INDEX
#define NodePathCollection_C_set_texture_v_pppi NodePathCollection$35$set_texture
#endif

// C++ _inCAAAAfDHK(TextureStage *stage, Texture *tex) ==> NodePathCollection$_$set_texture(NodePathCollection *param0, TextureStage *param1, Texture *param2)(NodePathCollection *, TextureStage *, Texture *)
extern void NodePathCollection$36$set_texture(NodePathCollection *self, TextureStage *stage, Texture *tex);

#if INDEX
#define NodePathCollection_C_set_texture_v_ppp NodePathCollection$36$set_texture
#endif

// C++ _inCAAAAG_3G(TextureStage *stage, int priority) ==> NodePathCollection$_$set_texture_off(NodePathCollection *param0, TextureStage *param1, int param2)(NodePathCollection *, TextureStage *, int)
extern void NodePathCollection$37$set_texture_off(NodePathCollection *self, TextureStage *stage, int priority);

#if INDEX
#define NodePathCollection_C_set_texture_off_v_ppi NodePathCollection$37$set_texture_off
#endif

// C++ _inCAAAAn4Jh(TextureStage *stage) ==> NodePathCollection$_$set_texture_off(NodePathCollection *param0, TextureStage *param1)(NodePathCollection *, TextureStage *)
extern void NodePathCollection$38$set_texture_off(NodePathCollection *self, TextureStage *stage);

#if INDEX
#define NodePathCollection_C_set_texture_off_v_pp NodePathCollection$38$set_texture_off
#endif

// C++ _inCAAAAnDJh(int priority) ==> NodePathCollection$_$set_texture_off(NodePathCollection *param0, int param1)(NodePathCollection *, int)
extern void NodePathCollection$39$set_texture_off(NodePathCollection *self, int priority);

#if INDEX
#define NodePathCollection_C_set_texture_off_v_pi NodePathCollection$39$set_texture_off
#endif

// C++ _inCAAAApfVS() ==> NodePathCollection$_$set_texture_off(NodePathCollection *param0)(NodePathCollection *)
extern void NodePathCollection$40$set_texture_off(NodePathCollection *self);

#if INDEX
#define NodePathCollection_C_set_texture_off_v_p NodePathCollection$40$set_texture_off
#endif

// C++ _inCAAAAwmua(LColor const &color, int priority) ==> NodePathCollection$_$set_color(NodePathCollection *param0, LColor const *param1, int param2)(NodePathCollection *, LColor const *, int)
extern void NodePathCollection$41$set_color(NodePathCollection *self, LColor const *color, int priority);

#if INDEX
#define NodePathCollection_C_set_color_v_ppi NodePathCollection$41$set_color
#endif

// C++ _inCAAAA3g3D(LColor const &color) ==> NodePathCollection$_$set_color(NodePathCollection *param0, LColor const *param1)(NodePathCollection *, LColor const *)
extern void NodePathCollection$42$set_color(NodePathCollection *self, LColor const *color);

#if INDEX
#define NodePathCollection_C_set_color_v_pp NodePathCollection$42$set_color
#endif

// C++ _inCAAAAITUT(PN_stdfloat r, PN_stdfloat g, PN_stdfloat b, PN_stdfloat a, int priority) ==> NodePathCollection$_$set_color(NodePathCollection *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, int param5)(NodePathCollection *, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat, int)
extern void NodePathCollection$43$set_color(NodePathCollection *self, PN_stdfloat r, PN_stdfloat g, PN_stdfloat b, PN_stdfloat a, int priority);

#if INDEX
#define NodePathCollection_C_set_color_v_pffffi NodePathCollection$43$set_color
#endif

// C++ _inCAAAAJbTl(PN_stdfloat r, PN_stdfloat g, PN_stdfloat b, PN_stdfloat a) ==> NodePathCollection$_$set_color(NodePathCollection *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4)(NodePathCollection *, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void NodePathCollection$44$set_color(NodePathCollection *self, PN_stdfloat r, PN_stdfloat g, PN_stdfloat b, PN_stdfloat a);

#if INDEX
#define NodePathCollection_C_set_color_v_pffff NodePathCollection$44$set_color
#endif

// C++ _inCAAAA1ZcC(PN_stdfloat r, PN_stdfloat g, PN_stdfloat b) ==> NodePathCollection$_$set_color(NodePathCollection *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3)(NodePathCollection *, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void NodePathCollection$45$set_color(NodePathCollection *self, PN_stdfloat r, PN_stdfloat g, PN_stdfloat b);

#if INDEX
#define NodePathCollection_C_set_color_v_pfff NodePathCollection$45$set_color
#endif

// C++ _inCAAAAuxPQ(LVecBase4 const &scale, int priority) ==> NodePathCollection$_$set_color_scale(NodePathCollection *param0, LVecBase4 const *param1, int param2)(NodePathCollection *, LVecBase4 const *, int)
extern void NodePathCollection$46$set_color_scale(NodePathCollection *self, LVecBase4 const *scale, int priority);

#if INDEX
#define NodePathCollection_C_set_color_scale_v_ppi NodePathCollection$46$set_color_scale
#endif

// C++ _inCAAAAVyZ9(LVecBase4 const &scale) ==> NodePathCollection$_$set_color_scale(NodePathCollection *param0, LVecBase4 const *param1)(NodePathCollection *, LVecBase4 const *)
extern void NodePathCollection$47$set_color_scale(NodePathCollection *self, LVecBase4 const *scale);

#if INDEX
#define NodePathCollection_C_set_color_scale_v_pp NodePathCollection$47$set_color_scale
#endif

// C++ _inCAAAA9e_3(PN_stdfloat r, PN_stdfloat g, PN_stdfloat b, PN_stdfloat a, int priority) ==> NodePathCollection$_$set_color_scale(NodePathCollection *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, int param5)(NodePathCollection *, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat, int)
extern void NodePathCollection$48$set_color_scale(NodePathCollection *self, PN_stdfloat r, PN_stdfloat g, PN_stdfloat b, PN_stdfloat a, int priority);

#if INDEX
#define NodePathCollection_C_set_color_scale_v_pffffi NodePathCollection$48$set_color_scale
#endif

// C++ _inCAAAASlA2(PN_stdfloat r, PN_stdfloat g, PN_stdfloat b, PN_stdfloat a) ==> NodePathCollection$_$set_color_scale(NodePathCollection *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4)(NodePathCollection *, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void NodePathCollection$49$set_color_scale(NodePathCollection *self, PN_stdfloat r, PN_stdfloat g, PN_stdfloat b, PN_stdfloat a);

#if INDEX
#define NodePathCollection_C_set_color_scale_v_pffff NodePathCollection$49$set_color_scale
#endif

// C++ _inCAAAAL9t9(PN_stdfloat r, PN_stdfloat g, PN_stdfloat b) ==> NodePathCollection$_$set_color_scale(NodePathCollection *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3)(NodePathCollection *, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void NodePathCollection$50$set_color_scale(NodePathCollection *self, PN_stdfloat r, PN_stdfloat g, PN_stdfloat b);

#if INDEX
#define NodePathCollection_C_set_color_scale_v_pfff NodePathCollection$50$set_color_scale
#endif

// C++ _inCAAAAcI2r(LVecBase4 const &scale, int priority) ==> NodePathCollection$_$compose_color_scale(NodePathCollection *param0, LVecBase4 const *param1, int param2)(NodePathCollection *, LVecBase4 const *, int)
extern void NodePathCollection$51$compose_color_scale(NodePathCollection *self, LVecBase4 const *scale, int priority);

#if INDEX
#define NodePathCollection_C_compose_color_scale_v_ppi NodePathCollection$51$compose_color_scale
#endif

// C++ _inCAAAAiItu(LVecBase4 const &scale) ==> NodePathCollection$_$compose_color_scale(NodePathCollection *param0, LVecBase4 const *param1)(NodePathCollection *, LVecBase4 const *)
extern void NodePathCollection$52$compose_color_scale(NodePathCollection *self, LVecBase4 const *scale);

#if INDEX
#define NodePathCollection_C_compose_color_scale_v_pp NodePathCollection$52$compose_color_scale
#endif

// C++ _inCAAAApaP_(PN_stdfloat r, PN_stdfloat g, PN_stdfloat b, PN_stdfloat a, int priority) ==> NodePathCollection$_$compose_color_scale(NodePathCollection *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, int param5)(NodePathCollection *, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat, int)
extern void NodePathCollection$53$compose_color_scale(NodePathCollection *self, PN_stdfloat r, PN_stdfloat g, PN_stdfloat b, PN_stdfloat a, int priority);

#if INDEX
#define NodePathCollection_C_compose_color_scale_v_pffffi NodePathCollection$53$compose_color_scale
#endif

// C++ _inCAAAAWpGG(PN_stdfloat r, PN_stdfloat g, PN_stdfloat b, PN_stdfloat a) ==> NodePathCollection$_$compose_color_scale(NodePathCollection *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4)(NodePathCollection *, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void NodePathCollection$54$compose_color_scale(NodePathCollection *self, PN_stdfloat r, PN_stdfloat g, PN_stdfloat b, PN_stdfloat a);

#if INDEX
#define NodePathCollection_C_compose_color_scale_v_pffff NodePathCollection$54$compose_color_scale
#endif

// C++ _inCAAAAFyp6(PN_stdfloat r, PN_stdfloat g, PN_stdfloat b) ==> NodePathCollection$_$compose_color_scale(NodePathCollection *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3)(NodePathCollection *, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void NodePathCollection$55$compose_color_scale(NodePathCollection *self, PN_stdfloat r, PN_stdfloat g, PN_stdfloat b);

#if INDEX
#define NodePathCollection_C_compose_color_scale_v_pfff NodePathCollection$55$compose_color_scale
#endif

// C++ _inCAAAAWzN6(RenderAttrib const *attrib, int priority) ==> NodePathCollection$_$set_attrib(NodePathCollection *param0, RenderAttrib const *param1, int param2)(NodePathCollection *, RenderAttrib const *, int)
extern void NodePathCollection$56$set_attrib(NodePathCollection *self, RenderAttrib const *attrib, int priority);

#if INDEX
#define NodePathCollection_C_set_attrib_v_ppi NodePathCollection$56$set_attrib
#endif

// C++ _inCAAAAkrMD(RenderAttrib const *attrib) ==> NodePathCollection$_$set_attrib(NodePathCollection *param0, RenderAttrib const *param1)(NodePathCollection *, RenderAttrib const *)
extern void NodePathCollection$57$set_attrib(NodePathCollection *self, RenderAttrib const *attrib);

#if INDEX
#define NodePathCollection_C_set_attrib_v_pp NodePathCollection$57$set_attrib
#endif

// C++ _inCAAAAGpQO(std::ostream &out) ==> NodePathCollection$_$output(NodePathCollection const *param0, std::ostream *param1)(NodePathCollection const *, std::ostream *)
extern void NodePathCollection$58$output(NodePathCollection const *self, std$_ostream *out);

#if INDEX
#define NodePathCollection_C_output_v_pp NodePathCollection$58$output
#endif

// C++ _inCAAAAvAND(std::ostream &out, int indent_level) ==> NodePathCollection$_$write(NodePathCollection const *param0, std::ostream *param1, int param2)(NodePathCollection const *, std::ostream *, int)
extern void NodePathCollection$59$write(NodePathCollection const *self, std$_ostream *out, int indent_level);

#if INDEX
#define NodePathCollection_C_write_v_ppi NodePathCollection$59$write
#endif

// C++ _inCAAAA_djl(std::ostream &out) ==> NodePathCollection$_$write(NodePathCollection const *param0, std::ostream *param1)(NodePathCollection const *, std::ostream *)
extern void NodePathCollection$60$write(NodePathCollection const *self, std$_ostream *out);

#if INDEX
#define NodePathCollection_C_write_v_pp NodePathCollection$60$write
#endif


// PandaFramework

// C++ _inCAAAAypGM() ==> PandaFramework$_$PandaFramework()()
extern PandaFramework * PandaFramework$1$PandaFramework(void);

#if INDEX
#define PandaFramework_C_ctor_p_v PandaFramework$1$PandaFramework
#endif

// C++ _inCAAAAREj_(PandaFramework const &) ==> PandaFramework$_$PandaFramework(PandaFramework const *param0)(PandaFramework const *)
extern PandaFramework * PandaFramework$2$PandaFramework(PandaFramework const *arg0);

#if INDEX
#define PandaFramework_C_ctor_p_p PandaFramework$2$PandaFramework
#endif

// C++ _inCAAAAsKrD() ==> PandaFramework$_$open_framework(PandaFramework *param0)(PandaFramework *)
extern void PandaFramework$3$open_framework(PandaFramework *self);

#if INDEX
#define PandaFramework_C_open_framework_v_p PandaFramework$3$open_framework
#endif

// C++ _inCAAAAKVXv() ==> PandaFramework$_$close_framework(PandaFramework *param0)(PandaFramework *)
extern void PandaFramework$4$close_framework(PandaFramework *self);

#if INDEX
#define PandaFramework_C_close_framework_v_p PandaFramework$4$close_framework
#endif

// C++ _inCAAAAVdkC() ==> PandaFramework$_$get_default_pipe(PandaFramework *param0)(PandaFramework *)
extern GraphicsPipe * PandaFramework$5$get_default_pipe(PandaFramework *self);

#if INDEX
#define PandaFramework_C_get_default_pipe_p_p PandaFramework$5$get_default_pipe
#endif

// C++ _inCAAAAr_4C() ==> PandaFramework$_$get_graphics_engine(PandaFramework *param0)(PandaFramework *)
extern GraphicsEngine * PandaFramework$6$get_graphics_engine(PandaFramework *self);

#if INDEX
#define PandaFramework_C_get_graphics_engine_p_p PandaFramework$6$get_graphics_engine
#endif

// C++ _inCAAAAG8gO() ==> PandaFramework$_$get_data_root(PandaFramework const *param0)(PandaFramework const *)
extern NodePath const * PandaFramework$7$get_data_root(PandaFramework const *self);

#if INDEX
#define PandaFramework_C_get_data_root_p_p PandaFramework$7$get_data_root
#endif

// C++ _inCAAAA1Tbl() ==> PandaFramework$_$get_event_handler(PandaFramework *param0)(PandaFramework *)
extern EventHandler * PandaFramework$8$get_event_handler(PandaFramework *self);

#if INDEX
#define PandaFramework_C_get_event_handler_p_p PandaFramework$8$get_event_handler
#endif

// C++ _inCAAAAmkMb() ==> PandaFramework$_$get_task_mgr(PandaFramework *param0)(PandaFramework *)
extern AsyncTaskManager * PandaFramework$9$get_task_mgr(PandaFramework *self);

#if INDEX
#define PandaFramework_C_get_task_mgr_p_p PandaFramework$9$get_task_mgr
#endif

// C++ _inCAAAAtlsO(GraphicsOutput *window) ==> PandaFramework$_$get_mouse(PandaFramework *param0, GraphicsOutput *param1)(PandaFramework *, GraphicsOutput *)
extern NodePath * PandaFramework$10$get_mouse(PandaFramework *self, GraphicsOutput *window);

#if INDEX
#define PandaFramework_C_get_mouse_p_pp PandaFramework$10$get_mouse
#endif

// C++ _inCAAAAN4hp(GraphicsOutput const *window) ==> PandaFramework$_$remove_mouse(PandaFramework *param0, GraphicsOutput const *param1)(PandaFramework *, GraphicsOutput const *)
extern void PandaFramework$11$remove_mouse(PandaFramework *self, GraphicsOutput const *window);

#if INDEX
#define PandaFramework_C_remove_mouse_v_pp PandaFramework$11$remove_mouse
#endif

// C++ _inCAAAAxJn5(std::string const &title) ==> PandaFramework$_$set_window_title(PandaFramework *param0, char const *param1)(PandaFramework *, char const *)
extern void PandaFramework$12$set_window_title(PandaFramework *self, char const *title);

#if INDEX
#define PandaFramework_C_set_window_title_v_ps PandaFramework$12$set_window_title
#endif

// C++ _inCAAAAEuzA(WindowProperties &props) ==> PandaFramework$_$get_default_window_props(PandaFramework *param0, WindowProperties *param1)(PandaFramework *, WindowProperties *)
extern void PandaFramework$13$get_default_window_props(PandaFramework *self, WindowProperties *props);

#if INDEX
#define PandaFramework_C_get_default_window_props_v_pp PandaFramework$13$get_default_window_props
#endif

// C++ _inCAAAAu0Rp() ==> PandaFramework$_$open_window(PandaFramework *param0)(PandaFramework *)
extern WindowFramework * PandaFramework$14$open_window(PandaFramework *self);

#if INDEX
#define PandaFramework_C_open_window_p_p PandaFramework$14$open_window
#endif

// C++ _inCAAAAaDr7(GraphicsPipe *pipe, GraphicsStateGuardian *gsg) ==> PandaFramework$_$open_window(PandaFramework *param0, GraphicsPipe *param1, GraphicsStateGuardian *param2)(PandaFramework *, GraphicsPipe *, GraphicsStateGuardian *)
extern WindowFramework * PandaFramework$15$open_window(PandaFramework *self, GraphicsPipe *pipe, GraphicsStateGuardian *gsg);

#if INDEX
#define PandaFramework_C_open_window_p_ppp PandaFramework$15$open_window
#endif

// C++ _inCAAAA76RV(GraphicsPipe *pipe) ==> PandaFramework$_$open_window(PandaFramework *param0, GraphicsPipe *param1)(PandaFramework *, GraphicsPipe *)
extern WindowFramework * PandaFramework$16$open_window(PandaFramework *self, GraphicsPipe *pipe);

#if INDEX
#define PandaFramework_C_open_window_p_pp PandaFramework$16$open_window
#endif

// C++ _inCAAAAppbh(WindowProperties const &props, int flags, GraphicsPipe *pipe, GraphicsStateGuardian *gsg) ==> PandaFramework$_$open_window(PandaFramework *param0, WindowProperties const *param1, int param2, GraphicsPipe *param3, GraphicsStateGuardian *param4)(PandaFramework *, WindowProperties const *, int, GraphicsPipe *, GraphicsStateGuardian *)
extern WindowFramework * PandaFramework$17$open_window(PandaFramework *self, WindowProperties const *props, int flags, GraphicsPipe *pipe, GraphicsStateGuardian *gsg);

#if INDEX
#define PandaFramework_C_open_window_p_ppipp PandaFramework$17$open_window
#endif

// C++ _inCAAAA4lUs(WindowProperties const &props, int flags, GraphicsPipe *pipe) ==> PandaFramework$_$open_window(PandaFramework *param0, WindowProperties const *param1, int param2, GraphicsPipe *param3)(PandaFramework *, WindowProperties const *, int, GraphicsPipe *)
extern WindowFramework * PandaFramework$18$open_window(PandaFramework *self, WindowProperties const *props, int flags, GraphicsPipe *pipe);

#if INDEX
#define PandaFramework_C_open_window_p_ppip PandaFramework$18$open_window
#endif

// C++ _inCAAAAXYZk(WindowProperties const &props, int flags) ==> PandaFramework$_$open_window(PandaFramework *param0, WindowProperties const *param1, int param2)(PandaFramework *, WindowProperties const *, int)
extern WindowFramework * PandaFramework$19$open_window(PandaFramework *self, WindowProperties const *props, int flags);

#if INDEX
#define PandaFramework_C_open_window_p_ppi PandaFramework$19$open_window
#endif

// C++ _inCAAAAYcdL() ==> PandaFramework$_$get_num_windows(PandaFramework const *param0)(PandaFramework const *)
extern int PandaFramework$20$get_num_windows(PandaFramework const *self);

#if INDEX
#define PandaFramework_C_get_num_windows_i_p PandaFramework$20$get_num_windows
#endif

// C++ _inCAAAApaWI(int n) ==> PandaFramework$_$get_window(PandaFramework const *param0, int param1)(PandaFramework const *, int)
extern WindowFramework * PandaFramework$21$get_window(PandaFramework const *self, int n);

#if INDEX
#define PandaFramework_C_get_window_p_pi PandaFramework$21$get_window
#endif

// C++ _inCAAAAQ6X7(GraphicsOutput const *win) ==> PandaFramework$_$find_window(PandaFramework const *param0, GraphicsOutput const *param1)(PandaFramework const *, GraphicsOutput const *)
extern int PandaFramework$22$find_window(PandaFramework const *self, GraphicsOutput const *win);

#if INDEX
#define PandaFramework_C_find_window_i_pp PandaFramework$22$find_window
#endif

// C++ _inCAAAATdOk(WindowFramework const *wf) ==> PandaFramework$_$find_window(PandaFramework const *param0, WindowFramework const *param1)(PandaFramework const *, WindowFramework const *)
extern int PandaFramework$23$find_window(PandaFramework const *self, WindowFramework const *wf);
// COLLISION : PandaFramework_C_find_window_i_pp PandaFramework$23$find_window

// C++ _inCAAAA49di(WindowFramework *wf) ==> PandaFramework$_$close_window(PandaFramework *param0, WindowFramework *param1)(PandaFramework *, WindowFramework *)
extern void PandaFramework$24$close_window(PandaFramework *self, WindowFramework *wf);

#if INDEX
#define PandaFramework_C_close_window_v_pp PandaFramework$24$close_window
#endif

// C++ _inCAAAAn5NG(int n) ==> PandaFramework$_$close_window(PandaFramework *param0, int param1)(PandaFramework *, int)
extern void PandaFramework$25$close_window(PandaFramework *self, int n);

#if INDEX
#define PandaFramework_C_close_window_v_pi PandaFramework$25$close_window
#endif

// C++ _inCAAAAzjdm() ==> PandaFramework$_$close_all_windows(PandaFramework *param0)(PandaFramework *)
extern void PandaFramework$26$close_all_windows(PandaFramework *self);

#if INDEX
#define PandaFramework_C_close_all_windows_v_p PandaFramework$26$close_all_windows
#endif

// C++ _inCAAAAfE_J() ==> PandaFramework$_$all_windows_closed(PandaFramework const *param0)(PandaFramework const *)
extern bool PandaFramework$27$all_windows_closed(PandaFramework const *self);

#if INDEX
#define PandaFramework_C_all_windows_closed_B_p PandaFramework$27$all_windows_closed
#endif

// C++ _inCAAAAaoZj() ==> PandaFramework$_$get_models(PandaFramework *param0)(PandaFramework *)
extern NodePath * PandaFramework$28$get_models(PandaFramework *self);

#if INDEX
#define PandaFramework_C_get_models_p_p PandaFramework$28$get_models
#endif

// C++ _inCAAAA_31j(std::ostream &out) ==> PandaFramework$_$report_frame_rate(PandaFramework const *param0, std::ostream *param1)(PandaFramework const *, std::ostream *)
extern void PandaFramework$29$report_frame_rate(PandaFramework const *self, std$_ostream *out);

#if INDEX
#define PandaFramework_C_report_frame_rate_v_pp PandaFramework$29$report_frame_rate
#endif

// C++ _inCAAAA1_hB() ==> PandaFramework$_$reset_frame_rate(PandaFramework *param0)(PandaFramework *)
extern void PandaFramework$30$reset_frame_rate(PandaFramework *self);

#if INDEX
#define PandaFramework_C_reset_frame_rate_v_p PandaFramework$30$reset_frame_rate
#endif

// C++ _inCAAAAVSWK(bool enable) ==> PandaFramework$_$set_wireframe(PandaFramework *param0, bool param1)(PandaFramework *, bool)
extern void PandaFramework$31$set_wireframe(PandaFramework *self, bool enable);

#if INDEX
#define PandaFramework_C_set_wireframe_v_pB PandaFramework$31$set_wireframe
#endif

// C++ _inCAAAAXGkU(bool enable) ==> PandaFramework$_$set_texture(PandaFramework *param0, bool param1)(PandaFramework *, bool)
extern void PandaFramework$32$set_texture(PandaFramework *self, bool enable);

#if INDEX
#define PandaFramework_C_set_texture_v_pB PandaFramework$32$set_texture
#endif

// C++ _inCAAAANbIn(bool enable) ==> PandaFramework$_$set_two_sided(PandaFramework *param0, bool param1)(PandaFramework *, bool)
extern void PandaFramework$33$set_two_sided(PandaFramework *self, bool enable);

#if INDEX
#define PandaFramework_C_set_two_sided_v_pB PandaFramework$33$set_two_sided
#endif

// C++ _inCAAAA3uCt(bool enable) ==> PandaFramework$_$set_lighting(PandaFramework *param0, bool param1)(PandaFramework *, bool)
extern void PandaFramework$34$set_lighting(PandaFramework *self, bool enable);

#if INDEX
#define PandaFramework_C_set_lighting_v_pB PandaFramework$34$set_lighting
#endif

// C++ _inCAAAAPmkx(bool enable) ==> PandaFramework$_$set_perpixel(PandaFramework *param0, bool param1)(PandaFramework *, bool)
extern void PandaFramework$35$set_perpixel(PandaFramework *self, bool enable);

#if INDEX
#define PandaFramework_C_set_perpixel_v_pB PandaFramework$35$set_perpixel
#endif

// C++ _inCAAAA6rP9(WindowFramework::BackgroundType type) ==> PandaFramework$_$set_background_type(PandaFramework *param0, WindowFramework::BackgroundType param1)(PandaFramework *, WindowFramework::BackgroundType)
extern void PandaFramework$36$set_background_type(PandaFramework *self, WindowFramework$_BackgroundType type);

#if INDEX
#define PandaFramework_C_set_background_type_v_pp PandaFramework$36$set_background_type
#endif

// C++ _inCAAAAKmiS() ==> PandaFramework$_$get_wireframe(PandaFramework const *param0)(PandaFramework const *)
extern bool PandaFramework$37$get_wireframe(PandaFramework const *self);

#if INDEX
#define PandaFramework_C_get_wireframe_B_p PandaFramework$37$get_wireframe
#endif

// C++ _inCAAAAG6RL() ==> PandaFramework$_$get_texture(PandaFramework const *param0)(PandaFramework const *)
extern bool PandaFramework$38$get_texture(PandaFramework const *self);

#if INDEX
#define PandaFramework_C_get_texture_B_p PandaFramework$38$get_texture
#endif

// C++ _inCAAAAR3Vv() ==> PandaFramework$_$get_two_sided(PandaFramework const *param0)(PandaFramework const *)
extern bool PandaFramework$39$get_two_sided(PandaFramework const *self);

#if INDEX
#define PandaFramework_C_get_two_sided_B_p PandaFramework$39$get_two_sided
#endif

// C++ _inCAAAAAlhc() ==> PandaFramework$_$get_lighting(PandaFramework const *param0)(PandaFramework const *)
extern bool PandaFramework$40$get_lighting(PandaFramework const *self);

#if INDEX
#define PandaFramework_C_get_lighting_B_p PandaFramework$40$get_lighting
#endif

// C++ _inCAAAAegFh() ==> PandaFramework$_$get_perpixel(PandaFramework const *param0)(PandaFramework const *)
extern bool PandaFramework$41$get_perpixel(PandaFramework const *self);

#if INDEX
#define PandaFramework_C_get_perpixel_B_p PandaFramework$41$get_perpixel
#endif

// C++ _inCAAAACMz0() ==> PandaFramework$_$get_background_type(PandaFramework const *param0)(PandaFramework const *)
extern WindowFramework$_BackgroundType PandaFramework$42$get_background_type(PandaFramework const *self);

#if INDEX
#define PandaFramework_C_get_background_type_p_p PandaFramework$42$get_background_type
#endif

// C++ _inCAAAA7ZBj(NodePath node) ==> PandaFramework$_$hide_collision_solids(NodePath *param0)(NodePath *)
extern int PandaFramework$43$hide_collision_solids(NodePath *node);

#if INDEX
#define PandaFramework_C_hide_collision_solids_i_p PandaFramework$43$hide_collision_solids
#endif

// C++ _inCAAAAgBrJ(NodePath node) ==> PandaFramework$_$show_collision_solids(NodePath *param0)(NodePath *)
extern int PandaFramework$44$show_collision_solids(NodePath *node);

#if INDEX
#define PandaFramework_C_show_collision_solids_i_p PandaFramework$44$show_collision_solids
#endif

// C++ _inCAAAA7iU_(NodePath const &node) ==> PandaFramework$_$set_highlight(PandaFramework *param0, NodePath const *param1)(PandaFramework *, NodePath const *)
extern void PandaFramework$45$set_highlight(PandaFramework *self, NodePath const *node);

#if INDEX
#define PandaFramework_C_set_highlight_v_pp PandaFramework$45$set_highlight
#endif

// C++ _inCAAAAQGIk() ==> PandaFramework$_$clear_highlight(PandaFramework *param0)(PandaFramework *)
extern void PandaFramework$46$clear_highlight(PandaFramework *self);

#if INDEX
#define PandaFramework_C_clear_highlight_v_p PandaFramework$46$clear_highlight
#endif

// C++ _inCAAAAo5l3() ==> PandaFramework$_$has_highlight(PandaFramework const *param0)(PandaFramework const *)
extern bool PandaFramework$47$has_highlight(PandaFramework const *self);

#if INDEX
#define PandaFramework_C_has_highlight_B_p PandaFramework$47$has_highlight
#endif

// C++ _inCAAAAAalq() ==> PandaFramework$_$get_highlight(PandaFramework const *param0)(PandaFramework const *)
extern NodePath const * PandaFramework$48$get_highlight(PandaFramework const *self);

#if INDEX
#define PandaFramework_C_get_highlight_p_p PandaFramework$48$get_highlight
#endif

// C++ _inCAAAAogWe() ==> PandaFramework$_$get_recorder(PandaFramework const *param0)(PandaFramework const *)
extern RecorderController * PandaFramework$49$get_recorder(PandaFramework const *self);

#if INDEX
#define PandaFramework_C_get_recorder_p_p PandaFramework$49$get_recorder
#endif

// C++ _inCAAAAZ8TF(RecorderController *recorder) ==> PandaFramework$_$set_recorder(PandaFramework *param0, RecorderController *param1)(PandaFramework *, RecorderController *)
extern void PandaFramework$50$set_recorder(PandaFramework *self, RecorderController *recorder);

#if INDEX
#define PandaFramework_C_set_recorder_v_pp PandaFramework$50$set_recorder
#endif

// C++ _inCAAAAQdRN() ==> PandaFramework$_$enable_default_keys(PandaFramework *param0)(PandaFramework *)
extern void PandaFramework$51$enable_default_keys(PandaFramework *self);

#if INDEX
#define PandaFramework_C_enable_default_keys_v_p PandaFramework$51$enable_default_keys
#endif

// C++ _inCAAAAOKab(Thread *current_thread) ==> PandaFramework$_$do_frame(PandaFramework *param0, Thread *param1)(PandaFramework *, Thread *)
extern bool PandaFramework$52$do_frame(PandaFramework *self, Thread *current_thread);

#if INDEX
#define PandaFramework_C_do_frame_B_pp PandaFramework$52$do_frame
#endif

// C++ _inCAAAAs7KM() ==> PandaFramework$_$main_loop(PandaFramework *param0)(PandaFramework *)
extern void PandaFramework$53$main_loop(PandaFramework *self);

#if INDEX
#define PandaFramework_C_main_loop_v_p PandaFramework$53$main_loop
#endif

// C++ _inCAAAA5I9v() ==> PandaFramework$_$set_exit_flag(PandaFramework *param0)(PandaFramework *)
extern void PandaFramework$54$set_exit_flag(PandaFramework *self);

#if INDEX
#define PandaFramework_C_set_exit_flag_v_p PandaFramework$54$set_exit_flag
#endif

// C++ _inCAAAALDj_() ==> PandaFramework$_$clear_exit_flag(PandaFramework *param0)(PandaFramework *)
extern void PandaFramework$55$clear_exit_flag(PandaFramework *self);

#if INDEX
#define PandaFramework_C_clear_exit_flag_v_p PandaFramework$55$clear_exit_flag
#endif


// PandaNode

// C++ _inCAAAALhJp() ==> PandaNode$_$upcast_to_TypedWritableReferenceCount(PandaNode *param0)(PandaNode *)
extern TypedWritableReferenceCount * PandaNode$1$upcast_to_TypedWritableReferenceCount(PandaNode *self);

#if INDEX
#define PandaNode_C_upcast_to_TypedWritableReferenceCount_p_p PandaNode$1$upcast_to_TypedWritableReferenceCount
#endif

// C++ _inCAAAAjprb() ==> PandaNode$_$upcast_to_Namable(PandaNode *param0)(PandaNode *)
extern Namable * PandaNode$2$upcast_to_Namable(PandaNode *self);

#if INDEX
#define PandaNode_C_upcast_to_Namable_p_p PandaNode$2$upcast_to_Namable
#endif

// C++ _inCAAAAX_n6() ==> PandaNode$_$upcast_to_LinkedListNode(PandaNode *param0)(PandaNode *)
extern LinkedListNode * PandaNode$3$upcast_to_LinkedListNode(PandaNode *self);

#if INDEX
#define PandaNode_C_upcast_to_LinkedListNode_p_p PandaNode$3$upcast_to_LinkedListNode
#endif

// C++ _inCAAAAwvAS(std::string const &name) ==> PandaNode$_$PandaNode(char const *param0)(char const *)
extern PandaNode * PandaNode$4$PandaNode(char const *name);

#if INDEX
#define PandaNode_C_ctor_p_s PandaNode$4$PandaNode
#endif

// C++ _inCAAAAozEb(PandaNode *other) ==> PandaNode$_$combine_with(PandaNode *param0, PandaNode *param1)(PandaNode *, PandaNode *)
extern PandaNode * PandaNode$5$combine_with(PandaNode *self, PandaNode *other);

#if INDEX
#define PandaNode_C_combine_with_p_pp PandaNode$5$combine_with
#endif

// C++ _inCAAAArURW() ==> PandaNode$_$dupe_for_flatten(PandaNode const *param0)(PandaNode const *)
extern PandaNode * PandaNode$6$dupe_for_flatten(PandaNode const *self);

#if INDEX
#define PandaNode_C_dupe_for_flatten_p_p PandaNode$6$dupe_for_flatten
#endif

// C++ _inCAAAAY5FJ() ==> PandaNode$_$safe_to_flatten(PandaNode const *param0)(PandaNode const *)
extern bool PandaNode$7$safe_to_flatten(PandaNode const *self);

#if INDEX
#define PandaNode_C_safe_to_flatten_B_p PandaNode$7$safe_to_flatten
#endif

// C++ _inCAAAAw5Po() ==> PandaNode$_$safe_to_transform(PandaNode const *param0)(PandaNode const *)
extern bool PandaNode$8$safe_to_transform(PandaNode const *self);

#if INDEX
#define PandaNode_C_safe_to_transform_B_p PandaNode$8$safe_to_transform
#endif

// C++ _inCAAAAQVqr() ==> PandaNode$_$safe_to_modify_transform(PandaNode const *param0)(PandaNode const *)
extern bool PandaNode$9$safe_to_modify_transform(PandaNode const *self);

#if INDEX
#define PandaNode_C_safe_to_modify_transform_B_p PandaNode$9$safe_to_modify_transform
#endif

// C++ _inCAAAAGL7H() ==> PandaNode$_$safe_to_combine(PandaNode const *param0)(PandaNode const *)
extern bool PandaNode$10$safe_to_combine(PandaNode const *self);

#if INDEX
#define PandaNode_C_safe_to_combine_B_p PandaNode$10$safe_to_combine
#endif

// C++ _inCAAAAf1Ep() ==> PandaNode$_$safe_to_combine_children(PandaNode const *param0)(PandaNode const *)
extern bool PandaNode$11$safe_to_combine_children(PandaNode const *self);

#if INDEX
#define PandaNode_C_safe_to_combine_children_B_p PandaNode$11$safe_to_combine_children
#endif

// C++ _inCAAAAcI6y() ==> PandaNode$_$safe_to_flatten_below(PandaNode const *param0)(PandaNode const *)
extern bool PandaNode$12$safe_to_flatten_below(PandaNode const *self);

#if INDEX
#define PandaNode_C_safe_to_flatten_below_B_p PandaNode$12$safe_to_flatten_below
#endif

// C++ _inCAAAAETyN() ==> PandaNode$_$preserve_name(PandaNode const *param0)(PandaNode const *)
extern bool PandaNode$13$preserve_name(PandaNode const *self);

#if INDEX
#define PandaNode_C_preserve_name_B_p PandaNode$13$preserve_name
#endif

// C++ _inCAAAAweNO() ==> PandaNode$_$get_unsafe_to_apply_attribs(PandaNode const *param0)(PandaNode const *)
extern int PandaNode$14$get_unsafe_to_apply_attribs(PandaNode const *self);

#if INDEX
#define PandaNode_C_get_unsafe_to_apply_attribs_i_p PandaNode$14$get_unsafe_to_apply_attribs
#endif

// C++ _inCAAAAfb0c(AccumulatedAttribs const &attribs, int attrib_types, GeomTransformer &transformer) ==> PandaNode$_$apply_attribs_to_vertices(PandaNode *param0, AccumulatedAttribs const *param1, int param2, GeomTransformer *param3)(PandaNode *, AccumulatedAttribs const *, int, GeomTransformer *)
extern void PandaNode$15$apply_attribs_to_vertices(PandaNode *self, AccumulatedAttribs const *attribs, int attrib_types, GeomTransformer *transformer);

#if INDEX
#define PandaNode_C_apply_attribs_to_vertices_v_ppip PandaNode$15$apply_attribs_to_vertices
#endif

// C++ _inCAAAAUIkL(LMatrix4 const &mat) ==> PandaNode$_$xform(PandaNode *param0, LMatrix4 const *param1)(PandaNode *, LMatrix4 const *)
extern void PandaNode$16$xform(PandaNode *self, LMatrix4 const *mat);

#if INDEX
#define PandaNode_C_xform_v_pp PandaNode$16$xform
#endif

// C++ _inCAAAASXUp(CullTraverser *trav, CullTraverserData &data) ==> PandaNode$_$cull_callback(PandaNode *param0, CullTraverser *param1, CullTraverserData *param2)(PandaNode *, CullTraverser *, CullTraverserData *)
extern bool PandaNode$17$cull_callback(PandaNode *self, CullTraverser *trav, CullTraverserData *data);

#if INDEX
#define PandaNode_C_cull_callback_B_ppp PandaNode$17$cull_callback
#endif

// C++ _inCAAAAPHE7() ==> PandaNode$_$has_selective_visibility(PandaNode const *param0)(PandaNode const *)
extern bool PandaNode$18$has_selective_visibility(PandaNode const *self);

#if INDEX
#define PandaNode_C_has_selective_visibility_B_p PandaNode$18$has_selective_visibility
#endif

// C++ _inCAAAA_u5Z() ==> PandaNode$_$get_first_visible_child(PandaNode const *param0)(PandaNode const *)
extern int PandaNode$19$get_first_visible_child(PandaNode const *self);

#if INDEX
#define PandaNode_C_get_first_visible_child_i_p PandaNode$19$get_first_visible_child
#endif

// C++ _inCAAAAhzcz(int n) ==> PandaNode$_$get_next_visible_child(PandaNode const *param0, int param1)(PandaNode const *, int)
extern int PandaNode$20$get_next_visible_child(PandaNode const *self, int n);

#if INDEX
#define PandaNode_C_get_next_visible_child_i_pi PandaNode$20$get_next_visible_child
#endif

// C++ _inCAAAARReI() ==> PandaNode$_$has_single_child_visibility(PandaNode const *param0)(PandaNode const *)
extern bool PandaNode$21$has_single_child_visibility(PandaNode const *self);

#if INDEX
#define PandaNode_C_has_single_child_visibility_B_p PandaNode$21$has_single_child_visibility
#endif

// C++ _inCAAAA_B3e() ==> PandaNode$_$get_visible_child(PandaNode const *param0)(PandaNode const *)
extern int PandaNode$22$get_visible_child(PandaNode const *self);

#if INDEX
#define PandaNode_C_get_visible_child_i_p PandaNode$22$get_visible_child
#endif

// C++ _inCAAAA1e5j() ==> PandaNode$_$is_renderable(PandaNode const *param0)(PandaNode const *)
extern bool PandaNode$23$is_renderable(PandaNode const *self);

#if INDEX
#define PandaNode_C_is_renderable_B_p PandaNode$23$is_renderable
#endif

// C++ _inCAAAAmPWA(CullTraverser *trav, CullTraverserData &data) ==> PandaNode$_$add_for_draw(PandaNode *param0, CullTraverser *param1, CullTraverserData *param2)(PandaNode *, CullTraverser *, CullTraverserData *)
extern void PandaNode$24$add_for_draw(PandaNode *self, CullTraverser *trav, CullTraverserData *data);

#if INDEX
#define PandaNode_C_add_for_draw_v_ppp PandaNode$24$add_for_draw
#endif

// C++ _inCAAAAl3aT() ==> PandaNode$_$make_copy(PandaNode const *param0)(PandaNode const *)
extern PandaNode * PandaNode$25$make_copy(PandaNode const *self);

#if INDEX
#define PandaNode_C_make_copy_p_p PandaNode$25$make_copy
#endif

// C++ _inCAAAAcUmi(Thread *current_thread) ==> PandaNode$_$copy_subgraph(PandaNode const *param0, Thread *param1)(PandaNode const *, Thread *)
extern char ** PandaNode$26$copy_subgraph(PandaNode const *self, Thread *current_thread);

#if INDEX
#define PandaNode_C_copy_subgraph_p_pp PandaNode$26$copy_subgraph
#endif

// C++ _inCAAAAFYnx() ==> PandaNode$_$copy_subgraph(PandaNode const *param0)(PandaNode const *)
extern char ** PandaNode$27$copy_subgraph(PandaNode const *self);

#if INDEX
#define PandaNode_C_copy_subgraph_p_p PandaNode$27$copy_subgraph
#endif

// C++ _inCAAAAQZtc(Thread *current_thread) ==> PandaNode$_$get_num_parents(PandaNode const *param0, Thread *param1)(PandaNode const *, Thread *)
extern int PandaNode$28$get_num_parents(PandaNode const *self, Thread *current_thread);

#if INDEX
#define PandaNode_C_get_num_parents_i_pp PandaNode$28$get_num_parents
#endif

// C++ _inCAAAAI9bH() ==> PandaNode$_$get_num_parents(PandaNode const *param0)(PandaNode const *)
extern int PandaNode$29$get_num_parents(PandaNode const *self);

#if INDEX
#define PandaNode_C_get_num_parents_i_p PandaNode$29$get_num_parents
#endif

// C++ _inCAAAALi8_(int n, Thread *current_thread) ==> PandaNode$_$get_parent(PandaNode const *param0, int param1, Thread *param2)(PandaNode const *, int, Thread *)
extern PandaNode * PandaNode$30$get_parent(PandaNode const *self, int n, Thread *current_thread);

#if INDEX
#define PandaNode_C_get_parent_p_pip PandaNode$30$get_parent
#endif

// C++ _inCAAAAh0xF(int n) ==> PandaNode$_$get_parent(PandaNode const *param0, int param1)(PandaNode const *, int)
extern PandaNode * PandaNode$31$get_parent(PandaNode const *self, int n);

#if INDEX
#define PandaNode_C_get_parent_p_pi PandaNode$31$get_parent
#endif

// C++ _inCAAAAJ9Xm(PandaNode *node, Thread *current_thread) ==> PandaNode$_$find_parent(PandaNode const *param0, PandaNode *param1, Thread *param2)(PandaNode const *, PandaNode *, Thread *)
extern int PandaNode$32$find_parent(PandaNode const *self, PandaNode *node, Thread *current_thread);

#if INDEX
#define PandaNode_C_find_parent_i_ppp PandaNode$32$find_parent
#endif

// C++ _inCAAAAMWG_(PandaNode *node) ==> PandaNode$_$find_parent(PandaNode const *param0, PandaNode *param1)(PandaNode const *, PandaNode *)
extern int PandaNode$33$find_parent(PandaNode const *self, PandaNode *node);

#if INDEX
#define PandaNode_C_find_parent_i_pp PandaNode$33$find_parent
#endif

// C++ _inCAAAA_i8R(Thread *current_thread) ==> PandaNode$_$get_num_children(PandaNode const *param0, Thread *param1)(PandaNode const *, Thread *)
extern int PandaNode$34$get_num_children(PandaNode const *self, Thread *current_thread);

#if INDEX
#define PandaNode_C_get_num_children_i_pp PandaNode$34$get_num_children
#endif

// C++ _inCAAAA78Bo() ==> PandaNode$_$get_num_children(PandaNode const *param0)(PandaNode const *)
extern int PandaNode$35$get_num_children(PandaNode const *self);

#if INDEX
#define PandaNode_C_get_num_children_i_p PandaNode$35$get_num_children
#endif

// C++ _inCAAAAwRT3(int n, Thread *current_thread) ==> PandaNode$_$get_child(PandaNode const *param0, int param1, Thread *param2)(PandaNode const *, int, Thread *)
extern PandaNode * PandaNode$36$get_child(PandaNode const *self, int n, Thread *current_thread);

#if INDEX
#define PandaNode_C_get_child_p_pip PandaNode$36$get_child
#endif

// C++ _inCAAAAkZg9(int n) ==> PandaNode$_$get_child(PandaNode const *param0, int param1)(PandaNode const *, int)
extern PandaNode * PandaNode$37$get_child(PandaNode const *self, int n);

#if INDEX
#define PandaNode_C_get_child_p_pi PandaNode$37$get_child
#endif

// C++ _inCAAAAkRF6(int n, Thread *current_thread) ==> PandaNode$_$get_child_sort(PandaNode const *param0, int param1, Thread *param2)(PandaNode const *, int, Thread *)
extern int PandaNode$38$get_child_sort(PandaNode const *self, int n, Thread *current_thread);

#if INDEX
#define PandaNode_C_get_child_sort_i_pip PandaNode$38$get_child_sort
#endif

// C++ _inCAAAAMzeG(int n) ==> PandaNode$_$get_child_sort(PandaNode const *param0, int param1)(PandaNode const *, int)
extern int PandaNode$39$get_child_sort(PandaNode const *self, int n);

#if INDEX
#define PandaNode_C_get_child_sort_i_pi PandaNode$39$get_child_sort
#endif

// C++ _inCAAAAkP7k(PandaNode *node, Thread *current_thread) ==> PandaNode$_$find_child(PandaNode const *param0, PandaNode *param1, Thread *param2)(PandaNode const *, PandaNode *, Thread *)
extern int PandaNode$40$find_child(PandaNode const *self, PandaNode *node, Thread *current_thread);

#if INDEX
#define PandaNode_C_find_child_i_ppp PandaNode$40$find_child
#endif

// C++ _inCAAAAKHuN(PandaNode *node) ==> PandaNode$_$find_child(PandaNode const *param0, PandaNode *param1)(PandaNode const *, PandaNode *)
extern int PandaNode$41$find_child(PandaNode const *self, PandaNode *node);

#if INDEX
#define PandaNode_C_find_child_i_pp PandaNode$41$find_child
#endif

// C++ _inCAAAAVcTo() ==> PandaNode$_$count_num_descendants(PandaNode const *param0)(PandaNode const *)
extern int PandaNode$42$count_num_descendants(PandaNode const *self);

#if INDEX
#define PandaNode_C_count_num_descendants_i_p PandaNode$42$count_num_descendants
#endif

// C++ _inCAAAA1AGw(PandaNode *child_node, int sort, Thread *current_thread) ==> PandaNode$_$add_child(PandaNode *param0, PandaNode *param1, int param2, Thread *param3)(PandaNode *, PandaNode *, int, Thread *)
extern void PandaNode$43$add_child(PandaNode *self, PandaNode *child_node, int sort, Thread *current_thread);

#if INDEX
#define PandaNode_C_add_child_v_ppip PandaNode$43$add_child
#endif

// C++ _inCAAAAA9tQ(PandaNode *child_node, int sort) ==> PandaNode$_$add_child(PandaNode *param0, PandaNode *param1, int param2)(PandaNode *, PandaNode *, int)
extern void PandaNode$44$add_child(PandaNode *self, PandaNode *child_node, int sort);

#if INDEX
#define PandaNode_C_add_child_v_ppi PandaNode$44$add_child
#endif

// C++ _inCAAAA27ri(PandaNode *child_node) ==> PandaNode$_$add_child(PandaNode *param0, PandaNode *param1)(PandaNode *, PandaNode *)
extern void PandaNode$45$add_child(PandaNode *self, PandaNode *child_node);

#if INDEX
#define PandaNode_C_add_child_v_pp PandaNode$45$add_child
#endif

// C++ _inCAAAAGA1V(PandaNode *child_node, Thread *current_thread) ==> PandaNode$_$remove_child(PandaNode *param0, PandaNode *param1, Thread *param2)(PandaNode *, PandaNode *, Thread *)
extern bool PandaNode$46$remove_child(PandaNode *self, PandaNode *child_node, Thread *current_thread);

#if INDEX
#define PandaNode_C_remove_child_B_ppp PandaNode$46$remove_child
#endif

// C++ _inCAAAAzFZb(PandaNode *child_node) ==> PandaNode$_$remove_child(PandaNode *param0, PandaNode *param1)(PandaNode *, PandaNode *)
extern bool PandaNode$47$remove_child(PandaNode *self, PandaNode *child_node);

#if INDEX
#define PandaNode_C_remove_child_B_pp PandaNode$47$remove_child
#endif

// C++ _inCAAAAQQCt(int child_index, Thread *current_thread) ==> PandaNode$_$remove_child(PandaNode *param0, int param1, Thread *param2)(PandaNode *, int, Thread *)
extern void PandaNode$48$remove_child(PandaNode *self, int child_index, Thread *current_thread);

#if INDEX
#define PandaNode_C_remove_child_v_pip PandaNode$48$remove_child
#endif

// C++ _inCAAAADqN1(int child_index) ==> PandaNode$_$remove_child(PandaNode *param0, int param1)(PandaNode *, int)
extern void PandaNode$49$remove_child(PandaNode *self, int child_index);

#if INDEX
#define PandaNode_C_remove_child_v_pi PandaNode$49$remove_child
#endif

// C++ _inCAAAAAkgX(PandaNode *orig_child, PandaNode *new_child, Thread *current_thread) ==> PandaNode$_$replace_child(PandaNode *param0, PandaNode *param1, PandaNode *param2, Thread *param3)(PandaNode *, PandaNode *, PandaNode *, Thread *)
extern bool PandaNode$50$replace_child(PandaNode *self, PandaNode *orig_child, PandaNode *new_child, Thread *current_thread);

#if INDEX
#define PandaNode_C_replace_child_B_pppp PandaNode$50$replace_child
#endif

// C++ _inCAAAAgW5Y(PandaNode *orig_child, PandaNode *new_child) ==> PandaNode$_$replace_child(PandaNode *param0, PandaNode *param1, PandaNode *param2)(PandaNode *, PandaNode *, PandaNode *)
extern bool PandaNode$51$replace_child(PandaNode *self, PandaNode *orig_child, PandaNode *new_child);

#if INDEX
#define PandaNode_C_replace_child_B_ppp PandaNode$51$replace_child
#endif

// C++ _inCAAAAtzoI(PandaNode *child_node, Thread *current_thread) ==> PandaNode$_$stash_child(PandaNode *param0, PandaNode *param1, Thread *param2)(PandaNode *, PandaNode *, Thread *)
extern bool PandaNode$52$stash_child(PandaNode *self, PandaNode *child_node, Thread *current_thread);

#if INDEX
#define PandaNode_C_stash_child_B_ppp PandaNode$52$stash_child
#endif

// C++ _inCAAAAjC1w(PandaNode *child_node) ==> PandaNode$_$stash_child(PandaNode *param0, PandaNode *param1)(PandaNode *, PandaNode *)
extern bool PandaNode$53$stash_child(PandaNode *self, PandaNode *child_node);

#if INDEX
#define PandaNode_C_stash_child_B_pp PandaNode$53$stash_child
#endif

// C++ _inCAAAAVnZH(int child_index, Thread *current_thread) ==> PandaNode$_$stash_child(PandaNode *param0, int param1, Thread *param2)(PandaNode *, int, Thread *)
extern void PandaNode$54$stash_child(PandaNode *self, int child_index, Thread *current_thread);

#if INDEX
#define PandaNode_C_stash_child_v_pip PandaNode$54$stash_child
#endif

// C++ _inCAAAArWqz(int child_index) ==> PandaNode$_$stash_child(PandaNode *param0, int param1)(PandaNode *, int)
extern void PandaNode$55$stash_child(PandaNode *self, int child_index);

#if INDEX
#define PandaNode_C_stash_child_v_pi PandaNode$55$stash_child
#endif

// C++ _inCAAAAQNEb(PandaNode *child_node, Thread *current_thread) ==> PandaNode$_$unstash_child(PandaNode *param0, PandaNode *param1, Thread *param2)(PandaNode *, PandaNode *, Thread *)
extern bool PandaNode$56$unstash_child(PandaNode *self, PandaNode *child_node, Thread *current_thread);

#if INDEX
#define PandaNode_C_unstash_child_B_ppp PandaNode$56$unstash_child
#endif

// C++ _inCAAAAqJGM(PandaNode *child_node) ==> PandaNode$_$unstash_child(PandaNode *param0, PandaNode *param1)(PandaNode *, PandaNode *)
extern bool PandaNode$57$unstash_child(PandaNode *self, PandaNode *child_node);

#if INDEX
#define PandaNode_C_unstash_child_B_pp PandaNode$57$unstash_child
#endif

// C++ _inCAAAAsIFB(int stashed_index, Thread *current_thread) ==> PandaNode$_$unstash_child(PandaNode *param0, int param1, Thread *param2)(PandaNode *, int, Thread *)
extern void PandaNode$58$unstash_child(PandaNode *self, int stashed_index, Thread *current_thread);

#if INDEX
#define PandaNode_C_unstash_child_v_pip PandaNode$58$unstash_child
#endif

// C++ _inCAAAAeWxF(int stashed_index) ==> PandaNode$_$unstash_child(PandaNode *param0, int param1)(PandaNode *, int)
extern void PandaNode$59$unstash_child(PandaNode *self, int stashed_index);

#if INDEX
#define PandaNode_C_unstash_child_v_pi PandaNode$59$unstash_child
#endif

// C++ _inCAAAAGnOV(Thread *current_thread) ==> PandaNode$_$get_num_stashed(PandaNode const *param0, Thread *param1)(PandaNode const *, Thread *)
extern int PandaNode$60$get_num_stashed(PandaNode const *self, Thread *current_thread);

#if INDEX
#define PandaNode_C_get_num_stashed_i_pp PandaNode$60$get_num_stashed
#endif

// C++ _inCAAAAOR8_() ==> PandaNode$_$get_num_stashed(PandaNode const *param0)(PandaNode const *)
extern int PandaNode$61$get_num_stashed(PandaNode const *self);

#if INDEX
#define PandaNode_C_get_num_stashed_i_p PandaNode$61$get_num_stashed
#endif

// C++ _inCAAAA0EjY(Thread *current_thread) ==> PandaNode$_$get_stashed(PandaNode const *param0, Thread *param1)(PandaNode const *, Thread *)
extern PandaNode$_Stashed * PandaNode$62$get_stashed(PandaNode const *self, Thread *current_thread);

#if INDEX
#define PandaNode_C_get_stashed_p_pp PandaNode$62$get_stashed
#endif

// C++ _inCAAAATBmD() ==> PandaNode$_$get_stashed(PandaNode const *param0)(PandaNode const *)
extern PandaNode$_Stashed * PandaNode$63$get_stashed(PandaNode const *self);

#if INDEX
#define PandaNode_C_get_stashed_p_p PandaNode$63$get_stashed
#endif

// C++ _inCAAAAnMF3(int n, Thread *current_thread) ==> PandaNode$_$get_stashed(PandaNode const *param0, int param1, Thread *param2)(PandaNode const *, int, Thread *)
extern PandaNode * PandaNode$64$get_stashed(PandaNode const *self, int n, Thread *current_thread);

#if INDEX
#define PandaNode_C_get_stashed_p_pip PandaNode$64$get_stashed
#endif

// C++ _inCAAAAk8qw(int n) ==> PandaNode$_$get_stashed(PandaNode const *param0, int param1)(PandaNode const *, int)
extern PandaNode * PandaNode$65$get_stashed(PandaNode const *self, int n);

#if INDEX
#define PandaNode_C_get_stashed_p_pi PandaNode$65$get_stashed
#endif

// C++ _inCAAAAdx9j(int n, Thread *current_thread) ==> PandaNode$_$get_stashed_sort(PandaNode const *param0, int param1, Thread *param2)(PandaNode const *, int, Thread *)
extern int PandaNode$66$get_stashed_sort(PandaNode const *self, int n, Thread *current_thread);

#if INDEX
#define PandaNode_C_get_stashed_sort_i_pip PandaNode$66$get_stashed_sort
#endif

// C++ _inCAAAAE1FX(int n) ==> PandaNode$_$get_stashed_sort(PandaNode const *param0, int param1)(PandaNode const *, int)
extern int PandaNode$67$get_stashed_sort(PandaNode const *self, int n);

#if INDEX
#define PandaNode_C_get_stashed_sort_i_pi PandaNode$67$get_stashed_sort
#endif

// C++ _inCAAAAlSwr(PandaNode *node, Thread *current_thread) ==> PandaNode$_$find_stashed(PandaNode const *param0, PandaNode *param1, Thread *param2)(PandaNode const *, PandaNode *, Thread *)
extern int PandaNode$68$find_stashed(PandaNode const *self, PandaNode *node, Thread *current_thread);

#if INDEX
#define PandaNode_C_find_stashed_i_ppp PandaNode$68$find_stashed
#endif

// C++ _inCAAAAyw9C(PandaNode *node) ==> PandaNode$_$find_stashed(PandaNode const *param0, PandaNode *param1)(PandaNode const *, PandaNode *)
extern int PandaNode$69$find_stashed(PandaNode const *self, PandaNode *node);

#if INDEX
#define PandaNode_C_find_stashed_i_pp PandaNode$69$find_stashed
#endif

// C++ _inCAAAAQwdX(PandaNode *child_node, int sort, Thread *current_thread) ==> PandaNode$_$add_stashed(PandaNode *param0, PandaNode *param1, int param2, Thread *param3)(PandaNode *, PandaNode *, int, Thread *)
extern void PandaNode$70$add_stashed(PandaNode *self, PandaNode *child_node, int sort, Thread *current_thread);

#if INDEX
#define PandaNode_C_add_stashed_v_ppip PandaNode$70$add_stashed
#endif

// C++ _inCAAAAXQ0n(PandaNode *child_node, int sort) ==> PandaNode$_$add_stashed(PandaNode *param0, PandaNode *param1, int param2)(PandaNode *, PandaNode *, int)
extern void PandaNode$71$add_stashed(PandaNode *self, PandaNode *child_node, int sort);

#if INDEX
#define PandaNode_C_add_stashed_v_ppi PandaNode$71$add_stashed
#endif

// C++ _inCAAAAswLI(PandaNode *child_node) ==> PandaNode$_$add_stashed(PandaNode *param0, PandaNode *param1)(PandaNode *, PandaNode *)
extern void PandaNode$72$add_stashed(PandaNode *self, PandaNode *child_node);

#if INDEX
#define PandaNode_C_add_stashed_v_pp PandaNode$72$add_stashed
#endif

// C++ _inCAAAAuXWn(int child_index, Thread *current_thread) ==> PandaNode$_$remove_stashed(PandaNode *param0, int param1, Thread *param2)(PandaNode *, int, Thread *)
extern void PandaNode$73$remove_stashed(PandaNode *self, int child_index, Thread *current_thread);

#if INDEX
#define PandaNode_C_remove_stashed_v_pip PandaNode$73$remove_stashed
#endif

// C++ _inCAAAAZHe7(int child_index) ==> PandaNode$_$remove_stashed(PandaNode *param0, int param1)(PandaNode *, int)
extern void PandaNode$74$remove_stashed(PandaNode *self, int child_index);

#if INDEX
#define PandaNode_C_remove_stashed_v_pi PandaNode$74$remove_stashed
#endif

// C++ _inCAAAAQp5s(Thread *current_thread) ==> PandaNode$_$remove_all_children(PandaNode *param0, Thread *param1)(PandaNode *, Thread *)
extern void PandaNode$75$remove_all_children(PandaNode *self, Thread *current_thread);

#if INDEX
#define PandaNode_C_remove_all_children_v_pp PandaNode$75$remove_all_children
#endif

// C++ _inCAAAAbyap() ==> PandaNode$_$remove_all_children(PandaNode *param0)(PandaNode *)
extern void PandaNode$76$remove_all_children(PandaNode *self);

#if INDEX
#define PandaNode_C_remove_all_children_v_p PandaNode$76$remove_all_children
#endif

// C++ _inCAAAANzAL(PandaNode *other, Thread *current_thread) ==> PandaNode$_$steal_children(PandaNode *param0, PandaNode *param1, Thread *param2)(PandaNode *, PandaNode *, Thread *)
extern void PandaNode$77$steal_children(PandaNode *self, PandaNode *other, Thread *current_thread);

#if INDEX
#define PandaNode_C_steal_children_v_ppp PandaNode$77$steal_children
#endif

// C++ _inCAAAAjgnr(PandaNode *other) ==> PandaNode$_$steal_children(PandaNode *param0, PandaNode *param1)(PandaNode *, PandaNode *)
extern void PandaNode$78$steal_children(PandaNode *self, PandaNode *other);

#if INDEX
#define PandaNode_C_steal_children_v_pp PandaNode$78$steal_children
#endif

// C++ _inCAAAArnCS(PandaNode *other, Thread *current_thread) ==> PandaNode$_$copy_children(PandaNode *param0, PandaNode *param1, Thread *param2)(PandaNode *, PandaNode *, Thread *)
extern void PandaNode$79$copy_children(PandaNode *self, PandaNode *other, Thread *current_thread);

#if INDEX
#define PandaNode_C_copy_children_v_ppp PandaNode$79$copy_children
#endif

// C++ _inCAAAAhfED(PandaNode *other) ==> PandaNode$_$copy_children(PandaNode *param0, PandaNode *param1)(PandaNode *, PandaNode *)
extern void PandaNode$80$copy_children(PandaNode *self, PandaNode *other);

#if INDEX
#define PandaNode_C_copy_children_v_pp PandaNode$80$copy_children
#endif

// C++ _inCAAAA48Bd(RenderAttrib const *attrib, int override) ==> PandaNode$_$set_attrib(PandaNode *param0, RenderAttrib const *param1, int param2)(PandaNode *, RenderAttrib const *, int)
extern void PandaNode$81$set_attrib(PandaNode *self, RenderAttrib const *attrib, int override);

#if INDEX
#define PandaNode_C_set_attrib_v_ppi PandaNode$81$set_attrib
#endif

// C++ _inCAAAADD5k(RenderAttrib const *attrib) ==> PandaNode$_$set_attrib(PandaNode *param0, RenderAttrib const *param1)(PandaNode *, RenderAttrib const *)
extern void PandaNode$82$set_attrib(PandaNode *self, RenderAttrib const *attrib);

#if INDEX
#define PandaNode_C_set_attrib_v_pp PandaNode$82$set_attrib
#endif

// C++ _inCAAAAaDfJ(TypeHandle type) ==> PandaNode$_$get_attrib(PandaNode const *param0, int param1)(PandaNode const *, int)
extern char ** PandaNode$83$get_attrib(PandaNode const *self, int type);

#if INDEX
#define PandaNode_C_get_attrib_p_pi PandaNode$83$get_attrib
#endif

// C++ _inCAAAAabHO(int slot) ==> PandaNode$_$get_attrib(PandaNode const *param0, int param1)(PandaNode const *, int)
extern char ** PandaNode$84$get_attrib(PandaNode const *self, int slot);
// COLLISION : PandaNode_C_get_attrib_p_pi PandaNode$84$get_attrib

// C++ _inCAAAA2W_P(TypeHandle type) ==> PandaNode$_$has_attrib(PandaNode const *param0, int param1)(PandaNode const *, int)
extern bool PandaNode$85$has_attrib(PandaNode const *self, int type);

#if INDEX
#define PandaNode_C_has_attrib_B_pi PandaNode$85$has_attrib
#endif

// C++ _inCAAAAuInU(int slot) ==> PandaNode$_$has_attrib(PandaNode const *param0, int param1)(PandaNode const *, int)
extern bool PandaNode$86$has_attrib(PandaNode const *self, int slot);
// COLLISION : PandaNode_C_has_attrib_B_pi PandaNode$86$has_attrib

// C++ _inCAAAADSEu(TypeHandle type) ==> PandaNode$_$clear_attrib(PandaNode *param0, int param1)(PandaNode *, int)
extern void PandaNode$87$clear_attrib(PandaNode *self, int type);

#if INDEX
#define PandaNode_C_clear_attrib_v_pi PandaNode$87$clear_attrib
#endif

// C++ _inCAAAAWqh9(int slot) ==> PandaNode$_$clear_attrib(PandaNode *param0, int param1)(PandaNode *, int)
extern void PandaNode$88$clear_attrib(PandaNode *self, int slot);
// COLLISION : PandaNode_C_clear_attrib_v_pi PandaNode$88$clear_attrib

// C++ _inCAAAAKWvI(RenderEffect const *effect) ==> PandaNode$_$set_effect(PandaNode *param0, RenderEffect const *param1)(PandaNode *, RenderEffect const *)
extern void PandaNode$89$set_effect(PandaNode *self, RenderEffect const *effect);

#if INDEX
#define PandaNode_C_set_effect_v_pp PandaNode$89$set_effect
#endif

// C++ _inCAAAA07Hl(TypeHandle type) ==> PandaNode$_$get_effect(PandaNode const *param0, int param1)(PandaNode const *, int)
extern char ** PandaNode$90$get_effect(PandaNode const *self, int type);

#if INDEX
#define PandaNode_C_get_effect_p_pi PandaNode$90$get_effect
#endif

// C++ _inCAAAAI1nr(TypeHandle type) ==> PandaNode$_$has_effect(PandaNode const *param0, int param1)(PandaNode const *, int)
extern bool PandaNode$91$has_effect(PandaNode const *self, int type);

#if INDEX
#define PandaNode_C_has_effect_B_pi PandaNode$91$has_effect
#endif

// C++ _inCAAAANUJ2(TypeHandle type) ==> PandaNode$_$clear_effect(PandaNode *param0, int param1)(PandaNode *, int)
extern void PandaNode$92$clear_effect(PandaNode *self, int type);

#if INDEX
#define PandaNode_C_clear_effect_v_pi PandaNode$92$clear_effect
#endif

// C++ _inCAAAAemfK(RenderState const *state, Thread *current_thread) ==> PandaNode$_$set_state(PandaNode *param0, RenderState const *param1, Thread *param2)(PandaNode *, RenderState const *, Thread *)
extern void PandaNode$93$set_state(PandaNode *self, RenderState const *state, Thread *current_thread);

#if INDEX
#define PandaNode_C_set_state_v_ppp PandaNode$93$set_state
#endif

// C++ _inCAAAAGDjV(RenderState const *state) ==> PandaNode$_$set_state(PandaNode *param0, RenderState const *param1)(PandaNode *, RenderState const *)
extern void PandaNode$94$set_state(PandaNode *self, RenderState const *state);

#if INDEX
#define PandaNode_C_set_state_v_pp PandaNode$94$set_state
#endif

// C++ _inCAAAAbxvz(Thread *current_thread) ==> PandaNode$_$get_state(PandaNode const *param0, Thread *param1)(PandaNode const *, Thread *)
extern char ** PandaNode$95$get_state(PandaNode const *self, Thread *current_thread);

#if INDEX
#define PandaNode_C_get_state_p_pp PandaNode$95$get_state
#endif

// C++ _inCAAAAJocj() ==> PandaNode$_$get_state(PandaNode const *param0)(PandaNode const *)
extern char ** PandaNode$96$get_state(PandaNode const *self);

#if INDEX
#define PandaNode_C_get_state_p_p PandaNode$96$get_state
#endif

// C++ _inCAAAAIX0F(Thread *current_thread) ==> PandaNode$_$clear_state(PandaNode *param0, Thread *param1)(PandaNode *, Thread *)
extern void PandaNode$97$clear_state(PandaNode *self, Thread *current_thread);

#if INDEX
#define PandaNode_C_clear_state_v_pp PandaNode$97$clear_state
#endif

// C++ _inCAAAAtySF() ==> PandaNode$_$clear_state(PandaNode *param0)(PandaNode *)
extern void PandaNode$98$clear_state(PandaNode *self);

#if INDEX
#define PandaNode_C_clear_state_v_p PandaNode$98$clear_state
#endif

// C++ _inCAAAACQ8C(RenderEffects const *effects, Thread *current_thread) ==> PandaNode$_$set_effects(PandaNode *param0, RenderEffects const *param1, Thread *param2)(PandaNode *, RenderEffects const *, Thread *)
extern void PandaNode$99$set_effects(PandaNode *self, RenderEffects const *effects, Thread *current_thread);

#if INDEX
#define PandaNode_C_set_effects_v_ppp PandaNode$99$set_effects
#endif

// C++ _inCAAAAxlpj(RenderEffects const *effects) ==> PandaNode$_$set_effects(PandaNode *param0, RenderEffects const *param1)(PandaNode *, RenderEffects const *)
extern void PandaNode$100$set_effects(PandaNode *self, RenderEffects const *effects);

#if INDEX
#define PandaNode_C_set_effects_v_pp PandaNode$100$set_effects
#endif

// C++ _inCAAAA8_I0(Thread *current_thread) ==> PandaNode$_$get_effects(PandaNode const *param0, Thread *param1)(PandaNode const *, Thread *)
extern char ** PandaNode$101$get_effects(PandaNode const *self, Thread *current_thread);

#if INDEX
#define PandaNode_C_get_effects_p_pp PandaNode$101$get_effects
#endif

// C++ _inCAAAA1WLf() ==> PandaNode$_$get_effects(PandaNode const *param0)(PandaNode const *)
extern char ** PandaNode$102$get_effects(PandaNode const *self);

#if INDEX
#define PandaNode_C_get_effects_p_p PandaNode$102$get_effects
#endif

// C++ _inCAAAA6KSB(Thread *current_thread) ==> PandaNode$_$clear_effects(PandaNode *param0, Thread *param1)(PandaNode *, Thread *)
extern void PandaNode$103$clear_effects(PandaNode *self, Thread *current_thread);

#if INDEX
#define PandaNode_C_clear_effects_v_pp PandaNode$103$clear_effects
#endif

// C++ _inCAAAA6yPH() ==> PandaNode$_$clear_effects(PandaNode *param0)(PandaNode *)
extern void PandaNode$104$clear_effects(PandaNode *self);

#if INDEX
#define PandaNode_C_clear_effects_v_p PandaNode$104$clear_effects
#endif

// C++ _inCAAAAqB_f(TransformState const *transform, Thread *current_thread) ==> PandaNode$_$set_transform(PandaNode *param0, TransformState const *param1, Thread *param2)(PandaNode *, TransformState const *, Thread *)
extern void PandaNode$105$set_transform(PandaNode *self, TransformState const *transform, Thread *current_thread);

#if INDEX
#define PandaNode_C_set_transform_v_ppp PandaNode$105$set_transform
#endif

// C++ _inCAAAA55Ti(TransformState const *transform) ==> PandaNode$_$set_transform(PandaNode *param0, TransformState const *param1)(PandaNode *, TransformState const *)
extern void PandaNode$106$set_transform(PandaNode *self, TransformState const *transform);

#if INDEX
#define PandaNode_C_set_transform_v_pp PandaNode$106$set_transform
#endif

// C++ _inCAAAAJmGn(Thread *current_thread) ==> PandaNode$_$get_transform(PandaNode const *param0, Thread *param1)(PandaNode const *, Thread *)
extern char ** PandaNode$107$get_transform(PandaNode const *self, Thread *current_thread);

#if INDEX
#define PandaNode_C_get_transform_p_pp PandaNode$107$get_transform
#endif

// C++ _inCAAAAydH2() ==> PandaNode$_$get_transform(PandaNode const *param0)(PandaNode const *)
extern char ** PandaNode$108$get_transform(PandaNode const *self);

#if INDEX
#define PandaNode_C_get_transform_p_p PandaNode$108$get_transform
#endif

// C++ _inCAAAAu6N3(Thread *current_thread) ==> PandaNode$_$clear_transform(PandaNode *param0, Thread *param1)(PandaNode *, Thread *)
extern void PandaNode$109$clear_transform(PandaNode *self, Thread *current_thread);

#if INDEX
#define PandaNode_C_clear_transform_v_pp PandaNode$109$clear_transform
#endif

// C++ _inCAAAAEjK_() ==> PandaNode$_$clear_transform(PandaNode *param0)(PandaNode *)
extern void PandaNode$110$clear_transform(PandaNode *self);

#if INDEX
#define PandaNode_C_clear_transform_v_p PandaNode$110$clear_transform
#endif

// C++ _inCAAAAou8E(TransformState const *transform, Thread *current_thread) ==> PandaNode$_$set_prev_transform(PandaNode *param0, TransformState const *param1, Thread *param2)(PandaNode *, TransformState const *, Thread *)
extern void PandaNode$111$set_prev_transform(PandaNode *self, TransformState const *transform, Thread *current_thread);

#if INDEX
#define PandaNode_C_set_prev_transform_v_ppp PandaNode$111$set_prev_transform
#endif

// C++ _inCAAAA_3nJ(TransformState const *transform) ==> PandaNode$_$set_prev_transform(PandaNode *param0, TransformState const *param1)(PandaNode *, TransformState const *)
extern void PandaNode$112$set_prev_transform(PandaNode *self, TransformState const *transform);

#if INDEX
#define PandaNode_C_set_prev_transform_v_pp PandaNode$112$set_prev_transform
#endif

// C++ _inCAAAA01ew(Thread *current_thread) ==> PandaNode$_$get_prev_transform(PandaNode const *param0, Thread *param1)(PandaNode const *, Thread *)
extern char ** PandaNode$113$get_prev_transform(PandaNode const *self, Thread *current_thread);

#if INDEX
#define PandaNode_C_get_prev_transform_p_pp PandaNode$113$get_prev_transform
#endif

// C++ _inCAAAAr3cO() ==> PandaNode$_$get_prev_transform(PandaNode const *param0)(PandaNode const *)
extern char ** PandaNode$114$get_prev_transform(PandaNode const *self);

#if INDEX
#define PandaNode_C_get_prev_transform_p_p PandaNode$114$get_prev_transform
#endif

// C++ _inCAAAACOg_(Thread *current_thread) ==> PandaNode$_$reset_prev_transform(PandaNode *param0, Thread *param1)(PandaNode *, Thread *)
extern void PandaNode$115$reset_prev_transform(PandaNode *self, Thread *current_thread);

#if INDEX
#define PandaNode_C_reset_prev_transform_v_pp PandaNode$115$reset_prev_transform
#endif

// C++ _inCAAAAGfcO() ==> PandaNode$_$reset_prev_transform(PandaNode *param0)(PandaNode *)
extern void PandaNode$116$reset_prev_transform(PandaNode *self);

#if INDEX
#define PandaNode_C_reset_prev_transform_v_p PandaNode$116$reset_prev_transform
#endif

// C++ _inCAAAAraRv() ==> PandaNode$_$has_dirty_prev_transform(PandaNode const *param0)(PandaNode const *)
extern bool PandaNode$117$has_dirty_prev_transform(PandaNode const *self);

#if INDEX
#define PandaNode_C_has_dirty_prev_transform_B_p PandaNode$117$has_dirty_prev_transform
#endif

// C++ _inCAAAA_NX9(Thread *current_thread) ==> PandaNode$_$reset_all_prev_transform(Thread *param0)(Thread *)
extern void PandaNode$118$reset_all_prev_transform(Thread *current_thread);

#if INDEX
#define PandaNode_C_reset_all_prev_transform_v_p PandaNode$118$reset_all_prev_transform
#endif

// C++ _inCAAAASKY2() ==> PandaNode$_$reset_all_prev_transform()()
extern void PandaNode$119$reset_all_prev_transform(void);

#if INDEX
#define PandaNode_C_reset_all_prev_transform_v_v PandaNode$119$reset_all_prev_transform
#endif

// C++ _inCAAAAUOvq(std::string const &key, std::string const &value, Thread *current_thread) ==> PandaNode$_$set_tag(PandaNode *param0, char const *param1, char const *param2, Thread *param3)(PandaNode *, char const *, char const *, Thread *)
extern void PandaNode$120$set_tag(PandaNode *self, char const *key, char const *value, Thread *current_thread);

#if INDEX
#define PandaNode_C_set_tag_v_pssp PandaNode$120$set_tag
#endif

// C++ _inCAAAAgmyP(std::string const &key, std::string const &value) ==> PandaNode$_$set_tag(PandaNode *param0, char const *param1, char const *param2)(PandaNode *, char const *, char const *)
extern void PandaNode$121$set_tag(PandaNode *self, char const *key, char const *value);

#if INDEX
#define PandaNode_C_set_tag_v_pss PandaNode$121$set_tag
#endif

// C++ _inCAAAATH82(std::string const &key, Thread *current_thread) ==> PandaNode$_$get_tag(PandaNode const *param0, char const *param1, Thread *param2)(PandaNode const *, char const *, Thread *)
extern char const * PandaNode$122$get_tag(PandaNode const *self, char const *key, Thread *current_thread);

#if INDEX
#define PandaNode_C_get_tag_s_psp PandaNode$122$get_tag
#endif

// C++ _inCAAAAdijC(std::string const &key) ==> PandaNode$_$get_tag(PandaNode const *param0, char const *param1)(PandaNode const *, char const *)
extern char const * PandaNode$123$get_tag(PandaNode const *self, char const *key);

#if INDEX
#define PandaNode_C_get_tag_s_ps PandaNode$123$get_tag
#endif

// C++ _inCAAAAHSc9(std::string const &key, Thread *current_thread) ==> PandaNode$_$has_tag(PandaNode const *param0, char const *param1, Thread *param2)(PandaNode const *, char const *, Thread *)
extern bool PandaNode$124$has_tag(PandaNode const *self, char const *key, Thread *current_thread);

#if INDEX
#define PandaNode_C_has_tag_B_psp PandaNode$124$has_tag
#endif

// C++ _inCAAAAxsDJ(std::string const &key) ==> PandaNode$_$has_tag(PandaNode const *param0, char const *param1)(PandaNode const *, char const *)
extern bool PandaNode$125$has_tag(PandaNode const *self, char const *key);

#if INDEX
#define PandaNode_C_has_tag_B_ps PandaNode$125$has_tag
#endif

// C++ _inCAAAA74cp(std::string const &key, Thread *current_thread) ==> PandaNode$_$clear_tag(PandaNode *param0, char const *param1, Thread *param2)(PandaNode *, char const *, Thread *)
extern void PandaNode$126$clear_tag(PandaNode *self, char const *key, Thread *current_thread);

#if INDEX
#define PandaNode_C_clear_tag_v_psp PandaNode$126$clear_tag
#endif

// C++ _inCAAAA1_x5(std::string const &key) ==> PandaNode$_$clear_tag(PandaNode *param0, char const *param1)(PandaNode *, char const *)
extern void PandaNode$127$clear_tag(PandaNode *self, char const *key);

#if INDEX
#define PandaNode_C_clear_tag_v_ps PandaNode$127$clear_tag
#endif

// C++ _inCAAAAMJLs(vector_string &keys) ==> PandaNode$_$get_tag_keys(PandaNode const *param0, vector_string *param1)(PandaNode const *, vector_string *)
extern void PandaNode$128$get_tag_keys(PandaNode const *self, vector_string *keys);

#if INDEX
#define PandaNode_C_get_tag_keys_v_pp PandaNode$128$get_tag_keys
#endif

// C++ _inCAAAAFtsE() ==> PandaNode$_$get_num_tags(PandaNode const *param0)(PandaNode const *)
extern std$_size_t PandaNode$129$get_num_tags(PandaNode const *self);

#if INDEX
#define PandaNode_C_get_num_tags_l_p PandaNode$129$get_num_tags
#endif

// C++ _inCAAAAnQnd(std::size_t i) ==> PandaNode$_$get_tag_key(PandaNode const *param0, std::size_t param1)(PandaNode const *, std::size_t)
extern char const * PandaNode$130$get_tag_key(PandaNode const *self, std$_size_t i);

#if INDEX
#define PandaNode_C_get_tag_key_s_pl PandaNode$130$get_tag_key
#endif

// C++ _inCAAAAUT5V() ==> PandaNode$_$has_tags(PandaNode const *param0)(PandaNode const *)
extern bool PandaNode$131$has_tags(PandaNode const *self);

#if INDEX
#define PandaNode_C_has_tags_B_p PandaNode$131$has_tags
#endif

// C++ _inCAAAAxMQi(PandaNode *other) ==> PandaNode$_$copy_tags(PandaNode *param0, PandaNode *param1)(PandaNode *, PandaNode *)
extern void PandaNode$132$copy_tags(PandaNode *self, PandaNode *other);

#if INDEX
#define PandaNode_C_copy_tags_v_pp PandaNode$132$copy_tags
#endif

// C++ _inCAAAA4_IE(std::ostream &out, std::string const &separator) ==> PandaNode$_$list_tags(PandaNode const *param0, std::ostream *param1, char const *param2)(PandaNode const *, std::ostream *, char const *)
extern void PandaNode$133$list_tags(PandaNode const *self, std$_ostream *out, char const *separator);

#if INDEX
#define PandaNode_C_list_tags_v_pps PandaNode$133$list_tags
#endif

// C++ _inCAAAAfRQ4(std::ostream &out) ==> PandaNode$_$list_tags(PandaNode const *param0, std::ostream *param1)(PandaNode const *, std::ostream *)
extern void PandaNode$134$list_tags(PandaNode const *self, std$_ostream *out);

#if INDEX
#define PandaNode_C_list_tags_v_pp PandaNode$134$list_tags
#endif

// C++ _inCAAAA5bPJ(PandaNode const *other) ==> PandaNode$_$compare_tags(PandaNode const *param0, PandaNode const *param1)(PandaNode const *, PandaNode const *)
extern int PandaNode$135$compare_tags(PandaNode const *self, PandaNode const *other);

#if INDEX
#define PandaNode_C_compare_tags_i_pp PandaNode$135$compare_tags
#endif

// C++ _inCAAAAPMTU(PandaNode *other) ==> PandaNode$_$copy_all_properties(PandaNode *param0, PandaNode *param1)(PandaNode *, PandaNode *)
extern void PandaNode$136$copy_all_properties(PandaNode *self, PandaNode *other);

#if INDEX
#define PandaNode_C_copy_all_properties_v_pp PandaNode$136$copy_all_properties
#endif

// C++ _inCAAAA5edC(PandaNode *other) ==> PandaNode$_$replace_node(PandaNode *param0, PandaNode *param1)(PandaNode *, PandaNode *)
extern void PandaNode$137$replace_node(PandaNode *self, PandaNode *other);

#if INDEX
#define PandaNode_C_replace_node_v_pp PandaNode$137$replace_node
#endif

// C++ _inCAAAAhV2Y(unsigned int flags) ==> PandaNode$_$set_unexpected_change(PandaNode *param0, unsigned int param1)(PandaNode *, unsigned int)
extern void PandaNode$138$set_unexpected_change(PandaNode *self, unsigned int flags);

#if INDEX
#define PandaNode_C_set_unexpected_change_v_pI PandaNode$138$set_unexpected_change
#endif

// C++ _inCAAAA9YBk(unsigned int flags) ==> PandaNode$_$get_unexpected_change(PandaNode const *param0, unsigned int param1)(PandaNode const *, unsigned int)
extern unsigned int PandaNode$139$get_unexpected_change(PandaNode const *self, unsigned int flags);

#if INDEX
#define PandaNode_C_get_unexpected_change_I_pI PandaNode$139$get_unexpected_change
#endif

// C++ _inCAAAADKYD(unsigned int flags) ==> PandaNode$_$clear_unexpected_change(PandaNode *param0, unsigned int param1)(PandaNode *, unsigned int)
extern void PandaNode$140$clear_unexpected_change(PandaNode *self, unsigned int flags);

#if INDEX
#define PandaNode_C_clear_unexpected_change_v_pI PandaNode$140$clear_unexpected_change
#endif

// C++ _inCAAAAMVSB() ==> PandaNode$_$get_overall_bit()()
extern DrawMask * PandaNode$141$get_overall_bit(void);

#if INDEX
#define PandaNode_C_get_overall_bit_p_v PandaNode$141$get_overall_bit
#endif

// C++ _inCAAAAD1n5() ==> PandaNode$_$get_all_camera_mask()()
extern DrawMask * PandaNode$142$get_all_camera_mask(void);

#if INDEX
#define PandaNode_C_get_all_camera_mask_p_v PandaNode$142$get_all_camera_mask
#endif

// C++ _inCAAAAc4fq() ==> PandaNode$_$is_overall_hidden(PandaNode const *param0)(PandaNode const *)
extern bool PandaNode$143$is_overall_hidden(PandaNode const *self);

#if INDEX
#define PandaNode_C_is_overall_hidden_B_p PandaNode$143$is_overall_hidden
#endif

// C++ _inCAAAApN5m(bool overall_hidden) ==> PandaNode$_$set_overall_hidden(PandaNode *param0, bool param1)(PandaNode *, bool)
extern void PandaNode$144$set_overall_hidden(PandaNode *self, bool overall_hidden);

#if INDEX
#define PandaNode_C_set_overall_hidden_v_pB PandaNode$144$set_overall_hidden
#endif

// C++ _inCAAAAvhTC(DrawMask show_mask, DrawMask hide_mask, DrawMask clear_mask) ==> PandaNode$_$adjust_draw_mask(PandaNode *param0, DrawMask *param1, DrawMask *param2, DrawMask *param3)(PandaNode *, DrawMask *, DrawMask *, DrawMask *)
extern void PandaNode$145$adjust_draw_mask(PandaNode *self, DrawMask *show_mask, DrawMask *hide_mask, DrawMask *clear_mask);

#if INDEX
#define PandaNode_C_adjust_draw_mask_v_pppp PandaNode$145$adjust_draw_mask
#endif

// C++ _inCAAAAaVGC() ==> PandaNode$_$get_draw_control_mask(PandaNode const *param0)(PandaNode const *)
extern DrawMask * PandaNode$146$get_draw_control_mask(PandaNode const *self);

#if INDEX
#define PandaNode_C_get_draw_control_mask_p_p PandaNode$146$get_draw_control_mask
#endif

// C++ _inCAAAAkxUA() ==> PandaNode$_$get_draw_show_mask(PandaNode const *param0)(PandaNode const *)
extern DrawMask * PandaNode$147$get_draw_show_mask(PandaNode const *self);

#if INDEX
#define PandaNode_C_get_draw_show_mask_p_p PandaNode$147$get_draw_show_mask
#endif

// C++ _inCAAAAVZQn() ==> PandaNode$_$get_net_draw_control_mask(PandaNode const *param0)(PandaNode const *)
extern DrawMask * PandaNode$148$get_net_draw_control_mask(PandaNode const *self);

#if INDEX
#define PandaNode_C_get_net_draw_control_mask_p_p PandaNode$148$get_net_draw_control_mask
#endif

// C++ _inCAAAAthHn() ==> PandaNode$_$get_net_draw_show_mask(PandaNode const *param0)(PandaNode const *)
extern DrawMask * PandaNode$149$get_net_draw_show_mask(PandaNode const *self);

#if INDEX
#define PandaNode_C_get_net_draw_show_mask_p_p PandaNode$149$get_net_draw_show_mask
#endif

// C++ _inCAAAAd531(CollideMask mask) ==> PandaNode$_$set_into_collide_mask(PandaNode *param0, CollideMask *param1)(PandaNode *, CollideMask *)
extern void PandaNode$150$set_into_collide_mask(PandaNode *self, CollideMask *mask);

#if INDEX
#define PandaNode_C_set_into_collide_mask_v_pp PandaNode$150$set_into_collide_mask
#endif

// C++ _inCAAAAc3Cf() ==> PandaNode$_$get_into_collide_mask(PandaNode const *param0)(PandaNode const *)
extern CollideMask * PandaNode$151$get_into_collide_mask(PandaNode const *self);

#if INDEX
#define PandaNode_C_get_into_collide_mask_p_p PandaNode$151$get_into_collide_mask
#endif

// C++ _inCAAAAtnOA() ==> PandaNode$_$get_legal_collide_mask(PandaNode const *param0)(PandaNode const *)
extern CollideMask * PandaNode$152$get_legal_collide_mask(PandaNode const *self);

#if INDEX
#define PandaNode_C_get_legal_collide_mask_p_p PandaNode$152$get_legal_collide_mask
#endif

// C++ _inCAAAABjl_(Thread *current_thread) ==> PandaNode$_$get_net_collide_mask(PandaNode const *param0, Thread *param1)(PandaNode const *, Thread *)
extern CollideMask * PandaNode$153$get_net_collide_mask(PandaNode const *self, Thread *current_thread);

#if INDEX
#define PandaNode_C_get_net_collide_mask_p_pp PandaNode$153$get_net_collide_mask
#endif

// C++ _inCAAAA4l_T() ==> PandaNode$_$get_net_collide_mask(PandaNode const *param0)(PandaNode const *)
extern CollideMask * PandaNode$154$get_net_collide_mask(PandaNode const *self);

#if INDEX
#define PandaNode_C_get_net_collide_mask_p_p PandaNode$154$get_net_collide_mask
#endif

// C++ _inCAAAAK84o(Thread *current_thread) ==> PandaNode$_$get_off_clip_planes(PandaNode const *param0, Thread *param1)(PandaNode const *, Thread *)
extern char ** PandaNode$155$get_off_clip_planes(PandaNode const *self, Thread *current_thread);

#if INDEX
#define PandaNode_C_get_off_clip_planes_p_pp PandaNode$155$get_off_clip_planes
#endif

// C++ _inCAAAAIxkn() ==> PandaNode$_$get_off_clip_planes(PandaNode const *param0)(PandaNode const *)
extern char ** PandaNode$156$get_off_clip_planes(PandaNode const *self);

#if INDEX
#define PandaNode_C_get_off_clip_planes_p_p PandaNode$156$get_off_clip_planes
#endif

// C++ _inCAAAA9vAT(GraphicsStateGuardianBase *gsg, RenderState const *node_state) ==> PandaNode$_$prepare_scene(PandaNode *param0, GraphicsStateGuardianBase *param1, RenderState const *param2)(PandaNode *, GraphicsStateGuardianBase *, RenderState const *)
extern void PandaNode$157$prepare_scene(PandaNode *self, GraphicsStateGuardianBase *gsg, RenderState const *node_state);

#if INDEX
#define PandaNode_C_prepare_scene_v_ppp PandaNode$157$prepare_scene
#endif

// C++ _inCAAAAhUEh() ==> PandaNode$_$is_scene_root(PandaNode const *param0)(PandaNode const *)
extern bool PandaNode$158$is_scene_root(PandaNode const *self);

#if INDEX
#define PandaNode_C_is_scene_root_B_p PandaNode$158$is_scene_root
#endif

// C++ _inCAAAAUA6g() ==> PandaNode$_$is_under_scene_root(PandaNode const *param0)(PandaNode const *)
extern bool PandaNode$159$is_under_scene_root(PandaNode const *self);

#if INDEX
#define PandaNode_C_is_under_scene_root_B_p PandaNode$159$is_under_scene_root
#endif

// C++ _inCAAAAhDX9(std::ostream &out) ==> PandaNode$_$output(PandaNode const *param0, std::ostream *param1)(PandaNode const *, std::ostream *)
extern void PandaNode$160$output(PandaNode const *self, std$_ostream *out);

#if INDEX
#define PandaNode_C_output_v_pp PandaNode$160$output
#endif

// C++ _inCAAAA6i2k(std::ostream &out, int indent_level) ==> PandaNode$_$write(PandaNode const *param0, std::ostream *param1, int param2)(PandaNode const *, std::ostream *, int)
extern void PandaNode$161$write(PandaNode const *self, std$_ostream *out, int indent_level);

#if INDEX
#define PandaNode_C_write_v_ppi PandaNode$161$write
#endif

// C++ _inCAAAAF2_1(std::ostream &out, int indent_level) ==> PandaNode$_$ls(PandaNode const *param0, std::ostream *param1, int param2)(PandaNode const *, std::ostream *, int)
extern void PandaNode$162$ls(PandaNode const *self, std$_ostream *out, int indent_level);

#if INDEX
#define PandaNode_C_ls_v_ppi PandaNode$162$ls
#endif

// C++ _inCAAAAb2UJ(BoundingVolume::BoundsType bounds_type) ==> PandaNode$_$set_bounds_type(PandaNode *param0, BoundingVolume::BoundsType param1)(PandaNode *, BoundingVolume::BoundsType)
extern void PandaNode$163$set_bounds_type(PandaNode *self, BoundingVolume$_BoundsType bounds_type);

#if INDEX
#define PandaNode_C_set_bounds_type_v_pp PandaNode$163$set_bounds_type
#endif

// C++ _inCAAAA6V3e() ==> PandaNode$_$get_bounds_type(PandaNode const *param0)(PandaNode const *)
extern BoundingVolume$_BoundsType PandaNode$164$get_bounds_type(PandaNode const *self);

#if INDEX
#define PandaNode_C_get_bounds_type_p_p PandaNode$164$get_bounds_type
#endif

// C++ _inCAAAAAQ3k(BoundingVolume const *volume) ==> PandaNode$_$set_bounds(PandaNode *param0, BoundingVolume const *param1)(PandaNode *, BoundingVolume const *)
extern void PandaNode$165$set_bounds(PandaNode *self, BoundingVolume const *volume);

#if INDEX
#define PandaNode_C_set_bounds_v_pp PandaNode$165$set_bounds
#endif

// C++ _inCAAAAphxO(BoundingVolume const *volume) ==> PandaNode$_$set_bound(PandaNode *param0, BoundingVolume const *param1)(PandaNode *, BoundingVolume const *)
extern void PandaNode$166$set_bound(PandaNode *self, BoundingVolume const *volume);

#if INDEX
#define PandaNode_C_set_bound_v_pp PandaNode$166$set_bound
#endif

// C++ _inCAAAAzkwy() ==> PandaNode$_$clear_bounds(PandaNode *param0)(PandaNode *)
extern void PandaNode$167$clear_bounds(PandaNode *self);

#if INDEX
#define PandaNode_C_clear_bounds_v_p PandaNode$167$clear_bounds
#endif

// C++ _inCAAAADKe6(Thread *current_thread) ==> PandaNode$_$get_bounds(PandaNode const *param0, Thread *param1)(PandaNode const *, Thread *)
extern char ** PandaNode$168$get_bounds(PandaNode const *self, Thread *current_thread);

#if INDEX
#define PandaNode_C_get_bounds_p_pp PandaNode$168$get_bounds
#endif

// C++ _inCAAAA9E3v() ==> PandaNode$_$get_bounds(PandaNode const *param0)(PandaNode const *)
extern char ** PandaNode$169$get_bounds(PandaNode const *self);

#if INDEX
#define PandaNode_C_get_bounds_p_p PandaNode$169$get_bounds
#endif

// C++ _inCAAAAmNRe(UpdateSeq &seq, Thread *current_thread) ==> PandaNode$_$get_bounds(PandaNode const *param0, UpdateSeq *param1, Thread *param2)(PandaNode const *, UpdateSeq *, Thread *)
extern char ** PandaNode$170$get_bounds(PandaNode const *self, UpdateSeq *seq, Thread *current_thread);

#if INDEX
#define PandaNode_C_get_bounds_p_ppp PandaNode$170$get_bounds
#endif

// C++ _inCAAAA9yDH(UpdateSeq &seq) ==> PandaNode$_$get_bounds(PandaNode const *param0, UpdateSeq *param1)(PandaNode const *, UpdateSeq *)
extern char ** PandaNode$171$get_bounds(PandaNode const *self, UpdateSeq *seq);
// COLLISION : PandaNode_C_get_bounds_p_pp PandaNode$171$get_bounds

// C++ _inCAAAAauzv(Thread *current_thread) ==> PandaNode$_$get_nested_vertices(PandaNode const *param0, Thread *param1)(PandaNode const *, Thread *)
extern int PandaNode$172$get_nested_vertices(PandaNode const *self, Thread *current_thread);

#if INDEX
#define PandaNode_C_get_nested_vertices_i_pp PandaNode$172$get_nested_vertices
#endif

// C++ _inCAAAARfeu() ==> PandaNode$_$get_nested_vertices(PandaNode const *param0)(PandaNode const *)
extern int PandaNode$173$get_nested_vertices(PandaNode const *self);

#if INDEX
#define PandaNode_C_get_nested_vertices_i_p PandaNode$173$get_nested_vertices
#endif

// C++ _inCAAAAxMGh(Thread *current_thread) ==> PandaNode$_$get_internal_bounds(PandaNode const *param0, Thread *param1)(PandaNode const *, Thread *)
extern char ** PandaNode$174$get_internal_bounds(PandaNode const *self, Thread *current_thread);

#if INDEX
#define PandaNode_C_get_internal_bounds_p_pp PandaNode$174$get_internal_bounds
#endif

// C++ _inCAAAAjqxf() ==> PandaNode$_$get_internal_bounds(PandaNode const *param0)(PandaNode const *)
extern char ** PandaNode$175$get_internal_bounds(PandaNode const *self);

#if INDEX
#define PandaNode_C_get_internal_bounds_p_p PandaNode$175$get_internal_bounds
#endif

// C++ _inCAAAAOmTK(Thread *current_thread) ==> PandaNode$_$get_internal_vertices(PandaNode const *param0, Thread *param1)(PandaNode const *, Thread *)
extern int PandaNode$176$get_internal_vertices(PandaNode const *self, Thread *current_thread);

#if INDEX
#define PandaNode_C_get_internal_vertices_i_pp PandaNode$176$get_internal_vertices
#endif

// C++ _inCAAAAxQZ2() ==> PandaNode$_$get_internal_vertices(PandaNode const *param0)(PandaNode const *)
extern int PandaNode$177$get_internal_vertices(PandaNode const *self);

#if INDEX
#define PandaNode_C_get_internal_vertices_i_p PandaNode$177$get_internal_vertices
#endif

// C++ _inCAAAAIbN9(Thread *current_thread) ==> PandaNode$_$mark_bounds_stale(PandaNode const *param0, Thread *param1)(PandaNode const *, Thread *)
extern void PandaNode$178$mark_bounds_stale(PandaNode const *self, Thread *current_thread);

#if INDEX
#define PandaNode_C_mark_bounds_stale_v_pp PandaNode$178$mark_bounds_stale
#endif

// C++ _inCAAAAddK_() ==> PandaNode$_$mark_bounds_stale(PandaNode const *param0)(PandaNode const *)
extern void PandaNode$179$mark_bounds_stale(PandaNode const *self);

#if INDEX
#define PandaNode_C_mark_bounds_stale_v_p PandaNode$179$mark_bounds_stale
#endif

// C++ _inCAAAAl4WP(Thread *current_thread) ==> PandaNode$_$mark_internal_bounds_stale(PandaNode *param0, Thread *param1)(PandaNode *, Thread *)
extern void PandaNode$180$mark_internal_bounds_stale(PandaNode *self, Thread *current_thread);

#if INDEX
#define PandaNode_C_mark_internal_bounds_stale_v_pp PandaNode$180$mark_internal_bounds_stale
#endif

// C++ _inCAAAApy5K() ==> PandaNode$_$mark_internal_bounds_stale(PandaNode *param0)(PandaNode *)
extern void PandaNode$181$mark_internal_bounds_stale(PandaNode *self);

#if INDEX
#define PandaNode_C_mark_internal_bounds_stale_v_p PandaNode$181$mark_internal_bounds_stale
#endif

// C++ _inCAAAA8mxQ() ==> PandaNode$_$is_bounds_stale(PandaNode const *param0)(PandaNode const *)
extern bool PandaNode$182$is_bounds_stale(PandaNode const *self);

#if INDEX
#define PandaNode_C_is_bounds_stale_B_p PandaNode$182$is_bounds_stale
#endif

// C++ _inCAAAAfUw8(bool flag) ==> PandaNode$_$set_final(PandaNode *param0, bool param1)(PandaNode *, bool)
extern void PandaNode$183$set_final(PandaNode *self, bool flag);

#if INDEX
#define PandaNode_C_set_final_v_pB PandaNode$183$set_final
#endif

// C++ _inCAAAAitT8(Thread *current_thread) ==> PandaNode$_$is_final(PandaNode const *param0, Thread *param1)(PandaNode const *, Thread *)
extern bool PandaNode$184$is_final(PandaNode const *self, Thread *current_thread);

#if INDEX
#define PandaNode_C_is_final_B_pp PandaNode$184$is_final
#endif

// C++ _inCAAAA8p0D() ==> PandaNode$_$is_final(PandaNode const *param0)(PandaNode const *)
extern bool PandaNode$185$is_final(PandaNode const *self);

#if INDEX
#define PandaNode_C_is_final_B_p PandaNode$185$is_final
#endif

// C++ _inCAAAAxAx3() ==> PandaNode$_$is_geom_node(PandaNode const *param0)(PandaNode const *)
extern bool PandaNode$186$is_geom_node(PandaNode const *self);

#if INDEX
#define PandaNode_C_is_geom_node_B_p PandaNode$186$is_geom_node
#endif

// C++ _inCAAAAhW8z() ==> PandaNode$_$is_lod_node(PandaNode const *param0)(PandaNode const *)
extern bool PandaNode$187$is_lod_node(PandaNode const *self);

#if INDEX
#define PandaNode_C_is_lod_node_B_p PandaNode$187$is_lod_node
#endif

// C++ _inCAAAA5usX() ==> PandaNode$_$is_collision_node(PandaNode const *param0)(PandaNode const *)
extern bool PandaNode$188$is_collision_node(PandaNode const *self);

#if INDEX
#define PandaNode_C_is_collision_node_B_p PandaNode$188$is_collision_node
#endif

// C++ _inCAAAAbCbs() ==> PandaNode$_$as_light(PandaNode *param0)(PandaNode *)
extern Light * PandaNode$189$as_light(PandaNode *self);

#if INDEX
#define PandaNode_C_as_light_p_p PandaNode$189$as_light
#endif

// C++ _inCAAAAz1Gk() ==> PandaNode$_$is_ambient_light(PandaNode const *param0)(PandaNode const *)
extern bool PandaNode$190$is_ambient_light(PandaNode const *self);

#if INDEX
#define PandaNode_C_is_ambient_light_B_p PandaNode$190$is_ambient_light
#endif

// C++ _inCAAAAoTW8(Thread *current_thread) ==> PandaNode$_$get_fancy_bits(PandaNode const *param0, Thread *param1)(PandaNode const *, Thread *)
extern int PandaNode$191$get_fancy_bits(PandaNode const *self, Thread *current_thread);

#if INDEX
#define PandaNode_C_get_fancy_bits_i_pp PandaNode$191$get_fancy_bits
#endif

// C++ _inCAAAAnxtb() ==> PandaNode$_$get_fancy_bits(PandaNode const *param0)(PandaNode const *)
extern int PandaNode$192$get_fancy_bits(PandaNode const *self);

#if INDEX
#define PandaNode_C_get_fancy_bits_i_p PandaNode$192$get_fancy_bits
#endif

// C++ _inCAAAAPxIY(vector_uchar data, BamReader *reader) ==> PandaNode$_$decode_from_bam_stream(vector_uchar param0, BamReader *param1)(vector_uchar, BamReader *)
extern char ** PandaNode$193$decode_from_bam_stream(vector_uchar data, BamReader *reader);

#if INDEX
#define PandaNode_C_decode_from_bam_stream_p_pp PandaNode$193$decode_from_bam_stream
#endif

// C++ _inCAAAAGt4Y(vector_uchar data) ==> PandaNode$_$decode_from_bam_stream(vector_uchar param0)(vector_uchar)
extern char ** PandaNode$194$decode_from_bam_stream(vector_uchar data);

#if INDEX
#define PandaNode_C_decode_from_bam_stream_p_p PandaNode$194$decode_from_bam_stream
#endif

// C++ _inCAAAAbIrU(GraphicsStateGuardianBase *gsg, RenderState const *node_state, GeomTransformer &transformer, Thread *current_thread) ==> PandaNode$_$r_prepare_scene(PandaNode *param0, GraphicsStateGuardianBase *param1, RenderState const *param2, GeomTransformer *param3, Thread *param4)(PandaNode *, GraphicsStateGuardianBase *, RenderState const *, GeomTransformer *, Thread *)
extern void PandaNode$195$r_prepare_scene(PandaNode *self, GraphicsStateGuardianBase *gsg, RenderState const *node_state, GeomTransformer *transformer, Thread *current_thread);

#if INDEX
#define PandaNode_C_r_prepare_scene_v_ppppp PandaNode$195$r_prepare_scene
#endif

// C++ _inCAAAA_Mhk(Thread *current_thread) ==> PandaNode$_$get_children(PandaNode const *param0, Thread *param1)(PandaNode const *, Thread *)
extern PandaNode$_Children * PandaNode$196$get_children(PandaNode const *self, Thread *current_thread);

#if INDEX
#define PandaNode_C_get_children_p_pp PandaNode$196$get_children
#endif

// C++ _inCAAAABn_E() ==> PandaNode$_$get_children(PandaNode const *param0)(PandaNode const *)
extern PandaNode$_Children * PandaNode$197$get_children(PandaNode const *self);

#if INDEX
#define PandaNode_C_get_children_p_p PandaNode$197$get_children
#endif

// C++ _inCAAAAD3JQ(Thread *current_thread) ==> PandaNode$_$get_parents(PandaNode const *param0, Thread *param1)(PandaNode const *, Thread *)
extern PandaNode$_Parents * PandaNode$198$get_parents(PandaNode const *self, Thread *current_thread);

#if INDEX
#define PandaNode_C_get_parents_p_pp PandaNode$198$get_parents
#endif

// C++ _inCAAAA7eN7() ==> PandaNode$_$get_parents(PandaNode const *param0)(PandaNode const *)
extern PandaNode$_Parents * PandaNode$199$get_parents(PandaNode const *self);

#if INDEX
#define PandaNode_C_get_parents_p_p PandaNode$199$get_parents
#endif

// C++ _inCAAAAixvn() ==> PandaNode$_$register_with_read_factory()()
extern void PandaNode$200$register_with_read_factory(void);

#if INDEX
#define PandaNode_C_register_with_read_factory_v_v PandaNode$200$register_with_read_factory
#endif

// C++ _inCAAAAZIxB(BamWriter *manager, Datagram &dg) ==> PandaNode$_$write_datagram(PandaNode *param0, BamWriter *param1, Datagram *param2)(PandaNode *, BamWriter *, Datagram *)
extern void PandaNode$201$write_datagram(PandaNode *self, BamWriter *manager, Datagram *dg);

#if INDEX
#define PandaNode_C_write_datagram_v_ppp PandaNode$201$write_datagram
#endif

// C++ _inCAAAA6DZU(BamWriter *manager) ==> PandaNode$_$update_bam_nested(PandaNode *param0, BamWriter *param1)(PandaNode *, BamWriter *)
extern void PandaNode$202$update_bam_nested(PandaNode *self, BamWriter *manager);

#if INDEX
#define PandaNode_C_update_bam_nested_v_pp PandaNode$202$update_bam_nested
#endif

// C++ _inCAAAAB3Ta(BamWriter *manager, Datagram &dg) ==> PandaNode$_$write_recorder(PandaNode *param0, BamWriter *param1, Datagram *param2)(PandaNode *, BamWriter *, Datagram *)
extern void PandaNode$203$write_recorder(PandaNode *self, BamWriter *manager, Datagram *dg);

#if INDEX
#define PandaNode_C_write_recorder_v_ppp PandaNode$203$write_recorder
#endif

// C++ _inCAAAA6Ap_() ==> PandaNode$_$get_class_type()()
extern int PandaNode$204$get_class_type(void);

#if INDEX
#define PandaNode_C_get_class_type_i_v PandaNode$204$get_class_type
#endif

// C++ _inCAAAAlwrO() ==> PandaNode$_$init_type()()
extern void PandaNode$205$init_type(void);

#if INDEX
#define PandaNode_C_init_type_v_v PandaNode$205$init_type
#endif

// C++ _inCAAAAZbhg() ==> PandaNode$_$get_type(PandaNode const *param0)(PandaNode const *)
extern int PandaNode$206$get_type(PandaNode const *self);

#if INDEX
#define PandaNode_C_get_type_i_p PandaNode$206$get_type
#endif

// C++ _inCAAAANJzF() ==> PandaNode$_$force_init_type(PandaNode *param0)(PandaNode *)
extern int PandaNode$207$force_init_type(PandaNode *self);

#if INDEX
#define PandaNode_C_force_init_type_i_p PandaNode$207$force_init_type
#endif

// C++ _inCAAAA9k_x() ==> PandaNode$_$downcast_to_TextNode(PandaNode *param0)(PandaNode *)
extern TextNode * PandaNode$208$downcast_to_TextNode(PandaNode *self);

#if INDEX
#define PandaNode_C_downcast_to_TextNode_p_p PandaNode$208$downcast_to_TextNode
#endif


// PandaSystem

// C++ _inCAAAATzDo() ==> PandaSystem$_$get_version_string()()
extern char const * PandaSystem$1$get_version_string(void);

#if INDEX
#define PandaSystem_C_get_version_string_s_v PandaSystem$1$get_version_string
#endif

// C++ _inCAAAAlpKc() ==> PandaSystem$_$get_major_version()()
extern int PandaSystem$2$get_major_version(void);

#if INDEX
#define PandaSystem_C_get_major_version_i_v PandaSystem$2$get_major_version
#endif

// C++ _inCAAAAB4NU() ==> PandaSystem$_$get_minor_version()()
extern int PandaSystem$3$get_minor_version(void);

#if INDEX
#define PandaSystem_C_get_minor_version_i_v PandaSystem$3$get_minor_version
#endif

// C++ _inCAAAAoXlJ() ==> PandaSystem$_$get_sequence_version()()
extern int PandaSystem$4$get_sequence_version(void);

#if INDEX
#define PandaSystem_C_get_sequence_version_i_v PandaSystem$4$get_sequence_version
#endif

// C++ _inCAAAACKGJ() ==> PandaSystem$_$is_official_version()()
extern bool PandaSystem$5$is_official_version(void);

#if INDEX
#define PandaSystem_C_is_official_version_B_v PandaSystem$5$is_official_version
#endif

// C++ _inCAAAA_9Ms() ==> PandaSystem$_$get_memory_alignment()()
extern int PandaSystem$6$get_memory_alignment(void);

#if INDEX
#define PandaSystem_C_get_memory_alignment_i_v PandaSystem$6$get_memory_alignment
#endif

// C++ _inCAAAAu2tG() ==> PandaSystem$_$get_distributor()()
extern char const * PandaSystem$7$get_distributor(void);

#if INDEX
#define PandaSystem_C_get_distributor_s_v PandaSystem$7$get_distributor
#endif

// C++ _inCAAAAcM8j() ==> PandaSystem$_$get_compiler()()
extern char const * PandaSystem$8$get_compiler(void);

#if INDEX
#define PandaSystem_C_get_compiler_s_v PandaSystem$8$get_compiler
#endif

// C++ _inCAAAAPPs0() ==> PandaSystem$_$get_build_date()()
extern char const * PandaSystem$9$get_build_date(void);

#if INDEX
#define PandaSystem_C_get_build_date_s_v PandaSystem$9$get_build_date
#endif

// C++ _inCAAAAxlmj() ==> PandaSystem$_$get_git_commit()()
extern char const * PandaSystem$10$get_git_commit(void);

#if INDEX
#define PandaSystem_C_get_git_commit_s_v PandaSystem$10$get_git_commit
#endif

// C++ _inCAAAA9Y1A() ==> PandaSystem$_$get_platform()()
extern char const * PandaSystem$11$get_platform(void);

#if INDEX
#define PandaSystem_C_get_platform_s_v PandaSystem$11$get_platform
#endif

// C++ _inCAAAAMn7K(std::string const &system) ==> PandaSystem$_$has_system(PandaSystem const *param0, char const *param1)(PandaSystem const *, char const *)
extern bool PandaSystem$12$has_system(PandaSystem const *self, char const *system);

#if INDEX
#define PandaSystem_C_has_system_B_ps PandaSystem$12$has_system
#endif

// C++ _inCAAAAcMuF() ==> PandaSystem$_$get_num_systems(PandaSystem const *param0)(PandaSystem const *)
extern std$_size_t PandaSystem$13$get_num_systems(PandaSystem const *self);

#if INDEX
#define PandaSystem_C_get_num_systems_l_p PandaSystem$13$get_num_systems
#endif

// C++ _inCAAAATSlk(std::size_t n) ==> PandaSystem$_$get_system(PandaSystem const *param0, std::size_t param1)(PandaSystem const *, std::size_t)
extern char const * PandaSystem$14$get_system(PandaSystem const *self, std$_size_t n);

#if INDEX
#define PandaSystem_C_get_system_s_pl PandaSystem$14$get_system
#endif

// C++ _inCAAAAv2z_(std::string const &system, std::string const &tag) ==> PandaSystem$_$get_system_tag(PandaSystem const *param0, char const *param1, char const *param2)(PandaSystem const *, char const *, char const *)
extern char const * PandaSystem$15$get_system_tag(PandaSystem const *self, char const *system, char const *tag);

#if INDEX
#define PandaSystem_C_get_system_tag_s_pss PandaSystem$15$get_system_tag
#endif

// C++ _inCAAAAu_FG(std::string const &system) ==> PandaSystem$_$add_system(PandaSystem *param0, char const *param1)(PandaSystem *, char const *)
extern void PandaSystem$16$add_system(PandaSystem *self, char const *system);

#if INDEX
#define PandaSystem_C_add_system_v_ps PandaSystem$16$add_system
#endif

// C++ _inCAAAA3vBP(std::string const &system, std::string const &tag, std::string const &value) ==> PandaSystem$_$set_system_tag(PandaSystem *param0, char const *param1, char const *param2, char const *param3)(PandaSystem *, char const *, char const *, char const *)
extern void PandaSystem$17$set_system_tag(PandaSystem *self, char const *system, char const *tag, char const *value);

#if INDEX
#define PandaSystem_C_set_system_tag_v_psss PandaSystem$17$set_system_tag
#endif

// C++ _inCAAAAp7d3(std::size_t pad) ==> PandaSystem$_$heap_trim(PandaSystem *param0, std::size_t param1)(PandaSystem *, std::size_t)
extern bool PandaSystem$18$heap_trim(PandaSystem *self, std$_size_t pad);

#if INDEX
#define PandaSystem_C_heap_trim_B_pl PandaSystem$18$heap_trim
#endif

// C++ _inCAAAAcfNj(std::ostream &out) ==> PandaSystem$_$output(PandaSystem const *param0, std::ostream *param1)(PandaSystem const *, std::ostream *)
extern void PandaSystem$19$output(PandaSystem const *self, std$_ostream *out);

#if INDEX
#define PandaSystem_C_output_v_pp PandaSystem$19$output
#endif

// C++ _inCAAAA__e5(std::ostream &out) ==> PandaSystem$_$write(PandaSystem const *param0, std::ostream *param1)(PandaSystem const *, std::ostream *)
extern void PandaSystem$20$write(PandaSystem const *self, std$_ostream *out);

#if INDEX
#define PandaSystem_C_write_v_pp PandaSystem$20$write
#endif

// C++ _inCAAAAF_U4() ==> PandaSystem$_$get_global_ptr()()
extern PandaSystem * PandaSystem$21$get_global_ptr(void);

#if INDEX
#define PandaSystem_C_get_global_ptr_p_v PandaSystem$21$get_global_ptr
#endif

// C++ _inCAAAAO5cE() ==> PandaSystem$_$get_class_type()()
extern int PandaSystem$22$get_class_type(void);

#if INDEX
#define PandaSystem_C_get_class_type_i_v PandaSystem$22$get_class_type
#endif

// C++ _inCAAAAx_BK() ==> PandaSystem$_$init_type()()
extern void PandaSystem$23$init_type(void);

#if INDEX
#define PandaSystem_C_init_type_v_v PandaSystem$23$init_type
#endif


// ReferenceCount

// C++ _inCAAAA5zFh() ==> ReferenceCount$_$upcast_to_MemoryBase(ReferenceCount *param0)(ReferenceCount *)
extern MemoryBase * ReferenceCount$1$upcast_to_MemoryBase(ReferenceCount *self);

#if INDEX
#define ReferenceCount_C_upcast_to_MemoryBase_p_p ReferenceCount$1$upcast_to_MemoryBase
#endif

// C++ _inCAAAAP11_() ==> ReferenceCount$_$get_ref_count(ReferenceCount const *param0)(ReferenceCount const *)
extern int ReferenceCount$2$get_ref_count(ReferenceCount const *self);

#if INDEX
#define ReferenceCount_C_get_ref_count_i_p ReferenceCount$2$get_ref_count
#endif

// C++ _inCAAAAaS5_() ==> ReferenceCount$_$ref(ReferenceCount const *param0)(ReferenceCount const *)
extern void ReferenceCount$3$ref(ReferenceCount const *self);

#if INDEX
#define ReferenceCount_C_ref_v_p ReferenceCount$3$ref
#endif

// C++ _inCAAAAwyVy() ==> ReferenceCount$_$unref(ReferenceCount const *param0)(ReferenceCount const *)
extern bool ReferenceCount$4$unref(ReferenceCount const *self);

#if INDEX
#define ReferenceCount_C_unref_B_p ReferenceCount$4$unref
#endif

// C++ _inCAAAAvpj2() ==> ReferenceCount$_$test_ref_count_integrity(ReferenceCount const *param0)(ReferenceCount const *)
extern bool ReferenceCount$5$test_ref_count_integrity(ReferenceCount const *self);

#if INDEX
#define ReferenceCount_C_test_ref_count_integrity_B_p ReferenceCount$5$test_ref_count_integrity
#endif

// C++ _inCAAAAtT6g() ==> ReferenceCount$_$test_ref_count_nonzero(ReferenceCount const *param0)(ReferenceCount const *)
extern bool ReferenceCount$6$test_ref_count_nonzero(ReferenceCount const *self);

#if INDEX
#define ReferenceCount_C_test_ref_count_nonzero_B_p ReferenceCount$6$test_ref_count_nonzero
#endif

// C++ _inCAAAATZpk() ==> ReferenceCount$_$local_object(ReferenceCount *param0)(ReferenceCount *)
extern void ReferenceCount$7$local_object(ReferenceCount *self);

#if INDEX
#define ReferenceCount_C_local_object_v_p ReferenceCount$7$local_object
#endif

// C++ _inCAAAALXVj() ==> ReferenceCount$_$has_weak_list(ReferenceCount const *param0)(ReferenceCount const *)
extern bool ReferenceCount$8$has_weak_list(ReferenceCount const *self);

#if INDEX
#define ReferenceCount_C_has_weak_list_B_p ReferenceCount$8$has_weak_list
#endif

// C++ _inCAAAAjKVW() ==> ReferenceCount$_$get_weak_list(ReferenceCount const *param0)(ReferenceCount const *)
extern WeakReferenceList * ReferenceCount$9$get_weak_list(ReferenceCount const *self);

#if INDEX
#define ReferenceCount_C_get_weak_list_p_p ReferenceCount$9$get_weak_list
#endif

// C++ _inCAAAADxOx() ==> ReferenceCount$_$weak_ref(ReferenceCount *param0)(ReferenceCount *)
extern WeakReferenceList * ReferenceCount$10$weak_ref(ReferenceCount *self);

#if INDEX
#define ReferenceCount_C_weak_ref_p_p ReferenceCount$10$weak_ref
#endif

// C++ _inCAAAALN15() ==> ReferenceCount$_$weak_unref(ReferenceCount *param0)(ReferenceCount *)
extern void ReferenceCount$11$weak_unref(ReferenceCount *self);

#if INDEX
#define ReferenceCount_C_weak_unref_v_p ReferenceCount$11$weak_unref
#endif

// C++ _inCAAAA5NW5() ==> ReferenceCount$_$ref_if_nonzero(ReferenceCount const *param0)(ReferenceCount const *)
extern bool ReferenceCount$12$ref_if_nonzero(ReferenceCount const *self);

#if INDEX
#define ReferenceCount_C_ref_if_nonzero_B_p ReferenceCount$12$ref_if_nonzero
#endif

// C++ _inCAAAAoEaY() ==> ReferenceCount$_$unref_if_one(ReferenceCount const *param0)(ReferenceCount const *)
extern bool ReferenceCount$13$unref_if_one(ReferenceCount const *self);

#if INDEX
#define ReferenceCount_C_unref_if_one_B_p ReferenceCount$13$unref_if_one
#endif

// C++ _inCAAAAn3ZO() ==> ReferenceCount$_$get_class_type()()
extern int ReferenceCount$14$get_class_type(void);

#if INDEX
#define ReferenceCount_C_get_class_type_i_v ReferenceCount$14$get_class_type
#endif

// C++ _inCAAAAssbs() ==> ReferenceCount$_$init_type()()
extern void ReferenceCount$15$init_type(void);

#if INDEX
#define ReferenceCount_C_init_type_v_v ReferenceCount$15$init_type
#endif

// C++ _inCAAAAYaNv() ==> ReferenceCount$_$downcast_to_GeomVertexArrayDataHandle(ReferenceCount *param0)(ReferenceCount *)
extern GeomVertexArrayDataHandle * ReferenceCount$16$downcast_to_GeomVertexArrayDataHandle(ReferenceCount *self);

#if INDEX
#define ReferenceCount_C_downcast_to_GeomVertexArrayDataHandle_p_p ReferenceCount$16$downcast_to_GeomVertexArrayDataHandle
#endif


// RenderEffect

// C++ _inCAAAA3gZk() ==> RenderEffect$_$safe_to_transform(RenderEffect const *param0)(RenderEffect const *)
extern bool RenderEffect$1$safe_to_transform(RenderEffect const *self);

#if INDEX
#define RenderEffect_C_safe_to_transform_B_p RenderEffect$1$safe_to_transform
#endif

// C++ _inCAAAApIlC(TransformState const *net_transform) ==> RenderEffect$_$prepare_flatten_transform(RenderEffect const *param0, TransformState const *param1)(RenderEffect const *, TransformState const *)
extern char ** RenderEffect$2$prepare_flatten_transform(RenderEffect const *self, TransformState const *net_transform);

#if INDEX
#define RenderEffect_C_prepare_flatten_transform_p_pp RenderEffect$2$prepare_flatten_transform
#endif

// C++ _inCAAAAWhOL() ==> RenderEffect$_$safe_to_combine(RenderEffect const *param0)(RenderEffect const *)
extern bool RenderEffect$3$safe_to_combine(RenderEffect const *self);

#if INDEX
#define RenderEffect_C_safe_to_combine_B_p RenderEffect$3$safe_to_combine
#endif

// C++ _inCAAAALtWD(LMatrix4 const &mat) ==> RenderEffect$_$xform(RenderEffect const *param0, LMatrix4 const *param1)(RenderEffect const *, LMatrix4 const *)
extern char ** RenderEffect$4$xform(RenderEffect const *self, LMatrix4 const *mat);

#if INDEX
#define RenderEffect_C_xform_p_pp RenderEffect$4$xform
#endif

// C++ _inCAAAATb6Y() ==> RenderEffect$_$has_cull_callback(RenderEffect const *param0)(RenderEffect const *)
extern bool RenderEffect$5$has_cull_callback(RenderEffect const *self);

#if INDEX
#define RenderEffect_C_has_cull_callback_B_p RenderEffect$5$has_cull_callback
#endif

// C++ _inCAAAA_7JB(CullTraverser *trav, CullTraverserData &data, ConstPointerTo< TransformState > &node_transform, ConstPointerTo< RenderState > &node_state) ==> RenderEffect$_$cull_callback(RenderEffect const *param0, CullTraverser *param1, CullTraverserData *param2, ConstPointerTo< TransformState > *param3, ConstPointerTo< RenderState > *param4)(RenderEffect const *, CullTraverser *, CullTraverserData *, ConstPointerTo< TransformState > *, ConstPointerTo< RenderState > *)
extern void RenderEffect$6$cull_callback(RenderEffect const *self, CullTraverser *trav, CullTraverserData *data, char **node_transform, char **node_state);

#if INDEX
#define RenderEffect_C_cull_callback_v_ppppp RenderEffect$6$cull_callback
#endif

// C++ _inCAAAAVo28() ==> RenderEffect$_$has_adjust_transform(RenderEffect const *param0)(RenderEffect const *)
extern bool RenderEffect$7$has_adjust_transform(RenderEffect const *self);

#if INDEX
#define RenderEffect_C_has_adjust_transform_B_p RenderEffect$7$has_adjust_transform
#endif

// C++ _inCAAAAfn1n(ConstPointerTo< TransformState > &net_transform, ConstPointerTo< TransformState > &node_transform, PandaNode const *node) ==> RenderEffect$_$adjust_transform(RenderEffect const *param0, ConstPointerTo< TransformState > *param1, ConstPointerTo< TransformState > *param2, PandaNode const *param3)(RenderEffect const *, ConstPointerTo< TransformState > *, ConstPointerTo< TransformState > *, PandaNode const *)
extern void RenderEffect$8$adjust_transform(RenderEffect const *self, char **net_transform, char **node_transform, PandaNode const *node);

#if INDEX
#define RenderEffect_C_adjust_transform_v_pppp RenderEffect$8$adjust_transform
#endif

// C++ _inCAAAAZvzD(RenderEffect const &other) ==> RenderEffect$_$compare_to(RenderEffect const *param0, RenderEffect const *param1)(RenderEffect const *, RenderEffect const *)
extern int RenderEffect$9$compare_to(RenderEffect const *self, RenderEffect const *other);

#if INDEX
#define RenderEffect_C_compare_to_i_pp RenderEffect$9$compare_to
#endif

// C++ _inCAAAAuTcF(std::ostream &out) ==> RenderEffect$_$output(RenderEffect const *param0, std::ostream *param1)(RenderEffect const *, std::ostream *)
extern void RenderEffect$10$output(RenderEffect const *self, std$_ostream *out);

#if INDEX
#define RenderEffect_C_output_v_pp RenderEffect$10$output
#endif

// C++ _inCAAAAvVQe(std::ostream &out, int indent_level) ==> RenderEffect$_$write(RenderEffect const *param0, std::ostream *param1, int param2)(RenderEffect const *, std::ostream *, int)
extern void RenderEffect$11$write(RenderEffect const *self, std$_ostream *out, int indent_level);

#if INDEX
#define RenderEffect_C_write_v_ppi RenderEffect$11$write
#endif

// C++ _inCAAAAvz2e() ==> RenderEffect$_$get_num_effects()()
extern int RenderEffect$12$get_num_effects(void);

#if INDEX
#define RenderEffect_C_get_num_effects_i_v RenderEffect$12$get_num_effects
#endif

// C++ _inCAAAAxoWw(std::ostream &out) ==> RenderEffect$_$list_effects(std::ostream *param0)(std::ostream *)
extern void RenderEffect$13$list_effects(std$_ostream *out);

#if INDEX
#define RenderEffect_C_list_effects_v_p RenderEffect$13$list_effects
#endif

// C++ _inCAAAALUB_() ==> RenderEffect$_$validate_effects()()
extern bool RenderEffect$14$validate_effects(void);

#if INDEX
#define RenderEffect_C_validate_effects_B_v RenderEffect$14$validate_effects
#endif

// C++ _inCAAAAgoCa(BamWriter *manager, Datagram &dg) ==> RenderEffect$_$write_datagram(RenderEffect *param0, BamWriter *param1, Datagram *param2)(RenderEffect *, BamWriter *, Datagram *)
extern void RenderEffect$15$write_datagram(RenderEffect *self, BamWriter *manager, Datagram *dg);

#if INDEX
#define RenderEffect_C_write_datagram_v_ppp RenderEffect$15$write_datagram
#endif

// C++ _inCAAAAPNYY(TypedWritable *old_ptr, BamReader *manager) ==> RenderEffect$_$change_this(TypedWritable *param0, BamReader *param1)(TypedWritable *, BamReader *)
extern TypedWritable * RenderEffect$16$change_this(TypedWritable *old_ptr, BamReader *manager);

#if INDEX
#define RenderEffect_C_change_this_p_pp RenderEffect$16$change_this
#endif

// C++ _inCAAAAxZ_O(BamReader *manager) ==> RenderEffect$_$finalize(RenderEffect *param0, BamReader *param1)(RenderEffect *, BamReader *)
extern void RenderEffect$17$finalize(RenderEffect *self, BamReader *manager);

#if INDEX
#define RenderEffect_C_finalize_v_pp RenderEffect$17$finalize
#endif

// C++ _inCAAAA3Lms() ==> RenderEffect$_$get_class_type()()
extern int RenderEffect$18$get_class_type(void);

#if INDEX
#define RenderEffect_C_get_class_type_i_v RenderEffect$18$get_class_type
#endif

// C++ _inCAAAAWfie() ==> RenderEffect$_$init_type()()
extern void RenderEffect$19$init_type(void);

#if INDEX
#define RenderEffect_C_init_type_v_v RenderEffect$19$init_type
#endif

// C++ _inCAAAA2eDP() ==> RenderEffect$_$get_type(RenderEffect const *param0)(RenderEffect const *)
extern int RenderEffect$20$get_type(RenderEffect const *self);

#if INDEX
#define RenderEffect_C_get_type_i_p RenderEffect$20$get_type
#endif

// C++ _inCAAAACEW6() ==> RenderEffect$_$force_init_type(RenderEffect *param0)(RenderEffect *)
extern int RenderEffect$21$force_init_type(RenderEffect *self);

#if INDEX
#define RenderEffect_C_force_init_type_i_p RenderEffect$21$force_init_type
#endif


// RenderState

// C++ _inCAAAAtw5H(RenderState const &other) ==> RenderState$_$compare_to(RenderState const *param0, RenderState const *param1)(RenderState const *, RenderState const *)
extern int RenderState$1$compare_to(RenderState const *self, RenderState const *other);

#if INDEX
#define RenderState_C_compare_to_i_pp RenderState$1$compare_to
#endif

// C++ _inCAAAAfAFv(RenderState const &other) ==> RenderState$_$compare_sort(RenderState const *param0, RenderState const *param1)(RenderState const *, RenderState const *)
extern int RenderState$2$compare_sort(RenderState const *self, RenderState const *other);

#if INDEX
#define RenderState_C_compare_sort_i_pp RenderState$2$compare_sort
#endif

// C++ _inCAAAAFWTs(RenderState const &other, RenderState::SlotMask compare_mask) ==> RenderState$_$compare_mask(RenderState const *param0, RenderState const *param1, RenderState::SlotMask *param2)(RenderState const *, RenderState const *, RenderState::SlotMask *)
extern int RenderState$3$compare_mask(RenderState const *self, RenderState const *other, RenderState$_SlotMask *compare_mask);

#if INDEX
#define RenderState_C_compare_mask_i_ppp RenderState$3$compare_mask
#endif

// C++ _inCAAAAxGYM() ==> RenderState$_$get_hash(RenderState const *param0)(RenderState const *)
extern std$_size_t RenderState$4$get_hash(RenderState const *self);

#if INDEX
#define RenderState_C_get_hash_l_p RenderState$4$get_hash
#endif

// C++ _inCAAAAbG0o() ==> RenderState$_$is_empty(RenderState const *param0)(RenderState const *)
extern bool RenderState$5$is_empty(RenderState const *self);

#if INDEX
#define RenderState_C_is_empty_B_p RenderState$5$is_empty
#endif

// C++ _inCAAAA8NWA() ==> RenderState$_$has_cull_callback(RenderState const *param0)(RenderState const *)
extern bool RenderState$6$has_cull_callback(RenderState const *self);

#if INDEX
#define RenderState_C_has_cull_callback_B_p RenderState$6$has_cull_callback
#endif

// C++ _inCAAAA8pTl(CullTraverser *trav, CullTraverserData const &data) ==> RenderState$_$cull_callback(RenderState const *param0, CullTraverser *param1, CullTraverserData const *param2)(RenderState const *, CullTraverser *, CullTraverserData const *)
extern bool RenderState$7$cull_callback(RenderState const *self, CullTraverser *trav, CullTraverserData const *data);

#if INDEX
#define RenderState_C_cull_callback_B_ppp RenderState$7$cull_callback
#endif

// C++ _inCAAAAGuHJ() ==> RenderState$_$make_empty()()
extern char ** RenderState$8$make_empty(void);

#if INDEX
#define RenderState_C_make_empty_p_v RenderState$8$make_empty
#endif

// C++ _inCAAAAPEg_(RenderAttrib const *attrib1, RenderAttrib const *attrib2, RenderAttrib const *attrib3, RenderAttrib const *attrib4, RenderAttrib const *attrib5, int override) ==> RenderState$_$make(RenderAttrib const *param0, RenderAttrib const *param1, RenderAttrib const *param2, RenderAttrib const *param3, RenderAttrib const *param4, int param5)(RenderAttrib const *, RenderAttrib const *, RenderAttrib const *, RenderAttrib const *, RenderAttrib const *, int)
extern char ** RenderState$9$make(RenderAttrib const *attrib1, RenderAttrib const *attrib2, RenderAttrib const *attrib3, RenderAttrib const *attrib4, RenderAttrib const *attrib5, int override);

#if INDEX
#define RenderState_C_make_p_pppppi RenderState$9$make
#endif

// C++ _inCAAAAk6LE(RenderAttrib const *attrib1, RenderAttrib const *attrib2, RenderAttrib const *attrib3, RenderAttrib const *attrib4, RenderAttrib const *attrib5) ==> RenderState$_$make(RenderAttrib const *param0, RenderAttrib const *param1, RenderAttrib const *param2, RenderAttrib const *param3, RenderAttrib const *param4)(RenderAttrib const *, RenderAttrib const *, RenderAttrib const *, RenderAttrib const *, RenderAttrib const *)
extern char ** RenderState$10$make(RenderAttrib const *attrib1, RenderAttrib const *attrib2, RenderAttrib const *attrib3, RenderAttrib const *attrib4, RenderAttrib const *attrib5);

#if INDEX
#define RenderState_C_make_p_ppppp RenderState$10$make
#endif

// C++ _inCAAAARRYz(RenderAttrib const *attrib1, RenderAttrib const *attrib2, RenderAttrib const *attrib3, RenderAttrib const *attrib4, int override) ==> RenderState$_$make(RenderAttrib const *param0, RenderAttrib const *param1, RenderAttrib const *param2, RenderAttrib const *param3, int param4)(RenderAttrib const *, RenderAttrib const *, RenderAttrib const *, RenderAttrib const *, int)
extern char ** RenderState$11$make(RenderAttrib const *attrib1, RenderAttrib const *attrib2, RenderAttrib const *attrib3, RenderAttrib const *attrib4, int override);

#if INDEX
#define RenderState_C_make_p_ppppi RenderState$11$make
#endif

// C++ _inCAAAAjeWF(RenderAttrib const *attrib1, RenderAttrib const *attrib2, RenderAttrib const *attrib3, RenderAttrib const *attrib4) ==> RenderState$_$make(RenderAttrib const *param0, RenderAttrib const *param1, RenderAttrib const *param2, RenderAttrib const *param3)(RenderAttrib const *, RenderAttrib const *, RenderAttrib const *, RenderAttrib const *)
extern char ** RenderState$12$make(RenderAttrib const *attrib1, RenderAttrib const *attrib2, RenderAttrib const *attrib3, RenderAttrib const *attrib4);

#if INDEX
#define RenderState_C_make_p_pppp RenderState$12$make
#endif

// C++ _inCAAAAK6X3(RenderAttrib const *attrib1, RenderAttrib const *attrib2, RenderAttrib const *attrib3, int override) ==> RenderState$_$make(RenderAttrib const *param0, RenderAttrib const *param1, RenderAttrib const *param2, int param3)(RenderAttrib const *, RenderAttrib const *, RenderAttrib const *, int)
extern char ** RenderState$13$make(RenderAttrib const *attrib1, RenderAttrib const *attrib2, RenderAttrib const *attrib3, int override);

#if INDEX
#define RenderState_C_make_p_pppi RenderState$13$make
#endif

// C++ _inCAAAAbtvX(RenderAttrib const *attrib1, RenderAttrib const *attrib2, RenderAttrib const *attrib3) ==> RenderState$_$make(RenderAttrib const *param0, RenderAttrib const *param1, RenderAttrib const *param2)(RenderAttrib const *, RenderAttrib const *, RenderAttrib const *)
extern char ** RenderState$14$make(RenderAttrib const *attrib1, RenderAttrib const *attrib2, RenderAttrib const *attrib3);

#if INDEX
#define RenderState_C_make_p_ppp RenderState$14$make
#endif

// C++ _inCAAAAu7vK(RenderAttrib const *attrib1, RenderAttrib const *attrib2, int override) ==> RenderState$_$make(RenderAttrib const *param0, RenderAttrib const *param1, int param2)(RenderAttrib const *, RenderAttrib const *, int)
extern char ** RenderState$15$make(RenderAttrib const *attrib1, RenderAttrib const *attrib2, int override);

#if INDEX
#define RenderState_C_make_p_ppi RenderState$15$make
#endif

// C++ _inCAAAASK5z(RenderAttrib const *attrib1, RenderAttrib const *attrib2) ==> RenderState$_$make(RenderAttrib const *param0, RenderAttrib const *param1)(RenderAttrib const *, RenderAttrib const *)
extern char ** RenderState$16$make(RenderAttrib const *attrib1, RenderAttrib const *attrib2);

#if INDEX
#define RenderState_C_make_p_pp RenderState$16$make
#endif

// C++ _inCAAAAiqB_(RenderAttrib const *attrib, int override) ==> RenderState$_$make(RenderAttrib const *param0, int param1)(RenderAttrib const *, int)
extern char ** RenderState$17$make(RenderAttrib const *attrib, int override);

#if INDEX
#define RenderState_C_make_p_pi RenderState$17$make
#endif

// C++ _inCAAAAT9E9(RenderAttrib const *attrib) ==> RenderState$_$make(RenderAttrib const *param0)(RenderAttrib const *)
extern char ** RenderState$18$make(RenderAttrib const *attrib);

#if INDEX
#define RenderState_C_make_p_p RenderState$18$make
#endif

// C++ _inCAAAAsYED(RenderState const *other) ==> RenderState$_$compose(RenderState const *param0, RenderState const *param1)(RenderState const *, RenderState const *)
extern char ** RenderState$19$compose(RenderState const *self, RenderState const *other);

#if INDEX
#define RenderState_C_compose_p_pp RenderState$19$compose
#endif

// C++ _inCAAAA_7EZ(RenderState const *other) ==> RenderState$_$invert_compose(RenderState const *param0, RenderState const *param1)(RenderState const *, RenderState const *)
extern char ** RenderState$20$invert_compose(RenderState const *self, RenderState const *other);

#if INDEX
#define RenderState_C_invert_compose_p_pp RenderState$20$invert_compose
#endif

// C++ _inCAAAAMVE4(RenderAttrib const *attrib, int override) ==> RenderState$_$add_attrib(RenderState const *param0, RenderAttrib const *param1, int param2)(RenderState const *, RenderAttrib const *, int)
extern char ** RenderState$21$add_attrib(RenderState const *self, RenderAttrib const *attrib, int override);

#if INDEX
#define RenderState_C_add_attrib_p_ppi RenderState$21$add_attrib
#endif

// C++ _inCAAAAyvO6(RenderAttrib const *attrib) ==> RenderState$_$add_attrib(RenderState const *param0, RenderAttrib const *param1)(RenderState const *, RenderAttrib const *)
extern char ** RenderState$22$add_attrib(RenderState const *self, RenderAttrib const *attrib);

#if INDEX
#define RenderState_C_add_attrib_p_pp RenderState$22$add_attrib
#endif

// C++ _inCAAAATzrr(RenderAttrib const *attrib) ==> RenderState$_$set_attrib(RenderState const *param0, RenderAttrib const *param1)(RenderState const *, RenderAttrib const *)
extern char ** RenderState$23$set_attrib(RenderState const *self, RenderAttrib const *attrib);

#if INDEX
#define RenderState_C_set_attrib_p_pp RenderState$23$set_attrib
#endif

// C++ _inCAAAAtlgp(RenderAttrib const *attrib, int override) ==> RenderState$_$set_attrib(RenderState const *param0, RenderAttrib const *param1, int param2)(RenderState const *, RenderAttrib const *, int)
extern char ** RenderState$24$set_attrib(RenderState const *self, RenderAttrib const *attrib, int override);

#if INDEX
#define RenderState_C_set_attrib_p_ppi RenderState$24$set_attrib
#endif

// C++ _inCAAAAyYRK(TypeHandle type) ==> RenderState$_$remove_attrib(RenderState const *param0, int param1)(RenderState const *, int)
extern char ** RenderState$25$remove_attrib(RenderState const *self, int type);

#if INDEX
#define RenderState_C_remove_attrib_p_pi RenderState$25$remove_attrib
#endif

// C++ _inCAAAAfoiT(int slot) ==> RenderState$_$remove_attrib(RenderState const *param0, int param1)(RenderState const *, int)
extern char ** RenderState$26$remove_attrib(RenderState const *self, int slot);
// COLLISION : RenderState_C_remove_attrib_p_pi RenderState$26$remove_attrib

// C++ _inCAAAA_mZy(int adjustment) ==> RenderState$_$adjust_all_priorities(RenderState const *param0, int param1)(RenderState const *, int)
extern char ** RenderState$27$adjust_all_priorities(RenderState const *self, int adjustment);

#if INDEX
#define RenderState_C_adjust_all_priorities_p_pi RenderState$27$adjust_all_priorities
#endif

// C++ _inCAAAA2r9x(TypeHandle type) ==> RenderState$_$has_attrib(RenderState const *param0, int param1)(RenderState const *, int)
extern bool RenderState$28$has_attrib(RenderState const *self, int type);

#if INDEX
#define RenderState_C_has_attrib_B_pi RenderState$28$has_attrib
#endif

// C++ _inCAAAAuEau(int slot) ==> RenderState$_$has_attrib(RenderState const *param0, int param1)(RenderState const *, int)
extern bool RenderState$29$has_attrib(RenderState const *self, int slot);
// COLLISION : RenderState_C_has_attrib_B_pi RenderState$29$has_attrib

// C++ _inCAAAAQqmu(TypeHandle type) ==> RenderState$_$get_attrib(RenderState const *param0, int param1)(RenderState const *, int)
extern RenderAttrib const * RenderState$30$get_attrib(RenderState const *self, int type);

#if INDEX
#define RenderState_C_get_attrib_p_pi RenderState$30$get_attrib
#endif

// C++ _inCAAAAUEFr(int slot) ==> RenderState$_$get_attrib(RenderState const *param0, int param1)(RenderState const *, int)
extern RenderAttrib const * RenderState$31$get_attrib(RenderState const *self, int slot);
// COLLISION : RenderState_C_get_attrib_p_pi RenderState$31$get_attrib

// C++ _inCAAAAo_W5(int slot) ==> RenderState$_$get_attrib_def(RenderState const *param0, int param1)(RenderState const *, int)
extern RenderAttrib const * RenderState$32$get_attrib_def(RenderState const *self, int slot);

#if INDEX
#define RenderState_C_get_attrib_def_p_pi RenderState$32$get_attrib_def
#endif

// C++ _inCAAAAuZNq(TypeHandle type) ==> RenderState$_$get_override(RenderState const *param0, int param1)(RenderState const *, int)
extern int RenderState$33$get_override(RenderState const *self, int type);

#if INDEX
#define RenderState_C_get_override_i_pi RenderState$33$get_override
#endif

// C++ _inCAAAAbchm(int slot) ==> RenderState$_$get_override(RenderState const *param0, int param1)(RenderState const *, int)
extern int RenderState$34$get_override(RenderState const *self, int slot);
// COLLISION : RenderState_C_get_override_i_pi RenderState$34$get_override

// C++ _inCAAAA9oPR() ==> RenderState$_$get_unique(RenderState const *param0)(RenderState const *)
extern char ** RenderState$35$get_unique(RenderState const *self);

#if INDEX
#define RenderState_C_get_unique_p_p RenderState$35$get_unique
#endif

// C++ _inCAAAArMAG() ==> RenderState$_$cache_ref(RenderState const *param0)(RenderState const *)
extern void RenderState$36$cache_ref(RenderState const *self);

#if INDEX
#define RenderState_C_cache_ref_v_p RenderState$36$cache_ref
#endif

// C++ _inCAAAAK_kx() ==> RenderState$_$cache_unref(RenderState const *param0)(RenderState const *)
extern bool RenderState$37$cache_unref(RenderState const *self);

#if INDEX
#define RenderState_C_cache_unref_B_p RenderState$37$cache_unref
#endif

// C++ _inCAAAAlWCY() ==> RenderState$_$node_ref(RenderState const *param0)(RenderState const *)
extern void RenderState$38$node_ref(RenderState const *self);

#if INDEX
#define RenderState_C_node_ref_v_p RenderState$38$node_ref
#endif

// C++ _inCAAAAVnZl() ==> RenderState$_$node_unref(RenderState const *param0)(RenderState const *)
extern bool RenderState$39$node_unref(RenderState const *self);

#if INDEX
#define RenderState_C_node_unref_B_p RenderState$39$node_unref
#endif

// C++ _inCAAAATur9() ==> RenderState$_$get_composition_cache_num_entries(RenderState const *param0)(RenderState const *)
extern std$_size_t RenderState$40$get_composition_cache_num_entries(RenderState const *self);

#if INDEX
#define RenderState_C_get_composition_cache_num_entries_l_p RenderState$40$get_composition_cache_num_entries
#endif

// C++ _inCAAAAGL_W() ==> RenderState$_$get_invert_composition_cache_num_entries(RenderState const *param0)(RenderState const *)
extern std$_size_t RenderState$41$get_invert_composition_cache_num_entries(RenderState const *self);

#if INDEX
#define RenderState_C_get_invert_composition_cache_num_entries_l_p RenderState$41$get_invert_composition_cache_num_entries
#endif

// C++ _inCAAAAvxQh() ==> RenderState$_$get_composition_cache_size(RenderState const *param0)(RenderState const *)
extern std$_size_t RenderState$42$get_composition_cache_size(RenderState const *self);

#if INDEX
#define RenderState_C_get_composition_cache_size_l_p RenderState$42$get_composition_cache_size
#endif

// C++ _inCAAAARKsy(std::size_t n) ==> RenderState$_$get_composition_cache_source(RenderState const *param0, std::size_t param1)(RenderState const *, std::size_t)
extern RenderState const * RenderState$43$get_composition_cache_source(RenderState const *self, std$_size_t n);

#if INDEX
#define RenderState_C_get_composition_cache_source_p_pl RenderState$43$get_composition_cache_source
#endif

// C++ _inCAAAAVby2(std::size_t n) ==> RenderState$_$get_composition_cache_result(RenderState const *param0, std::size_t param1)(RenderState const *, std::size_t)
extern RenderState const * RenderState$44$get_composition_cache_result(RenderState const *self, std$_size_t n);

#if INDEX
#define RenderState_C_get_composition_cache_result_p_pl RenderState$44$get_composition_cache_result
#endif

// C++ _inCAAAAs0y1() ==> RenderState$_$get_invert_composition_cache_size(RenderState const *param0)(RenderState const *)
extern std$_size_t RenderState$45$get_invert_composition_cache_size(RenderState const *self);

#if INDEX
#define RenderState_C_get_invert_composition_cache_size_l_p RenderState$45$get_invert_composition_cache_size
#endif

// C++ _inCAAAATU4o(std::size_t n) ==> RenderState$_$get_invert_composition_cache_source(RenderState const *param0, std::size_t param1)(RenderState const *, std::size_t)
extern RenderState const * RenderState$46$get_invert_composition_cache_source(RenderState const *self, std$_size_t n);

#if INDEX
#define RenderState_C_get_invert_composition_cache_source_p_pl RenderState$46$get_invert_composition_cache_source
#endif

// C++ _inCAAAAXcaM(std::size_t n) ==> RenderState$_$get_invert_composition_cache_result(RenderState const *param0, std::size_t param1)(RenderState const *, std::size_t)
extern RenderState const * RenderState$47$get_invert_composition_cache_result(RenderState const *self, std$_size_t n);

#if INDEX
#define RenderState_C_get_invert_composition_cache_result_p_pl RenderState$47$get_invert_composition_cache_result
#endif

// C++ _inCAAAAsQsV(std::ostream &out) ==> RenderState$_$output(RenderState const *param0, std::ostream *param1)(RenderState const *, std::ostream *)
extern void RenderState$48$output(RenderState const *self, std$_ostream *out);

#if INDEX
#define RenderState_C_output_v_pp RenderState$48$output
#endif

// C++ _inCAAAAwidi(std::ostream &out, int indent_level) ==> RenderState$_$write(RenderState const *param0, std::ostream *param1, int param2)(RenderState const *, std::ostream *, int)
extern void RenderState$49$write(RenderState const *self, std$_ostream *out, int indent_level);

#if INDEX
#define RenderState_C_write_v_ppi RenderState$49$write
#endif

// C++ _inCAAAAV3mc() ==> RenderState$_$get_max_priority()()
extern int RenderState$50$get_max_priority(void);

#if INDEX
#define RenderState_C_get_max_priority_i_v RenderState$50$get_max_priority
#endif

// C++ _inCAAAASXJI() ==> RenderState$_$get_num_states()()
extern int RenderState$51$get_num_states(void);

#if INDEX
#define RenderState_C_get_num_states_i_v RenderState$51$get_num_states
#endif

// C++ _inCAAAAB8ph() ==> RenderState$_$get_num_unused_states()()
extern int RenderState$52$get_num_unused_states(void);

#if INDEX
#define RenderState_C_get_num_unused_states_i_v RenderState$52$get_num_unused_states
#endif

// C++ _inCAAAAfP1U() ==> RenderState$_$clear_cache()()
extern int RenderState$53$clear_cache(void);

#if INDEX
#define RenderState_C_clear_cache_i_v RenderState$53$clear_cache
#endif

// C++ _inCAAAAMpuX() ==> RenderState$_$clear_munger_cache()()
extern void RenderState$54$clear_munger_cache(void);

#if INDEX
#define RenderState_C_clear_munger_cache_v_v RenderState$54$clear_munger_cache
#endif

// C++ _inCAAAAGhmY() ==> RenderState$_$garbage_collect()()
extern int RenderState$55$garbage_collect(void);

#if INDEX
#define RenderState_C_garbage_collect_i_v RenderState$55$garbage_collect
#endif

// C++ _inCAAAAzmYN(std::ostream &out) ==> RenderState$_$list_cycles(std::ostream *param0)(std::ostream *)
extern void RenderState$56$list_cycles(std$_ostream *out);

#if INDEX
#define RenderState_C_list_cycles_v_p RenderState$56$list_cycles
#endif

// C++ _inCAAAA8l1q(std::ostream &out) ==> RenderState$_$list_states(std::ostream *param0)(std::ostream *)
extern void RenderState$57$list_states(std$_ostream *out);

#if INDEX
#define RenderState_C_list_states_v_p RenderState$57$list_states
#endif

// C++ _inCAAAAYm1k() ==> RenderState$_$validate_states()()
extern bool RenderState$58$validate_states(void);

#if INDEX
#define RenderState_C_validate_states_B_v RenderState$58$validate_states
#endif

// C++ _inCAAAAwxn3() ==> RenderState$_$get_draw_order(RenderState const *param0)(RenderState const *)
extern int RenderState$59$get_draw_order(RenderState const *self);

#if INDEX
#define RenderState_C_get_draw_order_i_p RenderState$59$get_draw_order
#endif

// C++ _inCAAAAP6sb() ==> RenderState$_$get_bin_index(RenderState const *param0)(RenderState const *)
extern int RenderState$60$get_bin_index(RenderState const *self);

#if INDEX
#define RenderState_C_get_bin_index_i_p RenderState$60$get_bin_index
#endif

// C++ _inCAAAAaUkU(int geom_rendering) ==> RenderState$_$get_geom_rendering(RenderState const *param0, int param1)(RenderState const *, int)
extern int RenderState$61$get_geom_rendering(RenderState const *self, int geom_rendering);

#if INDEX
#define RenderState_C_get_geom_rendering_i_pi RenderState$61$get_geom_rendering
#endif

// C++ _inCAAAAMQFW(int bin_index) ==> RenderState$_$bin_removed(int param0)(int)
extern void RenderState$62$bin_removed(int bin_index);

#if INDEX
#define RenderState_C_bin_removed_v_i RenderState$62$bin_removed
#endif

// C++ _inCAAAAU3_y() ==> RenderState$_$flush_level()()
extern void RenderState$63$flush_level(void);

#if INDEX
#define RenderState_C_flush_level_v_v RenderState$63$flush_level
#endif

// C++ _inCAAAA_GVl() ==> RenderState$_$cache_ref_only(RenderState const *param0)(RenderState const *)
extern void RenderState$64$cache_ref_only(RenderState const *self);

#if INDEX
#define RenderState_C_cache_ref_only_v_p RenderState$64$cache_ref_only
#endif

// C++ _inCAAAANu47() ==> RenderState$_$init_states()()
extern void RenderState$65$init_states(void);

#if INDEX
#define RenderState_C_init_states_v_v RenderState$65$init_states
#endif

// C++ _inCAAAACFbT() ==> RenderState$_$get_generated_shader(RenderState const *param0)(RenderState const *)
extern char * RenderState$66$get_generated_shader(RenderState const *self);

#if INDEX
#define RenderState_C_get_generated_shader_p_p RenderState$66$get_generated_shader
#endif

// C++ _inCAAAAQScJ() ==> RenderState$_$get_generated_shader_seq(RenderState const *param0)(RenderState const *)
extern UpdateSeq const * RenderState$67$get_generated_shader_seq(RenderState const *self);

#if INDEX
#define RenderState_C_get_generated_shader_seq_p_p RenderState$67$get_generated_shader_seq
#endif

// C++ _inCAAAAy5yg() ==> RenderState$_$register_with_read_factory()()
extern void RenderState$68$register_with_read_factory(void);

#if INDEX
#define RenderState_C_register_with_read_factory_v_v RenderState$68$register_with_read_factory
#endif

// C++ _inCAAAAJwXK(BamWriter *manager, Datagram &dg) ==> RenderState$_$write_datagram(RenderState *param0, BamWriter *param1, Datagram *param2)(RenderState *, BamWriter *, Datagram *)
extern void RenderState$69$write_datagram(RenderState *self, BamWriter *manager, Datagram *dg);

#if INDEX
#define RenderState_C_write_datagram_v_ppp RenderState$69$write_datagram
#endif

// C++ _inCAAAAurSi(TypedWritable *old_ptr, BamReader *manager) ==> RenderState$_$change_this(TypedWritable *param0, BamReader *param1)(TypedWritable *, BamReader *)
extern TypedWritable * RenderState$70$change_this(TypedWritable *old_ptr, BamReader *manager);

#if INDEX
#define RenderState_C_change_this_p_pp RenderState$70$change_this
#endif

// C++ _inCAAAA_DEs(BamReader *manager) ==> RenderState$_$finalize(RenderState *param0, BamReader *param1)(RenderState *, BamReader *)
extern void RenderState$71$finalize(RenderState *self, BamReader *manager);

#if INDEX
#define RenderState_C_finalize_v_pp RenderState$71$finalize
#endif

// C++ _inCAAAAF592() ==> RenderState$_$get_class_type()()
extern int RenderState$72$get_class_type(void);

#if INDEX
#define RenderState_C_get_class_type_i_v RenderState$72$get_class_type
#endif

// C++ _inCAAAAOHi8() ==> RenderState$_$init_type()()
extern void RenderState$73$init_type(void);

#if INDEX
#define RenderState_C_init_type_v_v RenderState$73$init_type
#endif

// C++ _inCAAAAFaFm() ==> RenderState$_$get_type(RenderState const *param0)(RenderState const *)
extern int RenderState$74$get_type(RenderState const *self);

#if INDEX
#define RenderState_C_get_type_i_p RenderState$74$get_type
#endif

// C++ _inCAAAAcXYD() ==> RenderState$_$force_init_type(RenderState *param0)(RenderState *)
extern int RenderState$75$force_init_type(RenderState *self);

#if INDEX
#define RenderState_C_force_init_type_i_p RenderState$75$force_init_type
#endif


// Shader

// C++ _inCAAAAlkb4(Filename const &file, Shader::ShaderLanguage lang) ==> Shader$_$load(Filename const *param0, Shader::ShaderLanguage param1)(Filename const *, Shader::ShaderLanguage)
extern char ** Shader$1$load(Filename const *file, Shader$_ShaderLanguage lang);

#if INDEX
#define Shader_C_load_p_pp Shader$1$load
#endif

// C++ _inCAAAAJQgeyebf(Filename const &file) ==> Shader$_$load(Filename const *param0)(Filename const *)
extern char ** Shader$2$load(Filename const *file);

#if INDEX
#define Shader_C_load_p_p Shader$2$load
#endif

// C++ _inCAAAAcNl2(Shader::ShaderLanguage lang, Filename const &vertex, Filename const &fragment, Filename const &geometry, Filename const &tess_control, Filename const &tess_evaluation) ==> Shader$_$load(Shader::ShaderLanguage param0, Filename const *param1, Filename const *param2, Filename const *param3, Filename const *param4, Filename const *param5)(Shader::ShaderLanguage, Filename const *, Filename const *, Filename const *, Filename const *, Filename const *)
extern char ** Shader$3$load(Shader$_ShaderLanguage lang, Filename const *vertex, Filename const *fragment, Filename const *geometry, Filename const *tess_control, Filename const *tess_evaluation);

#if INDEX
#define Shader_C_load_p_pppppp Shader$3$load
#endif

// C++ _inCAAAABaKU(Shader::ShaderLanguage lang, Filename const &vertex, Filename const &fragment, Filename const &geometry, Filename const &tess_control) ==> Shader$_$load(Shader::ShaderLanguage param0, Filename const *param1, Filename const *param2, Filename const *param3, Filename const *param4)(Shader::ShaderLanguage, Filename const *, Filename const *, Filename const *, Filename const *)
extern char ** Shader$4$load(Shader$_ShaderLanguage lang, Filename const *vertex, Filename const *fragment, Filename const *geometry, Filename const *tess_control);

#if INDEX
#define Shader_C_load_p_ppppp Shader$4$load
#endif

// C++ _inCAAAAHylL(Shader::ShaderLanguage lang, Filename const &vertex, Filename const &fragment, Filename const &geometry) ==> Shader$_$load(Shader::ShaderLanguage param0, Filename const *param1, Filename const *param2, Filename const *param3)(Shader::ShaderLanguage, Filename const *, Filename const *, Filename const *)
extern char ** Shader$5$load(Shader$_ShaderLanguage lang, Filename const *vertex, Filename const *fragment, Filename const *geometry);

#if INDEX
#define Shader_C_load_p_pppp Shader$5$load
#endif

// C++ _inCAAAA7Ee5(Shader::ShaderLanguage lang, Filename const &vertex, Filename const &fragment) ==> Shader$_$load(Shader::ShaderLanguage param0, Filename const *param1, Filename const *param2)(Shader::ShaderLanguage, Filename const *, Filename const *)
extern char ** Shader$6$load(Shader$_ShaderLanguage lang, Filename const *vertex, Filename const *fragment);

#if INDEX
#define Shader_C_load_p_ppp Shader$6$load
#endif

// C++ _inCAAAAJQns(Shader::ShaderLanguage lang, std::string vertex, std::string fragment, std::string geometry, std::string tess_control, std::string tess_evaluation) ==> Shader$_$make(Shader::ShaderLanguage param0, char const *param1, char const *param2, char const *param3, char const *param4, char const *param5)(Shader::ShaderLanguage, char const *, char const *, char const *, char const *, char const *)
extern char ** Shader$7$make(Shader$_ShaderLanguage lang, char const *vertex, char const *fragment, char const *geometry, char const *tess_control, char const *tess_evaluation);

#if INDEX
#define Shader_C_make_p_psssss Shader$7$make
#endif

// C++ _inCAAAA6JBv(Shader::ShaderLanguage lang, std::string vertex, std::string fragment, std::string geometry, std::string tess_control) ==> Shader$_$make(Shader::ShaderLanguage param0, char const *param1, char const *param2, char const *param3, char const *param4)(Shader::ShaderLanguage, char const *, char const *, char const *, char const *)
extern char ** Shader$8$make(Shader$_ShaderLanguage lang, char const *vertex, char const *fragment, char const *geometry, char const *tess_control);

#if INDEX
#define Shader_C_make_p_pssss Shader$8$make
#endif

// C++ _inCAAAAPxke(Shader::ShaderLanguage lang, std::string vertex, std::string fragment, std::string geometry) ==> Shader$_$make(Shader::ShaderLanguage param0, char const *param1, char const *param2, char const *param3)(Shader::ShaderLanguage, char const *, char const *, char const *)
extern char ** Shader$9$make(Shader$_ShaderLanguage lang, char const *vertex, char const *fragment, char const *geometry);

#if INDEX
#define Shader_C_make_p_psss Shader$9$make
#endif

// C++ _inCAAAAyPee(Shader::ShaderLanguage lang, std::string vertex, std::string fragment) ==> Shader$_$make(Shader::ShaderLanguage param0, char const *param1, char const *param2)(Shader::ShaderLanguage, char const *, char const *)
extern char ** Shader$10$make(Shader$_ShaderLanguage lang, char const *vertex, char const *fragment);

#if INDEX
#define Shader_C_make_p_pss Shader$10$make
#endif

// C++ _inCAAAAfVW3(std::string body, Shader::ShaderLanguage lang) ==> Shader$_$make(char const *param0, Shader::ShaderLanguage param1)(char const *, Shader::ShaderLanguage)
extern char ** Shader$11$make(char const *body, Shader$_ShaderLanguage lang);

#if INDEX
#define Shader_C_make_p_sp Shader$11$make
#endif

// C++ _inCAAAAksXI(std::string body) ==> Shader$_$make(char const *param0)(char const *)
extern char ** Shader$12$make(char const *body);

#if INDEX
#define Shader_C_make_p_s Shader$12$make
#endif

// C++ _inCAAAAZRki(Shader::ShaderLanguage lang, Filename const &fn) ==> Shader$_$load_compute(Shader::ShaderLanguage param0, Filename const *param1)(Shader::ShaderLanguage, Filename const *)
extern char ** Shader$13$load_compute(Shader$_ShaderLanguage lang, Filename const *fn);

#if INDEX
#define Shader_C_load_compute_p_pp Shader$13$load_compute
#endif

// C++ _inCAAAAAl3T(Shader::ShaderLanguage lang, std::string body) ==> Shader$_$make_compute(Shader::ShaderLanguage param0, char const *param1)(Shader::ShaderLanguage, char const *)
extern char ** Shader$14$make_compute(Shader$_ShaderLanguage lang, char const *body);

#if INDEX
#define Shader_C_make_compute_p_ps Shader$14$make_compute
#endif

// C++ _inCAAAAz0qU(Shader::ShaderType type) ==> Shader$_$get_filename(Shader const *param0, Shader::ShaderType param1)(Shader const *, Shader::ShaderType)
extern Filename * Shader$15$get_filename(Shader const *self, Shader$_ShaderType type);

#if INDEX
#define Shader_C_get_filename_p_pp Shader$15$get_filename
#endif

// C++ _inCAAAAlNEW() ==> Shader$_$get_filename(Shader const *param0)(Shader const *)
extern Filename * Shader$16$get_filename(Shader const *self);

#if INDEX
#define Shader_C_get_filename_p_p Shader$16$get_filename
#endif

// C++ _inCAAAAzxUC(Shader::ShaderType type, Filename const &filename) ==> Shader$_$set_filename(Shader *param0, Shader::ShaderType param1, Filename const *param2)(Shader *, Shader::ShaderType, Filename const *)
extern void Shader$17$set_filename(Shader *self, Shader$_ShaderType type, Filename const *filename);

#if INDEX
#define Shader_C_set_filename_v_ppp Shader$17$set_filename
#endif

// C++ _inCAAAA_cue(Shader::ShaderType type) ==> Shader$_$get_text(Shader const *param0, Shader::ShaderType param1)(Shader const *, Shader::ShaderType)
extern char const * Shader$18$get_text(Shader const *self, Shader$_ShaderType type);

#if INDEX
#define Shader_C_get_text_s_pp Shader$18$get_text
#endif

// C++ _inCAAAAdfN0() ==> Shader$_$get_text(Shader const *param0)(Shader const *)
extern char const * Shader$19$get_text(Shader const *self);

#if INDEX
#define Shader_C_get_text_s_p Shader$19$get_text
#endif

// C++ _inCAAAAcUW2() ==> Shader$_$get_error_flag(Shader const *param0)(Shader const *)
extern bool Shader$20$get_error_flag(Shader const *self);

#if INDEX
#define Shader_C_get_error_flag_B_p Shader$20$get_error_flag
#endif

// C++ _inCAAAAXpMn() ==> Shader$_$get_language(Shader const *param0)(Shader const *)
extern Shader$_ShaderLanguage Shader$21$get_language(Shader const *self);

#if INDEX
#define Shader_C_get_language_p_p Shader$21$get_language
#endif

// C++ _inCAAAAsvmd() ==> Shader$_$has_fullpath(Shader const *param0)(Shader const *)
extern bool Shader$22$has_fullpath(Shader const *self);

#if INDEX
#define Shader_C_has_fullpath_B_p Shader$22$has_fullpath
#endif

// C++ _inCAAAAAA7b() ==> Shader$_$get_fullpath(Shader const *param0)(Shader const *)
extern Filename const * Shader$23$get_fullpath(Shader const *self);

#if INDEX
#define Shader_C_get_fullpath_p_p Shader$23$get_fullpath
#endif

// C++ _inCAAAAPWQZ() ==> Shader$_$get_cache_compiled_shader(Shader const *param0)(Shader const *)
extern bool Shader$24$get_cache_compiled_shader(Shader const *self);

#if INDEX
#define Shader_C_get_cache_compiled_shader_B_p Shader$24$get_cache_compiled_shader
#endif

// C++ _inCAAAAISFa(bool flag) ==> Shader$_$set_cache_compiled_shader(Shader *param0, bool param1)(Shader *, bool)
extern void Shader$25$set_cache_compiled_shader(Shader *self, bool flag);

#if INDEX
#define Shader_C_set_cache_compiled_shader_v_pB Shader$25$set_cache_compiled_shader
#endif

// C++ _inCAAAA_Ayr(PreparedGraphicsObjects *prepared_objects) ==> Shader$_$prepare(Shader *param0, PreparedGraphicsObjects *param1)(Shader *, PreparedGraphicsObjects *)
extern char ** Shader$26$prepare(Shader *self, PreparedGraphicsObjects *prepared_objects);

#if INDEX
#define Shader_C_prepare_p_pp Shader$26$prepare
#endif

// C++ _inCAAAA5KiR(PreparedGraphicsObjects *prepared_objects) ==> Shader$_$is_prepared(Shader const *param0, PreparedGraphicsObjects *param1)(Shader const *, PreparedGraphicsObjects *)
extern bool Shader$27$is_prepared(Shader const *self, PreparedGraphicsObjects *prepared_objects);

#if INDEX
#define Shader_C_is_prepared_B_pp Shader$27$is_prepared
#endif

// C++ _inCAAAAnXbA(PreparedGraphicsObjects *prepared_objects) ==> Shader$_$release(Shader *param0, PreparedGraphicsObjects *param1)(Shader *, PreparedGraphicsObjects *)
extern bool Shader$28$release(Shader *self, PreparedGraphicsObjects *prepared_objects);

#if INDEX
#define Shader_C_release_B_pp Shader$28$release
#endif

// C++ _inCAAAAr_x5() ==> Shader$_$release_all(Shader *param0)(Shader *)
extern int Shader$29$release_all(Shader *self);

#if INDEX
#define Shader_C_release_all_i_p Shader$29$release_all
#endif

// C++ _inCAAAALkrK(PreparedGraphicsObjects *prepared_objects, GraphicsStateGuardianBase *gsg) ==> Shader$_$prepare_now(Shader *param0, PreparedGraphicsObjects *param1, GraphicsStateGuardianBase *param2)(Shader *, PreparedGraphicsObjects *, GraphicsStateGuardianBase *)
extern ShaderContext * Shader$30$prepare_now(Shader *self, PreparedGraphicsObjects *prepared_objects, GraphicsStateGuardianBase *gsg);

#if INDEX
#define Shader_C_prepare_now_p_ppp Shader$30$prepare_now
#endif

// C++ _inCAAAAGT7t() ==> Shader$_$parse_init(Shader *param0)(Shader *)
extern void Shader$31$parse_init(Shader *self);

#if INDEX
#define Shader_C_parse_init_v_p Shader$31$parse_init
#endif

// C++ _inCAAAAJCZl() ==> Shader$_$parse_eof(Shader *param0)(Shader *)
extern bool Shader$32$parse_eof(Shader *self);

#if INDEX
#define Shader_C_parse_eof_B_p Shader$32$parse_eof
#endif

// C++ _inCAAAAE6x1(Shader::ShaderArgInfo &arg, std::string const &msg) ==> Shader$_$cp_report_error(Shader *param0, Shader::ShaderArgInfo *param1, char const *param2)(Shader *, Shader::ShaderArgInfo *, char const *)
extern void Shader$33$cp_report_error(Shader *self, Shader$_ShaderArgInfo *arg, char const *msg);

#if INDEX
#define Shader_C_cp_report_error_v_pps Shader$33$cp_report_error
#endif

// C++ _inCAAAAMyxQ(Shader::ShaderArgInfo &arg, int len) ==> Shader$_$cp_errchk_parameter_words(Shader *param0, Shader::ShaderArgInfo *param1, int param2)(Shader *, Shader::ShaderArgInfo *, int)
extern bool Shader$34$cp_errchk_parameter_words(Shader *self, Shader$_ShaderArgInfo *arg, int len);

#if INDEX
#define Shader_C_cp_errchk_parameter_words_B_ppi Shader$34$cp_errchk_parameter_words
#endif

// C++ _inCAAAAZ4oC(Shader::ShaderArgInfo &arg) ==> Shader$_$cp_errchk_parameter_in(Shader *param0, Shader::ShaderArgInfo *param1)(Shader *, Shader::ShaderArgInfo *)
extern bool Shader$35$cp_errchk_parameter_in(Shader *self, Shader$_ShaderArgInfo *arg);

#if INDEX
#define Shader_C_cp_errchk_parameter_in_B_pp Shader$35$cp_errchk_parameter_in
#endif

// C++ _inCAAAAGDAc(Shader::ShaderArgInfo &p) ==> Shader$_$cp_errchk_parameter_ptr(Shader *param0, Shader::ShaderArgInfo *param1)(Shader *, Shader::ShaderArgInfo *)
extern bool Shader$36$cp_errchk_parameter_ptr(Shader *self, Shader$_ShaderArgInfo *p);

#if INDEX
#define Shader_C_cp_errchk_parameter_ptr_B_pp Shader$36$cp_errchk_parameter_ptr
#endif

// C++ _inCAAAAa7LC(Shader::ShaderArgInfo &arg) ==> Shader$_$cp_errchk_parameter_varying(Shader *param0, Shader::ShaderArgInfo *param1)(Shader *, Shader::ShaderArgInfo *)
extern bool Shader$37$cp_errchk_parameter_varying(Shader *self, Shader$_ShaderArgInfo *arg);

#if INDEX
#define Shader_C_cp_errchk_parameter_varying_B_pp Shader$37$cp_errchk_parameter_varying
#endif

// C++ _inCAAAA7Yog(Shader::ShaderArgInfo &arg) ==> Shader$_$cp_errchk_parameter_uniform(Shader *param0, Shader::ShaderArgInfo *param1)(Shader *, Shader::ShaderArgInfo *)
extern bool Shader$38$cp_errchk_parameter_uniform(Shader *self, Shader$_ShaderArgInfo *arg);

#if INDEX
#define Shader_C_cp_errchk_parameter_uniform_B_pp Shader$38$cp_errchk_parameter_uniform
#endif

// C++ _inCAAAA7ghf(Shader::ShaderArgInfo &arg, int lo, int hi) ==> Shader$_$cp_errchk_parameter_float(Shader *param0, Shader::ShaderArgInfo *param1, int param2, int param3)(Shader *, Shader::ShaderArgInfo *, int, int)
extern bool Shader$39$cp_errchk_parameter_float(Shader *self, Shader$_ShaderArgInfo *arg, int lo, int hi);

#if INDEX
#define Shader_C_cp_errchk_parameter_float_B_ppii Shader$39$cp_errchk_parameter_float
#endif

// C++ _inCAAAAuAr2(Shader::ShaderArgInfo &arg) ==> Shader$_$cp_errchk_parameter_sampler(Shader *param0, Shader::ShaderArgInfo *param1)(Shader *, Shader::ShaderArgInfo *)
extern bool Shader$40$cp_errchk_parameter_sampler(Shader *self, Shader$_ShaderArgInfo *arg);

#if INDEX
#define Shader_C_cp_errchk_parameter_sampler_B_pp Shader$40$cp_errchk_parameter_sampler
#endif

// C++ _inCAAAA9iLT(Shader::ShaderMatInput inp) ==> Shader$_$cp_dependency(Shader *param0, Shader::ShaderMatInput param1)(Shader *, Shader::ShaderMatInput)
extern int Shader$41$cp_dependency(Shader *self, Shader$_ShaderMatInput inp);

#if INDEX
#define Shader_C_cp_dependency_i_pp Shader$41$cp_dependency
#endif

// C++ _inCAAAACBVN(Shader::ShaderMatSpec &spec) ==> Shader$_$cp_add_mat_spec(Shader *param0, Shader::ShaderMatSpec *param1)(Shader *, Shader::ShaderMatSpec *)
extern void Shader$42$cp_add_mat_spec(Shader *self, Shader$_ShaderMatSpec *spec);

#if INDEX
#define Shader_C_cp_add_mat_spec_v_pp Shader$42$cp_add_mat_spec
#endif

// C++ _inCAAAAMU2N() ==> Shader$_$cp_get_mat_cache_size(Shader const *param0)(Shader const *)
extern std$_size_t Shader$43$cp_get_mat_cache_size(Shader const *self);

#if INDEX
#define Shader_C_cp_get_mat_cache_size_l_p Shader$43$cp_get_mat_cache_size
#endif

// C++ _inCAAAA4XWy() ==> Shader$_$clear_parameters(Shader *param0)(Shader *)
extern void Shader$44$clear_parameters(Shader *self);

#if INDEX
#define Shader_C_clear_parameters_v_p Shader$44$clear_parameters
#endif

// C++ _inCAAAAAbvN(unsigned int format, char const *data, std::size_t length) ==> Shader$_$set_compiled(Shader *param0, unsigned int param1, char const *param2, std::size_t param3)(Shader *, unsigned int, char const *, std::size_t)
extern void Shader$45$set_compiled(Shader *self, unsigned int format, char const *data, std$_size_t length);

#if INDEX
#define Shader_C_set_compiled_v_pIsl Shader$45$set_compiled
#endif

// C++ _inCAAAAdah5(Shader::ShaderCaps const &caps) ==> Shader$_$set_default_caps(Shader::ShaderCaps const *param0)(Shader::ShaderCaps const *)
extern void Shader$46$set_default_caps(Shader$_ShaderCaps const *caps);

#if INDEX
#define Shader_C_set_default_caps_v_p Shader$46$set_default_caps
#endif

// C++ _inCAAAAKDpg() ==> Shader$_$get_prepare_shader_pcollector(Shader *param0)(Shader *)
extern PStatCollector * Shader$47$get_prepare_shader_pcollector(Shader *self);

#if INDEX
#define Shader_C_get_prepare_shader_pcollector_p_p Shader$47$get_prepare_shader_pcollector
#endif

// C++ _inCAAAARb4N() ==> Shader$_$get_debug_name(Shader const *param0)(Shader const *)
extern char const * Shader$48$get_debug_name(Shader const *self);

#if INDEX
#define Shader_C_get_debug_name_s_p Shader$48$get_debug_name
#endif

// C++ _inCAAAAkWbw() ==> Shader$_$get_ptr_spec(Shader const *param0)(Shader const *)
extern char ** Shader$49$get_ptr_spec(Shader const *self);

#if INDEX
#define Shader_C_get_ptr_spec_p_p Shader$49$get_ptr_spec
#endif

// C++ _inCAAAATBpj() ==> Shader$_$get_mat_spec(Shader const *param0)(Shader const *)
extern char ** Shader$50$get_mat_spec(Shader const *self);

#if INDEX
#define Shader_C_get_mat_spec_p_p Shader$50$get_mat_spec
#endif

// C++ _inCAAAAXTbU() ==> Shader$_$get_tex_spec(Shader const *param0)(Shader const *)
extern char ** Shader$51$get_tex_spec(Shader const *self);

#if INDEX
#define Shader_C_get_tex_spec_p_p Shader$51$get_tex_spec
#endif

// C++ _inCAAAACqlC() ==> Shader$_$get_var_spec(Shader const *param0)(Shader const *)
extern char ** Shader$52$get_var_spec(Shader const *self);

#if INDEX
#define Shader_C_get_var_spec_p_p Shader$52$get_var_spec
#endif

// C++ _inCAAAAW95l() ==> Shader$_$get_mat_parts(Shader const *param0)(Shader const *)
extern char ** Shader$53$get_mat_parts(Shader const *self);

#if INDEX
#define Shader_C_get_mat_parts_p_p Shader$53$get_mat_parts
#endif

// C++ _inCAAAAaDIx() ==> Shader$_$get_mat_deps(Shader const *param0)(Shader const *)
extern int Shader$54$get_mat_deps(Shader const *self);

#if INDEX
#define Shader_C_get_mat_deps_i_p Shader$54$get_mat_deps
#endif

// C++ _inCAAAApCin(int value) ==> Shader$_$set_mat_deps(Shader *param0, int param1)(Shader *, int)
extern void Shader$55$set_mat_deps(Shader *self, int value);

#if INDEX
#define Shader_C_set_mat_deps_v_pi Shader$55$set_mat_deps
#endif

// C++ _inCAAAAJa0P() ==> Shader$_$get_mat_cache_size(Shader const *param0)(Shader const *)
extern int Shader$56$get_mat_cache_size(Shader const *self);

#if INDEX
#define Shader_C_get_mat_cache_size_i_p Shader$56$get_mat_cache_size
#endif

// C++ _inCAAAAUMk_(int value) ==> Shader$_$set_mat_cache_size(Shader *param0, int param1)(Shader *, int)
extern void Shader$57$set_mat_cache_size(Shader *self, int value);

#if INDEX
#define Shader_C_set_mat_cache_size_v_pi Shader$57$set_mat_cache_size
#endif

// C++ _inCAAAAqxty(bool value) ==> Shader$_$set_error_flag(Shader *param0, bool param1)(Shader *, bool)
extern void Shader$58$set_error_flag(Shader *self, bool value);

#if INDEX
#define Shader_C_set_error_flag_v_pB Shader$58$set_error_flag
#endif

// C++ _inCAAAAADEx(int index, Shader::ShaderType type) ==> Shader$_$get_filename_from_index(Shader const *param0, int param1, Shader::ShaderType param2)(Shader const *, int, Shader::ShaderType)
extern Filename * Shader$59$get_filename_from_index(Shader const *self, int index, Shader$_ShaderType type);

#if INDEX
#define Shader_C_get_filename_from_index_p_pip Shader$59$get_filename_from_index
#endif

// C++ _inCAAAAuCQ1() ==> Shader$_$register_with_read_factory()()
extern void Shader$60$register_with_read_factory(void);

#if INDEX
#define Shader_C_register_with_read_factory_v_v Shader$60$register_with_read_factory
#endif

// C++ _inCAAAAQmAK(BamWriter *manager, Datagram &dg) ==> Shader$_$write_datagram(Shader *param0, BamWriter *param1, Datagram *param2)(Shader *, BamWriter *, Datagram *)
extern void Shader$61$write_datagram(Shader *self, BamWriter *manager, Datagram *dg);

#if INDEX
#define Shader_C_write_datagram_v_ppp Shader$61$write_datagram
#endif

// C++ _inCAAAAshVA() ==> Shader$_$get_class_type()()
extern int Shader$62$get_class_type(void);

#if INDEX
#define Shader_C_get_class_type_i_v Shader$62$get_class_type
#endif

// C++ _inCAAAAtdID() ==> Shader$_$init_type()()
extern void Shader$63$init_type(void);

#if INDEX
#define Shader_C_init_type_v_v Shader$63$init_type
#endif

// C++ _inCAAAAKK43() ==> Shader$_$get_type(Shader const *param0)(Shader const *)
extern int Shader$64$get_type(Shader const *self);

#if INDEX
#define Shader_C_get_type_i_p Shader$64$get_type
#endif

// C++ _inCAAAA4qkG() ==> Shader$_$force_init_type(Shader *param0)(Shader *)
extern int Shader$65$force_init_type(Shader *self);

#if INDEX
#define Shader_C_force_init_type_i_p Shader$65$force_init_type
#endif

// C++ _inCAAAAGVBG(Shader const &) ==> Shader$_$Shader(Shader const *param0)(Shader const *)
extern Shader * Shader$66$Shader(Shader const *arg0);

#if INDEX
#define Shader_C_ctor_p_p Shader$66$Shader
#endif


// ShaderInput

// C++ _inCAAAAB963() ==> ShaderInput$_$get_blank()()
extern ShaderInput const * ShaderInput$1$get_blank(void);

#if INDEX
#define ShaderInput_C_get_blank_p_v ShaderInput$1$get_blank
#endif

// C++ _inCAAAAztM0() ==> ShaderInput$_$ShaderInput()()
extern ShaderInput * ShaderInput$2$ShaderInput(void);

#if INDEX
#define ShaderInput_C_ctor_p_v ShaderInput$2$ShaderInput
#endif

// C++ _inCAAAAY1Pn(CPT_InternalName name, LMatrix3d const &mat, int priority) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, LMatrix3d const *param1, int param2)(CPT_InternalName *, LMatrix3d const *, int)
extern ShaderInput * ShaderInput$3$ShaderInput(CPT_InternalName *name, LMatrix3d const *mat, int priority);

#if INDEX
#define ShaderInput_C_ctor_p_spi ShaderInput$3$ShaderInput
#endif

// C++ _inCAAAAOpxG(CPT_InternalName name, LMatrix3d const &mat) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, LMatrix3d const *param1)(CPT_InternalName *, LMatrix3d const *)
extern ShaderInput * ShaderInput$4$ShaderInput(CPT_InternalName *name, LMatrix3d const *mat);

#if INDEX
#define ShaderInput_C_ctor_p_sp ShaderInput$4$ShaderInput
#endif

// C++ _inCAAAA01_I(CPT_InternalName name, LMatrix3f const &mat, int priority) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, LMatrix3f const *param1, int param2)(CPT_InternalName *, LMatrix3f const *, int)
extern ShaderInput * ShaderInput$5$ShaderInput(CPT_InternalName *name, LMatrix3f const *mat, int priority);
// COLLISION : ShaderInput_C_ctor_p_spi ShaderInput$5$ShaderInput

// C++ _inCAAAAdpho(CPT_InternalName name, LMatrix3f const &mat) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, LMatrix3f const *param1)(CPT_InternalName *, LMatrix3f const *)
extern ShaderInput * ShaderInput$6$ShaderInput(CPT_InternalName *name, LMatrix3f const *mat);
// COLLISION : ShaderInput_C_ctor_p_sp ShaderInput$6$ShaderInput

// C++ _inCAAAAYFw6(CPT_InternalName name, LMatrix4d const &mat, int priority) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, LMatrix4d const *param1, int param2)(CPT_InternalName *, LMatrix4d const *, int)
extern ShaderInput * ShaderInput$7$ShaderInput(CPT_InternalName *name, LMatrix4d const *mat, int priority);
// COLLISION : ShaderInput_C_ctor_p_spi ShaderInput$7$ShaderInput

// C++ _inCAAAAOZTa(CPT_InternalName name, LMatrix4d const &mat) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, LMatrix4d const *param1)(CPT_InternalName *, LMatrix4d const *)
extern ShaderInput * ShaderInput$8$ShaderInput(CPT_InternalName *name, LMatrix4d const *mat);
// COLLISION : ShaderInput_C_ctor_p_sp ShaderInput$8$ShaderInput

// C++ _inCAAAA0Fgc(CPT_InternalName name, LMatrix4f const &mat, int priority) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, LMatrix4f const *param1, int param2)(CPT_InternalName *, LMatrix4f const *, int)
extern ShaderInput * ShaderInput$9$ShaderInput(CPT_InternalName *name, LMatrix4f const *mat, int priority);
// COLLISION : ShaderInput_C_ctor_p_spi ShaderInput$9$ShaderInput

// C++ _inCAAAAdZD8(CPT_InternalName name, LMatrix4f const &mat) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, LMatrix4f const *param1)(CPT_InternalName *, LMatrix4f const *)
extern ShaderInput * ShaderInput$10$ShaderInput(CPT_InternalName *name, LMatrix4f const *mat);
// COLLISION : ShaderInput_C_ctor_p_sp ShaderInput$10$ShaderInput

// C++ _inCAAAAeq8X(CPT_InternalName name, LVecBase2d const &vec, int priority) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, LVecBase2d const *param1, int param2)(CPT_InternalName *, LVecBase2d const *, int)
extern ShaderInput * ShaderInput$11$ShaderInput(CPT_InternalName *name, LVecBase2d const *vec, int priority);
// COLLISION : ShaderInput_C_ctor_p_spi ShaderInput$11$ShaderInput

// C++ _inCAAAAu8JI(CPT_InternalName name, LVecBase2d const &vec) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, LVecBase2d const *param1)(CPT_InternalName *, LVecBase2d const *)
extern ShaderInput * ShaderInput$12$ShaderInput(CPT_InternalName *name, LVecBase2d const *vec);
// COLLISION : ShaderInput_C_ctor_p_sp ShaderInput$12$ShaderInput

// C++ _inCAAAAgn9P(CPT_InternalName name, LVecBase2f const &vec, int priority) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, LVecBase2f const *param1, int param2)(CPT_InternalName *, LVecBase2f const *, int)
extern ShaderInput * ShaderInput$13$ShaderInput(CPT_InternalName *name, LVecBase2f const *vec, int priority);
// COLLISION : ShaderInput_C_ctor_p_spi ShaderInput$13$ShaderInput

// C++ _inCAAAAZ2JA(CPT_InternalName name, LVecBase2f const &vec) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, LVecBase2f const *param1)(CPT_InternalName *, LVecBase2f const *)
extern ShaderInput * ShaderInput$14$ShaderInput(CPT_InternalName *name, LVecBase2f const *vec);
// COLLISION : ShaderInput_C_ctor_p_sp ShaderInput$14$ShaderInput

// C++ _inCAAAAL09j(CPT_InternalName name, LVecBase2i const &vec, int priority) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, LVecBase2i const *param1, int param2)(CPT_InternalName *, LVecBase2i const *, int)
extern ShaderInput * ShaderInput$15$ShaderInput(CPT_InternalName *name, LVecBase2i const *vec, int priority);
// COLLISION : ShaderInput_C_ctor_p_spi ShaderInput$15$ShaderInput

// C++ _inCAAAAwkJU(CPT_InternalName name, LVecBase2i const &vec) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, LVecBase2i const *param1)(CPT_InternalName *, LVecBase2i const *)
extern ShaderInput * ShaderInput$16$ShaderInput(CPT_InternalName *name, LVecBase2i const *vec);
// COLLISION : ShaderInput_C_ctor_p_sp ShaderInput$16$ShaderInput

// C++ _inCAAAAAq0I(CPT_InternalName name, LVecBase3d const &vec, int priority) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, LVecBase3d const *param1, int param2)(CPT_InternalName *, LVecBase3d const *, int)
extern ShaderInput * ShaderInput$17$ShaderInput(CPT_InternalName *name, LVecBase3d const *vec, int priority);
// COLLISION : ShaderInput_C_ctor_p_spi ShaderInput$17$ShaderInput

// C++ _inCAAAAh8B5(CPT_InternalName name, LVecBase3d const &vec) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, LVecBase3d const *param1)(CPT_InternalName *, LVecBase3d const *)
extern ShaderInput * ShaderInput$18$ShaderInput(CPT_InternalName *name, LVecBase3d const *vec);
// COLLISION : ShaderInput_C_ctor_p_sp ShaderInput$18$ShaderInput

// C++ _inCAAAAqn1A(CPT_InternalName name, LVecBase3f const &vec, int priority) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, LVecBase3f const *param1, int param2)(CPT_InternalName *, LVecBase3f const *, int)
extern ShaderInput * ShaderInput$19$ShaderInput(CPT_InternalName *name, LVecBase3f const *vec, int priority);
// COLLISION : ShaderInput_C_ctor_p_spi ShaderInput$19$ShaderInput

// C++ _inCAAAAQ2Bx(CPT_InternalName name, LVecBase3f const &vec) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, LVecBase3f const *param1)(CPT_InternalName *, LVecBase3f const *)
extern ShaderInput * ShaderInput$20$ShaderInput(CPT_InternalName *name, LVecBase3f const *vec);
// COLLISION : ShaderInput_C_ctor_p_sp ShaderInput$20$ShaderInput

// C++ _inCAAAA901U(CPT_InternalName name, LVecBase3i const &vec, int priority) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, LVecBase3i const *param1, int param2)(CPT_InternalName *, LVecBase3i const *, int)
extern ShaderInput * ShaderInput$21$ShaderInput(CPT_InternalName *name, LVecBase3i const *vec, int priority);
// COLLISION : ShaderInput_C_ctor_p_spi ShaderInput$21$ShaderInput

// C++ _inCAAAAKnBF(CPT_InternalName name, LVecBase3i const &vec) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, LVecBase3i const *param1)(CPT_InternalName *, LVecBase3i const *)
extern ShaderInput * ShaderInput$22$ShaderInput(CPT_InternalName *name, LVecBase3i const *vec);
// COLLISION : ShaderInput_C_ctor_p_sp ShaderInput$22$ShaderInput

// C++ _inCAAAALqs5(CPT_InternalName name, LVecBase4d const &vec, int priority) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, LVecBase4d const *param1, int param2)(CPT_InternalName *, LVecBase4d const *, int)
extern ShaderInput * ShaderInput$23$ShaderInput(CPT_InternalName *name, LVecBase4d const *vec, int priority);
// COLLISION : ShaderInput_C_ctor_p_spi ShaderInput$23$ShaderInput

// C++ _inCAAAA785p(CPT_InternalName name, LVecBase4d const &vec) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, LVecBase4d const *param1)(CPT_InternalName *, LVecBase4d const *)
extern ShaderInput * ShaderInput$24$ShaderInput(CPT_InternalName *name, LVecBase4d const *vec);
// COLLISION : ShaderInput_C_ctor_p_sp ShaderInput$24$ShaderInput

// C++ _inCAAAAdmtx(CPT_InternalName name, LVecBase4f const &vec, int priority) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, LVecBase4f const *param1, int param2)(CPT_InternalName *, LVecBase4f const *, int)
extern ShaderInput * ShaderInput$25$ShaderInput(CPT_InternalName *name, LVecBase4f const *vec, int priority);
// COLLISION : ShaderInput_C_ctor_p_spi ShaderInput$25$ShaderInput

// C++ _inCAAAAq25h(CPT_InternalName name, LVecBase4f const &vec) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, LVecBase4f const *param1)(CPT_InternalName *, LVecBase4f const *)
extern ShaderInput * ShaderInput$26$ShaderInput(CPT_InternalName *name, LVecBase4f const *vec);
// COLLISION : ShaderInput_C_ctor_p_sp ShaderInput$26$ShaderInput

// C++ _inCAAAAn0tF(CPT_InternalName name, LVecBase4i const &vec, int priority) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, LVecBase4i const *param1, int param2)(CPT_InternalName *, LVecBase4i const *, int)
extern ShaderInput * ShaderInput$27$ShaderInput(CPT_InternalName *name, LVecBase4i const *vec, int priority);
// COLLISION : ShaderInput_C_ctor_p_spi ShaderInput$27$ShaderInput

// C++ _inCAAAAdn51(CPT_InternalName name, LVecBase4i const &vec) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, LVecBase4i const *param1)(CPT_InternalName *, LVecBase4i const *)
extern ShaderInput * ShaderInput$28$ShaderInput(CPT_InternalName *name, LVecBase4i const *vec);
// COLLISION : ShaderInput_C_ctor_p_sp ShaderInput$28$ShaderInput

// C++ _inCAAAAOXkD(CPT_InternalName name, NodePath const &np, int priority) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, NodePath const *param1, int param2)(CPT_InternalName *, NodePath const *, int)
extern ShaderInput * ShaderInput$29$ShaderInput(CPT_InternalName *name, NodePath const *np, int priority);
// COLLISION : ShaderInput_C_ctor_p_spi ShaderInput$29$ShaderInput

// C++ _inCAAAADWjM(CPT_InternalName name, NodePath const &np) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, NodePath const *param1)(CPT_InternalName *, NodePath const *)
extern ShaderInput * ShaderInput$30$ShaderInput(CPT_InternalName *name, NodePath const *np);
// COLLISION : ShaderInput_C_ctor_p_sp ShaderInput$30$ShaderInput

// C++ _inCAAAAA_YI(CPT_InternalName name, PTA_LMatrix3d const &ptr, int priority) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, PTA_LMatrix3d const *param1, int param2)(CPT_InternalName *, PTA_LMatrix3d const *, int)
extern ShaderInput * ShaderInput$31$ShaderInput(CPT_InternalName *name, PTA_LMatrix3d const *ptr, int priority);
// COLLISION : ShaderInput_C_ctor_p_spi ShaderInput$31$ShaderInput

// C++ _inCAAAATOWa(CPT_InternalName name, PTA_LMatrix3d const &ptr) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, PTA_LMatrix3d const *param1)(CPT_InternalName *, PTA_LMatrix3d const *)
extern ShaderInput * ShaderInput$32$ShaderInput(CPT_InternalName *name, PTA_LMatrix3d const *ptr);
// COLLISION : ShaderInput_C_ctor_p_sp ShaderInput$32$ShaderInput

// C++ _inCAAAAD_fW(CPT_InternalName name, PTA_LMatrix3f const &ptr, int priority) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, PTA_LMatrix3f const *param1, int param2)(CPT_InternalName *, PTA_LMatrix3f const *, int)
extern ShaderInput * ShaderInput$33$ShaderInput(CPT_InternalName *name, PTA_LMatrix3f const *ptr, int priority);
// COLLISION : ShaderInput_C_ctor_p_spi ShaderInput$33$ShaderInput

// C++ _inCAAAASOfo(CPT_InternalName name, PTA_LMatrix3f const &ptr) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, PTA_LMatrix3f const *param1)(CPT_InternalName *, PTA_LMatrix3f const *)
extern ShaderInput * ShaderInput$34$ShaderInput(CPT_InternalName *name, PTA_LMatrix3f const *ptr);
// COLLISION : ShaderInput_C_ctor_p_sp ShaderInput$34$ShaderInput

// C++ _inCAAAAAnmJ(CPT_InternalName name, PTA_LMatrix4d const &ptr, int priority) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, PTA_LMatrix4d const *param1, int param2)(CPT_InternalName *, PTA_LMatrix4d const *, int)
extern ShaderInput * ShaderInput$35$ShaderInput(CPT_InternalName *name, PTA_LMatrix4d const *ptr, int priority);
// COLLISION : ShaderInput_C_ctor_p_spi ShaderInput$35$ShaderInput

// C++ _inCAAAATHkb(CPT_InternalName name, PTA_LMatrix4d const &ptr) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, PTA_LMatrix4d const *param1)(CPT_InternalName *, PTA_LMatrix4d const *)
extern ShaderInput * ShaderInput$36$ShaderInput(CPT_InternalName *name, PTA_LMatrix4d const *ptr);
// COLLISION : ShaderInput_C_ctor_p_sp ShaderInput$36$ShaderInput

// C++ _inCAAAADntX(CPT_InternalName name, PTA_LMatrix4f const &ptr, int priority) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, PTA_LMatrix4f const *param1, int param2)(CPT_InternalName *, PTA_LMatrix4f const *, int)
extern ShaderInput * ShaderInput$37$ShaderInput(CPT_InternalName *name, PTA_LMatrix4f const *ptr, int priority);
// COLLISION : ShaderInput_C_ctor_p_spi ShaderInput$37$ShaderInput

// C++ _inCAAAASHtp(CPT_InternalName name, PTA_LMatrix4f const &ptr) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, PTA_LMatrix4f const *param1)(CPT_InternalName *, PTA_LMatrix4f const *)
extern ShaderInput * ShaderInput$38$ShaderInput(CPT_InternalName *name, PTA_LMatrix4f const *ptr);
// COLLISION : ShaderInput_C_ctor_p_sp ShaderInput$38$ShaderInput

// C++ _inCAAAAIHaj(CPT_InternalName name, PTA_LVecBase2d const &ptr, int priority) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, PTA_LVecBase2d const *param1, int param2)(CPT_InternalName *, PTA_LVecBase2d const *, int)
extern ShaderInput * ShaderInput$39$ShaderInput(CPT_InternalName *name, PTA_LVecBase2d const *ptr, int priority);
// COLLISION : ShaderInput_C_ctor_p_spi ShaderInput$39$ShaderInput

// C++ _inCAAAAVNci(CPT_InternalName name, PTA_LVecBase2d const &ptr) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, PTA_LVecBase2d const *param1)(CPT_InternalName *, PTA_LVecBase2d const *)
extern ShaderInput * ShaderInput$40$ShaderInput(CPT_InternalName *name, PTA_LVecBase2d const *ptr);
// COLLISION : ShaderInput_C_ctor_p_sp ShaderInput$40$ShaderInput

// C++ _inCAAAAxA6m(CPT_InternalName name, PTA_LVecBase2f const &ptr, int priority) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, PTA_LVecBase2f const *param1, int param2)(CPT_InternalName *, PTA_LVecBase2f const *, int)
extern ShaderInput * ShaderInput$41$ShaderInput(CPT_InternalName *name, PTA_LVecBase2f const *ptr, int priority);
// COLLISION : ShaderInput_C_ctor_p_spi ShaderInput$41$ShaderInput

// C++ _inCAAAAyN8l(CPT_InternalName name, PTA_LVecBase2f const &ptr) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, PTA_LVecBase2f const *param1)(CPT_InternalName *, PTA_LVecBase2f const *)
extern ShaderInput * ShaderInput$42$ShaderInput(CPT_InternalName *name, PTA_LVecBase2f const *ptr);
// COLLISION : ShaderInput_C_ctor_p_sp ShaderInput$42$ShaderInput

// C++ _inCAAAAuBKM(CPT_InternalName name, PTA_LVecBase2i const &ptr, int priority) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, PTA_LVecBase2i const *param1, int param2)(CPT_InternalName *, PTA_LVecBase2i const *, int)
extern ShaderInput * ShaderInput$43$ShaderInput(CPT_InternalName *name, PTA_LVecBase2i const *ptr, int priority);
// COLLISION : ShaderInput_C_ctor_p_spi ShaderInput$43$ShaderInput

// C++ _inCAAAA3MML(CPT_InternalName name, PTA_LVecBase2i const &ptr) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, PTA_LVecBase2i const *param1)(CPT_InternalName *, PTA_LVecBase2i const *)
extern ShaderInput * ShaderInput$44$ShaderInput(CPT_InternalName *name, PTA_LVecBase2i const *ptr);
// COLLISION : ShaderInput_C_ctor_p_sp ShaderInput$44$ShaderInput

// C++ _inCAAAAPndK(CPT_InternalName name, PTA_LVecBase3d const &ptr, int priority) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, PTA_LVecBase3d const *param1, int param2)(CPT_InternalName *, PTA_LVecBase3d const *, int)
extern ShaderInput * ShaderInput$45$ShaderInput(CPT_InternalName *name, PTA_LVecBase3d const *ptr, int priority);
// COLLISION : ShaderInput_C_ctor_p_spi ShaderInput$45$ShaderInput

// C++ _inCAAAAUtgJ(CPT_InternalName name, PTA_LVecBase3d const &ptr) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, PTA_LVecBase3d const *param1)(CPT_InternalName *, PTA_LVecBase3d const *)
extern ShaderInput * ShaderInput$46$ShaderInput(CPT_InternalName *name, PTA_LVecBase3d const *ptr);
// COLLISION : ShaderInput_C_ctor_p_sp ShaderInput$46$ShaderInput

// C++ _inCAAAAwg9N(CPT_InternalName name, PTA_LVecBase3f const &ptr, int priority) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, PTA_LVecBase3f const *param1, int param2)(CPT_InternalName *, PTA_LVecBase3f const *, int)
extern ShaderInput * ShaderInput$47$ShaderInput(CPT_InternalName *name, PTA_LVecBase3f const *ptr, int priority);
// COLLISION : ShaderInput_C_ctor_p_spi ShaderInput$47$ShaderInput

// C++ _inCAAAAttAN(CPT_InternalName name, PTA_LVecBase3f const &ptr) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, PTA_LVecBase3f const *param1)(CPT_InternalName *, PTA_LVecBase3f const *)
extern ShaderInput * ShaderInput$48$ShaderInput(CPT_InternalName *name, PTA_LVecBase3f const *ptr);
// COLLISION : ShaderInput_C_ctor_p_sp ShaderInput$48$ShaderInput

// C++ _inCAAAAuhNz(CPT_InternalName name, PTA_LVecBase3i const &ptr, int priority) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, PTA_LVecBase3i const *param1, int param2)(CPT_InternalName *, PTA_LVecBase3i const *, int)
extern ShaderInput * ShaderInput$49$ShaderInput(CPT_InternalName *name, PTA_LVecBase3i const *ptr, int priority);
// COLLISION : ShaderInput_C_ctor_p_spi ShaderInput$49$ShaderInput

// C++ _inCAAAA3sQy(CPT_InternalName name, PTA_LVecBase3i const &ptr) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, PTA_LVecBase3i const *param1)(CPT_InternalName *, PTA_LVecBase3i const *)
extern ShaderInput * ShaderInput$50$ShaderInput(CPT_InternalName *name, PTA_LVecBase3i const *ptr);
// COLLISION : ShaderInput_C_ctor_p_sp ShaderInput$50$ShaderInput

// C++ _inCAAAAPHhx(CPT_InternalName name, PTA_LVecBase4d const &ptr, int priority) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, PTA_LVecBase4d const *param1, int param2)(CPT_InternalName *, PTA_LVecBase4d const *, int)
extern ShaderInput * ShaderInput$51$ShaderInput(CPT_InternalName *name, PTA_LVecBase4d const *ptr, int priority);
// COLLISION : ShaderInput_C_ctor_p_spi ShaderInput$51$ShaderInput

// C++ _inCAAAAUNjw(CPT_InternalName name, PTA_LVecBase4d const &ptr) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, PTA_LVecBase4d const *param1)(CPT_InternalName *, PTA_LVecBase4d const *)
extern ShaderInput * ShaderInput$52$ShaderInput(CPT_InternalName *name, PTA_LVecBase4d const *ptr);
// COLLISION : ShaderInput_C_ctor_p_sp ShaderInput$52$ShaderInput

// C++ _inCAAAAwAB1(CPT_InternalName name, PTA_LVecBase4f const &ptr, int priority) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, PTA_LVecBase4f const *param1, int param2)(CPT_InternalName *, PTA_LVecBase4f const *, int)
extern ShaderInput * ShaderInput$53$ShaderInput(CPT_InternalName *name, PTA_LVecBase4f const *ptr, int priority);
// COLLISION : ShaderInput_C_ctor_p_spi ShaderInput$53$ShaderInput

// C++ _inCAAAAtND0(CPT_InternalName name, PTA_LVecBase4f const &ptr) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, PTA_LVecBase4f const *param1)(CPT_InternalName *, PTA_LVecBase4f const *)
extern ShaderInput * ShaderInput$54$ShaderInput(CPT_InternalName *name, PTA_LVecBase4f const *ptr);
// COLLISION : ShaderInput_C_ctor_p_sp ShaderInput$54$ShaderInput

// C++ _inCAAAAtBRa(CPT_InternalName name, PTA_LVecBase4i const &ptr, int priority) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, PTA_LVecBase4i const *param1, int param2)(CPT_InternalName *, PTA_LVecBase4i const *, int)
extern ShaderInput * ShaderInput$55$ShaderInput(CPT_InternalName *name, PTA_LVecBase4i const *ptr, int priority);
// COLLISION : ShaderInput_C_ctor_p_spi ShaderInput$55$ShaderInput

// C++ _inCAAAA2MTZ(CPT_InternalName name, PTA_LVecBase4i const &ptr) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, PTA_LVecBase4i const *param1)(CPT_InternalName *, PTA_LVecBase4i const *)
extern ShaderInput * ShaderInput$56$ShaderInput(CPT_InternalName *name, PTA_LVecBase4i const *ptr);
// COLLISION : ShaderInput_C_ctor_p_sp ShaderInput$56$ShaderInput

// C++ _inCAAAA9r0n(CPT_InternalName name, PTA_double const &ptr, int priority) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, PTA_double const *param1, int param2)(CPT_InternalName *, PTA_double const *, int)
extern ShaderInput * ShaderInput$57$ShaderInput(CPT_InternalName *name, PTA_double const *ptr, int priority);
// COLLISION : ShaderInput_C_ctor_p_spi ShaderInput$57$ShaderInput

// C++ _inCAAAAUTBY(CPT_InternalName name, PTA_double const &ptr) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, PTA_double const *param1)(CPT_InternalName *, PTA_double const *)
extern ShaderInput * ShaderInput$58$ShaderInput(CPT_InternalName *name, PTA_double const *ptr);
// COLLISION : ShaderInput_C_ctor_p_sp ShaderInput$58$ShaderInput

// C++ _inCAAAARcny(CPT_InternalName name, PTA_float const &ptr, int priority) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, PTA_float const *param1, int param2)(CPT_InternalName *, PTA_float const *, int)
extern ShaderInput * ShaderInput$59$ShaderInput(CPT_InternalName *name, PTA_float const *ptr, int priority);
// COLLISION : ShaderInput_C_ctor_p_spi ShaderInput$59$ShaderInput

// C++ _inCAAAAt_IS(CPT_InternalName name, PTA_float const &ptr) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, PTA_float const *param1)(CPT_InternalName *, PTA_float const *)
extern ShaderInput * ShaderInput$60$ShaderInput(CPT_InternalName *name, PTA_float const *ptr);
// COLLISION : ShaderInput_C_ctor_p_sp ShaderInput$60$ShaderInput

// C++ _inCAAAAAe29(CPT_InternalName name, PTA_int const &ptr, int priority) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, PTA_int const *param1, int param2)(CPT_InternalName *, PTA_int const *, int)
extern ShaderInput * ShaderInput$61$ShaderInput(CPT_InternalName *name, PTA_int const *ptr, int priority);
// COLLISION : ShaderInput_C_ctor_p_spi ShaderInput$61$ShaderInput

// C++ _inCAAAAvhIY(CPT_InternalName name, PTA_int const &ptr) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, PTA_int const *param1)(CPT_InternalName *, PTA_int const *)
extern ShaderInput * ShaderInput$62$ShaderInput(CPT_InternalName *name, PTA_int const *ptr);
// COLLISION : ShaderInput_C_ctor_p_sp ShaderInput$62$ShaderInput

// C++ _inCAAAApkKH(CPT_InternalName name, ParamValueBase *param, int priority) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, ParamValueBase *param1, int param2)(CPT_InternalName *, ParamValueBase *, int)
extern ShaderInput * ShaderInput$63$ShaderInput(CPT_InternalName *name, ParamValueBase *arg, int priority);
// COLLISION : ShaderInput_C_ctor_p_spi ShaderInput$63$ShaderInput

// C++ _inCAAAAvifS(CPT_InternalName name, ParamValueBase *param) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, ParamValueBase *param1)(CPT_InternalName *, ParamValueBase *)
extern ShaderInput * ShaderInput$64$ShaderInput(CPT_InternalName *name, ParamValueBase *arg);
// COLLISION : ShaderInput_C_ctor_p_sp ShaderInput$64$ShaderInput

// C++ _inCAAAAfiMb(CPT_InternalName name, ShaderBuffer *buf, int priority) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, ShaderBuffer *param1, int param2)(CPT_InternalName *, ShaderBuffer *, int)
extern ShaderInput * ShaderInput$65$ShaderInput(CPT_InternalName *name, ShaderBuffer *buf, int priority);
// COLLISION : ShaderInput_C_ctor_p_spi ShaderInput$65$ShaderInput

// C++ _inCAAAAvxOa(CPT_InternalName name, ShaderBuffer *buf) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, ShaderBuffer *param1)(CPT_InternalName *, ShaderBuffer *)
extern ShaderInput * ShaderInput$66$ShaderInput(CPT_InternalName *name, ShaderBuffer *buf);
// COLLISION : ShaderInput_C_ctor_p_sp ShaderInput$66$ShaderInput

// C++ _inCAAAAt_9V(CPT_InternalName name, Texture *tex, SamplerState const &sampler, int priority) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, Texture *param1, SamplerState const *param2, int param3)(CPT_InternalName *, Texture *, SamplerState const *, int)
extern ShaderInput * ShaderInput$67$ShaderInput(CPT_InternalName *name, Texture *tex, SamplerState const *sampler, int priority);

#if INDEX
#define ShaderInput_C_ctor_p_sppi ShaderInput$67$ShaderInput
#endif

// C++ _inCAAAA5L3d(CPT_InternalName name, Texture *tex, SamplerState const &sampler) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, Texture *param1, SamplerState const *param2)(CPT_InternalName *, Texture *, SamplerState const *)
extern ShaderInput * ShaderInput$68$ShaderInput(CPT_InternalName *name, Texture *tex, SamplerState const *sampler);

#if INDEX
#define ShaderInput_C_ctor_p_spp ShaderInput$68$ShaderInput
#endif

// C++ _inCAAAACjuN(CPT_InternalName name, Texture *tex, bool read, bool write, int z, int n, int priority) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, Texture *param1, bool param2, bool param3, int param4, int param5, int param6)(CPT_InternalName *, Texture *, bool, bool, int, int, int)
extern ShaderInput * ShaderInput$69$ShaderInput(CPT_InternalName *name, Texture *tex, bool read, bool write, int z, int n, int priority);

#if INDEX
#define ShaderInput_C_ctor_p_spBBiii ShaderInput$69$ShaderInput
#endif

// C++ _inCAAAAiQBo(CPT_InternalName name, Texture *tex, bool read, bool write, int z, int n) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, Texture *param1, bool param2, bool param3, int param4, int param5)(CPT_InternalName *, Texture *, bool, bool, int, int)
extern ShaderInput * ShaderInput$70$ShaderInput(CPT_InternalName *name, Texture *tex, bool read, bool write, int z, int n);

#if INDEX
#define ShaderInput_C_ctor_p_spBBii ShaderInput$70$ShaderInput
#endif

// C++ _inCAAAATgKV(CPT_InternalName name, Texture *tex, bool read, bool write, int z) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, Texture *param1, bool param2, bool param3, int param4)(CPT_InternalName *, Texture *, bool, bool, int)
extern ShaderInput * ShaderInput$71$ShaderInput(CPT_InternalName *name, Texture *tex, bool read, bool write, int z);

#if INDEX
#define ShaderInput_C_ctor_p_spBBi ShaderInput$71$ShaderInput
#endif

// C++ _inCAAAAI4wr(CPT_InternalName name, Texture *tex, bool read, bool write) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, Texture *param1, bool param2, bool param3)(CPT_InternalName *, Texture *, bool, bool)
extern ShaderInput * ShaderInput$72$ShaderInput(CPT_InternalName *name, Texture *tex, bool read, bool write);

#if INDEX
#define ShaderInput_C_ctor_p_spBB ShaderInput$72$ShaderInput
#endif

// C++ _inCAAAA5SAo(CPT_InternalName name, Texture *tex, int priority) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, Texture *param1, int param2)(CPT_InternalName *, Texture *, int)
extern ShaderInput * ShaderInput$73$ShaderInput(CPT_InternalName *name, Texture *tex, int priority);
// COLLISION : ShaderInput_C_ctor_p_spi ShaderInput$73$ShaderInput

// C++ _inCAAAAV_gH(CPT_InternalName name, Texture *tex) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, Texture *param1)(CPT_InternalName *, Texture *)
extern ShaderInput * ShaderInput$74$ShaderInput(CPT_InternalName *name, Texture *tex);
// COLLISION : ShaderInput_C_ctor_p_sp ShaderInput$74$ShaderInput

// C++ _inCAAAAZgEj(CPT_InternalName name, int priority) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0, int param1)(CPT_InternalName *, int)
extern ShaderInput * ShaderInput$75$ShaderInput(CPT_InternalName *name, int priority);

#if INDEX
#define ShaderInput_C_ctor_p_si ShaderInput$75$ShaderInput
#endif

// C++ _inCAAAAvlV1(CPT_InternalName name) ==> ShaderInput$_$ShaderInput(CPT_InternalName *param0)(CPT_InternalName *)
extern ShaderInput * ShaderInput$76$ShaderInput(CPT_InternalName *name);

#if INDEX
#define ShaderInput_C_ctor_p_s ShaderInput$76$ShaderInput
#endif

// C++ _inCAAAAZ19K(ShaderInput const &) ==> ShaderInput$_$ShaderInput(ShaderInput const *param0)(ShaderInput const *)
extern ShaderInput * ShaderInput$77$ShaderInput(ShaderInput const *arg0);

#if INDEX
#define ShaderInput_C_ctor_p_p ShaderInput$77$ShaderInput
#endif

// C++ _inCAAAA4AHZ(std::size_t hash) ==> ShaderInput$_$add_hash(ShaderInput const *param0, std::size_t param1)(ShaderInput const *, std::size_t)
extern std$_size_t ShaderInput$78$add_hash(ShaderInput const *self, std$_size_t hash);

#if INDEX
#define ShaderInput_C_add_hash_l_pl ShaderInput$78$add_hash
#endif

// C++ _inCAAAA72k1() ==> ShaderInput$_$get_name(ShaderInput const *param0)(ShaderInput const *)
extern InternalName const * ShaderInput$79$get_name(ShaderInput const *self);

#if INDEX
#define ShaderInput_C_get_name_s_p ShaderInput$79$get_name
#endif

// C++ _inCAAAA2Nv1() ==> ShaderInput$_$get_value_type(ShaderInput const *param0)(ShaderInput const *)
extern int ShaderInput$80$get_value_type(ShaderInput const *self);

#if INDEX
#define ShaderInput_C_get_value_type_i_p ShaderInput$80$get_value_type
#endif

// C++ _inCAAAAvnas() ==> ShaderInput$_$get_priority(ShaderInput const *param0)(ShaderInput const *)
extern int ShaderInput$81$get_priority(ShaderInput const *self);

#if INDEX
#define ShaderInput_C_get_priority_i_p ShaderInput$81$get_priority
#endif

// C++ _inCAAAAXBST() ==> ShaderInput$_$get_vector(ShaderInput const *param0)(ShaderInput const *)
extern LVecBase4 const * ShaderInput$82$get_vector(ShaderInput const *self);

#if INDEX
#define ShaderInput_C_get_vector_p_p ShaderInput$82$get_vector
#endif

// C++ _inCAAAAYJVa() ==> ShaderInput$_$get_ptr(ShaderInput const *param0)(ShaderInput const *)
extern Shader$_ShaderPtrData const * ShaderInput$83$get_ptr(ShaderInput const *self);

#if INDEX
#define ShaderInput_C_get_ptr_p_p ShaderInput$83$get_ptr
#endif

// C++ _inCAAAAnygk() ==> ShaderInput$_$get_nodepath(ShaderInput const *param0)(ShaderInput const *)
extern NodePath * ShaderInput$84$get_nodepath(ShaderInput const *self);

#if INDEX
#define ShaderInput_C_get_nodepath_p_p ShaderInput$84$get_nodepath
#endif

// C++ _inCAAAAB_Q3() ==> ShaderInput$_$get_texture(ShaderInput const *param0)(ShaderInput const *)
extern Texture * ShaderInput$85$get_texture(ShaderInput const *self);

#if INDEX
#define ShaderInput_C_get_texture_p_p ShaderInput$85$get_texture
#endif

// C++ _inCAAAArcIe() ==> ShaderInput$_$get_sampler(ShaderInput const *param0)(ShaderInput const *)
extern SamplerState const * ShaderInput$86$get_sampler(ShaderInput const *self);

#if INDEX
#define ShaderInput_C_get_sampler_p_p ShaderInput$86$get_sampler
#endif

// C++ _inCAAAA21Fz() ==> ShaderInput$_$get_param(ShaderInput const *param0)(ShaderInput const *)
extern ParamValueBase * ShaderInput$87$get_param(ShaderInput const *self);

#if INDEX
#define ShaderInput_C_get_param_p_p ShaderInput$87$get_param
#endif

// C++ _inCAAAAv8VU() ==> ShaderInput$_$get_value(ShaderInput const *param0)(ShaderInput const *)
extern TypedWritableReferenceCount * ShaderInput$88$get_value(ShaderInput const *self);

#if INDEX
#define ShaderInput_C_get_value_p_p ShaderInput$88$get_value
#endif

// C++ _inCAAAAN_ph() ==> ShaderInput$_$register_with_read_factory()()
extern void ShaderInput$89$register_with_read_factory(void);

#if INDEX
#define ShaderInput_C_register_with_read_factory_v_v ShaderInput$89$register_with_read_factory
#endif


// SimpleLruPage

// C++ _inCAAAAR3m1() ==> SimpleLruPage$_$downcast_to_GeomVertexArrayData(SimpleLruPage *param0)(SimpleLruPage *)
extern GeomVertexArrayData * SimpleLruPage$1$downcast_to_GeomVertexArrayData(SimpleLruPage *self);

#if INDEX
#define SimpleLruPage_C_downcast_to_GeomVertexArrayData_p_p SimpleLruPage$1$downcast_to_GeomVertexArrayData
#endif


// TextEncoder

// C++ _inCAAAAtPjp() ==> TextEncoder$_$downcast_to_TextNode(TextEncoder *param0)(TextEncoder *)
extern TextNode * TextEncoder$1$downcast_to_TextNode(TextEncoder *self);

#if INDEX
#define TextEncoder_C_downcast_to_TextNode_p_p TextEncoder$1$downcast_to_TextNode
#endif


// TextFont

// C++ _inCAAAA2Y6t() ==> TextFont$_$upcast_to_TypedReferenceCount(TextFont *param0)(TextFont *)
extern TypedReferenceCount * TextFont$1$upcast_to_TypedReferenceCount(TextFont *self);

#if INDEX
#define TextFont_C_upcast_to_TypedReferenceCount_p_p TextFont$1$upcast_to_TypedReferenceCount
#endif

// C++ _inCAAAASvLG() ==> TextFont$_$upcast_to_Namable(TextFont *param0)(TextFont *)
extern Namable * TextFont$2$upcast_to_Namable(TextFont *self);

#if INDEX
#define TextFont_C_upcast_to_Namable_p_p TextFont$2$upcast_to_Namable
#endif

// C++ _inCAAAAcT7z() ==> TextFont$_$make_copy(TextFont const *param0)(TextFont const *)
extern char ** TextFont$3$make_copy(TextFont const *self);

#if INDEX
#define TextFont_C_make_copy_p_p TextFont$3$make_copy
#endif

// C++ _inCAAAA9LaW() ==> TextFont$_$is_valid(TextFont const *param0)(TextFont const *)
extern bool TextFont$4$is_valid(TextFont const *self);

#if INDEX
#define TextFont_C_is_valid_B_p TextFont$4$is_valid
#endif

// C++ _inCAAAAA_Bt() ==> TextFont$_$get_line_height(TextFont const *param0)(TextFont const *)
extern PN_stdfloat TextFont$5$get_line_height(TextFont const *self);

#if INDEX
#define TextFont_C_get_line_height_f_p TextFont$5$get_line_height
#endif

// C++ _inCAAAAgzju(PN_stdfloat line_height) ==> TextFont$_$set_line_height(TextFont *param0, PN_stdfloat param1)(TextFont *, PN_stdfloat)
extern void TextFont$6$set_line_height(TextFont *self, PN_stdfloat line_height);

#if INDEX
#define TextFont_C_set_line_height_v_pf TextFont$6$set_line_height
#endif

// C++ _inCAAAA1YDr() ==> TextFont$_$get_space_advance(TextFont const *param0)(TextFont const *)
extern PN_stdfloat TextFont$7$get_space_advance(TextFont const *self);

#if INDEX
#define TextFont_C_get_space_advance_f_p TextFont$7$get_space_advance
#endif

// C++ _inCAAAAkUkK(PN_stdfloat space_advance) ==> TextFont$_$set_space_advance(TextFont *param0, PN_stdfloat param1)(TextFont *, PN_stdfloat)
extern void TextFont$8$set_space_advance(TextFont *self, PN_stdfloat space_advance);

#if INDEX
#define TextFont_C_set_space_advance_v_pf TextFont$8$set_space_advance
#endif

// C++ _inCAAAAYGf5(int character) ==> TextFont$_$get_glyph(TextFont *param0, int param1)(TextFont *, int)
extern char ** TextFont$9$get_glyph(TextFont *self, int character);

#if INDEX
#define TextFont_C_get_glyph_p_pi TextFont$9$get_glyph
#endif

// C++ _inCAAAA6ofC(int character, ConstPointerTo< TextGlyph > &glyph) ==> TextFont$_$get_glyph(TextFont *param0, int param1, ConstPointerTo< TextGlyph > *param2)(TextFont *, int, ConstPointerTo< TextGlyph > *)
extern bool TextFont$10$get_glyph(TextFont *self, int character, char **glyph);

#if INDEX
#define TextFont_C_get_glyph_B_pip TextFont$10$get_glyph
#endif

// C++ _inCAAAAHKFo(int first, int second) ==> TextFont$_$get_kerning(TextFont const *param0, int param1, int param2)(TextFont const *, int, int)
extern PN_stdfloat TextFont$11$get_kerning(TextFont const *self, int first, int second);

#if INDEX
#define TextFont_C_get_kerning_f_pii TextFont$11$get_kerning
#endif

// C++ _inCAAAAsubQ(std::ostream &out, int indent_level) ==> TextFont$_$write(TextFont const *param0, std::ostream *param1, int param2)(TextFont const *, std::ostream *, int)
extern void TextFont$12$write(TextFont const *self, std$_ostream *out, int indent_level);

#if INDEX
#define TextFont_C_write_v_ppi TextFont$12$write
#endif

// C++ _inCAAAAmMeH() ==> TextFont$_$get_total_poly_margin(TextFont const *param0)(TextFont const *)
extern PN_stdfloat TextFont$13$get_total_poly_margin(TextFont const *self);

#if INDEX
#define TextFont_C_get_total_poly_margin_f_p TextFont$13$get_total_poly_margin
#endif

// C++ _inCAAAAJvat() ==> TextFont$_$get_invalid_glyph(TextFont *param0)(TextFont *)
extern TextGlyph * TextFont$14$get_invalid_glyph(TextFont *self);

#if INDEX
#define TextFont_C_get_invalid_glyph_p_p TextFont$14$get_invalid_glyph
#endif

// C++ _inCAAAAoxTQ(std::string const &string) ==> TextFont$_$string_render_mode(char const *param0)(char const *)
extern TextFont$_RenderMode TextFont$15$string_render_mode(char const *string);

#if INDEX
#define TextFont_C_string_render_mode_p_s TextFont$15$string_render_mode
#endif

// C++ _inCAAAA_pT1() ==> TextFont$_$get_class_type()()
extern int TextFont$16$get_class_type(void);

#if INDEX
#define TextFont_C_get_class_type_i_v TextFont$16$get_class_type
#endif

// C++ _inCAAAAjcyT() ==> TextFont$_$init_type()()
extern void TextFont$17$init_type(void);

#if INDEX
#define TextFont_C_init_type_v_v TextFont$17$init_type
#endif

// C++ _inCAAAA_1Wc() ==> TextFont$_$get_type(TextFont const *param0)(TextFont const *)
extern int TextFont$18$get_type(TextFont const *self);

#if INDEX
#define TextFont_C_get_type_i_p TextFont$18$get_type
#endif

// C++ _inCAAAAUshR() ==> TextFont$_$force_init_type(TextFont *param0)(TextFont *)
extern int TextFont$19$force_init_type(TextFont *self);

#if INDEX
#define TextFont_C_force_init_type_i_p TextFont$19$force_init_type
#endif


// TextNode

// C++ _inCAAAAHSSc() ==> TextNode$_$upcast_to_PandaNode(TextNode *param0)(TextNode *)
extern PandaNode * TextNode$1$upcast_to_PandaNode(TextNode *self);

#if INDEX
#define TextNode_C_upcast_to_PandaNode_p_p TextNode$1$upcast_to_PandaNode
#endif

// C++ _inCAAAA2clc() ==> TextNode$_$upcast_to_TextEncoder(TextNode *param0)(TextNode *)
extern TextEncoder * TextNode$2$upcast_to_TextEncoder(TextNode *self);

#if INDEX
#define TextNode_C_upcast_to_TextEncoder_p_p TextNode$2$upcast_to_TextEncoder
#endif

// C++ _inCAAAArYU8() ==> TextNode$_$upcast_to_TextProperties(TextNode *param0)(TextNode *)
extern TextProperties * TextNode$3$upcast_to_TextProperties(TextNode *self);

#if INDEX
#define TextNode_C_upcast_to_TextProperties_p_p TextNode$3$upcast_to_TextProperties
#endif

// C++ _inCAAAAcrdj(std::string const &name) ==> TextNode$_$TextNode(char const *param0)(char const *)
extern TextNode * TextNode$4$TextNode(char const *name);

#if INDEX
#define TextNode_C_ctor_p_s TextNode$4$TextNode
#endif

// C++ _inCAAAASPWI(std::string const &name, TextProperties const &copy) ==> TextNode$_$TextNode(char const *param0, TextProperties const *param1)(char const *, TextProperties const *)
extern TextNode * TextNode$5$TextNode(char const *name, TextProperties const *copy);

#if INDEX
#define TextNode_C_ctor_p_sp TextNode$5$TextNode
#endif

// C++ _inCAAAA64_2() ==> TextNode$_$get_line_height(TextNode const *param0)(TextNode const *)
extern PN_stdfloat TextNode$6$get_line_height(TextNode const *self);

#if INDEX
#define TextNode_C_get_line_height_f_p TextNode$6$get_line_height
#endif

// C++ _inCAAAAgyMC(int max_rows) ==> TextNode$_$set_max_rows(TextNode *param0, int param1)(TextNode *, int)
extern void TextNode$7$set_max_rows(TextNode *self, int max_rows);

#if INDEX
#define TextNode_C_set_max_rows_v_pi TextNode$7$set_max_rows
#endif

// C++ _inCAAAAIv_f() ==> TextNode$_$clear_max_rows(TextNode *param0)(TextNode *)
extern void TextNode$8$clear_max_rows(TextNode *self);

#if INDEX
#define TextNode_C_clear_max_rows_v_p TextNode$8$clear_max_rows
#endif

// C++ _inCAAAAafTN() ==> TextNode$_$has_max_rows(TextNode const *param0)(TextNode const *)
extern bool TextNode$9$has_max_rows(TextNode const *self);

#if INDEX
#define TextNode_C_has_max_rows_B_p TextNode$9$has_max_rows
#endif

// C++ _inCAAAA_cGl() ==> TextNode$_$get_max_rows(TextNode const *param0)(TextNode const *)
extern int TextNode$10$get_max_rows(TextNode const *self);

#if INDEX
#define TextNode_C_get_max_rows_i_p TextNode$10$get_max_rows
#endif

// C++ _inCAAAAP7gc() ==> TextNode$_$has_overflow(TextNode const *param0)(TextNode const *)
extern bool TextNode$11$has_overflow(TextNode const *self);

#if INDEX
#define TextNode_C_has_overflow_B_p TextNode$11$has_overflow
#endif

// C++ _inCAAAAJVdc(LColor const &frame_color) ==> TextNode$_$set_frame_color(TextNode *param0, LColor const *param1)(TextNode *, LColor const *)
extern void TextNode$12$set_frame_color(TextNode *self, LColor const *frame_color);

#if INDEX
#define TextNode_C_set_frame_color_v_pp TextNode$12$set_frame_color
#endif

// C++ _inCAAAAiLu1(PN_stdfloat r, PN_stdfloat g, PN_stdfloat b, PN_stdfloat a) ==> TextNode$_$set_frame_color(TextNode *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4)(TextNode *, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void TextNode$13$set_frame_color(TextNode *self, PN_stdfloat r, PN_stdfloat g, PN_stdfloat b, PN_stdfloat a);

#if INDEX
#define TextNode_C_set_frame_color_v_pffff TextNode$13$set_frame_color
#endif

// C++ _inCAAAAgap6() ==> TextNode$_$get_frame_color(TextNode const *param0)(TextNode const *)
extern LColor * TextNode$14$get_frame_color(TextNode const *self);

#if INDEX
#define TextNode_C_get_frame_color_p_p TextNode$14$get_frame_color
#endif

// C++ _inCAAAAkqmF(PN_stdfloat size, PN_stdfloat uv_portion) ==> TextNode$_$set_card_border(TextNode *param0, PN_stdfloat param1, PN_stdfloat param2)(TextNode *, PN_stdfloat, PN_stdfloat)
extern void TextNode$15$set_card_border(TextNode *self, PN_stdfloat size, PN_stdfloat uv_portion);

#if INDEX
#define TextNode_C_set_card_border_v_pff TextNode$15$set_card_border
#endif

// C++ _inCAAAA3G6F() ==> TextNode$_$clear_card_border(TextNode *param0)(TextNode *)
extern void TextNode$16$clear_card_border(TextNode *self);

#if INDEX
#define TextNode_C_clear_card_border_v_p TextNode$16$clear_card_border
#endif

// C++ _inCAAAArI81() ==> TextNode$_$get_card_border_size(TextNode const *param0)(TextNode const *)
extern PN_stdfloat TextNode$17$get_card_border_size(TextNode const *self);

#if INDEX
#define TextNode_C_get_card_border_size_f_p TextNode$17$get_card_border_size
#endif

// C++ _inCAAAA0YDM() ==> TextNode$_$get_card_border_uv_portion(TextNode const *param0)(TextNode const *)
extern PN_stdfloat TextNode$18$get_card_border_uv_portion(TextNode const *self);

#if INDEX
#define TextNode_C_get_card_border_uv_portion_f_p TextNode$18$get_card_border_uv_portion
#endif

// C++ _inCAAAA_Hvs() ==> TextNode$_$has_card_border(TextNode const *param0)(TextNode const *)
extern bool TextNode$19$has_card_border(TextNode const *self);

#if INDEX
#define TextNode_C_has_card_border_B_p TextNode$19$has_card_border
#endif

// C++ _inCAAAAsP6e(LColor const &card_color) ==> TextNode$_$set_card_color(TextNode *param0, LColor const *param1)(TextNode *, LColor const *)
extern void TextNode$20$set_card_color(TextNode *self, LColor const *card_color);

#if INDEX
#define TextNode_C_set_card_color_v_pp TextNode$20$set_card_color
#endif

// C++ _inCAAAAO_lv(PN_stdfloat r, PN_stdfloat g, PN_stdfloat b, PN_stdfloat a) ==> TextNode$_$set_card_color(TextNode *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4)(TextNode *, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void TextNode$21$set_card_color(TextNode *self, PN_stdfloat r, PN_stdfloat g, PN_stdfloat b, PN_stdfloat a);

#if INDEX
#define TextNode_C_set_card_color_v_pffff TextNode$21$set_card_color
#endif

// C++ _inCAAAAJA_Y() ==> TextNode$_$get_card_color(TextNode const *param0)(TextNode const *)
extern LColor * TextNode$22$get_card_color(TextNode const *self);

#if INDEX
#define TextNode_C_get_card_color_p_p TextNode$22$get_card_color
#endif

// C++ _inCAAAAhpTx(Texture *card_texture) ==> TextNode$_$set_card_texture(TextNode *param0, Texture *param1)(TextNode *, Texture *)
extern void TextNode$23$set_card_texture(TextNode *self, Texture *card_texture);

#if INDEX
#define TextNode_C_set_card_texture_v_pp TextNode$23$set_card_texture
#endif

// C++ _inCAAAAzHSq() ==> TextNode$_$clear_card_texture(TextNode *param0)(TextNode *)
extern void TextNode$24$clear_card_texture(TextNode *self);

#if INDEX
#define TextNode_C_clear_card_texture_v_p TextNode$24$clear_card_texture
#endif

// C++ _inCAAAA7f88() ==> TextNode$_$has_card_texture(TextNode const *param0)(TextNode const *)
extern bool TextNode$25$has_card_texture(TextNode const *self);

#if INDEX
#define TextNode_C_has_card_texture_B_p TextNode$25$has_card_texture
#endif

// C++ _inCAAAApfvU() ==> TextNode$_$get_card_texture(TextNode const *param0)(TextNode const *)
extern Texture * TextNode$26$get_card_texture(TextNode const *self);

#if INDEX
#define TextNode_C_get_card_texture_p_p TextNode$26$get_card_texture
#endif

// C++ _inCAAAAQLDv(PN_stdfloat left, PN_stdfloat right, PN_stdfloat bottom, PN_stdfloat top) ==> TextNode$_$set_frame_as_margin(TextNode *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4)(TextNode *, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void TextNode$27$set_frame_as_margin(TextNode *self, PN_stdfloat left, PN_stdfloat right, PN_stdfloat bottom, PN_stdfloat top);

#if INDEX
#define TextNode_C_set_frame_as_margin_v_pffff TextNode$27$set_frame_as_margin
#endif

// C++ _inCAAAA2d4b(PN_stdfloat left, PN_stdfloat right, PN_stdfloat bottom, PN_stdfloat top) ==> TextNode$_$set_frame_actual(TextNode *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4)(TextNode *, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void TextNode$28$set_frame_actual(TextNode *self, PN_stdfloat left, PN_stdfloat right, PN_stdfloat bottom, PN_stdfloat top);

#if INDEX
#define TextNode_C_set_frame_actual_v_pffff TextNode$28$set_frame_actual
#endif

// C++ _inCAAAAutht() ==> TextNode$_$clear_frame(TextNode *param0)(TextNode *)
extern void TextNode$29$clear_frame(TextNode *self);

#if INDEX
#define TextNode_C_clear_frame_v_p TextNode$29$clear_frame
#endif

// C++ _inCAAAA4KuG() ==> TextNode$_$has_frame(TextNode const *param0)(TextNode const *)
extern bool TextNode$30$has_frame(TextNode const *self);

#if INDEX
#define TextNode_C_has_frame_B_p TextNode$30$has_frame
#endif

// C++ _inCAAAA8doH() ==> TextNode$_$is_frame_as_margin(TextNode const *param0)(TextNode const *)
extern bool TextNode$31$is_frame_as_margin(TextNode const *self);

#if INDEX
#define TextNode_C_is_frame_as_margin_B_p TextNode$31$is_frame_as_margin
#endif

// C++ _inCAAAALXz1() ==> TextNode$_$get_frame_as_set(TextNode const *param0)(TextNode const *)
extern LVecBase4 * TextNode$32$get_frame_as_set(TextNode const *self);

#if INDEX
#define TextNode_C_get_frame_as_set_p_p TextNode$32$get_frame_as_set
#endif

// C++ _inCAAAAMa1R() ==> TextNode$_$get_frame_actual(TextNode const *param0)(TextNode const *)
extern LVecBase4 * TextNode$33$get_frame_actual(TextNode const *self);

#if INDEX
#define TextNode_C_get_frame_actual_p_p TextNode$33$get_frame_actual
#endif

// C++ _inCAAAATQBK(PN_stdfloat line_width) ==> TextNode$_$set_frame_line_width(TextNode *param0, PN_stdfloat param1)(TextNode *, PN_stdfloat)
extern void TextNode$34$set_frame_line_width(TextNode *self, PN_stdfloat line_width);

#if INDEX
#define TextNode_C_set_frame_line_width_v_pf TextNode$34$set_frame_line_width
#endif

// C++ _inCAAAAM20H() ==> TextNode$_$get_frame_line_width(TextNode const *param0)(TextNode const *)
extern PN_stdfloat TextNode$35$get_frame_line_width(TextNode const *self);

#if INDEX
#define TextNode_C_get_frame_line_width_f_p TextNode$35$get_frame_line_width
#endif

// C++ _inCAAAAkMsJ(bool corners) ==> TextNode$_$set_frame_corners(TextNode *param0, bool param1)(TextNode *, bool)
extern void TextNode$36$set_frame_corners(TextNode *self, bool corners);

#if INDEX
#define TextNode_C_set_frame_corners_v_pB TextNode$36$set_frame_corners
#endif

// C++ _inCAAAAsWF6() ==> TextNode$_$get_frame_corners(TextNode const *param0)(TextNode const *)
extern bool TextNode$37$get_frame_corners(TextNode const *self);

#if INDEX
#define TextNode_C_get_frame_corners_B_p TextNode$37$get_frame_corners
#endif

// C++ _inCAAAAqMXD(PN_stdfloat left, PN_stdfloat right, PN_stdfloat bottom, PN_stdfloat top) ==> TextNode$_$set_card_as_margin(TextNode *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4)(TextNode *, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void TextNode$38$set_card_as_margin(TextNode *self, PN_stdfloat left, PN_stdfloat right, PN_stdfloat bottom, PN_stdfloat top);

#if INDEX
#define TextNode_C_set_card_as_margin_v_pffff TextNode$38$set_card_as_margin
#endif

// C++ _inCAAAAjSy2(PN_stdfloat left, PN_stdfloat right, PN_stdfloat bottom, PN_stdfloat top) ==> TextNode$_$set_card_actual(TextNode *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4)(TextNode *, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void TextNode$39$set_card_actual(TextNode *self, PN_stdfloat left, PN_stdfloat right, PN_stdfloat bottom, PN_stdfloat top);

#if INDEX
#define TextNode_C_set_card_actual_v_pffff TextNode$39$set_card_actual
#endif

// C++ _inCAAAATKeT(bool card_decal) ==> TextNode$_$set_card_decal(TextNode *param0, bool param1)(TextNode *, bool)
extern void TextNode$40$set_card_decal(TextNode *self, bool card_decal);

#if INDEX
#define TextNode_C_set_card_decal_v_pB TextNode$40$set_card_decal
#endif

// C++ _inCAAAA92SD() ==> TextNode$_$clear_card(TextNode *param0)(TextNode *)
extern void TextNode$41$clear_card(TextNode *self);

#if INDEX
#define TextNode_C_clear_card_v_p TextNode$41$clear_card
#endif

// C++ _inCAAAAtTVI() ==> TextNode$_$has_card(TextNode const *param0)(TextNode const *)
extern bool TextNode$42$has_card(TextNode const *self);

#if INDEX
#define TextNode_C_has_card_B_p TextNode$42$has_card
#endif

// C++ _inCAAAAhF8z() ==> TextNode$_$get_card_decal(TextNode const *param0)(TextNode const *)
extern bool TextNode$43$get_card_decal(TextNode const *self);

#if INDEX
#define TextNode_C_get_card_decal_B_p TextNode$43$get_card_decal
#endif

// C++ _inCAAAA_1k2() ==> TextNode$_$is_card_as_margin(TextNode const *param0)(TextNode const *)
extern bool TextNode$44$is_card_as_margin(TextNode const *self);

#if INDEX
#define TextNode_C_is_card_as_margin_B_p TextNode$44$is_card_as_margin
#endif

// C++ _inCAAAAIo16() ==> TextNode$_$get_card_as_set(TextNode const *param0)(TextNode const *)
extern LVecBase4 * TextNode$45$get_card_as_set(TextNode const *self);

#if INDEX
#define TextNode_C_get_card_as_set_p_p TextNode$45$get_card_as_set
#endif

// C++ _inCAAAAsvt7() ==> TextNode$_$get_card_actual(TextNode const *param0)(TextNode const *)
extern LVecBase4 * TextNode$46$get_card_actual(TextNode const *self);

#if INDEX
#define TextNode_C_get_card_actual_p_p TextNode$46$get_card_actual
#endif

// C++ _inCAAAA__32() ==> TextNode$_$get_card_transformed(TextNode const *param0)(TextNode const *)
extern LVecBase4 * TextNode$47$get_card_transformed(TextNode const *self);

#if INDEX
#define TextNode_C_get_card_transformed_p_p TextNode$47$get_card_transformed
#endif

// C++ _inCAAAAUxdG(LMatrix4 const &transform) ==> TextNode$_$set_transform(TextNode *param0, LMatrix4 const *param1)(TextNode *, LMatrix4 const *)
extern void TextNode$48$set_transform(TextNode *self, LMatrix4 const *transform);

#if INDEX
#define TextNode_C_set_transform_v_pp TextNode$48$set_transform
#endif

// C++ _inCAAAAot_Q() ==> TextNode$_$get_transform(TextNode const *param0)(TextNode const *)
extern LMatrix4 * TextNode$49$get_transform(TextNode const *self);

#if INDEX
#define TextNode_C_get_transform_p_p TextNode$49$get_transform
#endif

// C++ _inCAAAAq9jN(CoordinateSystem cs) ==> TextNode$_$set_coordinate_system(TextNode *param0, CoordinateSystem param1)(TextNode *, CoordinateSystem)
extern void TextNode$50$set_coordinate_system(TextNode *self, CoordinateSystem cs);

#if INDEX
#define TextNode_C_set_coordinate_system_v_pp TextNode$50$set_coordinate_system
#endif

// C++ _inCAAAA8bzG() ==> TextNode$_$get_coordinate_system(TextNode const *param0)(TextNode const *)
extern CoordinateSystem TextNode$51$get_coordinate_system(TextNode const *self);

#if INDEX
#define TextNode_C_get_coordinate_system_p_p TextNode$51$get_coordinate_system
#endif

// C++ _inCAAAAKHp_(GeomEnums::UsageHint usage_hint) ==> TextNode$_$set_usage_hint(TextNode *param0, GeomEnums::UsageHint param1)(TextNode *, GeomEnums::UsageHint)
extern void TextNode$52$set_usage_hint(TextNode *self, GeomEnums$_UsageHint usage_hint);

#if INDEX
#define TextNode_C_set_usage_hint_v_pp TextNode$52$set_usage_hint
#endif

// C++ _inCAAAAWHkr() ==> TextNode$_$get_usage_hint(TextNode const *param0)(TextNode const *)
extern GeomEnums$_UsageHint TextNode$53$get_usage_hint(TextNode const *self);

#if INDEX
#define TextNode_C_get_usage_hint_p_p TextNode$53$get_usage_hint
#endif

// C++ _inCAAAA9YIA(int flatten_flags) ==> TextNode$_$set_flatten_flags(TextNode *param0, int param1)(TextNode *, int)
extern void TextNode$54$set_flatten_flags(TextNode *self, int flatten_flags);

#if INDEX
#define TextNode_C_set_flatten_flags_v_pi TextNode$54$set_flatten_flags
#endif

// C++ _inCAAAAF_2G() ==> TextNode$_$get_flatten_flags(TextNode const *param0)(TextNode const *)
extern int TextNode$55$get_flatten_flags(TextNode const *self);

#if INDEX
#define TextNode_C_get_flatten_flags_i_p TextNode$55$get_flatten_flags
#endif

// C++ _inCAAAAGF3a(TextFont *font) ==> TextNode$_$set_font(TextNode *param0, TextFont *param1)(TextNode *, TextFont *)
extern void TextNode$56$set_font(TextNode *self, TextFont *font);

#if INDEX
#define TextNode_C_set_font_v_pp TextNode$56$set_font
#endif

// C++ _inCAAAAf1JB() ==> TextNode$_$clear_font(TextNode *param0)(TextNode *)
extern void TextNode$57$clear_font(TextNode *self);

#if INDEX
#define TextNode_C_clear_font_v_p TextNode$57$clear_font
#endif

// C++ _inCAAAA_Vg7(bool small_caps) ==> TextNode$_$set_small_caps(TextNode *param0, bool param1)(TextNode *, bool)
extern void TextNode$58$set_small_caps(TextNode *self, bool small_caps);

#if INDEX
#define TextNode_C_set_small_caps_v_pB TextNode$58$set_small_caps
#endif

// C++ _inCAAAAwdub() ==> TextNode$_$clear_small_caps(TextNode *param0)(TextNode *)
extern void TextNode$59$clear_small_caps(TextNode *self);

#if INDEX
#define TextNode_C_clear_small_caps_v_p TextNode$59$clear_small_caps
#endif

// C++ _inCAAAAcewH(PN_stdfloat small_caps_scale) ==> TextNode$_$set_small_caps_scale(TextNode *param0, PN_stdfloat param1)(TextNode *, PN_stdfloat)
extern void TextNode$60$set_small_caps_scale(TextNode *self, PN_stdfloat small_caps_scale);

#if INDEX
#define TextNode_C_set_small_caps_scale_v_pf TextNode$60$set_small_caps_scale
#endif

// C++ _inCAAAAINuw() ==> TextNode$_$clear_small_caps_scale(TextNode *param0)(TextNode *)
extern void TextNode$61$clear_small_caps_scale(TextNode *self);

#if INDEX
#define TextNode_C_clear_small_caps_scale_v_p TextNode$61$clear_small_caps_scale
#endif

// C++ _inCAAAAZ_wx(PN_stdfloat slant) ==> TextNode$_$set_slant(TextNode *param0, PN_stdfloat param1)(TextNode *, PN_stdfloat)
extern void TextNode$62$set_slant(TextNode *self, PN_stdfloat slant);

#if INDEX
#define TextNode_C_set_slant_v_pf TextNode$62$set_slant
#endif

// C++ _inCAAAASyQo() ==> TextNode$_$clear_slant(TextNode *param0)(TextNode *)
extern void TextNode$63$clear_slant(TextNode *self);

#if INDEX
#define TextNode_C_clear_slant_v_p TextNode$63$clear_slant
#endif

// C++ _inCAAAALgJS(TextProperties::Alignment align_type) ==> TextNode$_$set_align(TextNode *param0, TextProperties::Alignment param1)(TextNode *, TextProperties::Alignment)
extern void TextNode$64$set_align(TextNode *self, TextProperties$_Alignment align_type);

#if INDEX
#define TextNode_C_set_align_v_pp TextNode$64$set_align
#endif

// C++ _inCAAAA6Qem() ==> TextNode$_$clear_align(TextNode *param0)(TextNode *)
extern void TextNode$65$clear_align(TextNode *self);

#if INDEX
#define TextNode_C_clear_align_v_p TextNode$65$clear_align
#endif

// C++ _inCAAAAjQ8U(PN_stdfloat indent) ==> TextNode$_$set_indent(TextNode *param0, PN_stdfloat param1)(TextNode *, PN_stdfloat)
extern void TextNode$66$set_indent(TextNode *self, PN_stdfloat indent);

#if INDEX
#define TextNode_C_set_indent_v_pf TextNode$66$set_indent
#endif

// C++ _inCAAAAmAkO() ==> TextNode$_$clear_indent(TextNode *param0)(TextNode *)
extern void TextNode$67$clear_indent(TextNode *self);

#if INDEX
#define TextNode_C_clear_indent_v_p TextNode$67$clear_indent
#endif

// C++ _inCAAAAjaVm(PN_stdfloat wordwrap) ==> TextNode$_$set_wordwrap(TextNode *param0, PN_stdfloat param1)(TextNode *, PN_stdfloat)
extern void TextNode$68$set_wordwrap(TextNode *self, PN_stdfloat wordwrap);

#if INDEX
#define TextNode_C_set_wordwrap_v_pf TextNode$68$set_wordwrap
#endif

// C++ _inCAAAAfZHt() ==> TextNode$_$clear_wordwrap(TextNode *param0)(TextNode *)
extern void TextNode$69$clear_wordwrap(TextNode *self);

#if INDEX
#define TextNode_C_clear_wordwrap_v_p TextNode$69$clear_wordwrap
#endif

// C++ _inCAAAAlnaw(LColor const &text_color) ==> TextNode$_$set_text_color(TextNode *param0, LColor const *param1)(TextNode *, LColor const *)
extern void TextNode$70$set_text_color(TextNode *self, LColor const *text_color);

#if INDEX
#define TextNode_C_set_text_color_v_pp TextNode$70$set_text_color
#endif

// C++ _inCAAAAZwFB(PN_stdfloat r, PN_stdfloat g, PN_stdfloat b, PN_stdfloat a) ==> TextNode$_$set_text_color(TextNode *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4)(TextNode *, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void TextNode$71$set_text_color(TextNode *self, PN_stdfloat r, PN_stdfloat g, PN_stdfloat b, PN_stdfloat a);

#if INDEX
#define TextNode_C_set_text_color_v_pffff TextNode$71$set_text_color
#endif

// C++ _inCAAAArIpB() ==> TextNode$_$clear_text_color(TextNode *param0)(TextNode *)
extern void TextNode$72$clear_text_color(TextNode *self);

#if INDEX
#define TextNode_C_clear_text_color_v_p TextNode$72$clear_text_color
#endif

// C++ _inCAAAAiDPR(LColor const &shadow_color) ==> TextNode$_$set_shadow_color(TextNode *param0, LColor const *param1)(TextNode *, LColor const *)
extern void TextNode$73$set_shadow_color(TextNode *self, LColor const *shadow_color);

#if INDEX
#define TextNode_C_set_shadow_color_v_pp TextNode$73$set_shadow_color
#endif

// C++ _inCAAAA5Kz9eNL_(PN_stdfloat r, PN_stdfloat g, PN_stdfloat b, PN_stdfloat a) ==> TextNode$_$set_shadow_color(TextNode *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4)(TextNode *, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void TextNode$74$set_shadow_color(TextNode *self, PN_stdfloat r, PN_stdfloat g, PN_stdfloat b, PN_stdfloat a);

#if INDEX
#define TextNode_C_set_shadow_color_v_pffff TextNode$74$set_shadow_color
#endif

// C++ _inCAAAAy9rr() ==> TextNode$_$clear_shadow_color(TextNode *param0)(TextNode *)
extern void TextNode$75$clear_shadow_color(TextNode *self);

#if INDEX
#define TextNode_C_clear_shadow_color_v_p TextNode$75$clear_shadow_color
#endif

// C++ _inCAAAAA35d(LVecBase2 const &shadow_offset) ==> TextNode$_$set_shadow(TextNode *param0, LVecBase2 const *param1)(TextNode *, LVecBase2 const *)
extern void TextNode$76$set_shadow(TextNode *self, LVecBase2 const *shadow_offset);

#if INDEX
#define TextNode_C_set_shadow_v_pp TextNode$76$set_shadow
#endif

// C++ _inCAAAApi9v(PN_stdfloat xoffset, PN_stdfloat yoffset) ==> TextNode$_$set_shadow(TextNode *param0, PN_stdfloat param1, PN_stdfloat param2)(TextNode *, PN_stdfloat, PN_stdfloat)
extern void TextNode$77$set_shadow(TextNode *self, PN_stdfloat xoffset, PN_stdfloat yoffset);

#if INDEX
#define TextNode_C_set_shadow_v_pff TextNode$77$set_shadow
#endif

// C++ _inCAAAA7Hq_() ==> TextNode$_$clear_shadow(TextNode *param0)(TextNode *)
extern void TextNode$78$clear_shadow(TextNode *self);

#if INDEX
#define TextNode_C_clear_shadow_v_p TextNode$78$clear_shadow
#endif

// C++ _inCAAAAHKtR(std::string const &bin) ==> TextNode$_$set_bin(TextNode *param0, char const *param1)(TextNode *, char const *)
extern void TextNode$79$set_bin(TextNode *self, char const *bin);

#if INDEX
#define TextNode_C_set_bin_v_ps TextNode$79$set_bin
#endif

// C++ _inCAAAAvUkz() ==> TextNode$_$clear_bin(TextNode *param0)(TextNode *)
extern void TextNode$80$clear_bin(TextNode *self);

#if INDEX
#define TextNode_C_clear_bin_v_p TextNode$80$clear_bin
#endif

// C++ _inCAAAARbS_(int draw_order) ==> TextNode$_$set_draw_order(TextNode *param0, int param1)(TextNode *, int)
extern int TextNode$81$set_draw_order(TextNode *self, int draw_order);

#if INDEX
#define TextNode_C_set_draw_order_i_pi TextNode$81$set_draw_order
#endif

// C++ _inCAAAAejrP() ==> TextNode$_$clear_draw_order(TextNode *param0)(TextNode *)
extern void TextNode$82$clear_draw_order(TextNode *self);

#if INDEX
#define TextNode_C_clear_draw_order_v_p TextNode$82$clear_draw_order
#endif

// C++ _inCAAAAnlyI(PN_stdfloat tab_width) ==> TextNode$_$set_tab_width(TextNode *param0, PN_stdfloat param1)(TextNode *, PN_stdfloat)
extern void TextNode$83$set_tab_width(TextNode *self, PN_stdfloat tab_width);

#if INDEX
#define TextNode_C_set_tab_width_v_pf TextNode$83$set_tab_width
#endif

// C++ _inCAAAAELAu() ==> TextNode$_$clear_tab_width(TextNode *param0)(TextNode *)
extern void TextNode$84$clear_tab_width(TextNode *self);

#if INDEX
#define TextNode_C_clear_tab_width_v_p TextNode$84$clear_tab_width
#endif

// C++ _inCAAAAVnvC(PN_stdfloat glyph_scale) ==> TextNode$_$set_glyph_scale(TextNode *param0, PN_stdfloat param1)(TextNode *, PN_stdfloat)
extern void TextNode$85$set_glyph_scale(TextNode *self, PN_stdfloat glyph_scale);

#if INDEX
#define TextNode_C_set_glyph_scale_v_pf TextNode$85$set_glyph_scale
#endif

// C++ _inCAAAAQ6h8() ==> TextNode$_$clear_glyph_scale(TextNode *param0)(TextNode *)
extern void TextNode$86$clear_glyph_scale(TextNode *self);

#if INDEX
#define TextNode_C_clear_glyph_scale_v_p TextNode$86$clear_glyph_scale
#endif

// C++ _inCAAAA3SXj(PN_stdfloat glyph_shift) ==> TextNode$_$set_glyph_shift(TextNode *param0, PN_stdfloat param1)(TextNode *, PN_stdfloat)
extern void TextNode$87$set_glyph_shift(TextNode *self, PN_stdfloat glyph_shift);

#if INDEX
#define TextNode_C_set_glyph_shift_v_pf TextNode$87$set_glyph_shift
#endif

// C++ _inCAAAAa77j() ==> TextNode$_$clear_glyph_shift(TextNode *param0)(TextNode *)
extern void TextNode$88$clear_glyph_shift(TextNode *self);

#if INDEX
#define TextNode_C_clear_glyph_shift_v_p TextNode$88$clear_glyph_shift
#endif

// C++ _inCAAAAwRGG() ==> TextNode$_$get_wordwrapped_text(TextNode const *param0)(TextNode const *)
extern char const * TextNode$89$get_wordwrapped_text(TextNode const *self);

#if INDEX
#define TextNode_C_get_wordwrapped_text_s_p TextNode$89$get_wordwrapped_text
#endif

// C++ _inCAAAA2HIN(std::string const &line) ==> TextNode$_$calc_width(TextNode const *param0, char const *param1)(TextNode const *, char const *)
extern PN_stdfloat TextNode$90$calc_width(TextNode const *self, char const *line);

#if INDEX
#define TextNode_C_calc_width_f_ps TextNode$90$calc_width
#endif

// C++ _inCAAAAAkYO(std::wstring const &line) ==> TextNode$_$calc_width(TextNode const *param0, wchar_t const *param1)(TextNode const *, wchar_t const *)
extern PN_stdfloat TextNode$91$calc_width(TextNode const *self, wchar_t const *line);
// COLLISION : TextNode_C_calc_width_f_ps TextNode$91$calc_width

// C++ _inCAAAAYwcF(wchar_t character) ==> TextNode$_$calc_width(TextNode const *param0, wchar_t param1)(TextNode const *, wchar_t)
extern PN_stdfloat TextNode$92$calc_width(TextNode const *self, wchar_t character);

#if INDEX
#define TextNode_C_calc_width_f_pp TextNode$92$calc_width
#endif

// C++ _inCAAAAB1x6(wchar_t character) ==> TextNode$_$has_exact_character(TextNode const *param0, wchar_t param1)(TextNode const *, wchar_t)
extern bool TextNode$93$has_exact_character(TextNode const *self, wchar_t character);

#if INDEX
#define TextNode_C_has_exact_character_B_pp TextNode$93$has_exact_character
#endif

// C++ _inCAAAAD8Op(wchar_t character) ==> TextNode$_$has_character(TextNode const *param0, wchar_t param1)(TextNode const *, wchar_t)
extern bool TextNode$94$has_character(TextNode const *self, wchar_t character);

#if INDEX
#define TextNode_C_has_character_B_pp TextNode$94$has_character
#endif

// C++ _inCAAAAwDRU(wchar_t character) ==> TextNode$_$is_whitespace(TextNode const *param0, wchar_t param1)(TextNode const *, wchar_t)
extern bool TextNode$95$is_whitespace(TextNode const *self, wchar_t character);

#if INDEX
#define TextNode_C_is_whitespace_B_pp TextNode$95$is_whitespace
#endif

// C++ _inCAAAAFiQ_() ==> TextNode$_$get_wordwrapped_wtext(TextNode const *param0)(TextNode const *)
extern wchar_t const * TextNode$96$get_wordwrapped_wtext(TextNode const *self);

#if INDEX
#define TextNode_C_get_wordwrapped_wtext_s_p TextNode$96$get_wordwrapped_wtext
#endif

// C++ _inCAAAAiuLN(std::ostream &out) ==> TextNode$_$output(TextNode const *param0, std::ostream *param1)(TextNode const *, std::ostream *)
extern void TextNode$97$output(TextNode const *self, std$_ostream *out);

#if INDEX
#define TextNode_C_output_v_pp TextNode$97$output
#endif

// C++ _inCAAAA5xZa(std::ostream &out, int indent_level) ==> TextNode$_$write(TextNode const *param0, std::ostream *param1, int param2)(TextNode const *, std::ostream *, int)
extern void TextNode$98$write(TextNode const *self, std$_ostream *out, int indent_level);

#if INDEX
#define TextNode_C_write_v_ppi TextNode$98$write
#endif

// C++ _inCAAAAb_Bj(std::ostream &out) ==> TextNode$_$write(TextNode const *param0, std::ostream *param1)(TextNode const *, std::ostream *)
extern void TextNode$99$write(TextNode const *self, std$_ostream *out);

#if INDEX
#define TextNode_C_write_v_pp TextNode$99$write
#endif

// C++ _inCAAAAUosZ() ==> TextNode$_$get_left(TextNode const *param0)(TextNode const *)
extern PN_stdfloat TextNode$100$get_left(TextNode const *self);

#if INDEX
#define TextNode_C_get_left_f_p TextNode$100$get_left
#endif

// C++ _inCAAAAAxZW() ==> TextNode$_$get_right(TextNode const *param0)(TextNode const *)
extern PN_stdfloat TextNode$101$get_right(TextNode const *self);

#if INDEX
#define TextNode_C_get_right_f_p TextNode$101$get_right
#endif

// C++ _inCAAAAqsLg() ==> TextNode$_$get_bottom(TextNode const *param0)(TextNode const *)
extern PN_stdfloat TextNode$102$get_bottom(TextNode const *self);

#if INDEX
#define TextNode_C_get_bottom_f_p TextNode$102$get_bottom
#endif

// C++ _inCAAAAD4yi() ==> TextNode$_$get_top(TextNode const *param0)(TextNode const *)
extern PN_stdfloat TextNode$103$get_top(TextNode const *self);

#if INDEX
#define TextNode_C_get_top_f_p TextNode$103$get_top
#endif

// C++ _inCAAAApjNJ() ==> TextNode$_$get_height(TextNode const *param0)(TextNode const *)
extern PN_stdfloat TextNode$104$get_height(TextNode const *self);

#if INDEX
#define TextNode_C_get_height_f_p TextNode$104$get_height
#endif

// C++ _inCAAAAW_Z2() ==> TextNode$_$get_width(TextNode const *param0)(TextNode const *)
extern PN_stdfloat TextNode$105$get_width(TextNode const *self);

#if INDEX
#define TextNode_C_get_width_f_p TextNode$105$get_width
#endif

// C++ _inCAAAAObuQ() ==> TextNode$_$get_upper_left_3d(TextNode const *param0)(TextNode const *)
extern LPoint3 * TextNode$106$get_upper_left_3d(TextNode const *self);

#if INDEX
#define TextNode_C_get_upper_left_3d_p_p TextNode$106$get_upper_left_3d
#endif

// C++ _inCAAAAz0ox() ==> TextNode$_$get_lower_right_3d(TextNode const *param0)(TextNode const *)
extern LPoint3 * TextNode$107$get_lower_right_3d(TextNode const *self);

#if INDEX
#define TextNode_C_get_lower_right_3d_p_p TextNode$107$get_lower_right_3d
#endif

// C++ _inCAAAA4Pci() ==> TextNode$_$get_num_rows(TextNode const *param0)(TextNode const *)
extern int TextNode$108$get_num_rows(TextNode const *self);

#if INDEX
#define TextNode_C_get_num_rows_i_p TextNode$108$get_num_rows
#endif

// C++ _inCAAAAfMjA() ==> TextNode$_$generate(TextNode *param0)(TextNode *)
extern char ** TextNode$109$generate(TextNode *self);

#if INDEX
#define TextNode_C_generate_p_p TextNode$109$generate
#endif

// C++ _inCAAAAg9eZ() ==> TextNode$_$update(TextNode *param0)(TextNode *)
extern void TextNode$110$update(TextNode *self);

#if INDEX
#define TextNode_C_update_v_p TextNode$110$update
#endif

// C++ _inCAAAAZ_1G() ==> TextNode$_$force_update(TextNode *param0)(TextNode *)
extern void TextNode$111$force_update(TextNode *self);

#if INDEX
#define TextNode_C_force_update_v_p TextNode$111$force_update
#endif

// C++ _inCAAAAoCcY() ==> TextNode$_$get_internal_geom(TextNode const *param0)(TextNode const *)
extern char ** TextNode$112$get_internal_geom(TextNode const *self);

#if INDEX
#define TextNode_C_get_internal_geom_p_p TextNode$112$get_internal_geom
#endif

// C++ _inCAAAAOzPi() ==> TextNode$_$get_font(TextNode const *param0)(TextNode const *)
extern TextFont * TextNode$113$get_font(TextNode const *self);

#if INDEX
#define TextNode_C_get_font_p_p TextNode$113$get_font
#endif

// C++ _inCAAAA1K_b() ==> TextNode$_$get_small_caps(TextNode const *param0)(TextNode const *)
extern bool TextNode$114$get_small_caps(TextNode const *self);

#if INDEX
#define TextNode_C_get_small_caps_B_p TextNode$114$get_small_caps
#endif

// C++ _inCAAAAdTjF() ==> TextNode$_$get_small_caps_scale(TextNode const *param0)(TextNode const *)
extern PN_stdfloat TextNode$115$get_small_caps_scale(TextNode const *self);

#if INDEX
#define TextNode_C_get_small_caps_scale_f_p TextNode$115$get_small_caps_scale
#endif

// C++ _inCAAAAY44S() ==> TextNode$_$get_slant(TextNode const *param0)(TextNode const *)
extern PN_stdfloat TextNode$116$get_slant(TextNode const *self);

#if INDEX
#define TextNode_C_get_slant_f_p TextNode$116$get_slant
#endif

// C++ _inCAAAAwWBl() ==> TextNode$_$get_underscore(TextNode const *param0)(TextNode const *)
extern bool TextNode$117$get_underscore(TextNode const *self);

#if INDEX
#define TextNode_C_get_underscore_B_p TextNode$117$get_underscore
#endif

// C++ _inCAAAAiJjE(bool underscore) ==> TextNode$_$set_underscore(TextNode *param0, bool param1)(TextNode *, bool)
extern void TextNode$118$set_underscore(TextNode *self, bool underscore);

#if INDEX
#define TextNode_C_set_underscore_v_pB TextNode$118$set_underscore
#endif

// C++ _inCAAAAD4Zf() ==> TextNode$_$get_underscore_height(TextNode const *param0)(TextNode const *)
extern PN_stdfloat TextNode$119$get_underscore_height(TextNode const *self);

#if INDEX
#define TextNode_C_get_underscore_height_f_p TextNode$119$get_underscore_height
#endif

// C++ _inCAAAAfIKK(PN_stdfloat underscore_height) ==> TextNode$_$set_underscore_height(TextNode *param0, PN_stdfloat param1)(TextNode *, PN_stdfloat)
extern void TextNode$120$set_underscore_height(TextNode *self, PN_stdfloat underscore_height);

#if INDEX
#define TextNode_C_set_underscore_height_v_pf TextNode$120$set_underscore_height
#endif

// C++ _inCAAAACwVq() ==> TextNode$_$get_align(TextNode const *param0)(TextNode const *)
extern TextProperties$_Alignment TextNode$121$get_align(TextNode const *self);

#if INDEX
#define TextNode_C_get_align_p_p TextNode$121$get_align
#endif

// C++ _inCAAAAySvT() ==> TextNode$_$get_indent(TextNode const *param0)(TextNode const *)
extern PN_stdfloat TextNode$122$get_indent(TextNode const *self);

#if INDEX
#define TextNode_C_get_indent_f_p TextNode$122$get_indent
#endif

// C++ _inCAAAAdsHW() ==> TextNode$_$get_wordwrap(TextNode const *param0)(TextNode const *)
extern PN_stdfloat TextNode$123$get_wordwrap(TextNode const *self);

#if INDEX
#define TextNode_C_get_wordwrap_f_p TextNode$123$get_wordwrap
#endif

// C++ _inCAAAAKa1s() ==> TextNode$_$get_preserve_trailing_whitespace(TextNode const *param0)(TextNode const *)
extern bool TextNode$124$get_preserve_trailing_whitespace(TextNode const *self);

#if INDEX
#define TextNode_C_get_preserve_trailing_whitespace_B_p TextNode$124$get_preserve_trailing_whitespace
#endif

// C++ _inCAAAAJnOj(bool preserve_trailing_whitespace) ==> TextNode$_$set_preserve_trailing_whitespace(TextNode *param0, bool param1)(TextNode *, bool)
extern void TextNode$125$set_preserve_trailing_whitespace(TextNode *self, bool preserve_trailing_whitespace);

#if INDEX
#define TextNode_C_set_preserve_trailing_whitespace_v_pB TextNode$125$set_preserve_trailing_whitespace
#endif

// C++ _inCAAAAIsdq() ==> TextNode$_$get_text_color(TextNode const *param0)(TextNode const *)
extern LColor * TextNode$126$get_text_color(TextNode const *self);

#if INDEX
#define TextNode_C_get_text_color_p_p TextNode$126$get_text_color
#endif

// C++ _inCAAAA1Suz() ==> TextNode$_$get_shadow_color(TextNode const *param0)(TextNode const *)
extern LColor * TextNode$127$get_shadow_color(TextNode const *self);

#if INDEX
#define TextNode_C_get_shadow_color_p_p TextNode$127$get_shadow_color
#endif

// C++ _inCAAAA4iBv() ==> TextNode$_$get_shadow(TextNode const *param0)(TextNode const *)
extern LVector2 * TextNode$128$get_shadow(TextNode const *self);

#if INDEX
#define TextNode_C_get_shadow_p_p TextNode$128$get_shadow
#endif

// C++ _inCAAAAsPA4() ==> TextNode$_$get_bin(TextNode const *param0)(TextNode const *)
extern char const * TextNode$129$get_bin(TextNode const *self);

#if INDEX
#define TextNode_C_get_bin_s_p TextNode$129$get_bin
#endif

// C++ _inCAAAA2mSP() ==> TextNode$_$get_draw_order(TextNode const *param0)(TextNode const *)
extern int TextNode$130$get_draw_order(TextNode const *self);

#if INDEX
#define TextNode_C_get_draw_order_i_p TextNode$130$get_draw_order
#endif

// C++ _inCAAAAfSAe() ==> TextNode$_$get_tab_width(TextNode const *param0)(TextNode const *)
extern PN_stdfloat TextNode$131$get_tab_width(TextNode const *self);

#if INDEX
#define TextNode_C_get_tab_width_f_p TextNode$131$get_tab_width
#endif

// C++ _inCAAAA1rNB() ==> TextNode$_$get_glyph_scale(TextNode const *param0)(TextNode const *)
extern PN_stdfloat TextNode$132$get_glyph_scale(TextNode const *self);

#if INDEX
#define TextNode_C_get_glyph_scale_f_p TextNode$132$get_glyph_scale
#endif

// C++ _inCAAAAegzh() ==> TextNode$_$get_glyph_shift(TextNode const *param0)(TextNode const *)
extern PN_stdfloat TextNode$133$get_glyph_shift(TextNode const *self);

#if INDEX
#define TextNode_C_get_glyph_shift_f_p TextNode$133$get_glyph_shift
#endif

// C++ _inCAAAAIyOc() ==> TextNode$_$get_text_scale(TextNode const *param0)(TextNode const *)
extern PN_stdfloat TextNode$134$get_text_scale(TextNode const *self);

#if INDEX
#define TextNode_C_get_text_scale_f_p TextNode$134$get_text_scale
#endif

// C++ _inCAAAACdLZ(PN_stdfloat text_scale) ==> TextNode$_$set_text_scale(TextNode *param0, PN_stdfloat param1)(TextNode *, PN_stdfloat)
extern void TextNode$135$set_text_scale(TextNode *self, PN_stdfloat text_scale);

#if INDEX
#define TextNode_C_set_text_scale_v_pf TextNode$135$set_text_scale
#endif

// C++ _inCAAAA9yNx() ==> TextNode$_$text_changed(TextNode *param0)(TextNode *)
extern void TextNode$136$text_changed(TextNode *self);

#if INDEX
#define TextNode_C_text_changed_v_p TextNode$136$text_changed
#endif

// C++ _inCAAAA8FrL() ==> TextNode$_$get_unsafe_to_apply_attribs(TextNode const *param0)(TextNode const *)
extern int TextNode$137$get_unsafe_to_apply_attribs(TextNode const *self);

#if INDEX
#define TextNode_C_get_unsafe_to_apply_attribs_i_p TextNode$137$get_unsafe_to_apply_attribs
#endif

// C++ _inCAAAA7sCM(AccumulatedAttribs const &attribs, int attrib_types, GeomTransformer &transformer) ==> TextNode$_$apply_attribs_to_vertices(TextNode *param0, AccumulatedAttribs const *param1, int param2, GeomTransformer *param3)(TextNode *, AccumulatedAttribs const *, int, GeomTransformer *)
extern void TextNode$138$apply_attribs_to_vertices(TextNode *self, AccumulatedAttribs const *attribs, int attrib_types, GeomTransformer *transformer);

#if INDEX
#define TextNode_C_apply_attribs_to_vertices_v_ppip TextNode$138$apply_attribs_to_vertices
#endif

// C++ _inCAAAAAEhG(CullTraverser *trav, CullTraverserData &data) ==> TextNode$_$cull_callback(TextNode *param0, CullTraverser *param1, CullTraverserData *param2)(TextNode *, CullTraverser *, CullTraverserData *)
extern bool TextNode$139$cull_callback(TextNode *self, CullTraverser *trav, CullTraverserData *data);

#if INDEX
#define TextNode_C_cull_callback_B_ppp TextNode$139$cull_callback
#endif

// C++ _inCAAAAweZk() ==> TextNode$_$is_renderable(TextNode const *param0)(TextNode const *)
extern bool TextNode$140$is_renderable(TextNode const *self);

#if INDEX
#define TextNode_C_is_renderable_B_p TextNode$140$is_renderable
#endif

// C++ _inCAAAAHhuL(GraphicsStateGuardianBase *gsg, RenderState const *node_state, GeomTransformer &transformer, Thread *current_thread) ==> TextNode$_$r_prepare_scene(TextNode *param0, GraphicsStateGuardianBase *param1, RenderState const *param2, GeomTransformer *param3, Thread *param4)(TextNode *, GraphicsStateGuardianBase *, RenderState const *, GeomTransformer *, Thread *)
extern void TextNode$141$r_prepare_scene(TextNode *self, GraphicsStateGuardianBase *gsg, RenderState const *node_state, GeomTransformer *transformer, Thread *current_thread);

#if INDEX
#define TextNode_C_r_prepare_scene_v_ppppp TextNode$141$r_prepare_scene
#endif

// C++ _inCAAAAxuS_() ==> TextNode$_$get_class_type()()
extern int TextNode$142$get_class_type(void);

#if INDEX
#define TextNode_C_get_class_type_i_v TextNode$142$get_class_type
#endif

// C++ _inCAAAApRwd() ==> TextNode$_$init_type()()
extern void TextNode$143$init_type(void);

#if INDEX
#define TextNode_C_init_type_v_v TextNode$143$init_type
#endif

// C++ _inCAAAACyUm() ==> TextNode$_$get_type(TextNode const *param0)(TextNode const *)
extern int TextNode$144$get_type(TextNode const *self);

#if INDEX
#define TextNode_C_get_type_i_p TextNode$144$get_type
#endif

// C++ _inCAAAAapeb() ==> TextNode$_$force_init_type(TextNode *param0)(TextNode *)
extern int TextNode$145$force_init_type(TextNode *self);

#if INDEX
#define TextNode_C_force_init_type_i_p TextNode$145$force_init_type
#endif


// TextProperties

// C++ _inCAAAAzq3d() ==> TextProperties$_$downcast_to_TextNode(TextProperties *param0)(TextProperties *)
extern TextNode * TextProperties$1$downcast_to_TextNode(TextProperties *self);

#if INDEX
#define TextProperties_C_downcast_to_TextNode_p_p TextProperties$1$downcast_to_TextNode
#endif


// Texture

// C++ _inCAAAAYako() ==> Texture$_$upcast_to_TypedWritableReferenceCount(Texture *param0)(Texture *)
extern TypedWritableReferenceCount * Texture$1$upcast_to_TypedWritableReferenceCount(Texture *self);

#if INDEX
#define Texture_C_upcast_to_TypedWritableReferenceCount_p_p Texture$1$upcast_to_TypedWritableReferenceCount
#endif

// C++ _inCAAAAOTYU() ==> Texture$_$upcast_to_Namable(Texture *param0)(Texture *)
extern Namable * Texture$2$upcast_to_Namable(Texture *self);

#if INDEX
#define Texture_C_upcast_to_Namable_p_p Texture$2$upcast_to_Namable
#endif

// C++ _inCAAAAvZj1(std::string const &name) ==> Texture$_$Texture(char const *param0)(char const *)
extern Texture * Texture$3$Texture(char const *name);

#if INDEX
#define Texture_C_ctor_p_s Texture$3$Texture
#endif

// C++ _inCAAAAN0nZ() ==> Texture$_$Texture()()
extern Texture * Texture$4$Texture(void);

#if INDEX
#define Texture_C_ctor_p_v Texture$4$Texture
#endif

// C++ _inCAAAAdxyB() ==> Texture$_$make_copy(Texture const *param0)(Texture const *)
extern char ** Texture$5$make_copy(Texture const *self);

#if INDEX
#define Texture_C_make_copy_p_p Texture$5$make_copy
#endif

// C++ _inCAAAAadfr() ==> Texture$_$clear(Texture *param0)(Texture *)
extern void Texture$6$clear(Texture *self);

#if INDEX
#define Texture_C_clear_v_p Texture$6$clear
#endif

// C++ _inCAAAAkdtv(Texture::TextureType texture_type, int x_size, int y_size, int z_size, Texture::ComponentType component_type, Texture::Format format) ==> Texture$_$setup_texture(Texture *param0, Texture::TextureType param1, int param2, int param3, int param4, Texture::ComponentType param5, Texture::Format param6)(Texture *, Texture::TextureType, int, int, int, Texture::ComponentType, Texture::Format)
extern void Texture$7$setup_texture(Texture *self, Texture$_TextureType texture_type, int x_size, int y_size, int z_size, Texture$_ComponentType component_type, Texture$_Format format);

#if INDEX
#define Texture_C_setup_texture_v_ppiiipp Texture$7$setup_texture
#endif

// C++ _inCAAAA3hn1() ==> Texture$_$setup_1d_texture(Texture *param0)(Texture *)
extern void Texture$8$setup_1d_texture(Texture *self);

#if INDEX
#define Texture_C_setup_1d_texture_v_p Texture$8$setup_1d_texture
#endif

// C++ _inCAAAAVMou(int x_size, Texture::ComponentType component_type, Texture::Format format) ==> Texture$_$setup_1d_texture(Texture *param0, int param1, Texture::ComponentType param2, Texture::Format param3)(Texture *, int, Texture::ComponentType, Texture::Format)
extern void Texture$9$setup_1d_texture(Texture *self, int x_size, Texture$_ComponentType component_type, Texture$_Format format);

#if INDEX
#define Texture_C_setup_1d_texture_v_pipp Texture$9$setup_1d_texture
#endif

// C++ _inCAAAA_Wx1() ==> Texture$_$setup_2d_texture(Texture *param0)(Texture *)
extern void Texture$10$setup_2d_texture(Texture *self);

#if INDEX
#define Texture_C_setup_2d_texture_v_p Texture$10$setup_2d_texture
#endif

// C++ _inCAAAAHAEk(int x_size, int y_size, Texture::ComponentType component_type, Texture::Format format) ==> Texture$_$setup_2d_texture(Texture *param0, int param1, int param2, Texture::ComponentType param3, Texture::Format param4)(Texture *, int, int, Texture::ComponentType, Texture::Format)
extern void Texture$11$setup_2d_texture(Texture *self, int x_size, int y_size, Texture$_ComponentType component_type, Texture$_Format format);

#if INDEX
#define Texture_C_setup_2d_texture_v_piipp Texture$11$setup_2d_texture
#endif

// C++ _inCAAAA31mJ(int z_size) ==> Texture$_$setup_3d_texture(Texture *param0, int param1)(Texture *, int)
extern void Texture$12$setup_3d_texture(Texture *self, int z_size);

#if INDEX
#define Texture_C_setup_3d_texture_v_pi Texture$12$setup_3d_texture
#endif

// C++ _inCAAAAnH71() ==> Texture$_$setup_3d_texture(Texture *param0)(Texture *)
extern void Texture$13$setup_3d_texture(Texture *self);

#if INDEX
#define Texture_C_setup_3d_texture_v_p Texture$13$setup_3d_texture
#endif

// C++ _inCAAAAlbzO(int x_size, int y_size, int z_size, Texture::ComponentType component_type, Texture::Format format) ==> Texture$_$setup_3d_texture(Texture *param0, int param1, int param2, int param3, Texture::ComponentType param4, Texture::Format param5)(Texture *, int, int, int, Texture::ComponentType, Texture::Format)
extern void Texture$14$setup_3d_texture(Texture *self, int x_size, int y_size, int z_size, Texture$_ComponentType component_type, Texture$_Format format);

#if INDEX
#define Texture_C_setup_3d_texture_v_piiipp Texture$14$setup_3d_texture
#endif

// C++ _inCAAAArJje() ==> Texture$_$setup_cube_map(Texture *param0)(Texture *)
extern void Texture$15$setup_cube_map(Texture *self);

#if INDEX
#define Texture_C_setup_cube_map_v_p Texture$15$setup_cube_map
#endif

// C++ _inCAAAAIwnH(int size, Texture::ComponentType component_type, Texture::Format format) ==> Texture$_$setup_cube_map(Texture *param0, int param1, Texture::ComponentType param2, Texture::Format param3)(Texture *, int, Texture::ComponentType, Texture::Format)
extern void Texture$16$setup_cube_map(Texture *self, int size, Texture$_ComponentType component_type, Texture$_Format format);

#if INDEX
#define Texture_C_setup_cube_map_v_pipp Texture$16$setup_cube_map
#endif

// C++ _inCAAAADjNf(int z_size) ==> Texture$_$setup_2d_texture_array(Texture *param0, int param1)(Texture *, int)
extern void Texture$17$setup_2d_texture_array(Texture *self, int z_size);

#if INDEX
#define Texture_C_setup_2d_texture_array_v_pi Texture$17$setup_2d_texture_array
#endif

// C++ _inCAAAAOrCy() ==> Texture$_$setup_2d_texture_array(Texture *param0)(Texture *)
extern void Texture$18$setup_2d_texture_array(Texture *self);

#if INDEX
#define Texture_C_setup_2d_texture_array_v_p Texture$18$setup_2d_texture_array
#endif

// C++ _inCAAAA9eC1(int x_size, int y_size, int z_size, Texture::ComponentType component_type, Texture::Format format) ==> Texture$_$setup_2d_texture_array(Texture *param0, int param1, int param2, int param3, Texture::ComponentType param4, Texture::Format param5)(Texture *, int, int, int, Texture::ComponentType, Texture::Format)
extern void Texture$19$setup_2d_texture_array(Texture *self, int x_size, int y_size, int z_size, Texture$_ComponentType component_type, Texture$_Format format);

#if INDEX
#define Texture_C_setup_2d_texture_array_v_piiipp Texture$19$setup_2d_texture_array
#endif

// C++ _inCAAAAz_Hn(int num_cube_maps) ==> Texture$_$setup_cube_map_array(Texture *param0, int param1)(Texture *, int)
extern void Texture$20$setup_cube_map_array(Texture *self, int num_cube_maps);

#if INDEX
#define Texture_C_setup_cube_map_array_v_pi Texture$20$setup_cube_map_array
#endif

// C++ _inCAAAAqtoM(int size, int num_cube_maps, Texture::ComponentType component_type, Texture::Format format) ==> Texture$_$setup_cube_map_array(Texture *param0, int param1, int param2, Texture::ComponentType param3, Texture::Format param4)(Texture *, int, int, Texture::ComponentType, Texture::Format)
extern void Texture$21$setup_cube_map_array(Texture *self, int size, int num_cube_maps, Texture$_ComponentType component_type, Texture$_Format format);

#if INDEX
#define Texture_C_setup_cube_map_array_v_piipp Texture$21$setup_cube_map_array
#endif

// C++ _inCAAAAsKbW(int size, Texture::ComponentType component_type, Texture::Format format, GeomEnums::UsageHint usage) ==> Texture$_$setup_buffer_texture(Texture *param0, int param1, Texture::ComponentType param2, Texture::Format param3, GeomEnums::UsageHint param4)(Texture *, int, Texture::ComponentType, Texture::Format, GeomEnums::UsageHint)
extern void Texture$22$setup_buffer_texture(Texture *self, int size, Texture$_ComponentType component_type, Texture$_Format format, GeomEnums$_UsageHint usage);

#if INDEX
#define Texture_C_setup_buffer_texture_v_pippp Texture$22$setup_buffer_texture
#endif

// C++ _inCAAAAAcPV(int size) ==> Texture$_$generate_normalization_cube_map(Texture *param0, int param1)(Texture *, int)
extern void Texture$23$generate_normalization_cube_map(Texture *self, int size);

#if INDEX
#define Texture_C_generate_normalization_cube_map_v_pi Texture$23$generate_normalization_cube_map
#endif

// C++ _inCAAAA8Ql8() ==> Texture$_$generate_alpha_scale_map(Texture *param0)(Texture *)
extern void Texture$24$generate_alpha_scale_map(Texture *self);

#if INDEX
#define Texture_C_generate_alpha_scale_map_v_p Texture$24$generate_alpha_scale_map
#endif

// C++ _inCAAAAeNUZ() ==> Texture$_$clear_image(Texture *param0)(Texture *)
extern void Texture$25$clear_image(Texture *self);

#if INDEX
#define Texture_C_clear_image_v_p Texture$25$clear_image
#endif

// C++ _inCAAAARoSP() ==> Texture$_$has_clear_color(Texture const *param0)(Texture const *)
extern bool Texture$26$has_clear_color(Texture const *self);

#if INDEX
#define Texture_C_has_clear_color_B_p Texture$26$has_clear_color
#endif

// C++ _inCAAAAZzAa() ==> Texture$_$get_clear_color(Texture const *param0)(Texture const *)
extern LColor * Texture$27$get_clear_color(Texture const *self);

#if INDEX
#define Texture_C_get_clear_color_p_p Texture$27$get_clear_color
#endif

// C++ _inCAAAAp1F_(LColor const &color) ==> Texture$_$set_clear_color(Texture *param0, LColor const *param1)(Texture *, LColor const *)
extern void Texture$28$set_clear_color(Texture *self, LColor const *color);

#if INDEX
#define Texture_C_set_clear_color_v_pp Texture$28$set_clear_color
#endif

// C++ _inCAAAAkh5K() ==> Texture$_$clear_clear_color(Texture *param0)(Texture *)
extern void Texture$29$clear_clear_color(Texture *self);

#if INDEX
#define Texture_C_clear_clear_color_v_p Texture$29$clear_clear_color
#endif

// C++ _inCAAAAj1I2() ==> Texture$_$get_clear_data(Texture const *param0)(Texture const *)
extern vector_uchar Texture$30$get_clear_data(Texture const *self);

#if INDEX
#define Texture_C_get_clear_data_p_p Texture$30$get_clear_data
#endif

// C++ _inCAAAAK0KH(Filename const &fullpath, Filename const &alpha_fullpath, int primary_file_num_channels, int alpha_file_channel, LoaderOptions const &options) ==> Texture$_$read(Texture *param0, Filename const *param1, Filename const *param2, int param3, int param4, LoaderOptions const *param5)(Texture *, Filename const *, Filename const *, int, int, LoaderOptions const *)
extern bool Texture$31$read(Texture *self, Filename const *fullpath, Filename const *alpha_fullpath, int primary_file_num_channels, int alpha_file_channel, LoaderOptions const *options);

#if INDEX
#define Texture_C_read_B_pppiip Texture$31$read
#endif

// C++ _inCAAAAoATv(Filename const &fullpath, Filename const &alpha_fullpath, int primary_file_num_channels, int alpha_file_channel) ==> Texture$_$read(Texture *param0, Filename const *param1, Filename const *param2, int param3, int param4)(Texture *, Filename const *, Filename const *, int, int)
extern bool Texture$32$read(Texture *self, Filename const *fullpath, Filename const *alpha_fullpath, int primary_file_num_channels, int alpha_file_channel);

#if INDEX
#define Texture_C_read_B_pppii Texture$32$read
#endif

// C++ _inCAAAAWYJ9(Filename const &fullpath, Filename const &alpha_fullpath, int primary_file_num_channels, int alpha_file_channel, int z, int n, bool read_pages, bool read_mipmaps, BamCacheRecord *record, LoaderOptions const &options) ==> Texture$_$read(Texture *param0, Filename const *param1, Filename const *param2, int param3, int param4, int param5, int param6, bool param7, bool param8, BamCacheRecord *param9, LoaderOptions const *param10)(Texture *, Filename const *, Filename const *, int, int, int, int, bool, bool, BamCacheRecord *, LoaderOptions const *)
extern bool Texture$33$read(Texture *self, Filename const *fullpath, Filename const *alpha_fullpath, int primary_file_num_channels, int alpha_file_channel, int z, int n, bool read_pages, bool read_mipmaps, BamCacheRecord *record, LoaderOptions const *options);

#if INDEX
#define Texture_C_read_B_pppiiiiBBpp Texture$33$read
#endif

// C++ _inCAAAAnxxV(Filename const &fullpath, Filename const &alpha_fullpath, int primary_file_num_channels, int alpha_file_channel, int z, int n, bool read_pages, bool read_mipmaps, BamCacheRecord *record) ==> Texture$_$read(Texture *param0, Filename const *param1, Filename const *param2, int param3, int param4, int param5, int param6, bool param7, bool param8, BamCacheRecord *param9)(Texture *, Filename const *, Filename const *, int, int, int, int, bool, bool, BamCacheRecord *)
extern bool Texture$34$read(Texture *self, Filename const *fullpath, Filename const *alpha_fullpath, int primary_file_num_channels, int alpha_file_channel, int z, int n, bool read_pages, bool read_mipmaps, BamCacheRecord *record);

#if INDEX
#define Texture_C_read_B_pppiiiiBBp Texture$34$read
#endif

// C++ _inCAAAAf347(Filename const &fullpath, Filename const &alpha_fullpath, int primary_file_num_channels, int alpha_file_channel, int z, int n, bool read_pages, bool read_mipmaps) ==> Texture$_$read(Texture *param0, Filename const *param1, Filename const *param2, int param3, int param4, int param5, int param6, bool param7, bool param8)(Texture *, Filename const *, Filename const *, int, int, int, int, bool, bool)
extern bool Texture$35$read(Texture *self, Filename const *fullpath, Filename const *alpha_fullpath, int primary_file_num_channels, int alpha_file_channel, int z, int n, bool read_pages, bool read_mipmaps);

#if INDEX
#define Texture_C_read_B_pppiiiiBB Texture$35$read
#endif

// C++ _inCAAAAgNgF(Filename const &fullpath, LoaderOptions const &options) ==> Texture$_$read(Texture *param0, Filename const *param1, LoaderOptions const *param2)(Texture *, Filename const *, LoaderOptions const *)
extern bool Texture$36$read(Texture *self, Filename const *fullpath, LoaderOptions const *options);

#if INDEX
#define Texture_C_read_B_ppp Texture$36$read
#endif

// C++ _inCAAAA3IDU(Filename const &fullpath) ==> Texture$_$read(Texture *param0, Filename const *param1)(Texture *, Filename const *)
extern bool Texture$37$read(Texture *self, Filename const *fullpath);

#if INDEX
#define Texture_C_read_B_pp Texture$37$read
#endif

// C++ _inCAAAAf1WO(Filename const &fullpath, int z, int n, bool read_pages, bool read_mipmaps, LoaderOptions const &options) ==> Texture$_$read(Texture *param0, Filename const *param1, int param2, int param3, bool param4, bool param5, LoaderOptions const *param6)(Texture *, Filename const *, int, int, bool, bool, LoaderOptions const *)
extern bool Texture$38$read(Texture *self, Filename const *fullpath, int z, int n, bool read_pages, bool read_mipmaps, LoaderOptions const *options);

#if INDEX
#define Texture_C_read_B_ppiiBBp Texture$38$read
#endif

// C++ _inCAAAA1czw(Filename const &fullpath, int z, int n, bool read_pages, bool read_mipmaps) ==> Texture$_$read(Texture *param0, Filename const *param1, int param2, int param3, bool param4, bool param5)(Texture *, Filename const *, int, int, bool, bool)
extern bool Texture$39$read(Texture *self, Filename const *fullpath, int z, int n, bool read_pages, bool read_mipmaps);

#if INDEX
#define Texture_C_read_B_ppiiBB Texture$39$read
#endif

// C++ _inCAAAAHtFt(Filename const &fullpath) ==> Texture$_$write(Texture *param0, Filename const *param1)(Texture *, Filename const *)
extern bool Texture$40$write(Texture *self, Filename const *fullpath);

#if INDEX
#define Texture_C_write_B_pp Texture$40$write
#endif

// C++ _inCAAAAyISG(Filename const &fullpath, int z, int n, bool write_pages, bool write_mipmaps) ==> Texture$_$write(Texture *param0, Filename const *param1, int param2, int param3, bool param4, bool param5)(Texture *, Filename const *, int, int, bool, bool)
extern bool Texture$41$write(Texture *self, Filename const *fullpath, int z, int n, bool write_pages, bool write_mipmaps);

#if INDEX
#define Texture_C_write_B_ppiiBB Texture$41$write
#endif

// C++ _inCAAAAOcp4(std::ostream &out, int indent_level) ==> Texture$_$write(Texture const *param0, std::ostream *param1, int param2)(Texture const *, std::ostream *, int)
extern void Texture$42$write(Texture const *self, std$_ostream *out, int indent_level);

#if INDEX
#define Texture_C_write_v_ppi Texture$42$write
#endif

// C++ _inCAAAAY7HF(std::istream &in, std::string const &filename) ==> Texture$_$read_txo(Texture *param0, std::istream *param1, char const *param2)(Texture *, std::istream *, char const *)
extern bool Texture$43$read_txo(Texture *self, std$_istream *in, char const *filename);

#if INDEX
#define Texture_C_read_txo_B_pps Texture$43$read_txo
#endif

// C++ _inCAAAAbYGl(std::istream &in) ==> Texture$_$read_txo(Texture *param0, std::istream *param1)(Texture *, std::istream *)
extern bool Texture$44$read_txo(Texture *self, std$_istream *in);

#if INDEX
#define Texture_C_read_txo_B_pp Texture$44$read_txo
#endif

// C++ _inCAAAAj6g6(std::istream &in, std::string const &filename) ==> Texture$_$make_from_txo(std::istream *param0, char const *param1)(std::istream *, char const *)
extern char ** Texture$45$make_from_txo(std$_istream *in, char const *filename);

#if INDEX
#define Texture_C_make_from_txo_p_ps Texture$45$make_from_txo
#endif

// C++ _inCAAAApiZ6(std::istream &in) ==> Texture$_$make_from_txo(std::istream *param0)(std::istream *)
extern char ** Texture$46$make_from_txo(std$_istream *in);

#if INDEX
#define Texture_C_make_from_txo_p_p Texture$46$make_from_txo
#endif

// C++ _inCAAAAkzFf(std::ostream &out, std::string const &filename) ==> Texture$_$write_txo(Texture const *param0, std::ostream *param1, char const *param2)(Texture const *, std::ostream *, char const *)
extern bool Texture$47$write_txo(Texture const *self, std$_ostream *out, char const *filename);

#if INDEX
#define Texture_C_write_txo_B_pps Texture$47$write_txo
#endif

// C++ _inCAAAArfOE(std::ostream &out) ==> Texture$_$write_txo(Texture const *param0, std::ostream *param1)(Texture const *, std::ostream *)
extern bool Texture$48$write_txo(Texture const *self, std$_ostream *out);

#if INDEX
#define Texture_C_write_txo_B_pp Texture$48$write_txo
#endif

// C++ _inCAAAAXMjz(std::istream &in, std::string const &filename, bool header_only) ==> Texture$_$read_dds(Texture *param0, std::istream *param1, char const *param2, bool param3)(Texture *, std::istream *, char const *, bool)
extern bool Texture$49$read_dds(Texture *self, std$_istream *in, char const *filename, bool header_only);

#if INDEX
#define Texture_C_read_dds_B_ppsB Texture$49$read_dds
#endif

// C++ _inCAAAAclhV(std::istream &in, std::string const &filename) ==> Texture$_$read_dds(Texture *param0, std::istream *param1, char const *param2)(Texture *, std::istream *, char const *)
extern bool Texture$50$read_dds(Texture *self, std$_istream *in, char const *filename);

#if INDEX
#define Texture_C_read_dds_B_pps Texture$50$read_dds
#endif

// C++ _inCAAAAfyf1(std::istream &in) ==> Texture$_$read_dds(Texture *param0, std::istream *param1)(Texture *, std::istream *)
extern bool Texture$51$read_dds(Texture *self, std$_istream *in);

#if INDEX
#define Texture_C_read_dds_B_pp Texture$51$read_dds
#endif

// C++ _inCAAAANAbe(std::istream &in, std::string const &filename, bool header_only) ==> Texture$_$read_ktx(Texture *param0, std::istream *param1, char const *param2, bool param3)(Texture *, std::istream *, char const *, bool)
extern bool Texture$52$read_ktx(Texture *self, std$_istream *in, char const *filename, bool header_only);

#if INDEX
#define Texture_C_read_ktx_B_ppsB Texture$52$read_ktx
#endif

// C++ _inCAAAAPLYA(std::istream &in, std::string const &filename) ==> Texture$_$read_ktx(Texture *param0, std::istream *param1, char const *param2)(Texture *, std::istream *, char const *)
extern bool Texture$53$read_ktx(Texture *self, std$_istream *in, char const *filename);

#if INDEX
#define Texture_C_read_ktx_B_pps Texture$53$read_ktx
#endif

// C++ _inCAAAAleXg(std::istream &in) ==> Texture$_$read_ktx(Texture *param0, std::istream *param1)(Texture *, std::istream *)
extern bool Texture$54$read_ktx(Texture *self, std$_istream *in);

#if INDEX
#define Texture_C_read_ktx_B_pp Texture$54$read_ktx
#endif

// C++ _inCAAAA9q5b(PNMImage const &pnmimage, LoaderOptions const &options) ==> Texture$_$load(Texture *param0, PNMImage const *param1, LoaderOptions const *param2)(Texture *, PNMImage const *, LoaderOptions const *)
extern bool Texture$55$load(Texture *self, PNMImage const *pnmimage, LoaderOptions const *options);

#if INDEX
#define Texture_C_load_B_ppp Texture$55$load
#endif

// C++ _inCAAAABHdq(PNMImage const &pnmimage) ==> Texture$_$load(Texture *param0, PNMImage const *param1)(Texture *, PNMImage const *)
extern bool Texture$56$load(Texture *self, PNMImage const *pnmimage);

#if INDEX
#define Texture_C_load_B_pp Texture$56$load
#endif

// C++ _inCAAAA5L4C(PNMImage const &pnmimage, int z, int n, LoaderOptions const &options) ==> Texture$_$load(Texture *param0, PNMImage const *param1, int param2, int param3, LoaderOptions const *param4)(Texture *, PNMImage const *, int, int, LoaderOptions const *)
extern bool Texture$57$load(Texture *self, PNMImage const *pnmimage, int z, int n, LoaderOptions const *options);

#if INDEX
#define Texture_C_load_B_ppiip Texture$57$load
#endif

// C++ _inCAAAAQG98(PNMImage const &pnmimage, int z, int n) ==> Texture$_$load(Texture *param0, PNMImage const *param1, int param2, int param3)(Texture *, PNMImage const *, int, int)
extern bool Texture$58$load(Texture *self, PNMImage const *pnmimage, int z, int n);

#if INDEX
#define Texture_C_load_B_ppii Texture$58$load
#endif

// C++ _inCAAAAu96Y(PfmFile const &pfm, LoaderOptions const &options) ==> Texture$_$load(Texture *param0, PfmFile const *param1, LoaderOptions const *param2)(Texture *, PfmFile const *, LoaderOptions const *)
extern bool Texture$59$load(Texture *self, PfmFile const *pfm, LoaderOptions const *options);
// COLLISION : Texture_C_load_B_ppp Texture$59$load

// C++ _inCAAAAtQal(PfmFile const &pfm) ==> Texture$_$load(Texture *param0, PfmFile const *param1)(Texture *, PfmFile const *)
extern bool Texture$60$load(Texture *self, PfmFile const *pfm);
// COLLISION : Texture_C_load_B_pp Texture$60$load

// C++ _inCAAAAIkGs(PfmFile const &pfm, int z, int n, LoaderOptions const &options) ==> Texture$_$load(Texture *param0, PfmFile const *param1, int param2, int param3, LoaderOptions const *param4)(Texture *, PfmFile const *, int, int, LoaderOptions const *)
extern bool Texture$61$load(Texture *self, PfmFile const *pfm, int z, int n, LoaderOptions const *options);
// COLLISION : Texture_C_load_B_ppiip Texture$61$load

// C++ _inCAAAAQS_d(PfmFile const &pfm, int z, int n) ==> Texture$_$load(Texture *param0, PfmFile const *param1, int param2, int param3)(Texture *, PfmFile const *, int, int)
extern bool Texture$62$load(Texture *self, PfmFile const *pfm, int z, int n);
// COLLISION : Texture_C_load_B_ppii Texture$62$load

// C++ _inCAAAAPCQl(PNMImage const &pnmimage, int x, int y, int z, int n) ==> Texture$_$load_sub_image(Texture *param0, PNMImage const *param1, int param2, int param3, int param4, int param5)(Texture *, PNMImage const *, int, int, int, int)
extern bool Texture$63$load_sub_image(Texture *self, PNMImage const *pnmimage, int x, int y, int z, int n);

#if INDEX
#define Texture_C_load_sub_image_B_ppiiii Texture$63$load_sub_image
#endif

// C++ _inCAAAAGWD1(PNMImage const &pnmimage, int x, int y, int z) ==> Texture$_$load_sub_image(Texture *param0, PNMImage const *param1, int param2, int param3, int param4)(Texture *, PNMImage const *, int, int, int)
extern bool Texture$64$load_sub_image(Texture *self, PNMImage const *pnmimage, int x, int y, int z);

#if INDEX
#define Texture_C_load_sub_image_B_ppiii Texture$64$load_sub_image
#endif

// C++ _inCAAAAJr78(PNMImage const &pnmimage, int x, int y) ==> Texture$_$load_sub_image(Texture *param0, PNMImage const *param1, int param2, int param3)(Texture *, PNMImage const *, int, int)
extern bool Texture$65$load_sub_image(Texture *self, PNMImage const *pnmimage, int x, int y);

#if INDEX
#define Texture_C_load_sub_image_B_ppii Texture$65$load_sub_image
#endif

// C++ _inCAAAAfuOO(PNMImage &pnmimage) ==> Texture$_$store(Texture const *param0, PNMImage *param1)(Texture const *, PNMImage *)
extern bool Texture$66$store(Texture const *self, PNMImage *pnmimage);

#if INDEX
#define Texture_C_store_B_pp Texture$66$store
#endif

// C++ _inCAAAAGqUB(PNMImage &pnmimage, int z, int n) ==> Texture$_$store(Texture const *param0, PNMImage *param1, int param2, int param3)(Texture const *, PNMImage *, int, int)
extern bool Texture$67$store(Texture const *self, PNMImage *pnmimage, int z, int n);

#if INDEX
#define Texture_C_store_B_ppii Texture$67$store
#endif

// C++ _inCAAAAYUfX(PfmFile &pfm) ==> Texture$_$store(Texture const *param0, PfmFile *param1)(Texture const *, PfmFile *)
extern bool Texture$68$store(Texture const *self, PfmFile *pfm);
// COLLISION : Texture_C_store_B_pp Texture$68$store

// C++ _inCAAAAMVCz(PfmFile &pfm, int z, int n) ==> Texture$_$store(Texture const *param0, PfmFile *param1, int param2, int param3)(Texture const *, PfmFile *, int, int)
extern bool Texture$69$store(Texture const *self, PfmFile *pfm, int z, int n);
// COLLISION : Texture_C_store_B_ppii Texture$69$store

// C++ _inCAAAACVZW() ==> Texture$_$reload(Texture *param0)(Texture *)
extern bool Texture$70$reload(Texture *self);

#if INDEX
#define Texture_C_reload_B_p Texture$70$reload
#endif

// C++ _inCAAAAJ8Qn(InternalName const *suffix) ==> Texture$_$load_related(Texture const *param0, InternalName const *param1)(Texture const *, InternalName const *)
extern Texture * Texture$71$load_related(Texture const *self, InternalName const *suffix);

#if INDEX
#define Texture_C_load_related_p_ps Texture$71$load_related
#endif

// C++ _inCAAAAW7Cs() ==> Texture$_$has_filename(Texture const *param0)(Texture const *)
extern bool Texture$72$has_filename(Texture const *self);

#if INDEX
#define Texture_C_has_filename_B_p Texture$72$has_filename
#endif

// C++ _inCAAAAMiw2() ==> Texture$_$get_filename(Texture const *param0)(Texture const *)
extern Filename const * Texture$73$get_filename(Texture const *self);

#if INDEX
#define Texture_C_get_filename_p_p Texture$73$get_filename
#endif

// C++ _inCAAAAxxu1(Filename const &filename) ==> Texture$_$set_filename(Texture *param0, Filename const *param1)(Texture *, Filename const *)
extern void Texture$74$set_filename(Texture *self, Filename const *filename);

#if INDEX
#define Texture_C_set_filename_v_pp Texture$74$set_filename
#endif

// C++ _inCAAAA1EJs() ==> Texture$_$clear_filename(Texture *param0)(Texture *)
extern void Texture$75$clear_filename(Texture *self);

#if INDEX
#define Texture_C_clear_filename_v_p Texture$75$clear_filename
#endif

// C++ _inCAAAAc1WY() ==> Texture$_$has_alpha_filename(Texture const *param0)(Texture const *)
extern bool Texture$76$has_alpha_filename(Texture const *self);

#if INDEX
#define Texture_C_has_alpha_filename_B_p Texture$76$has_alpha_filename
#endif

// C++ _inCAAAABYEj() ==> Texture$_$get_alpha_filename(Texture const *param0)(Texture const *)
extern Filename const * Texture$77$get_alpha_filename(Texture const *self);

#if INDEX
#define Texture_C_get_alpha_filename_p_p Texture$77$get_alpha_filename
#endif

// C++ _inCAAAAm10_(Filename const &alpha_filename) ==> Texture$_$set_alpha_filename(Texture *param0, Filename const *param1)(Texture *, Filename const *)
extern void Texture$78$set_alpha_filename(Texture *self, Filename const *alpha_filename);

#if INDEX
#define Texture_C_set_alpha_filename_v_pp Texture$78$set_alpha_filename
#endif

// C++ _inCAAAAniFu() ==> Texture$_$clear_alpha_filename(Texture *param0)(Texture *)
extern void Texture$79$clear_alpha_filename(Texture *self);

#if INDEX
#define Texture_C_clear_alpha_filename_v_p Texture$79$clear_alpha_filename
#endif

// C++ _inCAAAAestn() ==> Texture$_$has_fullpath(Texture const *param0)(Texture const *)
extern bool Texture$80$has_fullpath(Texture const *self);

#if INDEX
#define Texture_C_has_fullpath_B_p Texture$80$has_fullpath
#endif

// C++ _inCAAAAEHay() ==> Texture$_$get_fullpath(Texture const *param0)(Texture const *)
extern Filename const * Texture$81$get_fullpath(Texture const *self);

#if INDEX
#define Texture_C_get_fullpath_p_p Texture$81$get_fullpath
#endif

// C++ _inCAAAAwCYx(Filename const &fullpath) ==> Texture$_$set_fullpath(Texture *param0, Filename const *param1)(Texture *, Filename const *)
extern void Texture$82$set_fullpath(Texture *self, Filename const *fullpath);

#if INDEX
#define Texture_C_set_fullpath_v_pp Texture$82$set_fullpath
#endif

// C++ _inCAAAA_nbF() ==> Texture$_$clear_fullpath(Texture *param0)(Texture *)
extern void Texture$83$clear_fullpath(Texture *self);

#if INDEX
#define Texture_C_clear_fullpath_v_p Texture$83$clear_fullpath
#endif

// C++ _inCAAAAQ97B() ==> Texture$_$has_alpha_fullpath(Texture const *param0)(Texture const *)
extern bool Texture$84$has_alpha_fullpath(Texture const *self);

#if INDEX
#define Texture_C_has_alpha_fullpath_B_p Texture$84$has_alpha_fullpath
#endif

// C++ _inCAAAAKSqM() ==> Texture$_$get_alpha_fullpath(Texture const *param0)(Texture const *)
extern Filename const * Texture$85$get_alpha_fullpath(Texture const *self);

#if INDEX
#define Texture_C_get_alpha_fullpath_p_p Texture$85$get_alpha_fullpath
#endif

// C++ _inCAAAA66Zo(Filename const &alpha_fullpath) ==> Texture$_$set_alpha_fullpath(Texture *param0, Filename const *param1)(Texture *, Filename const *)
extern void Texture$86$set_alpha_fullpath(Texture *self, Filename const *alpha_fullpath);

#if INDEX
#define Texture_C_set_alpha_fullpath_v_pp Texture$86$set_alpha_fullpath
#endif

// C++ _inCAAAAQc0_() ==> Texture$_$clear_alpha_fullpath(Texture *param0)(Texture *)
extern void Texture$87$clear_alpha_fullpath(Texture *self);

#if INDEX
#define Texture_C_clear_alpha_fullpath_v_p Texture$87$clear_alpha_fullpath
#endif

// C++ _inCAAAAp9VG() ==> Texture$_$get_x_size(Texture const *param0)(Texture const *)
extern int Texture$88$get_x_size(Texture const *self);

#if INDEX
#define Texture_C_get_x_size_i_p Texture$88$get_x_size
#endif

// C++ _inCAAAAzob9(int x_size) ==> Texture$_$set_x_size(Texture *param0, int param1)(Texture *, int)
extern void Texture$89$set_x_size(Texture *self, int x_size);

#if INDEX
#define Texture_C_set_x_size_v_pi Texture$89$set_x_size
#endif

// C++ _inCAAAAA91J() ==> Texture$_$get_y_size(Texture const *param0)(Texture const *)
extern int Texture$90$get_y_size(Texture const *self);

#if INDEX
#define Texture_C_get_y_size_i_p Texture$90$get_y_size
#endif

// C++ _inCAAAALp7A(int y_size) ==> Texture$_$set_y_size(Texture *param0, int param1)(Texture *, int)
extern void Texture$91$set_y_size(Texture *self, int y_size);

#if INDEX
#define Texture_C_set_y_size_v_pi Texture$91$set_y_size
#endif

// C++ _inCAAAAf_VN() ==> Texture$_$get_z_size(Texture const *param0)(Texture const *)
extern int Texture$92$get_z_size(Texture const *self);

#if INDEX
#define Texture_C_get_z_size_i_p Texture$92$get_z_size
#endif

// C++ _inCAAAAipbE(int z_size) ==> Texture$_$set_z_size(Texture *param0, int param1)(Texture *, int)
extern void Texture$93$set_z_size(Texture *self, int z_size);

#if INDEX
#define Texture_C_set_z_size_v_pi Texture$93$set_z_size
#endif

// C++ _inCAAAA4jq1() ==> Texture$_$get_num_views(Texture const *param0)(Texture const *)
extern int Texture$94$get_num_views(Texture const *self);

#if INDEX
#define Texture_C_get_num_views_i_p Texture$94$get_num_views
#endif

// C++ _inCAAAAaw4x(int num_views) ==> Texture$_$set_num_views(Texture *param0, int param1)(Texture *, int)
extern void Texture$95$set_num_views(Texture *self, int num_views);

#if INDEX
#define Texture_C_set_num_views_v_pi Texture$95$set_num_views
#endif

// C++ _inCAAAASk4O() ==> Texture$_$get_num_pages(Texture const *param0)(Texture const *)
extern int Texture$96$get_num_pages(Texture const *self);

#if INDEX
#define Texture_C_get_num_pages_i_p Texture$96$get_num_pages
#endif

// C++ _inCAAAAWv_P() ==> Texture$_$get_num_components(Texture const *param0)(Texture const *)
extern int Texture$97$get_num_components(Texture const *self);

#if INDEX
#define Texture_C_get_num_components_i_p Texture$97$get_num_components
#endif

// C++ _inCAAAAqXBq() ==> Texture$_$get_component_width(Texture const *param0)(Texture const *)
extern int Texture$98$get_component_width(Texture const *self);

#if INDEX
#define Texture_C_get_component_width_i_p Texture$98$get_component_width
#endif

// C++ _inCAAAAvw9T() ==> Texture$_$get_texture_type(Texture const *param0)(Texture const *)
extern Texture$_TextureType Texture$99$get_texture_type(Texture const *self);

#if INDEX
#define Texture_C_get_texture_type_p_p Texture$99$get_texture_type
#endif

// C++ _inCAAAAK_Mr() ==> Texture$_$get_usage_hint(Texture const *param0)(Texture const *)
extern GeomEnums$_UsageHint Texture$100$get_usage_hint(Texture const *self);

#if INDEX
#define Texture_C_get_usage_hint_p_p Texture$100$get_usage_hint
#endif

// C++ _inCAAAAN7UC() ==> Texture$_$get_format(Texture const *param0)(Texture const *)
extern Texture$_Format Texture$101$get_format(Texture const *self);

#if INDEX
#define Texture_C_get_format_p_p Texture$101$get_format
#endif

// C++ _inCAAAAtpDw(Texture::Format format) ==> Texture$_$set_format(Texture *param0, Texture::Format param1)(Texture *, Texture::Format)
extern void Texture$102$set_format(Texture *self, Texture$_Format format);

#if INDEX
#define Texture_C_set_format_v_pp Texture$102$set_format
#endif

// C++ _inCAAAArqBI() ==> Texture$_$get_component_type(Texture const *param0)(Texture const *)
extern Texture$_ComponentType Texture$103$get_component_type(Texture const *self);

#if INDEX
#define Texture_C_get_component_type_p_p Texture$103$get_component_type
#endif

// C++ _inCAAAAQhrN(Texture::ComponentType component_type) ==> Texture$_$set_component_type(Texture *param0, Texture::ComponentType param1)(Texture *, Texture::ComponentType)
extern void Texture$104$set_component_type(Texture *self, Texture$_ComponentType component_type);

#if INDEX
#define Texture_C_set_component_type_v_pp Texture$104$set_component_type
#endif

// C++ _inCAAAADAco() ==> Texture$_$get_wrap_u(Texture const *param0)(Texture const *)
extern SamplerState$_WrapMode Texture$105$get_wrap_u(Texture const *self);

#if INDEX
#define Texture_C_get_wrap_u_p_p Texture$105$get_wrap_u
#endif

// C++ _inCAAAAkX83(Texture::WrapMode wrap) ==> Texture$_$set_wrap_u(Texture *param0, Texture::WrapMode param1)(Texture *, Texture::WrapMode)
extern void Texture$106$set_wrap_u(Texture *self, Texture$_WrapMode wrap);

#if INDEX
#define Texture_C_set_wrap_u_v_pp Texture$106$set_wrap_u
#endif

// C++ _inCAAAAVHcv() ==> Texture$_$get_wrap_v(Texture const *param0)(Texture const *)
extern SamplerState$_WrapMode Texture$107$get_wrap_v(Texture const *self);

#if INDEX
#define Texture_C_get_wrap_v_p_p Texture$107$get_wrap_v
#endif

// C++ _inCAAAASp8_(Texture::WrapMode wrap) ==> Texture$_$set_wrap_v(Texture *param0, Texture::WrapMode param1)(Texture *, Texture::WrapMode)
extern void Texture$108$set_wrap_v(Texture *self, Texture$_WrapMode wrap);

#if INDEX
#define Texture_C_set_wrap_v_v_pp Texture$108$set_wrap_v
#endif

// C++ _inCAAAAnFc2() ==> Texture$_$get_wrap_w(Texture const *param0)(Texture const *)
extern SamplerState$_WrapMode Texture$109$get_wrap_w(Texture const *self);

#if INDEX
#define Texture_C_get_wrap_w_p_p Texture$109$get_wrap_w
#endif

// C++ _inCAAAABo8F(Texture::WrapMode wrap) ==> Texture$_$set_wrap_w(Texture *param0, Texture::WrapMode param1)(Texture *, Texture::WrapMode)
extern void Texture$110$set_wrap_w(Texture *self, Texture$_WrapMode wrap);

#if INDEX
#define Texture_C_set_wrap_w_v_pp Texture$110$set_wrap_w
#endif

// C++ _inCAAAAmseL() ==> Texture$_$get_minfilter(Texture const *param0)(Texture const *)
extern SamplerState$_FilterType Texture$111$get_minfilter(Texture const *self);

#if INDEX
#define Texture_C_get_minfilter_p_p Texture$111$get_minfilter
#endif

// C++ _inCAAAA_kUZ() ==> Texture$_$get_effective_minfilter(Texture const *param0)(Texture const *)
extern SamplerState$_FilterType Texture$112$get_effective_minfilter(Texture const *self);

#if INDEX
#define Texture_C_get_effective_minfilter_p_p Texture$112$get_effective_minfilter
#endif

// C++ _inCAAAAmEu7(Texture::FilterType filter) ==> Texture$_$set_minfilter(Texture *param0, Texture::FilterType param1)(Texture *, Texture::FilterType)
extern void Texture$113$set_minfilter(Texture *self, Texture$_FilterType filter);

#if INDEX
#define Texture_C_set_minfilter_v_pp Texture$113$set_minfilter
#endif

// C++ _inCAAAA8eYK() ==> Texture$_$get_magfilter(Texture const *param0)(Texture const *)
extern SamplerState$_FilterType Texture$114$get_magfilter(Texture const *self);

#if INDEX
#define Texture_C_get_magfilter_p_p Texture$114$get_magfilter
#endif

// C++ _inCAAAAGq5U() ==> Texture$_$get_effective_magfilter(Texture const *param0)(Texture const *)
extern SamplerState$_FilterType Texture$115$get_effective_magfilter(Texture const *self);

#if INDEX
#define Texture_C_get_effective_magfilter_p_p Texture$115$get_effective_magfilter
#endif

// C++ _inCAAAA8Kn6(Texture::FilterType filter) ==> Texture$_$set_magfilter(Texture *param0, Texture::FilterType param1)(Texture *, Texture::FilterType)
extern void Texture$116$set_magfilter(Texture *self, Texture$_FilterType filter);

#if INDEX
#define Texture_C_set_magfilter_v_pp Texture$116$set_magfilter
#endif

// C++ _inCAAAARCMk() ==> Texture$_$get_anisotropic_degree(Texture const *param0)(Texture const *)
extern int Texture$117$get_anisotropic_degree(Texture const *self);

#if INDEX
#define Texture_C_get_anisotropic_degree_i_p Texture$117$get_anisotropic_degree
#endif

// C++ _inCAAAAYHP8() ==> Texture$_$get_effective_anisotropic_degree(Texture const *param0)(Texture const *)
extern int Texture$118$get_effective_anisotropic_degree(Texture const *self);

#if INDEX
#define Texture_C_get_effective_anisotropic_degree_i_p Texture$118$get_effective_anisotropic_degree
#endif

// C++ _inCAAAAGRw3(int anisotropic_degree) ==> Texture$_$set_anisotropic_degree(Texture *param0, int param1)(Texture *, int)
extern void Texture$119$set_anisotropic_degree(Texture *self, int anisotropic_degree);

#if INDEX
#define Texture_C_set_anisotropic_degree_v_pi Texture$119$set_anisotropic_degree
#endif

// C++ _inCAAAArLZH() ==> Texture$_$get_border_color(Texture const *param0)(Texture const *)
extern LColor * Texture$120$get_border_color(Texture const *self);

#if INDEX
#define Texture_C_get_border_color_p_p Texture$120$get_border_color
#endif

// C++ _inCAAAA_ISI(LColor const &color) ==> Texture$_$set_border_color(Texture *param0, LColor const *param1)(Texture *, LColor const *)
extern void Texture$121$set_border_color(Texture *self, LColor const *color);

#if INDEX
#define Texture_C_set_border_color_v_pp Texture$121$set_border_color
#endif

// C++ _inCAAAAnJ0_() ==> Texture$_$has_compression(Texture const *param0)(Texture const *)
extern bool Texture$122$has_compression(Texture const *self);

#if INDEX
#define Texture_C_has_compression_B_p Texture$122$has_compression
#endif

// C++ _inCAAAAekiK() ==> Texture$_$get_compression(Texture const *param0)(Texture const *)
extern Texture$_CompressionMode Texture$123$get_compression(Texture const *self);

#if INDEX
#define Texture_C_get_compression_p_p Texture$123$get_compression
#endif

// C++ _inCAAAAHB8q(Texture::CompressionMode compression) ==> Texture$_$set_compression(Texture *param0, Texture::CompressionMode param1)(Texture *, Texture::CompressionMode)
extern void Texture$124$set_compression(Texture *self, Texture$_CompressionMode compression);

#if INDEX
#define Texture_C_set_compression_v_pp Texture$124$set_compression
#endif

// C++ _inCAAAAh_qK() ==> Texture$_$get_render_to_texture(Texture const *param0)(Texture const *)
extern bool Texture$125$get_render_to_texture(Texture const *self);

#if INDEX
#define Texture_C_get_render_to_texture_B_p Texture$125$get_render_to_texture
#endif

// C++ _inCAAAAGh2R(bool render_to_texture) ==> Texture$_$set_render_to_texture(Texture *param0, bool param1)(Texture *, bool)
extern void Texture$126$set_render_to_texture(Texture *self, bool render_to_texture);

#if INDEX
#define Texture_C_set_render_to_texture_v_pB Texture$126$set_render_to_texture
#endif

// C++ _inCAAAARqDe() ==> Texture$_$get_default_sampler(Texture const *param0)(Texture const *)
extern SamplerState const * Texture$127$get_default_sampler(Texture const *self);

#if INDEX
#define Texture_C_get_default_sampler_p_p Texture$127$get_default_sampler
#endif

// C++ _inCAAAA3foe(SamplerState const &sampler) ==> Texture$_$set_default_sampler(Texture *param0, SamplerState const *param1)(Texture *, SamplerState const *)
extern void Texture$128$set_default_sampler(Texture *self, SamplerState const *sampler);

#if INDEX
#define Texture_C_set_default_sampler_v_pp Texture$128$set_default_sampler
#endif

// C++ _inCAAAAYXSi() ==> Texture$_$uses_mipmaps(Texture const *param0)(Texture const *)
extern bool Texture$129$uses_mipmaps(Texture const *self);

#if INDEX
#define Texture_C_uses_mipmaps_B_p Texture$129$uses_mipmaps
#endif

// C++ _inCAAAAr4ct() ==> Texture$_$get_quality_level(Texture const *param0)(Texture const *)
extern Texture$_QualityLevel Texture$130$get_quality_level(Texture const *self);

#if INDEX
#define Texture_C_get_quality_level_p_p Texture$130$get_quality_level
#endif

// C++ _inCAAAAycUh() ==> Texture$_$get_effective_quality_level(Texture const *param0)(Texture const *)
extern Texture$_QualityLevel Texture$131$get_effective_quality_level(Texture const *self);

#if INDEX
#define Texture_C_get_effective_quality_level_p_p Texture$131$get_effective_quality_level
#endif

// C++ _inCAAAALupG(Texture::QualityLevel quality_level) ==> Texture$_$set_quality_level(Texture *param0, Texture::QualityLevel param1)(Texture *, Texture::QualityLevel)
extern void Texture$132$set_quality_level(Texture *self, Texture$_QualityLevel quality_level);

#if INDEX
#define Texture_C_set_quality_level_v_pp Texture$132$set_quality_level
#endif

// C++ _inCAAAA9PeO() ==> Texture$_$get_expected_num_mipmap_levels(Texture const *param0)(Texture const *)
extern int Texture$133$get_expected_num_mipmap_levels(Texture const *self);

#if INDEX
#define Texture_C_get_expected_num_mipmap_levels_i_p Texture$133$get_expected_num_mipmap_levels
#endif

// C++ _inCAAAA_Vjv(int n) ==> Texture$_$get_expected_mipmap_x_size(Texture const *param0, int param1)(Texture const *, int)
extern int Texture$134$get_expected_mipmap_x_size(Texture const *self, int n);

#if INDEX
#define Texture_C_get_expected_mipmap_x_size_i_pi Texture$134$get_expected_mipmap_x_size
#endif

// C++ _inCAAAAAwmv(int n) ==> Texture$_$get_expected_mipmap_y_size(Texture const *param0, int param1)(Texture const *, int)
extern int Texture$135$get_expected_mipmap_y_size(Texture const *self, int n);

#if INDEX
#define Texture_C_get_expected_mipmap_y_size_i_pi Texture$135$get_expected_mipmap_y_size
#endif

// C++ _inCAAAAScov(int n) ==> Texture$_$get_expected_mipmap_z_size(Texture const *param0, int param1)(Texture const *, int)
extern int Texture$136$get_expected_mipmap_z_size(Texture const *self, int n);

#if INDEX
#define Texture_C_get_expected_mipmap_z_size_i_pi Texture$136$get_expected_mipmap_z_size
#endif

// C++ _inCAAAA6Oji(int n) ==> Texture$_$get_expected_mipmap_num_pages(Texture const *param0, int param1)(Texture const *, int)
extern int Texture$137$get_expected_mipmap_num_pages(Texture const *self, int n);

#if INDEX
#define Texture_C_get_expected_mipmap_num_pages_i_pi Texture$137$get_expected_mipmap_num_pages
#endif

// C++ _inCAAAA6jZY() ==> Texture$_$has_ram_image(Texture const *param0)(Texture const *)
extern bool Texture$138$has_ram_image(Texture const *self);

#if INDEX
#define Texture_C_has_ram_image_B_p Texture$138$has_ram_image
#endif

// C++ _inCAAAAFOOW() ==> Texture$_$has_uncompressed_ram_image(Texture const *param0)(Texture const *)
extern bool Texture$139$has_uncompressed_ram_image(Texture const *self);

#if INDEX
#define Texture_C_has_uncompressed_ram_image_B_p Texture$139$has_uncompressed_ram_image
#endif

// C++ _inCAAAAbDJE() ==> Texture$_$might_have_ram_image(Texture const *param0)(Texture const *)
extern bool Texture$140$might_have_ram_image(Texture const *self);

#if INDEX
#define Texture_C_might_have_ram_image_B_p Texture$140$might_have_ram_image
#endif

// C++ _inCAAAAxRV8() ==> Texture$_$get_ram_image_size(Texture const *param0)(Texture const *)
extern std$_size_t Texture$141$get_ram_image_size(Texture const *self);

#if INDEX
#define Texture_C_get_ram_image_size_l_p Texture$141$get_ram_image_size
#endif

// C++ _inCAAAAUCh5() ==> Texture$_$get_ram_view_size(Texture const *param0)(Texture const *)
extern std$_size_t Texture$142$get_ram_view_size(Texture const *self);

#if INDEX
#define Texture_C_get_ram_view_size_l_p Texture$142$get_ram_view_size
#endif

// C++ _inCAAAAyOvS() ==> Texture$_$get_ram_page_size(Texture const *param0)(Texture const *)
extern std$_size_t Texture$143$get_ram_page_size(Texture const *self);

#if INDEX
#define Texture_C_get_ram_page_size_l_p Texture$143$get_ram_page_size
#endif

// C++ _inCAAAAR2lC() ==> Texture$_$get_expected_ram_image_size(Texture const *param0)(Texture const *)
extern std$_size_t Texture$144$get_expected_ram_image_size(Texture const *self);

#if INDEX
#define Texture_C_get_expected_ram_image_size_l_p Texture$144$get_expected_ram_image_size
#endif

// C++ _inCAAAACoXN() ==> Texture$_$get_expected_ram_page_size(Texture const *param0)(Texture const *)
extern std$_size_t Texture$145$get_expected_ram_page_size(Texture const *self);

#if INDEX
#define Texture_C_get_expected_ram_page_size_l_p Texture$145$get_expected_ram_page_size
#endif

// C++ _inCAAAAptvV() ==> Texture$_$get_ram_image(Texture *param0)(Texture *)
extern CPTA_uchar * Texture$146$get_ram_image(Texture *self);

#if INDEX
#define Texture_C_get_ram_image_p_p Texture$146$get_ram_image
#endif

// C++ _inCAAAAEnmq() ==> Texture$_$get_ram_image_compression(Texture const *param0)(Texture const *)
extern Texture$_CompressionMode Texture$147$get_ram_image_compression(Texture const *self);

#if INDEX
#define Texture_C_get_ram_image_compression_p_p Texture$147$get_ram_image_compression
#endif

// C++ _inCAAAAgWYd() ==> Texture$_$get_uncompressed_ram_image(Texture *param0)(Texture *)
extern CPTA_uchar * Texture$148$get_uncompressed_ram_image(Texture *self);

#if INDEX
#define Texture_C_get_uncompressed_ram_image_p_p Texture$148$get_uncompressed_ram_image
#endif

// C++ _inCAAAAnaic(std::string const &requested_format) ==> Texture$_$get_ram_image_as(Texture *param0, char const *param1)(Texture *, char const *)
extern CPTA_uchar * Texture$149$get_ram_image_as(Texture *self, char const *requested_format);

#if INDEX
#define Texture_C_get_ram_image_as_p_ps Texture$149$get_ram_image_as
#endif

// C++ _inCAAAA3zLa() ==> Texture$_$modify_ram_image(Texture *param0)(Texture *)
extern PTA_uchar * Texture$150$modify_ram_image(Texture *self);

#if INDEX
#define Texture_C_modify_ram_image_p_p Texture$150$modify_ram_image
#endif

// C++ _inCAAAAODVV() ==> Texture$_$make_ram_image(Texture *param0)(Texture *)
extern PTA_uchar * Texture$151$make_ram_image(Texture *self);

#if INDEX
#define Texture_C_make_ram_image_p_p Texture$151$make_ram_image
#endif

// C++ _inCAAAApFgH() ==> Texture$_$clear_ram_image(Texture *param0)(Texture *)
extern void Texture$152$clear_ram_image(Texture *self);

#if INDEX
#define Texture_C_clear_ram_image_v_p Texture$152$clear_ram_image
#endif

// C++ _inCAAAA_1DJ(bool keep_ram_image) ==> Texture$_$set_keep_ram_image(Texture *param0, bool param1)(Texture *, bool)
extern void Texture$153$set_keep_ram_image(Texture *self, bool keep_ram_image);

#if INDEX
#define Texture_C_set_keep_ram_image_v_pB Texture$153$set_keep_ram_image
#endif

// C++ _inCAAAAprTa() ==> Texture$_$get_keep_ram_image(Texture const *param0)(Texture const *)
extern bool Texture$154$get_keep_ram_image(Texture const *self);

#if INDEX
#define Texture_C_get_keep_ram_image_B_p Texture$154$get_keep_ram_image
#endif

// C++ _inCAAAA8zCz() ==> Texture$_$is_cacheable(Texture const *param0)(Texture const *)
extern bool Texture$155$is_cacheable(Texture const *self);

#if INDEX
#define Texture_C_is_cacheable_B_p Texture$155$is_cacheable
#endif

// C++ _inCAAAA4X6Q(Texture::CompressionMode compression, Texture::QualityLevel quality_level, GraphicsStateGuardianBase *gsg) ==> Texture$_$compress_ram_image(Texture *param0, Texture::CompressionMode param1, Texture::QualityLevel param2, GraphicsStateGuardianBase *param3)(Texture *, Texture::CompressionMode, Texture::QualityLevel, GraphicsStateGuardianBase *)
extern bool Texture$156$compress_ram_image(Texture *self, Texture$_CompressionMode compression, Texture$_QualityLevel quality_level, GraphicsStateGuardianBase *gsg);

#if INDEX
#define Texture_C_compress_ram_image_B_pppp Texture$156$compress_ram_image
#endif

// C++ _inCAAAAn3DR(Texture::CompressionMode compression, Texture::QualityLevel quality_level) ==> Texture$_$compress_ram_image(Texture *param0, Texture::CompressionMode param1, Texture::QualityLevel param2)(Texture *, Texture::CompressionMode, Texture::QualityLevel)
extern bool Texture$157$compress_ram_image(Texture *self, Texture$_CompressionMode compression, Texture$_QualityLevel quality_level);

#if INDEX
#define Texture_C_compress_ram_image_B_ppp Texture$157$compress_ram_image
#endif

// C++ _inCAAAA50a4(Texture::CompressionMode compression) ==> Texture$_$compress_ram_image(Texture *param0, Texture::CompressionMode param1)(Texture *, Texture::CompressionMode)
extern bool Texture$158$compress_ram_image(Texture *self, Texture$_CompressionMode compression);

#if INDEX
#define Texture_C_compress_ram_image_B_pp Texture$158$compress_ram_image
#endif

// C++ _inCAAAAHzZo() ==> Texture$_$compress_ram_image(Texture *param0)(Texture *)
extern bool Texture$159$compress_ram_image(Texture *self);

#if INDEX
#define Texture_C_compress_ram_image_B_p Texture$159$compress_ram_image
#endif

// C++ _inCAAAArKga() ==> Texture$_$uncompress_ram_image(Texture *param0)(Texture *)
extern bool Texture$160$uncompress_ram_image(Texture *self);

#if INDEX
#define Texture_C_uncompress_ram_image_B_p Texture$160$uncompress_ram_image
#endif

// C++ _inCAAAAsZCn() ==> Texture$_$get_num_ram_mipmap_images(Texture const *param0)(Texture const *)
extern int Texture$161$get_num_ram_mipmap_images(Texture const *self);

#if INDEX
#define Texture_C_get_num_ram_mipmap_images_i_p Texture$161$get_num_ram_mipmap_images
#endif

// C++ _inCAAAAPYfR(int n) ==> Texture$_$has_ram_mipmap_image(Texture const *param0, int param1)(Texture const *, int)
extern bool Texture$162$has_ram_mipmap_image(Texture const *self, int n);

#if INDEX
#define Texture_C_has_ram_mipmap_image_B_pi Texture$162$has_ram_mipmap_image
#endif

// C++ _inCAAAAUZqM() ==> Texture$_$get_num_loadable_ram_mipmap_images(Texture const *param0)(Texture const *)
extern int Texture$163$get_num_loadable_ram_mipmap_images(Texture const *self);

#if INDEX
#define Texture_C_get_num_loadable_ram_mipmap_images_i_p Texture$163$get_num_loadable_ram_mipmap_images
#endif

// C++ _inCAAAAuUo_() ==> Texture$_$has_all_ram_mipmap_images(Texture const *param0)(Texture const *)
extern bool Texture$164$has_all_ram_mipmap_images(Texture const *self);

#if INDEX
#define Texture_C_has_all_ram_mipmap_images_B_p Texture$164$has_all_ram_mipmap_images
#endif

// C++ _inCAAAAIt9g(int n) ==> Texture$_$get_ram_mipmap_image_size(Texture const *param0, int param1)(Texture const *, int)
extern std$_size_t Texture$165$get_ram_mipmap_image_size(Texture const *self, int n);

#if INDEX
#define Texture_C_get_ram_mipmap_image_size_l_pi Texture$165$get_ram_mipmap_image_size
#endif

// C++ _inCAAAAql85(int n) ==> Texture$_$get_ram_mipmap_view_size(Texture const *param0, int param1)(Texture const *, int)
extern std$_size_t Texture$166$get_ram_mipmap_view_size(Texture const *self, int n);

#if INDEX
#define Texture_C_get_ram_mipmap_view_size_l_pi Texture$166$get_ram_mipmap_view_size
#endif

// C++ _inCAAAArxQs(int n) ==> Texture$_$get_ram_mipmap_page_size(Texture const *param0, int param1)(Texture const *, int)
extern std$_size_t Texture$167$get_ram_mipmap_page_size(Texture const *self, int n);

#if INDEX
#define Texture_C_get_ram_mipmap_page_size_l_pi Texture$167$get_ram_mipmap_page_size
#endif

// C++ _inCAAAA18J3(int n) ==> Texture$_$get_expected_ram_mipmap_image_size(Texture const *param0, int param1)(Texture const *, int)
extern std$_size_t Texture$168$get_expected_ram_mipmap_image_size(Texture const *self, int n);

#if INDEX
#define Texture_C_get_expected_ram_mipmap_image_size_l_pi Texture$168$get_expected_ram_mipmap_image_size
#endif

// C++ _inCAAAAKTPS(int n) ==> Texture$_$get_expected_ram_mipmap_view_size(Texture const *param0, int param1)(Texture const *, int)
extern std$_size_t Texture$169$get_expected_ram_mipmap_view_size(Texture const *self, int n);

#if INDEX
#define Texture_C_get_expected_ram_mipmap_view_size_l_pi Texture$169$get_expected_ram_mipmap_view_size
#endif

// C++ _inCAAAAmvjI(int n) ==> Texture$_$get_expected_ram_mipmap_page_size(Texture const *param0, int param1)(Texture const *, int)
extern std$_size_t Texture$170$get_expected_ram_mipmap_page_size(Texture const *self, int n);

#if INDEX
#define Texture_C_get_expected_ram_mipmap_page_size_l_pi Texture$170$get_expected_ram_mipmap_page_size
#endif

// C++ _inCAAAAnFOc(int n) ==> Texture$_$get_ram_mipmap_image(Texture const *param0, int param1)(Texture const *, int)
extern CPTA_uchar * Texture$171$get_ram_mipmap_image(Texture const *self, int n);

#if INDEX
#define Texture_C_get_ram_mipmap_image_p_pi Texture$171$get_ram_mipmap_image
#endif

// C++ _inCAAAAT52p(int n) ==> Texture$_$get_ram_mipmap_pointer(Texture const *param0, int param1)(Texture const *, int)
extern void Texture$172$get_ram_mipmap_pointer(Texture const *self, int n);

#if INDEX
#define Texture_C_get_ram_mipmap_pointer_v_pi Texture$172$get_ram_mipmap_pointer
#endif

// C++ _inCAAAAFscn(int n) ==> Texture$_$modify_ram_mipmap_image(Texture *param0, int param1)(Texture *, int)
extern PTA_uchar * Texture$173$modify_ram_mipmap_image(Texture *self, int n);

#if INDEX
#define Texture_C_modify_ram_mipmap_image_p_pi Texture$173$modify_ram_mipmap_image
#endif

// C++ _inCAAAA0yn2(int n) ==> Texture$_$make_ram_mipmap_image(Texture *param0, int param1)(Texture *, int)
extern PTA_uchar * Texture$174$make_ram_mipmap_image(Texture *self, int n);

#if INDEX
#define Texture_C_make_ram_mipmap_image_p_pi Texture$174$make_ram_mipmap_image
#endif

// C++ _inCAAAAolwL(long long int pointer, int n, int page_size) ==> Texture$_$set_ram_mipmap_pointer_from_int(Texture *param0, long long int param1, int param2, int param3)(Texture *, long long int, int, int)
extern void Texture$175$set_ram_mipmap_pointer_from_int(Texture *self, long long int pointer, int n, int page_size);

#if INDEX
#define Texture_C_set_ram_mipmap_pointer_from_int_v_ppii Texture$175$set_ram_mipmap_pointer_from_int
#endif

// C++ _inCAAAAOZTm(int n, CPTA_uchar image, std::size_t page_size) ==> Texture$_$set_ram_mipmap_image(Texture *param0, int param1, CPTA_uchar *param2, std::size_t param3)(Texture *, int, CPTA_uchar *, std::size_t)
extern void Texture$176$set_ram_mipmap_image(Texture *self, int n, CPTA_uchar *image, std$_size_t page_size);

#if INDEX
#define Texture_C_set_ram_mipmap_image_v_pipl Texture$176$set_ram_mipmap_image
#endif

// C++ _inCAAAAY4Mz(int n, CPTA_uchar image) ==> Texture$_$set_ram_mipmap_image(Texture *param0, int param1, CPTA_uchar *param2)(Texture *, int, CPTA_uchar *)
extern void Texture$177$set_ram_mipmap_image(Texture *self, int n, CPTA_uchar *image);

#if INDEX
#define Texture_C_set_ram_mipmap_image_v_pip Texture$177$set_ram_mipmap_image
#endif

// C++ _inCAAAAYq5x(int n) ==> Texture$_$clear_ram_mipmap_image(Texture *param0, int param1)(Texture *, int)
extern void Texture$178$clear_ram_mipmap_image(Texture *self, int n);

#if INDEX
#define Texture_C_clear_ram_mipmap_image_v_pi Texture$178$clear_ram_mipmap_image
#endif

// C++ _inCAAAA_KKM() ==> Texture$_$clear_ram_mipmap_images(Texture *param0)(Texture *)
extern void Texture$179$clear_ram_mipmap_images(Texture *self);

#if INDEX
#define Texture_C_clear_ram_mipmap_images_v_p Texture$179$clear_ram_mipmap_images
#endif

// C++ _inCAAAAvPAg() ==> Texture$_$generate_ram_mipmap_images(Texture *param0)(Texture *)
extern void Texture$180$generate_ram_mipmap_images(Texture *self);

#if INDEX
#define Texture_C_generate_ram_mipmap_images_v_p Texture$180$generate_ram_mipmap_images
#endif

// C++ _inCAAAAjKHa() ==> Texture$_$get_simple_x_size(Texture const *param0)(Texture const *)
extern int Texture$181$get_simple_x_size(Texture const *self);

#if INDEX
#define Texture_C_get_simple_x_size_i_p Texture$181$get_simple_x_size
#endif

// C++ _inCAAAAzoaa() ==> Texture$_$get_simple_y_size(Texture const *param0)(Texture const *)
extern int Texture$182$get_simple_y_size(Texture const *self);

#if INDEX
#define Texture_C_get_simple_y_size_i_p Texture$182$get_simple_y_size
#endif

// C++ _inCAAAAF9NW() ==> Texture$_$has_simple_ram_image(Texture const *param0)(Texture const *)
extern bool Texture$183$has_simple_ram_image(Texture const *self);

#if INDEX
#define Texture_C_has_simple_ram_image_B_p Texture$183$has_simple_ram_image
#endif

// C++ _inCAAAAHF_T() ==> Texture$_$get_simple_ram_image_size(Texture const *param0)(Texture const *)
extern std$_size_t Texture$184$get_simple_ram_image_size(Texture const *self);

#if INDEX
#define Texture_C_get_simple_ram_image_size_l_p Texture$184$get_simple_ram_image_size
#endif

// C++ _inCAAAAtR6g() ==> Texture$_$get_simple_ram_image(Texture const *param0)(Texture const *)
extern CPTA_uchar * Texture$185$get_simple_ram_image(Texture const *self);

#if INDEX
#define Texture_C_get_simple_ram_image_p_p Texture$185$get_simple_ram_image
#endif

// C++ _inCAAAAc_Iv(CPTA_uchar image, int x_size, int y_size) ==> Texture$_$set_simple_ram_image(Texture *param0, CPTA_uchar *param1, int param2, int param3)(Texture *, CPTA_uchar *, int, int)
extern void Texture$186$set_simple_ram_image(Texture *self, CPTA_uchar *image, int x_size, int y_size);

#if INDEX
#define Texture_C_set_simple_ram_image_v_ppii Texture$186$set_simple_ram_image
#endif

// C++ _inCAAAAnWcl() ==> Texture$_$modify_simple_ram_image(Texture *param0)(Texture *)
extern PTA_uchar * Texture$187$modify_simple_ram_image(Texture *self);

#if INDEX
#define Texture_C_modify_simple_ram_image_p_p Texture$187$modify_simple_ram_image
#endif

// C++ _inCAAAAlEaN(int x_size, int y_size) ==> Texture$_$new_simple_ram_image(Texture *param0, int param1, int param2)(Texture *, int, int)
extern PTA_uchar * Texture$188$new_simple_ram_image(Texture *self, int x_size, int y_size);

#if INDEX
#define Texture_C_new_simple_ram_image_p_pii Texture$188$new_simple_ram_image
#endif

// C++ _inCAAAAi9_G() ==> Texture$_$generate_simple_ram_image(Texture *param0)(Texture *)
extern void Texture$189$generate_simple_ram_image(Texture *self);

#if INDEX
#define Texture_C_generate_simple_ram_image_v_p Texture$189$generate_simple_ram_image
#endif

// C++ _inCAAAA3521() ==> Texture$_$clear_simple_ram_image(Texture *param0)(Texture *)
extern void Texture$190$clear_simple_ram_image(Texture *self);

#if INDEX
#define Texture_C_clear_simple_ram_image_v_p Texture$190$clear_simple_ram_image
#endif

// C++ _inCAAAA0K12() ==> Texture$_$peek(Texture *param0)(Texture *)
extern char ** Texture$191$peek(Texture *self);

#if INDEX
#define Texture_C_peek_p_p Texture$191$peek
#endif

// C++ _inCAAAAhBtw() ==> Texture$_$get_properties_modified(Texture const *param0)(Texture const *)
extern UpdateSeq * Texture$192$get_properties_modified(Texture const *self);

#if INDEX
#define Texture_C_get_properties_modified_p_p Texture$192$get_properties_modified
#endif

// C++ _inCAAAATeDG() ==> Texture$_$get_image_modified(Texture const *param0)(Texture const *)
extern UpdateSeq * Texture$193$get_image_modified(Texture const *self);

#if INDEX
#define Texture_C_get_image_modified_p_p Texture$193$get_image_modified
#endif

// C++ _inCAAAA12pR() ==> Texture$_$get_simple_image_modified(Texture const *param0)(Texture const *)
extern UpdateSeq * Texture$194$get_simple_image_modified(Texture const *self);

#if INDEX
#define Texture_C_get_simple_image_modified_p_p Texture$194$get_simple_image_modified
#endif

// C++ _inCAAAA0fRE() ==> Texture$_$has_auto_texture_scale(Texture const *param0)(Texture const *)
extern bool Texture$195$has_auto_texture_scale(Texture const *self);

#if INDEX
#define Texture_C_has_auto_texture_scale_B_p Texture$195$has_auto_texture_scale
#endif

// C++ _inCAAAAu3_O() ==> Texture$_$get_auto_texture_scale(Texture const *param0)(Texture const *)
extern AutoTextureScale Texture$196$get_auto_texture_scale(Texture const *self);

#if INDEX
#define Texture_C_get_auto_texture_scale_p_p Texture$196$get_auto_texture_scale
#endif

// C++ _inCAAAA7xr7(AutoTextureScale scale) ==> Texture$_$set_auto_texture_scale(Texture *param0, AutoTextureScale param1)(Texture *, AutoTextureScale)
extern void Texture$197$set_auto_texture_scale(Texture *self, AutoTextureScale scale);

#if INDEX
#define Texture_C_set_auto_texture_scale_v_pp Texture$197$set_auto_texture_scale
#endif

// C++ _inCAAAALFHv(PreparedGraphicsObjects *prepared_objects) ==> Texture$_$prepare(Texture *param0, PreparedGraphicsObjects *param1)(Texture *, PreparedGraphicsObjects *)
extern char ** Texture$198$prepare(Texture *self, PreparedGraphicsObjects *prepared_objects);

#if INDEX
#define Texture_C_prepare_p_pp Texture$198$prepare
#endif

// C++ _inCAAAAgvjn(PreparedGraphicsObjects *prepared_objects) ==> Texture$_$is_prepared(Texture const *param0, PreparedGraphicsObjects *param1)(Texture const *, PreparedGraphicsObjects *)
extern bool Texture$199$is_prepared(Texture const *self, PreparedGraphicsObjects *prepared_objects);

#if INDEX
#define Texture_C_is_prepared_B_pp Texture$199$is_prepared
#endif

// C++ _inCAAAAUPgs(PreparedGraphicsObjects *prepared_objects) ==> Texture$_$was_image_modified(Texture const *param0, PreparedGraphicsObjects *param1)(Texture const *, PreparedGraphicsObjects *)
extern bool Texture$200$was_image_modified(Texture const *self, PreparedGraphicsObjects *prepared_objects);

#if INDEX
#define Texture_C_was_image_modified_B_pp Texture$200$was_image_modified
#endif

// C++ _inCAAAAWC_V(PreparedGraphicsObjects *prepared_objects) ==> Texture$_$get_data_size_bytes(Texture const *param0, PreparedGraphicsObjects *param1)(Texture const *, PreparedGraphicsObjects *)
extern std$_size_t Texture$201$get_data_size_bytes(Texture const *self, PreparedGraphicsObjects *prepared_objects);

#if INDEX
#define Texture_C_get_data_size_bytes_l_pp Texture$201$get_data_size_bytes
#endif

// C++ _inCAAAAo8z_(PreparedGraphicsObjects *prepared_objects) ==> Texture$_$get_active(Texture const *param0, PreparedGraphicsObjects *param1)(Texture const *, PreparedGraphicsObjects *)
extern bool Texture$202$get_active(Texture const *self, PreparedGraphicsObjects *prepared_objects);

#if INDEX
#define Texture_C_get_active_B_pp Texture$202$get_active
#endif

// C++ _inCAAAAUPUd(PreparedGraphicsObjects *prepared_objects) ==> Texture$_$get_resident(Texture const *param0, PreparedGraphicsObjects *param1)(Texture const *, PreparedGraphicsObjects *)
extern bool Texture$203$get_resident(Texture const *self, PreparedGraphicsObjects *prepared_objects);

#if INDEX
#define Texture_C_get_resident_B_pp Texture$203$get_resident
#endif

// C++ _inCAAAAv3AE(PreparedGraphicsObjects *prepared_objects) ==> Texture$_$release(Texture *param0, PreparedGraphicsObjects *param1)(Texture *, PreparedGraphicsObjects *)
extern bool Texture$204$release(Texture *self, PreparedGraphicsObjects *prepared_objects);

#if INDEX
#define Texture_C_release_B_pp Texture$204$release
#endif

// C++ _inCAAAAH_Et() ==> Texture$_$release_all(Texture *param0)(Texture *)
extern int Texture$205$release_all(Texture *self);

#if INDEX
#define Texture_C_release_all_i_p Texture$205$release_all
#endif

// C++ _inCAAAAp5Zg() ==> Texture$_$estimate_texture_memory(Texture const *param0)(Texture const *)
extern std$_size_t Texture$206$estimate_texture_memory(Texture const *self);

#if INDEX
#define Texture_C_estimate_texture_memory_l_p Texture$206$estimate_texture_memory
#endif

// C++ _inCAAAANCXD(std::string const &key, TypedReferenceCount *aux_data) ==> Texture$_$set_aux_data(Texture *param0, char const *param1, TypedReferenceCount *param2)(Texture *, char const *, TypedReferenceCount *)
extern void Texture$207$set_aux_data(Texture *self, char const *key, TypedReferenceCount *aux_data);

#if INDEX
#define Texture_C_set_aux_data_v_psp Texture$207$set_aux_data
#endif

// C++ _inCAAAALe9O(std::string const &key) ==> Texture$_$clear_aux_data(Texture *param0, char const *param1)(Texture *, char const *)
extern void Texture$208$clear_aux_data(Texture *self, char const *key);

#if INDEX
#define Texture_C_clear_aux_data_v_ps Texture$208$clear_aux_data
#endif

// C++ _inCAAAA97ht(std::string const &key) ==> Texture$_$get_aux_data(Texture const *param0, char const *param1)(Texture const *, char const *)
extern TypedReferenceCount * Texture$209$get_aux_data(Texture const *self, char const *key);

#if INDEX
#define Texture_C_get_aux_data_p_ps Texture$209$get_aux_data
#endif

// C++ _inCAAAAesKC(AutoTextureScale scale) ==> Texture$_$set_textures_power_2(AutoTextureScale param0)(AutoTextureScale)
extern void Texture$210$set_textures_power_2(AutoTextureScale scale);

#if INDEX
#define Texture_C_set_textures_power_2_v_p Texture$210$set_textures_power_2
#endif

// C++ _inCAAAAvjA4() ==> Texture$_$get_textures_power_2()()
extern AutoTextureScale Texture$211$get_textures_power_2(void);

#if INDEX
#define Texture_C_get_textures_power_2_p_v Texture$211$get_textures_power_2
#endif

// C++ _inCAAAAHLSt() ==> Texture$_$has_textures_power_2()()
extern bool Texture$212$has_textures_power_2(void);

#if INDEX
#define Texture_C_has_textures_power_2_B_v Texture$212$has_textures_power_2
#endif

// C++ _inCAAAA6S4x() ==> Texture$_$get_pad_x_size(Texture const *param0)(Texture const *)
extern int Texture$213$get_pad_x_size(Texture const *self);

#if INDEX
#define Texture_C_get_pad_x_size_i_p Texture$213$get_pad_x_size
#endif

// C++ _inCAAAA_SGO() ==> Texture$_$get_pad_y_size(Texture const *param0)(Texture const *)
extern int Texture$214$get_pad_y_size(Texture const *self);

#if INDEX
#define Texture_C_get_pad_y_size_i_p Texture$214$get_pad_y_size
#endif

// C++ _inCAAAABSUq() ==> Texture$_$get_pad_z_size(Texture const *param0)(Texture const *)
extern int Texture$215$get_pad_z_size(Texture const *self);

#if INDEX
#define Texture_C_get_pad_z_size_i_p Texture$215$get_pad_z_size
#endif

// C++ _inCAAAApphB() ==> Texture$_$get_tex_scale(Texture const *param0)(Texture const *)
extern LVecBase2 * Texture$216$get_tex_scale(Texture const *self);

#if INDEX
#define Texture_C_get_tex_scale_p_p Texture$216$get_tex_scale
#endif

// C++ _inCAAAANa2k(int x, int y, int z) ==> Texture$_$set_pad_size(Texture *param0, int param1, int param2, int param3)(Texture *, int, int, int)
extern void Texture$217$set_pad_size(Texture *self, int x, int y, int z);

#if INDEX
#define Texture_C_set_pad_size_v_piii Texture$217$set_pad_size
#endif

// C++ _inCAAAAI6hq(int x, int y) ==> Texture$_$set_pad_size(Texture *param0, int param1, int param2)(Texture *, int, int)
extern void Texture$218$set_pad_size(Texture *self, int x, int y);

#if INDEX
#define Texture_C_set_pad_size_v_pii Texture$218$set_pad_size
#endif

// C++ _inCAAAAzpXt(int x) ==> Texture$_$set_pad_size(Texture *param0, int param1)(Texture *, int)
extern void Texture$219$set_pad_size(Texture *self, int x);

#if INDEX
#define Texture_C_set_pad_size_v_pi Texture$219$set_pad_size
#endif

// C++ _inCAAAAsnEy() ==> Texture$_$set_pad_size(Texture *param0)(Texture *)
extern void Texture$220$set_pad_size(Texture *self);

#if INDEX
#define Texture_C_set_pad_size_v_p Texture$220$set_pad_size
#endif

// C++ _inCAAAAP_Qd(int x, int y, int z) ==> Texture$_$set_size_padded(Texture *param0, int param1, int param2, int param3)(Texture *, int, int, int)
extern void Texture$221$set_size_padded(Texture *self, int x, int y, int z);

#if INDEX
#define Texture_C_set_size_padded_v_piii Texture$221$set_size_padded
#endif

// C++ _inCAAAAf7Uc(int x, int y) ==> Texture$_$set_size_padded(Texture *param0, int param1, int param2)(Texture *, int, int)
extern void Texture$222$set_size_padded(Texture *self, int x, int y);

#if INDEX
#define Texture_C_set_size_padded_v_pii Texture$222$set_size_padded
#endif

// C++ _inCAAAA0f17(int x) ==> Texture$_$set_size_padded(Texture *param0, int param1)(Texture *, int)
extern void Texture$223$set_size_padded(Texture *self, int x);

#if INDEX
#define Texture_C_set_size_padded_v_pi Texture$223$set_size_padded
#endif

// C++ _inCAAAA5TOP() ==> Texture$_$set_size_padded(Texture *param0)(Texture *)
extern void Texture$224$set_size_padded(Texture *self);

#if INDEX
#define Texture_C_set_size_padded_v_p Texture$224$set_size_padded
#endif

// C++ _inCAAAAhkHc() ==> Texture$_$get_orig_file_x_size(Texture const *param0)(Texture const *)
extern int Texture$225$get_orig_file_x_size(Texture const *self);

#if INDEX
#define Texture_C_get_orig_file_x_size_i_p Texture$225$get_orig_file_x_size
#endif

// C++ _inCAAAAdmHq() ==> Texture$_$get_orig_file_y_size(Texture const *param0)(Texture const *)
extern int Texture$226$get_orig_file_y_size(Texture const *self);

#if INDEX
#define Texture_C_get_orig_file_y_size_i_p Texture$226$get_orig_file_y_size
#endif

// C++ _inCAAAA5rH4() ==> Texture$_$get_orig_file_z_size(Texture const *param0)(Texture const *)
extern int Texture$227$get_orig_file_z_size(Texture const *self);

#if INDEX
#define Texture_C_get_orig_file_z_size_i_p Texture$227$get_orig_file_z_size
#endif

// C++ _inCAAAApqd5(int x, int y, int z) ==> Texture$_$set_orig_file_size(Texture *param0, int param1, int param2, int param3)(Texture *, int, int, int)
extern void Texture$228$set_orig_file_size(Texture *self, int x, int y, int z);

#if INDEX
#define Texture_C_set_orig_file_size_v_piii Texture$228$set_orig_file_size
#endif

// C++ _inCAAAAPjli(int x, int y) ==> Texture$_$set_orig_file_size(Texture *param0, int param1, int param2)(Texture *, int, int)
extern void Texture$229$set_orig_file_size(Texture *self, int x, int y);

#if INDEX
#define Texture_C_set_orig_file_size_v_pii Texture$229$set_orig_file_size
#endif

// C++ _inCAAAASycf(bool flag) ==> Texture$_$set_loaded_from_image(Texture *param0, bool param1)(Texture *, bool)
extern void Texture$230$set_loaded_from_image(Texture *self, bool flag);

#if INDEX
#define Texture_C_set_loaded_from_image_v_pB Texture$230$set_loaded_from_image
#endif

// C++ _inCAAAA2KhW() ==> Texture$_$set_loaded_from_image(Texture *param0)(Texture *)
extern void Texture$231$set_loaded_from_image(Texture *self);

#if INDEX
#define Texture_C_set_loaded_from_image_v_p Texture$231$set_loaded_from_image
#endif

// C++ _inCAAAALfRY() ==> Texture$_$get_loaded_from_image(Texture const *param0)(Texture const *)
extern bool Texture$232$get_loaded_from_image(Texture const *self);

#if INDEX
#define Texture_C_get_loaded_from_image_B_p Texture$232$get_loaded_from_image
#endif

// C++ _inCAAAAdfq1(bool flag) ==> Texture$_$set_loaded_from_txo(Texture *param0, bool param1)(Texture *, bool)
extern void Texture$233$set_loaded_from_txo(Texture *self, bool flag);

#if INDEX
#define Texture_C_set_loaded_from_txo_v_pB Texture$233$set_loaded_from_txo
#endif

// C++ _inCAAAAh42H() ==> Texture$_$set_loaded_from_txo(Texture *param0)(Texture *)
extern void Texture$234$set_loaded_from_txo(Texture *self);

#if INDEX
#define Texture_C_set_loaded_from_txo_v_p Texture$234$set_loaded_from_txo
#endif

// C++ _inCAAAAmAs_() ==> Texture$_$get_loaded_from_txo(Texture const *param0)(Texture const *)
extern bool Texture$235$get_loaded_from_txo(Texture const *self);

#if INDEX
#define Texture_C_get_loaded_from_txo_B_p Texture$235$get_loaded_from_txo
#endif

// C++ _inCAAAA608G() ==> Texture$_$get_match_framebuffer_format(Texture const *param0)(Texture const *)
extern bool Texture$236$get_match_framebuffer_format(Texture const *self);

#if INDEX
#define Texture_C_get_match_framebuffer_format_B_p Texture$236$get_match_framebuffer_format
#endif

// C++ _inCAAAAsRvh(bool flag) ==> Texture$_$set_match_framebuffer_format(Texture *param0, bool param1)(Texture *, bool)
extern void Texture$237$set_match_framebuffer_format(Texture *self, bool flag);

#if INDEX
#define Texture_C_set_match_framebuffer_format_v_pB Texture$237$set_match_framebuffer_format
#endif

// C++ _inCAAAAZVP_() ==> Texture$_$get_post_load_store_cache(Texture const *param0)(Texture const *)
extern bool Texture$238$get_post_load_store_cache(Texture const *self);

#if INDEX
#define Texture_C_get_post_load_store_cache_B_p Texture$238$get_post_load_store_cache
#endif

// C++ _inCAAAAuxvY(bool flag) ==> Texture$_$set_post_load_store_cache(Texture *param0, bool param1)(Texture *, bool)
extern void Texture$239$set_post_load_store_cache(Texture *self, bool flag);

#if INDEX
#define Texture_C_set_post_load_store_cache_v_pB Texture$239$set_post_load_store_cache
#endif

// C++ _inCAAAAufIe(int view, PreparedGraphicsObjects *prepared_objects, GraphicsStateGuardianBase *gsg) ==> Texture$_$prepare_now(Texture *param0, int param1, PreparedGraphicsObjects *param2, GraphicsStateGuardianBase *param3)(Texture *, int, PreparedGraphicsObjects *, GraphicsStateGuardianBase *)
extern TextureContext * Texture$240$prepare_now(Texture *self, int view, PreparedGraphicsObjects *prepared_objects, GraphicsStateGuardianBase *gsg);

#if INDEX
#define Texture_C_prepare_now_p_pipp Texture$240$prepare_now
#endif

// C++ _inCAAAARUGo(int value) ==> Texture$_$up_to_power_2(int param0)(int)
extern int Texture$241$up_to_power_2(int value);

#if INDEX
#define Texture_C_up_to_power_2_i_i Texture$241$up_to_power_2
#endif

// C++ _inCAAAAO34N(int value) ==> Texture$_$down_to_power_2(int param0)(int)
extern int Texture$242$down_to_power_2(int value);

#if INDEX
#define Texture_C_down_to_power_2_i_i Texture$242$down_to_power_2
#endif

// C++ _inCAAAA2TNp(PNMImage &pnmimage) ==> Texture$_$consider_rescale(Texture *param0, PNMImage *param1)(Texture *, PNMImage *)
extern void Texture$243$consider_rescale(Texture *self, PNMImage *pnmimage);

#if INDEX
#define Texture_C_consider_rescale_v_pp Texture$243$consider_rescale
#endif

// C++ _inCAAAA_Q1U(PNMImage &pnmimage, std::string const &name, AutoTextureScale auto_texture_scale) ==> Texture$_$consider_rescale(PNMImage *param0, char const *param1, AutoTextureScale param2)(PNMImage *, char const *, AutoTextureScale)
extern void Texture$244$consider_rescale(PNMImage *pnmimage, char const *name, AutoTextureScale auto_texture_scale);

#if INDEX
#define Texture_C_consider_rescale_v_psp Texture$244$consider_rescale
#endif

// C++ _inCAAAAIFIr(PNMImage &pnmimage, std::string const &name) ==> Texture$_$consider_rescale(PNMImage *param0, char const *param1)(PNMImage *, char const *)
extern void Texture$245$consider_rescale(PNMImage *pnmimage, char const *name);

#if INDEX
#define Texture_C_consider_rescale_v_ps Texture$245$consider_rescale
#endif

// C++ _inCAAAAAcI4() ==> Texture$_$rescale_texture(Texture *param0)(Texture *)
extern bool Texture$246$rescale_texture(Texture *self);

#if INDEX
#define Texture_C_rescale_texture_B_p Texture$246$rescale_texture
#endif

// C++ _inCAAAAaQx8(Texture::TextureType tt) ==> Texture$_$format_texture_type(Texture::TextureType param0)(Texture::TextureType)
extern char const * Texture$247$format_texture_type(Texture$_TextureType tt);

#if INDEX
#define Texture_C_format_texture_type_s_p Texture$247$format_texture_type
#endif

// C++ _inCAAAAQtnY(std::string const &str) ==> Texture$_$string_texture_type(char const *param0)(char const *)
extern Texture$_TextureType Texture$248$string_texture_type(char const *str);

#if INDEX
#define Texture_C_string_texture_type_p_s Texture$248$string_texture_type
#endif

// C++ _inCAAAApkXc(Texture::ComponentType ct) ==> Texture$_$format_component_type(Texture::ComponentType param0)(Texture::ComponentType)
extern char const * Texture$249$format_component_type(Texture$_ComponentType ct);

#if INDEX
#define Texture_C_format_component_type_s_p Texture$249$format_component_type
#endif

// C++ _inCAAAAczRb(std::string const &str) ==> Texture$_$string_component_type(char const *param0)(char const *)
extern Texture$_ComponentType Texture$250$string_component_type(char const *str);

#if INDEX
#define Texture_C_string_component_type_p_s Texture$250$string_component_type
#endif

// C++ _inCAAAAs0zV(Texture::Format f) ==> Texture$_$format_format(Texture::Format param0)(Texture::Format)
extern char const * Texture$251$format_format(Texture$_Format f);

#if INDEX
#define Texture_C_format_format_s_p Texture$251$format_format
#endif

// C++ _inCAAAA8LJN(std::string const &str) ==> Texture$_$string_format(char const *param0)(char const *)
extern Texture$_Format Texture$252$string_format(char const *str);

#if INDEX
#define Texture_C_string_format_p_s Texture$252$string_format
#endif

// C++ _inCAAAABL3k(Texture::CompressionMode cm) ==> Texture$_$format_compression_mode(Texture::CompressionMode param0)(Texture::CompressionMode)
extern char const * Texture$253$format_compression_mode(Texture$_CompressionMode cm);

#if INDEX
#define Texture_C_format_compression_mode_s_p Texture$253$format_compression_mode
#endif

// C++ _inCAAAAn7yd(std::string const &str) ==> Texture$_$string_compression_mode(char const *param0)(char const *)
extern Texture$_CompressionMode Texture$254$string_compression_mode(char const *str);

#if INDEX
#define Texture_C_string_compression_mode_p_s Texture$254$string_compression_mode
#endif

// C++ _inCAAAAgZEo(Texture::QualityLevel tql) ==> Texture$_$format_quality_level(Texture::QualityLevel param0)(Texture::QualityLevel)
extern char const * Texture$255$format_quality_level(Texture$_QualityLevel tql);

#if INDEX
#define Texture_C_format_quality_level_s_p Texture$255$format_quality_level
#endif

// C++ _inCAAAAXe0t(std::string const &str) ==> Texture$_$string_quality_level(char const *param0)(char const *)
extern Texture$_QualityLevel Texture$256$string_quality_level(char const *str);

#if INDEX
#define Texture_C_string_quality_level_p_s Texture$256$string_quality_level
#endif

// C++ _inCAAAAyrj5() ==> Texture$_$texture_uploaded(Texture *param0)(Texture *)
extern void Texture$257$texture_uploaded(Texture *self);

#if INDEX
#define Texture_C_texture_uploaded_v_p Texture$257$texture_uploaded
#endif

// C++ _inCAAAAmY_V() ==> Texture$_$has_cull_callback(Texture const *param0)(Texture const *)
extern bool Texture$258$has_cull_callback(Texture const *self);

#if INDEX
#define Texture_C_has_cull_callback_B_p Texture$258$has_cull_callback
#endif

// C++ _inCAAAAsWgm(CullTraverser *trav, CullTraverserData const &data) ==> Texture$_$cull_callback(Texture const *param0, CullTraverser *param1, CullTraverserData const *param2)(Texture const *, CullTraverser *, CullTraverserData const *)
extern bool Texture$259$cull_callback(Texture const *self, CullTraverser *trav, CullTraverserData const *data);

#if INDEX
#define Texture_C_cull_callback_B_ppp Texture$259$cull_callback
#endif

// C++ _inCAAAAD2Xf() ==> Texture$_$make_texture()()
extern char ** Texture$260$make_texture(void);

#if INDEX
#define Texture_C_make_texture_p_v Texture$260$make_texture
#endif

// C++ _inCAAAA77XA(Texture::ComponentType ctype) ==> Texture$_$is_unsigned(Texture::ComponentType param0)(Texture::ComponentType)
extern bool Texture$261$is_unsigned(Texture$_ComponentType ctype);

#if INDEX
#define Texture_C_is_unsigned_B_p Texture$261$is_unsigned
#endif

// C++ _inCAAAAY73n(Texture::CompressionMode compression) ==> Texture$_$is_specific(Texture::CompressionMode param0)(Texture::CompressionMode)
extern bool Texture$262$is_specific(Texture$_CompressionMode compression);

#if INDEX
#define Texture_C_is_specific_B_p Texture$262$is_specific
#endif

// C++ _inCAAAA2q9N(Texture::Format format) ==> Texture$_$has_alpha(Texture::Format param0)(Texture::Format)
extern bool Texture$263$has_alpha(Texture$_Format format);

#if INDEX
#define Texture_C_has_alpha_B_p Texture$263$has_alpha
#endif

// C++ _inCAAAAWZY9(Texture::Format format) ==> Texture$_$has_binary_alpha(Texture::Format param0)(Texture::Format)
extern bool Texture$264$has_binary_alpha(Texture$_Format format);

#if INDEX
#define Texture_C_has_binary_alpha_B_p Texture$264$has_binary_alpha
#endif

// C++ _inCAAAAiFIJ(Texture::Format format) ==> Texture$_$is_srgb(Texture::Format param0)(Texture::Format)
extern bool Texture$265$is_srgb(Texture$_Format format);

#if INDEX
#define Texture_C_is_srgb_B_p Texture$265$is_srgb
#endif

// C++ _inCAAAANy41(Filename const &filename) ==> Texture$_$ensure_loader_type(Texture *param0, Filename const *param1)(Texture *, Filename const *)
extern void Texture$266$ensure_loader_type(Texture *self, Filename const *filename);

#if INDEX
#define Texture_C_ensure_loader_type_v_pp Texture$266$ensure_loader_type
#endif

// C++ _inCAAAAn2Wd() ==> Texture$_$register_with_read_factory()()
extern void Texture$267$register_with_read_factory(void);

#if INDEX
#define Texture_C_register_with_read_factory_v_v Texture$267$register_with_read_factory
#endif

// C++ _inCAAAArCg2(BamWriter *manager, Datagram &me) ==> Texture$_$write_datagram(Texture *param0, BamWriter *param1, Datagram *param2)(Texture *, BamWriter *, Datagram *)
extern void Texture$268$write_datagram(Texture *self, BamWriter *manager, Datagram *me);

#if INDEX
#define Texture_C_write_datagram_v_ppp Texture$268$write_datagram
#endif

// C++ _inCAAAAdmBR(BamReader *manager) ==> Texture$_$finalize(Texture *param0, BamReader *param1)(Texture *, BamReader *)
extern void Texture$269$finalize(Texture *self, BamReader *manager);

#if INDEX
#define Texture_C_finalize_v_pp Texture$269$finalize
#endif

// C++ _inCAAAAoC2_() ==> Texture$_$get_class_type()()
extern int Texture$270$get_class_type(void);

#if INDEX
#define Texture_C_get_class_type_i_v Texture$270$get_class_type
#endif

// C++ _inCAAAAj_yY() ==> Texture$_$init_type()()
extern void Texture$271$init_type(void);

#if INDEX
#define Texture_C_init_type_v_v Texture$271$init_type
#endif

// C++ _inCAAAA_VDx() ==> Texture$_$get_type(Texture const *param0)(Texture const *)
extern int Texture$272$get_type(Texture const *self);

#if INDEX
#define Texture_C_get_type_i_p Texture$272$get_type
#endif

// C++ _inCAAAAH_tG() ==> Texture$_$force_init_type(Texture *param0)(Texture *)
extern int Texture$273$force_init_type(Texture *self);

#if INDEX
#define Texture_C_force_init_type_i_p Texture$273$force_init_type
#endif


// TextureCollection

// C++ _inCAAAAsz_w() ==> TextureCollection$_$TextureCollection()()
extern TextureCollection * TextureCollection$1$TextureCollection(void);

#if INDEX
#define TextureCollection_C_ctor_p_v TextureCollection$1$TextureCollection
#endif

// C++ _inCAAAAG2Wq(TextureCollection const &copy) ==> TextureCollection$_$TextureCollection(TextureCollection const *param0)(TextureCollection const *)
extern TextureCollection * TextureCollection$2$TextureCollection(TextureCollection const *copy);

#if INDEX
#define TextureCollection_C_ctor_p_p TextureCollection$2$TextureCollection
#endif

// C++ _inCAAAAqcTz(Texture *texture) ==> TextureCollection$_$add_texture(TextureCollection *param0, Texture *param1)(TextureCollection *, Texture *)
extern void TextureCollection$3$add_texture(TextureCollection *self, Texture *texture);

#if INDEX
#define TextureCollection_C_add_texture_v_pp TextureCollection$3$add_texture
#endif

// C++ _inCAAAA1SuY(Texture *texture) ==> TextureCollection$_$remove_texture(TextureCollection *param0, Texture *param1)(TextureCollection *, Texture *)
extern bool TextureCollection$4$remove_texture(TextureCollection *self, Texture *texture);

#if INDEX
#define TextureCollection_C_remove_texture_B_pp TextureCollection$4$remove_texture
#endif

// C++ _inCAAAABW2_(TextureCollection const &other) ==> TextureCollection$_$add_textures_from(TextureCollection *param0, TextureCollection const *param1)(TextureCollection *, TextureCollection const *)
extern void TextureCollection$5$add_textures_from(TextureCollection *self, TextureCollection const *other);

#if INDEX
#define TextureCollection_C_add_textures_from_v_pp TextureCollection$5$add_textures_from
#endif

// C++ _inCAAAAubPS(TextureCollection const &other) ==> TextureCollection$_$remove_textures_from(TextureCollection *param0, TextureCollection const *param1)(TextureCollection *, TextureCollection const *)
extern void TextureCollection$6$remove_textures_from(TextureCollection *self, TextureCollection const *other);

#if INDEX
#define TextureCollection_C_remove_textures_from_v_pp TextureCollection$6$remove_textures_from
#endif

// C++ _inCAAAAJXB3() ==> TextureCollection$_$remove_duplicate_textures(TextureCollection *param0)(TextureCollection *)
extern void TextureCollection$7$remove_duplicate_textures(TextureCollection *self);

#if INDEX
#define TextureCollection_C_remove_duplicate_textures_v_p TextureCollection$7$remove_duplicate_textures
#endif

// C++ _inCAAAAeRIZ(Texture *texture) ==> TextureCollection$_$has_texture(TextureCollection const *param0, Texture *param1)(TextureCollection const *, Texture *)
extern bool TextureCollection$8$has_texture(TextureCollection const *self, Texture *texture);

#if INDEX
#define TextureCollection_C_has_texture_B_pp TextureCollection$8$has_texture
#endif

// C++ _inCAAAAf_8F() ==> TextureCollection$_$clear(TextureCollection *param0)(TextureCollection *)
extern void TextureCollection$9$clear(TextureCollection *self);

#if INDEX
#define TextureCollection_C_clear_v_p TextureCollection$9$clear
#endif

// C++ _inCAAAAnBCu(std::size_t num) ==> TextureCollection$_$reserve(TextureCollection *param0, std::size_t param1)(TextureCollection *, std::size_t)
extern void TextureCollection$10$reserve(TextureCollection *self, std$_size_t num);

#if INDEX
#define TextureCollection_C_reserve_v_pl TextureCollection$10$reserve
#endif

// C++ _inCAAAAMtiS(std::string const &name) ==> TextureCollection$_$find_texture(TextureCollection const *param0, char const *param1)(TextureCollection const *, char const *)
extern Texture * TextureCollection$11$find_texture(TextureCollection const *self, char const *name);

#if INDEX
#define TextureCollection_C_find_texture_p_ps TextureCollection$11$find_texture
#endif

// C++ _inCAAAArq1E() ==> TextureCollection$_$get_num_textures(TextureCollection const *param0)(TextureCollection const *)
extern int TextureCollection$12$get_num_textures(TextureCollection const *self);

#if INDEX
#define TextureCollection_C_get_num_textures_i_p TextureCollection$12$get_num_textures
#endif

// C++ _inCAAAAXzkn(int index) ==> TextureCollection$_$get_texture(TextureCollection const *param0, int param1)(TextureCollection const *, int)
extern Texture * TextureCollection$13$get_texture(TextureCollection const *self, int index);

#if INDEX
#define TextureCollection_C_get_texture_p_pi TextureCollection$13$get_texture
#endif

// C++ _inCAAAA7T26() ==> TextureCollection$_$size(TextureCollection const *param0)(TextureCollection const *)
extern int TextureCollection$14$size(TextureCollection const *self);

#if INDEX
#define TextureCollection_C_size_i_p TextureCollection$14$size
#endif

// C++ _inCAAAArzMd(Texture *texture) ==> TextureCollection$_$append(TextureCollection *param0, Texture *param1)(TextureCollection *, Texture *)
extern void TextureCollection$15$append(TextureCollection *self, Texture *texture);

#if INDEX
#define TextureCollection_C_append_v_pp TextureCollection$15$append
#endif

// C++ _inCAAAAwLXu(TextureCollection const &other) ==> TextureCollection$_$extend(TextureCollection *param0, TextureCollection const *param1)(TextureCollection *, TextureCollection const *)
extern void TextureCollection$16$extend(TextureCollection *self, TextureCollection const *other);

#if INDEX
#define TextureCollection_C_extend_v_pp TextureCollection$16$extend
#endif

// C++ _inCAAAA3KJJ(std::ostream &out) ==> TextureCollection$_$output(TextureCollection const *param0, std::ostream *param1)(TextureCollection const *, std::ostream *)
extern void TextureCollection$17$output(TextureCollection const *self, std$_ostream *out);

#if INDEX
#define TextureCollection_C_output_v_pp TextureCollection$17$output
#endif

// C++ _inCAAAA7qz6(std::ostream &out, int indent_level) ==> TextureCollection$_$write(TextureCollection const *param0, std::ostream *param1, int param2)(TextureCollection const *, std::ostream *, int)
extern void TextureCollection$18$write(TextureCollection const *self, std$_ostream *out, int indent_level);

#if INDEX
#define TextureCollection_C_write_v_ppi TextureCollection$18$write
#endif

// C++ _inCAAAAAn5b(std::ostream &out) ==> TextureCollection$_$write(TextureCollection const *param0, std::ostream *param1)(TextureCollection const *, std::ostream *)
extern void TextureCollection$19$write(TextureCollection const *self, std$_ostream *out);

#if INDEX
#define TextureCollection_C_write_v_pp TextureCollection$19$write
#endif


// TexturePeeker

// C++ _inCAAAAgUUH() ==> TexturePeeker$_$is_valid(TexturePeeker const *param0)(TexturePeeker const *)
extern bool TexturePeeker$1$is_valid(TexturePeeker const *self);

#if INDEX
#define TexturePeeker_C_is_valid_B_p TexturePeeker$1$is_valid
#endif

// C++ _inCAAAAqJgl() ==> TexturePeeker$_$get_x_size(TexturePeeker const *param0)(TexturePeeker const *)
extern int TexturePeeker$2$get_x_size(TexturePeeker const *self);

#if INDEX
#define TexturePeeker_C_get_x_size_i_p TexturePeeker$2$get_x_size
#endif

// C++ _inCAAAA3igF() ==> TexturePeeker$_$get_y_size(TexturePeeker const *param0)(TexturePeeker const *)
extern int TexturePeeker$3$get_y_size(TexturePeeker const *self);

#if INDEX
#define TexturePeeker_C_get_y_size_i_p TexturePeeker$3$get_y_size
#endif

// C++ _inCAAAARHhl() ==> TexturePeeker$_$get_z_size(TexturePeeker const *param0)(TexturePeeker const *)
extern int TexturePeeker$4$get_z_size(TexturePeeker const *self);

#if INDEX
#define TexturePeeker_C_get_z_size_i_p TexturePeeker$4$get_z_size
#endif

// C++ _inCAAAAKqcU(int x, int y) ==> TexturePeeker$_$has_pixel(TexturePeeker const *param0, int param1, int param2)(TexturePeeker const *, int, int)
extern bool TexturePeeker$5$has_pixel(TexturePeeker const *self, int x, int y);

#if INDEX
#define TexturePeeker_C_has_pixel_B_pii TexturePeeker$5$has_pixel
#endif

// C++ _inCAAAA9LV0(LColor &color, PN_stdfloat u, PN_stdfloat v) ==> TexturePeeker$_$lookup(TexturePeeker const *param0, LColor *param1, PN_stdfloat param2, PN_stdfloat param3)(TexturePeeker const *, LColor *, PN_stdfloat, PN_stdfloat)
extern void TexturePeeker$6$lookup(TexturePeeker const *self, LColor *color, PN_stdfloat u, PN_stdfloat v);

#if INDEX
#define TexturePeeker_C_lookup_v_ppff TexturePeeker$6$lookup
#endif

// C++ _inCAAAAg92i(LColor &color, PN_stdfloat u, PN_stdfloat v, PN_stdfloat w) ==> TexturePeeker$_$lookup(TexturePeeker const *param0, LColor *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4)(TexturePeeker const *, LColor *, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void TexturePeeker$7$lookup(TexturePeeker const *self, LColor *color, PN_stdfloat u, PN_stdfloat v, PN_stdfloat w);

#if INDEX
#define TexturePeeker_C_lookup_v_ppfff TexturePeeker$7$lookup
#endif

// C++ _inCAAAAOsyP(LColor &color, int x, int y) ==> TexturePeeker$_$fetch_pixel(TexturePeeker const *param0, LColor *param1, int param2, int param3)(TexturePeeker const *, LColor *, int, int)
extern void TexturePeeker$8$fetch_pixel(TexturePeeker const *self, LColor *color, int x, int y);

#if INDEX
#define TexturePeeker_C_fetch_pixel_v_ppii TexturePeeker$8$fetch_pixel
#endif

// C++ _inCAAAAyKCY(LColor &color, PN_stdfloat u, PN_stdfloat v) ==> TexturePeeker$_$lookup_bilinear(TexturePeeker const *param0, LColor *param1, PN_stdfloat param2, PN_stdfloat param3)(TexturePeeker const *, LColor *, PN_stdfloat, PN_stdfloat)
extern bool TexturePeeker$9$lookup_bilinear(TexturePeeker const *self, LColor *color, PN_stdfloat u, PN_stdfloat v);

#if INDEX
#define TexturePeeker_C_lookup_bilinear_B_ppff TexturePeeker$9$lookup_bilinear
#endif

// C++ _inCAAAAOp06(LColor &color, PN_stdfloat min_u, PN_stdfloat min_v, PN_stdfloat max_u, PN_stdfloat max_v) ==> TexturePeeker$_$filter_rect(TexturePeeker const *param0, LColor *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5)(TexturePeeker const *, LColor *, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void TexturePeeker$10$filter_rect(TexturePeeker const *self, LColor *color, PN_stdfloat min_u, PN_stdfloat min_v, PN_stdfloat max_u, PN_stdfloat max_v);

#if INDEX
#define TexturePeeker_C_filter_rect_v_ppffff TexturePeeker$10$filter_rect
#endif

// C++ _inCAAAAySxM(LColor &color, PN_stdfloat min_u, PN_stdfloat min_v, PN_stdfloat min_w, PN_stdfloat max_u, PN_stdfloat max_v, PN_stdfloat max_w) ==> TexturePeeker$_$filter_rect(TexturePeeker const *param0, LColor *param1, PN_stdfloat param2, PN_stdfloat param3, PN_stdfloat param4, PN_stdfloat param5, PN_stdfloat param6, PN_stdfloat param7)(TexturePeeker const *, LColor *, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat, PN_stdfloat)
extern void TexturePeeker$11$filter_rect(TexturePeeker const *self, LColor *color, PN_stdfloat min_u, PN_stdfloat min_v, PN_stdfloat min_w, PN_stdfloat max_u, PN_stdfloat max_v, PN_stdfloat max_w);

#if INDEX
#define TexturePeeker_C_filter_rect_v_ppffffff TexturePeeker$11$filter_rect
#endif

// C++ _inCAAAA1_oB(TexturePeeker const &) ==> TexturePeeker$_$TexturePeeker(TexturePeeker const *param0)(TexturePeeker const *)
extern TexturePeeker * TexturePeeker$12$TexturePeeker(TexturePeeker const *arg0);

#if INDEX
#define TexturePeeker_C_ctor_p_p TexturePeeker$12$TexturePeeker
#endif


// Thread

// C++ _inCAAAAm7Dx() ==> Thread$_$upcast_to_TypedReferenceCount(Thread *param0)(Thread *)
extern TypedReferenceCount * Thread$1$upcast_to_TypedReferenceCount(Thread *self);

#if INDEX
#define Thread_C_upcast_to_TypedReferenceCount_p_p Thread$1$upcast_to_TypedReferenceCount
#endif

// C++ _inCAAAAlnUX() ==> Thread$_$upcast_to_Namable(Thread *param0)(Thread *)
extern Namable * Thread$2$upcast_to_Namable(Thread *self);

#if INDEX
#define Thread_C_upcast_to_Namable_p_p Thread$2$upcast_to_Namable
#endif

// C++ _inCAAAAXWfm(std::string const &name, std::string const &sync_name) ==> Thread$_$bind_thread(char const *param0, char const *param1)(char const *, char const *)
extern char ** Thread$3$bind_thread(char const *name, char const *sync_name);

#if INDEX
#define Thread_C_bind_thread_p_ss Thread$3$bind_thread
#endif

// C++ _inCAAAAjq87() ==> Thread$_$get_sync_name(Thread const *param0)(Thread const *)
extern char const * Thread$4$get_sync_name(Thread const *self);

#if INDEX
#define Thread_C_get_sync_name_s_p Thread$4$get_sync_name
#endif

// C++ _inCAAAAH7ri() ==> Thread$_$get_pstats_index(Thread const *param0)(Thread const *)
extern int Thread$5$get_pstats_index(Thread const *self);

#if INDEX
#define Thread_C_get_pstats_index_i_p Thread$5$get_pstats_index
#endif

// C++ _inCAAAApgPT() ==> Thread$_$get_python_index(Thread const *param0)(Thread const *)
extern int Thread$6$get_python_index(Thread const *self);

#if INDEX
#define Thread_C_get_python_index_i_p Thread$6$get_python_index
#endif

// C++ _inCAAAAgw2i() ==> Thread$_$get_unique_id(Thread const *param0)(Thread const *)
extern char const * Thread$7$get_unique_id(Thread const *self);

#if INDEX
#define Thread_C_get_unique_id_s_p Thread$7$get_unique_id
#endif

// C++ _inCAAAAmKhn() ==> Thread$_$get_pipeline_stage(Thread const *param0)(Thread const *)
extern int Thread$8$get_pipeline_stage(Thread const *self);

#if INDEX
#define Thread_C_get_pipeline_stage_i_p Thread$8$get_pipeline_stage
#endif

// C++ _inCAAAAiVSW(int pipeline_stage) ==> Thread$_$set_pipeline_stage(Thread *param0, int param1)(Thread *, int)
extern void Thread$9$set_pipeline_stage(Thread *self, int pipeline_stage);

#if INDEX
#define Thread_C_set_pipeline_stage_v_pi Thread$9$set_pipeline_stage
#endif

// C++ _inCAAAAOmlk(int min_pipeline_stage) ==> Thread$_$set_min_pipeline_stage(Thread *param0, int param1)(Thread *, int)
extern void Thread$10$set_min_pipeline_stage(Thread *self, int min_pipeline_stage);

#if INDEX
#define Thread_C_set_min_pipeline_stage_v_pi Thread$10$set_min_pipeline_stage
#endif

// C++ _inCAAAAY2Dw() ==> Thread$_$get_main_thread()()
extern Thread * Thread$11$get_main_thread(void);

#if INDEX
#define Thread_C_get_main_thread_p_v Thread$11$get_main_thread
#endif

// C++ _inCAAAAD1UC() ==> Thread$_$get_external_thread()()
extern Thread * Thread$12$get_external_thread(void);

#if INDEX
#define Thread_C_get_external_thread_p_v Thread$12$get_external_thread
#endif

// C++ _inCAAAA3TiV() ==> Thread$_$get_current_thread()()
extern Thread * Thread$13$get_current_thread(void);

#if INDEX
#define Thread_C_get_current_thread_p_v Thread$13$get_current_thread
#endif

// C++ _inCAAAAqF2R() ==> Thread$_$get_current_pipeline_stage()()
extern int Thread$14$get_current_pipeline_stage(void);

#if INDEX
#define Thread_C_get_current_pipeline_stage_i_v Thread$14$get_current_pipeline_stage
#endif

// C++ _inCAAAA5vLQ() ==> Thread$_$is_threading_supported()()
extern bool Thread$15$is_threading_supported(void);

#if INDEX
#define Thread_C_is_threading_supported_B_v Thread$15$is_threading_supported
#endif

// C++ _inCAAAAyg5j() ==> Thread$_$is_true_threads()()
extern bool Thread$16$is_true_threads(void);

#if INDEX
#define Thread_C_is_true_threads_B_v Thread$16$is_true_threads
#endif

// C++ _inCAAAAQd5Y() ==> Thread$_$is_simple_threads()()
extern bool Thread$17$is_simple_threads(void);

#if INDEX
#define Thread_C_is_simple_threads_B_v Thread$17$is_simple_threads
#endif

// C++ _inCAAAAEK72(double seconds) ==> Thread$_$sleep(double param0)(double)
extern void Thread$18$sleep(double seconds);

#if INDEX
#define Thread_C_sleep_v_d Thread$18$sleep
#endif

// C++ _inCAAAAA_Rs() ==> Thread$_$force_yield()()
extern void Thread$19$force_yield(void);

#if INDEX
#define Thread_C_force_yield_v_v Thread$19$force_yield
#endif

// C++ _inCAAAAMrcC() ==> Thread$_$consider_yield()()
extern void Thread$20$consider_yield(void);

#if INDEX
#define Thread_C_consider_yield_v_v Thread$20$consider_yield
#endif

// C++ _inCAAAAUeB8(std::ostream &out) ==> Thread$_$output(Thread const *param0, std::ostream *param1)(Thread const *, std::ostream *)
extern void Thread$21$output(Thread const *self, std$_ostream *out);

#if INDEX
#define Thread_C_output_v_pp Thread$21$output
#endif

// C++ _inCAAAA8roA(std::ostream &out) ==> Thread$_$output_blocker(Thread const *param0, std::ostream *param1)(Thread const *, std::ostream *)
extern void Thread$22$output_blocker(Thread const *self, std$_ostream *out);

#if INDEX
#define Thread_C_output_blocker_v_pp Thread$22$output_blocker
#endif

// C++ _inCAAAAw3QC(std::ostream &out) ==> Thread$_$write_status(std::ostream *param0)(std::ostream *)
extern void Thread$23$write_status(std$_ostream *out);

#if INDEX
#define Thread_C_write_status_v_p Thread$23$write_status
#endif

// C++ _inCAAAA9pHH() ==> Thread$_$is_started(Thread const *param0)(Thread const *)
extern bool Thread$24$is_started(Thread const *self);

#if INDEX
#define Thread_C_is_started_B_p Thread$24$is_started
#endif

// C++ _inCAAAAfYmX() ==> Thread$_$is_joinable(Thread const *param0)(Thread const *)
extern bool Thread$25$is_joinable(Thread const *self);

#if INDEX
#define Thread_C_is_joinable_B_p Thread$25$is_joinable
#endif

// C++ _inCAAAA6vf2(ThreadPriority priority, bool joinable) ==> Thread$_$start(Thread *param0, ThreadPriority param1, bool param2)(Thread *, ThreadPriority, bool)
extern bool Thread$26$start(Thread *self, ThreadPriority priority, bool joinable);

#if INDEX
#define Thread_C_start_B_ppB Thread$26$start
#endif

// C++ _inCAAAAz6lV() ==> Thread$_$join(Thread *param0)(Thread *)
extern void Thread$27$join(Thread *self);

#if INDEX
#define Thread_C_join_v_p Thread$27$join
#endif

// C++ _inCAAAAEmqG() ==> Thread$_$preempt(Thread *param0)(Thread *)
extern void Thread$28$preempt(Thread *self);

#if INDEX
#define Thread_C_preempt_v_p Thread$28$preempt
#endif

// C++ _inCAAAAHhFW() ==> Thread$_$get_current_task(Thread const *param0)(Thread const *)
extern TypedReferenceCount * Thread$29$get_current_task(Thread const *self);

#if INDEX
#define Thread_C_get_current_task_p_p Thread$29$get_current_task
#endif

// C++ _inCAAAAE6VW(int index) ==> Thread$_$set_python_index(Thread *param0, int param1)(Thread *, int)
extern void Thread$30$set_python_index(Thread *self, int index);

#if INDEX
#define Thread_C_set_python_index_v_pi Thread$30$set_python_index
#endif

// C++ _inCAAAAwYwm() ==> Thread$_$prepare_for_exit()()
extern void Thread$31$prepare_for_exit(void);

#if INDEX
#define Thread_C_prepare_for_exit_v_v Thread$31$prepare_for_exit
#endif

// C++ _inCAAAA77wl(int pstats_index) ==> Thread$_$set_pstats_index(Thread *param0, int param1)(Thread *, int)
extern void Thread$32$set_pstats_index(Thread *self, int pstats_index);

#if INDEX
#define Thread_C_set_pstats_index_v_pi Thread$32$set_pstats_index
#endif

// C++ _inCAAAADnHA(Thread::PStatsCallback *pstats_callback) ==> Thread$_$set_pstats_callback(Thread *param0, Thread::PStatsCallback *param1)(Thread *, Thread::PStatsCallback *)
extern void Thread$33$set_pstats_callback(Thread *self, Thread$_PStatsCallback *pstats_callback);

#if INDEX
#define Thread_C_set_pstats_callback_v_pp Thread$33$set_pstats_callback
#endif

// C++ _inCAAAAFEBN() ==> Thread$_$get_pstats_callback(Thread const *param0)(Thread const *)
extern Thread$_PStatsCallback * Thread$34$get_pstats_callback(Thread const *self);

#if INDEX
#define Thread_C_get_pstats_callback_p_p Thread$34$get_pstats_callback
#endif

// C++ _inCAAAA_lqM() ==> Thread$_$get_class_type()()
extern int Thread$35$get_class_type(void);

#if INDEX
#define Thread_C_get_class_type_i_v Thread$35$get_class_type
#endif

// C++ _inCAAAAx9dP() ==> Thread$_$init_type()()
extern void Thread$36$init_type(void);

#if INDEX
#define Thread_C_init_type_v_v Thread$36$init_type
#endif

// C++ _inCAAAAxNNE() ==> Thread$_$get_type(Thread const *param0)(Thread const *)
extern int Thread$37$get_type(Thread const *self);

#if INDEX
#define Thread_C_get_type_i_p Thread$37$get_type
#endif

// C++ _inCAAAAGz5S() ==> Thread$_$force_init_type(Thread *param0)(Thread *)
extern int Thread$38$force_init_type(Thread *self);

#if INDEX
#define Thread_C_force_init_type_i_p Thread$38$force_init_type
#endif


// TouchInfo

// C++ _inCAAAAnoNZ() ==> TouchInfo$_$TouchInfo()()
extern TouchInfo * TouchInfo$1$TouchInfo(void);

#if INDEX
#define TouchInfo_C_ctor_p_v TouchInfo$1$TouchInfo
#endif

// C++ _inCAAAAmjKN(TouchInfo const &) ==> TouchInfo$_$TouchInfo(TouchInfo const *param0)(TouchInfo const *)
extern TouchInfo * TouchInfo$2$TouchInfo(TouchInfo const *arg0);

#if INDEX
#define TouchInfo_C_ctor_p_p TouchInfo$2$TouchInfo
#endif

// C++ _inCAAAAcmlw(int x) ==> TouchInfo$_$set_x(TouchInfo *param0, int param1)(TouchInfo *, int)
extern void TouchInfo$3$set_x(TouchInfo *self, int x);

#if INDEX
#define TouchInfo_C_set_x_v_pi TouchInfo$3$set_x
#endif

// C++ _inCAAAAUXvw(int y) ==> TouchInfo$_$set_y(TouchInfo *param0, int param1)(TouchInfo *, int)
extern void TouchInfo$4$set_y(TouchInfo *self, int y);

#if INDEX
#define TouchInfo_C_set_y_v_pi TouchInfo$4$set_y
#endif

// C++ _inCAAAAD_Ht(int id) ==> TouchInfo$_$set_id(TouchInfo *param0, int param1)(TouchInfo *, int)
extern void TouchInfo$5$set_id(TouchInfo *self, int id);

#if INDEX
#define TouchInfo_C_set_id_v_pi TouchInfo$5$set_id
#endif

// C++ _inCAAAAYV2g(int flags) ==> TouchInfo$_$set_flags(TouchInfo *param0, int param1)(TouchInfo *, int)
extern void TouchInfo$6$set_flags(TouchInfo *self, int flags);

#if INDEX
#define TouchInfo_C_set_flags_v_pi TouchInfo$6$set_flags
#endif

// C++ _inCAAAAPUp1() ==> TouchInfo$_$get_x(TouchInfo *param0)(TouchInfo *)
extern int TouchInfo$7$get_x(TouchInfo *self);

#if INDEX
#define TouchInfo_C_get_x_i_p TouchInfo$7$get_x
#endif

// C++ _inCAAAAHDz1() ==> TouchInfo$_$get_y(TouchInfo *param0)(TouchInfo *)
extern int TouchInfo$8$get_y(TouchInfo *self);

#if INDEX
#define TouchInfo_C_get_y_i_p TouchInfo$8$get_y
#endif

// C++ _inCAAAAA_Db() ==> TouchInfo$_$get_id(TouchInfo *param0)(TouchInfo *)
extern int TouchInfo$9$get_id(TouchInfo *self);

#if INDEX
#define TouchInfo_C_get_id_i_p TouchInfo$9$get_id
#endif

// C++ _inCAAAAMWv5() ==> TouchInfo$_$get_flags(TouchInfo *param0)(TouchInfo *)
extern int TouchInfo$10$get_flags(TouchInfo *self);

#if INDEX
#define TouchInfo_C_get_flags_i_p TouchInfo$10$get_flags
#endif


// TransformState

// C++ _inCAAAAuklB(TransformState const &other) ==> TransformState$_$compare_to(TransformState const *param0, TransformState const *param1)(TransformState const *, TransformState const *)
extern int TransformState$1$compare_to(TransformState const *self, TransformState const *other);

#if INDEX
#define TransformState_C_compare_to_i_pp TransformState$1$compare_to
#endif

// C++ _inCAAAAM0Qo(TransformState const &other, bool uniquify_matrix) ==> TransformState$_$compare_to(TransformState const *param0, TransformState const *param1, bool param2)(TransformState const *, TransformState const *, bool)
extern int TransformState$2$compare_to(TransformState const *self, TransformState const *other, bool uniquify_matrix);

#if INDEX
#define TransformState_C_compare_to_i_ppB TransformState$2$compare_to
#endif

// C++ _inCAAAANPd4() ==> TransformState$_$get_hash(TransformState const *param0)(TransformState const *)
extern std$_size_t TransformState$3$get_hash(TransformState const *self);

#if INDEX
#define TransformState_C_get_hash_l_p TransformState$3$get_hash
#endif

// C++ _inCAAAAoK5A() ==> TransformState$_$make_identity()()
extern char ** TransformState$4$make_identity(void);

#if INDEX
#define TransformState_C_make_identity_p_v TransformState$4$make_identity
#endif

// C++ _inCAAAA0MDC() ==> TransformState$_$make_invalid()()
extern char ** TransformState$5$make_invalid(void);

#if INDEX
#define TransformState_C_make_invalid_p_v TransformState$5$make_invalid
#endif

// C++ _inCAAAAspxw(LVecBase3 const &pos) ==> TransformState$_$make_pos(LVecBase3 const *param0)(LVecBase3 const *)
extern char ** TransformState$6$make_pos(LVecBase3 const *pos);

#if INDEX
#define TransformState_C_make_pos_p_p TransformState$6$make_pos
#endif

// C++ _inCAAAAU0GN(LVecBase3 const &hpr) ==> TransformState$_$make_hpr(LVecBase3 const *param0)(LVecBase3 const *)
extern char ** TransformState$7$make_hpr(LVecBase3 const *hpr);

#if INDEX
#define TransformState_C_make_hpr_p_p TransformState$7$make_hpr
#endif

// C++ _inCAAAAO9vn(LQuaternion const &quat) ==> TransformState$_$make_quat(LQuaternion const *param0)(LQuaternion const *)
extern char ** TransformState$8$make_quat(LQuaternion const *quat);

#if INDEX
#define TransformState_C_make_quat_p_p TransformState$8$make_quat
#endif

// C++ _inCAAAASFnT(LVecBase3 const &pos, LVecBase3 const &hpr) ==> TransformState$_$make_pos_hpr(LVecBase3 const *param0, LVecBase3 const *param1)(LVecBase3 const *, LVecBase3 const *)
extern char ** TransformState$9$make_pos_hpr(LVecBase3 const *pos, LVecBase3 const *hpr);

#if INDEX
#define TransformState_C_make_pos_hpr_p_pp TransformState$9$make_pos_hpr
#endif

// C++ _inCAAAALkAQ(LVecBase3 const &scale) ==> TransformState$_$make_scale(LVecBase3 const *param0)(LVecBase3 const *)
extern char ** TransformState$10$make_scale(LVecBase3 const *scale);

#if INDEX
#define TransformState_C_make_scale_p_p TransformState$10$make_scale
#endif

// C++ _inCAAAAHzCk(PN_stdfloat scale) ==> TransformState$_$make_scale(PN_stdfloat param0)(PN_stdfloat)
extern char ** TransformState$11$make_scale(PN_stdfloat scale);

#if INDEX
#define TransformState_C_make_scale_p_f TransformState$11$make_scale
#endif

// C++ _inCAAAAvk6p(LVecBase3 const &shear) ==> TransformState$_$make_shear(LVecBase3 const *param0)(LVecBase3 const *)
extern char ** TransformState$12$make_shear(LVecBase3 const *shear);

#if INDEX
#define TransformState_C_make_shear_p_p TransformState$12$make_shear
#endif

// C++ _inCAAAAhE16(LVecBase3 const &pos, LVecBase3 const &hpr, LVecBase3 const &scale) ==> TransformState$_$make_pos_hpr_scale(LVecBase3 const *param0, LVecBase3 const *param1, LVecBase3 const *param2)(LVecBase3 const *, LVecBase3 const *, LVecBase3 const *)
extern char ** TransformState$13$make_pos_hpr_scale(LVecBase3 const *pos, LVecBase3 const *hpr, LVecBase3 const *scale);

#if INDEX
#define TransformState_C_make_pos_hpr_scale_p_ppp TransformState$13$make_pos_hpr_scale
#endif

// C++ _inCAAAAjedv(LVecBase3 const &pos, LQuaternion const &quat, LVecBase3 const &scale) ==> TransformState$_$make_pos_quat_scale(LVecBase3 const *param0, LQuaternion const *param1, LVecBase3 const *param2)(LVecBase3 const *, LQuaternion const *, LVecBase3 const *)
extern char ** TransformState$14$make_pos_quat_scale(LVecBase3 const *pos, LQuaternion const *quat, LVecBase3 const *scale);

#if INDEX
#define TransformState_C_make_pos_quat_scale_p_ppp TransformState$14$make_pos_quat_scale
#endif

// C++ _inCAAAA727i(LVecBase3 const &pos, LVecBase3 const &hpr, LVecBase3 const &scale, LVecBase3 const &shear) ==> TransformState$_$make_pos_hpr_scale_shear(LVecBase3 const *param0, LVecBase3 const *param1, LVecBase3 const *param2, LVecBase3 const *param3)(LVecBase3 const *, LVecBase3 const *, LVecBase3 const *, LVecBase3 const *)
extern char ** TransformState$15$make_pos_hpr_scale_shear(LVecBase3 const *pos, LVecBase3 const *hpr, LVecBase3 const *scale, LVecBase3 const *shear);

#if INDEX
#define TransformState_C_make_pos_hpr_scale_shear_p_pppp TransformState$15$make_pos_hpr_scale_shear
#endif

// C++ _inCAAAAG_fD(LVecBase3 const &pos, LQuaternion const &quat, LVecBase3 const &scale, LVecBase3 const &shear) ==> TransformState$_$make_pos_quat_scale_shear(LVecBase3 const *param0, LQuaternion const *param1, LVecBase3 const *param2, LVecBase3 const *param3)(LVecBase3 const *, LQuaternion const *, LVecBase3 const *, LVecBase3 const *)
extern char ** TransformState$16$make_pos_quat_scale_shear(LVecBase3 const *pos, LQuaternion const *quat, LVecBase3 const *scale, LVecBase3 const *shear);

#if INDEX
#define TransformState_C_make_pos_quat_scale_shear_p_pppp TransformState$16$make_pos_quat_scale_shear
#endif

// C++ _inCAAAAdJGa(LMatrix4 const &mat) ==> TransformState$_$make_mat(LMatrix4 const *param0)(LMatrix4 const *)
extern char ** TransformState$17$make_mat(LMatrix4 const *mat);

#if INDEX
#define TransformState_C_make_mat_p_p TransformState$17$make_mat
#endif

// C++ _inCAAAAjEzP(LVecBase2 const &pos) ==> TransformState$_$make_pos2d(LVecBase2 const *param0)(LVecBase2 const *)
extern char ** TransformState$18$make_pos2d(LVecBase2 const *pos);

#if INDEX
#define TransformState_C_make_pos2d_p_p TransformState$18$make_pos2d
#endif

// C++ _inCAAAANpgY(PN_stdfloat rotate) ==> TransformState$_$make_rotate2d(PN_stdfloat param0)(PN_stdfloat)
extern char ** TransformState$19$make_rotate2d(PN_stdfloat rotate);

#if INDEX
#define TransformState_C_make_rotate2d_p_f TransformState$19$make_rotate2d
#endif

// C++ _inCAAAAN6wM(LVecBase2 const &pos, PN_stdfloat rotate) ==> TransformState$_$make_pos_rotate2d(LVecBase2 const *param0, PN_stdfloat param1)(LVecBase2 const *, PN_stdfloat)
extern char ** TransformState$20$make_pos_rotate2d(LVecBase2 const *pos, PN_stdfloat rotate);

#if INDEX
#define TransformState_C_make_pos_rotate2d_p_pf TransformState$20$make_pos_rotate2d
#endif

// C++ _inCAAAA79W7(LVecBase2 const &scale) ==> TransformState$_$make_scale2d(LVecBase2 const *param0)(LVecBase2 const *)
extern char ** TransformState$21$make_scale2d(LVecBase2 const *scale);

#if INDEX
#define TransformState_C_make_scale2d_p_p TransformState$21$make_scale2d
#endif

// C++ _inCAAAAZUbG(PN_stdfloat scale) ==> TransformState$_$make_scale2d(PN_stdfloat param0)(PN_stdfloat)
extern char ** TransformState$22$make_scale2d(PN_stdfloat scale);

#if INDEX
#define TransformState_C_make_scale2d_p_f TransformState$22$make_scale2d
#endif

// C++ _inCAAAA91Ug(PN_stdfloat shear) ==> TransformState$_$make_shear2d(PN_stdfloat param0)(PN_stdfloat)
extern char ** TransformState$23$make_shear2d(PN_stdfloat shear);

#if INDEX
#define TransformState_C_make_shear2d_p_f TransformState$23$make_shear2d
#endif

// C++ _inCAAAAerDv(LVecBase2 const &pos, PN_stdfloat rotate, LVecBase2 const &scale) ==> TransformState$_$make_pos_rotate_scale2d(LVecBase2 const *param0, PN_stdfloat param1, LVecBase2 const *param2)(LVecBase2 const *, PN_stdfloat, LVecBase2 const *)
extern char ** TransformState$24$make_pos_rotate_scale2d(LVecBase2 const *pos, PN_stdfloat rotate, LVecBase2 const *scale);

#if INDEX
#define TransformState_C_make_pos_rotate_scale2d_p_pfp TransformState$24$make_pos_rotate_scale2d
#endif

// C++ _inCAAAAG6ss(LVecBase2 const &pos, PN_stdfloat rotate, LVecBase2 const &scale, PN_stdfloat shear) ==> TransformState$_$make_pos_rotate_scale_shear2d(LVecBase2 const *param0, PN_stdfloat param1, LVecBase2 const *param2, PN_stdfloat param3)(LVecBase2 const *, PN_stdfloat, LVecBase2 const *, PN_stdfloat)
extern char ** TransformState$25$make_pos_rotate_scale_shear2d(LVecBase2 const *pos, PN_stdfloat rotate, LVecBase2 const *scale, PN_stdfloat shear);

#if INDEX
#define TransformState_C_make_pos_rotate_scale_shear2d_p_pfpf TransformState$25$make_pos_rotate_scale_shear2d
#endif

// C++ _inCAAAABBr2(LMatrix3 const &mat) ==> TransformState$_$make_mat3(LMatrix3 const *param0)(LMatrix3 const *)
extern char ** TransformState$26$make_mat3(LMatrix3 const *mat);

#if INDEX
#define TransformState_C_make_mat3_p_p TransformState$26$make_mat3
#endif

// C++ _inCAAAA70HT() ==> TransformState$_$is_identity(TransformState const *param0)(TransformState const *)
extern bool TransformState$27$is_identity(TransformState const *self);

#if INDEX
#define TransformState_C_is_identity_B_p TransformState$27$is_identity
#endif

// C++ _inCAAAA5m5t() ==> TransformState$_$is_invalid(TransformState const *param0)(TransformState const *)
extern bool TransformState$28$is_invalid(TransformState const *self);

#if INDEX
#define TransformState_C_is_invalid_B_p TransformState$28$is_invalid
#endif

// C++ _inCAAAA83Ub() ==> TransformState$_$is_singular(TransformState const *param0)(TransformState const *)
extern bool TransformState$29$is_singular(TransformState const *self);

#if INDEX
#define TransformState_C_is_singular_B_p TransformState$29$is_singular
#endif

// C++ _inCAAAAFbzh() ==> TransformState$_$is_2d(TransformState const *param0)(TransformState const *)
extern bool TransformState$30$is_2d(TransformState const *self);

#if INDEX
#define TransformState_C_is_2d_B_p TransformState$30$is_2d
#endif

// C++ _inCAAAA3N1T() ==> TransformState$_$has_components(TransformState const *param0)(TransformState const *)
extern bool TransformState$31$has_components(TransformState const *self);

#if INDEX
#define TransformState_C_has_components_B_p TransformState$31$has_components
#endif

// C++ _inCAAAAoeA_() ==> TransformState$_$components_given(TransformState const *param0)(TransformState const *)
extern bool TransformState$32$components_given(TransformState const *self);

#if INDEX
#define TransformState_C_components_given_B_p TransformState$32$components_given
#endif

// C++ _inCAAAAePnm() ==> TransformState$_$hpr_given(TransformState const *param0)(TransformState const *)
extern bool TransformState$33$hpr_given(TransformState const *self);

#if INDEX
#define TransformState_C_hpr_given_B_p TransformState$33$hpr_given
#endif

// C++ _inCAAAAfBB6() ==> TransformState$_$quat_given(TransformState const *param0)(TransformState const *)
extern bool TransformState$34$quat_given(TransformState const *self);

#if INDEX
#define TransformState_C_quat_given_B_p TransformState$34$quat_given
#endif

// C++ _inCAAAAd7_k() ==> TransformState$_$has_pos(TransformState const *param0)(TransformState const *)
extern bool TransformState$35$has_pos(TransformState const *self);

#if INDEX
#define TransformState_C_has_pos_B_p TransformState$35$has_pos
#endif

// C++ _inCAAAAaR4z() ==> TransformState$_$has_hpr(TransformState const *param0)(TransformState const *)
extern bool TransformState$36$has_hpr(TransformState const *self);

#if INDEX
#define TransformState_C_has_hpr_B_p TransformState$36$has_hpr
#endif

// C++ _inCAAAAbgn7() ==> TransformState$_$has_quat(TransformState const *param0)(TransformState const *)
extern bool TransformState$37$has_quat(TransformState const *self);

#if INDEX
#define TransformState_C_has_quat_B_p TransformState$37$has_quat
#endif

// C++ _inCAAAAeXCQ() ==> TransformState$_$has_scale(TransformState const *param0)(TransformState const *)
extern bool TransformState$38$has_scale(TransformState const *self);

#if INDEX
#define TransformState_C_has_scale_B_p TransformState$38$has_scale
#endif

// C++ _inCAAAAtKCi() ==> TransformState$_$has_identity_scale(TransformState const *param0)(TransformState const *)
extern bool TransformState$39$has_identity_scale(TransformState const *self);

#if INDEX
#define TransformState_C_has_identity_scale_B_p TransformState$39$has_identity_scale
#endif

// C++ _inCAAAACj8m() ==> TransformState$_$has_uniform_scale(TransformState const *param0)(TransformState const *)
extern bool TransformState$40$has_uniform_scale(TransformState const *self);

#if INDEX
#define TransformState_C_has_uniform_scale_B_p TransformState$40$has_uniform_scale
#endif

// C++ _inCAAAAQZ2I() ==> TransformState$_$has_shear(TransformState const *param0)(TransformState const *)
extern bool TransformState$41$has_shear(TransformState const *self);

#if INDEX
#define TransformState_C_has_shear_B_p TransformState$41$has_shear
#endif

// C++ _inCAAAAUk2V() ==> TransformState$_$has_nonzero_shear(TransformState const *param0)(TransformState const *)
extern bool TransformState$42$has_nonzero_shear(TransformState const *self);

#if INDEX
#define TransformState_C_has_nonzero_shear_B_p TransformState$42$has_nonzero_shear
#endif

// C++ _inCAAAASx0T() ==> TransformState$_$has_mat(TransformState const *param0)(TransformState const *)
extern bool TransformState$43$has_mat(TransformState const *self);

#if INDEX
#define TransformState_C_has_mat_B_p TransformState$43$has_mat
#endif

// C++ _inCAAAA1Y_X() ==> TransformState$_$get_pos(TransformState const *param0)(TransformState const *)
extern LPoint3 const * TransformState$44$get_pos(TransformState const *self);

#if INDEX
#define TransformState_C_get_pos_p_p TransformState$44$get_pos
#endif

// C++ _inCAAAAyy3mom8N() ==> TransformState$_$get_hpr(TransformState const *param0)(TransformState const *)
extern LVecBase3 const * TransformState$45$get_hpr(TransformState const *self);

#if INDEX
#define TransformState_C_get_hpr_p_p TransformState$45$get_hpr
#endif

// C++ _inCAAAAzDmu() ==> TransformState$_$get_quat(TransformState const *param0)(TransformState const *)
extern LQuaternion const * TransformState$46$get_quat(TransformState const *self);

#if INDEX
#define TransformState_C_get_quat_p_p TransformState$46$get_quat
#endif

// C++ _inCAAAATdVR() ==> TransformState$_$get_norm_quat(TransformState const *param0)(TransformState const *)
extern LQuaternion const * TransformState$47$get_norm_quat(TransformState const *self);

#if INDEX
#define TransformState_C_get_norm_quat_p_p TransformState$47$get_norm_quat
#endif

// C++ _inCAAAAmyBD() ==> TransformState$_$get_scale(TransformState const *param0)(TransformState const *)
extern LVecBase3 const * TransformState$48$get_scale(TransformState const *self);

#if INDEX
#define TransformState_C_get_scale_p_p TransformState$48$get_scale
#endif

// C++ _inCAAAA6_8Z() ==> TransformState$_$get_uniform_scale(TransformState const *param0)(TransformState const *)
extern PN_stdfloat TransformState$49$get_uniform_scale(TransformState const *self);

#if INDEX
#define TransformState_C_get_uniform_scale_f_p TransformState$49$get_uniform_scale
#endif

// C++ _inCAAAAn_27() ==> TransformState$_$get_shear(TransformState const *param0)(TransformState const *)
extern LVecBase3 const * TransformState$50$get_shear(TransformState const *self);

#if INDEX
#define TransformState_C_get_shear_p_p TransformState$50$get_shear
#endif

// C++ _inCAAAAKS0G() ==> TransformState$_$get_mat(TransformState const *param0)(TransformState const *)
extern LMatrix4 const * TransformState$51$get_mat(TransformState const *self);

#if INDEX
#define TransformState_C_get_mat_p_p TransformState$51$get_mat
#endif

// C++ _inCAAAAGSGD() ==> TransformState$_$get_pos2d(TransformState const *param0)(TransformState const *)
extern LVecBase2 * TransformState$52$get_pos2d(TransformState const *self);

#if INDEX
#define TransformState_C_get_pos2d_p_p TransformState$52$get_pos2d
#endif

// C++ _inCAAAAguij() ==> TransformState$_$get_rotate2d(TransformState const *param0)(TransformState const *)
extern PN_stdfloat TransformState$53$get_rotate2d(TransformState const *self);

#if INDEX
#define TransformState_C_get_rotate2d_f_p TransformState$53$get_rotate2d
#endif

// C++ _inCAAAAJEJy() ==> TransformState$_$get_scale2d(TransformState const *param0)(TransformState const *)
extern LVecBase2 * TransformState$54$get_scale2d(TransformState const *self);

#if INDEX
#define TransformState_C_get_scale2d_p_p TransformState$54$get_scale2d
#endif

// C++ _inCAAAAay8q() ==> TransformState$_$get_shear2d(TransformState const *param0)(TransformState const *)
extern PN_stdfloat TransformState$55$get_shear2d(TransformState const *self);

#if INDEX
#define TransformState_C_get_shear2d_f_p TransformState$55$get_shear2d
#endif

// C++ _inCAAAAjHYM() ==> TransformState$_$get_mat3(TransformState const *param0)(TransformState const *)
extern LMatrix3 * TransformState$56$get_mat3(TransformState const *self);

#if INDEX
#define TransformState_C_get_mat3_p_p TransformState$56$get_mat3
#endif

// C++ _inCAAAAXiIO(LVecBase3 const &pos) ==> TransformState$_$set_pos(TransformState const *param0, LVecBase3 const *param1)(TransformState const *, LVecBase3 const *)
extern char ** TransformState$57$set_pos(TransformState const *self, LVecBase3 const *pos);

#if INDEX
#define TransformState_C_set_pos_p_pp TransformState$57$set_pos
#endif

// C++ _inCAAAAoUAd(LVecBase3 const &hpr) ==> TransformState$_$set_hpr(TransformState const *param0, LVecBase3 const *param1)(TransformState const *, LVecBase3 const *)
extern char ** TransformState$58$set_hpr(TransformState const *self, LVecBase3 const *hpr);

#if INDEX
#define TransformState_C_set_hpr_p_pp TransformState$58$set_hpr
#endif

// C++ _inCAAAAtT8X(LQuaternion const &quat) ==> TransformState$_$set_quat(TransformState const *param0, LQuaternion const *param1)(TransformState const *, LQuaternion const *)
extern char ** TransformState$59$set_quat(TransformState const *self, LQuaternion const *quat);

#if INDEX
#define TransformState_C_set_quat_p_pp TransformState$59$set_quat
#endif

// C++ _inCAAAAQvtT(LVecBase3 const &scale) ==> TransformState$_$set_scale(TransformState const *param0, LVecBase3 const *param1)(TransformState const *, LVecBase3 const *)
extern char ** TransformState$60$set_scale(TransformState const *self, LVecBase3 const *scale);

#if INDEX
#define TransformState_C_set_scale_p_pp TransformState$60$set_scale
#endif

// C++ _inCAAAAdbhM(LVecBase3 const &shear) ==> TransformState$_$set_shear(TransformState const *param0, LVecBase3 const *param1)(TransformState const *, LVecBase3 const *)
extern char ** TransformState$61$set_shear(TransformState const *self, LVecBase3 const *shear);

#if INDEX
#define TransformState_C_set_shear_p_pp TransformState$61$set_shear
#endif

// C++ _inCAAAAUnsT(LVecBase2 const &pos) ==> TransformState$_$set_pos2d(TransformState const *param0, LVecBase2 const *param1)(TransformState const *, LVecBase2 const *)
extern char ** TransformState$62$set_pos2d(TransformState const *self, LVecBase2 const *pos);

#if INDEX
#define TransformState_C_set_pos2d_p_pp TransformState$62$set_pos2d
#endif

// C++ _inCAAAAhzEm(PN_stdfloat rotate) ==> TransformState$_$set_rotate2d(TransformState const *param0, PN_stdfloat param1)(TransformState const *, PN_stdfloat)
extern char ** TransformState$63$set_rotate2d(TransformState const *self, PN_stdfloat rotate);

#if INDEX
#define TransformState_C_set_rotate2d_p_pf TransformState$63$set_rotate2d
#endif

// C++ _inCAAAA4cTu(LVecBase2 const &scale) ==> TransformState$_$set_scale2d(TransformState const *param0, LVecBase2 const *param1)(TransformState const *, LVecBase2 const *)
extern char ** TransformState$64$set_scale2d(TransformState const *self, LVecBase2 const *scale);

#if INDEX
#define TransformState_C_set_scale2d_p_pp TransformState$64$set_scale2d
#endif

// C++ _inCAAAAY0wj(PN_stdfloat shear) ==> TransformState$_$set_shear2d(TransformState const *param0, PN_stdfloat param1)(TransformState const *, PN_stdfloat)
extern char ** TransformState$65$set_shear2d(TransformState const *self, PN_stdfloat shear);

#if INDEX
#define TransformState_C_set_shear2d_p_pf TransformState$65$set_shear2d
#endif

// C++ _inCAAAANCSV(TransformState const *other) ==> TransformState$_$compose(TransformState const *param0, TransformState const *param1)(TransformState const *, TransformState const *)
extern char ** TransformState$66$compose(TransformState const *self, TransformState const *other);

#if INDEX
#define TransformState_C_compose_p_pp TransformState$66$compose
#endif

// C++ _inCAAAA4b4F(TransformState const *other) ==> TransformState$_$invert_compose(TransformState const *param0, TransformState const *param1)(TransformState const *, TransformState const *)
extern char ** TransformState$67$invert_compose(TransformState const *self, TransformState const *other);

#if INDEX
#define TransformState_C_invert_compose_p_pp TransformState$67$invert_compose
#endif

// C++ _inCAAAAQVGV() ==> TransformState$_$get_inverse(TransformState const *param0)(TransformState const *)
extern char ** TransformState$68$get_inverse(TransformState const *self);

#if INDEX
#define TransformState_C_get_inverse_p_p TransformState$68$get_inverse
#endif

// C++ _inCAAAAnkWq() ==> TransformState$_$get_unique(TransformState const *param0)(TransformState const *)
extern char ** TransformState$69$get_unique(TransformState const *self);

#if INDEX
#define TransformState_C_get_unique_p_p TransformState$69$get_unique
#endif

// C++ _inCAAAA_HK4(int geom_rendering) ==> TransformState$_$get_geom_rendering(TransformState const *param0, int param1)(TransformState const *, int)
extern int TransformState$70$get_geom_rendering(TransformState const *self, int geom_rendering);

#if INDEX
#define TransformState_C_get_geom_rendering_i_pi TransformState$70$get_geom_rendering
#endif

// C++ _inCAAAAWr2Z() ==> TransformState$_$cache_ref(TransformState const *param0)(TransformState const *)
extern void TransformState$71$cache_ref(TransformState const *self);

#if INDEX
#define TransformState_C_cache_ref_v_p TransformState$71$cache_ref
#endif

// C++ _inCAAAA6hq2() ==> TransformState$_$cache_unref(TransformState const *param0)(TransformState const *)
extern bool TransformState$72$cache_unref(TransformState const *self);

#if INDEX
#define TransformState_C_cache_unref_B_p TransformState$72$cache_unref
#endif

// C++ _inCAAAAvh_1() ==> TransformState$_$node_ref(TransformState const *param0)(TransformState const *)
extern void TransformState$73$node_ref(TransformState const *self);

#if INDEX
#define TransformState_C_node_ref_v_p TransformState$73$node_ref
#endif

// C++ _inCAAAApm4c() ==> TransformState$_$node_unref(TransformState const *param0)(TransformState const *)
extern bool TransformState$74$node_unref(TransformState const *self);

#if INDEX
#define TransformState_C_node_unref_B_p TransformState$74$node_unref
#endif

// C++ _inCAAAAMO_Z() ==> TransformState$_$get_composition_cache_num_entries(TransformState const *param0)(TransformState const *)
extern std$_size_t TransformState$75$get_composition_cache_num_entries(TransformState const *self);

#if INDEX
#define TransformState_C_get_composition_cache_num_entries_l_p TransformState$75$get_composition_cache_num_entries
#endif

// C++ _inCAAAAeOXi() ==> TransformState$_$get_invert_composition_cache_num_entries(TransformState const *param0)(TransformState const *)
extern std$_size_t TransformState$76$get_invert_composition_cache_num_entries(TransformState const *self);

#if INDEX
#define TransformState_C_get_invert_composition_cache_num_entries_l_p TransformState$76$get_invert_composition_cache_num_entries
#endif

// C++ _inCAAAAZ_rG() ==> TransformState$_$get_composition_cache_size(TransformState const *param0)(TransformState const *)
extern std$_size_t TransformState$77$get_composition_cache_size(TransformState const *self);

#if INDEX
#define TransformState_C_get_composition_cache_size_l_p TransformState$77$get_composition_cache_size
#endif

// C++ _inCAAAAE6M5(std::size_t n) ==> TransformState$_$get_composition_cache_source(TransformState const *param0, std::size_t param1)(TransformState const *, std::size_t)
extern TransformState const * TransformState$78$get_composition_cache_source(TransformState const *self, std$_size_t n);

#if INDEX
#define TransformState_C_get_composition_cache_source_p_pl TransformState$78$get_composition_cache_source
#endif

// C++ _inCAAAA_Ztx(std::size_t n) ==> TransformState$_$get_composition_cache_result(TransformState const *param0, std::size_t param1)(TransformState const *, std::size_t)
extern TransformState const * TransformState$79$get_composition_cache_result(TransformState const *self, std$_size_t n);

#if INDEX
#define TransformState_C_get_composition_cache_result_p_pl TransformState$79$get_composition_cache_result
#endif

// C++ _inCAAAA9hkw() ==> TransformState$_$get_invert_composition_cache_size(TransformState const *param0)(TransformState const *)
extern std$_size_t TransformState$80$get_invert_composition_cache_size(TransformState const *self);

#if INDEX
#define TransformState_C_get_invert_composition_cache_size_l_p TransformState$80$get_invert_composition_cache_size
#endif

// C++ _inCAAAA3eg2(std::size_t n) ==> TransformState$_$get_invert_composition_cache_source(TransformState const *param0, std::size_t param1)(TransformState const *, std::size_t)
extern TransformState const * TransformState$81$get_invert_composition_cache_source(TransformState const *self, std$_size_t n);

#if INDEX
#define TransformState_C_get_invert_composition_cache_source_p_pl TransformState$81$get_invert_composition_cache_source
#endif

// C++ _inCAAAAm40G(std::size_t n) ==> TransformState$_$get_invert_composition_cache_result(TransformState const *param0, std::size_t param1)(TransformState const *, std::size_t)
extern TransformState const * TransformState$82$get_invert_composition_cache_result(TransformState const *self, std$_size_t n);

#if INDEX
#define TransformState_C_get_invert_composition_cache_result_p_pl TransformState$82$get_invert_composition_cache_result
#endif

// C++ _inCAAAAUvQD() ==> TransformState$_$validate_composition_cache(TransformState const *param0)(TransformState const *)
extern bool TransformState$83$validate_composition_cache(TransformState const *self);

#if INDEX
#define TransformState_C_validate_composition_cache_B_p TransformState$83$validate_composition_cache
#endif

// C++ _inCAAAAON0M(std::ostream &out) ==> TransformState$_$output(TransformState const *param0, std::ostream *param1)(TransformState const *, std::ostream *)
extern void TransformState$84$output(TransformState const *self, std$_ostream *out);

#if INDEX
#define TransformState_C_output_v_pp TransformState$84$output
#endif

// C++ _inCAAAAqE1b(std::ostream &out, int indent_level) ==> TransformState$_$write(TransformState const *param0, std::ostream *param1, int param2)(TransformState const *, std::ostream *, int)
extern void TransformState$85$write(TransformState const *self, std$_ostream *out, int indent_level);

#if INDEX
#define TransformState_C_write_v_ppi TransformState$85$write
#endif

// C++ _inCAAAAyMJC(std::ostream &out, int indent_level) ==> TransformState$_$write_composition_cache(TransformState const *param0, std::ostream *param1, int param2)(TransformState const *, std::ostream *, int)
extern void TransformState$86$write_composition_cache(TransformState const *self, std$_ostream *out, int indent_level);

#if INDEX
#define TransformState_C_write_composition_cache_v_ppi TransformState$86$write_composition_cache
#endif

// C++ _inCAAAAft1r() ==> TransformState$_$get_num_states()()
extern int TransformState$87$get_num_states(void);

#if INDEX
#define TransformState_C_get_num_states_i_v TransformState$87$get_num_states
#endif

// C++ _inCAAAAfD2f() ==> TransformState$_$get_num_unused_states()()
extern int TransformState$88$get_num_unused_states(void);

#if INDEX
#define TransformState_C_get_num_unused_states_i_v TransformState$88$get_num_unused_states
#endif

// C++ _inCAAAA8dXE() ==> TransformState$_$clear_cache()()
extern int TransformState$89$clear_cache(void);

#if INDEX
#define TransformState_C_clear_cache_i_v TransformState$89$clear_cache
#endif

// C++ _inCAAAAttHm() ==> TransformState$_$garbage_collect()()
extern int TransformState$90$garbage_collect(void);

#if INDEX
#define TransformState_C_garbage_collect_i_v TransformState$90$garbage_collect
#endif

// C++ _inCAAAAclcc(std::ostream &out) ==> TransformState$_$list_cycles(std::ostream *param0)(std::ostream *)
extern void TransformState$91$list_cycles(std$_ostream *out);

#if INDEX
#define TransformState_C_list_cycles_v_p TransformState$91$list_cycles
#endif

// C++ _inCAAAAyxoC(std::ostream &out) ==> TransformState$_$list_states(std::ostream *param0)(std::ostream *)
extern void TransformState$92$list_states(std$_ostream *out);

#if INDEX
#define TransformState_C_list_states_v_p TransformState$92$list_states
#endif

// C++ _inCAAAAidJ2() ==> TransformState$_$validate_states()()
extern bool TransformState$93$validate_states(void);

#if INDEX
#define TransformState_C_validate_states_B_v TransformState$93$validate_states
#endif

// C++ _inCAAAAdVFj() ==> TransformState$_$init_states()()
extern void TransformState$94$init_states(void);

#if INDEX
#define TransformState_C_init_states_v_v TransformState$94$init_states
#endif

// C++ _inCAAAA4QS7() ==> TransformState$_$flush_level()()
extern void TransformState$95$flush_level(void);

#if INDEX
#define TransformState_C_flush_level_v_v TransformState$95$flush_level
#endif

// C++ _inCAAAA_XRq() ==> TransformState$_$cache_ref_only(TransformState const *param0)(TransformState const *)
extern void TransformState$96$cache_ref_only(TransformState const *self);

#if INDEX
#define TransformState_C_cache_ref_only_v_p TransformState$96$cache_ref_only
#endif

// C++ _inCAAAAQHkh() ==> TransformState$_$register_with_read_factory()()
extern void TransformState$97$register_with_read_factory(void);

#if INDEX
#define TransformState_C_register_with_read_factory_v_v TransformState$97$register_with_read_factory
#endif

// C++ _inCAAAAmhqV(BamWriter *manager, Datagram &dg) ==> TransformState$_$write_datagram(TransformState *param0, BamWriter *param1, Datagram *param2)(TransformState *, BamWriter *, Datagram *)
extern void TransformState$98$write_datagram(TransformState *self, BamWriter *manager, Datagram *dg);

#if INDEX
#define TransformState_C_write_datagram_v_ppp TransformState$98$write_datagram
#endif

// C++ _inCAAAApgdI(TypedWritableReferenceCount *old_ptr, BamReader *manager) ==> TransformState$_$change_this(TypedWritableReferenceCount *param0, BamReader *param1)(TypedWritableReferenceCount *, BamReader *)
extern char ** TransformState$99$change_this(TypedWritableReferenceCount *old_ptr, BamReader *manager);

#if INDEX
#define TransformState_C_change_this_p_pp TransformState$99$change_this
#endif

// C++ _inCAAAAOzaR() ==> TransformState$_$get_class_type()()
extern int TransformState$100$get_class_type(void);

#if INDEX
#define TransformState_C_get_class_type_i_v TransformState$100$get_class_type
#endif

// C++ _inCAAAALpcv() ==> TransformState$_$init_type()()
extern void TransformState$101$init_type(void);

#if INDEX
#define TransformState_C_init_type_v_v TransformState$101$init_type
#endif

// C++ _inCAAAAudJT() ==> TransformState$_$get_type(TransformState const *param0)(TransformState const *)
extern int TransformState$102$get_type(TransformState const *self);

#if INDEX
#define TransformState_C_get_type_i_p TransformState$102$get_type
#endif

// C++ _inCAAAAb3sd() ==> TransformState$_$force_init_type(TransformState *param0)(TransformState *)
extern int TransformState$103$force_init_type(TransformState *self);

#if INDEX
#define TransformState_C_force_init_type_i_p TransformState$103$force_init_type
#endif


// TransformTable

// C++ _inCAAAA9dPL() ==> TransformTable$_$TransformTable()()
extern TransformTable * TransformTable$1$TransformTable(void);

#if INDEX
#define TransformTable_C_ctor_p_v TransformTable$1$TransformTable
#endif

// C++ _inCAAAATts5(TransformTable const &copy) ==> TransformTable$_$TransformTable(TransformTable const *param0)(TransformTable const *)
extern TransformTable * TransformTable$2$TransformTable(TransformTable const *copy);

#if INDEX
#define TransformTable_C_ctor_p_p TransformTable$2$TransformTable
#endif

// C++ _inCAAAAmQpE() ==> TransformTable$_$is_registered(TransformTable const *param0)(TransformTable const *)
extern bool TransformTable$3$is_registered(TransformTable const *self);

#if INDEX
#define TransformTable_C_is_registered_B_p TransformTable$3$is_registered
#endif

// C++ _inCAAAA8IXz(TransformTable const *table) ==> TransformTable$_$register_table(TransformTable const *param0)(TransformTable const *)
extern char ** TransformTable$4$register_table(TransformTable const *table);

#if INDEX
#define TransformTable_C_register_table_p_p TransformTable$4$register_table
#endif

// C++ _inCAAAA5H42() ==> TransformTable$_$get_num_transforms(TransformTable const *param0)(TransformTable const *)
extern std$_size_t TransformTable$5$get_num_transforms(TransformTable const *self);

#if INDEX
#define TransformTable_C_get_num_transforms_l_p TransformTable$5$get_num_transforms
#endif

// C++ _inCAAAAR3RI(std::size_t n) ==> TransformTable$_$get_transform(TransformTable const *param0, std::size_t param1)(TransformTable const *, std::size_t)
extern VertexTransform const * TransformTable$6$get_transform(TransformTable const *self, std$_size_t n);

#if INDEX
#define TransformTable_C_get_transform_p_pl TransformTable$6$get_transform
#endif

// C++ _inCAAAAaOQ4(Thread *current_thread) ==> TransformTable$_$get_modified(TransformTable const *param0, Thread *param1)(TransformTable const *, Thread *)
extern UpdateSeq * TransformTable$7$get_modified(TransformTable const *self, Thread *current_thread);

#if INDEX
#define TransformTable_C_get_modified_p_pp TransformTable$7$get_modified
#endif

// C++ _inCAAAA3pN5() ==> TransformTable$_$get_modified(TransformTable const *param0)(TransformTable const *)
extern UpdateSeq * TransformTable$8$get_modified(TransformTable const *self);

#if INDEX
#define TransformTable_C_get_modified_p_p TransformTable$8$get_modified
#endif

// C++ _inCAAAApkDY(std::size_t n, VertexTransform const *transform) ==> TransformTable$_$set_transform(TransformTable *param0, std::size_t param1, VertexTransform const *param2)(TransformTable *, std::size_t, VertexTransform const *)
extern void TransformTable$9$set_transform(TransformTable *self, std$_size_t n, VertexTransform const *transform);

#if INDEX
#define TransformTable_C_set_transform_v_plp TransformTable$9$set_transform
#endif

// C++ _inCAAAAST_B(std::size_t n, VertexTransform const *transform) ==> TransformTable$_$insert_transform(TransformTable *param0, std::size_t param1, VertexTransform const *param2)(TransformTable *, std::size_t, VertexTransform const *)
extern void TransformTable$10$insert_transform(TransformTable *self, std$_size_t n, VertexTransform const *transform);

#if INDEX
#define TransformTable_C_insert_transform_v_plp TransformTable$10$insert_transform
#endif

// C++ _inCAAAAyVkr(std::size_t n) ==> TransformTable$_$remove_transform(TransformTable *param0, std::size_t param1)(TransformTable *, std::size_t)
extern void TransformTable$11$remove_transform(TransformTable *self, std$_size_t n);

#if INDEX
#define TransformTable_C_remove_transform_v_pl TransformTable$11$remove_transform
#endif

// C++ _inCAAAAu_JV(VertexTransform const *transform) ==> TransformTable$_$add_transform(TransformTable *param0, VertexTransform const *param1)(TransformTable *, VertexTransform const *)
extern std$_size_t TransformTable$12$add_transform(TransformTable *self, VertexTransform const *transform);

#if INDEX
#define TransformTable_C_add_transform_l_pp TransformTable$12$add_transform
#endif

// C++ _inCAAAAMneJ(std::ostream &out) ==> TransformTable$_$write(TransformTable const *param0, std::ostream *param1)(TransformTable const *, std::ostream *)
extern void TransformTable$13$write(TransformTable const *self, std$_ostream *out);

#if INDEX
#define TransformTable_C_write_v_pp TransformTable$13$write
#endif

// C++ _inCAAAAkusp() ==> TransformTable$_$register_with_read_factory()()
extern void TransformTable$14$register_with_read_factory(void);

#if INDEX
#define TransformTable_C_register_with_read_factory_v_v TransformTable$14$register_with_read_factory
#endif

// C++ _inCAAAASDzd(BamWriter *manager, Datagram &dg) ==> TransformTable$_$write_datagram(TransformTable *param0, BamWriter *param1, Datagram *param2)(TransformTable *, BamWriter *, Datagram *)
extern void TransformTable$15$write_datagram(TransformTable *self, BamWriter *manager, Datagram *dg);

#if INDEX
#define TransformTable_C_write_datagram_v_ppp TransformTable$15$write_datagram
#endif

// C++ _inCAAAAdFiZ() ==> TransformTable$_$get_class_type()()
extern int TransformTable$16$get_class_type(void);

#if INDEX
#define TransformTable_C_get_class_type_i_v TransformTable$16$get_class_type
#endif

// C++ _inCAAAA2Ek3() ==> TransformTable$_$init_type()()
extern void TransformTable$17$init_type(void);

#if INDEX
#define TransformTable_C_init_type_v_v TransformTable$17$init_type
#endif

// C++ _inCAAAAhAQb() ==> TransformTable$_$get_type(TransformTable const *param0)(TransformTable const *)
extern int TransformTable$18$get_type(TransformTable const *self);

#if INDEX
#define TransformTable_C_get_type_i_p TransformTable$18$get_type
#endif

// C++ _inCAAAAGv0l() ==> TransformTable$_$force_init_type(TransformTable *param0)(TransformTable *)
extern int TransformTable$19$force_init_type(TransformTable *self);

#if INDEX
#define TransformTable_C_force_init_type_i_p TransformTable$19$force_init_type
#endif


// TypedObject

// C++ _inCAAAAr4rO() ==> TypedObject$_$upcast_to_MemoryBase(TypedObject *param0)(TypedObject *)
extern MemoryBase * TypedObject$1$upcast_to_MemoryBase(TypedObject *self);

#if INDEX
#define TypedObject_C_upcast_to_MemoryBase_p_p TypedObject$1$upcast_to_MemoryBase
#endif

// C++ _inCAAAA1uxI() ==> TypedObject$_$get_type(TypedObject const *param0)(TypedObject const *)
extern int TypedObject$2$get_type(TypedObject const *self);

#if INDEX
#define TypedObject_C_get_type_i_p TypedObject$2$get_type
#endif

// C++ _inCAAAAm7AU() ==> TypedObject$_$get_type_index(TypedObject const *param0)(TypedObject const *)
extern int TypedObject$3$get_type_index(TypedObject const *self);

#if INDEX
#define TypedObject_C_get_type_index_i_p TypedObject$3$get_type_index
#endif

// C++ _inCAAAAnFKt(TypeHandle handle) ==> TypedObject$_$is_of_type(TypedObject const *param0, int param1)(TypedObject const *, int)
extern bool TypedObject$4$is_of_type(TypedObject const *self, int handle);

#if INDEX
#define TypedObject_C_is_of_type_B_pi TypedObject$4$is_of_type
#endif

// C++ _inCAAAA7Xzz(TypeHandle handle) ==> TypedObject$_$is_exact_type(TypedObject const *param0, int param1)(TypedObject const *, int)
extern bool TypedObject$5$is_exact_type(TypedObject const *self, int handle);

#if INDEX
#define TypedObject_C_is_exact_type_B_pi TypedObject$5$is_exact_type
#endif

// C++ _inCAAAA6oYG(set< int > const &) ==> TypedObject$_$get_best_parent_from_Set(TypedObject const *param0, set< int > const *param1)(TypedObject const *, set< int > const *)
extern int TypedObject$6$get_best_parent_from_Set(TypedObject const *self, char *arg1);

#if INDEX
#define TypedObject_C_get_best_parent_from_Set_i_pp TypedObject$6$get_best_parent_from_Set
#endif

// C++ _inCAAAA_bFm() ==> TypedObject$_$force_init_type(TypedObject *param0)(TypedObject *)
extern int TypedObject$7$force_init_type(TypedObject *self);

#if INDEX
#define TypedObject_C_force_init_type_i_p TypedObject$7$force_init_type
#endif

// C++ _inCAAAARuCO() ==> TypedObject$_$as_typed_object(TypedObject *param0)(TypedObject *)
extern TypedObject * TypedObject$8$as_typed_object(TypedObject *self);

#if INDEX
#define TypedObject_C_as_typed_object_p_p TypedObject$8$as_typed_object
#endif

// C++ _inCAAAAWG8l() ==> TypedObject$_$as_typed_object(TypedObject const *param0)(TypedObject const *)
extern TypedObject const * TypedObject$9$as_typed_object(TypedObject const *self);
// COLLISION : TypedObject_C_as_typed_object_p_p TypedObject$9$as_typed_object

// C++ _inCAAAAEGqZ() ==> TypedObject$_$get_class_type()()
extern int TypedObject$10$get_class_type(void);

#if INDEX
#define TypedObject_C_get_class_type_i_v TypedObject$10$get_class_type
#endif

// C++ _inCAAAAS8Pf() ==> TypedObject$_$init_type()()
extern void TypedObject$11$init_type(void);

#if INDEX
#define TypedObject_C_init_type_v_v TypedObject$11$init_type
#endif


// TypedReferenceCount

// C++ _inCAAAAi6BQ() ==> TypedReferenceCount$_$downcast_to_DisplayRegion(TypedReferenceCount *param0)(TypedReferenceCount *)
extern DisplayRegion * TypedReferenceCount$1$downcast_to_DisplayRegion(TypedReferenceCount *self);

#if INDEX
#define TypedReferenceCount_C_downcast_to_DisplayRegion_p_p TypedReferenceCount$1$downcast_to_DisplayRegion
#endif

// C++ _inCAAAA5b0G() ==> TypedReferenceCount$_$downcast_to_Loader(TypedReferenceCount *param0)(TypedReferenceCount *)
extern Loader * TypedReferenceCount$2$downcast_to_Loader(TypedReferenceCount *self);

#if INDEX
#define TypedReferenceCount_C_downcast_to_Loader_p_p TypedReferenceCount$2$downcast_to_Loader
#endif

// C++ _inCAAAAUGAk() ==> TypedReferenceCount$_$downcast_to_TextFont(TypedReferenceCount *param0)(TypedReferenceCount *)
extern TextFont * TypedReferenceCount$3$downcast_to_TextFont(TypedReferenceCount *self);

#if INDEX
#define TypedReferenceCount_C_downcast_to_TextFont_p_p TypedReferenceCount$3$downcast_to_TextFont
#endif

// C++ _inCAAAAiO2P() ==> TypedReferenceCount$_$downcast_to_Thread(TypedReferenceCount *param0)(TypedReferenceCount *)
extern Thread * TypedReferenceCount$4$downcast_to_Thread(TypedReferenceCount *self);

#if INDEX
#define TypedReferenceCount_C_downcast_to_Thread_p_p TypedReferenceCount$4$downcast_to_Thread
#endif


// TypedWritable

// C++ _inCAAAA1b__() ==> TypedWritable$_$TypedWritable()()
extern TypedWritable * TypedWritable$1$TypedWritable(void);

#if INDEX
#define TypedWritable_C_ctor_p_v TypedWritable$1$TypedWritable
#endif

// C++ _inCAAAAMQjn(TypedWritable const &copy) ==> TypedWritable$_$TypedWritable(TypedWritable const *param0)(TypedWritable const *)
extern TypedWritable * TypedWritable$2$TypedWritable(TypedWritable const *copy);

#if INDEX
#define TypedWritable_C_ctor_p_p TypedWritable$2$TypedWritable
#endif

// C++ _inCAAAAOPd_(BamWriter *manager, Datagram &dg) ==> TypedWritable$_$write_datagram(TypedWritable *param0, BamWriter *param1, Datagram *param2)(TypedWritable *, BamWriter *, Datagram *)
extern void TypedWritable$3$write_datagram(TypedWritable *self, BamWriter *manager, Datagram *dg);

#if INDEX
#define TypedWritable_C_write_datagram_v_ppp TypedWritable$3$write_datagram
#endif

// C++ _inCAAAA2GsH(BamWriter *manager) ==> TypedWritable$_$update_bam_nested(TypedWritable *param0, BamWriter *param1)(TypedWritable *, BamWriter *)
extern void TypedWritable$4$update_bam_nested(TypedWritable *self, BamWriter *manager);

#if INDEX
#define TypedWritable_C_update_bam_nested_v_pp TypedWritable$4$update_bam_nested
#endif

// C++ _inCAAAAKIGl() ==> TypedWritable$_$require_fully_complete(TypedWritable const *param0)(TypedWritable const *)
extern bool TypedWritable$5$require_fully_complete(TypedWritable const *self);

#if INDEX
#define TypedWritable_C_require_fully_complete_B_p TypedWritable$5$require_fully_complete
#endif

// C++ _inCAAAARMeY(DatagramIterator &scan, BamReader *manager) ==> TypedWritable$_$fillin(TypedWritable *param0, DatagramIterator *param1, BamReader *param2)(TypedWritable *, DatagramIterator *, BamReader *)
extern void TypedWritable$6$fillin(TypedWritable *self, DatagramIterator *scan, BamReader *manager);

#if INDEX
#define TypedWritable_C_fillin_v_ppp TypedWritable$6$fillin
#endif

// C++ _inCAAAAj9ba(BamReader *manager) ==> TypedWritable$_$finalize(TypedWritable *param0, BamReader *param1)(TypedWritable *, BamReader *)
extern void TypedWritable$7$finalize(TypedWritable *self, BamReader *manager);

#if INDEX
#define TypedWritable_C_finalize_v_pp TypedWritable$7$finalize
#endif

// C++ _inCAAAAnUPd() ==> TypedWritable$_$as_reference_count(TypedWritable *param0)(TypedWritable *)
extern ReferenceCount * TypedWritable$8$as_reference_count(TypedWritable *self);

#if INDEX
#define TypedWritable_C_as_reference_count_p_p TypedWritable$8$as_reference_count
#endif

// C++ _inCAAAAh86d() ==> TypedWritable$_$mark_bam_modified(TypedWritable *param0)(TypedWritable *)
extern void TypedWritable$9$mark_bam_modified(TypedWritable *self);

#if INDEX
#define TypedWritable_C_mark_bam_modified_v_p TypedWritable$9$mark_bam_modified
#endif

// C++ _inCAAAAA1uu() ==> TypedWritable$_$get_bam_modified(TypedWritable const *param0)(TypedWritable const *)
extern UpdateSeq * TypedWritable$10$get_bam_modified(TypedWritable const *self);

#if INDEX
#define TypedWritable_C_get_bam_modified_p_p TypedWritable$10$get_bam_modified
#endif

// C++ _inCAAAASud2() ==> TypedWritable$_$encode_to_bam_stream(TypedWritable const *param0)(TypedWritable const *)
extern vector_uchar TypedWritable$11$encode_to_bam_stream(TypedWritable const *self);

#if INDEX
#define TypedWritable_C_encode_to_bam_stream_p_p TypedWritable$11$encode_to_bam_stream
#endif

// C++ _inCAAAABLPl(vector_uchar &data, BamWriter *writer) ==> TypedWritable$_$encode_to_bam_stream(TypedWritable const *param0, vector_uchar *param1, BamWriter *param2)(TypedWritable const *, vector_uchar *, BamWriter *)
extern bool TypedWritable$12$encode_to_bam_stream(TypedWritable const *self, vector_uchar *data, BamWriter *writer);

#if INDEX
#define TypedWritable_C_encode_to_bam_stream_B_ppp TypedWritable$12$encode_to_bam_stream
#endif

// C++ _inCAAAACPVb(vector_uchar &data) ==> TypedWritable$_$encode_to_bam_stream(TypedWritable const *param0, vector_uchar *param1)(TypedWritable const *, vector_uchar *)
extern bool TypedWritable$13$encode_to_bam_stream(TypedWritable const *self, vector_uchar *data);

#if INDEX
#define TypedWritable_C_encode_to_bam_stream_B_pp TypedWritable$13$encode_to_bam_stream
#endif

// C++ _inCAAAATBaO() ==> TypedWritable$_$get_class_type()()
extern int TypedWritable$14$get_class_type(void);

#if INDEX
#define TypedWritable_C_get_class_type_i_v TypedWritable$14$get_class_type
#endif

// C++ _inCAAAA79XL() ==> TypedWritable$_$init_type()()
extern void TypedWritable$15$init_type(void);

#if INDEX
#define TypedWritable_C_init_type_v_v TypedWritable$15$init_type
#endif

// C++ _inCAAAAlbzG() ==> TypedWritable$_$force_init_type(TypedWritable *param0)(TypedWritable *)
extern int TypedWritable$16$force_init_type(TypedWritable *self);

#if INDEX
#define TypedWritable_C_force_init_type_i_p TypedWritable$16$force_init_type
#endif


// TypedWritableReferenceCount

// C++ _inCAAAAV0o9() ==> TypedWritableReferenceCount$_$downcast_to_PandaNode(TypedWritableReferenceCount *param0)(TypedWritableReferenceCount *)
extern PandaNode * TypedWritableReferenceCount$1$downcast_to_PandaNode(TypedWritableReferenceCount *self);

#if INDEX
#define TypedWritableReferenceCount_C_downcast_to_PandaNode_p_p TypedWritableReferenceCount$1$downcast_to_PandaNode
#endif

// C++ _inCAAAAt0mx() ==> TypedWritableReferenceCount$_$downcast_to_GeomVertexArrayFormat(TypedWritableReferenceCount *param0)(TypedWritableReferenceCount *)
extern GeomVertexArrayFormat * TypedWritableReferenceCount$2$downcast_to_GeomVertexArrayFormat(TypedWritableReferenceCount *self);

#if INDEX
#define TypedWritableReferenceCount_C_downcast_to_GeomVertexArrayFormat_p_p TypedWritableReferenceCount$2$downcast_to_GeomVertexArrayFormat
#endif

// C++ _inCAAAA8_96() ==> TypedWritableReferenceCount$_$downcast_to_GeomVertexFormat(TypedWritableReferenceCount *param0)(TypedWritableReferenceCount *)
extern GeomVertexFormat * TypedWritableReferenceCount$3$downcast_to_GeomVertexFormat(TypedWritableReferenceCount *self);

#if INDEX
#define TypedWritableReferenceCount_C_downcast_to_GeomVertexFormat_p_p TypedWritableReferenceCount$3$downcast_to_GeomVertexFormat
#endif

// C++ _inCAAAAc1xv() ==> TypedWritableReferenceCount$_$downcast_to_Texture(TypedWritableReferenceCount *param0)(TypedWritableReferenceCount *)
extern Texture * TypedWritableReferenceCount$4$downcast_to_Texture(TypedWritableReferenceCount *self);

#if INDEX
#define TypedWritableReferenceCount_C_downcast_to_Texture_p_p TypedWritableReferenceCount$4$downcast_to_Texture
#endif


// UpdateSeq

// C++ _inCAAAAeAZ3() ==> UpdateSeq$_$UpdateSeq()()
extern UpdateSeq * UpdateSeq$1$UpdateSeq(void);

#if INDEX
#define UpdateSeq_C_ctor_p_v UpdateSeq$1$UpdateSeq
#endif

// C++ _inCAAAATpCm(UpdateSeq const &copy) ==> UpdateSeq$_$UpdateSeq(UpdateSeq const *param0)(UpdateSeq const *)
extern UpdateSeq * UpdateSeq$2$UpdateSeq(UpdateSeq const *copy);

#if INDEX
#define UpdateSeq_C_ctor_p_p UpdateSeq$2$UpdateSeq
#endif

// C++ _inCAAAAXroR() ==> UpdateSeq$_$initial()()
extern UpdateSeq * UpdateSeq$3$initial(void);

#if INDEX
#define UpdateSeq_C_initial_p_v UpdateSeq$3$initial
#endif

// C++ _inCAAAAnK4u() ==> UpdateSeq$_$old()()
extern UpdateSeq * UpdateSeq$4$old(void);

#if INDEX
#define UpdateSeq_C_old_p_v UpdateSeq$4$old
#endif

// C++ _inCAAAA9eRT() ==> UpdateSeq$_$fresh()()
extern UpdateSeq * UpdateSeq$5$fresh(void);

#if INDEX
#define UpdateSeq_C_fresh_p_v UpdateSeq$5$fresh
#endif

// C++ _inCAAAA0_vY() ==> UpdateSeq$_$clear(UpdateSeq *param0)(UpdateSeq *)
extern void UpdateSeq$6$clear(UpdateSeq *self);

#if INDEX
#define UpdateSeq_C_clear_v_p UpdateSeq$6$clear
#endif

// C++ _inCAAAAT1E2() ==> UpdateSeq$_$is_initial(UpdateSeq const *param0)(UpdateSeq const *)
extern bool UpdateSeq$7$is_initial(UpdateSeq const *self);

#if INDEX
#define UpdateSeq_C_is_initial_B_p UpdateSeq$7$is_initial
#endif

// C++ _inCAAAALeqi() ==> UpdateSeq$_$is_old(UpdateSeq const *param0)(UpdateSeq const *)
extern bool UpdateSeq$8$is_old(UpdateSeq const *self);

#if INDEX
#define UpdateSeq_C_is_old_B_p UpdateSeq$8$is_old
#endif

// C++ _inCAAAAWsUb() ==> UpdateSeq$_$is_fresh(UpdateSeq const *param0)(UpdateSeq const *)
extern bool UpdateSeq$9$is_fresh(UpdateSeq const *self);

#if INDEX
#define UpdateSeq_C_is_fresh_B_p UpdateSeq$9$is_fresh
#endif

// C++ _inCAAAA6gLj() ==> UpdateSeq$_$is_special(UpdateSeq const *param0)(UpdateSeq const *)
extern bool UpdateSeq$10$is_special(UpdateSeq const *self);

#if INDEX
#define UpdateSeq_C_is_special_B_p UpdateSeq$10$is_special
#endif

// C++ _inCAAAAZuR8() ==> UpdateSeq$_$get_seq(UpdateSeq const *param0)(UpdateSeq const *)
extern AtomicAdjust$_Integer UpdateSeq$11$get_seq(UpdateSeq const *self);

#if INDEX
#define UpdateSeq_C_get_seq_p_p UpdateSeq$11$get_seq
#endif

// C++ _inCAAAAJLff(std::ostream &out) ==> UpdateSeq$_$output(UpdateSeq const *param0, std::ostream *param1)(UpdateSeq const *, std::ostream *)
extern void UpdateSeq$12$output(UpdateSeq const *self, std$_ostream *out);

#if INDEX
#define UpdateSeq_C_output_v_pp UpdateSeq$12$output
#endif


// WindowFramework

// C++ _inCAAAAYGdR() ==> WindowFramework$_$get_panda_framework(WindowFramework const *param0)(WindowFramework const *)
extern PandaFramework * WindowFramework$1$get_panda_framework(WindowFramework const *self);

#if INDEX
#define WindowFramework_C_get_panda_framework_p_p WindowFramework$1$get_panda_framework
#endif

// C++ _inCAAAAllyB() ==> WindowFramework$_$get_graphics_window(WindowFramework const *param0)(WindowFramework const *)
extern GraphicsWindow * WindowFramework$2$get_graphics_window(WindowFramework const *self);

#if INDEX
#define WindowFramework_C_get_graphics_window_p_p WindowFramework$2$get_graphics_window
#endif

// C++ _inCAAAAaLWw() ==> WindowFramework$_$get_graphics_output(WindowFramework const *param0)(WindowFramework const *)
extern GraphicsOutput * WindowFramework$3$get_graphics_output(WindowFramework const *self);

#if INDEX
#define WindowFramework_C_get_graphics_output_p_p WindowFramework$3$get_graphics_output
#endif

// C++ _inCAAAAKUbp() ==> WindowFramework$_$get_camera_group(WindowFramework *param0)(WindowFramework *)
extern NodePath * WindowFramework$4$get_camera_group(WindowFramework *self);

#if INDEX
#define WindowFramework_C_get_camera_group_p_p WindowFramework$4$get_camera_group
#endif

// C++ _inCAAAAOQs1() ==> WindowFramework$_$get_num_cameras(WindowFramework const *param0)(WindowFramework const *)
extern int WindowFramework$5$get_num_cameras(WindowFramework const *self);

#if INDEX
#define WindowFramework_C_get_num_cameras_i_p WindowFramework$5$get_num_cameras
#endif

// C++ _inCAAAAJdpp(int n) ==> WindowFramework$_$get_camera(WindowFramework const *param0, int param1)(WindowFramework const *, int)
extern Camera * WindowFramework$6$get_camera(WindowFramework const *self, int n);

#if INDEX
#define WindowFramework_C_get_camera_p_pi WindowFramework$6$get_camera
#endif

// C++ _inCAAAALKl9() ==> WindowFramework$_$get_display_region_2d(WindowFramework const *param0)(WindowFramework const *)
extern DisplayRegion * WindowFramework$7$get_display_region_2d(WindowFramework const *self);

#if INDEX
#define WindowFramework_C_get_display_region_2d_p_p WindowFramework$7$get_display_region_2d
#endif

// C++ _inCAAAAVKsL() ==> WindowFramework$_$get_display_region_3d(WindowFramework const *param0)(WindowFramework const *)
extern DisplayRegion * WindowFramework$8$get_display_region_3d(WindowFramework const *self);

#if INDEX
#define WindowFramework_C_get_display_region_3d_p_p WindowFramework$8$get_display_region_3d
#endif

// C++ _inCAAAApiA7() ==> WindowFramework$_$get_render(WindowFramework *param0)(WindowFramework *)
extern NodePath * WindowFramework$9$get_render(WindowFramework *self);

#if INDEX
#define WindowFramework_C_get_render_p_p WindowFramework$9$get_render
#endif

// C++ _inCAAAASEBt() ==> WindowFramework$_$get_render_2d(WindowFramework *param0)(WindowFramework *)
extern NodePath * WindowFramework$10$get_render_2d(WindowFramework *self);

#if INDEX
#define WindowFramework_C_get_render_2d_p_p WindowFramework$10$get_render_2d
#endif

// C++ _inCAAAAeVBf() ==> WindowFramework$_$get_aspect_2d(WindowFramework *param0)(WindowFramework *)
extern NodePath * WindowFramework$11$get_aspect_2d(WindowFramework *self);

#if INDEX
#define WindowFramework_C_get_aspect_2d_p_p WindowFramework$11$get_aspect_2d
#endif

// C++ _inCAAAAmE42() ==> WindowFramework$_$get_pixel_2d(WindowFramework *param0)(WindowFramework *)
extern NodePath * WindowFramework$12$get_pixel_2d(WindowFramework *self);

#if INDEX
#define WindowFramework_C_get_pixel_2d_p_p WindowFramework$12$get_pixel_2d
#endif

// C++ _inCAAAA9Hqw() ==> WindowFramework$_$get_mouse(WindowFramework *param0)(WindowFramework *)
extern NodePath * WindowFramework$13$get_mouse(WindowFramework *self);

#if INDEX
#define WindowFramework_C_get_mouse_p_p WindowFramework$13$get_mouse
#endif

// C++ _inCAAAAIxxZ() ==> WindowFramework$_$get_button_thrower(WindowFramework *param0)(WindowFramework *)
extern NodePath * WindowFramework$14$get_button_thrower(WindowFramework *self);

#if INDEX
#define WindowFramework_C_get_button_thrower_p_p WindowFramework$14$get_button_thrower
#endif

// C++ _inCAAAABlvn() ==> WindowFramework$_$enable_keyboard(WindowFramework *param0)(WindowFramework *)
extern void WindowFramework$15$enable_keyboard(WindowFramework *self);

#if INDEX
#define WindowFramework_C_enable_keyboard_v_p WindowFramework$15$enable_keyboard
#endif

// C++ _inCAAAAMtUh() ==> WindowFramework$_$setup_trackball(WindowFramework *param0)(WindowFramework *)
extern void WindowFramework$16$setup_trackball(WindowFramework *self);

#if INDEX
#define WindowFramework_C_setup_trackball_v_p WindowFramework$16$setup_trackball
#endif

// C++ _inCAAAAa23a(NodePath const &object) ==> WindowFramework$_$center_trackball(WindowFramework *param0, NodePath const *param1)(WindowFramework *, NodePath const *)
extern void WindowFramework$17$center_trackball(WindowFramework *self, NodePath const *object);

#if INDEX
#define WindowFramework_C_center_trackball_v_pp WindowFramework$17$center_trackball
#endif

// C++ _inCAAAA8CuG(NodePath const &parent, pvector< Filename > const &files) ==> WindowFramework$_$load_models(WindowFramework *param0, NodePath const *param1, pvector< Filename > const *param2)(WindowFramework *, NodePath const *, pvector< Filename > const *)
extern bool WindowFramework$18$load_models(WindowFramework *self, NodePath const *parent, char *files);

#if INDEX
#define WindowFramework_C_load_models_B_ppp WindowFramework$18$load_models
#endif

// C++ _inCAAAAc3x2(NodePath const &parent, Filename filename) ==> WindowFramework$_$load_model(WindowFramework *param0, NodePath const *param1, Filename *param2)(WindowFramework *, NodePath const *, Filename *)
extern NodePath * WindowFramework$19$load_model(WindowFramework *self, NodePath const *parent, Filename *filename);

#if INDEX
#define WindowFramework_C_load_model_p_ppp WindowFramework$19$load_model
#endif

// C++ _inCAAAANSSi(NodePath const &parent) ==> WindowFramework$_$load_default_model(WindowFramework *param0, NodePath const *param1)(WindowFramework *, NodePath const *)
extern NodePath * WindowFramework$20$load_default_model(WindowFramework *self, NodePath const *parent);

#if INDEX
#define WindowFramework_C_load_default_model_p_pp WindowFramework$20$load_default_model
#endif

// C++ _inCAAAAYumN(int hierarchy_match_flags) ==> WindowFramework$_$loop_animations(WindowFramework *param0, int param1)(WindowFramework *, int)
extern void WindowFramework$21$loop_animations(WindowFramework *self, int hierarchy_match_flags);

#if INDEX
#define WindowFramework_C_loop_animations_v_pi WindowFramework$21$loop_animations
#endif

// C++ _inCAAAADybn() ==> WindowFramework$_$loop_animations(WindowFramework *param0)(WindowFramework *)
extern void WindowFramework$22$loop_animations(WindowFramework *self);

#if INDEX
#define WindowFramework_C_loop_animations_v_p WindowFramework$22$loop_animations
#endif

// C++ _inCAAAAaLMj() ==> WindowFramework$_$stagger_animations(WindowFramework *param0)(WindowFramework *)
extern void WindowFramework$23$stagger_animations(WindowFramework *self);

#if INDEX
#define WindowFramework_C_stagger_animations_v_p WindowFramework$23$stagger_animations
#endif

// C++ _inCAAAAshAJ() ==> WindowFramework$_$next_anim_control(WindowFramework *param0)(WindowFramework *)
extern void WindowFramework$24$next_anim_control(WindowFramework *self);

#if INDEX
#define WindowFramework_C_next_anim_control_v_p WindowFramework$24$next_anim_control
#endif

// C++ _inCAAAAGF8O(bool enable) ==> WindowFramework$_$set_anim_controls(WindowFramework *param0, bool param1)(WindowFramework *, bool)
extern void WindowFramework$25$set_anim_controls(WindowFramework *self, bool enable);

#if INDEX
#define WindowFramework_C_set_anim_controls_v_pB WindowFramework$25$set_anim_controls
#endif

// C++ _inCAAAAsD3B() ==> WindowFramework$_$get_anim_controls(WindowFramework const *param0)(WindowFramework const *)
extern bool WindowFramework$26$get_anim_controls(WindowFramework const *self);

#if INDEX
#define WindowFramework_C_get_anim_controls_B_p WindowFramework$26$get_anim_controls
#endif

// C++ _inCAAAA8SXt() ==> WindowFramework$_$adjust_dimensions(WindowFramework *param0)(WindowFramework *)
extern void WindowFramework$27$adjust_dimensions(WindowFramework *self);

#if INDEX
#define WindowFramework_C_adjust_dimensions_v_p WindowFramework$27$adjust_dimensions
#endif

// C++ _inCAAAAjG7H(WindowFramework::SplitType split_type) ==> WindowFramework$_$split_window(WindowFramework *param0, WindowFramework::SplitType param1)(WindowFramework *, WindowFramework::SplitType)
extern WindowFramework * WindowFramework$28$split_window(WindowFramework *self, WindowFramework$_SplitType split_type);

#if INDEX
#define WindowFramework_C_split_window_p_pp WindowFramework$28$split_window
#endif

// C++ _inCAAAAjmfa() ==> WindowFramework$_$split_window(WindowFramework *param0)(WindowFramework *)
extern WindowFramework * WindowFramework$29$split_window(WindowFramework *self);

#if INDEX
#define WindowFramework_C_split_window_p_p WindowFramework$29$split_window
#endif

// C++ _inCAAAACZGB(bool enable, bool filled) ==> WindowFramework$_$set_wireframe(WindowFramework *param0, bool param1, bool param2)(WindowFramework *, bool, bool)
extern void WindowFramework$30$set_wireframe(WindowFramework *self, bool enable, bool filled);

#if INDEX
#define WindowFramework_C_set_wireframe_v_pBB WindowFramework$30$set_wireframe
#endif

// C++ _inCAAAAkSnp(bool enable) ==> WindowFramework$_$set_wireframe(WindowFramework *param0, bool param1)(WindowFramework *, bool)
extern void WindowFramework$31$set_wireframe(WindowFramework *self, bool enable);

#if INDEX
#define WindowFramework_C_set_wireframe_v_pB WindowFramework$31$set_wireframe
#endif

// C++ _inCAAAAa6_v(bool enable) ==> WindowFramework$_$set_texture(WindowFramework *param0, bool param1)(WindowFramework *, bool)
extern void WindowFramework$32$set_texture(WindowFramework *self, bool enable);

#if INDEX
#define WindowFramework_C_set_texture_v_pB WindowFramework$32$set_texture
#endif

// C++ _inCAAAAOTGD(bool enable) ==> WindowFramework$_$set_two_sided(WindowFramework *param0, bool param1)(WindowFramework *, bool)
extern void WindowFramework$33$set_two_sided(WindowFramework *self, bool enable);

#if INDEX
#define WindowFramework_C_set_two_sided_v_pB WindowFramework$33$set_two_sided
#endif

// C++ _inCAAAADrUc(bool enable) ==> WindowFramework$_$set_one_sided_reverse(WindowFramework *param0, bool param1)(WindowFramework *, bool)
extern void WindowFramework$34$set_one_sided_reverse(WindowFramework *self, bool enable);

#if INDEX
#define WindowFramework_C_set_one_sided_reverse_v_pB WindowFramework$34$set_one_sided_reverse
#endif

// C++ _inCAAAAuwb_(bool enable) ==> WindowFramework$_$set_lighting(WindowFramework *param0, bool param1)(WindowFramework *, bool)
extern void WindowFramework$35$set_lighting(WindowFramework *self, bool enable);

#if INDEX
#define WindowFramework_C_set_lighting_v_pB WindowFramework$35$set_lighting
#endif

// C++ _inCAAAASqNR(bool enable) ==> WindowFramework$_$set_perpixel(WindowFramework *param0, bool param1)(WindowFramework *, bool)
extern void WindowFramework$36$set_perpixel(WindowFramework *self, bool enable);

#if INDEX
#define WindowFramework_C_set_perpixel_v_pB WindowFramework$36$set_perpixel
#endif

// C++ _inCAAAAv13J(WindowFramework::BackgroundType type) ==> WindowFramework$_$set_background_type(WindowFramework *param0, WindowFramework::BackgroundType param1)(WindowFramework *, WindowFramework::BackgroundType)
extern void WindowFramework$37$set_background_type(WindowFramework *self, WindowFramework$_BackgroundType type);

#if INDEX
#define WindowFramework_C_set_background_type_v_pp WindowFramework$37$set_background_type
#endif

// C++ _inCAAAASe1v() ==> WindowFramework$_$get_wireframe(WindowFramework const *param0)(WindowFramework const *)
extern bool WindowFramework$38$get_wireframe(WindowFramework const *self);

#if INDEX
#define WindowFramework_C_get_wireframe_B_p WindowFramework$38$get_wireframe
#endif

// C++ _inCAAAAEzZA() ==> WindowFramework$_$get_wireframe_filled(WindowFramework const *param0)(WindowFramework const *)
extern bool WindowFramework$39$get_wireframe_filled(WindowFramework const *self);

#if INDEX
#define WindowFramework_C_get_wireframe_filled_B_p WindowFramework$39$get_wireframe_filled
#endif

// C++ _inCAAAAVZbH() ==> WindowFramework$_$get_texture(WindowFramework const *param0)(WindowFramework const *)
extern bool WindowFramework$40$get_texture(WindowFramework const *self);

#if INDEX
#define WindowFramework_C_get_texture_B_p WindowFramework$40$get_texture
#endif

// C++ _inCAAAAMZUJ() ==> WindowFramework$_$get_two_sided(WindowFramework const *param0)(WindowFramework const *)
extern bool WindowFramework$41$get_two_sided(WindowFramework const *self);

#if INDEX
#define WindowFramework_C_get_two_sided_B_p WindowFramework$41$get_two_sided
#endif

// C++ _inCAAAAeADy() ==> WindowFramework$_$get_one_sided_reverse(WindowFramework const *param0)(WindowFramework const *)
extern bool WindowFramework$42$get_one_sided_reverse(WindowFramework const *self);

#if INDEX
#define WindowFramework_C_get_one_sided_reverse_B_p WindowFramework$42$get_one_sided_reverse
#endif

// C++ _inCAAAAGGkv() ==> WindowFramework$_$get_lighting(WindowFramework const *param0)(WindowFramework const *)
extern bool WindowFramework$43$get_lighting(WindowFramework const *self);

#if INDEX
#define WindowFramework_C_get_lighting_B_p WindowFramework$43$get_lighting
#endif

// C++ _inCAAAASlWB() ==> WindowFramework$_$get_perpixel(WindowFramework const *param0)(WindowFramework const *)
extern bool WindowFramework$44$get_perpixel(WindowFramework const *self);

#if INDEX
#define WindowFramework_C_get_perpixel_B_p WindowFramework$44$get_perpixel
#endif

// C++ _inCAAAAUJm4() ==> WindowFramework$_$get_background_type(WindowFramework const *param0)(WindowFramework const *)
extern WindowFramework$_BackgroundType WindowFramework$45$get_background_type(WindowFramework const *self);

#if INDEX
#define WindowFramework_C_get_background_type_p_p WindowFramework$45$get_background_type
#endif

// C++ _inCAAAAkcq_() ==> WindowFramework$_$get_shuttle_controls_font()()
extern TextFont * WindowFramework$46$get_shuttle_controls_font(void);

#if INDEX
#define WindowFramework_C_get_shuttle_controls_font_p_v WindowFramework$46$get_shuttle_controls_font
#endif

// C++ _inCAAAACIRR() ==> WindowFramework$_$make_camera(WindowFramework *param0)(WindowFramework *)
extern NodePath * WindowFramework$47$make_camera(WindowFramework *self);

#if INDEX
#define WindowFramework_C_make_camera_p_p WindowFramework$47$make_camera
#endif

// C++ _inCAAAAO0fX() ==> WindowFramework$_$get_class_type()()
extern int WindowFramework$48$get_class_type(void);

#if INDEX
#define WindowFramework_C_get_class_type_i_v WindowFramework$48$get_class_type
#endif

// C++ _inCAAAA2D1X() ==> WindowFramework$_$init_type()()
extern void WindowFramework$49$init_type(void);

#if INDEX
#define WindowFramework_C_init_type_v_v WindowFramework$49$init_type
#endif

// C++ _inCAAAAvhbO() ==> WindowFramework$_$get_type(WindowFramework const *param0)(WindowFramework const *)
extern int WindowFramework$50$get_type(WindowFramework const *self);

#if INDEX
#define WindowFramework_C_get_type_i_p WindowFramework$50$get_type
#endif

// C++ _inCAAAAi4Rg() ==> WindowFramework$_$force_init_type(WindowFramework *param0)(WindowFramework *)
extern int WindowFramework$51$force_init_type(WindowFramework *self);

#if INDEX
#define WindowFramework_C_force_init_type_i_p WindowFramework$51$force_init_type
#endif

// C++ _inCAAAAp5TH(WindowFramework const &) ==> WindowFramework$_$WindowFramework(WindowFramework const *param0)(WindowFramework const *)
extern WindowFramework * WindowFramework$52$WindowFramework(WindowFramework const *arg0);

#if INDEX
#define WindowFramework_C_ctor_p_p WindowFramework$52$WindowFramework
#endif


// WindowHandle

// C++ _inCAAAAlE6b(WindowHandle const &copy) ==> WindowHandle$_$WindowHandle(WindowHandle const *param0)(WindowHandle const *)
extern WindowHandle * WindowHandle$1$WindowHandle(WindowHandle const *copy);

#if INDEX
#define WindowHandle_C_ctor_p_p WindowHandle$1$WindowHandle
#endif

// C++ _inCAAAAsWhV(WindowHandle::OSHandle *os_handle) ==> WindowHandle$_$WindowHandle(WindowHandle::OSHandle *param0)(WindowHandle::OSHandle *)
extern WindowHandle * WindowHandle$2$WindowHandle(WindowHandle$_OSHandle *os_handle);
// COLLISION : WindowHandle_C_ctor_p_p WindowHandle$2$WindowHandle

// C++ _inCAAAALwuM() ==> WindowHandle$_$get_os_handle(WindowHandle const *param0)(WindowHandle const *)
extern WindowHandle$_OSHandle * WindowHandle$3$get_os_handle(WindowHandle const *self);

#if INDEX
#define WindowHandle_C_get_os_handle_p_p WindowHandle$3$get_os_handle
#endif

// C++ _inCAAAAklyc(WindowHandle::OSHandle *os_handle) ==> WindowHandle$_$set_os_handle(WindowHandle *param0, WindowHandle::OSHandle *param1)(WindowHandle *, WindowHandle::OSHandle *)
extern void WindowHandle$4$set_os_handle(WindowHandle *self, WindowHandle$_OSHandle *os_handle);

#if INDEX
#define WindowHandle_C_set_os_handle_v_pp WindowHandle$4$set_os_handle
#endif

// C++ _inCAAAABCmq(unsigned int msg, int wparam, int lparam) ==> WindowHandle$_$send_windows_message(WindowHandle *param0, unsigned int param1, int param2, int param3)(WindowHandle *, unsigned int, int, int)
extern void WindowHandle$5$send_windows_message(WindowHandle *self, unsigned int msg, int warg, int larg);

#if INDEX
#define WindowHandle_C_send_windows_message_v_pIii WindowHandle$5$send_windows_message
#endif

// C++ _inCAAAAPIYS() ==> WindowHandle$_$get_int_handle(WindowHandle const *param0)(WindowHandle const *)
extern std$_size_t WindowHandle$6$get_int_handle(WindowHandle const *self);

#if INDEX
#define WindowHandle_C_get_int_handle_l_p WindowHandle$6$get_int_handle
#endif

// C++ _inCAAAApFpS(std::ostream &out) ==> WindowHandle$_$output(WindowHandle const *param0, std::ostream *param1)(WindowHandle const *, std::ostream *)
extern void WindowHandle$7$output(WindowHandle const *self, std$_ostream *out);

#if INDEX
#define WindowHandle_C_output_v_pp WindowHandle$7$output
#endif

// C++ _inCAAAA_nFw(WindowHandle *child) ==> WindowHandle$_$attach_child(WindowHandle *param0, WindowHandle *param1)(WindowHandle *, WindowHandle *)
extern void WindowHandle$8$attach_child(WindowHandle *self, WindowHandle *child);

#if INDEX
#define WindowHandle_C_attach_child_v_pp WindowHandle$8$attach_child
#endif

// C++ _inCAAAAUb19(WindowHandle *child) ==> WindowHandle$_$detach_child(WindowHandle *param0, WindowHandle *param1)(WindowHandle *, WindowHandle *)
extern void WindowHandle$9$detach_child(WindowHandle *self, WindowHandle *child);

#if INDEX
#define WindowHandle_C_detach_child_v_pp WindowHandle$9$detach_child
#endif

// C++ _inCAAAAkkU7(WindowHandle *child) ==> WindowHandle$_$request_keyboard_focus(WindowHandle *param0, WindowHandle *param1)(WindowHandle *, WindowHandle *)
extern void WindowHandle$10$request_keyboard_focus(WindowHandle *self, WindowHandle *child);

#if INDEX
#define WindowHandle_C_request_keyboard_focus_v_pp WindowHandle$10$request_keyboard_focus
#endif

// C++ _inCAAAAeTAI(unsigned int msg, int wparam, int lparam) ==> WindowHandle$_$receive_windows_message(WindowHandle *param0, unsigned int param1, int param2, int param3)(WindowHandle *, unsigned int, int, int)
extern void WindowHandle$11$receive_windows_message(WindowHandle *self, unsigned int msg, int warg, int larg);

#if INDEX
#define WindowHandle_C_receive_windows_message_v_pIii WindowHandle$11$receive_windows_message
#endif

// C++ _inCAAAA21y5() ==> WindowHandle$_$get_class_type()()
extern int WindowHandle$12$get_class_type(void);

#if INDEX
#define WindowHandle_C_get_class_type_i_v WindowHandle$12$get_class_type
#endif

// C++ _inCAAAAFiur() ==> WindowHandle$_$init_type()()
extern void WindowHandle$13$init_type(void);

#if INDEX
#define WindowHandle_C_init_type_v_v WindowHandle$13$init_type
#endif

// C++ _inCAAAA_AOc() ==> WindowHandle$_$get_type(WindowHandle const *param0)(WindowHandle const *)
extern int WindowHandle$14$get_type(WindowHandle const *self);

#if INDEX
#define WindowHandle_C_get_type_i_p WindowHandle$14$get_type
#endif

// C++ _inCAAAAvmjH() ==> WindowHandle$_$force_init_type(WindowHandle *param0)(WindowHandle *)
extern int WindowHandle$15$force_init_type(WindowHandle *self);

#if INDEX
#define WindowHandle_C_force_init_type_i_p WindowHandle$15$force_init_type
#endif


// WindowProperties

// C++ _inCAAAAGNZU() ==> WindowProperties$_$WindowProperties()()
extern WindowProperties * WindowProperties$1$WindowProperties(void);

#if INDEX
#define WindowProperties_C_ctor_p_v WindowProperties$1$WindowProperties
#endif

// C++ _inCAAAAlceF(WindowProperties const &copy) ==> WindowProperties$_$WindowProperties(WindowProperties const *param0)(WindowProperties const *)
extern WindowProperties * WindowProperties$2$WindowProperties(WindowProperties const *copy);

#if INDEX
#define WindowProperties_C_ctor_p_p WindowProperties$2$WindowProperties
#endif

// C++ _inCAAAAPD11() ==> WindowProperties$_$get_config_properties()()
extern WindowProperties * WindowProperties$3$get_config_properties(void);

#if INDEX
#define WindowProperties_C_get_config_properties_p_v WindowProperties$3$get_config_properties
#endif

// C++ _inCAAAA1hD1() ==> WindowProperties$_$get_default()()
extern WindowProperties * WindowProperties$4$get_default(void);

#if INDEX
#define WindowProperties_C_get_default_p_v WindowProperties$4$get_default
#endif

// C++ _inCAAAANbiB(WindowProperties const &default_properties) ==> WindowProperties$_$set_default(WindowProperties const *param0)(WindowProperties const *)
extern void WindowProperties$5$set_default(WindowProperties const *default_properties);

#if INDEX
#define WindowProperties_C_set_default_v_p WindowProperties$5$set_default
#endif

// C++ _inCAAAADZHK() ==> WindowProperties$_$clear_default()()
extern void WindowProperties$6$clear_default(void);

#if INDEX
#define WindowProperties_C_clear_default_v_v WindowProperties$6$clear_default
#endif

// C++ _inCAAAA0txz(LVecBase2i const &size) ==> WindowProperties$_$size(LVecBase2i const *param0)(LVecBase2i const *)
extern WindowProperties * WindowProperties$7$size(LVecBase2i const *size);

#if INDEX
#define WindowProperties_C_size_p_p WindowProperties$7$size
#endif

// C++ _inCAAAA7Qam(int x_size, int y_size) ==> WindowProperties$_$size(int param0, int param1)(int, int)
extern WindowProperties * WindowProperties$8$size(int x_size, int y_size);

#if INDEX
#define WindowProperties_C_size_p_ii WindowProperties$8$size
#endif

// C++ _inCAAAAIj6c() ==> WindowProperties$_$clear(WindowProperties *param0)(WindowProperties *)
extern void WindowProperties$9$clear(WindowProperties *self);

#if INDEX
#define WindowProperties_C_clear_v_p WindowProperties$9$clear
#endif

// C++ _inCAAAA5Hm3() ==> WindowProperties$_$is_any_specified(WindowProperties const *param0)(WindowProperties const *)
extern bool WindowProperties$10$is_any_specified(WindowProperties const *self);

#if INDEX
#define WindowProperties_C_is_any_specified_B_p WindowProperties$10$is_any_specified
#endif

// C++ _inCAAAAP616(LPoint2i const &origin) ==> WindowProperties$_$set_origin(WindowProperties *param0, LPoint2i const *param1)(WindowProperties *, LPoint2i const *)
extern void WindowProperties$11$set_origin(WindowProperties *self, LPoint2i const *origin);

#if INDEX
#define WindowProperties_C_set_origin_v_pp WindowProperties$11$set_origin
#endif

// C++ _inCAAAA_6s1(int x_origin, int y_origin) ==> WindowProperties$_$set_origin(WindowProperties *param0, int param1, int param2)(WindowProperties *, int, int)
extern void WindowProperties$12$set_origin(WindowProperties *self, int x_origin, int y_origin);

#if INDEX
#define WindowProperties_C_set_origin_v_pii WindowProperties$12$set_origin
#endif

// C++ _inCAAAAOKyo() ==> WindowProperties$_$get_origin(WindowProperties const *param0)(WindowProperties const *)
extern LPoint2i const * WindowProperties$13$get_origin(WindowProperties const *self);

#if INDEX
#define WindowProperties_C_get_origin_p_p WindowProperties$13$get_origin
#endif

// C++ _inCAAAAmWEm() ==> WindowProperties$_$get_x_origin(WindowProperties const *param0)(WindowProperties const *)
extern int WindowProperties$14$get_x_origin(WindowProperties const *self);

#if INDEX
#define WindowProperties_C_get_x_origin_i_p WindowProperties$14$get_x_origin
#endif

// C++ _inCAAAAjWge() ==> WindowProperties$_$get_y_origin(WindowProperties const *param0)(WindowProperties const *)
extern int WindowProperties$15$get_y_origin(WindowProperties const *self);

#if INDEX
#define WindowProperties_C_get_y_origin_i_p WindowProperties$15$get_y_origin
#endif

// C++ _inCAAAAeNcv() ==> WindowProperties$_$has_origin(WindowProperties const *param0)(WindowProperties const *)
extern bool WindowProperties$16$has_origin(WindowProperties const *self);

#if INDEX
#define WindowProperties_C_has_origin_B_p WindowProperties$16$has_origin
#endif

// C++ _inCAAAAJusE() ==> WindowProperties$_$clear_origin(WindowProperties *param0)(WindowProperties *)
extern void WindowProperties$17$clear_origin(WindowProperties *self);

#if INDEX
#define WindowProperties_C_clear_origin_v_p WindowProperties$17$clear_origin
#endif

// C++ _inCAAAAyNWj(LVector2i const &size) ==> WindowProperties$_$set_size(WindowProperties *param0, LVector2i const *param1)(WindowProperties *, LVector2i const *)
extern void WindowProperties$18$set_size(WindowProperties *self, LVector2i const *size);

#if INDEX
#define WindowProperties_C_set_size_v_pp WindowProperties$18$set_size
#endif

// C++ _inCAAAA7Ba1(int x_size, int y_size) ==> WindowProperties$_$set_size(WindowProperties *param0, int param1, int param2)(WindowProperties *, int, int)
extern void WindowProperties$19$set_size(WindowProperties *self, int x_size, int y_size);

#if INDEX
#define WindowProperties_C_set_size_v_pii WindowProperties$19$set_size
#endif

// C++ _inCAAAAA4UN() ==> WindowProperties$_$get_size(WindowProperties const *param0)(WindowProperties const *)
extern LVector2i const * WindowProperties$20$get_size(WindowProperties const *self);

#if INDEX
#define WindowProperties_C_get_size_p_p WindowProperties$20$get_size
#endif

// C++ _inCAAAAVfNw() ==> WindowProperties$_$get_x_size(WindowProperties const *param0)(WindowProperties const *)
extern int WindowProperties$21$get_x_size(WindowProperties const *self);

#if INDEX
#define WindowProperties_C_get_x_size_i_p WindowProperties$21$get_x_size
#endif

// C++ _inCAAAAQfpo() ==> WindowProperties$_$get_y_size(WindowProperties const *param0)(WindowProperties const *)
extern int WindowProperties$22$get_y_size(WindowProperties const *self);

#if INDEX
#define WindowProperties_C_get_y_size_i_p WindowProperties$22$get_y_size
#endif

// C++ _inCAAAA04_T() ==> WindowProperties$_$has_size(WindowProperties const *param0)(WindowProperties const *)
extern bool WindowProperties$23$has_size(WindowProperties const *self);

#if INDEX
#define WindowProperties_C_has_size_B_p WindowProperties$23$has_size
#endif

// C++ _inCAAAAChuY() ==> WindowProperties$_$clear_size(WindowProperties *param0)(WindowProperties *)
extern void WindowProperties$24$clear_size(WindowProperties *self);

#if INDEX
#define WindowProperties_C_clear_size_v_p WindowProperties$24$clear_size
#endif

// C++ _inCAAAArK49() ==> WindowProperties$_$has_mouse_mode(WindowProperties const *param0)(WindowProperties const *)
extern bool WindowProperties$25$has_mouse_mode(WindowProperties const *self);

#if INDEX
#define WindowProperties_C_has_mouse_mode_B_p WindowProperties$25$has_mouse_mode
#endif

// C++ _inCAAAAmSWG(WindowProperties::MouseMode mode) ==> WindowProperties$_$set_mouse_mode(WindowProperties *param0, WindowProperties::MouseMode param1)(WindowProperties *, WindowProperties::MouseMode)
extern void WindowProperties$26$set_mouse_mode(WindowProperties *self, WindowProperties$_MouseMode mode);

#if INDEX
#define WindowProperties_C_set_mouse_mode_v_pp WindowProperties$26$set_mouse_mode
#endif

// C++ _inCAAAAjVO3() ==> WindowProperties$_$get_mouse_mode(WindowProperties const *param0)(WindowProperties const *)
extern WindowProperties$_MouseMode WindowProperties$27$get_mouse_mode(WindowProperties const *self);

#if INDEX
#define WindowProperties_C_get_mouse_mode_p_p WindowProperties$27$get_mouse_mode
#endif

// C++ _inCAAAAmyf3() ==> WindowProperties$_$clear_mouse_mode(WindowProperties *param0)(WindowProperties *)
extern void WindowProperties$28$clear_mouse_mode(WindowProperties *self);

#if INDEX
#define WindowProperties_C_clear_mouse_mode_v_p WindowProperties$28$clear_mouse_mode
#endif

// C++ _inCAAAAH1Rx(std::string const &title) ==> WindowProperties$_$set_title(WindowProperties *param0, char const *param1)(WindowProperties *, char const *)
extern void WindowProperties$29$set_title(WindowProperties *self, char const *title);

#if INDEX
#define WindowProperties_C_set_title_v_ps WindowProperties$29$set_title
#endif

// C++ _inCAAAALpK6() ==> WindowProperties$_$get_title(WindowProperties const *param0)(WindowProperties const *)
extern char const * WindowProperties$30$get_title(WindowProperties const *self);

#if INDEX
#define WindowProperties_C_get_title_s_p WindowProperties$30$get_title
#endif

// C++ _inCAAAA4p0A() ==> WindowProperties$_$has_title(WindowProperties const *param0)(WindowProperties const *)
extern bool WindowProperties$31$has_title(WindowProperties const *self);

#if INDEX
#define WindowProperties_C_has_title_B_p WindowProperties$31$has_title
#endif

// C++ _inCAAAA2KzX() ==> WindowProperties$_$clear_title(WindowProperties *param0)(WindowProperties *)
extern void WindowProperties$32$clear_title(WindowProperties *self);

#if INDEX
#define WindowProperties_C_clear_title_v_p WindowProperties$32$clear_title
#endif

// C++ _inCAAAA1wGY(bool undecorated) ==> WindowProperties$_$set_undecorated(WindowProperties *param0, bool param1)(WindowProperties *, bool)
extern void WindowProperties$33$set_undecorated(WindowProperties *self, bool undecorated);

#if INDEX
#define WindowProperties_C_set_undecorated_v_pB WindowProperties$33$set_undecorated
#endif

// C++ _inCAAAAJtRY() ==> WindowProperties$_$get_undecorated(WindowProperties const *param0)(WindowProperties const *)
extern bool WindowProperties$34$get_undecorated(WindowProperties const *self);

#if INDEX
#define WindowProperties_C_get_undecorated_B_p WindowProperties$34$get_undecorated
#endif

// C++ _inCAAAAds7e() ==> WindowProperties$_$has_undecorated(WindowProperties const *param0)(WindowProperties const *)
extern bool WindowProperties$35$has_undecorated(WindowProperties const *self);

#if INDEX
#define WindowProperties_C_has_undecorated_B_p WindowProperties$35$has_undecorated
#endif

// C++ _inCAAAA6EZL() ==> WindowProperties$_$clear_undecorated(WindowProperties *param0)(WindowProperties *)
extern void WindowProperties$36$clear_undecorated(WindowProperties *self);

#if INDEX
#define WindowProperties_C_clear_undecorated_v_p WindowProperties$36$clear_undecorated
#endif

// C++ _inCAAAAhxLw(bool fixed_size) ==> WindowProperties$_$set_fixed_size(WindowProperties *param0, bool param1)(WindowProperties *, bool)
extern void WindowProperties$37$set_fixed_size(WindowProperties *self, bool fixed_size);

#if INDEX
#define WindowProperties_C_set_fixed_size_v_pB WindowProperties$37$set_fixed_size
#endif

// C++ _inCAAAAi_y_() ==> WindowProperties$_$get_fixed_size(WindowProperties const *param0)(WindowProperties const *)
extern bool WindowProperties$38$get_fixed_size(WindowProperties const *self);

#if INDEX
#define WindowProperties_C_get_fixed_size_B_p WindowProperties$38$get_fixed_size
#endif

// C++ _inCAAAA7wcF() ==> WindowProperties$_$has_fixed_size(WindowProperties const *param0)(WindowProperties const *)
extern bool WindowProperties$39$has_fixed_size(WindowProperties const *self);

#if INDEX
#define WindowProperties_C_has_fixed_size_B_p WindowProperties$39$has_fixed_size
#endif

// C++ _inCAAAAPwhp() ==> WindowProperties$_$clear_fixed_size(WindowProperties *param0)(WindowProperties *)
extern void WindowProperties$40$clear_fixed_size(WindowProperties *self);

#if INDEX
#define WindowProperties_C_clear_fixed_size_v_p WindowProperties$40$clear_fixed_size
#endif

// C++ _inCAAAAq0Uu(bool fullscreen) ==> WindowProperties$_$set_fullscreen(WindowProperties *param0, bool param1)(WindowProperties *, bool)
extern void WindowProperties$41$set_fullscreen(WindowProperties *self, bool fullscreen);

#if INDEX
#define WindowProperties_C_set_fullscreen_v_pB WindowProperties$41$set_fullscreen
#endif

// C++ _inCAAAAtz98() ==> WindowProperties$_$get_fullscreen(WindowProperties const *param0)(WindowProperties const *)
extern bool WindowProperties$42$get_fullscreen(WindowProperties const *self);

#if INDEX
#define WindowProperties_C_get_fullscreen_B_p WindowProperties$42$get_fullscreen
#endif

// C++ _inCAAAAi3nD() ==> WindowProperties$_$has_fullscreen(WindowProperties const *param0)(WindowProperties const *)
extern bool WindowProperties$43$has_fullscreen(WindowProperties const *self);

#if INDEX
#define WindowProperties_C_has_fullscreen_B_p WindowProperties$43$has_fullscreen
#endif

// C++ _inCAAAAwgpW() ==> WindowProperties$_$clear_fullscreen(WindowProperties *param0)(WindowProperties *)
extern void WindowProperties$44$clear_fullscreen(WindowProperties *self);

#if INDEX
#define WindowProperties_C_clear_fullscreen_v_p WindowProperties$44$clear_fullscreen
#endif

// C++ _inCAAAApPA6(bool foreground) ==> WindowProperties$_$set_foreground(WindowProperties *param0, bool param1)(WindowProperties *, bool)
extern void WindowProperties$45$set_foreground(WindowProperties *self, bool foreground);

#if INDEX
#define WindowProperties_C_set_foreground_v_pB WindowProperties$45$set_foreground
#endif

// C++ _inCAAAArFnI() ==> WindowProperties$_$get_foreground(WindowProperties const *param0)(WindowProperties const *)
extern bool WindowProperties$46$get_foreground(WindowProperties const *self);

#if INDEX
#define WindowProperties_C_get_foreground_B_p WindowProperties$46$get_foreground
#endif

// C++ _inCAAAA7CRP() ==> WindowProperties$_$has_foreground(WindowProperties const *param0)(WindowProperties const *)
extern bool WindowProperties$47$has_foreground(WindowProperties const *self);

#if INDEX
#define WindowProperties_C_has_foreground_B_p WindowProperties$47$has_foreground
#endif

// C++ _inCAAAANghP() ==> WindowProperties$_$clear_foreground(WindowProperties *param0)(WindowProperties *)
extern void WindowProperties$48$clear_foreground(WindowProperties *self);

#if INDEX
#define WindowProperties_C_clear_foreground_v_p WindowProperties$48$clear_foreground
#endif

// C++ _inCAAAAJuBm(bool minimized) ==> WindowProperties$_$set_minimized(WindowProperties *param0, bool param1)(WindowProperties *, bool)
extern void WindowProperties$49$set_minimized(WindowProperties *self, bool minimized);

#if INDEX
#define WindowProperties_C_set_minimized_v_pB WindowProperties$49$set_minimized
#endif

// C++ _inCAAAAUuGt() ==> WindowProperties$_$get_minimized(WindowProperties const *param0)(WindowProperties const *)
extern bool WindowProperties$50$get_minimized(WindowProperties const *self);

#if INDEX
#define WindowProperties_C_get_minimized_B_p WindowProperties$50$get_minimized
#endif

// C++ _inCAAAAgrwz() ==> WindowProperties$_$has_minimized(WindowProperties const *param0)(WindowProperties const *)
extern bool WindowProperties$51$has_minimized(WindowProperties const *self);

#if INDEX
#define WindowProperties_C_has_minimized_B_p WindowProperties$51$has_minimized
#endif

// C++ _inCAAAANh8v() ==> WindowProperties$_$clear_minimized(WindowProperties *param0)(WindowProperties *)
extern void WindowProperties$52$clear_minimized(WindowProperties *self);

#if INDEX
#define WindowProperties_C_clear_minimized_v_p WindowProperties$52$clear_minimized
#endif

// C++ _inCAAAAhHN2(bool maximized) ==> WindowProperties$_$set_maximized(WindowProperties *param0, bool param1)(WindowProperties *, bool)
extern void WindowProperties$53$set_maximized(WindowProperties *self, bool maximized);

#if INDEX
#define WindowProperties_C_set_maximized_v_pB WindowProperties$53$set_maximized
#endif

// C++ _inCAAAA_3T9() ==> WindowProperties$_$get_maximized(WindowProperties const *param0)(WindowProperties const *)
extern bool WindowProperties$54$get_maximized(WindowProperties const *self);

#if INDEX
#define WindowProperties_C_get_maximized_B_p WindowProperties$54$get_maximized
#endif

// C++ _inCAAAAAz9D() ==> WindowProperties$_$has_maximized(WindowProperties const *param0)(WindowProperties const *)
extern bool WindowProperties$55$has_maximized(WindowProperties const *self);

#if INDEX
#define WindowProperties_C_has_maximized_B_p WindowProperties$55$has_maximized
#endif

// C++ _inCAAAAydVu() ==> WindowProperties$_$clear_maximized(WindowProperties *param0)(WindowProperties *)
extern void WindowProperties$56$clear_maximized(WindowProperties *self);

#if INDEX
#define WindowProperties_C_clear_maximized_v_p WindowProperties$56$clear_maximized
#endif

// C++ _inCAAAADYtm(bool raw_mice) ==> WindowProperties$_$set_raw_mice(WindowProperties *param0, bool param1)(WindowProperties *, bool)
extern void WindowProperties$57$set_raw_mice(WindowProperties *self, bool raw_mice);

#if INDEX
#define WindowProperties_C_set_raw_mice_v_pB WindowProperties$57$set_raw_mice
#endif

// C++ _inCAAAAjiir() ==> WindowProperties$_$get_raw_mice(WindowProperties const *param0)(WindowProperties const *)
extern bool WindowProperties$58$get_raw_mice(WindowProperties const *self);

#if INDEX
#define WindowProperties_C_get_raw_mice_B_p WindowProperties$58$get_raw_mice
#endif

// C++ _inCAAAATfNy() ==> WindowProperties$_$has_raw_mice(WindowProperties const *param0)(WindowProperties const *)
extern bool WindowProperties$59$has_raw_mice(WindowProperties const *self);

#if INDEX
#define WindowProperties_C_has_raw_mice_B_p WindowProperties$59$has_raw_mice
#endif

// C++ _inCAAAAm_9h() ==> WindowProperties$_$clear_raw_mice(WindowProperties *param0)(WindowProperties *)
extern void WindowProperties$60$clear_raw_mice(WindowProperties *self);

#if INDEX
#define WindowProperties_C_clear_raw_mice_v_p WindowProperties$60$clear_raw_mice
#endif

// C++ _inCAAAA0PHZ(bool open) ==> WindowProperties$_$set_open(WindowProperties *param0, bool param1)(WindowProperties *, bool)
extern void WindowProperties$61$set_open(WindowProperties *self, bool open);

#if INDEX
#define WindowProperties_C_set_open_v_pB WindowProperties$61$set_open
#endif

// C++ _inCAAAAnBqS() ==> WindowProperties$_$get_open(WindowProperties const *param0)(WindowProperties const *)
extern bool WindowProperties$62$get_open(WindowProperties const *self);

#if INDEX
#define WindowProperties_C_get_open_B_p WindowProperties$62$get_open
#endif

// C++ _inCAAAA3AUZ() ==> WindowProperties$_$has_open(WindowProperties const *param0)(WindowProperties const *)
extern bool WindowProperties$63$has_open(WindowProperties const *self);

#if INDEX
#define WindowProperties_C_has_open_B_p WindowProperties$63$has_open
#endif

// C++ _inCAAAAXQu6() ==> WindowProperties$_$clear_open(WindowProperties *param0)(WindowProperties *)
extern void WindowProperties$64$clear_open(WindowProperties *self);

#if INDEX
#define WindowProperties_C_clear_open_v_p WindowProperties$64$clear_open
#endif

// C++ _inCAAAAuag3(bool cursor_hidden) ==> WindowProperties$_$set_cursor_hidden(WindowProperties *param0, bool param1)(WindowProperties *, bool)
extern void WindowProperties$65$set_cursor_hidden(WindowProperties *self, bool cursor_hidden);

#if INDEX
#define WindowProperties_C_set_cursor_hidden_v_pB WindowProperties$65$set_cursor_hidden
#endif

// C++ _inCAAAAILMV() ==> WindowProperties$_$get_cursor_hidden(WindowProperties const *param0)(WindowProperties const *)
extern bool WindowProperties$66$get_cursor_hidden(WindowProperties const *self);

#if INDEX
#define WindowProperties_C_get_cursor_hidden_B_p WindowProperties$66$get_cursor_hidden
#endif

// C++ _inCAAAA0O2b() ==> WindowProperties$_$has_cursor_hidden(WindowProperties const *param0)(WindowProperties const *)
extern bool WindowProperties$67$has_cursor_hidden(WindowProperties const *self);

#if INDEX
#define WindowProperties_C_has_cursor_hidden_B_p WindowProperties$67$has_cursor_hidden
#endif

// C++ _inCAAAAnQoK() ==> WindowProperties$_$clear_cursor_hidden(WindowProperties *param0)(WindowProperties *)
extern void WindowProperties$68$clear_cursor_hidden(WindowProperties *self);

#if INDEX
#define WindowProperties_C_clear_cursor_hidden_v_p WindowProperties$68$clear_cursor_hidden
#endif

// C++ _inCAAAAvab1(Filename const &icon_filename) ==> WindowProperties$_$set_icon_filename(WindowProperties *param0, Filename const *param1)(WindowProperties *, Filename const *)
extern void WindowProperties$69$set_icon_filename(WindowProperties *self, Filename const *icon_filename);

#if INDEX
#define WindowProperties_C_set_icon_filename_v_pp WindowProperties$69$set_icon_filename
#endif

// C++ _inCAAAAaEsZ() ==> WindowProperties$_$get_icon_filename(WindowProperties const *param0)(WindowProperties const *)
extern Filename const * WindowProperties$70$get_icon_filename(WindowProperties const *self);

#if INDEX
#define WindowProperties_C_get_icon_filename_p_p WindowProperties$70$get_icon_filename
#endif

// C++ _inCAAAAqEWg() ==> WindowProperties$_$has_icon_filename(WindowProperties const *param0)(WindowProperties const *)
extern bool WindowProperties$71$has_icon_filename(WindowProperties const *self);

#if INDEX
#define WindowProperties_C_has_icon_filename_B_p WindowProperties$71$has_icon_filename
#endif

// C++ _inCAAAAOBF2() ==> WindowProperties$_$clear_icon_filename(WindowProperties *param0)(WindowProperties *)
extern void WindowProperties$72$clear_icon_filename(WindowProperties *self);

#if INDEX
#define WindowProperties_C_clear_icon_filename_v_p WindowProperties$72$clear_icon_filename
#endif

// C++ _inCAAAAFBsD(Filename const &cursor_filename) ==> WindowProperties$_$set_cursor_filename(WindowProperties *param0, Filename const *param1)(WindowProperties *, Filename const *)
extern void WindowProperties$73$set_cursor_filename(WindowProperties *self, Filename const *cursor_filename);

#if INDEX
#define WindowProperties_C_set_cursor_filename_v_pp WindowProperties$73$set_cursor_filename
#endif

// C++ _inCAAAAzq6A() ==> WindowProperties$_$get_cursor_filename(WindowProperties const *param0)(WindowProperties const *)
extern Filename const * WindowProperties$74$get_cursor_filename(WindowProperties const *self);

#if INDEX
#define WindowProperties_C_get_cursor_filename_p_p WindowProperties$74$get_cursor_filename
#endif

// C++ _inCAAAAjlkH() ==> WindowProperties$_$has_cursor_filename(WindowProperties const *param0)(WindowProperties const *)
extern bool WindowProperties$75$has_cursor_filename(WindowProperties const *self);

#if INDEX
#define WindowProperties_C_has_cursor_filename_B_p WindowProperties$75$has_cursor_filename
#endif

// C++ _inCAAAAImNb() ==> WindowProperties$_$clear_cursor_filename(WindowProperties *param0)(WindowProperties *)
extern void WindowProperties$76$clear_cursor_filename(WindowProperties *self);

#if INDEX
#define WindowProperties_C_clear_cursor_filename_v_p WindowProperties$76$clear_cursor_filename
#endif

// C++ _inCAAAAonGh(WindowProperties::ZOrder z_order) ==> WindowProperties$_$set_z_order(WindowProperties *param0, WindowProperties::ZOrder param1)(WindowProperties *, WindowProperties::ZOrder)
extern void WindowProperties$77$set_z_order(WindowProperties *self, WindowProperties$_ZOrder z_order);

#if INDEX
#define WindowProperties_C_set_z_order_v_pp WindowProperties$77$set_z_order
#endif

// C++ _inCAAAA_iJo() ==> WindowProperties$_$get_z_order(WindowProperties const *param0)(WindowProperties const *)
extern WindowProperties$_ZOrder WindowProperties$78$get_z_order(WindowProperties const *self);

#if INDEX
#define WindowProperties_C_get_z_order_p_p WindowProperties$78$get_z_order
#endif

// C++ _inCAAAAuhzu() ==> WindowProperties$_$has_z_order(WindowProperties const *param0)(WindowProperties const *)
extern bool WindowProperties$79$has_z_order(WindowProperties const *self);

#if INDEX
#define WindowProperties_C_has_z_order_B_p WindowProperties$79$has_z_order
#endif

// C++ _inCAAAALFwW() ==> WindowProperties$_$clear_z_order(WindowProperties *param0)(WindowProperties *)
extern void WindowProperties$80$clear_z_order(WindowProperties *self);

#if INDEX
#define WindowProperties_C_clear_z_order_v_p WindowProperties$80$clear_z_order
#endif

// C++ _inCAAAAttFo(WindowHandle *parent_window) ==> WindowProperties$_$set_parent_window(WindowProperties *param0, WindowHandle *param1)(WindowProperties *, WindowHandle *)
extern void WindowProperties$81$set_parent_window(WindowProperties *self, WindowHandle *parent_window);

#if INDEX
#define WindowProperties_C_set_parent_window_v_pp WindowProperties$81$set_parent_window
#endif

// C++ _inCAAAAhe0o() ==> WindowProperties$_$set_parent_window(WindowProperties *param0)(WindowProperties *)
extern void WindowProperties$82$set_parent_window(WindowProperties *self);

#if INDEX
#define WindowProperties_C_set_parent_window_v_p WindowProperties$82$set_parent_window
#endif

// C++ _inCAAAAH63T(std::size_t parent) ==> WindowProperties$_$set_parent_window(WindowProperties *param0, std::size_t param1)(WindowProperties *, std::size_t)
extern void WindowProperties$83$set_parent_window(WindowProperties *self, std$_size_t parent);

#if INDEX
#define WindowProperties_C_set_parent_window_v_pl WindowProperties$83$set_parent_window
#endif

// C++ _inCAAAA7fZY() ==> WindowProperties$_$get_parent_window(WindowProperties const *param0)(WindowProperties const *)
extern WindowHandle * WindowProperties$84$get_parent_window(WindowProperties const *self);

#if INDEX
#define WindowProperties_C_get_parent_window_p_p WindowProperties$84$get_parent_window
#endif

// C++ _inCAAAALSDf() ==> WindowProperties$_$has_parent_window(WindowProperties const *param0)(WindowProperties const *)
extern bool WindowProperties$85$has_parent_window(WindowProperties const *self);

#if INDEX
#define WindowProperties_C_has_parent_window_B_p WindowProperties$85$has_parent_window
#endif

// C++ _inCAAAAy5uH() ==> WindowProperties$_$clear_parent_window(WindowProperties *param0)(WindowProperties *)
extern void WindowProperties$86$clear_parent_window(WindowProperties *self);

#if INDEX
#define WindowProperties_C_clear_parent_window_v_p WindowProperties$86$clear_parent_window
#endif

// C++ _inCAAAAcUzF(WindowProperties const &other) ==> WindowProperties$_$add_properties(WindowProperties *param0, WindowProperties const *param1)(WindowProperties *, WindowProperties const *)
extern void WindowProperties$87$add_properties(WindowProperties *self, WindowProperties const *other);

#if INDEX
#define WindowProperties_C_add_properties_v_pp WindowProperties$87$add_properties
#endif

// C++ _inCAAAA0R7E(std::ostream &out) ==> WindowProperties$_$output(WindowProperties const *param0, std::ostream *param1)(WindowProperties const *, std::ostream *)
extern void WindowProperties$88$output(WindowProperties const *self, std$_ostream *out);

#if INDEX
#define WindowProperties_C_output_v_pp WindowProperties$88$output
#endif


