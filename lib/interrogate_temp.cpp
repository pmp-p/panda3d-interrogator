/*
 * This file was generated by:
 * interrogate -promiscuous -string -c -fnames -v -S/usr/local/include/panda3d/include/parser-inc -S/usr/local/include/panda3d/include/ -S/usr/local/include -S/usr/include -S/usr/include/x86_64-linux-gnu -srcdir . -oc interrogate_temp.cpp -od interrogate.in -module lib -library lib -nomangle -DINTERROGATE -DCPPPARSER -D__STDC__=1 -D__cplusplus=201103L -D__attribute__\(x\)= -D__i386__ ./lib.h ./lib.cxx ./em.h
 *
 */

#include "dtoolbase.h"
#include "interrogate_request.h"
#include "dconfig.h"
#include <sstream>

#include "./em.h"
#include "./lib.h"
#include "dconfig.h"
#include <dlfcn.h>
#include "dtoolbase.h"
#include "em.h"
#include <iostream>
#include "lib.h"
#include "notifyCategoryProxy.h"
#include "pandaFramework.h"
#include "pandaSystem.h"
#include "pandabase.h"


#if __GNUC__ >= 4
#define EXPORT_FUNC extern "C" __attribute__((used, visibility("default")))
#else
#define EXPORT_FUNC extern "C"
#endif

EXPORT_FUNC Filename * _inCKD07zHmO();
EXPORT_FUNC Filename * _inCKD07TAyl(Filename *param0);
EXPORT_FUNC Filename * _inCKD070xIC(Filename const *param0);
EXPORT_FUNC Filename * _inCKD07z3ik(Filename const *param0, Filename const *param1);
EXPORT_FUNC Filename * _inCKD07YS9H(char const *param0);
EXPORT_FUNC Filename * _inCKD07ygg9(char const *param0);
EXPORT_FUNC Filename * _inCKD07w0Fd(wchar_t const *param0);
EXPORT_FUNC Filename * _inCKD07C1b2(Filename const *param0);
EXPORT_FUNC Filename * _inCKD07vNOt(char const *param0);
EXPORT_FUNC Filename * _inCKD07bJPp(Filename const *param0);
EXPORT_FUNC Filename * _inCKD07Ph6h(char const *param0);
EXPORT_FUNC Filename * _inCKD07CpRv(char const *param0);
EXPORT_FUNC Filename * _inCKD07Ns6u(char const *param0);
EXPORT_FUNC Filename * _inCKD07xSOe(char const *param0);
EXPORT_FUNC Filename * _inCKD07aIaB(char const *param0, Filename::Type param1);
EXPORT_FUNC Filename * _inCKD07Evxv(char const *param0);
EXPORT_FUNC Filename * _inCKD07OwIH(wchar_t const *param0, Filename::Type param1);
EXPORT_FUNC Filename * _inCKD07Vnxx(wchar_t const *param0);
EXPORT_FUNC Filename * _inCKD07SufR(char const *param0, Filename::Type param1);
EXPORT_FUNC Filename * _inCKD07BIso(char const *param0);
EXPORT_FUNC Filename * _inCKD07Wnrq(char const *param0, char const *param1, char const *param2, Filename::Type param3);
EXPORT_FUNC Filename * _inCKD07kS5B(char const *param0, char const *param1, char const *param2);
EXPORT_FUNC Filename * _inCKD07wIqG(char const *param0, char const *param1);
EXPORT_FUNC Filename const * _inCKD07f_0B();
EXPORT_FUNC Filename const * _inCKD07eDx2();
EXPORT_FUNC Filename const * _inCKD074CLy();
EXPORT_FUNC Filename const * _inCKD07w0eY();
EXPORT_FUNC Filename * _inCKD07UZ8w(Filename *param0, Filename *param1);
EXPORT_FUNC Filename * _inCKD07e4GP(Filename *param0, Filename const *param1);
EXPORT_FUNC Filename * _inCKD07An_g(Filename *param0, char const *param1);
EXPORT_FUNC Filename * _inCKD07AEbr(Filename *param0, char const *param1);
EXPORT_FUNC Filename * _inCKD07wt4w(Filename *param0, wchar_t const *param1);
EXPORT_FUNC char const * _inCKD07CFZV(Filename const *param0);
EXPORT_FUNC char const * _inCKD07myvU(Filename const *param0);
EXPORT_FUNC bool _inCKD07OFzc(Filename const *param0);
EXPORT_FUNC std::size_t _inCKD07gE4s(Filename const *param0);
EXPORT_FUNC char _inCKD07PYDQ(Filename const *param0, std::size_t param1);
EXPORT_FUNC char const * _inCKD07IKWA(Filename const *param0, std::size_t param1);
EXPORT_FUNC char const * _inCKD07XWsr(Filename const *param0, std::size_t param1, std::size_t param2);
EXPORT_FUNC Filename * _inCKD07_CCc(Filename *param0, char const *param1);
EXPORT_FUNC Filename * _inCKD07dG6k(Filename const *param0, char const *param1);
EXPORT_FUNC Filename * _inCKD07pD3m(Filename const *param0, Filename const *param1);
EXPORT_FUNC char const * _inCKD07FzJX(Filename const *param0);
EXPORT_FUNC wchar_t const * _inCKD07EfKG(Filename const *param0);
EXPORT_FUNC char const * _inCKD07nZLo(Filename const *param0);
EXPORT_FUNC char const * _inCKD07dGTD(Filename const *param0);
EXPORT_FUNC char const * _inCKD07pN0c(Filename const *param0);
EXPORT_FUNC char const * _inCKD07Ni_I(Filename const *param0);
EXPORT_FUNC char const * _inCKD07_MQ8(Filename const *param0);
EXPORT_FUNC void _inCKD07iBlJ(Filename *param0, char const *param1);
EXPORT_FUNC void _inCKD07MTmS(Filename *param0, char const *param1);
EXPORT_FUNC void _inCKD07nzu1(Filename *param0, char const *param1);
EXPORT_FUNC void _inCKD078yGI(Filename *param0, char const *param1);
EXPORT_FUNC void _inCKD07VNQ0(Filename *param0, char const *param1);
EXPORT_FUNC void _inCKD07dpGv(Filename *param0, char const *param1);
EXPORT_FUNC void _inCKD07K9mc(Filename *param0);
EXPORT_FUNC void _inCKD07Bixh(Filename *param0);
EXPORT_FUNC bool _inCKD07nswQ(Filename const *param0);
EXPORT_FUNC bool _inCKD07f3Vw(Filename const *param0);
EXPORT_FUNC bool _inCKD07OiJI(Filename const *param0);
EXPORT_FUNC void _inCKD07c7yW(Filename *param0, Filename::Type param1);
EXPORT_FUNC Filename::Type _inCKD07ELir(Filename const *param0);
EXPORT_FUNC void _inCKD070_BT(Filename *param0, bool param1);
EXPORT_FUNC bool _inCKD07Jg4Y(Filename const *param0);
EXPORT_FUNC bool _inCKD07NmUz(Filename const *param0);
EXPORT_FUNC Filename * _inCKD07q4gP(Filename const *param0, int param1);
EXPORT_FUNC char const * _inCKD074SYs(Filename const *param0);
EXPORT_FUNC void _inCKD07pC53(Filename *param0, char const *param1);
EXPORT_FUNC void _inCKD07Mo1r(Filename const *param0, vector_string *param1);
EXPORT_FUNC void _inCKD07MUbk(Filename *param0);
EXPORT_FUNC bool _inCKD07GI_b(Filename const *param0);
EXPORT_FUNC bool _inCKD07tIAk(Filename const *param0);
EXPORT_FUNC void _inCKD07_eKM(Filename *param0);
EXPORT_FUNC void _inCKD07udOz(Filename *param0, Filename const *param1);
EXPORT_FUNC bool _inCKD07twJA(Filename *param0);
EXPORT_FUNC bool _inCKD07X1o1(Filename *param0);
EXPORT_FUNC char const * _inCKD07HThn(Filename const *param0);
EXPORT_FUNC wchar_t const * _inCKD07mUcX(Filename const *param0);
EXPORT_FUNC char const * _inCKD07T7Xd(Filename const *param0);
EXPORT_FUNC char const * _inCKD07XTVO(Filename const *param0);
EXPORT_FUNC char const * _inCKD07o4Sv(Filename const *param0);
EXPORT_FUNC bool _inCKD07Xz2_(Filename const *param0);
EXPORT_FUNC bool _inCKD074vqn(Filename const *param0);
EXPORT_FUNC bool _inCKD07ahKY(Filename const *param0);
EXPORT_FUNC bool _inCKD07ADlT(Filename const *param0);
EXPORT_FUNC bool _inCKD07dwcX(Filename const *param0);
EXPORT_FUNC int _inCKD07QRcf(Filename const *param0, Filename const *param1, bool param2, bool param3);
EXPORT_FUNC int _inCKD07ihlq(Filename const *param0, Filename const *param1, bool param2);
EXPORT_FUNC int _inCKD073wx_(Filename const *param0, Filename const *param1);
EXPORT_FUNC time_t _inCKD07KJyF(Filename const *param0);
EXPORT_FUNC time_t _inCKD073OVg(Filename const *param0);
EXPORT_FUNC std::streamsize _inCKD07jnXJ(Filename const *param0);
EXPORT_FUNC bool _inCKD07_ktc(Filename *param0, DSearchPath const *param1, char const *param2);
EXPORT_FUNC bool _inCKD07k2zY(Filename *param0, DSearchPath const *param1);
EXPORT_FUNC bool _inCKD07fEHg(Filename *param0, Filename *param1, bool param2);
EXPORT_FUNC bool _inCKD0785oI(Filename *param0, Filename *param1);
EXPORT_FUNC int _inCKD0745N1(Filename *param0, DSearchPath const *param1);
EXPORT_FUNC bool _inCKD071pvM(Filename const *param0, vector_string *param1);
EXPORT_FUNC bool _inCKD07hT0n(Filename const *param0, pifstream *param1);
EXPORT_FUNC bool _inCKD07luH_(Filename const *param0, std::ifstream *param1);
EXPORT_FUNC bool _inCKD0783u8(Filename const *param0, pofstream *param1, bool param2);
EXPORT_FUNC bool _inCKD07RGVH(Filename const *param0, pofstream *param1);
EXPORT_FUNC bool _inCKD07Rfnm(Filename const *param0, std::ofstream *param1, bool param2);
EXPORT_FUNC bool _inCKD07XpRT(Filename const *param0, std::ofstream *param1);
EXPORT_FUNC bool _inCKD07jFAU(Filename const *param0, pofstream *param1);
EXPORT_FUNC bool _inCKD07ttUT(Filename const *param0, std::ofstream *param1);
EXPORT_FUNC bool _inCKD075Jdf(Filename const *param0, pfstream *param1, bool param2);
EXPORT_FUNC bool _inCKD07v_IM(Filename const *param0, pfstream *param1);
EXPORT_FUNC bool _inCKD07mwiS(Filename const *param0, std::fstream *param1, bool param2);
EXPORT_FUNC bool _inCKD07xoXJ(Filename const *param0, std::fstream *param1);
EXPORT_FUNC bool _inCKD07wbx_(Filename const *param0, pfstream *param1);
EXPORT_FUNC bool _inCKD07dXEn(Filename const *param0, std::fstream *param1);
EXPORT_FUNC bool _inCKD07m9kw(Filename const *param0);
EXPORT_FUNC bool _inCKD07Cry9(Filename const *param0);
EXPORT_FUNC bool _inCKD07aMuO(Filename const *param0);
EXPORT_FUNC bool _inCKD07aavz(Filename const *param0, Filename const *param1);
EXPORT_FUNC bool _inCKD07jPPu(Filename const *param0, Filename const *param1);
EXPORT_FUNC bool _inCKD07OOnR(Filename const *param0);
EXPORT_FUNC bool _inCKD07eeq4(Filename const *param0);
EXPORT_FUNC bool _inCKD07CI79(Filename const *param0);
EXPORT_FUNC bool _inCKD07OBrR(Filename const *param0, char const *param1);
EXPORT_FUNC bool _inCKD07sEaR(Filename const *param0, char const *param1);
EXPORT_FUNC bool _inCKD07YSEF(Filename const *param0, char const *param1);
EXPORT_FUNC int _inCKD07wktQ(Filename const *param0, Filename const *param1);
EXPORT_FUNC bool _inCKD07eHUw(Filename const *param0);
EXPORT_FUNC int _inCKD07nnHL(Filename const *param0);
EXPORT_FUNC void _inCKD07gQYS(Filename const *param0, std::ostream *param1);
EXPORT_FUNC void _inCKD07fmrp(TextEncoder::Encoding param0);
EXPORT_FUNC TextEncoder::Encoding _inCKD07KN3I();
EXPORT_FUNC int _inCKD07safE();
EXPORT_FUNC void _inCKD07_r_i();
EXPORT_FUNC PandaFramework * _inCKD07YGdR(WindowFramework const *param0);
EXPORT_FUNC GraphicsWindow * _inCKD07llyB(WindowFramework const *param0);
EXPORT_FUNC GraphicsOutput * _inCKD07aLWw(WindowFramework const *param0);
EXPORT_FUNC NodePath * _inCKD07KUbp(WindowFramework *param0);
EXPORT_FUNC int _inCKD07OQs1(WindowFramework const *param0);
EXPORT_FUNC Camera * _inCKD07Jdpp(WindowFramework const *param0, int param1);
EXPORT_FUNC DisplayRegion * _inCKD07LKl9(WindowFramework const *param0);
EXPORT_FUNC DisplayRegion * _inCKD07VKsL(WindowFramework const *param0);
EXPORT_FUNC NodePath * _inCKD07piA7(WindowFramework *param0);
EXPORT_FUNC NodePath * _inCKD07SEBt(WindowFramework *param0);
EXPORT_FUNC NodePath * _inCKD07eVBf(WindowFramework *param0);
EXPORT_FUNC NodePath * _inCKD07mE42(WindowFramework *param0);
EXPORT_FUNC NodePath * _inCKD079Hqw(WindowFramework *param0);
EXPORT_FUNC NodePath * _inCKD07IxxZ(WindowFramework *param0);
EXPORT_FUNC void _inCKD07Blvn(WindowFramework *param0);
EXPORT_FUNC void _inCKD07MtUh(WindowFramework *param0);
EXPORT_FUNC void _inCKD07a23a(WindowFramework *param0, NodePath const *param1);
EXPORT_FUNC bool _inCKD078CuG(WindowFramework *param0, NodePath const *param1, pvector< Filename > const *param2);
EXPORT_FUNC NodePath * _inCKD07c3x2(WindowFramework *param0, NodePath const *param1, Filename *param2);
EXPORT_FUNC NodePath * _inCKD07NSSi(WindowFramework *param0, NodePath const *param1);
EXPORT_FUNC void _inCKD07YumN(WindowFramework *param0, int param1);
EXPORT_FUNC void _inCKD07Dybn(WindowFramework *param0);
EXPORT_FUNC void _inCKD07aLMj(WindowFramework *param0);
EXPORT_FUNC void _inCKD07shAJ(WindowFramework *param0);
EXPORT_FUNC void _inCKD07GF8O(WindowFramework *param0, bool param1);
EXPORT_FUNC bool _inCKD07sD3B(WindowFramework const *param0);
EXPORT_FUNC void _inCKD078SXt(WindowFramework *param0);
EXPORT_FUNC WindowFramework * _inCKD07jG7H(WindowFramework *param0, WindowFramework::SplitType param1);
EXPORT_FUNC WindowFramework * _inCKD07jmfa(WindowFramework *param0);
EXPORT_FUNC void _inCKD07CZGB(WindowFramework *param0, bool param1, bool param2);
EXPORT_FUNC void _inCKD07kSnp(WindowFramework *param0, bool param1);
EXPORT_FUNC void _inCKD07a6_v(WindowFramework *param0, bool param1);
EXPORT_FUNC void _inCKD07OTGD(WindowFramework *param0, bool param1);
EXPORT_FUNC void _inCKD07DrUc(WindowFramework *param0, bool param1);
EXPORT_FUNC void _inCKD07uwb_(WindowFramework *param0, bool param1);
EXPORT_FUNC void _inCKD07SqNR(WindowFramework *param0, bool param1);
EXPORT_FUNC void _inCKD07v13J(WindowFramework *param0, WindowFramework::BackgroundType param1);
EXPORT_FUNC bool _inCKD07Se1v(WindowFramework const *param0);
EXPORT_FUNC bool _inCKD07EzZA(WindowFramework const *param0);
EXPORT_FUNC bool _inCKD07VZbH(WindowFramework const *param0);
EXPORT_FUNC bool _inCKD07MZUJ(WindowFramework const *param0);
EXPORT_FUNC bool _inCKD07eADy(WindowFramework const *param0);
EXPORT_FUNC bool _inCKD07GGkv(WindowFramework const *param0);
EXPORT_FUNC bool _inCKD07SlWB(WindowFramework const *param0);
EXPORT_FUNC WindowFramework::BackgroundType _inCKD07UJm4(WindowFramework const *param0);
EXPORT_FUNC TextFont * _inCKD07kcq_();
EXPORT_FUNC NodePath * _inCKD07CIRR(WindowFramework *param0);
EXPORT_FUNC int _inCKD07O0fX();
EXPORT_FUNC void _inCKD072D1X();
EXPORT_FUNC int _inCKD07vhbO(WindowFramework const *param0);
EXPORT_FUNC int _inCKD07i4Rg(WindowFramework *param0);
EXPORT_FUNC WindowFramework * _inCKD07p5TH(WindowFramework const *param0);
EXPORT_FUNC void _inCKD07GFAU(NP *param0, NodePath const *param1);
EXPORT_FUNC NP * _inCKD07mL0u();
EXPORT_FUNC NP * _inCKD07SP8X(NP const *param0);
EXPORT_FUNC Engine * _inCKD07a_qA();
EXPORT_FUNC Engine * _inCKD074GrH(Engine const *param0);
EXPORT_FUNC int _inCKD07RIEu(Engine *param0);
EXPORT_FUNC int _inCKD07u07o(Engine *param0, int param1, char const *param2, bool param3);
EXPORT_FUNC NodePath * _inCKD07FoZ4(Engine *param0, char const *param1);
EXPORT_FUNC void _inCKD073rLd(Engine *param0, NodePath *param1);
EXPORT_FUNC void _inCKD07B_Fq(Engine *param0);
EXPORT_FUNC void _inCKD07MIC_(Engine *param0);
EXPORT_FUNC char const * _inCKD07cpk6();
EXPORT_FUNC PointerTo< WindowFramework > const * _inCKD074rrc(Engine const *param0);
EXPORT_FUNC PandaFramework * _inCKD07Hww4(Engine const *param0);
EXPORT_FUNC void _inCKD07bucf(Engine *param0, PandaFramework *param1);
EXPORT_FUNC int _inCKD07auEK();
EXPORT_FUNC void _inCKD07uA06();
EXPORT_FUNC void _inCKD07nI9S();
EXPORT_FUNC void _inCKD07_8Jg(int param0);


/*
 * C wrapper for
 * inline Filename::Filename(void)
 */
Filename *
_inCKD07zHmO() {
  return new Filename();
}

/*
 * C wrapper for
 * inline Filename::Filename(Filename &&from) noexcept
 */
Filename *
_inCKD07TAyl(Filename *param0) {
  return new Filename(*param0);
}

/*
 * C wrapper for
 * inline Filename::Filename(Filename const &copy)
 */
Filename *
_inCKD070xIC(Filename const *param0) {
  return new Filename(*param0);
}

/*
 * C wrapper for
 * Filename::Filename(Filename const &dirname, Filename const &basename)
 */
Filename *
_inCKD07z3ik(Filename const *param0, Filename const *param1) {
  return new Filename(*param0, *param1);
}

/*
 * C wrapper for
 * inline Filename::Filename(char const *filename)
 */
Filename *
_inCKD07YS9H(char const *param0) {
  return new Filename(param0);
}

/*
 * C wrapper for
 * inline Filename::Filename(std::string const &filename)
 */
Filename *
_inCKD07ygg9(char const *param0) {
  return new Filename(std::string(param0));
}

/*
 * C wrapper for
 * inline Filename::Filename(std::wstring const &filename)
 */
Filename *
_inCKD07w0Fd(wchar_t const *param0) {
  return new Filename(std::wstring(param0));
}

/*
 * C wrapper for
 * static inline Filename Filename::text_filename(Filename const &filename)
 */
Filename *
_inCKD07C1b2(Filename const *param0) {
  return new Filename(Filename::text_filename(*param0));
}

/*
 * C wrapper for
 * static inline Filename Filename::text_filename(std::string const &filename)
 */
Filename *
_inCKD07vNOt(char const *param0) {
  return new Filename(Filename::text_filename(std::string(param0)));
}

/*
 * C wrapper for
 * static inline Filename Filename::binary_filename(Filename const &filename)
 */
Filename *
_inCKD07bJPp(Filename const *param0) {
  return new Filename(Filename::binary_filename(*param0));
}

/*
 * C wrapper for
 * static inline Filename Filename::binary_filename(std::string const &filename)
 */
Filename *
_inCKD07Ph6h(char const *param0) {
  return new Filename(Filename::binary_filename(std::string(param0)));
}

/*
 * C wrapper for
 * static inline Filename Filename::dso_filename(std::string const &filename)
 */
Filename *
_inCKD07CpRv(char const *param0) {
  return new Filename(Filename::dso_filename(std::string(param0)));
}

/*
 * C wrapper for
 * static inline Filename Filename::executable_filename(std::string const &filename)
 */
Filename *
_inCKD07Ns6u(char const *param0) {
  return new Filename(Filename::executable_filename(std::string(param0)));
}

/*
 * C wrapper for
 * static inline Filename Filename::pattern_filename(std::string const &filename)
 */
Filename *
_inCKD07xSOe(char const *param0) {
  return new Filename(Filename::pattern_filename(std::string(param0)));
}

/*
 * C wrapper for
 * static Filename Filename::from_os_specific(std::string const &os_specific, Filename::Type type)
 */
Filename *
_inCKD07aIaB(char const *param0, Filename::Type param1) {
  return new Filename(Filename::from_os_specific(std::string(param0), param1));
}

/*
 * C wrapper for
 * static Filename Filename::from_os_specific(std::string const &os_specific, Filename::Type type)
 */
Filename *
_inCKD07Evxv(char const *param0) {
  return new Filename(Filename::from_os_specific(std::string(param0)));
}

/*
 * C wrapper for
 * static Filename Filename::from_os_specific_w(std::wstring const &os_specific, Filename::Type type)
 */
Filename *
_inCKD07OwIH(wchar_t const *param0, Filename::Type param1) {
  return new Filename(Filename::from_os_specific_w(std::wstring(param0), param1));
}

/*
 * C wrapper for
 * static Filename Filename::from_os_specific_w(std::wstring const &os_specific, Filename::Type type)
 */
Filename *
_inCKD07Vnxx(wchar_t const *param0) {
  return new Filename(Filename::from_os_specific_w(std::wstring(param0)));
}

/*
 * C wrapper for
 * static Filename Filename::expand_from(std::string const &user_string, Filename::Type type)
 */
Filename *
_inCKD07SufR(char const *param0, Filename::Type param1) {
  return new Filename(Filename::expand_from(std::string(param0), param1));
}

/*
 * C wrapper for
 * static Filename Filename::expand_from(std::string const &user_string, Filename::Type type)
 */
Filename *
_inCKD07BIso(char const *param0) {
  return new Filename(Filename::expand_from(std::string(param0)));
}

/*
 * C wrapper for
 * static Filename Filename::temporary(std::string const &dirname, std::string const &prefix, std::string const &suffix, Filename::Type type)
 */
Filename *
_inCKD07Wnrq(char const *param0, char const *param1, char const *param2, Filename::Type param3) {
  return new Filename(Filename::temporary(std::string(param0), std::string(param1), std::string(param2), param3));
}

/*
 * C wrapper for
 * static Filename Filename::temporary(std::string const &dirname, std::string const &prefix, std::string const &suffix, Filename::Type type)
 */
Filename *
_inCKD07kS5B(char const *param0, char const *param1, char const *param2) {
  return new Filename(Filename::temporary(std::string(param0), std::string(param1), std::string(param2)));
}

/*
 * C wrapper for
 * static Filename Filename::temporary(std::string const &dirname, std::string const &prefix, std::string const &suffix, Filename::Type type)
 */
Filename *
_inCKD07wIqG(char const *param0, char const *param1) {
  return new Filename(Filename::temporary(std::string(param0), std::string(param1)));
}

/*
 * C wrapper for
 * static Filename const &Filename::get_home_directory(void)
 */
Filename const *
_inCKD07f_0B() {
  return &(Filename::get_home_directory());
}

/*
 * C wrapper for
 * static Filename const &Filename::get_temp_directory(void)
 */
Filename const *
_inCKD07eDx2() {
  return &(Filename::get_temp_directory());
}

/*
 * C wrapper for
 * static Filename const &Filename::get_user_appdata_directory(void)
 */
Filename const *
_inCKD074CLy() {
  return &(Filename::get_user_appdata_directory());
}

/*
 * C wrapper for
 * static Filename const &Filename::get_common_appdata_directory(void)
 */
Filename const *
_inCKD07w0eY() {
  return &(Filename::get_common_appdata_directory());
}

/*
 * C wrapper for
 * inline void Filename::operator =(Filename &&from) noexcept
 */
Filename *
_inCKD07UZ8w(Filename *param0, Filename *param1) {
  (*param0).operator =(*param1);
  return param0;
}

/*
 * C wrapper for
 * inline void Filename::operator =(Filename const &copy)
 */
Filename *
_inCKD07e4GP(Filename *param0, Filename const *param1) {
  (*param0).operator =(*param1);
  return param0;
}

/*
 * C wrapper for
 * inline void Filename::operator =(char const *filename)
 */
Filename *
_inCKD07An_g(Filename *param0, char const *param1) {
  (*param0).operator =(param1);
  return param0;
}

/*
 * C wrapper for
 * inline void Filename::operator =(std::string const &filename)
 */
Filename *
_inCKD07AEbr(Filename *param0, char const *param1) {
  (*param0).operator =(std::string(param1));
  return param0;
}

/*
 * C wrapper for
 * inline void Filename::operator =(std::wstring const &filename)
 */
Filename *
_inCKD07wt4w(Filename *param0, wchar_t const *param1) {
  (*param0).operator =(std::wstring(param1));
  return param0;
}

/*
 * C wrapper for
 * inline operator std::string const &(void) const
 */
char const *
_inCKD07CFZV(Filename const *param0) {
  return ((std::string const &)*param0).c_str();
}

/*
 * C wrapper for
 * inline char const *Filename::c_str(void) const
 */
char const *
_inCKD07myvU(Filename const *param0) {
  return (*param0).c_str();
}

/*
 * C wrapper for
 * inline bool Filename::empty(void) const
 */
bool
_inCKD07OFzc(Filename const *param0) {
  return (*param0).empty();
}

/*
 * C wrapper for
 * inline std::size_t Filename::length(void) const
 */
std::size_t
_inCKD07gE4s(Filename const *param0) {
  return (*param0).length();
}

/*
 * C wrapper for
 * inline char Filename::operator [](std::size_t n) const
 */
char
_inCKD07PYDQ(Filename const *param0, std::size_t param1) {
  return (*param0).operator [](param1);
}

/*
 * C wrapper for
 * inline std::string Filename::substr(std::size_t begin) const
 */
char const *
_inCKD07IKWA(Filename const *param0, std::size_t param1) {
  static string string_holder = (*param0).substr(param1);
  return string_holder.c_str();
}

/*
 * C wrapper for
 * inline std::string Filename::substr(std::size_t begin, std::size_t end) const
 */
char const *
_inCKD07XWsr(Filename const *param0, std::size_t param1, std::size_t param2) {
  static string string_holder = (*param0).substr(param1, param2);
  return string_holder.c_str();
}

/*
 * C wrapper for
 * inline void Filename::operator +=(std::string const &other)
 */
Filename *
_inCKD07_CCc(Filename *param0, char const *param1) {
  (*param0).operator +=(std::string(param1));
  return param0;
}

/*
 * C wrapper for
 * inline Filename Filename::operator +(std::string const &other) const
 */
Filename *
_inCKD07dG6k(Filename const *param0, char const *param1) {
  return new Filename((*param0).operator +(std::string(param1)));
}

/*
 * C wrapper for
 * inline Filename Filename::operator /(Filename const &other) const
 */
Filename *
_inCKD07pD3m(Filename const *param0, Filename const *param1) {
  return new Filename((*param0).operator /(*param1));
}

/*
 * C wrapper for
 * inline std::string Filename::get_fullpath(void) const
 */
char const *
_inCKD07FzJX(Filename const *param0) {
  static string string_holder = (*param0).get_fullpath();
  return string_holder.c_str();
}

/*
 * C wrapper for
 * inline std::wstring Filename::get_fullpath_w(void) const
 */
wchar_t const *
_inCKD07EfKG(Filename const *param0) {
  static wstring string_holder = (*param0).get_fullpath_w();
  return string_holder.c_str();
}

/*
 * C wrapper for
 * inline std::string Filename::get_dirname(void) const
 */
char const *
_inCKD07nZLo(Filename const *param0) {
  static string string_holder = (*param0).get_dirname();
  return string_holder.c_str();
}

/*
 * C wrapper for
 * inline std::string Filename::get_basename(void) const
 */
char const *
_inCKD07dGTD(Filename const *param0) {
  static string string_holder = (*param0).get_basename();
  return string_holder.c_str();
}

/*
 * C wrapper for
 * inline std::string Filename::get_fullpath_wo_extension(void) const
 */
char const *
_inCKD07pN0c(Filename const *param0) {
  static string string_holder = (*param0).get_fullpath_wo_extension();
  return string_holder.c_str();
}

/*
 * C wrapper for
 * inline std::string Filename::get_basename_wo_extension(void) const
 */
char const *
_inCKD07Ni_I(Filename const *param0) {
  static string string_holder = (*param0).get_basename_wo_extension();
  return string_holder.c_str();
}

/*
 * C wrapper for
 * inline std::string Filename::get_extension(void) const
 */
char const *
_inCKD07_MQ8(Filename const *param0) {
  static string string_holder = (*param0).get_extension();
  return string_holder.c_str();
}

/*
 * C wrapper for
 * void Filename::set_fullpath(std::string const &s)
 */
void
_inCKD07iBlJ(Filename *param0, char const *param1) {
  (*param0).set_fullpath(std::string(param1));
}

/*
 * C wrapper for
 * void Filename::set_dirname(std::string const &s)
 */
void
_inCKD07MTmS(Filename *param0, char const *param1) {
  (*param0).set_dirname(std::string(param1));
}

/*
 * C wrapper for
 * void Filename::set_basename(std::string const &s)
 */
void
_inCKD07nzu1(Filename *param0, char const *param1) {
  (*param0).set_basename(std::string(param1));
}

/*
 * C wrapper for
 * void Filename::set_fullpath_wo_extension(std::string const &s)
 */
void
_inCKD078yGI(Filename *param0, char const *param1) {
  (*param0).set_fullpath_wo_extension(std::string(param1));
}

/*
 * C wrapper for
 * void Filename::set_basename_wo_extension(std::string const &s)
 */
void
_inCKD07VNQ0(Filename *param0, char const *param1) {
  (*param0).set_basename_wo_extension(std::string(param1));
}

/*
 * C wrapper for
 * void Filename::set_extension(std::string const &s)
 */
void
_inCKD07dpGv(Filename *param0, char const *param1) {
  (*param0).set_extension(std::string(param1));
}

/*
 * C wrapper for
 * inline void Filename::set_binary(void)
 */
void
_inCKD07K9mc(Filename *param0) {
  (*param0).set_binary();
}

/*
 * C wrapper for
 * inline void Filename::set_text(void)
 */
void
_inCKD07Bixh(Filename *param0) {
  (*param0).set_text();
}

/*
 * C wrapper for
 * inline bool Filename::is_binary(void) const
 */
bool
_inCKD07nswQ(Filename const *param0) {
  return (*param0).is_binary();
}

/*
 * C wrapper for
 * inline bool Filename::is_text(void) const
 */
bool
_inCKD07f3Vw(Filename const *param0) {
  return (*param0).is_text();
}

/*
 * C wrapper for
 * inline bool Filename::is_binary_or_text(void) const
 */
bool
_inCKD07OiJI(Filename const *param0) {
  return (*param0).is_binary_or_text();
}

/*
 * C wrapper for
 * inline void Filename::set_type(Filename::Type type)
 */
void
_inCKD07c7yW(Filename *param0, Filename::Type param1) {
  (*param0).set_type(param1);
}

/*
 * C wrapper for
 * inline Filename::Type Filename::get_type(void) const
 */
Filename::Type
_inCKD07ELir(Filename const *param0) {
  return (*param0).get_type();
}

/*
 * C wrapper for
 * inline void Filename::set_pattern(bool pattern)
 */
void
_inCKD070_BT(Filename *param0, bool param1) {
  (*param0).set_pattern(param1);
}

/*
 * C wrapper for
 * inline bool Filename::get_pattern(void) const
 */
bool
_inCKD07Jg4Y(Filename const *param0) {
  return (*param0).get_pattern();
}

/*
 * C wrapper for
 * inline bool Filename::has_hash(void) const
 */
bool
_inCKD07NmUz(Filename const *param0) {
  return (*param0).has_hash();
}

/*
 * C wrapper for
 * Filename Filename::get_filename_index(int index) const
 */
Filename *
_inCKD07q4gP(Filename const *param0, int param1) {
  return new Filename((*param0).get_filename_index(param1));
}

/*
 * C wrapper for
 * inline std::string Filename::get_hash_to_end(void) const
 */
char const *
_inCKD074SYs(Filename const *param0) {
  static string string_holder = (*param0).get_hash_to_end();
  return string_holder.c_str();
}

/*
 * C wrapper for
 * void Filename::set_hash_to_end(std::string const &s)
 */
void
_inCKD07pC53(Filename *param0, char const *param1) {
  (*param0).set_hash_to_end(std::string(param1));
}

/*
 * C wrapper for
 * void Filename::extract_components(vector_string &components) const
 */
void
_inCKD07Mo1r(Filename const *param0, vector_string *param1) {
  (*param0).extract_components(*param1);
}

/*
 * C wrapper for
 * void Filename::standardize(void)
 */
void
_inCKD07MUbk(Filename *param0) {
  (*param0).standardize();
}

/*
 * C wrapper for
 * inline bool Filename::is_local(void) const
 */
bool
_inCKD07GI_b(Filename const *param0) {
  return (*param0).is_local();
}

/*
 * C wrapper for
 * inline bool Filename::is_fully_qualified(void) const
 */
bool
_inCKD07tIAk(Filename const *param0) {
  return (*param0).is_fully_qualified();
}

/*
 * C wrapper for
 * void Filename::make_absolute(void)
 */
void
_inCKD07_eKM(Filename *param0) {
  (*param0).make_absolute();
}

/*
 * C wrapper for
 * void Filename::make_absolute(Filename const &start_directory)
 */
void
_inCKD07udOz(Filename *param0, Filename const *param1) {
  (*param0).make_absolute(*param1);
}

/*
 * C wrapper for
 * bool Filename::make_canonical(void)
 */
bool
_inCKD07twJA(Filename *param0) {
  return (*param0).make_canonical();
}

/*
 * C wrapper for
 * bool Filename::make_true_case(void)
 */
bool
_inCKD07X1o1(Filename *param0) {
  return (*param0).make_true_case();
}

/*
 * C wrapper for
 * std::string Filename::to_os_specific(void) const
 */
char const *
_inCKD07HThn(Filename const *param0) {
  static string string_holder = (*param0).to_os_specific();
  return string_holder.c_str();
}

/*
 * C wrapper for
 * std::wstring Filename::to_os_specific_w(void) const
 */
wchar_t const *
_inCKD07mUcX(Filename const *param0) {
  static wstring string_holder = (*param0).to_os_specific_w();
  return string_holder.c_str();
}

/*
 * C wrapper for
 * std::string Filename::to_os_generic(void) const
 */
char const *
_inCKD07T7Xd(Filename const *param0) {
  static string string_holder = (*param0).to_os_generic();
  return string_holder.c_str();
}

/*
 * C wrapper for
 * std::string Filename::to_os_short_name(void) const
 */
char const *
_inCKD07XTVO(Filename const *param0) {
  static string string_holder = (*param0).to_os_short_name();
  return string_holder.c_str();
}

/*
 * C wrapper for
 * std::string Filename::to_os_long_name(void) const
 */
char const *
_inCKD07o4Sv(Filename const *param0) {
  static string string_holder = (*param0).to_os_long_name();
  return string_holder.c_str();
}

/*
 * C wrapper for
 * bool Filename::exists(void) const
 */
bool
_inCKD07Xz2_(Filename const *param0) {
  return (*param0).exists();
}

/*
 * C wrapper for
 * bool Filename::is_regular_file(void) const
 */
bool
_inCKD074vqn(Filename const *param0) {
  return (*param0).is_regular_file();
}

/*
 * C wrapper for
 * bool Filename::is_writable(void) const
 */
bool
_inCKD07ahKY(Filename const *param0) {
  return (*param0).is_writable();
}

/*
 * C wrapper for
 * bool Filename::is_directory(void) const
 */
bool
_inCKD07ADlT(Filename const *param0) {
  return (*param0).is_directory();
}

/*
 * C wrapper for
 * bool Filename::is_executable(void) const
 */
bool
_inCKD07dwcX(Filename const *param0) {
  return (*param0).is_executable();
}

/*
 * C wrapper for
 * int Filename::compare_timestamps(Filename const &other, bool this_missing_is_old, bool other_missing_is_old) const
 */
int
_inCKD07QRcf(Filename const *param0, Filename const *param1, bool param2, bool param3) {
  return (*param0).compare_timestamps(*param1, param2, param3);
}

/*
 * C wrapper for
 * int Filename::compare_timestamps(Filename const &other, bool this_missing_is_old, bool other_missing_is_old) const
 */
int
_inCKD07ihlq(Filename const *param0, Filename const *param1, bool param2) {
  return (*param0).compare_timestamps(*param1, param2);
}

/*
 * C wrapper for
 * int Filename::compare_timestamps(Filename const &other, bool this_missing_is_old, bool other_missing_is_old) const
 */
int
_inCKD073wx_(Filename const *param0, Filename const *param1) {
  return (*param0).compare_timestamps(*param1);
}

/*
 * C wrapper for
 * time_t Filename::get_timestamp(void) const
 */
time_t
_inCKD07KJyF(Filename const *param0) {
  return (*param0).get_timestamp();
}

/*
 * C wrapper for
 * time_t Filename::get_access_timestamp(void) const
 */
time_t
_inCKD073OVg(Filename const *param0) {
  return (*param0).get_access_timestamp();
}

/*
 * C wrapper for
 * std::streamsize Filename::get_file_size(void) const
 */
std::streamsize
_inCKD07jnXJ(Filename const *param0) {
  return (*param0).get_file_size();
}

/*
 * C wrapper for
 * bool Filename::resolve_filename(DSearchPath const &searchpath, std::string const &default_extension)
 */
bool
_inCKD07_ktc(Filename *param0, DSearchPath const *param1, char const *param2) {
  return (*param0).resolve_filename(*param1, std::string(param2));
}

/*
 * C wrapper for
 * bool Filename::resolve_filename(DSearchPath const &searchpath, std::string const &default_extension)
 */
bool
_inCKD07k2zY(Filename *param0, DSearchPath const *param1) {
  return (*param0).resolve_filename(*param1);
}

/*
 * C wrapper for
 * bool Filename::make_relative_to(Filename directory, bool allow_backups)
 */
bool
_inCKD07fEHg(Filename *param0, Filename *param1, bool param2) {
  return (*param0).make_relative_to(*param1, param2);
}

/*
 * C wrapper for
 * bool Filename::make_relative_to(Filename directory, bool allow_backups)
 */
bool
_inCKD0785oI(Filename *param0, Filename *param1) {
  return (*param0).make_relative_to(*param1);
}

/*
 * C wrapper for
 * int Filename::find_on_searchpath(DSearchPath const &searchpath)
 */
int
_inCKD0745N1(Filename *param0, DSearchPath const *param1) {
  return (*param0).find_on_searchpath(*param1);
}

/*
 * C wrapper for
 * bool Filename::scan_directory(vector_string &contents) const
 */
bool
_inCKD071pvM(Filename const *param0, vector_string *param1) {
  return (*param0).scan_directory(*param1);
}

/*
 * C wrapper for
 * bool Filename::open_read(pifstream &stream) const
 */
bool
_inCKD07hT0n(Filename const *param0, pifstream *param1) {
  return (*param0).open_read(*param1);
}

/*
 * C wrapper for
 * bool Filename::open_read(std::ifstream &stream) const
 */
bool
_inCKD07luH_(Filename const *param0, std::ifstream *param1) {
  return (*param0).open_read(*param1);
}

/*
 * C wrapper for
 * bool Filename::open_write(pofstream &stream, bool truncate) const
 */
bool
_inCKD0783u8(Filename const *param0, pofstream *param1, bool param2) {
  return (*param0).open_write(*param1, param2);
}

/*
 * C wrapper for
 * bool Filename::open_write(pofstream &stream, bool truncate) const
 */
bool
_inCKD07RGVH(Filename const *param0, pofstream *param1) {
  return (*param0).open_write(*param1);
}

/*
 * C wrapper for
 * bool Filename::open_write(std::ofstream &stream, bool truncate) const
 */
bool
_inCKD07Rfnm(Filename const *param0, std::ofstream *param1, bool param2) {
  return (*param0).open_write(*param1, param2);
}

/*
 * C wrapper for
 * bool Filename::open_write(std::ofstream &stream, bool truncate) const
 */
bool
_inCKD07XpRT(Filename const *param0, std::ofstream *param1) {
  return (*param0).open_write(*param1);
}

/*
 * C wrapper for
 * bool Filename::open_append(pofstream &stream) const
 */
bool
_inCKD07jFAU(Filename const *param0, pofstream *param1) {
  return (*param0).open_append(*param1);
}

/*
 * C wrapper for
 * bool Filename::open_append(std::ofstream &stream) const
 */
bool
_inCKD07ttUT(Filename const *param0, std::ofstream *param1) {
  return (*param0).open_append(*param1);
}

/*
 * C wrapper for
 * bool Filename::open_read_write(pfstream &stream, bool truncate) const
 */
bool
_inCKD075Jdf(Filename const *param0, pfstream *param1, bool param2) {
  return (*param0).open_read_write(*param1, param2);
}

/*
 * C wrapper for
 * bool Filename::open_read_write(pfstream &stream, bool truncate) const
 */
bool
_inCKD07v_IM(Filename const *param0, pfstream *param1) {
  return (*param0).open_read_write(*param1);
}

/*
 * C wrapper for
 * bool Filename::open_read_write(std::fstream &stream, bool truncate) const
 */
bool
_inCKD07mwiS(Filename const *param0, std::fstream *param1, bool param2) {
  return (*param0).open_read_write(*param1, param2);
}

/*
 * C wrapper for
 * bool Filename::open_read_write(std::fstream &stream, bool truncate) const
 */
bool
_inCKD07xoXJ(Filename const *param0, std::fstream *param1) {
  return (*param0).open_read_write(*param1);
}

/*
 * C wrapper for
 * bool Filename::open_read_append(pfstream &stream) const
 */
bool
_inCKD07wbx_(Filename const *param0, pfstream *param1) {
  return (*param0).open_read_append(*param1);
}

/*
 * C wrapper for
 * bool Filename::open_read_append(std::fstream &stream) const
 */
bool
_inCKD07dXEn(Filename const *param0, std::fstream *param1) {
  return (*param0).open_read_append(*param1);
}

/*
 * C wrapper for
 * bool Filename::chdir(void) const
 */
bool
_inCKD07m9kw(Filename const *param0) {
  return (*param0).chdir();
}

/*
 * C wrapper for
 * bool Filename::touch(void) const
 */
bool
_inCKD07Cry9(Filename const *param0) {
  return (*param0).touch();
}

/*
 * C wrapper for
 * bool Filename::unlink(void) const
 */
bool
_inCKD07aMuO(Filename const *param0) {
  return (*param0).unlink();
}

/*
 * C wrapper for
 * bool Filename::rename_to(Filename const &other) const
 */
bool
_inCKD07aavz(Filename const *param0, Filename const *param1) {
  return (*param0).rename_to(*param1);
}

/*
 * C wrapper for
 * bool Filename::copy_to(Filename const &other) const
 */
bool
_inCKD07jPPu(Filename const *param0, Filename const *param1) {
  return (*param0).copy_to(*param1);
}

/*
 * C wrapper for
 * bool Filename::make_dir(void) const
 */
bool
_inCKD07OOnR(Filename const *param0) {
  return (*param0).make_dir();
}

/*
 * C wrapper for
 * bool Filename::mkdir(void) const
 */
bool
_inCKD07eeq4(Filename const *param0) {
  return (*param0).mkdir();
}

/*
 * C wrapper for
 * bool Filename::rmdir(void) const
 */
bool
_inCKD07CI79(Filename const *param0) {
  return (*param0).rmdir();
}

/*
 * C wrapper for
 * inline bool Filename::operator ==(std::string const &other) const
 */
bool
_inCKD07OBrR(Filename const *param0, char const *param1) {
  return (*param0).operator ==(std::string(param1));
}

/*
 * C wrapper for
 * inline bool Filename::operator !=(std::string const &other) const
 */
bool
_inCKD07sEaR(Filename const *param0, char const *param1) {
  return (*param0).operator !=(std::string(param1));
}

/*
 * C wrapper for
 * inline bool Filename::operator <(std::string const &other) const
 */
bool
_inCKD07YSEF(Filename const *param0, char const *param1) {
  return (*param0).operator <(std::string(param1));
}

/*
 * C wrapper for
 * inline int Filename::compare_to(Filename const &other) const
 */
int
_inCKD07wktQ(Filename const *param0, Filename const *param1) {
  return (*param0).compare_to(*param1);
}

/*
 * C wrapper for
 * inline bool Filename::__nonzero__(void) const
 */
bool
_inCKD07eHUw(Filename const *param0) {
  return (*param0).__nonzero__();
}

/*
 * C wrapper for
 * int Filename::get_hash(void) const
 */
int
_inCKD07nnHL(Filename const *param0) {
  return (*param0).get_hash();
}

/*
 * C wrapper for
 * inline void Filename::output(std::ostream &out) const
 */
void
_inCKD07gQYS(Filename const *param0, std::ostream *param1) {
  (*param0).output(*param1);
}

/*
 * C wrapper for
 * static inline void Filename::set_filesystem_encoding(TextEncoder::Encoding encoding)
 */
void
_inCKD07fmrp(TextEncoder::Encoding param0) {
  Filename::set_filesystem_encoding(param0);
}

/*
 * C wrapper for
 * static inline TextEncoder::Encoding Filename::get_filesystem_encoding(void)
 */
TextEncoder::Encoding
_inCKD07KN3I() {
  return Filename::get_filesystem_encoding();
}

/*
 * C wrapper for
 * static TypeHandle Filename::get_class_type(void)
 */
int
_inCKD07safE() {
  return (Filename::get_class_type()).get_index();
}

/*
 * C wrapper for
 * static void Filename::init_type(void)
 */
void
_inCKD07_r_i() {
  Filename::init_type();
}

/*
 * C wrapper for
 * inline PandaFramework *WindowFramework::get_panda_framework(void) const
 */
PandaFramework *
_inCKD07YGdR(WindowFramework const *param0) {
  return (*param0).get_panda_framework();
}

/*
 * C wrapper for
 * inline GraphicsWindow *WindowFramework::get_graphics_window(void) const
 */
GraphicsWindow *
_inCKD07llyB(WindowFramework const *param0) {
  return (*param0).get_graphics_window();
}

/*
 * C wrapper for
 * inline GraphicsOutput *WindowFramework::get_graphics_output(void) const
 */
GraphicsOutput *
_inCKD07aLWw(WindowFramework const *param0) {
  return (*param0).get_graphics_output();
}

/*
 * C wrapper for
 * NodePath WindowFramework::get_camera_group(void)
 */
NodePath *
_inCKD07KUbp(WindowFramework *param0) {
  return new NodePath((*param0).get_camera_group());
}

/*
 * C wrapper for
 * inline int WindowFramework::get_num_cameras(void) const
 */
int
_inCKD07OQs1(WindowFramework const *param0) {
  return (*param0).get_num_cameras();
}

/*
 * C wrapper for
 * inline Camera *WindowFramework::get_camera(int n) const
 */
Camera *
_inCKD07Jdpp(WindowFramework const *param0, int param1) {
  return (*param0).get_camera(param1);
}

/*
 * C wrapper for
 * inline DisplayRegion *WindowFramework::get_display_region_2d(void) const
 */
DisplayRegion *
_inCKD07LKl9(WindowFramework const *param0) {
  return (*param0).get_display_region_2d();
}

/*
 * C wrapper for
 * inline DisplayRegion *WindowFramework::get_display_region_3d(void) const
 */
DisplayRegion *
_inCKD07VKsL(WindowFramework const *param0) {
  return (*param0).get_display_region_3d();
}

/*
 * C wrapper for
 * NodePath WindowFramework::get_render(void)
 */
NodePath *
_inCKD07piA7(WindowFramework *param0) {
  return new NodePath((*param0).get_render());
}

/*
 * C wrapper for
 * NodePath WindowFramework::get_render_2d(void)
 */
NodePath *
_inCKD07SEBt(WindowFramework *param0) {
  return new NodePath((*param0).get_render_2d());
}

/*
 * C wrapper for
 * NodePath WindowFramework::get_aspect_2d(void)
 */
NodePath *
_inCKD07eVBf(WindowFramework *param0) {
  return new NodePath((*param0).get_aspect_2d());
}

/*
 * C wrapper for
 * NodePath WindowFramework::get_pixel_2d(void)
 */
NodePath *
_inCKD07mE42(WindowFramework *param0) {
  return new NodePath((*param0).get_pixel_2d());
}

/*
 * C wrapper for
 * NodePath WindowFramework::get_mouse(void)
 */
NodePath *
_inCKD079Hqw(WindowFramework *param0) {
  return new NodePath((*param0).get_mouse());
}

/*
 * C wrapper for
 * NodePath WindowFramework::get_button_thrower(void)
 */
NodePath *
_inCKD07IxxZ(WindowFramework *param0) {
  return new NodePath((*param0).get_button_thrower());
}

/*
 * C wrapper for
 * void WindowFramework::enable_keyboard(void)
 */
void
_inCKD07Blvn(WindowFramework *param0) {
  (*param0).enable_keyboard();
}

/*
 * C wrapper for
 * void WindowFramework::setup_trackball(void)
 */
void
_inCKD07MtUh(WindowFramework *param0) {
  (*param0).setup_trackball();
}

/*
 * C wrapper for
 * void WindowFramework::center_trackball(NodePath const &object)
 */
void
_inCKD07a23a(WindowFramework *param0, NodePath const *param1) {
  (*param0).center_trackball(*param1);
}

/*
 * C wrapper for
 * bool WindowFramework::load_models(NodePath const &parent, pvector< Filename > const &files)
 */
bool
_inCKD078CuG(WindowFramework *param0, NodePath const *param1, pvector< Filename > const *param2) {
  return (*param0).load_models(*param1, *param2);
}

/*
 * C wrapper for
 * NodePath WindowFramework::load_model(NodePath const &parent, Filename filename)
 */
NodePath *
_inCKD07c3x2(WindowFramework *param0, NodePath const *param1, Filename *param2) {
  return new NodePath((*param0).load_model(*param1, *param2));
}

/*
 * C wrapper for
 * NodePath WindowFramework::load_default_model(NodePath const &parent)
 */
NodePath *
_inCKD07NSSi(WindowFramework *param0, NodePath const *param1) {
  return new NodePath((*param0).load_default_model(*param1));
}

/*
 * C wrapper for
 * void WindowFramework::loop_animations(int hierarchy_match_flags)
 */
void
_inCKD07YumN(WindowFramework *param0, int param1) {
  (*param0).loop_animations(param1);
}

/*
 * C wrapper for
 * void WindowFramework::loop_animations(int hierarchy_match_flags)
 */
void
_inCKD07Dybn(WindowFramework *param0) {
  (*param0).loop_animations();
}

/*
 * C wrapper for
 * void WindowFramework::stagger_animations(void)
 */
void
_inCKD07aLMj(WindowFramework *param0) {
  (*param0).stagger_animations();
}

/*
 * C wrapper for
 * void WindowFramework::next_anim_control(void)
 */
void
_inCKD07shAJ(WindowFramework *param0) {
  (*param0).next_anim_control();
}

/*
 * C wrapper for
 * void WindowFramework::set_anim_controls(bool enable)
 */
void
_inCKD07GF8O(WindowFramework *param0, bool param1) {
  (*param0).set_anim_controls(param1);
}

/*
 * C wrapper for
 * inline bool WindowFramework::get_anim_controls(void) const
 */
bool
_inCKD07sD3B(WindowFramework const *param0) {
  return (*param0).get_anim_controls();
}

/*
 * C wrapper for
 * void WindowFramework::adjust_dimensions(void)
 */
void
_inCKD078SXt(WindowFramework *param0) {
  (*param0).adjust_dimensions();
}

/*
 * C wrapper for
 * WindowFramework *WindowFramework::split_window(WindowFramework::SplitType split_type)
 */
WindowFramework *
_inCKD07jG7H(WindowFramework *param0, WindowFramework::SplitType param1) {
  return (*param0).split_window(param1);
}

/*
 * C wrapper for
 * WindowFramework *WindowFramework::split_window(WindowFramework::SplitType split_type)
 */
WindowFramework *
_inCKD07jmfa(WindowFramework *param0) {
  return (*param0).split_window();
}

/*
 * C wrapper for
 * void WindowFramework::set_wireframe(bool enable, bool filled)
 */
void
_inCKD07CZGB(WindowFramework *param0, bool param1, bool param2) {
  (*param0).set_wireframe(param1, param2);
}

/*
 * C wrapper for
 * void WindowFramework::set_wireframe(bool enable, bool filled)
 */
void
_inCKD07kSnp(WindowFramework *param0, bool param1) {
  (*param0).set_wireframe(param1);
}

/*
 * C wrapper for
 * void WindowFramework::set_texture(bool enable)
 */
void
_inCKD07a6_v(WindowFramework *param0, bool param1) {
  (*param0).set_texture(param1);
}

/*
 * C wrapper for
 * void WindowFramework::set_two_sided(bool enable)
 */
void
_inCKD07OTGD(WindowFramework *param0, bool param1) {
  (*param0).set_two_sided(param1);
}

/*
 * C wrapper for
 * void WindowFramework::set_one_sided_reverse(bool enable)
 */
void
_inCKD07DrUc(WindowFramework *param0, bool param1) {
  (*param0).set_one_sided_reverse(param1);
}

/*
 * C wrapper for
 * void WindowFramework::set_lighting(bool enable)
 */
void
_inCKD07uwb_(WindowFramework *param0, bool param1) {
  (*param0).set_lighting(param1);
}

/*
 * C wrapper for
 * void WindowFramework::set_perpixel(bool enable)
 */
void
_inCKD07SqNR(WindowFramework *param0, bool param1) {
  (*param0).set_perpixel(param1);
}

/*
 * C wrapper for
 * void WindowFramework::set_background_type(WindowFramework::BackgroundType type)
 */
void
_inCKD07v13J(WindowFramework *param0, WindowFramework::BackgroundType param1) {
  (*param0).set_background_type(param1);
}

/*
 * C wrapper for
 * inline bool WindowFramework::get_wireframe(void) const
 */
bool
_inCKD07Se1v(WindowFramework const *param0) {
  return (*param0).get_wireframe();
}

/*
 * C wrapper for
 * inline bool WindowFramework::get_wireframe_filled(void) const
 */
bool
_inCKD07EzZA(WindowFramework const *param0) {
  return (*param0).get_wireframe_filled();
}

/*
 * C wrapper for
 * inline bool WindowFramework::get_texture(void) const
 */
bool
_inCKD07VZbH(WindowFramework const *param0) {
  return (*param0).get_texture();
}

/*
 * C wrapper for
 * inline bool WindowFramework::get_two_sided(void) const
 */
bool
_inCKD07MZUJ(WindowFramework const *param0) {
  return (*param0).get_two_sided();
}

/*
 * C wrapper for
 * inline bool WindowFramework::get_one_sided_reverse(void) const
 */
bool
_inCKD07eADy(WindowFramework const *param0) {
  return (*param0).get_one_sided_reverse();
}

/*
 * C wrapper for
 * inline bool WindowFramework::get_lighting(void) const
 */
bool
_inCKD07GGkv(WindowFramework const *param0) {
  return (*param0).get_lighting();
}

/*
 * C wrapper for
 * inline bool WindowFramework::get_perpixel(void) const
 */
bool
_inCKD07SlWB(WindowFramework const *param0) {
  return (*param0).get_perpixel();
}

/*
 * C wrapper for
 * inline WindowFramework::BackgroundType WindowFramework::get_background_type(void) const
 */
WindowFramework::BackgroundType
_inCKD07UJm4(WindowFramework const *param0) {
  return (*param0).get_background_type();
}

/*
 * C wrapper for
 * static TextFont *WindowFramework::get_shuttle_controls_font(void)
 */
TextFont *
_inCKD07kcq_() {
  return WindowFramework::get_shuttle_controls_font();
}

/*
 * C wrapper for
 * NodePath WindowFramework::make_camera(void)
 */
NodePath *
_inCKD07CIRR(WindowFramework *param0) {
  return new NodePath((*param0).make_camera());
}

/*
 * C wrapper for
 * static TypeHandle WindowFramework::get_class_type(void)
 */
int
_inCKD07O0fX() {
  return (WindowFramework::get_class_type()).get_index();
}

/*
 * C wrapper for
 * static void WindowFramework::init_type(void)
 */
void
_inCKD072D1X() {
  WindowFramework::init_type();
}

/*
 * C wrapper for
 * virtual TypeHandle WindowFramework::get_type(void) const
 */
int
_inCKD07vhbO(WindowFramework const *param0) {
  return ((*param0).get_type()).get_index();
}

/*
 * C wrapper for
 * virtual TypeHandle WindowFramework::force_init_type(void)
 */
int
_inCKD07i4Rg(WindowFramework *param0) {
  return ((*param0).force_init_type()).get_index();
}

/*
 * C wrapper for
 * inline WindowFramework::WindowFramework(WindowFramework const &) = default
 */
WindowFramework *
_inCKD07p5TH(WindowFramework const *param0) {
  return new WindowFramework(*param0);
}

/*
 * C wrapper for
 * void NP::reparent_to(NodePath const &other)
 */
void
_inCKD07GFAU(NP *param0, NodePath const *param1) {
  (*param0).reparent_to(*param1);
}

/*
 * C wrapper for
 * inline NP::NP(void) = default
 */
NP *
_inCKD07mL0u() {
  return new NP();
}

/*
 * C wrapper for
 * inline NP::NP(NP const &) = default
 */
NP *
_inCKD07SP8X(NP const *param0) {
  return new NP(*param0);
}

/*
 * C wrapper for
 * Engine::Engine(void)
 */
Engine *
_inCKD07a_qA() {
  return new Engine();
}

/*
 * C wrapper for
 * inline Engine::Engine(Engine const &) = default
 */
Engine *
_inCKD074GrH(Engine const *param0) {
  return new Engine(*param0);
}

/*
 * C wrapper for
 * int Engine::HelloEngine(void)
 */
int
_inCKD07RIEu(Engine *param0) {
  return (*param0).HelloEngine();
}

/*
 * C wrapper for
 * int Engine::casetest(int i, std::string s, bool b)
 */
int
_inCKD07u07o(Engine *param0, int param1, char const *param2, bool param3) {
  return (*param0).casetest(param1, std::string(param2), param3);
}

/*
 * C wrapper for
 * NodePath *Engine::load_model(char const *filename)
 */
NodePath *
_inCKD07FoZ4(Engine *param0, char const *param1) {
  return (*param0).load_model(param1);
}

/*
 * C wrapper for
 * void Engine::attach(NodePath *mdl)
 */
void
_inCKD073rLd(Engine *param0, NodePath *param1) {
  (*param0).attach(param1);
}

/*
 * C wrapper for
 * void Engine::build(void)
 */
void
_inCKD07B_Fq(Engine *param0) {
  (*param0).build();
}

/*
 * C wrapper for
 * void Engine::step(void)
 */
void
_inCKD07MIC_(Engine *param0) {
  (*param0).step();
}

/*
 * C wrapper for
 * static std::string Engine::get_version_string(void)
 */
char const *
_inCKD07cpk6() {
  static string string_holder = Engine::get_version_string();
  return string_holder.c_str();
}

/*
 * C wrapper for
 * PointerTo< WindowFramework > const &Engine::get_wframe(void) const
 */
PointerTo< WindowFramework > const *
_inCKD074rrc(Engine const *param0) {
  return &((param0)->wframe);
}

/*
 * C wrapper for
 * PandaFramework *Engine::get_framework(void) const
 */
PandaFramework *
_inCKD07Hww4(Engine const *param0) {
  return (param0)->framework;
}

/*
 * C wrapper for
 * void Engine::set_framework(PandaFramework *value)
 */
void
_inCKD07bucf(Engine *param0, PandaFramework *param1) {
  (param0)->framework = param1;
}

/*
 * C wrapper for
 * int check_timer(void)
 */
int
_inCKD07auEK() {
  return ::check_timer();
}

/*
 * C wrapper for
 * void emscripten_cancel_main_loop(void)
 */
void
_inCKD07uA06() {
  ::emscripten_cancel_main_loop();
}

/*
 * C wrapper for
 * void main_loop_or_step(void)
 */
void
_inCKD07nI9S() {
  ::main_loop_or_step();
}

/*
 * C wrapper for
 * void emscripten_force_exit(int status)
 */
void
_inCKD07_8Jg(int param0) {
  ::emscripten_force_exit(param0);
}


static InterrogateModuleDef _in_module_def = {
  1566761338,  /* file_identifier */
  "lib",  /* library_name */
  "KD07",  /* library_hash_name */
  "lib",  /* module_name */
  "interrogate.in",  /* database_filename */
  nullptr,  /* unique_names */
  0,  /* num_unique_names */
  nullptr,  /* fptrs */
  0,  /* num_fptrs */
  1,  /* first_index */
  473  /* next_index */
};

Configure(_in_configure_lib);
ConfigureFn(_in_configure_lib) {
  interrogate_request_module(&_in_module_def);
}

