/*
 * This file was generated by:
 * interrogate -promiscuous -string -c -fnames -v -S/usr/local/include/panda3d/include/parser-inc -S/usr/local/include/panda3d/include/ -S/usr/local/include -S/usr/include -S/usr/include/x86_64-linux-gnu -srcdir . -oc interrogate_temp.cpp -od interrogate.in -module lib -library lib -nomangle -DINTERROGATE -DCPPPARSER -D__STDC__=1 -D__cplusplus=201103L -D__attribute__\(x\)= -D__i386__ ./lib.h ./lib.cxx ./em.h
 *
 */

#include "dtoolbase.h"
#include "interrogate_request.h"
#include "dconfig.h"
#include <sstream>

#include "./em.h"
#include "./lib.h"
#include "dconfig.h"
#include <dlfcn.h>
#include "dtoolbase.h"
#include "em.h"
#include <iostream>
#include "lib.h"
#include "notifyCategoryProxy.h"
#include "pandaFramework.h"
#include "pandaSystem.h"
#include "pandabase.h"


#if __GNUC__ >= 4
#define EXPORT_FUNC extern "C" __attribute__((used, visibility("default")))
#else
#define EXPORT_FUNC extern "C"
#endif

EXPORT_FUNC Filename * Filename_C_ctor_p_v();
EXPORT_FUNC Filename * Filename_C_ctor_p_p(Filename *param0);
EXPORT_FUNC Filename * Filename_C_ctor_1_p_p(Filename const *param0);
EXPORT_FUNC Filename * Filename_C_ctor_p_pp(Filename const *param0, Filename const *param1);
EXPORT_FUNC Filename * Filename_C_ctor_p_s(char const *param0);
EXPORT_FUNC Filename * Filename_C_ctor_2_p_p(char const *param0);
EXPORT_FUNC Filename * Filename_C_ctor_3_p_p(wchar_t const *param0);
EXPORT_FUNC Filename * Filename_C_text_filename_p_pp(Filename const *param0);
EXPORT_FUNC Filename * Filename_C_text_filename_p_sp(char const *param0);
EXPORT_FUNC Filename * Filename_C_binary_filename_p_pp(Filename const *param0);
EXPORT_FUNC Filename * Filename_C_binary_filename_p_sp(char const *param0);
EXPORT_FUNC Filename * Filename_C_dso_filename_p_sp(char const *param0);
EXPORT_FUNC Filename * Filename_C_executable_filename_p_sp(char const *param0);
EXPORT_FUNC Filename * Filename_C_pattern_filename_p_sp(char const *param0);
EXPORT_FUNC Filename * Filename_C_from_os_specific_p_spp(char const *param0, Filename::Type param1);
EXPORT_FUNC Filename * Filename_C_from_os_specific_1_p_spp(char const *param0);
EXPORT_FUNC Filename * Filename_C_from_os_specific_w_p_ppp(wchar_t const *param0, Filename::Type param1);
EXPORT_FUNC Filename * Filename_C_from_os_specific_w_1_p_ppp(wchar_t const *param0);
EXPORT_FUNC Filename * Filename_C_expand_from_p_spp(char const *param0, Filename::Type param1);
EXPORT_FUNC Filename * Filename_C_expand_from_1_p_spp(char const *param0);
EXPORT_FUNC Filename * Filename_C_temporary_p_spppp(char const *param0, char const *param1, char const *param2, Filename::Type param3);
EXPORT_FUNC Filename * Filename_C_temporary_1_p_spppp(char const *param0, char const *param1, char const *param2);
EXPORT_FUNC Filename * Filename_C_temporary_2_p_spppp(char const *param0, char const *param1);
EXPORT_FUNC Filename const * Filename_C_get_home_directory_p_v();
EXPORT_FUNC Filename const * Filename_C_get_temp_directory_p_v();
EXPORT_FUNC Filename const * Filename_C_get_user_appdata_directory_p_v();
EXPORT_FUNC Filename const * Filename_C_get_common_appdata_directory_p_v();
EXPORT_FUNC Filename * _inCKD07UZ8w(Filename *param0, Filename *param1);
EXPORT_FUNC Filename * _inCKD07e4GP(Filename *param0, Filename const *param1);
EXPORT_FUNC Filename * _inCKD07An_g(Filename *param0, char const *param1);
EXPORT_FUNC Filename * _inCKD07AEbr(Filename *param0, char const *param1);
EXPORT_FUNC Filename * _inCKD07wt4w(Filename *param0, wchar_t const *param1);
EXPORT_FUNC char const * _s_p(Filename const *param0);
EXPORT_FUNC char const * Filename_C_c_str_s_p(Filename const *param0);
EXPORT_FUNC bool Filename_C_empty_B_p(Filename const *param0);
EXPORT_FUNC std::size_t Filename_C_length_p_p(Filename const *param0);
EXPORT_FUNC char _inCKD07PYDQ(Filename const *param0, std::size_t param1);
EXPORT_FUNC char const * Filename_C_substr_s_pp(Filename const *param0, std::size_t param1);
EXPORT_FUNC char const * Filename_C_substr_s_ppp(Filename const *param0, std::size_t param1, std::size_t param2);
EXPORT_FUNC Filename * _inCKD07_CCc(Filename *param0, char const *param1);
EXPORT_FUNC Filename * _inCKD07dG6k(Filename const *param0, char const *param1);
EXPORT_FUNC Filename * _inCKD07pD3m(Filename const *param0, Filename const *param1);
EXPORT_FUNC char const * Filename_C_get_fullpath_s_p(Filename const *param0);
EXPORT_FUNC wchar_t const * Filename_C_get_fullpath_w_p_p(Filename const *param0);
EXPORT_FUNC char const * Filename_C_get_dirname_s_p(Filename const *param0);
EXPORT_FUNC char const * Filename_C_get_basename_s_p(Filename const *param0);
EXPORT_FUNC char const * Filename_C_get_fullpath_wo_extension_s_p(Filename const *param0);
EXPORT_FUNC char const * Filename_C_get_basename_wo_extension_s_p(Filename const *param0);
EXPORT_FUNC char const * Filename_C_get_extension_s_p(Filename const *param0);
EXPORT_FUNC void Filename_C_set_fullpath_v_pp(Filename *param0, char const *param1);
EXPORT_FUNC void Filename_C_set_dirname_v_pp(Filename *param0, char const *param1);
EXPORT_FUNC void Filename_C_set_basename_v_pp(Filename *param0, char const *param1);
EXPORT_FUNC void Filename_C_set_fullpath_wo_extension_v_pp(Filename *param0, char const *param1);
EXPORT_FUNC void Filename_C_set_basename_wo_extension_v_pp(Filename *param0, char const *param1);
EXPORT_FUNC void Filename_C_set_extension_v_pp(Filename *param0, char const *param1);
EXPORT_FUNC void Filename_C_set_binary_v_p(Filename *param0);
EXPORT_FUNC void Filename_C_set_text_v_p(Filename *param0);
EXPORT_FUNC bool Filename_C_is_binary_B_p(Filename const *param0);
EXPORT_FUNC bool Filename_C_is_text_B_p(Filename const *param0);
EXPORT_FUNC bool Filename_C_is_binary_or_text_B_p(Filename const *param0);
EXPORT_FUNC void Filename_C_set_type_v_pp(Filename *param0, Filename::Type param1);
EXPORT_FUNC Filename::Type Filename_C_get_type_p_p(Filename const *param0);
EXPORT_FUNC void Filename_C_set_pattern_v_pB(Filename *param0, bool param1);
EXPORT_FUNC bool Filename_C_get_pattern_B_p(Filename const *param0);
EXPORT_FUNC bool Filename_C_has_hash_B_p(Filename const *param0);
EXPORT_FUNC Filename * Filename_C_get_filename_index_p_pi(Filename const *param0, int param1);
EXPORT_FUNC char const * Filename_C_get_hash_to_end_s_p(Filename const *param0);
EXPORT_FUNC void Filename_C_set_hash_to_end_v_pp(Filename *param0, char const *param1);
EXPORT_FUNC void Filename_C_extract_components_v_pp(Filename const *param0, vector_string *param1);
EXPORT_FUNC void Filename_C_standardize_v_p(Filename *param0);
EXPORT_FUNC bool Filename_C_is_local_B_p(Filename const *param0);
EXPORT_FUNC bool Filename_C_is_fully_qualified_B_p(Filename const *param0);
EXPORT_FUNC void Filename_C_make_absolute_v_p(Filename *param0);
EXPORT_FUNC void Filename_C_make_absolute_v_pp(Filename *param0, Filename const *param1);
EXPORT_FUNC bool Filename_C_make_canonical_B_p(Filename *param0);
EXPORT_FUNC bool Filename_C_make_true_case_B_p(Filename *param0);
EXPORT_FUNC char const * Filename_C_to_os_specific_s_p(Filename const *param0);
EXPORT_FUNC wchar_t const * Filename_C_to_os_specific_w_p_p(Filename const *param0);
EXPORT_FUNC char const * Filename_C_to_os_generic_s_p(Filename const *param0);
EXPORT_FUNC char const * Filename_C_to_os_short_name_s_p(Filename const *param0);
EXPORT_FUNC char const * Filename_C_to_os_long_name_s_p(Filename const *param0);
EXPORT_FUNC bool Filename_C_exists_B_p(Filename const *param0);
EXPORT_FUNC bool Filename_C_is_regular_file_B_p(Filename const *param0);
EXPORT_FUNC bool Filename_C_is_writable_B_p(Filename const *param0);
EXPORT_FUNC bool Filename_C_is_directory_B_p(Filename const *param0);
EXPORT_FUNC bool Filename_C_is_executable_B_p(Filename const *param0);
EXPORT_FUNC int Filename_C_compare_timestamps_i_ppBB(Filename const *param0, Filename const *param1, bool param2, bool param3);
EXPORT_FUNC int Filename_C_compare_timestamps_1_i_ppBB(Filename const *param0, Filename const *param1, bool param2);
EXPORT_FUNC int Filename_C_compare_timestamps_2_i_ppBB(Filename const *param0, Filename const *param1);
EXPORT_FUNC time_t Filename_C_get_timestamp_p_p(Filename const *param0);
EXPORT_FUNC time_t Filename_C_get_access_timestamp_p_p(Filename const *param0);
EXPORT_FUNC std::streamsize Filename_C_get_file_size_p_p(Filename const *param0);
EXPORT_FUNC bool Filename_C_resolve_filename_B_ppp(Filename *param0, DSearchPath const *param1, char const *param2);
EXPORT_FUNC bool Filename_C_resolve_filename_1_B_ppp(Filename *param0, DSearchPath const *param1);
EXPORT_FUNC bool Filename_C_make_relative_to_B_ppB(Filename *param0, Filename *param1, bool param2);
EXPORT_FUNC bool Filename_C_make_relative_to_1_B_ppB(Filename *param0, Filename *param1);
EXPORT_FUNC int Filename_C_find_on_searchpath_i_pp(Filename *param0, DSearchPath const *param1);
EXPORT_FUNC bool Filename_C_scan_directory_B_pp(Filename const *param0, vector_string *param1);
EXPORT_FUNC bool Filename_C_open_read_B_pp(Filename const *param0, pifstream *param1);
EXPORT_FUNC bool Filename_C_open_read_1_B_pp(Filename const *param0, std::ifstream *param1);
EXPORT_FUNC bool Filename_C_open_write_B_ppB(Filename const *param0, pofstream *param1, bool param2);
EXPORT_FUNC bool Filename_C_open_write_1_B_ppB(Filename const *param0, pofstream *param1);
EXPORT_FUNC bool Filename_C_open_write_2_B_ppB(Filename const *param0, std::ofstream *param1, bool param2);
EXPORT_FUNC bool Filename_C_open_write_3_B_ppB(Filename const *param0, std::ofstream *param1);
EXPORT_FUNC bool Filename_C_open_append_B_pp(Filename const *param0, pofstream *param1);
EXPORT_FUNC bool Filename_C_open_append_1_B_pp(Filename const *param0, std::ofstream *param1);
EXPORT_FUNC bool Filename_C_open_read_write_B_ppB(Filename const *param0, pfstream *param1, bool param2);
EXPORT_FUNC bool Filename_C_open_read_write_1_B_ppB(Filename const *param0, pfstream *param1);
EXPORT_FUNC bool Filename_C_open_read_write_2_B_ppB(Filename const *param0, std::fstream *param1, bool param2);
EXPORT_FUNC bool Filename_C_open_read_write_3_B_ppB(Filename const *param0, std::fstream *param1);
EXPORT_FUNC bool Filename_C_open_read_append_B_pp(Filename const *param0, pfstream *param1);
EXPORT_FUNC bool Filename_C_open_read_append_1_B_pp(Filename const *param0, std::fstream *param1);
EXPORT_FUNC bool Filename_C_chdir_B_p(Filename const *param0);
EXPORT_FUNC bool Filename_C_touch_B_p(Filename const *param0);
EXPORT_FUNC bool Filename_C_unlink_B_p(Filename const *param0);
EXPORT_FUNC bool Filename_C_rename_to_B_pp(Filename const *param0, Filename const *param1);
EXPORT_FUNC bool Filename_C_copy_to_B_pp(Filename const *param0, Filename const *param1);
EXPORT_FUNC bool Filename_C_make_dir_B_p(Filename const *param0);
EXPORT_FUNC bool Filename_C_mkdir_B_p(Filename const *param0);
EXPORT_FUNC bool Filename_C_rmdir_B_p(Filename const *param0);
EXPORT_FUNC bool _inCKD07OBrR(Filename const *param0, char const *param1);
EXPORT_FUNC bool _inCKD07sEaR(Filename const *param0, char const *param1);
EXPORT_FUNC bool _inCKD07YSEF(Filename const *param0, char const *param1);
EXPORT_FUNC int Filename_C_compare_to_i_pp(Filename const *param0, Filename const *param1);
EXPORT_FUNC bool Filename_C___nonzero___B_p(Filename const *param0);
EXPORT_FUNC int Filename_C_get_hash_i_p(Filename const *param0);
EXPORT_FUNC void Filename_C_output_v_pp(Filename const *param0, std::ostream *param1);
EXPORT_FUNC void Filename_C_set_filesystem_encoding_v_pp(TextEncoder::Encoding param0);
EXPORT_FUNC TextEncoder::Encoding Filename_C_get_filesystem_encoding_p_v();
EXPORT_FUNC int Filename_C_get_class_type_i_v();
EXPORT_FUNC void Filename_C_init_type_v_v();
EXPORT_FUNC LVecBase3f * LVecBase3f_C_ctor_p_v();
EXPORT_FUNC LVecBase3f * LVecBase3f_C_ctor_p_pf(LVecBase2f const *param0, float param1);
EXPORT_FUNC LVecBase3f * LVecBase3f_C_ctor_p_p(LVecBase3f const *param0);
EXPORT_FUNC LVecBase3f * LVecBase3f_C_ctor_1_p_p(LVecBase3f::EVector3 const *param0);
EXPORT_FUNC LVecBase3f * LVecBase3f_C_ctor_p_f(float param0);
EXPORT_FUNC LVecBase3f * LVecBase3f_C_ctor_p_fff(float param0, float param1, float param2);
EXPORT_FUNC void _inCKD074Nkp(LVecBase3f *param0, std::size_t param1);
EXPORT_FUNC LVecBase3f * _inCKD07qOP9(LVecBase3f *param0, LVecBase3f const *param1);
EXPORT_FUNC LVecBase3f * _inCKD07rfXC(LVecBase3f *param0, float param1);
EXPORT_FUNC LVecBase3f const * LVecBase3f_C_zero_p_v();
EXPORT_FUNC LVecBase3f const * LVecBase3f_C_unit_x_p_v();
EXPORT_FUNC LVecBase3f const * LVecBase3f_C_unit_y_p_v();
EXPORT_FUNC LVecBase3f const * LVecBase3f_C_unit_z_p_v();
EXPORT_FUNC void _inCKD0701HX(LVecBase3f *param0, int param1, float param2);
EXPORT_FUNC float _inCKD07nq7z(LVecBase3f const *param0, int param1);
EXPORT_FUNC int LVecBase3f_C_size_i_v();
EXPORT_FUNC bool LVecBase3f_C_is_nan_B_p(LVecBase3f const *param0);
EXPORT_FUNC float LVecBase3f_C_get_cell_f_pi(LVecBase3f const *param0, int param1);
EXPORT_FUNC float LVecBase3f_C_get_x_f_p(LVecBase3f const *param0);
EXPORT_FUNC float LVecBase3f_C_get_y_f_p(LVecBase3f const *param0);
EXPORT_FUNC float LVecBase3f_C_get_z_f_p(LVecBase3f const *param0);
EXPORT_FUNC void LVecBase3f_C_set_cell_v_pif(LVecBase3f *param0, int param1, float param2);
EXPORT_FUNC void LVecBase3f_C_set_x_v_pf(LVecBase3f *param0, float param1);
EXPORT_FUNC void LVecBase3f_C_set_y_v_pf(LVecBase3f *param0, float param1);
EXPORT_FUNC void LVecBase3f_C_set_z_v_pf(LVecBase3f *param0, float param1);
EXPORT_FUNC LVecBase2f * LVecBase3f_C_get_xy_p_p(LVecBase3f const *param0);
EXPORT_FUNC LVecBase2f * LVecBase3f_C_get_xz_p_p(LVecBase3f const *param0);
EXPORT_FUNC LVecBase2f * LVecBase3f_C_get_yz_p_p(LVecBase3f const *param0);
EXPORT_FUNC void LVecBase3f_C_add_to_cell_v_pif(LVecBase3f *param0, int param1, float param2);
EXPORT_FUNC void LVecBase3f_C_add_x_v_pf(LVecBase3f *param0, float param1);
EXPORT_FUNC void LVecBase3f_C_add_y_v_pf(LVecBase3f *param0, float param1);
EXPORT_FUNC void LVecBase3f_C_add_z_v_pf(LVecBase3f *param0, float param1);
EXPORT_FUNC void LVecBase3f_C_get_data_v_p(LVecBase3f const *param0);
EXPORT_FUNC int LVecBase3f_C_get_num_components_i_v();
EXPORT_FUNC void LVecBase3f_C_begin_v_p(LVecBase3f *param0);
EXPORT_FUNC void LVecBase3f_C_begin_1_v_p(LVecBase3f const *param0);
EXPORT_FUNC void LVecBase3f_C_end_v_p(LVecBase3f *param0);
EXPORT_FUNC void LVecBase3f_C_end_1_v_p(LVecBase3f const *param0);
EXPORT_FUNC void LVecBase3f_C_fill_v_pf(LVecBase3f *param0, float param1);
EXPORT_FUNC void LVecBase3f_C_set_v_pfff(LVecBase3f *param0, float param1, float param2, float param3);
EXPORT_FUNC float LVecBase3f_C_dot_f_pp(LVecBase3f const *param0, LVecBase3f const *param1);
EXPORT_FUNC float LVecBase3f_C_length_squared_f_p(LVecBase3f const *param0);
EXPORT_FUNC float LVecBase3f_C_length_f_p(LVecBase3f const *param0);
EXPORT_FUNC bool LVecBase3f_C_normalize_B_p(LVecBase3f *param0);
EXPORT_FUNC LVecBase3f * LVecBase3f_C_normalized_p_p(LVecBase3f const *param0);
EXPORT_FUNC LVecBase3f * LVecBase3f_C_project_p_pp(LVecBase3f const *param0, LVecBase3f const *param1);
EXPORT_FUNC LVecBase3f * LVecBase3f_C_cross_p_pp(LVecBase3f const *param0, LVecBase3f const *param1);
EXPORT_FUNC bool _inCKD07dE8o(LVecBase3f const *param0, LVecBase3f const *param1);
EXPORT_FUNC bool _inCKD07Ft4v(LVecBase3f const *param0, LVecBase3f const *param1);
EXPORT_FUNC bool _inCKD07BNge(LVecBase3f const *param0, LVecBase3f const *param1);
EXPORT_FUNC LVecBase3f * LVecBase3f_C_get_standardized_hpr_p_p(LVecBase3f const *param0);
EXPORT_FUNC int LVecBase3f_C_compare_to_i_pp(LVecBase3f const *param0, LVecBase3f const *param1);
EXPORT_FUNC int LVecBase3f_C_compare_to_i_ppf(LVecBase3f const *param0, LVecBase3f const *param1, float param2);
EXPORT_FUNC std::size_t LVecBase3f_C_get_hash_p_p(LVecBase3f const *param0);
EXPORT_FUNC std::size_t LVecBase3f_C_get_hash_p_pf(LVecBase3f const *param0, float param1);
EXPORT_FUNC std::size_t LVecBase3f_C_add_hash_p_pp(LVecBase3f const *param0, std::size_t param1);
EXPORT_FUNC std::size_t LVecBase3f_C_add_hash_p_ppf(LVecBase3f const *param0, std::size_t param1, float param2);
EXPORT_FUNC void LVecBase3f_C_generate_hash_v_pp(LVecBase3f const *param0, ChecksumHashGenerator *param1);
EXPORT_FUNC void LVecBase3f_C_generate_hash_v_ppf(LVecBase3f const *param0, ChecksumHashGenerator *param1, float param2);
EXPORT_FUNC LVecBase3f * _inCKD07iO_P(LVecBase3f const *param0);
EXPORT_FUNC LVecBase3f * _inCKD07fM9C(LVecBase3f const *param0, LVecBase3f const *param1);
EXPORT_FUNC LVecBase3f * _inCKD07f8eW(LVecBase3f const *param0, LVecBase3f const *param1);
EXPORT_FUNC LVecBase3f * _inCKD07Hdlj(LVecBase3f const *param0, float param1);
EXPORT_FUNC LVecBase3f * _inCKD07Y1ZU(LVecBase3f const *param0, float param1);
EXPORT_FUNC LVecBase3f * _inCKD07GqXQ(LVecBase3f *param0, LVecBase3f const *param1);
EXPORT_FUNC LVecBase3f * _inCKD07Ga5j(LVecBase3f *param0, LVecBase3f const *param1);
EXPORT_FUNC LVecBase3f * _inCKD07PZfq(LVecBase3f *param0, float param1);
EXPORT_FUNC LVecBase3f * _inCKD07OhTb(LVecBase3f *param0, float param1);
EXPORT_FUNC void LVecBase3f_C_componentwise_mult_v_pp(LVecBase3f *param0, LVecBase3f const *param1);
EXPORT_FUNC LVecBase3f * LVecBase3f_C_fmax_p_pp(LVecBase3f const *param0, LVecBase3f const *param1);
EXPORT_FUNC LVecBase3f * LVecBase3f_C_fmin_p_pp(LVecBase3f const *param0, LVecBase3f const *param1);
EXPORT_FUNC void LVecBase3f_C_cross_into_v_pp(LVecBase3f *param0, LVecBase3f const *param1);
EXPORT_FUNC bool LVecBase3f_C_almost_equal_B_pp(LVecBase3f const *param0, LVecBase3f const *param1);
EXPORT_FUNC bool LVecBase3f_C_almost_equal_B_ppf(LVecBase3f const *param0, LVecBase3f const *param1, float param2);
EXPORT_FUNC void LVecBase3f_C_output_v_pp(LVecBase3f const *param0, std::ostream *param1);
EXPORT_FUNC void LVecBase3f_C_write_datagram_fixed_v_pp(LVecBase3f const *param0, Datagram *param1);
EXPORT_FUNC void LVecBase3f_C_read_datagram_fixed_v_pp(LVecBase3f *param0, DatagramIterator *param1);
EXPORT_FUNC void LVecBase3f_C_write_datagram_v_pp(LVecBase3f const *param0, Datagram *param1);
EXPORT_FUNC void LVecBase3f_C_read_datagram_v_pp(LVecBase3f *param0, DatagramIterator *param1);
EXPORT_FUNC LVecBase3f::EVector3 * LVecBase3f_C_get_v_p_p(LVecBase3f const *param0);
EXPORT_FUNC int LVecBase3f_C_get_class_type_i_v();
EXPORT_FUNC void LVecBase3f_C_init_type_v_v();
EXPORT_FUNC PandaFramework * WindowFramework_C_get_panda_framework_p_p(WindowFramework const *param0);
EXPORT_FUNC GraphicsWindow * WindowFramework_C_get_graphics_window_p_p(WindowFramework const *param0);
EXPORT_FUNC GraphicsOutput * WindowFramework_C_get_graphics_output_p_p(WindowFramework const *param0);
EXPORT_FUNC NodePath * WindowFramework_C_get_camera_group_p_p(WindowFramework *param0);
EXPORT_FUNC int WindowFramework_C_get_num_cameras_i_p(WindowFramework const *param0);
EXPORT_FUNC Camera * WindowFramework_C_get_camera_p_pi(WindowFramework const *param0, int param1);
EXPORT_FUNC DisplayRegion * WindowFramework_C_get_display_region_2d_p_p(WindowFramework const *param0);
EXPORT_FUNC DisplayRegion * WindowFramework_C_get_display_region_3d_p_p(WindowFramework const *param0);
EXPORT_FUNC NodePath * WindowFramework_C_get_render_p_p(WindowFramework *param0);
EXPORT_FUNC NodePath * WindowFramework_C_get_render_2d_p_p(WindowFramework *param0);
EXPORT_FUNC NodePath * WindowFramework_C_get_aspect_2d_p_p(WindowFramework *param0);
EXPORT_FUNC NodePath * WindowFramework_C_get_pixel_2d_p_p(WindowFramework *param0);
EXPORT_FUNC NodePath * WindowFramework_C_get_mouse_p_p(WindowFramework *param0);
EXPORT_FUNC NodePath * WindowFramework_C_get_button_thrower_p_p(WindowFramework *param0);
EXPORT_FUNC void WindowFramework_C_enable_keyboard_v_p(WindowFramework *param0);
EXPORT_FUNC void WindowFramework_C_setup_trackball_v_p(WindowFramework *param0);
EXPORT_FUNC void WindowFramework_C_center_trackball_v_pp(WindowFramework *param0, NodePath const *param1);
EXPORT_FUNC bool WindowFramework_C_load_models_B_ppp(WindowFramework *param0, NodePath const *param1, pvector< Filename > const *param2);
EXPORT_FUNC NodePath * WindowFramework_C_load_model_p_ppp(WindowFramework *param0, NodePath const *param1, Filename *param2);
EXPORT_FUNC NodePath * WindowFramework_C_load_default_model_p_pp(WindowFramework *param0, NodePath const *param1);
EXPORT_FUNC void WindowFramework_C_loop_animations_v_pi(WindowFramework *param0, int param1);
EXPORT_FUNC void WindowFramework_C_loop_animations_1_v_pi(WindowFramework *param0);
EXPORT_FUNC void WindowFramework_C_stagger_animations_v_p(WindowFramework *param0);
EXPORT_FUNC void WindowFramework_C_next_anim_control_v_p(WindowFramework *param0);
EXPORT_FUNC void WindowFramework_C_set_anim_controls_v_pB(WindowFramework *param0, bool param1);
EXPORT_FUNC bool WindowFramework_C_get_anim_controls_B_p(WindowFramework const *param0);
EXPORT_FUNC void WindowFramework_C_adjust_dimensions_v_p(WindowFramework *param0);
EXPORT_FUNC WindowFramework * WindowFramework_C_split_window_p_pp(WindowFramework *param0, WindowFramework::SplitType param1);
EXPORT_FUNC WindowFramework * WindowFramework_C_split_window_1_p_pp(WindowFramework *param0);
EXPORT_FUNC void WindowFramework_C_set_wireframe_v_pBB(WindowFramework *param0, bool param1, bool param2);
EXPORT_FUNC void WindowFramework_C_set_wireframe_1_v_pBB(WindowFramework *param0, bool param1);
EXPORT_FUNC void WindowFramework_C_set_texture_v_pB(WindowFramework *param0, bool param1);
EXPORT_FUNC void WindowFramework_C_set_two_sided_v_pB(WindowFramework *param0, bool param1);
EXPORT_FUNC void WindowFramework_C_set_one_sided_reverse_v_pB(WindowFramework *param0, bool param1);
EXPORT_FUNC void WindowFramework_C_set_lighting_v_pB(WindowFramework *param0, bool param1);
EXPORT_FUNC void WindowFramework_C_set_perpixel_v_pB(WindowFramework *param0, bool param1);
EXPORT_FUNC void WindowFramework_C_set_background_type_v_pp(WindowFramework *param0, WindowFramework::BackgroundType param1);
EXPORT_FUNC bool WindowFramework_C_get_wireframe_B_p(WindowFramework const *param0);
EXPORT_FUNC bool WindowFramework_C_get_wireframe_filled_B_p(WindowFramework const *param0);
EXPORT_FUNC bool WindowFramework_C_get_texture_B_p(WindowFramework const *param0);
EXPORT_FUNC bool WindowFramework_C_get_two_sided_B_p(WindowFramework const *param0);
EXPORT_FUNC bool WindowFramework_C_get_one_sided_reverse_B_p(WindowFramework const *param0);
EXPORT_FUNC bool WindowFramework_C_get_lighting_B_p(WindowFramework const *param0);
EXPORT_FUNC bool WindowFramework_C_get_perpixel_B_p(WindowFramework const *param0);
EXPORT_FUNC WindowFramework::BackgroundType WindowFramework_C_get_background_type_p_p(WindowFramework const *param0);
EXPORT_FUNC TextFont * WindowFramework_C_get_shuttle_controls_font_p_v();
EXPORT_FUNC NodePath * WindowFramework_C_make_camera_p_p(WindowFramework *param0);
EXPORT_FUNC int WindowFramework_C_get_class_type_i_v();
EXPORT_FUNC void WindowFramework_C_init_type_v_v();
EXPORT_FUNC int WindowFramework_C_get_type_i_p(WindowFramework const *param0);
EXPORT_FUNC int WindowFramework_C_force_init_type_i_p(WindowFramework *param0);
EXPORT_FUNC WindowFramework * WindowFramework_C_ctor_p_p(WindowFramework const *param0);
EXPORT_FUNC void NodePath_C_reparent_to_v_pp(NodePath *param0, NodePath const *param1);
EXPORT_FUNC void NodePath_C_look_at_v_pfff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3);
EXPORT_FUNC void NodePath_C_set_pos_v_pp(NodePath *param0, LVecBase3f const *param1);
EXPORT_FUNC void NodePath_C_set_scale_v_pp(NodePath *param0, LVecBase3f const *param1);
EXPORT_FUNC NodePath * NodePath_C_ctor_p_v();
EXPORT_FUNC NodePath * NodePath_C_ctor_p_p(NodePath const *param0);
EXPORT_FUNC Engine * Engine_C_ctor_p_v();
EXPORT_FUNC Engine * Engine_C_ctor_p_p(Engine const *param0);
EXPORT_FUNC void Engine_C_dtor_v_p(Engine *param0);
EXPORT_FUNC void Engine_C_stop_v_v();
EXPORT_FUNC int Engine_C_is_alive_i_v();
EXPORT_FUNC int Engine_C_HelloEngine_i_p(Engine *param0);
EXPORT_FUNC int Engine_C_casetest_i_pipB(Engine *param0, int param1, char const *param2, bool param3);
EXPORT_FUNC NodePath * Engine_C_load_model_p_ps(Engine *param0, char const *param1);
EXPORT_FUNC void Engine_C_attach_v_pp(Engine *param0, NodePath *param1);
EXPORT_FUNC void Engine_C_op_pos_v_ppp(Engine *param0, NodePath *param1, LVecBase3f *param2);
EXPORT_FUNC void Engine_C_op_scale_v_ppp(Engine *param0, NodePath *param1, LVecBase3f *param2);
EXPORT_FUNC void Engine_C_build_v_p(Engine *param0);
EXPORT_FUNC void Engine_C_step_v_p(Engine *param0);
EXPORT_FUNC char const * Engine_C_get_version_string_s_v();
EXPORT_FUNC PointerTo< WindowFramework > const * Engine_C_get_wframe_p_p(Engine const *param0);
EXPORT_FUNC PandaFramework * Engine_C_get_framework_p_p(Engine const *param0);
EXPORT_FUNC void Engine_C_set_framework_v_pp(Engine *param0, PandaFramework *param1);
EXPORT_FUNC int check_timer_i_v();
EXPORT_FUNC void emscripten_cancel_main_loop_v_v();
EXPORT_FUNC void main_loop_or_step_v_v();
EXPORT_FUNC void emscripten_force_exit_v_ii(int param0);


/*
 * C wrapper for
 * inline Filename::Filename(void)
 */
Filename *
Filename_C_ctor_p_v() {
  return new Filename();
}

/*
 * C wrapper for
 * inline Filename::Filename(Filename &&from) noexcept
 */
Filename *
Filename_C_ctor_p_p(Filename *param0) {
  return new Filename(*param0);
}

/*
 * C wrapper for
 * inline Filename::Filename(Filename const &copy)
 */
Filename *
Filename_C_ctor_1_p_p(Filename const *param0) {
  return new Filename(*param0);
}

/*
 * C wrapper for
 * Filename::Filename(Filename const &dirname, Filename const &basename)
 */
Filename *
Filename_C_ctor_p_pp(Filename const *param0, Filename const *param1) {
  return new Filename(*param0, *param1);
}

/*
 * C wrapper for
 * inline Filename::Filename(char const *filename)
 */
Filename *
Filename_C_ctor_p_s(char const *param0) {
  return new Filename(param0);
}

/*
 * C wrapper for
 * inline Filename::Filename(std::string const &filename)
 */
Filename *
Filename_C_ctor_2_p_p(char const *param0) {
  return new Filename(std::string(param0));
}

/*
 * C wrapper for
 * inline Filename::Filename(std::wstring const &filename)
 */
Filename *
Filename_C_ctor_3_p_p(wchar_t const *param0) {
  return new Filename(std::wstring(param0));
}

/*
 * C wrapper for
 * static inline Filename Filename::text_filename(Filename const &filename)
 */
Filename *
Filename_C_text_filename_p_pp(Filename const *param0) {
  return new Filename(Filename::text_filename(*param0));
}

/*
 * C wrapper for
 * static inline Filename Filename::text_filename(std::string const &filename)
 */
Filename *
Filename_C_text_filename_p_sp(char const *param0) {
  return new Filename(Filename::text_filename(std::string(param0)));
}

/*
 * C wrapper for
 * static inline Filename Filename::binary_filename(Filename const &filename)
 */
Filename *
Filename_C_binary_filename_p_pp(Filename const *param0) {
  return new Filename(Filename::binary_filename(*param0));
}

/*
 * C wrapper for
 * static inline Filename Filename::binary_filename(std::string const &filename)
 */
Filename *
Filename_C_binary_filename_p_sp(char const *param0) {
  return new Filename(Filename::binary_filename(std::string(param0)));
}

/*
 * C wrapper for
 * static inline Filename Filename::dso_filename(std::string const &filename)
 */
Filename *
Filename_C_dso_filename_p_sp(char const *param0) {
  return new Filename(Filename::dso_filename(std::string(param0)));
}

/*
 * C wrapper for
 * static inline Filename Filename::executable_filename(std::string const &filename)
 */
Filename *
Filename_C_executable_filename_p_sp(char const *param0) {
  return new Filename(Filename::executable_filename(std::string(param0)));
}

/*
 * C wrapper for
 * static inline Filename Filename::pattern_filename(std::string const &filename)
 */
Filename *
Filename_C_pattern_filename_p_sp(char const *param0) {
  return new Filename(Filename::pattern_filename(std::string(param0)));
}

/*
 * C wrapper for
 * static Filename Filename::from_os_specific(std::string const &os_specific, Filename::Type type)
 */
Filename *
Filename_C_from_os_specific_p_spp(char const *param0, Filename::Type param1) {
  return new Filename(Filename::from_os_specific(std::string(param0), param1));
}

/*
 * C wrapper for
 * static Filename Filename::from_os_specific(std::string const &os_specific, Filename::Type type)
 */
Filename *
Filename_C_from_os_specific_1_p_spp(char const *param0) {
  return new Filename(Filename::from_os_specific(std::string(param0)));
}

/*
 * C wrapper for
 * static Filename Filename::from_os_specific_w(std::wstring const &os_specific, Filename::Type type)
 */
Filename *
Filename_C_from_os_specific_w_p_ppp(wchar_t const *param0, Filename::Type param1) {
  return new Filename(Filename::from_os_specific_w(std::wstring(param0), param1));
}

/*
 * C wrapper for
 * static Filename Filename::from_os_specific_w(std::wstring const &os_specific, Filename::Type type)
 */
Filename *
Filename_C_from_os_specific_w_1_p_ppp(wchar_t const *param0) {
  return new Filename(Filename::from_os_specific_w(std::wstring(param0)));
}

/*
 * C wrapper for
 * static Filename Filename::expand_from(std::string const &user_string, Filename::Type type)
 */
Filename *
Filename_C_expand_from_p_spp(char const *param0, Filename::Type param1) {
  return new Filename(Filename::expand_from(std::string(param0), param1));
}

/*
 * C wrapper for
 * static Filename Filename::expand_from(std::string const &user_string, Filename::Type type)
 */
Filename *
Filename_C_expand_from_1_p_spp(char const *param0) {
  return new Filename(Filename::expand_from(std::string(param0)));
}

/*
 * C wrapper for
 * static Filename Filename::temporary(std::string const &dirname, std::string const &prefix, std::string const &suffix, Filename::Type type)
 */
Filename *
Filename_C_temporary_p_spppp(char const *param0, char const *param1, char const *param2, Filename::Type param3) {
  return new Filename(Filename::temporary(std::string(param0), std::string(param1), std::string(param2), param3));
}

/*
 * C wrapper for
 * static Filename Filename::temporary(std::string const &dirname, std::string const &prefix, std::string const &suffix, Filename::Type type)
 */
Filename *
Filename_C_temporary_1_p_spppp(char const *param0, char const *param1, char const *param2) {
  return new Filename(Filename::temporary(std::string(param0), std::string(param1), std::string(param2)));
}

/*
 * C wrapper for
 * static Filename Filename::temporary(std::string const &dirname, std::string const &prefix, std::string const &suffix, Filename::Type type)
 */
Filename *
Filename_C_temporary_2_p_spppp(char const *param0, char const *param1) {
  return new Filename(Filename::temporary(std::string(param0), std::string(param1)));
}

/*
 * C wrapper for
 * static Filename const &Filename::get_home_directory(void)
 */
Filename const *
Filename_C_get_home_directory_p_v() {
  return &(Filename::get_home_directory());
}

/*
 * C wrapper for
 * static Filename const &Filename::get_temp_directory(void)
 */
Filename const *
Filename_C_get_temp_directory_p_v() {
  return &(Filename::get_temp_directory());
}

/*
 * C wrapper for
 * static Filename const &Filename::get_user_appdata_directory(void)
 */
Filename const *
Filename_C_get_user_appdata_directory_p_v() {
  return &(Filename::get_user_appdata_directory());
}

/*
 * C wrapper for
 * static Filename const &Filename::get_common_appdata_directory(void)
 */
Filename const *
Filename_C_get_common_appdata_directory_p_v() {
  return &(Filename::get_common_appdata_directory());
}

/*
 * C wrapper for
 * inline void Filename::operator =(Filename &&from) noexcept
 */
Filename *
_inCKD07UZ8w(Filename *param0, Filename *param1) {
  (*param0).operator =(*param1);
  return param0;
}

/*
 * C wrapper for
 * inline void Filename::operator =(Filename const &copy)
 */
Filename *
_inCKD07e4GP(Filename *param0, Filename const *param1) {
  (*param0).operator =(*param1);
  return param0;
}

/*
 * C wrapper for
 * inline void Filename::operator =(char const *filename)
 */
Filename *
_inCKD07An_g(Filename *param0, char const *param1) {
  (*param0).operator =(param1);
  return param0;
}

/*
 * C wrapper for
 * inline void Filename::operator =(std::string const &filename)
 */
Filename *
_inCKD07AEbr(Filename *param0, char const *param1) {
  (*param0).operator =(std::string(param1));
  return param0;
}

/*
 * C wrapper for
 * inline void Filename::operator =(std::wstring const &filename)
 */
Filename *
_inCKD07wt4w(Filename *param0, wchar_t const *param1) {
  (*param0).operator =(std::wstring(param1));
  return param0;
}

/*
 * C wrapper for
 * inline operator std::string const &(void) const
 */
char const *
_s_p(Filename const *param0) {
  return ((std::string const &)*param0).c_str();
}

/*
 * C wrapper for
 * inline char const *Filename::c_str(void) const
 */
char const *
Filename_C_c_str_s_p(Filename const *param0) {
  return (*param0).c_str();
}

/*
 * C wrapper for
 * inline bool Filename::empty(void) const
 */
bool
Filename_C_empty_B_p(Filename const *param0) {
  return (*param0).empty();
}

/*
 * C wrapper for
 * inline std::size_t Filename::length(void) const
 */
std::size_t
Filename_C_length_p_p(Filename const *param0) {
  return (*param0).length();
}

/*
 * C wrapper for
 * inline char Filename::operator [](std::size_t n) const
 */
char
_inCKD07PYDQ(Filename const *param0, std::size_t param1) {
  return (*param0).operator [](param1);
}

/*
 * C wrapper for
 * inline std::string Filename::substr(std::size_t begin) const
 */
char const *
Filename_C_substr_s_pp(Filename const *param0, std::size_t param1) {
  static std::string string_holder = (*param0).substr(param1);
  return string_holder.c_str();
}

/*
 * C wrapper for
 * inline std::string Filename::substr(std::size_t begin, std::size_t end) const
 */
char const *
Filename_C_substr_s_ppp(Filename const *param0, std::size_t param1, std::size_t param2) {
  static std::string string_holder = (*param0).substr(param1, param2);
  return string_holder.c_str();
}

/*
 * C wrapper for
 * inline void Filename::operator +=(std::string const &other)
 */
Filename *
_inCKD07_CCc(Filename *param0, char const *param1) {
  (*param0).operator +=(std::string(param1));
  return param0;
}

/*
 * C wrapper for
 * inline Filename Filename::operator +(std::string const &other) const
 */
Filename *
_inCKD07dG6k(Filename const *param0, char const *param1) {
  return new Filename((*param0).operator +(std::string(param1)));
}

/*
 * C wrapper for
 * inline Filename Filename::operator /(Filename const &other) const
 */
Filename *
_inCKD07pD3m(Filename const *param0, Filename const *param1) {
  return new Filename((*param0).operator /(*param1));
}

/*
 * C wrapper for
 * inline std::string Filename::get_fullpath(void) const
 */
char const *
Filename_C_get_fullpath_s_p(Filename const *param0) {
  static std::string string_holder = (*param0).get_fullpath();
  return string_holder.c_str();
}

/*
 * C wrapper for
 * inline std::wstring Filename::get_fullpath_w(void) const
 */
wchar_t const *
Filename_C_get_fullpath_w_p_p(Filename const *param0) {
  static std::wstring string_holder = (*param0).get_fullpath_w();
  return string_holder.c_str();
}

/*
 * C wrapper for
 * inline std::string Filename::get_dirname(void) const
 */
char const *
Filename_C_get_dirname_s_p(Filename const *param0) {
  static std::string string_holder = (*param0).get_dirname();
  return string_holder.c_str();
}

/*
 * C wrapper for
 * inline std::string Filename::get_basename(void) const
 */
char const *
Filename_C_get_basename_s_p(Filename const *param0) {
  static std::string string_holder = (*param0).get_basename();
  return string_holder.c_str();
}

/*
 * C wrapper for
 * inline std::string Filename::get_fullpath_wo_extension(void) const
 */
char const *
Filename_C_get_fullpath_wo_extension_s_p(Filename const *param0) {
  static std::string string_holder = (*param0).get_fullpath_wo_extension();
  return string_holder.c_str();
}

/*
 * C wrapper for
 * inline std::string Filename::get_basename_wo_extension(void) const
 */
char const *
Filename_C_get_basename_wo_extension_s_p(Filename const *param0) {
  static std::string string_holder = (*param0).get_basename_wo_extension();
  return string_holder.c_str();
}

/*
 * C wrapper for
 * inline std::string Filename::get_extension(void) const
 */
char const *
Filename_C_get_extension_s_p(Filename const *param0) {
  static std::string string_holder = (*param0).get_extension();
  return string_holder.c_str();
}

/*
 * C wrapper for
 * void Filename::set_fullpath(std::string const &s)
 */
void
Filename_C_set_fullpath_v_pp(Filename *param0, char const *param1) {
  (*param0).set_fullpath(std::string(param1));
}

/*
 * C wrapper for
 * void Filename::set_dirname(std::string const &s)
 */
void
Filename_C_set_dirname_v_pp(Filename *param0, char const *param1) {
  (*param0).set_dirname(std::string(param1));
}

/*
 * C wrapper for
 * void Filename::set_basename(std::string const &s)
 */
void
Filename_C_set_basename_v_pp(Filename *param0, char const *param1) {
  (*param0).set_basename(std::string(param1));
}

/*
 * C wrapper for
 * void Filename::set_fullpath_wo_extension(std::string const &s)
 */
void
Filename_C_set_fullpath_wo_extension_v_pp(Filename *param0, char const *param1) {
  (*param0).set_fullpath_wo_extension(std::string(param1));
}

/*
 * C wrapper for
 * void Filename::set_basename_wo_extension(std::string const &s)
 */
void
Filename_C_set_basename_wo_extension_v_pp(Filename *param0, char const *param1) {
  (*param0).set_basename_wo_extension(std::string(param1));
}

/*
 * C wrapper for
 * void Filename::set_extension(std::string const &s)
 */
void
Filename_C_set_extension_v_pp(Filename *param0, char const *param1) {
  (*param0).set_extension(std::string(param1));
}

/*
 * C wrapper for
 * inline void Filename::set_binary(void)
 */
void
Filename_C_set_binary_v_p(Filename *param0) {
  (*param0).set_binary();
}

/*
 * C wrapper for
 * inline void Filename::set_text(void)
 */
void
Filename_C_set_text_v_p(Filename *param0) {
  (*param0).set_text();
}

/*
 * C wrapper for
 * inline bool Filename::is_binary(void) const
 */
bool
Filename_C_is_binary_B_p(Filename const *param0) {
  return (*param0).is_binary();
}

/*
 * C wrapper for
 * inline bool Filename::is_text(void) const
 */
bool
Filename_C_is_text_B_p(Filename const *param0) {
  return (*param0).is_text();
}

/*
 * C wrapper for
 * inline bool Filename::is_binary_or_text(void) const
 */
bool
Filename_C_is_binary_or_text_B_p(Filename const *param0) {
  return (*param0).is_binary_or_text();
}

/*
 * C wrapper for
 * inline void Filename::set_type(Filename::Type type)
 */
void
Filename_C_set_type_v_pp(Filename *param0, Filename::Type param1) {
  (*param0).set_type(param1);
}

/*
 * C wrapper for
 * inline Filename::Type Filename::get_type(void) const
 */
Filename::Type
Filename_C_get_type_p_p(Filename const *param0) {
  return (*param0).get_type();
}

/*
 * C wrapper for
 * inline void Filename::set_pattern(bool pattern)
 */
void
Filename_C_set_pattern_v_pB(Filename *param0, bool param1) {
  (*param0).set_pattern(param1);
}

/*
 * C wrapper for
 * inline bool Filename::get_pattern(void) const
 */
bool
Filename_C_get_pattern_B_p(Filename const *param0) {
  return (*param0).get_pattern();
}

/*
 * C wrapper for
 * inline bool Filename::has_hash(void) const
 */
bool
Filename_C_has_hash_B_p(Filename const *param0) {
  return (*param0).has_hash();
}

/*
 * C wrapper for
 * Filename Filename::get_filename_index(int index) const
 */
Filename *
Filename_C_get_filename_index_p_pi(Filename const *param0, int param1) {
  return new Filename((*param0).get_filename_index(param1));
}

/*
 * C wrapper for
 * inline std::string Filename::get_hash_to_end(void) const
 */
char const *
Filename_C_get_hash_to_end_s_p(Filename const *param0) {
  static std::string string_holder = (*param0).get_hash_to_end();
  return string_holder.c_str();
}

/*
 * C wrapper for
 * void Filename::set_hash_to_end(std::string const &s)
 */
void
Filename_C_set_hash_to_end_v_pp(Filename *param0, char const *param1) {
  (*param0).set_hash_to_end(std::string(param1));
}

/*
 * C wrapper for
 * void Filename::extract_components(vector_string &components) const
 */
void
Filename_C_extract_components_v_pp(Filename const *param0, vector_string *param1) {
  (*param0).extract_components(*param1);
}

/*
 * C wrapper for
 * void Filename::standardize(void)
 */
void
Filename_C_standardize_v_p(Filename *param0) {
  (*param0).standardize();
}

/*
 * C wrapper for
 * inline bool Filename::is_local(void) const
 */
bool
Filename_C_is_local_B_p(Filename const *param0) {
  return (*param0).is_local();
}

/*
 * C wrapper for
 * inline bool Filename::is_fully_qualified(void) const
 */
bool
Filename_C_is_fully_qualified_B_p(Filename const *param0) {
  return (*param0).is_fully_qualified();
}

/*
 * C wrapper for
 * void Filename::make_absolute(void)
 */
void
Filename_C_make_absolute_v_p(Filename *param0) {
  (*param0).make_absolute();
}

/*
 * C wrapper for
 * void Filename::make_absolute(Filename const &start_directory)
 */
void
Filename_C_make_absolute_v_pp(Filename *param0, Filename const *param1) {
  (*param0).make_absolute(*param1);
}

/*
 * C wrapper for
 * bool Filename::make_canonical(void)
 */
bool
Filename_C_make_canonical_B_p(Filename *param0) {
  return (*param0).make_canonical();
}

/*
 * C wrapper for
 * bool Filename::make_true_case(void)
 */
bool
Filename_C_make_true_case_B_p(Filename *param0) {
  return (*param0).make_true_case();
}

/*
 * C wrapper for
 * std::string Filename::to_os_specific(void) const
 */
char const *
Filename_C_to_os_specific_s_p(Filename const *param0) {
  static std::string string_holder = (*param0).to_os_specific();
  return string_holder.c_str();
}

/*
 * C wrapper for
 * std::wstring Filename::to_os_specific_w(void) const
 */
wchar_t const *
Filename_C_to_os_specific_w_p_p(Filename const *param0) {
  static std::wstring string_holder = (*param0).to_os_specific_w();
  return string_holder.c_str();
}

/*
 * C wrapper for
 * std::string Filename::to_os_generic(void) const
 */
char const *
Filename_C_to_os_generic_s_p(Filename const *param0) {
  static std::string string_holder = (*param0).to_os_generic();
  return string_holder.c_str();
}

/*
 * C wrapper for
 * std::string Filename::to_os_short_name(void) const
 */
char const *
Filename_C_to_os_short_name_s_p(Filename const *param0) {
  static std::string string_holder = (*param0).to_os_short_name();
  return string_holder.c_str();
}

/*
 * C wrapper for
 * std::string Filename::to_os_long_name(void) const
 */
char const *
Filename_C_to_os_long_name_s_p(Filename const *param0) {
  static std::string string_holder = (*param0).to_os_long_name();
  return string_holder.c_str();
}

/*
 * C wrapper for
 * bool Filename::exists(void) const
 */
bool
Filename_C_exists_B_p(Filename const *param0) {
  return (*param0).exists();
}

/*
 * C wrapper for
 * bool Filename::is_regular_file(void) const
 */
bool
Filename_C_is_regular_file_B_p(Filename const *param0) {
  return (*param0).is_regular_file();
}

/*
 * C wrapper for
 * bool Filename::is_writable(void) const
 */
bool
Filename_C_is_writable_B_p(Filename const *param0) {
  return (*param0).is_writable();
}

/*
 * C wrapper for
 * bool Filename::is_directory(void) const
 */
bool
Filename_C_is_directory_B_p(Filename const *param0) {
  return (*param0).is_directory();
}

/*
 * C wrapper for
 * bool Filename::is_executable(void) const
 */
bool
Filename_C_is_executable_B_p(Filename const *param0) {
  return (*param0).is_executable();
}

/*
 * C wrapper for
 * int Filename::compare_timestamps(Filename const &other, bool this_missing_is_old, bool other_missing_is_old) const
 */
int
Filename_C_compare_timestamps_i_ppBB(Filename const *param0, Filename const *param1, bool param2, bool param3) {
  return (*param0).compare_timestamps(*param1, param2, param3);
}

/*
 * C wrapper for
 * int Filename::compare_timestamps(Filename const &other, bool this_missing_is_old, bool other_missing_is_old) const
 */
int
Filename_C_compare_timestamps_1_i_ppBB(Filename const *param0, Filename const *param1, bool param2) {
  return (*param0).compare_timestamps(*param1, param2);
}

/*
 * C wrapper for
 * int Filename::compare_timestamps(Filename const &other, bool this_missing_is_old, bool other_missing_is_old) const
 */
int
Filename_C_compare_timestamps_2_i_ppBB(Filename const *param0, Filename const *param1) {
  return (*param0).compare_timestamps(*param1);
}

/*
 * C wrapper for
 * time_t Filename::get_timestamp(void) const
 */
time_t
Filename_C_get_timestamp_p_p(Filename const *param0) {
  return (*param0).get_timestamp();
}

/*
 * C wrapper for
 * time_t Filename::get_access_timestamp(void) const
 */
time_t
Filename_C_get_access_timestamp_p_p(Filename const *param0) {
  return (*param0).get_access_timestamp();
}

/*
 * C wrapper for
 * std::streamsize Filename::get_file_size(void) const
 */
std::streamsize
Filename_C_get_file_size_p_p(Filename const *param0) {
  return (*param0).get_file_size();
}

/*
 * C wrapper for
 * bool Filename::resolve_filename(DSearchPath const &searchpath, std::string const &default_extension)
 */
bool
Filename_C_resolve_filename_B_ppp(Filename *param0, DSearchPath const *param1, char const *param2) {
  return (*param0).resolve_filename(*param1, std::string(param2));
}

/*
 * C wrapper for
 * bool Filename::resolve_filename(DSearchPath const &searchpath, std::string const &default_extension)
 */
bool
Filename_C_resolve_filename_1_B_ppp(Filename *param0, DSearchPath const *param1) {
  return (*param0).resolve_filename(*param1);
}

/*
 * C wrapper for
 * bool Filename::make_relative_to(Filename directory, bool allow_backups)
 */
bool
Filename_C_make_relative_to_B_ppB(Filename *param0, Filename *param1, bool param2) {
  return (*param0).make_relative_to(*param1, param2);
}

/*
 * C wrapper for
 * bool Filename::make_relative_to(Filename directory, bool allow_backups)
 */
bool
Filename_C_make_relative_to_1_B_ppB(Filename *param0, Filename *param1) {
  return (*param0).make_relative_to(*param1);
}

/*
 * C wrapper for
 * int Filename::find_on_searchpath(DSearchPath const &searchpath)
 */
int
Filename_C_find_on_searchpath_i_pp(Filename *param0, DSearchPath const *param1) {
  return (*param0).find_on_searchpath(*param1);
}

/*
 * C wrapper for
 * bool Filename::scan_directory(vector_string &contents) const
 */
bool
Filename_C_scan_directory_B_pp(Filename const *param0, vector_string *param1) {
  return (*param0).scan_directory(*param1);
}

/*
 * C wrapper for
 * bool Filename::open_read(pifstream &stream) const
 */
bool
Filename_C_open_read_B_pp(Filename const *param0, pifstream *param1) {
  return (*param0).open_read(*param1);
}

/*
 * C wrapper for
 * bool Filename::open_read(std::ifstream &stream) const
 */
bool
Filename_C_open_read_1_B_pp(Filename const *param0, std::ifstream *param1) {
  return (*param0).open_read(*param1);
}

/*
 * C wrapper for
 * bool Filename::open_write(pofstream &stream, bool truncate) const
 */
bool
Filename_C_open_write_B_ppB(Filename const *param0, pofstream *param1, bool param2) {
  return (*param0).open_write(*param1, param2);
}

/*
 * C wrapper for
 * bool Filename::open_write(pofstream &stream, bool truncate) const
 */
bool
Filename_C_open_write_1_B_ppB(Filename const *param0, pofstream *param1) {
  return (*param0).open_write(*param1);
}

/*
 * C wrapper for
 * bool Filename::open_write(std::ofstream &stream, bool truncate) const
 */
bool
Filename_C_open_write_2_B_ppB(Filename const *param0, std::ofstream *param1, bool param2) {
  return (*param0).open_write(*param1, param2);
}

/*
 * C wrapper for
 * bool Filename::open_write(std::ofstream &stream, bool truncate) const
 */
bool
Filename_C_open_write_3_B_ppB(Filename const *param0, std::ofstream *param1) {
  return (*param0).open_write(*param1);
}

/*
 * C wrapper for
 * bool Filename::open_append(pofstream &stream) const
 */
bool
Filename_C_open_append_B_pp(Filename const *param0, pofstream *param1) {
  return (*param0).open_append(*param1);
}

/*
 * C wrapper for
 * bool Filename::open_append(std::ofstream &stream) const
 */
bool
Filename_C_open_append_1_B_pp(Filename const *param0, std::ofstream *param1) {
  return (*param0).open_append(*param1);
}

/*
 * C wrapper for
 * bool Filename::open_read_write(pfstream &stream, bool truncate) const
 */
bool
Filename_C_open_read_write_B_ppB(Filename const *param0, pfstream *param1, bool param2) {
  return (*param0).open_read_write(*param1, param2);
}

/*
 * C wrapper for
 * bool Filename::open_read_write(pfstream &stream, bool truncate) const
 */
bool
Filename_C_open_read_write_1_B_ppB(Filename const *param0, pfstream *param1) {
  return (*param0).open_read_write(*param1);
}

/*
 * C wrapper for
 * bool Filename::open_read_write(std::fstream &stream, bool truncate) const
 */
bool
Filename_C_open_read_write_2_B_ppB(Filename const *param0, std::fstream *param1, bool param2) {
  return (*param0).open_read_write(*param1, param2);
}

/*
 * C wrapper for
 * bool Filename::open_read_write(std::fstream &stream, bool truncate) const
 */
bool
Filename_C_open_read_write_3_B_ppB(Filename const *param0, std::fstream *param1) {
  return (*param0).open_read_write(*param1);
}

/*
 * C wrapper for
 * bool Filename::open_read_append(pfstream &stream) const
 */
bool
Filename_C_open_read_append_B_pp(Filename const *param0, pfstream *param1) {
  return (*param0).open_read_append(*param1);
}

/*
 * C wrapper for
 * bool Filename::open_read_append(std::fstream &stream) const
 */
bool
Filename_C_open_read_append_1_B_pp(Filename const *param0, std::fstream *param1) {
  return (*param0).open_read_append(*param1);
}

/*
 * C wrapper for
 * bool Filename::chdir(void) const
 */
bool
Filename_C_chdir_B_p(Filename const *param0) {
  return (*param0).chdir();
}

/*
 * C wrapper for
 * bool Filename::touch(void) const
 */
bool
Filename_C_touch_B_p(Filename const *param0) {
  return (*param0).touch();
}

/*
 * C wrapper for
 * bool Filename::unlink(void) const
 */
bool
Filename_C_unlink_B_p(Filename const *param0) {
  return (*param0).unlink();
}

/*
 * C wrapper for
 * bool Filename::rename_to(Filename const &other) const
 */
bool
Filename_C_rename_to_B_pp(Filename const *param0, Filename const *param1) {
  return (*param0).rename_to(*param1);
}

/*
 * C wrapper for
 * bool Filename::copy_to(Filename const &other) const
 */
bool
Filename_C_copy_to_B_pp(Filename const *param0, Filename const *param1) {
  return (*param0).copy_to(*param1);
}

/*
 * C wrapper for
 * bool Filename::make_dir(void) const
 */
bool
Filename_C_make_dir_B_p(Filename const *param0) {
  return (*param0).make_dir();
}

/*
 * C wrapper for
 * bool Filename::mkdir(void) const
 */
bool
Filename_C_mkdir_B_p(Filename const *param0) {
  return (*param0).mkdir();
}

/*
 * C wrapper for
 * bool Filename::rmdir(void) const
 */
bool
Filename_C_rmdir_B_p(Filename const *param0) {
  return (*param0).rmdir();
}

/*
 * C wrapper for
 * inline bool Filename::operator ==(std::string const &other) const
 */
bool
_inCKD07OBrR(Filename const *param0, char const *param1) {
  return (*param0).operator ==(std::string(param1));
}

/*
 * C wrapper for
 * inline bool Filename::operator !=(std::string const &other) const
 */
bool
_inCKD07sEaR(Filename const *param0, char const *param1) {
  return (*param0).operator !=(std::string(param1));
}

/*
 * C wrapper for
 * inline bool Filename::operator <(std::string const &other) const
 */
bool
_inCKD07YSEF(Filename const *param0, char const *param1) {
  return (*param0).operator <(std::string(param1));
}

/*
 * C wrapper for
 * inline int Filename::compare_to(Filename const &other) const
 */
int
Filename_C_compare_to_i_pp(Filename const *param0, Filename const *param1) {
  return (*param0).compare_to(*param1);
}

/*
 * C wrapper for
 * inline bool Filename::__nonzero__(void) const
 */
bool
Filename_C___nonzero___B_p(Filename const *param0) {
  return (*param0).__nonzero__();
}

/*
 * C wrapper for
 * int Filename::get_hash(void) const
 */
int
Filename_C_get_hash_i_p(Filename const *param0) {
  return (*param0).get_hash();
}

/*
 * C wrapper for
 * inline void Filename::output(std::ostream &out) const
 */
void
Filename_C_output_v_pp(Filename const *param0, std::ostream *param1) {
  (*param0).output(*param1);
}

/*
 * C wrapper for
 * static inline void Filename::set_filesystem_encoding(TextEncoder::Encoding encoding)
 */
void
Filename_C_set_filesystem_encoding_v_pp(TextEncoder::Encoding param0) {
  Filename::set_filesystem_encoding(param0);
}

/*
 * C wrapper for
 * static inline TextEncoder::Encoding Filename::get_filesystem_encoding(void)
 */
TextEncoder::Encoding
Filename_C_get_filesystem_encoding_p_v() {
  return Filename::get_filesystem_encoding();
}

/*
 * C wrapper for
 * static TypeHandle Filename::get_class_type(void)
 */
int
Filename_C_get_class_type_i_v() {
  return (Filename::get_class_type()).get_index();
}

/*
 * C wrapper for
 * static void Filename::init_type(void)
 */
void
Filename_C_init_type_v_v() {
  Filename::init_type();
}

/*
 * C wrapper for
 * inline LVecBase3f::LVecBase3f(void) = default
 */
LVecBase3f *
LVecBase3f_C_ctor_p_v() {
  return new LVecBase3f();
}

/*
 * C wrapper for
 * inline LVecBase3f::LVecBase3f(LVecBase2f const &copy, float z)
 */
LVecBase3f *
LVecBase3f_C_ctor_p_pf(LVecBase2f const *param0, float param1) {
  return new LVecBase3f(*param0, param1);
}

/*
 * C wrapper for
 * inline LVecBase3f::LVecBase3f(LVecBase3f const &) = default
 */
LVecBase3f *
LVecBase3f_C_ctor_p_p(LVecBase3f const *param0) {
  return new LVecBase3f(*param0);
}

/*
 * C wrapper for
 * inline LVecBase3f::LVecBase3f(LVecBase3f::EVector3 const &v)
 */
LVecBase3f *
LVecBase3f_C_ctor_1_p_p(LVecBase3f::EVector3 const *param0) {
  return new LVecBase3f(*param0);
}

/*
 * C wrapper for
 * inline LVecBase3f::LVecBase3f(float fill_value)
 */
LVecBase3f *
LVecBase3f_C_ctor_p_f(float param0) {
  return new LVecBase3f(param0);
}

/*
 * C wrapper for
 * inline LVecBase3f::LVecBase3f(float x, float y, float z)
 */
LVecBase3f *
LVecBase3f_C_ctor_p_fff(float param0, float param1, float param2) {
  return new LVecBase3f(param0, param1, param2);
}

/*
 * C wrapper for
 * inline void *LVecBase3f::operator new(std::size_t size)
 */
void
_inCKD074Nkp(LVecBase3f *param0, std::size_t param1) {
  (*param0).operator new(param1);
}

/*
 * C wrapper for
 * void LVecBase3f::operator =(LVecBase3f const &copy) = default
 */
LVecBase3f *
_inCKD07qOP9(LVecBase3f *param0, LVecBase3f const *param1) {
  (*param0).operator =(*param1);
  return param0;
}

/*
 * C wrapper for
 * void LVecBase3f::operator =(float fill_value) = default
 */
LVecBase3f *
_inCKD07rfXC(LVecBase3f *param0, float param1) {
  (*param0).operator =(param1);
  return param0;
}

/*
 * C wrapper for
 * static inline LVecBase3f const &LVecBase3f::zero(void)
 */
LVecBase3f const *
LVecBase3f_C_zero_p_v() {
  return &(LVecBase3f::zero());
}

/*
 * C wrapper for
 * static inline LVecBase3f const &LVecBase3f::unit_x(void)
 */
LVecBase3f const *
LVecBase3f_C_unit_x_p_v() {
  return &(LVecBase3f::unit_x());
}

/*
 * C wrapper for
 * static inline LVecBase3f const &LVecBase3f::unit_y(void)
 */
LVecBase3f const *
LVecBase3f_C_unit_y_p_v() {
  return &(LVecBase3f::unit_y());
}

/*
 * C wrapper for
 * static inline LVecBase3f const &LVecBase3f::unit_z(void)
 */
LVecBase3f const *
LVecBase3f_C_unit_z_p_v() {
  return &(LVecBase3f::unit_z());
}

/*
 * C wrapper for
 * inline float &LVecBase3f::operator [](int i)
 */
void
_inCKD0701HX(LVecBase3f *param0, int param1, float param2) {
  (*param0).operator [](param1) = param2;
}

/*
 * C wrapper for
 * inline float LVecBase3f::operator [](int i) const
 */
float
_inCKD07nq7z(LVecBase3f const *param0, int param1) {
  return (*param0).operator [](param1);
}

/*
 * C wrapper for
 * static constexpr int LVecBase3f::size(void)
 */
int
LVecBase3f_C_size_i_v() {
  return LVecBase3f::size();
}

/*
 * C wrapper for
 * inline bool LVecBase3f::is_nan(void) const
 */
bool
LVecBase3f_C_is_nan_B_p(LVecBase3f const *param0) {
  return (*param0).is_nan();
}

/*
 * C wrapper for
 * inline float LVecBase3f::get_cell(int i) const
 */
float
LVecBase3f_C_get_cell_f_pi(LVecBase3f const *param0, int param1) {
  return (*param0).get_cell(param1);
}

/*
 * C wrapper for
 * inline float LVecBase3f::get_x(void) const
 */
float
LVecBase3f_C_get_x_f_p(LVecBase3f const *param0) {
  return (*param0).get_x();
}

/*
 * C wrapper for
 * inline float LVecBase3f::get_y(void) const
 */
float
LVecBase3f_C_get_y_f_p(LVecBase3f const *param0) {
  return (*param0).get_y();
}

/*
 * C wrapper for
 * inline float LVecBase3f::get_z(void) const
 */
float
LVecBase3f_C_get_z_f_p(LVecBase3f const *param0) {
  return (*param0).get_z();
}

/*
 * C wrapper for
 * inline void LVecBase3f::set_cell(int i, float value)
 */
void
LVecBase3f_C_set_cell_v_pif(LVecBase3f *param0, int param1, float param2) {
  (*param0).set_cell(param1, param2);
}

/*
 * C wrapper for
 * inline void LVecBase3f::set_x(float value)
 */
void
LVecBase3f_C_set_x_v_pf(LVecBase3f *param0, float param1) {
  (*param0).set_x(param1);
}

/*
 * C wrapper for
 * inline void LVecBase3f::set_y(float value)
 */
void
LVecBase3f_C_set_y_v_pf(LVecBase3f *param0, float param1) {
  (*param0).set_y(param1);
}

/*
 * C wrapper for
 * inline void LVecBase3f::set_z(float value)
 */
void
LVecBase3f_C_set_z_v_pf(LVecBase3f *param0, float param1) {
  (*param0).set_z(param1);
}

/*
 * C wrapper for
 * inline LVecBase2f LVecBase3f::get_xy(void) const
 */
LVecBase2f *
LVecBase3f_C_get_xy_p_p(LVecBase3f const *param0) {
  return new LVecBase2f((*param0).get_xy());
}

/*
 * C wrapper for
 * inline LVecBase2f LVecBase3f::get_xz(void) const
 */
LVecBase2f *
LVecBase3f_C_get_xz_p_p(LVecBase3f const *param0) {
  return new LVecBase2f((*param0).get_xz());
}

/*
 * C wrapper for
 * inline LVecBase2f LVecBase3f::get_yz(void) const
 */
LVecBase2f *
LVecBase3f_C_get_yz_p_p(LVecBase3f const *param0) {
  return new LVecBase2f((*param0).get_yz());
}

/*
 * C wrapper for
 * inline void LVecBase3f::add_to_cell(int i, float value)
 */
void
LVecBase3f_C_add_to_cell_v_pif(LVecBase3f *param0, int param1, float param2) {
  (*param0).add_to_cell(param1, param2);
}

/*
 * C wrapper for
 * inline void LVecBase3f::add_x(float value)
 */
void
LVecBase3f_C_add_x_v_pf(LVecBase3f *param0, float param1) {
  (*param0).add_x(param1);
}

/*
 * C wrapper for
 * inline void LVecBase3f::add_y(float value)
 */
void
LVecBase3f_C_add_y_v_pf(LVecBase3f *param0, float param1) {
  (*param0).add_y(param1);
}

/*
 * C wrapper for
 * inline void LVecBase3f::add_z(float value)
 */
void
LVecBase3f_C_add_z_v_pf(LVecBase3f *param0, float param1) {
  (*param0).add_z(param1);
}

/*
 * C wrapper for
 * inline float const *LVecBase3f::get_data(void) const
 */
void
LVecBase3f_C_get_data_v_p(LVecBase3f const *param0) {
  (*param0).get_data();
}

/*
 * C wrapper for
 * static constexpr int LVecBase3f::get_num_components(void)
 */
int
LVecBase3f_C_get_num_components_i_v() {
  return LVecBase3f::get_num_components();
}

/*
 * C wrapper for
 * inline LVecBase3f::iterator LVecBase3f::begin(void)
 */
void
LVecBase3f_C_begin_v_p(LVecBase3f *param0) {
  (*param0).begin();
}

/*
 * C wrapper for
 * inline LVecBase3f::const_iterator LVecBase3f::begin(void) const
 */
void
LVecBase3f_C_begin_1_v_p(LVecBase3f const *param0) {
  (*param0).begin();
}

/*
 * C wrapper for
 * inline LVecBase3f::iterator LVecBase3f::end(void)
 */
void
LVecBase3f_C_end_v_p(LVecBase3f *param0) {
  (*param0).end();
}

/*
 * C wrapper for
 * inline LVecBase3f::const_iterator LVecBase3f::end(void) const
 */
void
LVecBase3f_C_end_1_v_p(LVecBase3f const *param0) {
  (*param0).end();
}

/*
 * C wrapper for
 * inline void LVecBase3f::fill(float fill_value)
 */
void
LVecBase3f_C_fill_v_pf(LVecBase3f *param0, float param1) {
  (*param0).fill(param1);
}

/*
 * C wrapper for
 * inline void LVecBase3f::set(float x, float y, float z)
 */
void
LVecBase3f_C_set_v_pfff(LVecBase3f *param0, float param1, float param2, float param3) {
  (*param0).set(param1, param2, param3);
}

/*
 * C wrapper for
 * inline float LVecBase3f::dot(LVecBase3f const &other) const
 */
float
LVecBase3f_C_dot_f_pp(LVecBase3f const *param0, LVecBase3f const *param1) {
  return (*param0).dot(*param1);
}

/*
 * C wrapper for
 * inline float LVecBase3f::length_squared(void) const
 */
float
LVecBase3f_C_length_squared_f_p(LVecBase3f const *param0) {
  return (*param0).length_squared();
}

/*
 * C wrapper for
 * inline float LVecBase3f::length(void) const
 */
float
LVecBase3f_C_length_f_p(LVecBase3f const *param0) {
  return (*param0).length();
}

/*
 * C wrapper for
 * inline bool LVecBase3f::normalize(void)
 */
bool
LVecBase3f_C_normalize_B_p(LVecBase3f *param0) {
  return (*param0).normalize();
}

/*
 * C wrapper for
 * inline LVecBase3f LVecBase3f::normalized(void) const
 */
LVecBase3f *
LVecBase3f_C_normalized_p_p(LVecBase3f const *param0) {
  return new LVecBase3f((*param0).normalized());
}

/*
 * C wrapper for
 * inline LVecBase3f LVecBase3f::project(LVecBase3f const &onto) const
 */
LVecBase3f *
LVecBase3f_C_project_p_pp(LVecBase3f const *param0, LVecBase3f const *param1) {
  return new LVecBase3f((*param0).project(*param1));
}

/*
 * C wrapper for
 * inline LVecBase3f LVecBase3f::cross(LVecBase3f const &other) const
 */
LVecBase3f *
LVecBase3f_C_cross_p_pp(LVecBase3f const *param0, LVecBase3f const *param1) {
  return new LVecBase3f((*param0).cross(*param1));
}

/*
 * C wrapper for
 * inline bool LVecBase3f::operator <(LVecBase3f const &other) const
 */
bool
_inCKD07dE8o(LVecBase3f const *param0, LVecBase3f const *param1) {
  return (*param0).operator <(*param1);
}

/*
 * C wrapper for
 * inline bool LVecBase3f::operator ==(LVecBase3f const &other) const
 */
bool
_inCKD07Ft4v(LVecBase3f const *param0, LVecBase3f const *param1) {
  return (*param0).operator ==(*param1);
}

/*
 * C wrapper for
 * inline bool LVecBase3f::operator !=(LVecBase3f const &other) const
 */
bool
_inCKD07BNge(LVecBase3f const *param0, LVecBase3f const *param1) {
  return (*param0).operator !=(*param1);
}

/*
 * C wrapper for
 * inline LVecBase3f LVecBase3f::get_standardized_hpr(void) const
 */
LVecBase3f *
LVecBase3f_C_get_standardized_hpr_p_p(LVecBase3f const *param0) {
  return new LVecBase3f((*param0).get_standardized_hpr());
}

/*
 * C wrapper for
 * inline int LVecBase3f::compare_to(LVecBase3f const &other) const
 */
int
LVecBase3f_C_compare_to_i_pp(LVecBase3f const *param0, LVecBase3f const *param1) {
  return (*param0).compare_to(*param1);
}

/*
 * C wrapper for
 * inline int LVecBase3f::compare_to(LVecBase3f const &other, float threshold) const
 */
int
LVecBase3f_C_compare_to_i_ppf(LVecBase3f const *param0, LVecBase3f const *param1, float param2) {
  return (*param0).compare_to(*param1, param2);
}

/*
 * C wrapper for
 * inline std::size_t LVecBase3f::get_hash(void) const
 */
std::size_t
LVecBase3f_C_get_hash_p_p(LVecBase3f const *param0) {
  return (*param0).get_hash();
}

/*
 * C wrapper for
 * inline std::size_t LVecBase3f::get_hash(float threshold) const
 */
std::size_t
LVecBase3f_C_get_hash_p_pf(LVecBase3f const *param0, float param1) {
  return (*param0).get_hash(param1);
}

/*
 * C wrapper for
 * inline std::size_t LVecBase3f::add_hash(std::size_t hash) const
 */
std::size_t
LVecBase3f_C_add_hash_p_pp(LVecBase3f const *param0, std::size_t param1) {
  return (*param0).add_hash(param1);
}

/*
 * C wrapper for
 * inline std::size_t LVecBase3f::add_hash(std::size_t hash, float threshold) const
 */
std::size_t
LVecBase3f_C_add_hash_p_ppf(LVecBase3f const *param0, std::size_t param1, float param2) {
  return (*param0).add_hash(param1, param2);
}

/*
 * C wrapper for
 * inline void LVecBase3f::generate_hash(ChecksumHashGenerator &hashgen) const
 */
void
LVecBase3f_C_generate_hash_v_pp(LVecBase3f const *param0, ChecksumHashGenerator *param1) {
  (*param0).generate_hash(*param1);
}

/*
 * C wrapper for
 * inline void LVecBase3f::generate_hash(ChecksumHashGenerator &hashgen, float threshold) const
 */
void
LVecBase3f_C_generate_hash_v_ppf(LVecBase3f const *param0, ChecksumHashGenerator *param1, float param2) {
  (*param0).generate_hash(*param1, param2);
}

/*
 * C wrapper for
 * inline LVecBase3f LVecBase3f::operator -(void) const
 */
LVecBase3f *
_inCKD07iO_P(LVecBase3f const *param0) {
  return new LVecBase3f((*param0).operator -());
}

/*
 * C wrapper for
 * inline LVecBase3f LVecBase3f::operator +(LVecBase3f const &other) const
 */
LVecBase3f *
_inCKD07fM9C(LVecBase3f const *param0, LVecBase3f const *param1) {
  return new LVecBase3f((*param0).operator +(*param1));
}

/*
 * C wrapper for
 * inline LVecBase3f LVecBase3f::operator -(LVecBase3f const &other) const
 */
LVecBase3f *
_inCKD07f8eW(LVecBase3f const *param0, LVecBase3f const *param1) {
  return new LVecBase3f((*param0).operator -(*param1));
}

/*
 * C wrapper for
 * inline LVecBase3f LVecBase3f::operator *(float scalar) const
 */
LVecBase3f *
_inCKD07Hdlj(LVecBase3f const *param0, float param1) {
  return new LVecBase3f((*param0).operator *(param1));
}

/*
 * C wrapper for
 * inline LVecBase3f LVecBase3f::operator /(float scalar) const
 */
LVecBase3f *
_inCKD07Y1ZU(LVecBase3f const *param0, float param1) {
  return new LVecBase3f((*param0).operator /(param1));
}

/*
 * C wrapper for
 * inline void LVecBase3f::operator +=(LVecBase3f const &other)
 */
LVecBase3f *
_inCKD07GqXQ(LVecBase3f *param0, LVecBase3f const *param1) {
  (*param0).operator +=(*param1);
  return param0;
}

/*
 * C wrapper for
 * inline void LVecBase3f::operator -=(LVecBase3f const &other)
 */
LVecBase3f *
_inCKD07Ga5j(LVecBase3f *param0, LVecBase3f const *param1) {
  (*param0).operator -=(*param1);
  return param0;
}

/*
 * C wrapper for
 * inline void LVecBase3f::operator *=(float scalar)
 */
LVecBase3f *
_inCKD07PZfq(LVecBase3f *param0, float param1) {
  (*param0).operator *=(param1);
  return param0;
}

/*
 * C wrapper for
 * inline void LVecBase3f::operator /=(float scalar)
 */
LVecBase3f *
_inCKD07OhTb(LVecBase3f *param0, float param1) {
  (*param0).operator /=(param1);
  return param0;
}

/*
 * C wrapper for
 * inline void LVecBase3f::componentwise_mult(LVecBase3f const &other)
 */
void
LVecBase3f_C_componentwise_mult_v_pp(LVecBase3f *param0, LVecBase3f const *param1) {
  (*param0).componentwise_mult(*param1);
}

/*
 * C wrapper for
 * inline LVecBase3f LVecBase3f::fmax(LVecBase3f const &other) const
 */
LVecBase3f *
LVecBase3f_C_fmax_p_pp(LVecBase3f const *param0, LVecBase3f const *param1) {
  return new LVecBase3f((*param0).fmax(*param1));
}

/*
 * C wrapper for
 * inline LVecBase3f LVecBase3f::fmin(LVecBase3f const &other) const
 */
LVecBase3f *
LVecBase3f_C_fmin_p_pp(LVecBase3f const *param0, LVecBase3f const *param1) {
  return new LVecBase3f((*param0).fmin(*param1));
}

/*
 * C wrapper for
 * inline void LVecBase3f::cross_into(LVecBase3f const &other)
 */
void
LVecBase3f_C_cross_into_v_pp(LVecBase3f *param0, LVecBase3f const *param1) {
  (*param0).cross_into(*param1);
}

/*
 * C wrapper for
 * inline bool LVecBase3f::almost_equal(LVecBase3f const &other) const
 */
bool
LVecBase3f_C_almost_equal_B_pp(LVecBase3f const *param0, LVecBase3f const *param1) {
  return (*param0).almost_equal(*param1);
}

/*
 * C wrapper for
 * inline bool LVecBase3f::almost_equal(LVecBase3f const &other, float threshold) const
 */
bool
LVecBase3f_C_almost_equal_B_ppf(LVecBase3f const *param0, LVecBase3f const *param1, float param2) {
  return (*param0).almost_equal(*param1, param2);
}

/*
 * C wrapper for
 * inline void LVecBase3f::output(std::ostream &out) const
 */
void
LVecBase3f_C_output_v_pp(LVecBase3f const *param0, std::ostream *param1) {
  (*param0).output(*param1);
}

/*
 * C wrapper for
 * inline void LVecBase3f::write_datagram_fixed(Datagram &destination) const
 */
void
LVecBase3f_C_write_datagram_fixed_v_pp(LVecBase3f const *param0, Datagram *param1) {
  (*param0).write_datagram_fixed(*param1);
}

/*
 * C wrapper for
 * inline void LVecBase3f::read_datagram_fixed(DatagramIterator &source)
 */
void
LVecBase3f_C_read_datagram_fixed_v_pp(LVecBase3f *param0, DatagramIterator *param1) {
  (*param0).read_datagram_fixed(*param1);
}

/*
 * C wrapper for
 * inline void LVecBase3f::write_datagram(Datagram &destination) const
 */
void
LVecBase3f_C_write_datagram_v_pp(LVecBase3f const *param0, Datagram *param1) {
  (*param0).write_datagram(*param1);
}

/*
 * C wrapper for
 * inline void LVecBase3f::read_datagram(DatagramIterator &source)
 */
void
LVecBase3f_C_read_datagram_v_pp(LVecBase3f *param0, DatagramIterator *param1) {
  (*param0).read_datagram(*param1);
}

/*
 * C wrapper for
 * LVecBase3f::EVector3 LVecBase3f::get_v(void) const
 */
LVecBase3f::EVector3 *
LVecBase3f_C_get_v_p_p(LVecBase3f const *param0) {
  return new LVecBase3f::EVector3((param0)->_v);
}

/*
 * C wrapper for
 * static TypeHandle LVecBase3f::get_class_type(void)
 */
int
LVecBase3f_C_get_class_type_i_v() {
  return (LVecBase3f::get_class_type()).get_index();
}

/*
 * C wrapper for
 * static void LVecBase3f::init_type(void)
 */
void
LVecBase3f_C_init_type_v_v() {
  LVecBase3f::init_type();
}

/*
 * C wrapper for
 * inline PandaFramework *WindowFramework::get_panda_framework(void) const
 */
PandaFramework *
WindowFramework_C_get_panda_framework_p_p(WindowFramework const *param0) {
  return (*param0).get_panda_framework();
}

/*
 * C wrapper for
 * inline GraphicsWindow *WindowFramework::get_graphics_window(void) const
 */
GraphicsWindow *
WindowFramework_C_get_graphics_window_p_p(WindowFramework const *param0) {
  return (*param0).get_graphics_window();
}

/*
 * C wrapper for
 * inline GraphicsOutput *WindowFramework::get_graphics_output(void) const
 */
GraphicsOutput *
WindowFramework_C_get_graphics_output_p_p(WindowFramework const *param0) {
  return (*param0).get_graphics_output();
}

/*
 * C wrapper for
 * NodePath WindowFramework::get_camera_group(void)
 */
NodePath *
WindowFramework_C_get_camera_group_p_p(WindowFramework *param0) {
  return new NodePath((*param0).get_camera_group());
}

/*
 * C wrapper for
 * inline int WindowFramework::get_num_cameras(void) const
 */
int
WindowFramework_C_get_num_cameras_i_p(WindowFramework const *param0) {
  return (*param0).get_num_cameras();
}

/*
 * C wrapper for
 * inline Camera *WindowFramework::get_camera(int n) const
 */
Camera *
WindowFramework_C_get_camera_p_pi(WindowFramework const *param0, int param1) {
  return (*param0).get_camera(param1);
}

/*
 * C wrapper for
 * inline DisplayRegion *WindowFramework::get_display_region_2d(void) const
 */
DisplayRegion *
WindowFramework_C_get_display_region_2d_p_p(WindowFramework const *param0) {
  return (*param0).get_display_region_2d();
}

/*
 * C wrapper for
 * inline DisplayRegion *WindowFramework::get_display_region_3d(void) const
 */
DisplayRegion *
WindowFramework_C_get_display_region_3d_p_p(WindowFramework const *param0) {
  return (*param0).get_display_region_3d();
}

/*
 * C wrapper for
 * NodePath WindowFramework::get_render(void)
 */
NodePath *
WindowFramework_C_get_render_p_p(WindowFramework *param0) {
  return new NodePath((*param0).get_render());
}

/*
 * C wrapper for
 * NodePath WindowFramework::get_render_2d(void)
 */
NodePath *
WindowFramework_C_get_render_2d_p_p(WindowFramework *param0) {
  return new NodePath((*param0).get_render_2d());
}

/*
 * C wrapper for
 * NodePath WindowFramework::get_aspect_2d(void)
 */
NodePath *
WindowFramework_C_get_aspect_2d_p_p(WindowFramework *param0) {
  return new NodePath((*param0).get_aspect_2d());
}

/*
 * C wrapper for
 * NodePath WindowFramework::get_pixel_2d(void)
 */
NodePath *
WindowFramework_C_get_pixel_2d_p_p(WindowFramework *param0) {
  return new NodePath((*param0).get_pixel_2d());
}

/*
 * C wrapper for
 * NodePath WindowFramework::get_mouse(void)
 */
NodePath *
WindowFramework_C_get_mouse_p_p(WindowFramework *param0) {
  return new NodePath((*param0).get_mouse());
}

/*
 * C wrapper for
 * NodePath WindowFramework::get_button_thrower(void)
 */
NodePath *
WindowFramework_C_get_button_thrower_p_p(WindowFramework *param0) {
  return new NodePath((*param0).get_button_thrower());
}

/*
 * C wrapper for
 * void WindowFramework::enable_keyboard(void)
 */
void
WindowFramework_C_enable_keyboard_v_p(WindowFramework *param0) {
  (*param0).enable_keyboard();
}

/*
 * C wrapper for
 * void WindowFramework::setup_trackball(void)
 */
void
WindowFramework_C_setup_trackball_v_p(WindowFramework *param0) {
  (*param0).setup_trackball();
}

/*
 * C wrapper for
 * void WindowFramework::center_trackball(NodePath const &object)
 */
void
WindowFramework_C_center_trackball_v_pp(WindowFramework *param0, NodePath const *param1) {
  (*param0).center_trackball(*param1);
}

/*
 * C wrapper for
 * bool WindowFramework::load_models(NodePath const &parent, pvector< Filename > const &files)
 */
bool
WindowFramework_C_load_models_B_ppp(WindowFramework *param0, NodePath const *param1, pvector< Filename > const *param2) {
  return (*param0).load_models(*param1, *param2);
}

/*
 * C wrapper for
 * NodePath WindowFramework::load_model(NodePath const &parent, Filename filename)
 */
NodePath *
WindowFramework_C_load_model_p_ppp(WindowFramework *param0, NodePath const *param1, Filename *param2) {
  return new NodePath((*param0).load_model(*param1, *param2));
}

/*
 * C wrapper for
 * NodePath WindowFramework::load_default_model(NodePath const &parent)
 */
NodePath *
WindowFramework_C_load_default_model_p_pp(WindowFramework *param0, NodePath const *param1) {
  return new NodePath((*param0).load_default_model(*param1));
}

/*
 * C wrapper for
 * void WindowFramework::loop_animations(int hierarchy_match_flags)
 */
void
WindowFramework_C_loop_animations_v_pi(WindowFramework *param0, int param1) {
  (*param0).loop_animations(param1);
}

/*
 * C wrapper for
 * void WindowFramework::loop_animations(int hierarchy_match_flags)
 */
void
WindowFramework_C_loop_animations_1_v_pi(WindowFramework *param0) {
  (*param0).loop_animations();
}

/*
 * C wrapper for
 * void WindowFramework::stagger_animations(void)
 */
void
WindowFramework_C_stagger_animations_v_p(WindowFramework *param0) {
  (*param0).stagger_animations();
}

/*
 * C wrapper for
 * void WindowFramework::next_anim_control(void)
 */
void
WindowFramework_C_next_anim_control_v_p(WindowFramework *param0) {
  (*param0).next_anim_control();
}

/*
 * C wrapper for
 * void WindowFramework::set_anim_controls(bool enable)
 */
void
WindowFramework_C_set_anim_controls_v_pB(WindowFramework *param0, bool param1) {
  (*param0).set_anim_controls(param1);
}

/*
 * C wrapper for
 * inline bool WindowFramework::get_anim_controls(void) const
 */
bool
WindowFramework_C_get_anim_controls_B_p(WindowFramework const *param0) {
  return (*param0).get_anim_controls();
}

/*
 * C wrapper for
 * void WindowFramework::adjust_dimensions(void)
 */
void
WindowFramework_C_adjust_dimensions_v_p(WindowFramework *param0) {
  (*param0).adjust_dimensions();
}

/*
 * C wrapper for
 * WindowFramework *WindowFramework::split_window(WindowFramework::SplitType split_type)
 */
WindowFramework *
WindowFramework_C_split_window_p_pp(WindowFramework *param0, WindowFramework::SplitType param1) {
  return (*param0).split_window(param1);
}

/*
 * C wrapper for
 * WindowFramework *WindowFramework::split_window(WindowFramework::SplitType split_type)
 */
WindowFramework *
WindowFramework_C_split_window_1_p_pp(WindowFramework *param0) {
  return (*param0).split_window();
}

/*
 * C wrapper for
 * void WindowFramework::set_wireframe(bool enable, bool filled)
 */
void
WindowFramework_C_set_wireframe_v_pBB(WindowFramework *param0, bool param1, bool param2) {
  (*param0).set_wireframe(param1, param2);
}

/*
 * C wrapper for
 * void WindowFramework::set_wireframe(bool enable, bool filled)
 */
void
WindowFramework_C_set_wireframe_1_v_pBB(WindowFramework *param0, bool param1) {
  (*param0).set_wireframe(param1);
}

/*
 * C wrapper for
 * void WindowFramework::set_texture(bool enable)
 */
void
WindowFramework_C_set_texture_v_pB(WindowFramework *param0, bool param1) {
  (*param0).set_texture(param1);
}

/*
 * C wrapper for
 * void WindowFramework::set_two_sided(bool enable)
 */
void
WindowFramework_C_set_two_sided_v_pB(WindowFramework *param0, bool param1) {
  (*param0).set_two_sided(param1);
}

/*
 * C wrapper for
 * void WindowFramework::set_one_sided_reverse(bool enable)
 */
void
WindowFramework_C_set_one_sided_reverse_v_pB(WindowFramework *param0, bool param1) {
  (*param0).set_one_sided_reverse(param1);
}

/*
 * C wrapper for
 * void WindowFramework::set_lighting(bool enable)
 */
void
WindowFramework_C_set_lighting_v_pB(WindowFramework *param0, bool param1) {
  (*param0).set_lighting(param1);
}

/*
 * C wrapper for
 * void WindowFramework::set_perpixel(bool enable)
 */
void
WindowFramework_C_set_perpixel_v_pB(WindowFramework *param0, bool param1) {
  (*param0).set_perpixel(param1);
}

/*
 * C wrapper for
 * void WindowFramework::set_background_type(WindowFramework::BackgroundType type)
 */
void
WindowFramework_C_set_background_type_v_pp(WindowFramework *param0, WindowFramework::BackgroundType param1) {
  (*param0).set_background_type(param1);
}

/*
 * C wrapper for
 * inline bool WindowFramework::get_wireframe(void) const
 */
bool
WindowFramework_C_get_wireframe_B_p(WindowFramework const *param0) {
  return (*param0).get_wireframe();
}

/*
 * C wrapper for
 * inline bool WindowFramework::get_wireframe_filled(void) const
 */
bool
WindowFramework_C_get_wireframe_filled_B_p(WindowFramework const *param0) {
  return (*param0).get_wireframe_filled();
}

/*
 * C wrapper for
 * inline bool WindowFramework::get_texture(void) const
 */
bool
WindowFramework_C_get_texture_B_p(WindowFramework const *param0) {
  return (*param0).get_texture();
}

/*
 * C wrapper for
 * inline bool WindowFramework::get_two_sided(void) const
 */
bool
WindowFramework_C_get_two_sided_B_p(WindowFramework const *param0) {
  return (*param0).get_two_sided();
}

/*
 * C wrapper for
 * inline bool WindowFramework::get_one_sided_reverse(void) const
 */
bool
WindowFramework_C_get_one_sided_reverse_B_p(WindowFramework const *param0) {
  return (*param0).get_one_sided_reverse();
}

/*
 * C wrapper for
 * inline bool WindowFramework::get_lighting(void) const
 */
bool
WindowFramework_C_get_lighting_B_p(WindowFramework const *param0) {
  return (*param0).get_lighting();
}

/*
 * C wrapper for
 * inline bool WindowFramework::get_perpixel(void) const
 */
bool
WindowFramework_C_get_perpixel_B_p(WindowFramework const *param0) {
  return (*param0).get_perpixel();
}

/*
 * C wrapper for
 * inline WindowFramework::BackgroundType WindowFramework::get_background_type(void) const
 */
WindowFramework::BackgroundType
WindowFramework_C_get_background_type_p_p(WindowFramework const *param0) {
  return (*param0).get_background_type();
}

/*
 * C wrapper for
 * static TextFont *WindowFramework::get_shuttle_controls_font(void)
 */
TextFont *
WindowFramework_C_get_shuttle_controls_font_p_v() {
  return WindowFramework::get_shuttle_controls_font();
}

/*
 * C wrapper for
 * NodePath WindowFramework::make_camera(void)
 */
NodePath *
WindowFramework_C_make_camera_p_p(WindowFramework *param0) {
  return new NodePath((*param0).make_camera());
}

/*
 * C wrapper for
 * static TypeHandle WindowFramework::get_class_type(void)
 */
int
WindowFramework_C_get_class_type_i_v() {
  return (WindowFramework::get_class_type()).get_index();
}

/*
 * C wrapper for
 * static void WindowFramework::init_type(void)
 */
void
WindowFramework_C_init_type_v_v() {
  WindowFramework::init_type();
}

/*
 * C wrapper for
 * virtual TypeHandle WindowFramework::get_type(void) const
 */
int
WindowFramework_C_get_type_i_p(WindowFramework const *param0) {
  return ((*param0).get_type()).get_index();
}

/*
 * C wrapper for
 * virtual TypeHandle WindowFramework::force_init_type(void)
 */
int
WindowFramework_C_force_init_type_i_p(WindowFramework *param0) {
  return ((*param0).force_init_type()).get_index();
}

/*
 * C wrapper for
 * inline WindowFramework::WindowFramework(WindowFramework const &) = default
 */
WindowFramework *
WindowFramework_C_ctor_p_p(WindowFramework const *param0) {
  return new WindowFramework(*param0);
}

/*
 * C wrapper for
 * void NodePath::reparent_to(NodePath const &other)
 */
void
NodePath_C_reparent_to_v_pp(NodePath *param0, NodePath const *param1) {
  (*param0).reparent_to(*param1);
}

/*
 * C wrapper for
 * void NodePath::look_at(PN_stdfloat x, PN_stdfloat y, PN_stdfloat z)
 */
void
NodePath_C_look_at_v_pfff(NodePath *param0, PN_stdfloat param1, PN_stdfloat param2, PN_stdfloat param3) {
  (*param0).look_at(param1, param2, param3);
}

/*
 * C wrapper for
 * void NodePath::set_pos(LVecBase3f const &)
 */
void
NodePath_C_set_pos_v_pp(NodePath *param0, LVecBase3f const *param1) {
  (*param0).set_pos(*param1);
}

/*
 * C wrapper for
 * void NodePath::set_scale(LVecBase3f const &)
 */
void
NodePath_C_set_scale_v_pp(NodePath *param0, LVecBase3f const *param1) {
  (*param0).set_scale(*param1);
}

/*
 * C wrapper for
 * inline NodePath::NodePath(void) = default
 */
NodePath *
NodePath_C_ctor_p_v() {
  return new NodePath();
}

/*
 * C wrapper for
 * inline NodePath::NodePath(NodePath const &) = default
 */
NodePath *
NodePath_C_ctor_p_p(NodePath const *param0) {
  return new NodePath(*param0);
}

/*
 * C wrapper for
 * Engine::Engine(void)
 */
Engine *
Engine_C_ctor_p_v() {
  return new Engine();
}

/*
 * C wrapper for
 * inline Engine::Engine(Engine const &) = default
 */
Engine *
Engine_C_ctor_p_p(Engine const *param0) {
  return new Engine(*param0);
}

/*
 * C wrapper for
 * void Engine::dtor(void)
 */
void
Engine_C_dtor_v_p(Engine *param0) {
  (*param0).dtor();
}

/*
 * C wrapper for
 * static void Engine::stop(void)
 */
void
Engine_C_stop_v_v() {
  Engine::stop();
}

/*
 * C wrapper for
 * static int Engine::is_alive(void)
 */
int
Engine_C_is_alive_i_v() {
  return Engine::is_alive();
}

/*
 * C wrapper for
 * int Engine::HelloEngine(void)
 */
int
Engine_C_HelloEngine_i_p(Engine *param0) {
  return (*param0).HelloEngine();
}

/*
 * C wrapper for
 * int Engine::casetest(int i, std::string s, bool b)
 */
int
Engine_C_casetest_i_pipB(Engine *param0, int param1, char const *param2, bool param3) {
  return (*param0).casetest(param1, std::string(param2), param3);
}

/*
 * C wrapper for
 * NodePath *Engine::load_model(char const *filename)
 */
NodePath *
Engine_C_load_model_p_ps(Engine *param0, char const *param1) {
  return (*param0).load_model(param1);
}

/*
 * C wrapper for
 * void Engine::attach(NodePath *mdl)
 */
void
Engine_C_attach_v_pp(Engine *param0, NodePath *param1) {
  (*param0).attach(param1);
}

/*
 * C wrapper for
 * void Engine::op_pos(NodePath *np, LVecBase3f *v3f)
 */
void
Engine_C_op_pos_v_ppp(Engine *param0, NodePath *param1, LVecBase3f *param2) {
  (*param0).op_pos(param1, param2);
}

/*
 * C wrapper for
 * void Engine::op_scale(NodePath *np, LVecBase3f *v3f)
 */
void
Engine_C_op_scale_v_ppp(Engine *param0, NodePath *param1, LVecBase3f *param2) {
  (*param0).op_scale(param1, param2);
}

/*
 * C wrapper for
 * void Engine::build(void)
 */
void
Engine_C_build_v_p(Engine *param0) {
  (*param0).build();
}

/*
 * C wrapper for
 * void Engine::step(void)
 */
void
Engine_C_step_v_p(Engine *param0) {
  (*param0).step();
}

/*
 * C wrapper for
 * static std::string Engine::get_version_string(void)
 */
char const *
Engine_C_get_version_string_s_v() {
  static std::string string_holder = Engine::get_version_string();
  return string_holder.c_str();
}

/*
 * C wrapper for
 * PointerTo< WindowFramework > const &Engine::get_wframe(void) const
 */
PointerTo< WindowFramework > const *
Engine_C_get_wframe_p_p(Engine const *param0) {
  return &((param0)->wframe);
}

/*
 * C wrapper for
 * PandaFramework *Engine::get_framework(void) const
 */
PandaFramework *
Engine_C_get_framework_p_p(Engine const *param0) {
  return (param0)->framework;
}

/*
 * C wrapper for
 * void Engine::set_framework(PandaFramework *value)
 */
void
Engine_C_set_framework_v_pp(Engine *param0, PandaFramework *param1) {
  (param0)->framework = param1;
}

/*
 * C wrapper for
 * int check_timer(void)
 */
int
check_timer_i_v() {
  return ::check_timer();
}

/*
 * C wrapper for
 * void emscripten_cancel_main_loop(void)
 */
void
emscripten_cancel_main_loop_v_v() {
  ::emscripten_cancel_main_loop();
}

/*
 * C wrapper for
 * void main_loop_or_step(void)
 */
void
main_loop_or_step_v_v() {
  ::main_loop_or_step();
}

/*
 * C wrapper for
 * void emscripten_force_exit(int status)
 */
void
emscripten_force_exit_v_ii(int param0) {
  ::emscripten_force_exit(param0);
}


static InterrogateModuleDef _in_module_def = {
  1566974540,  /* file_identifier */
  "lib",  /* library_name */
  "KD07",  /* library_hash_name */
  "lib",  /* module_name */
  "interrogate.in",  /* database_filename */
  nullptr,  /* unique_names */
  0,  /* num_unique_names */
  nullptr,  /* fptrs */
  0,  /* num_fptrs */
  1,  /* first_index */
  683  /* next_index */
};

Configure(_in_configure_lib);
ConfigureFn(_in_configure_lib) {
  interrogate_request_module(&_in_module_def);
}

