1566761338
3 3
3 lib 4 KD07 3 lib 
175
208 8 Filename 0 4 383 18 Filename::Filename 8 1 2 3 4 5 6 7 8 0 109
/**
 *
 */

/**
 *
 */

/**
 *
 */

/**
 *
 */

/**
 *
 */

/**
 *
 */

/**
 * Creates an empty Filename.
 */
463
inline Filename::Filename(char const *filename);
inline Filename::Filename(std::string const &filename);
inline Filename::Filename(std::wstring const &filename);
inline Filename::Filename(Filename const &copy);
inline Filename::Filename(std::string &&filename) noexcept;
inline Filename::Filename(Filename &&from) noexcept;
inline Filename::Filename(void);
Filename::Filename(Filename const &dirname, Filename const &basename);
Filename::Filename(PyObject *path);

209 10 __reduce__ 0 4 383 20 Filename::__reduce__ 1 9 0 0
53
PyObject *Filename::__reduce__(PyObject *self) const;

210 13 text_filename 0 4 383 23 Filename::text_filename 2 10 11 0 192
// Static constructors to explicitly create a filename that refers to a text
// or binary file.  This is in lieu of calling set_text() or set_binary() or
// set_type().

/**
 *
 */

/**
 *
 */
150
static inline Filename Filename::text_filename(Filename const &filename);
static inline Filename Filename::text_filename(std::string const &filename);

211 15 binary_filename 0 4 383 25 Filename::binary_filename 2 12 13 0 22
/**
 *
 */

/**
 *
 */
154
static inline Filename Filename::binary_filename(Filename const &filename);
static inline Filename Filename::binary_filename(std::string const &filename);

212 12 dso_filename 0 4 383 22 Filename::dso_filename 1 14 0 10
/**
 *
 */
75
static inline Filename Filename::dso_filename(std::string const &filename);

213 19 executable_filename 0 4 383 29 Filename::executable_filename 1 15 0 10
/**
 *
 */
82
static inline Filename Filename::executable_filename(std::string const &filename);

214 16 pattern_filename 0 4 383 26 Filename::pattern_filename 1 16 0 101
/**
 * Constructs a filename that represents a sequence of numbered files.  See
 * set_pattern().
 */
79
static inline Filename Filename::pattern_filename(std::string const &filename);

215 16 from_os_specific 0 4 383 26 Filename::from_os_specific 2 17 18 0 0
120
static Filename Filename::from_os_specific(std::string const &os_specific, Filename::Type type = ::Filename::T_general);

216 18 from_os_specific_w 0 4 383 28 Filename::from_os_specific_w 2 19 20 0 0
123
static Filename Filename::from_os_specific_w(std::wstring const &os_specific, Filename::Type type = ::Filename::T_general);

217 11 expand_from 0 4 383 21 Filename::expand_from 2 21 22 0 0
115
static Filename Filename::expand_from(std::string const &user_string, Filename::Type type = ::Filename::T_general);

218 9 temporary 0 4 383 19 Filename::temporary 3 23 24 25 0 0
174
static Filename Filename::temporary(std::string const &dirname, std::string const &prefix, std::string const &suffix = string(), Filename::Type type = ::Filename::T_general);

219 18 get_home_directory 0 4 383 28 Filename::get_home_directory 1 26 0 0
58
static Filename const &Filename::get_home_directory(void);

220 18 get_temp_directory 0 4 383 28 Filename::get_temp_directory 1 27 0 0
58
static Filename const &Filename::get_temp_directory(void);

221 26 get_user_appdata_directory 0 4 383 36 Filename::get_user_appdata_directory 1 28 0 0
66
static Filename const &Filename::get_user_appdata_directory(void);

222 28 get_common_appdata_directory 0 4 383 38 Filename::get_common_appdata_directory 1 29 0 0
68
static Filename const &Filename::get_common_appdata_directory(void);

223 10 operator = 0 4 383 20 Filename::operator = 5 30 31 32 33 34 0 108
// Assignment is via the = operator.

/**
 *
 */

/**
 *
 */

/**
 *
 */

/**
 *
 */

/**
 *
 */

/**
 *
 */
365
inline void Filename::operator =(std::string const &filename);
inline void Filename::operator =(std::wstring const &filename);
inline void Filename::operator =(char const *filename);
inline void Filename::operator =(Filename const &copy);
inline void Filename::operator =(std::string &&filename) noexcept;
inline void Filename::operator =(Filename &&from) noexcept;

224 17 operator typecast 0 132 383 27 Filename::operator typecast 1 136 0 60
// And retrieval is by any of the classic string operations.
48
inline operator std::string const &(void) const;

225 5 c_str 0 4 383 15 Filename::c_str 1 35 0 10
/**
 *
 */
47
inline char const *Filename::c_str(void) const;

226 5 empty 0 4 383 15 Filename::empty 1 36 0 10
/**
 *
 */
40
inline bool Filename::empty(void) const;

227 6 length 0 4 383 16 Filename::length 1 37 0 10
/**
 *
 */
48
inline std::size_t Filename::length(void) const;

228 11 operator [] 0 4 383 21 Filename::operator [] 1 38 0 0
55
inline char Filename::operator [](std::size_t n) const;

229 8 __repr__ 0 4 383 18 Filename::__repr__ 1 39 0 0
41
PyObject *Filename::__repr__(void) const;

230 10 __fspath__ 0 4 383 20 Filename::__fspath__ 1 40 0 0
43
PyObject *Filename::__fspath__(void) const;

231 6 substr 0 4 383 16 Filename::substr 2 41 42 0 22
/**
 *
 */

/**
 *
 */
140
inline std::string Filename::substr(std::size_t begin) const;
inline std::string Filename::substr(std::size_t begin, std::size_t end) const;

232 11 operator += 0 4 383 21 Filename::operator += 1 43 0 0
60
inline void Filename::operator +=(std::string const &other);

233 10 operator + 0 4 383 20 Filename::operator + 1 44 0 0
69
inline Filename Filename::operator +(std::string const &other) const;

234 10 operator / 0 4 383 20 Filename::operator / 1 45 0 0
66
inline Filename Filename::operator /(Filename const &other) const;

235 12 get_fullpath 0 4 383 22 Filename::get_fullpath 1 46 0 174
// Or, you can use any of these.

/**
 * Returns the entire filename: directory, basename, extension.  This is the
 * same thing returned by the string typecast operator.
 */
54
inline std::string Filename::get_fullpath(void) const;

236 14 get_fullpath_w 0 4 383 24 Filename::get_fullpath_w 1 47 0 66
/**
 * Returns the entire filename as a wide-character string.
 */
57
inline std::wstring Filename::get_fullpath_w(void) const;

237 11 get_dirname 0 4 383 21 Filename::get_dirname 1 48 0 139
/**
 * Returns the directory part of the filename.  This is everything in the
 * filename up to, but not including the rightmost slash.
 */
53
inline std::string Filename::get_dirname(void) const;

238 12 get_basename 0 4 383 22 Filename::get_basename 1 49 0 145
/**
 * Returns the basename part of the filename.  This is everything in the
 * filename after the rightmost slash, including any extensions.
 */
54
inline std::string Filename::get_basename(void) const;

239 25 get_fullpath_wo_extension 0 4 383 35 Filename::get_fullpath_wo_extension 1 50 0 96
/**
 * Returns the full filename--directory and basename parts--except for the
 * extension.
 */
67
inline std::string Filename::get_fullpath_wo_extension(void) const;

240 25 get_basename_wo_extension 0 4 383 35 Filename::get_basename_wo_extension 1 51 0 81
/**
 * Returns the basename part of the filename, without the file extension.
 */
67
inline std::string Filename::get_basename_wo_extension(void) const;

241 13 get_extension 0 4 383 23 Filename::get_extension 1 52 0 140
/**
 * Returns the file extension.  This is everything after the rightmost dot, if
 * there is one, or the empty string if there is not.
 */
55
inline std::string Filename::get_extension(void) const;

242 12 set_fullpath 0 4 383 22 Filename::set_fullpath 1 53 0 68
// You can also use any of these to reassign pieces of the filename.
50
void Filename::set_fullpath(std::string const &s);

243 11 set_dirname 0 4 383 21 Filename::set_dirname 1 54 0 0
49
void Filename::set_dirname(std::string const &s);

244 12 set_basename 0 4 383 22 Filename::set_basename 1 55 0 0
50
void Filename::set_basename(std::string const &s);

245 25 set_fullpath_wo_extension 0 4 383 35 Filename::set_fullpath_wo_extension 1 56 0 0
63
void Filename::set_fullpath_wo_extension(std::string const &s);

246 25 set_basename_wo_extension 0 4 383 35 Filename::set_basename_wo_extension 1 57 0 0
63
void Filename::set_basename_wo_extension(std::string const &s);

247 13 set_extension 0 4 383 23 Filename::set_extension 1 58 0 0
51
void Filename::set_extension(std::string const &s);

248 10 set_binary 0 4 383 20 Filename::set_binary 1 59 0 429
// Setting these flags appropriately is helpful when opening or searching
// for a file; it helps the Filename resolve OS-specific conventions (for
// instance, that dynamic library names should perhaps be changed from .so
// to .dll).

/**
 * Indicates that the filename represents a binary file.  This is primarily
 * relevant to the read_file() and write_file() methods, so they can set the
 * appropriate flags to the OS.
 */
39
inline void Filename::set_binary(void);

249 8 set_text 0 4 383 18 Filename::set_text 1 60 0 190
/**
 * Indicates that the filename represents a text file.  This is primarily
 * relevant to the read_file() and write_file() methods, so they can set the
 * appropriate flags to the OS.
 */
37
inline void Filename::set_text(void);

250 9 is_binary 0 4 383 19 Filename::is_binary 1 61 0 256
/**
 * Returns true if the Filename has been indicated to represent a binary file
 * via a previous call to set_binary().  It is possible that neither
 * is_binary() nor is_text() will be true, if neither set_binary() nor
 * set_text() was ever called.
 */
44
inline bool Filename::is_binary(void) const;

251 7 is_text 0 4 383 17 Filename::is_text 1 62 0 252
/**
 * Returns true if the Filename has been indicated to represent a text file
 * via a previous call to set_text().  It is possible that neither is_binary()
 * nor is_text() will be true, if neither set_binary() nor set_text() was ever
 * called.
 */
42
inline bool Filename::is_text(void) const;

252 17 is_binary_or_text 0 4 383 27 Filename::is_binary_or_text 1 63 0 198
/**
 * Returns true either is_binary() or is_text() is true; that is, that the
 * filename has been specified as either binary or text.  If this is false,
 * the filename has not been specified.
 */
52
inline bool Filename::is_binary_or_text(void) const;

253 8 set_type 0 4 383 18 Filename::set_type 1 64 0 350
/**
 * Sets the type of the file represented by the filename.  This is useful for
 * to_os_specific(), resolve_filename(), test_existence(), and all such real-
 * world access functions.  It helps the Filename know how to map the internal
 * filename to the OS-specific filename (for instance, maybe executables
 * should have an .exe extension).
 */
52
inline void Filename::set_type(Filename::Type type);

254 8 get_type 0 4 383 18 Filename::get_type 1 65 0 104
/**
 * Returns the type of the file represented by the filename, as previously set
 * by set_type().
 */
53
inline Filename::Type Filename::get_type(void) const;

255 11 set_pattern 0 4 383 21 Filename::set_pattern 1 66 0 688
/**
 * Sets the flag indicating whether this is a filename pattern.  When this is
 * true, the filename is understood to be a placeholder for a numbered
 * sequence of filename, such as an image sequence.  In this case, a sequence
 * of one or more hash characters ("#") should appear in the filename string;
 * these characters will be filled in with the corresponding number (or more)
 * of digits representing the sequence number.  Sequence numbers always begin
 * counting at 0.
 *
 * When this is true, methods like has_hash() and get_hash_to_end() and
 * get_filename_index() may be called.  Methods like is_exists() will
 * implicitly test for existance of filename sequence 0.
 */
48
inline void Filename::set_pattern(bool pattern);

256 11 get_pattern 0 4 383 21 Filename::get_pattern 1 67 0 97
/**
 * Returns the flag indicating whether this is a filename pattern.  See
 * set_pattern().
 */
46
inline bool Filename::get_pattern(void) const;

257 8 has_hash 0 4 383 18 Filename::has_hash 1 68 0 354
/**
 * Returns true if the filename is indicated to be a filename pattern (that
 * is, set_pattern(true) was called), and the filename pattern did include a
 * sequence of hash marks, or false if it was not a filename pattern or did
 * not include hash marks.  If this is true, then get_filename_index() will
 * return a different filename each time.
 */
43
inline bool Filename::has_hash(void) const;

258 18 get_filename_index 0 4 383 28 Filename::get_filename_index 1 69 0 0
55
Filename Filename::get_filename_index(int index) const;

259 15 get_hash_to_end 0 4 383 25 Filename::get_hash_to_end 1 70 0 130
/**
 * Returns the part of the filename beginning at the hash sequence (if any),
 * and continuing to the end of the filename.
 */
57
inline std::string Filename::get_hash_to_end(void) const;

260 15 set_hash_to_end 0 4 383 25 Filename::set_hash_to_end 1 71 0 0
53
void Filename::set_hash_to_end(std::string const &s);

261 18 extract_components 0 4 383 28 Filename::extract_components 1 72 0 0
67
void Filename::extract_components(vector_string &components) const;

262 11 standardize 0 4 383 21 Filename::standardize 1 73 0 0
33
void Filename::standardize(void);

263 8 is_local 0 4 383 18 Filename::is_local 1 74 0 146
/**
 * Returns true if the filename is local, e.g.  does not begin with a slash,
 * or false if the filename is fully specified from the root.
 */
43
inline bool Filename::is_local(void) const;

264 18 is_fully_qualified 0 4 383 28 Filename::is_fully_qualified 1 75 0 444
/**
 * Returns true if the filename is fully qualified, e.g.  begins with a slash.
 * This is almost, but not quite, the same thing as !is_local().  It's not
 * exactly the same because a special case is made for filenames that begin
 * with a single dot followed by a slash--these are considered to be fully
 * qualified (they are explicitly relative to the current directory, and do
 * not refer to a filename on a search path somewhere).
 */
53
inline bool Filename::is_fully_qualified(void) const;

265 13 make_absolute 0 4 383 23 Filename::make_absolute 2 76 77 0 0
98
void Filename::make_absolute(void);
void Filename::make_absolute(Filename const &start_directory);

266 14 make_canonical 0 4 383 24 Filename::make_canonical 1 78 0 0
36
bool Filename::make_canonical(void);

267 14 make_true_case 0 4 383 24 Filename::make_true_case 1 79 0 0
36
bool Filename::make_true_case(void);

268 14 to_os_specific 0 4 383 24 Filename::to_os_specific 1 80 0 0
49
std::string Filename::to_os_specific(void) const;

269 16 to_os_specific_w 0 4 383 26 Filename::to_os_specific_w 1 81 0 0
52
std::wstring Filename::to_os_specific_w(void) const;

270 13 to_os_generic 0 4 383 23 Filename::to_os_generic 1 82 0 0
48
std::string Filename::to_os_generic(void) const;

271 16 to_os_short_name 0 4 383 26 Filename::to_os_short_name 1 83 0 0
51
std::string Filename::to_os_short_name(void) const;

272 15 to_os_long_name 0 4 383 25 Filename::to_os_long_name 1 84 0 0
50
std::string Filename::to_os_long_name(void) const;

273 6 exists 0 4 383 16 Filename::exists 1 85 0 0
34
bool Filename::exists(void) const;

274 15 is_regular_file 0 4 383 25 Filename::is_regular_file 1 86 0 0
43
bool Filename::is_regular_file(void) const;

275 11 is_writable 0 4 383 21 Filename::is_writable 1 87 0 0
39
bool Filename::is_writable(void) const;

276 12 is_directory 0 4 383 22 Filename::is_directory 1 88 0 0
40
bool Filename::is_directory(void) const;

277 13 is_executable 0 4 383 23 Filename::is_executable 1 89 0 0
41
bool Filename::is_executable(void) const;

278 18 compare_timestamps 0 4 383 28 Filename::compare_timestamps 3 90 91 92 0 0
129
int Filename::compare_timestamps(Filename const &other, bool this_missing_is_old = true, bool other_missing_is_old = true) const;

279 13 get_timestamp 0 4 383 23 Filename::get_timestamp 1 93 0 0
43
time_t Filename::get_timestamp(void) const;

280 20 get_access_timestamp 0 4 383 30 Filename::get_access_timestamp 1 94 0 0
50
time_t Filename::get_access_timestamp(void) const;

281 13 get_file_size 0 4 383 23 Filename::get_file_size 1 95 0 0
52
std::streamsize Filename::get_file_size(void) const;

282 16 resolve_filename 0 4 383 26 Filename::resolve_filename 2 96 97 0 0
112
bool Filename::resolve_filename(DSearchPath const &searchpath, std::string const &default_extension = string());

283 16 make_relative_to 0 4 383 26 Filename::make_relative_to 2 98 99 0 0
79
bool Filename::make_relative_to(Filename directory, bool allow_backups = true);

284 18 find_on_searchpath 0 4 383 28 Filename::find_on_searchpath 1 100 0 0
64
int Filename::find_on_searchpath(DSearchPath const &searchpath);

285 14 scan_directory 0 4 383 24 Filename::scan_directory 2 101 102 0 0
109
bool Filename::scan_directory(vector_string &contents) const;
PyObject *Filename::scan_directory(void) const;

286 9 open_read 0 4 383 19 Filename::open_read 2 103 104 0 0
105
bool Filename::open_read(std::ifstream &stream) const;
bool Filename::open_read(pifstream &stream) const;

287 10 open_write 0 4 383 20 Filename::open_write 4 105 106 107 108 0 0
151
bool Filename::open_write(std::ofstream &stream, bool truncate = true) const;
bool Filename::open_write(pofstream &stream, bool truncate = true) const;

288 11 open_append 0 4 383 21 Filename::open_append 2 109 110 0 0
109
bool Filename::open_append(std::ofstream &stream) const;
bool Filename::open_append(pofstream &stream) const;

289 15 open_read_write 0 4 383 25 Filename::open_read_write 4 111 112 113 114 0 0
161
bool Filename::open_read_write(std::fstream &stream, bool truncate = false) const;
bool Filename::open_read_write(pfstream &stream, bool truncate = false) const;

290 16 open_read_append 0 4 383 26 Filename::open_read_append 2 115 116 0 0
117
bool Filename::open_read_append(std::fstream &stream) const;
bool Filename::open_read_append(pfstream &stream) const;

291 5 chdir 0 4 383 15 Filename::chdir 1 117 0 0
33
bool Filename::chdir(void) const;

292 5 touch 0 4 383 15 Filename::touch 1 118 0 0
33
bool Filename::touch(void) const;

293 6 unlink 0 4 383 16 Filename::unlink 1 119 0 0
34
bool Filename::unlink(void) const;

294 9 rename_to 0 4 383 19 Filename::rename_to 1 120 0 0
54
bool Filename::rename_to(Filename const &other) const;

295 7 copy_to 0 4 383 17 Filename::copy_to 1 121 0 0
52
bool Filename::copy_to(Filename const &other) const;

296 8 make_dir 0 4 383 18 Filename::make_dir 1 122 0 0
36
bool Filename::make_dir(void) const;

297 5 mkdir 0 4 383 15 Filename::mkdir 1 123 0 0
33
bool Filename::mkdir(void) const;

298 5 rmdir 0 4 383 15 Filename::rmdir 1 124 0 0
33
bool Filename::rmdir(void) const;

299 11 operator == 0 4 383 21 Filename::operator == 1 125 0 34
// Comparison operators are handy.
66
inline bool Filename::operator ==(std::string const &other) const;

300 11 operator != 0 4 383 21 Filename::operator != 1 126 0 0
66
inline bool Filename::operator !=(std::string const &other) const;

301 10 operator < 0 4 383 20 Filename::operator < 1 127 0 0
65
inline bool Filename::operator <(std::string const &other) const;

302 10 compare_to 0 4 383 20 Filename::compare_to 1 128 0 10
/**
 *
 */
61
inline int Filename::compare_to(Filename const &other) const;

303 11 __nonzero__ 0 4 383 21 Filename::__nonzero__ 1 129 0 349
/**
 * Returns true if the Filename is valid (not empty), or false if it is an
 * empty string.
 *
 * This implements the Python equivalent to operator bool.  Defining an actual
 * operator bool method for C++ use would work too, but it seems to cause too
 * many ambiguities for the C++ compiler, so we use this Python-only approach
 * instead.
 */
46
inline bool Filename::__nonzero__(void) const;

304 8 get_hash 0 4 383 18 Filename::get_hash 1 130 0 0
35
int Filename::get_hash(void) const;

305 6 output 0 4 383 16 Filename::output 1 131 0 10
/**
 *
 */
54
inline void Filename::output(std::ostream &out) const;

306 23 set_filesystem_encoding 0 4 383 33 Filename::set_filesystem_encoding 1 132 0 266
/**
 * Specifies the default encoding to be used for all subsequent Filenames.
 * This is used to represent wide-character (Unicode) filenames internally.
 * On non-Windows-based systems, the encoded filename is also passed to the
 * underlying operating system.
 */
85
static inline void Filename::set_filesystem_encoding(TextEncoder::Encoding encoding);

307 23 get_filesystem_encoding 0 4 383 33 Filename::get_filesystem_encoding 1 133 0 125
/**
 * Specifies the default encoding to be used for all subsequent Filenames
 * objects.  See set_filesystem_encoding().
 */
76
static inline TextEncoder::Encoding Filename::get_filesystem_encoding(void);

308 36 atomic_compare_and_exchange_contents 0 4 383 46 Filename::atomic_compare_and_exchange_contents 0 0 0
152
bool Filename::atomic_compare_and_exchange_contents(std::string &orig_contents, std::string const &old_contents, std::string const &new_contents) const;

309 20 atomic_read_contents 0 4 383 30 Filename::atomic_read_contents 0 0 0
65
bool Filename::atomic_read_contents(std::string &contents) const;

310 14 get_class_type 0 4 383 24 Filename::get_class_type 1 134 0 0
49
static TypeHandle Filename::get_class_type(void);

311 9 init_type 0 4 383 19 Filename::init_type 1 135 0 0
38
static void Filename::init_type(void);

312 9 ~Filename 0 4 383 19 Filename::~Filename 0 0 0
26
Filename::~Filename(void);

313 19 get_panda_framework 0 4 386 36 WindowFramework::get_panda_framework 1 138 0 69
/**
 * Returns a pointer to the associated PandaFramework object.
 */
72
inline PandaFramework *WindowFramework::get_panda_framework(void) const;

314 19 get_graphics_window 0 4 386 36 WindowFramework::get_graphics_window 1 139 0 121
/**
 * Returns a pointer to the underlying GraphicsWindow object, if it is in fact
 * a window; or NULL if it is not.
 */
72
inline GraphicsWindow *WindowFramework::get_graphics_window(void) const;

315 19 get_graphics_output 0 4 386 36 WindowFramework::get_graphics_output 1 140 0 68
/**
 * Returns a pointer to the underlying GraphicsOutput object
 */
72
inline GraphicsOutput *WindowFramework::get_graphics_output(void) const;

316 16 get_camera_group 0 4 386 33 WindowFramework::get_camera_group 1 141 0 0
49
NodePath WindowFramework::get_camera_group(void);

317 15 get_num_cameras 0 4 386 32 WindowFramework::get_num_cameras 1 142 0 207
/**
 * Returns the number of 3-d cameras associated with the window.  A window
 * usually has only one camera, but it may have multiple cameras if there are
 * multiple display regions within the window.
 */
56
inline int WindowFramework::get_num_cameras(void) const;

318 10 get_camera 0 4 386 27 WindowFramework::get_camera 1 143 0 61
/**
 * Returns the nth camera associated with the window.
 */
56
inline Camera *WindowFramework::get_camera(int n) const;

319 21 get_display_region_2d 0 4 386 38 WindowFramework::get_display_region_2d 1 144 0 82
/**
 * Returns the default DisplayRegion created for the 2-d scene (render2d).
 */
73
inline DisplayRegion *WindowFramework::get_display_region_2d(void) const;

320 21 get_display_region_3d 0 4 386 38 WindowFramework::get_display_region_3d 1 145 0 80
/**
 * Returns the default DisplayRegion created for the 3-d scene (render).
 */
73
inline DisplayRegion *WindowFramework::get_display_region_3d(void) const;

321 10 get_render 0 4 386 27 WindowFramework::get_render 1 146 0 0
43
NodePath WindowFramework::get_render(void);

322 13 get_render_2d 0 4 386 30 WindowFramework::get_render_2d 1 147 0 0
46
NodePath WindowFramework::get_render_2d(void);

323 13 get_aspect_2d 0 4 386 30 WindowFramework::get_aspect_2d 1 148 0 0
46
NodePath WindowFramework::get_aspect_2d(void);

324 12 get_pixel_2d 0 4 386 29 WindowFramework::get_pixel_2d 1 149 0 0
45
NodePath WindowFramework::get_pixel_2d(void);

325 9 get_mouse 0 4 386 26 WindowFramework::get_mouse 1 150 0 0
42
NodePath WindowFramework::get_mouse(void);

326 18 get_button_thrower 0 4 386 35 WindowFramework::get_button_thrower 1 151 0 0
51
NodePath WindowFramework::get_button_thrower(void);

327 15 enable_keyboard 0 4 386 32 WindowFramework::enable_keyboard 1 152 0 0
44
void WindowFramework::enable_keyboard(void);

328 15 setup_trackball 0 4 386 32 WindowFramework::setup_trackball 1 153 0 0
44
void WindowFramework::setup_trackball(void);

329 16 center_trackball 0 4 386 33 WindowFramework::center_trackball 1 154 0 0
63
void WindowFramework::center_trackball(NodePath const &object);

330 11 load_models 0 4 386 28 WindowFramework::load_models 1 155 0 0
194
bool WindowFramework::load_models(NodePath const &parent, int argc, char *argv[], int first_arg = 1);
bool WindowFramework::load_models(NodePath const &parent, pvector< Filename > const &files);

331 10 load_model 0 4 386 27 WindowFramework::load_model 1 156 0 0
80
NodePath WindowFramework::load_model(NodePath const &parent, Filename filename);

332 18 load_default_model 0 4 386 35 WindowFramework::load_default_model 1 157 0 0
69
NodePath WindowFramework::load_default_model(NodePath const &parent);

333 15 loop_animations 0 4 386 32 WindowFramework::loop_animations 2 158 159 0 0
133
void WindowFramework::loop_animations(int hierarchy_match_flags = (::PartGroup::HMF_ok_part_extra | ::PartGroup::HMF_ok_anim_extra));

334 18 stagger_animations 0 4 386 35 WindowFramework::stagger_animations 1 160 0 0
47
void WindowFramework::stagger_animations(void);

335 17 next_anim_control 0 4 386 34 WindowFramework::next_anim_control 1 161 0 0
46
void WindowFramework::next_anim_control(void);

336 17 set_anim_controls 0 4 386 34 WindowFramework::set_anim_controls 1 162 0 0
53
void WindowFramework::set_anim_controls(bool enable);

337 17 get_anim_controls 0 4 386 34 WindowFramework::get_anim_controls 1 163 0 63
/**
 * Returns the current state of the anim_controls flag.
 */
59
inline bool WindowFramework::get_anim_controls(void) const;

338 17 adjust_dimensions 0 4 386 34 WindowFramework::adjust_dimensions 1 164 0 0
46
void WindowFramework::adjust_dimensions(void);

339 12 split_window 0 4 386 29 WindowFramework::split_window 2 165 166 0 0
118
WindowFramework *WindowFramework::split_window(WindowFramework::SplitType split_type = ::WindowFramework::ST_default);

340 13 set_wireframe 0 4 386 30 WindowFramework::set_wireframe 2 167 168 0 0
70
void WindowFramework::set_wireframe(bool enable, bool filled = false);

341 11 set_texture 0 4 386 28 WindowFramework::set_texture 1 169 0 0
47
void WindowFramework::set_texture(bool enable);

342 13 set_two_sided 0 4 386 30 WindowFramework::set_two_sided 1 170 0 0
49
void WindowFramework::set_two_sided(bool enable);

343 21 set_one_sided_reverse 0 4 386 38 WindowFramework::set_one_sided_reverse 1 171 0 0
57
void WindowFramework::set_one_sided_reverse(bool enable);

344 12 set_lighting 0 4 386 29 WindowFramework::set_lighting 1 172 0 0
48
void WindowFramework::set_lighting(bool enable);

345 12 set_perpixel 0 4 386 29 WindowFramework::set_perpixel 1 173 0 0
48
void WindowFramework::set_perpixel(bool enable);

346 19 set_background_type 0 4 386 36 WindowFramework::set_background_type 1 174 0 0
80
void WindowFramework::set_background_type(WindowFramework::BackgroundType type);

347 13 get_wireframe 0 4 386 30 WindowFramework::get_wireframe 1 175 0 59
/**
 * Returns the current state of the wireframe flag.
 */
55
inline bool WindowFramework::get_wireframe(void) const;

348 20 get_wireframe_filled 0 4 386 37 WindowFramework::get_wireframe_filled 1 176 0 66
/**
 * Returns the current state of the wireframe_filled flag.
 */
62
inline bool WindowFramework::get_wireframe_filled(void) const;

349 11 get_texture 0 4 386 28 WindowFramework::get_texture 1 177 0 57
/**
 * Returns the current state of the texture flag.
 */
53
inline bool WindowFramework::get_texture(void) const;

350 13 get_two_sided 0 4 386 30 WindowFramework::get_two_sided 1 178 0 59
/**
 * Returns the current state of the two_sided flag.
 */
55
inline bool WindowFramework::get_two_sided(void) const;

351 21 get_one_sided_reverse 0 4 386 38 WindowFramework::get_one_sided_reverse 1 179 0 67
/**
 * Returns the current state of the one_sided_reverse flag.
 */
63
inline bool WindowFramework::get_one_sided_reverse(void) const;

352 12 get_lighting 0 4 386 29 WindowFramework::get_lighting 1 180 0 58
/**
 * Returns the current state of the lighting flag.
 */
54
inline bool WindowFramework::get_lighting(void) const;

353 12 get_perpixel 0 4 386 29 WindowFramework::get_perpixel 1 181 0 58
/**
 * Returns the current state of the perpixel flag.
 */
54
inline bool WindowFramework::get_perpixel(void) const;

354 19 get_background_type 0 4 386 36 WindowFramework::get_background_type 1 182 0 55
/**
 * Returns the current background type setting.
 */
88
inline WindowFramework::BackgroundType WindowFramework::get_background_type(void) const;

355 25 get_shuttle_controls_font 0 4 386 42 WindowFramework::get_shuttle_controls_font 1 183 0 0
66
static TextFont *WindowFramework::get_shuttle_controls_font(void);

356 11 make_camera 0 4 386 28 WindowFramework::make_camera 1 184 0 0
44
NodePath WindowFramework::make_camera(void);

357 14 get_class_type 0 4 386 31 WindowFramework::get_class_type 1 185 0 0
56
static TypeHandle WindowFramework::get_class_type(void);

358 9 init_type 0 4 386 26 WindowFramework::init_type 1 186 0 0
45
static void WindowFramework::init_type(void);

359 8 get_type 0 6 386 25 WindowFramework::get_type 1 187 0 0
57
virtual TypeHandle WindowFramework::get_type(void) const;

360 15 force_init_type 0 6 386 32 WindowFramework::force_init_type 1 188 0 0
58
virtual TypeHandle WindowFramework::force_init_type(void);

361 15 WindowFramework 0 4 386 32 WindowFramework::WindowFramework 1 137 0 0
75
inline WindowFramework::WindowFramework(WindowFramework const &) = default;

362 11 reparent_to 0 4 390 15 NP::reparent_to 1 191 0 0
44
void NP::reparent_to(NodePath const &other);

363 2 NP 0 4 390 6 NP::NP 2 189 190 0 0
67
inline NP::NP(void) = default;
inline NP::NP(NP const &) = default;

364 3 ~NP 0 4 390 7 NP::~NP 0 0 0
14
NP::~NP(void);

365 6 Engine 0 4 392 14 Engine::Engine 2 192 193 0 0
70
Engine::Engine(void);
inline Engine::Engine(Engine const &) = default;

366 7 ~Engine 0 4 392 15 Engine::~Engine 0 0 0
22
Engine::~Engine(void);

367 11 HelloEngine 0 4 392 19 Engine::HelloEngine 1 194 0 0
30
int Engine::HelloEngine(void);

368 8 casetest 0 4 392 16 Engine::casetest 1 195 0 0
51
int Engine::casetest(int i, std::string s, bool b);

369 10 load_model 0 4 392 18 Engine::load_model 1 196 0 0
51
NodePath *Engine::load_model(char const *filename);

370 6 attach 0 4 392 14 Engine::attach 1 197 0 0
35
void Engine::attach(NodePath *mdl);

371 5 build 0 4 392 13 Engine::build 1 198 0 77
//WindowFramework* window_framework);

//WindowFramework* window_framework) {
25
void Engine::build(void);

372 4 step 0 4 392 12 Engine::step 1 199 0 0
24
void Engine::step(void);

373 18 get_version_string 0 4 392 26 Engine::get_version_string 1 200 0 0
52
static std::string Engine::get_version_string(void);

374 9 call_exit 0 4 392 17 Engine::call_exit 0 0 0
62
static void Engine::call_exit(Event const *event, void *data);

375 10 get_wframe 0 20 392 18 Engine::get_wframe 1 201 0 55
getter for PointerTo< WindowFramework > Engine::wframe;
67
PointerTo< WindowFramework > const &Engine::get_wframe(void) const;

376 13 get_framework 0 20 392 21 Engine::get_framework 1 202 0 45
getter for PandaFramework *Engine::framework;
50
PandaFramework *Engine::get_framework(void) const;

377 13 set_framework 0 36 392 21 Engine::set_framework 1 203 0 45
setter for PandaFramework *Engine::framework;
50
void Engine::set_framework(PandaFramework *value);

378 11 check_timer 0 1 0 11 check_timer 1 204 0 0
22
int check_timer(void);

379 27 emscripten_cancel_main_loop 0 1 0 27 emscripten_cancel_main_loop 1 205 0 0
39
void emscripten_cancel_main_loop(void);

380 17 main_loop_or_step 0 1 0 17 main_loop_or_step 1 206 0 0
29
void main_loop_or_step(void);

381 24 emscripten_set_main_loop 0 1 0 24 emscripten_set_main_loop 0 0 0
60
void emscripten_set_main_loop(funcptr emfunc, int a, int b);

382 21 emscripten_force_exit 0 1 0 21 emscripten_force_exit 1 207 0 0
39
void emscripten_force_exit(int status);

207
1 12 _inCKD07zHmO 0 7 4 398 312 9 cKD07zHmO 37 /**
 * Creates an empty Filename.
 */ 0 
2 12 _inCKD07TAyl 0 7 4 398 312 9 cKD07TAyl 10 /**
 *
 */ 1 4 from 1 398  
3 12 _inCKD070xIC 0 7 4 398 312 9 cKD070xIC 10 /**
 *
 */ 1 4 copy 1 399  
4 12 _inCKD07z3ik 0 7 4 398 312 9 cKD07z3ik 0 2 7 dirname 1 399  8 basename 1 399  
5 12 _inCKD07ekRL 0 7 4 398 312 9 cKD07ekRL 0 1 4 path 1 401  
6 12 _inCKD07YS9H 0 7 4 398 312 9 cKD07YS9H 10 /**
 *
 */ 1 8 filename 1 404  
7 12 _inCKD07ygg9 0 7 4 398 312 9 cKD07ygg9 10 /**
 *
 */ 1 8 filename 1 404  
8 12 _inCKD07w0Fd 0 7 4 398 312 9 cKD07w0Fd 10 /**
 *
 */ 1 8 filename 1 404  
9 12 _inCKD07Fi19 0 6 5 401 0 9 cKD07Fi19 0 1 4 this 3 399  
10 12 _inCKD07C1b2 0 7 6 398 312 9 cKD07C1b2 168 // Static constructors to explicitly create a filename that refers to a text
// or binary file.  This is in lieu of calling set_text() or set_binary() or
// set_type(). 1 8 filename 1 399  
11 12 _inCKD07vNOt 0 7 6 398 312 9 cKD07vNOt 10 /**
 *
 */ 1 8 filename 1 404  
12 12 _inCKD07bJPp 0 7 7 398 312 9 cKD07bJPp 10 /**
 *
 */ 1 8 filename 1 399  
13 12 _inCKD07Ph6h 0 7 7 398 312 9 cKD07Ph6h 10 /**
 *
 */ 1 8 filename 1 404  
14 12 _inCKD07CpRv 0 7 8 398 312 9 cKD07CpRv 10 /**
 *
 */ 1 8 filename 1 404  
15 12 _inCKD07Ns6u 0 7 9 398 312 9 cKD07Ns6u 10 /**
 *
 */ 1 8 filename 1 404  
16 12 _inCKD07xSOe 0 7 10 398 312 9 cKD07xSOe 101 /**
 * Constructs a filename that represents a sequence of numbered files.  See
 * set_pattern().
 */ 1 8 filename 1 404  
17 12 _inCKD07aIaB 0 7 11 398 312 9 cKD07aIaB 0 2 11 os_specific 1 404  4 type 1 384  
18 12 _inCKD07Evxv 0 7 11 398 312 9 cKD07Evxv 0 1 11 os_specific 1 404  
19 12 _inCKD07OwIH 0 7 12 398 312 9 cKD07OwIH 0 2 11 os_specific 1 404  4 type 1 384  
20 12 _inCKD07Vnxx 0 7 12 398 312 9 cKD07Vnxx 0 1 11 os_specific 1 404  
21 12 _inCKD07SufR 0 7 13 398 312 9 cKD07SufR 0 2 11 user_string 1 404  4 type 1 384  
22 12 _inCKD07BIso 0 7 13 398 312 9 cKD07BIso 0 1 11 user_string 1 404  
23 12 _inCKD07Wnrq 0 7 14 398 312 9 cKD07Wnrq 0 4 7 dirname 1 404  6 prefix 1 404  6 suffix 1 404  4 type 1 384  
24 12 _inCKD07kS5B 0 7 14 398 312 9 cKD07kS5B 0 3 7 dirname 1 404  6 prefix 1 404  6 suffix 1 404  
25 12 _inCKD07wIqG 0 7 14 398 312 9 cKD07wIqG 0 2 7 dirname 1 404  6 prefix 1 404  
26 12 _inCKD07f_0B 0 6 15 399 0 9 cKD07f_0B 0 0 
27 12 _inCKD07eDx2 0 6 16 399 0 9 cKD07eDx2 0 0 
28 12 _inCKD074CLy 0 6 17 399 0 9 cKD074CLy 0 0 
29 12 _inCKD07w0eY 0 6 18 399 0 9 cKD07w0eY 0 0 
30 12 _inCKD07UZ8w 0 6 19 398 0 9 cKD07UZ8w 10 /**
 *
 */ 2 4 this 3 398  4 from 1 398  
31 12 _inCKD07e4GP 0 6 19 398 0 9 cKD07e4GP 10 /**
 *
 */ 2 4 this 3 398  4 copy 1 399  
32 12 _inCKD07An_g 0 6 19 398 0 9 cKD07An_g 10 /**
 *
 */ 2 4 this 3 398  8 filename 1 404  
33 12 _inCKD07AEbr 0 6 19 398 0 9 cKD07AEbr 36 // Assignment is via the = operator. 2 4 this 3 398  8 filename 1 404  
34 12 _inCKD07wt4w 0 6 19 398 0 9 cKD07wt4w 10 /**
 *
 */ 2 4 this 3 398  8 filename 1 404  
35 12 _inCKD07myvU 0 6 21 404 0 9 cKD07myvU 10 /**
 *
 */ 1 4 this 3 399  
36 12 _inCKD07OFzc 0 6 22 405 0 9 cKD07OFzc 10 /**
 *
 */ 1 4 this 3 399  
37 12 _inCKD07gE4s 0 6 23 406 0 9 cKD07gE4s 10 /**
 *
 */ 1 4 this 3 399  
38 12 _inCKD07PYDQ 0 6 24 408 0 9 cKD07PYDQ 0 2 4 this 3 399  1 n 1 406  
39 12 _inCKD07N_qX 0 6 25 401 0 9 cKD07N_qX 0 1 4 this 3 399  
40 12 _inCKD07fqwx 0 6 26 401 0 9 cKD07fqwx 0 1 4 this 3 399  
41 12 _inCKD07IKWA 0 6 27 404 0 9 cKD07IKWA 10 /**
 *
 */ 2 4 this 3 399  5 begin 1 406  
42 12 _inCKD07XWsr 0 6 27 404 0 9 cKD07XWsr 10 /**
 *
 */ 3 4 this 3 399  5 begin 1 406  3 end 1 406  
43 12 _inCKD07_CCc 0 6 28 398 0 9 cKD07_CCc 0 2 4 this 3 398  5 other 1 404  
44 12 _inCKD07dG6k 0 7 29 398 312 9 cKD07dG6k 0 2 4 this 3 399  5 other 1 404  
45 12 _inCKD07pD3m 0 7 30 398 312 9 cKD07pD3m 0 2 4 this 3 399  5 other 1 399  
46 12 _inCKD07FzJX 0 6 31 404 0 9 cKD07FzJX 140 /**
 * Returns the entire filename: directory, basename, extension.  This is the
 * same thing returned by the string typecast operator.
 */ 1 4 this 3 399  
47 12 _inCKD07EfKG 0 6 32 404 0 9 cKD07EfKG 66 /**
 * Returns the entire filename as a wide-character string.
 */ 1 4 this 3 399  
48 12 _inCKD07nZLo 0 6 33 404 0 9 cKD07nZLo 139 /**
 * Returns the directory part of the filename.  This is everything in the
 * filename up to, but not including the rightmost slash.
 */ 1 4 this 3 399  
49 12 _inCKD07dGTD 0 6 34 404 0 9 cKD07dGTD 145 /**
 * Returns the basename part of the filename.  This is everything in the
 * filename after the rightmost slash, including any extensions.
 */ 1 4 this 3 399  
50 12 _inCKD07pN0c 0 6 35 404 0 9 cKD07pN0c 96 /**
 * Returns the full filename--directory and basename parts--except for the
 * extension.
 */ 1 4 this 3 399  
51 12 _inCKD07Ni_I 0 6 36 404 0 9 cKD07Ni_I 81 /**
 * Returns the basename part of the filename, without the file extension.
 */ 1 4 this 3 399  
52 12 _inCKD07_MQ8 0 6 37 404 0 9 cKD07_MQ8 140 /**
 * Returns the file extension.  This is everything after the rightmost dot, if
 * there is one, or the empty string if there is not.
 */ 1 4 this 3 399  
53 12 _inCKD07iBlJ 0 4 38 409 0 9 cKD07iBlJ 68 // You can also use any of these to reassign pieces of the filename. 2 4 this 3 398  1 s 1 404  
54 12 _inCKD07MTmS 0 4 39 409 0 9 cKD07MTmS 0 2 4 this 3 398  1 s 1 404  
55 12 _inCKD07nzu1 0 4 40 409 0 9 cKD07nzu1 0 2 4 this 3 398  1 s 1 404  
56 12 _inCKD078yGI 0 4 41 409 0 9 cKD078yGI 0 2 4 this 3 398  1 s 1 404  
57 12 _inCKD07VNQ0 0 4 42 409 0 9 cKD07VNQ0 0 2 4 this 3 398  1 s 1 404  
58 12 _inCKD07dpGv 0 4 43 409 0 9 cKD07dpGv 0 2 4 this 3 398  1 s 1 404  
59 12 _inCKD07K9mc 0 4 44 409 0 9 cKD07K9mc 235 // Setting these flags appropriately is helpful when opening or searching
// for a file; it helps the Filename resolve OS-specific conventions (for
// instance, that dynamic library names should perhaps be changed from .so
// to .dll). 1 4 this 3 398  
60 12 _inCKD07Bixh 0 4 45 409 0 9 cKD07Bixh 190 /**
 * Indicates that the filename represents a text file.  This is primarily
 * relevant to the read_file() and write_file() methods, so they can set the
 * appropriate flags to the OS.
 */ 1 4 this 3 398  
61 12 _inCKD07nswQ 0 6 46 405 0 9 cKD07nswQ 256 /**
 * Returns true if the Filename has been indicated to represent a binary file
 * via a previous call to set_binary().  It is possible that neither
 * is_binary() nor is_text() will be true, if neither set_binary() nor
 * set_text() was ever called.
 */ 1 4 this 3 399  
62 12 _inCKD07f3Vw 0 6 47 405 0 9 cKD07f3Vw 252 /**
 * Returns true if the Filename has been indicated to represent a text file
 * via a previous call to set_text().  It is possible that neither is_binary()
 * nor is_text() will be true, if neither set_binary() nor set_text() was ever
 * called.
 */ 1 4 this 3 399  
63 12 _inCKD07OiJI 0 6 48 405 0 9 cKD07OiJI 198 /**
 * Returns true either is_binary() or is_text() is true; that is, that the
 * filename has been specified as either binary or text.  If this is false,
 * the filename has not been specified.
 */ 1 4 this 3 399  
64 12 _inCKD07c7yW 0 4 49 409 0 9 cKD07c7yW 350 /**
 * Sets the type of the file represented by the filename.  This is useful for
 * to_os_specific(), resolve_filename(), test_existence(), and all such real-
 * world access functions.  It helps the Filename know how to map the internal
 * filename to the OS-specific filename (for instance, maybe executables
 * should have an .exe extension).
 */ 2 4 this 3 398  4 type 1 384  
65 12 _inCKD07ELir 0 6 50 384 0 9 cKD07ELir 104 /**
 * Returns the type of the file represented by the filename, as previously set
 * by set_type().
 */ 1 4 this 3 399  
66 12 _inCKD070_BT 0 4 51 409 0 9 cKD070_BT 688 /**
 * Sets the flag indicating whether this is a filename pattern.  When this is
 * true, the filename is understood to be a placeholder for a numbered
 * sequence of filename, such as an image sequence.  In this case, a sequence
 * of one or more hash characters ("#") should appear in the filename string;
 * these characters will be filled in with the corresponding number (or more)
 * of digits representing the sequence number.  Sequence numbers always begin
 * counting at 0.
 *
 * When this is true, methods like has_hash() and get_hash_to_end() and
 * get_filename_index() may be called.  Methods like is_exists() will
 * implicitly test for existance of filename sequence 0.
 */ 2 4 this 3 398  7 pattern 1 405  
67 12 _inCKD07Jg4Y 0 6 52 405 0 9 cKD07Jg4Y 97 /**
 * Returns the flag indicating whether this is a filename pattern.  See
 * set_pattern().
 */ 1 4 this 3 399  
68 12 _inCKD07NmUz 0 6 53 405 0 9 cKD07NmUz 354 /**
 * Returns true if the filename is indicated to be a filename pattern (that
 * is, set_pattern(true) was called), and the filename pattern did include a
 * sequence of hash marks, or false if it was not a filename pattern or did
 * not include hash marks.  If this is true, then get_filename_index() will
 * return a different filename each time.
 */ 1 4 this 3 399  
69 12 _inCKD07q4gP 0 7 54 398 312 9 cKD07q4gP 0 2 4 this 3 399  5 index 1 410  
70 12 _inCKD074SYs 0 6 55 404 0 9 cKD074SYs 130 /**
 * Returns the part of the filename beginning at the hash sequence (if any),
 * and continuing to the end of the filename.
 */ 1 4 this 3 399  
71 12 _inCKD07pC53 0 4 56 409 0 9 cKD07pC53 0 2 4 this 3 398  1 s 1 404  
72 12 _inCKD07Mo1r 0 4 57 409 0 9 cKD07Mo1r 0 2 4 this 3 399  10 components 1 411  
73 12 _inCKD07MUbk 0 4 58 409 0 9 cKD07MUbk 0 1 4 this 3 398  
74 12 _inCKD07GI_b 0 6 59 405 0 9 cKD07GI_b 146 /**
 * Returns true if the filename is local, e.g.  does not begin with a slash,
 * or false if the filename is fully specified from the root.
 */ 1 4 this 3 399  
75 12 _inCKD07tIAk 0 6 60 405 0 9 cKD07tIAk 444 /**
 * Returns true if the filename is fully qualified, e.g.  begins with a slash.
 * This is almost, but not quite, the same thing as !is_local().  It's not
 * exactly the same because a special case is made for filenames that begin
 * with a single dot followed by a slash--these are considered to be fully
 * qualified (they are explicitly relative to the current directory, and do
 * not refer to a filename on a search path somewhere).
 */ 1 4 this 3 399  
76 12 _inCKD07_eKM 0 4 61 409 0 9 cKD07_eKM 0 1 4 this 3 398  
77 12 _inCKD07udOz 0 4 61 409 0 9 cKD07udOz 0 2 4 this 3 398  15 start_directory 1 399  
78 12 _inCKD07twJA 0 6 62 405 0 9 cKD07twJA 0 1 4 this 3 398  
79 12 _inCKD07X1o1 0 6 63 405 0 9 cKD07X1o1 0 1 4 this 3 398  
80 12 _inCKD07HThn 0 6 64 404 0 9 cKD07HThn 0 1 4 this 3 399  
81 12 _inCKD07mUcX 0 6 65 404 0 9 cKD07mUcX 0 1 4 this 3 399  
82 12 _inCKD07T7Xd 0 6 66 404 0 9 cKD07T7Xd 0 1 4 this 3 399  
83 12 _inCKD07XTVO 0 6 67 404 0 9 cKD07XTVO 0 1 4 this 3 399  
84 12 _inCKD07o4Sv 0 6 68 404 0 9 cKD07o4Sv 0 1 4 this 3 399  
85 12 _inCKD07Xz2_ 0 6 69 405 0 9 cKD07Xz2_ 0 1 4 this 3 399  
86 12 _inCKD074vqn 0 6 70 405 0 9 cKD074vqn 0 1 4 this 3 399  
87 12 _inCKD07ahKY 0 6 71 405 0 9 cKD07ahKY 0 1 4 this 3 399  
88 12 _inCKD07ADlT 0 6 72 405 0 9 cKD07ADlT 0 1 4 this 3 399  
89 12 _inCKD07dwcX 0 6 73 405 0 9 cKD07dwcX 0 1 4 this 3 399  
90 12 _inCKD07QRcf 0 6 74 410 0 9 cKD07QRcf 0 4 4 this 3 399  5 other 1 399  19 this_missing_is_old 1 405  20 other_missing_is_old 1 405  
91 12 _inCKD07ihlq 0 6 74 410 0 9 cKD07ihlq 0 3 4 this 3 399  5 other 1 399  19 this_missing_is_old 1 405  
92 12 _inCKD073wx_ 0 6 74 410 0 9 cKD073wx_ 0 2 4 this 3 399  5 other 1 399  
93 12 _inCKD07KJyF 0 6 75 414 0 9 cKD07KJyF 0 1 4 this 3 399  
94 12 _inCKD073OVg 0 6 76 414 0 9 cKD073OVg 0 1 4 this 3 399  
95 12 _inCKD07jnXJ 0 6 77 416 0 9 cKD07jnXJ 0 1 4 this 3 399  
96 12 _inCKD07_ktc 0 6 78 405 0 9 cKD07_ktc 0 3 4 this 3 398  10 searchpath 1 418  17 default_extension 1 404  
97 12 _inCKD07k2zY 0 6 78 405 0 9 cKD07k2zY 0 2 4 this 3 398  10 searchpath 1 418  
98 12 _inCKD07fEHg 0 6 79 405 0 9 cKD07fEHg 0 3 4 this 3 398  9 directory 1 398  13 allow_backups 1 405  
99 12 _inCKD0785oI 0 6 79 405 0 9 cKD0785oI 0 2 4 this 3 398  9 directory 1 398  
100 12 _inCKD0745N1 0 6 80 410 0 9 cKD0745N1 0 2 4 this 3 398  10 searchpath 1 418  
101 12 _inCKD07QaV2 0 6 81 401 0 9 cKD07QaV2 0 1 4 this 3 399  
102 12 _inCKD071pvM 0 6 81 405 0 9 cKD071pvM 0 2 4 this 3 399  8 contents 1 411  
103 12 _inCKD07hT0n 0 6 82 405 0 9 cKD07hT0n 0 2 4 this 3 399  6 stream 1 421  
104 12 _inCKD07luH_ 0 6 82 405 0 9 cKD07luH_ 0 2 4 this 3 399  6 stream 1 424  
105 12 _inCKD0783u8 0 6 83 405 0 9 cKD0783u8 0 3 4 this 3 399  6 stream 1 426  8 truncate 1 405  
106 12 _inCKD07RGVH 0 6 83 405 0 9 cKD07RGVH 0 2 4 this 3 399  6 stream 1 426  
107 12 _inCKD07Rfnm 0 6 83 405 0 9 cKD07Rfnm 0 3 4 this 3 399  6 stream 1 429  8 truncate 1 405  
108 12 _inCKD07XpRT 0 6 83 405 0 9 cKD07XpRT 0 2 4 this 3 399  6 stream 1 429  
109 12 _inCKD07jFAU 0 6 84 405 0 9 cKD07jFAU 0 2 4 this 3 399  6 stream 1 426  
110 12 _inCKD07ttUT 0 6 84 405 0 9 cKD07ttUT 0 2 4 this 3 399  6 stream 1 429  
111 12 _inCKD075Jdf 0 6 85 405 0 9 cKD075Jdf 0 3 4 this 3 399  6 stream 1 431  8 truncate 1 405  
112 12 _inCKD07v_IM 0 6 85 405 0 9 cKD07v_IM 0 2 4 this 3 399  6 stream 1 431  
113 12 _inCKD07mwiS 0 6 85 405 0 9 cKD07mwiS 0 3 4 this 3 399  6 stream 1 434  8 truncate 1 405  
114 12 _inCKD07xoXJ 0 6 85 405 0 9 cKD07xoXJ 0 2 4 this 3 399  6 stream 1 434  
115 12 _inCKD07wbx_ 0 6 86 405 0 9 cKD07wbx_ 0 2 4 this 3 399  6 stream 1 431  
116 12 _inCKD07dXEn 0 6 86 405 0 9 cKD07dXEn 0 2 4 this 3 399  6 stream 1 434  
117 12 _inCKD07m9kw 0 6 87 405 0 9 cKD07m9kw 0 1 4 this 3 399  
118 12 _inCKD07Cry9 0 6 88 405 0 9 cKD07Cry9 0 1 4 this 3 399  
119 12 _inCKD07aMuO 0 6 89 405 0 9 cKD07aMuO 0 1 4 this 3 399  
120 12 _inCKD07aavz 0 6 90 405 0 9 cKD07aavz 0 2 4 this 3 399  5 other 1 399  
121 12 _inCKD07jPPu 0 6 91 405 0 9 cKD07jPPu 0 2 4 this 3 399  5 other 1 399  
122 12 _inCKD07OOnR 0 6 92 405 0 9 cKD07OOnR 0 1 4 this 3 399  
123 12 _inCKD07eeq4 0 6 93 405 0 9 cKD07eeq4 0 1 4 this 3 399  
124 12 _inCKD07CI79 0 6 94 405 0 9 cKD07CI79 0 1 4 this 3 399  
125 12 _inCKD07OBrR 0 6 95 405 0 9 cKD07OBrR 34 // Comparison operators are handy. 2 4 this 3 399  5 other 1 404  
126 12 _inCKD07sEaR 0 6 96 405 0 9 cKD07sEaR 0 2 4 this 3 399  5 other 1 404  
127 12 _inCKD07YSEF 0 6 97 405 0 9 cKD07YSEF 0 2 4 this 3 399  5 other 1 404  
128 12 _inCKD07wktQ 0 6 98 410 0 9 cKD07wktQ 10 /**
 *
 */ 2 4 this 3 399  5 other 1 399  
129 12 _inCKD07eHUw 0 6 99 405 0 9 cKD07eHUw 349 /**
 * Returns true if the Filename is valid (not empty), or false if it is an
 * empty string.
 *
 * This implements the Python equivalent to operator bool.  Defining an actual
 * operator bool method for C++ use would work too, but it seems to cause too
 * many ambiguities for the C++ compiler, so we use this Python-only approach
 * instead.
 */ 1 4 this 3 399  
130 12 _inCKD07nnHL 0 6 100 410 0 9 cKD07nnHL 0 1 4 this 3 399  
131 12 _inCKD07gQYS 0 4 101 409 0 9 cKD07gQYS 10 /**
 *
 */ 2 4 this 3 399  3 out 1 436  
132 12 _inCKD07fmrp 0 4 102 409 0 9 cKD07fmrp 266 /**
 * Specifies the default encoding to be used for all subsequent Filenames.
 * This is used to represent wide-character (Unicode) filenames internally.
 * On non-Windows-based systems, the encoded filename is also passed to the
 * underlying operating system.
 */ 1 8 encoding 1 438  
133 12 _inCKD07KN3I 0 6 103 438 0 9 cKD07KN3I 125 /**
 * Specifies the default encoding to be used for all subsequent Filenames
 * objects.  See set_filesystem_encoding().
 */ 0 
134 12 _inCKD07safE 0 6 106 410 0 9 cKD07safE 0 0 
135 12 _inCKD07_r_i 0 4 107 409 0 9 cKD07_r_i 0 0 
136 12 _inCKD07CFZV 0 6 20 404 0 9 cKD07CFZV 60 // And retrieval is by any of the classic string operations. 1 4 this 3 399  
137 12 _inCKD07p5TH 0 7 161 442 0 9 cKD07p5TH 0 1 6 param0 0 440  
138 12 _inCKD07YGdR 0 6 111 396 0 9 cKD07YGdR 69 /**
 * Returns a pointer to the associated PandaFramework object.
 */ 1 4 this 3 440  
139 12 _inCKD07llyB 0 6 112 443 0 9 cKD07llyB 121 /**
 * Returns a pointer to the underlying GraphicsWindow object, if it is in fact
 * a window; or NULL if it is not.
 */ 1 4 this 3 440  
140 12 _inCKD07aLWw 0 6 113 445 0 9 cKD07aLWw 68 /**
 * Returns a pointer to the underlying GraphicsOutput object
 */ 1 4 this 3 440  
141 12 _inCKD07KUbp 0 7 114 447 0 9 cKD07KUbp 0 1 4 this 3 442  
142 12 _inCKD07OQs1 0 6 115 410 0 9 cKD07OQs1 207 /**
 * Returns the number of 3-d cameras associated with the window.  A window
 * usually has only one camera, but it may have multiple cameras if there are
 * multiple display regions within the window.
 */ 1 4 this 3 440  
143 12 _inCKD07Jdpp 0 6 116 448 0 9 cKD07Jdpp 61 /**
 * Returns the nth camera associated with the window.
 */ 2 4 this 3 440  1 n 1 410  
144 12 _inCKD07LKl9 0 6 117 450 0 9 cKD07LKl9 82 /**
 * Returns the default DisplayRegion created for the 2-d scene (render2d).
 */ 1 4 this 3 440  
145 12 _inCKD07VKsL 0 6 118 450 0 9 cKD07VKsL 80 /**
 * Returns the default DisplayRegion created for the 3-d scene (render).
 */ 1 4 this 3 440  
146 12 _inCKD07piA7 0 7 119 447 0 9 cKD07piA7 0 1 4 this 3 442  
147 12 _inCKD07SEBt 0 7 120 447 0 9 cKD07SEBt 0 1 4 this 3 442  
148 12 _inCKD07eVBf 0 7 121 447 0 9 cKD07eVBf 0 1 4 this 3 442  
149 12 _inCKD07mE42 0 7 122 447 0 9 cKD07mE42 0 1 4 this 3 442  
150 12 _inCKD079Hqw 0 7 123 447 0 9 cKD079Hqw 0 1 4 this 3 442  
151 12 _inCKD07IxxZ 0 7 124 447 0 9 cKD07IxxZ 0 1 4 this 3 442  
152 12 _inCKD07Blvn 0 4 125 409 0 9 cKD07Blvn 0 1 4 this 3 442  
153 12 _inCKD07MtUh 0 4 126 409 0 9 cKD07MtUh 0 1 4 this 3 442  
154 12 _inCKD07a23a 0 4 127 409 0 9 cKD07a23a 0 2 4 this 3 442  6 object 1 452  
155 12 _inCKD078CuG 0 6 128 405 0 9 cKD078CuG 0 3 4 this 3 442  6 parent 1 452  5 files 1 454  
156 12 _inCKD07c3x2 0 7 129 447 0 9 cKD07c3x2 0 3 4 this 3 442  6 parent 1 452  8 filename 1 398  
157 12 _inCKD07NSSi 0 7 130 447 0 9 cKD07NSSi 0 2 4 this 3 442  6 parent 1 452  
158 12 _inCKD07YumN 0 4 131 409 0 9 cKD07YumN 0 2 4 this 3 442  21 hierarchy_match_flags 1 410  
159 12 _inCKD07Dybn 0 4 131 409 0 9 cKD07Dybn 0 1 4 this 3 442  
160 12 _inCKD07aLMj 0 4 132 409 0 9 cKD07aLMj 0 1 4 this 3 442  
161 12 _inCKD07shAJ 0 4 133 409 0 9 cKD07shAJ 0 1 4 this 3 442  
162 12 _inCKD07GF8O 0 4 134 409 0 9 cKD07GF8O 0 2 4 this 3 442  6 enable 1 405  
163 12 _inCKD07sD3B 0 6 135 405 0 9 cKD07sD3B 63 /**
 * Returns the current state of the anim_controls flag.
 */ 1 4 this 3 440  
164 12 _inCKD078SXt 0 4 136 409 0 9 cKD078SXt 0 1 4 this 3 442  
165 12 _inCKD07jG7H 0 6 139 442 0 9 cKD07jG7H 0 2 4 this 3 442  10 split_type 1 389  
166 12 _inCKD07jmfa 0 6 139 442 0 9 cKD07jmfa 0 1 4 this 3 442  
167 12 _inCKD07CZGB 0 4 140 409 0 9 cKD07CZGB 0 3 4 this 3 442  6 enable 1 405  6 filled 1 405  
168 12 _inCKD07kSnp 0 4 140 409 0 9 cKD07kSnp 0 2 4 this 3 442  6 enable 1 405  
169 12 _inCKD07a6_v 0 4 141 409 0 9 cKD07a6_v 0 2 4 this 3 442  6 enable 1 405  
170 12 _inCKD07OTGD 0 4 142 409 0 9 cKD07OTGD 0 2 4 this 3 442  6 enable 1 405  
171 12 _inCKD07DrUc 0 4 143 409 0 9 cKD07DrUc 0 2 4 this 3 442  6 enable 1 405  
172 12 _inCKD07uwb_ 0 4 144 409 0 9 cKD07uwb_ 0 2 4 this 3 442  6 enable 1 405  
173 12 _inCKD07SqNR 0 4 145 409 0 9 cKD07SqNR 0 2 4 this 3 442  6 enable 1 405  
174 12 _inCKD07v13J 0 4 146 409 0 9 cKD07v13J 0 2 4 this 3 442  4 type 1 388  
175 12 _inCKD07Se1v 0 6 147 405 0 9 cKD07Se1v 59 /**
 * Returns the current state of the wireframe flag.
 */ 1 4 this 3 440  
176 12 _inCKD07EzZA 0 6 148 405 0 9 cKD07EzZA 66 /**
 * Returns the current state of the wireframe_filled flag.
 */ 1 4 this 3 440  
177 12 _inCKD07VZbH 0 6 149 405 0 9 cKD07VZbH 57 /**
 * Returns the current state of the texture flag.
 */ 1 4 this 3 440  
178 12 _inCKD07MZUJ 0 6 150 405 0 9 cKD07MZUJ 59 /**
 * Returns the current state of the two_sided flag.
 */ 1 4 this 3 440  
179 12 _inCKD07eADy 0 6 151 405 0 9 cKD07eADy 67 /**
 * Returns the current state of the one_sided_reverse flag.
 */ 1 4 this 3 440  
180 12 _inCKD07GGkv 0 6 152 405 0 9 cKD07GGkv 58 /**
 * Returns the current state of the lighting flag.
 */ 1 4 this 3 440  
181 12 _inCKD07SlWB 0 6 153 405 0 9 cKD07SlWB 58 /**
 * Returns the current state of the perpixel flag.
 */ 1 4 this 3 440  
182 12 _inCKD07UJm4 0 6 154 388 0 9 cKD07UJm4 55 /**
 * Returns the current background type setting.
 */ 1 4 this 3 440  
183 12 _inCKD07kcq_ 0 6 155 457 0 9 cKD07kcq_ 0 0 
184 12 _inCKD07CIRR 0 7 156 447 0 9 cKD07CIRR 0 1 4 this 3 442  
185 12 _inCKD07O0fX 0 6 157 410 0 9 cKD07O0fX 0 0 
186 12 _inCKD072D1X 0 4 158 409 0 9 cKD072D1X 0 0 
187 12 _inCKD07vhbO 0 6 159 410 0 9 cKD07vhbO 0 1 4 this 3 440  
188 12 _inCKD07i4Rg 0 6 160 410 0 9 cKD07i4Rg 0 1 4 this 3 442  
189 12 _inCKD07mL0u 0 7 165 459 364 9 cKD07mL0u 0 0 
190 12 _inCKD07SP8X 0 7 165 459 364 9 cKD07SP8X 0 1 6 param0 0 460  
191 12 _inCKD07GFAU 0 4 164 409 0 9 cKD07GFAU 0 2 4 this 3 459  5 other 1 452  
192 12 _inCKD07a_qA 0 7 168 462 366 9 cKD07a_qA 0 0 
193 12 _inCKD074GrH 0 7 168 462 366 9 cKD074GrH 0 1 6 param0 0 463  
194 12 _inCKD07RIEu 0 6 170 410 0 9 cKD07RIEu 0 1 4 this 3 462  
195 12 _inCKD07u07o 0 6 171 410 0 9 cKD07u07o 0 4 4 this 3 462  1 i 1 410  1 s 1 404  1 b 1 405  
196 12 _inCKD07FoZ4 0 6 172 447 0 9 cKD07FoZ4 0 2 4 this 3 462  8 filename 1 404  
197 12 _inCKD073rLd 0 4 173 409 0 9 cKD073rLd 0 2 4 this 3 462  3 mdl 1 447  
198 12 _inCKD07B_Fq 0 4 174 409 0 9 cKD07B_Fq 38 //WindowFramework* window_framework) { 1 4 this 3 462  
199 12 _inCKD07MIC_ 0 4 175 409 0 9 cKD07MIC_ 0 1 4 this 3 462  
200 12 _inCKD07cpk6 0 6 176 404 0 9 cKD07cpk6 0 0 
201 12 _inCKD074rrc 0 6 182 465 0 9 cKD074rrc 0 1 4 this 3 463  
202 12 _inCKD07Hww4 0 6 186 396 0 9 cKD07Hww4 0 1 4 this 3 463  
203 12 _inCKD07bucf 0 4 187 409 0 9 cKD07bucf 0 2 4 this 3 462  5 value 1 396  
204 12 _inCKD07auEK 0 6 189 410 0 9 cKD07auEK 0 0 
205 12 _inCKD07uA06 0 4 190 409 0 9 cKD07uA06 0 0 
206 12 _inCKD07nI9S 0 4 191 409 0 9 cKD07nI9S 0 0 
207 12 _inCKD07_8Jg 0 4 193 409 0 9 cKD07_8Jg 0 1 6 status 1 410  
84
383 8 Filename 0 141313 8 Filename 8 Filename 0 0 0 1 208 312 0 102 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 0 1 224 0 0 2 384 385 550
/**
 * The name of a file, such as a texture file or an Egg file.  Stores the full
 * pathname, and includes functions for extracting out the directory prefix
 * part and the file extension and stuff.
 *
 * A Filename is also aware of the mapping between the Unix-like filename
 * convention we use internally, and the local OS's specific filename
 * convention, and it knows how to perform basic OS-specific I/O, like testing
 * for file existence and searching a searchpath, as well as the best way to
 * open an fstream for reading or writing.
 */

384 4 Type 0 794624 14 Filename::Type 14 Filename::Type 383 0 0 0 0 0 0 0 0 0 3 9 T_general 19 Filename::T_general 74
// These type values must fit within the bits allocated for F_type, below.
0 5 T_dso 15 Filename::T_dso 0
1 12 T_executable 22 Filename::T_executable 0
2 0 0

385 5 Flags 0 794624 15 Filename::Flags 15 Filename::Flags 383 0 0 0 0 0 0 0 0 0 4 6 F_type 16 Filename::F_type 0
15 8 F_binary 18 Filename::F_binary 0
16 6 F_text 16 Filename::F_text 0
32 9 F_pattern 19 Filename::F_pattern 0
64 0 0

386 15 WindowFramework 0 75777 15 WindowFramework 15 WindowFramework 0 0 0 1 361 0 0 48 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 0 0 1 0 387 0 0 0 2 388 389 370
/**
 * This encapsulates the data that is normally associated with a single
 * window, or with a single display region within a window.  (In the case
 * where a window has been subdivided with split_window(), there may be
 * multiple WindowFrameworks objects that share the same GraphicsOutput
 * pointer, but reference different display regions within that window).
 */

387 27 TypedWritableReferenceCount 0 2048 27 TypedWritableReferenceCount 27 TypedWritableReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 414
/**
 * A base class for things which need to inherit from both TypedWritable and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedWritables and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

388 14 BackgroundType 0 794624 31 WindowFramework::BackgroundType 31 WindowFramework::BackgroundType 386 0 0 0 0 0 0 0 0 0 6 8 BT_other 25 WindowFramework::BT_other 0
0 10 BT_default 27 WindowFramework::BT_default 0
1 8 BT_black 25 WindowFramework::BT_black 0
2 7 BT_gray 24 WindowFramework::BT_gray 0
3 8 BT_white 25 WindowFramework::BT_white 0
4 7 BT_none 24 WindowFramework::BT_none 0
5 0 0

389 9 SplitType 0 794624 26 WindowFramework::SplitType 26 WindowFramework::SplitType 386 0 0 0 0 0 0 0 0 0 3 10 ST_default 27 WindowFramework::ST_default 0
0 13 ST_horizontal 30 WindowFramework::ST_horizontal 0
1 11 ST_vertical 28 WindowFramework::ST_vertical 0
2 0 0

390 2 NP 0 141313 2 NP 2 NP 0 0 0 1 363 364 0 1 362 0 0 1 0 391 0 0 0 0 0

391 8 NodePath 0 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 0 0 0 0 0 762
/**
 * NodePath is the fundamental system for disambiguating instances, and also
 * provides a higher-level interface for manipulating the scene graph.
 *
 * A NodePath is a list of connected nodes from the root of the graph to any
 * sub-node.  Each NodePath therefore uniquely describes one instance of a
 * node.
 *
 * NodePaths themselves are lightweight objects that may easily be copied and
 * passed by value.  Their data is stored as a series of NodePathComponents
 * that are stored on the nodes.  Holding a NodePath will keep a reference
 * count to all the nodes in the path.  However, if any node in the path is
 * removed or reparented (perhaps through a different NodePath), the NodePath
 * will automatically be updated to reflect the changes.
 */

392 6 Engine 0 26625 6 Engine 6 Engine 0 0 0 1 365 366 3 470 471 472 8 367 368 369 370 371 372 373 374 0 0 0 0 0 0

393 6 string 0 2105344 11 std::string 11 std::string 0 0 394 0 0 0 0 0 0 0 0 0 0

394 20 basic_string< char > 0 2048 25 std::basic_string< char > 25 std::basic_string< char > 0 0 0 0 0 0 0 0 0 0 0 0 0

395 28 PointerTo< WindowFramework > 0 2048 28 PointerTo< WindowFramework > 28 PointerTo< WindowFramework > 0 0 0 0 0 0 0 0 0 0 0 0 0

396 16 PandaFramework * 0 8576 16 PandaFramework * 16 PandaFramework * 0 0 397 0 0 0 0 0 0 0 0 0 0

397 14 PandaFramework 0 2048 14 PandaFramework 14 PandaFramework 0 0 0 0 0 0 0 0 0 0 0 0 164
/**
 * This class serves to provide a high-level framework for basic applications
 * that use Panda in simple ways (like opening a window to view models, etc.).
 */

398 10 Filename * 0 8576 10 Filename * 10 Filename * 0 0 383 0 0 0 0 0 0 0 0 0 0

399 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 400 0 0 0 0 0 0 0 0 0 0

400 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 383 0 0 0 0 0 0 0 0 0 0

401 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 402 0 0 0 0 0 0 0 0 0 0

402 8 PyObject 0 2105344 8 PyObject 8 PyObject 0 0 403 0 0 0 0 0 0 0 0 0 0

403 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

404 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

405 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

406 6 size_t 0 2105344 11 std::size_t 11 std::size_t 0 0 407 0 0 0 0 0 0 0 0 0 0

407 17 unsigned long int 0 8214 17 unsigned long int 17 unsigned long int 0 1 0 0 0 0 0 0 0 0 0 0 0

408 4 char 0 8194 4 char 4 char 0 5 0 0 0 0 0 0 0 0 0 0 0

409 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

410 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

411 15 vector_string * 0 8576 15 vector_string * 15 vector_string * 0 0 412 0 0 0 0 0 0 0 0 0 0

412 13 vector_string 0 2105344 13 vector_string 13 vector_string 0 0 413 0 0 0 0 0 0 0 0 0 0

413 17 pvector< string > 0 2048 22 pvector< std::string > 22 pvector< std::string > 0 0 0 0 0 0 0 0 0 0 0 0 0

414 6 time_t 0 2105344 6 time_t 6 time_t 0 0 415 0 0 0 0 0 0 0 0 0 0

415 8 long int 0 8210 8 long int 8 long int 0 1 0 0 0 0 0 0 0 0 0 0 0

416 10 streamsize 0 2105344 15 std::streamsize 15 std::streamsize 0 0 417 0 0 0 0 0 0 0 0 0 0

417 9 ptrdiff_t 0 2105344 14 std::ptrdiff_t 14 std::ptrdiff_t 0 0 415 0 0 0 0 0 0 0 0 0 0

418 19 DSearchPath const * 0 8576 19 DSearchPath const * 19 DSearchPath const * 0 0 419 0 0 0 0 0 0 0 0 0 0

419 17 DSearchPath const 0 8832 17 DSearchPath const 17 DSearchPath const 0 0 420 0 0 0 0 0 0 0 0 0 0

420 11 DSearchPath 0 2048 11 DSearchPath 11 DSearchPath 0 0 0 0 0 0 0 0 0 0 0 0 0

421 11 pifstream * 0 8576 11 pifstream * 11 pifstream * 0 0 422 0 0 0 0 0 0 0 0 0 0

422 9 pifstream 0 2105344 9 pifstream 9 pifstream 0 0 423 0 0 0 0 0 0 0 0 0 0

423 11 IFileStream 0 2048 11 IFileStream 11 IFileStream 0 0 0 0 0 0 0 0 0 0 0 0 303
/**
 * Implements a C++ stream object suitable for reading from files on disk.
 * This is similar to ifstream, but it provides low-level support for Panda's
 * simple-threading implementation (using this interface will block only the
 * current thread, rather than the entire process, on I/O waits).
 */

424 10 ifstream * 0 8576 15 std::ifstream * 15 std::ifstream * 0 0 425 0 0 0 0 0 0 0 0 0 0

425 8 ifstream 0 2048 13 std::ifstream 13 std::ifstream 0 0 0 0 0 0 0 0 0 0 0 0 0

426 11 pofstream * 0 8576 11 pofstream * 11 pofstream * 0 0 427 0 0 0 0 0 0 0 0 0 0

427 9 pofstream 0 2105344 9 pofstream 9 pofstream 0 0 428 0 0 0 0 0 0 0 0 0 0

428 11 OFileStream 0 2048 11 OFileStream 11 OFileStream 0 0 0 0 0 0 0 0 0 0 0 0 302
/**
 * Implements a C++ stream object suitable for writing to files on disk.  This
 * is similar to ofstream, but it provides low-level support for Panda's
 * simple-threading implementation (using this interface will block only the
 * current thread, rather than the entire process, on I/O waits).
 */

429 10 ofstream * 0 8576 15 std::ofstream * 15 std::ofstream * 0 0 430 0 0 0 0 0 0 0 0 0 0

430 8 ofstream 0 2048 13 std::ofstream 13 std::ofstream 0 0 0 0 0 0 0 0 0 0 0 0 0

431 10 pfstream * 0 8576 10 pfstream * 10 pfstream * 0 0 432 0 0 0 0 0 0 0 0 0 0

432 8 pfstream 0 2105344 8 pfstream 8 pfstream 0 0 433 0 0 0 0 0 0 0 0 0 0

433 10 FileStream 0 2048 10 FileStream 10 FileStream 0 0 0 0 0 0 0 0 0 0 0 0 324
/**
 * Implements a C++ stream object suitable for reading from and/or writing to
 * files on disk.  This is similar to fstream, but it provides low-level
 * support for Panda's simple-threading implementation (using this interface
 * will block only the current thread, rather than the entire process, on I/O
 * waits).
 */

434 9 fstream * 0 8576 14 std::fstream * 14 std::fstream * 0 0 435 0 0 0 0 0 0 0 0 0 0

435 7 fstream 0 2048 12 std::fstream 12 std::fstream 0 0 0 0 0 0 0 0 0 0 0 0 0

436 9 ostream * 0 8576 14 std::ostream * 14 std::ostream * 0 0 437 0 0 0 0 0 0 0 0 0 0

437 7 ostream 0 2048 12 std::ostream 12 std::ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

438 8 Encoding 0 794624 21 TextEncoder::Encoding 21 TextEncoder::Encoding 439 0 0 0 0 0 0 0 0 0 4 9 E_iso8859 22 TextEncoder::E_iso8859 0
0 6 E_utf8 19 TextEncoder::E_utf8 0
1 9 E_utf16be 22 TextEncoder::E_utf16be 0
2 9 E_unicode 22 TextEncoder::E_unicode 33
// Deprecated alias for E_utf16be
2 0 0

439 11 TextEncoder 0 2048 11 TextEncoder 11 TextEncoder 0 0 0 0 0 0 0 0 0 0 0 0 399
/**
 * This class can be used to convert text between multiple representations,
 * e.g.  UTF-8 to UTF-16.  You may use it as a static class object, passing
 * the encoding each time, or you may create an instance and use that object,
 * which will record the current encoding and retain the current string.
 *
 * This class is also a base class of TextNode, which inherits this
 * functionality.
 */

440 23 WindowFramework const * 0 8576 23 WindowFramework const * 23 WindowFramework const * 0 0 441 0 0 0 0 0 0 0 0 0 0

441 21 WindowFramework const 0 8832 21 WindowFramework const 21 WindowFramework const 0 0 386 0 0 0 0 0 0 0 0 0 0

442 17 WindowFramework * 0 8576 17 WindowFramework * 17 WindowFramework * 0 0 386 0 0 0 0 0 0 0 0 0 0

443 16 GraphicsWindow * 0 8576 16 GraphicsWindow * 16 GraphicsWindow * 0 0 444 0 0 0 0 0 0 0 0 0 0

444 14 GraphicsWindow 0 2048 14 GraphicsWindow 14 GraphicsWindow 0 0 0 0 0 0 0 0 0 0 0 0 122
/**
 * A window, fullscreen or on a desktop, into which a graphics device sends
 * its output for interactive display.
 */

445 16 GraphicsOutput * 0 8576 16 GraphicsOutput * 16 GraphicsOutput * 0 0 446 0 0 0 0 0 0 0 0 0 0

446 14 GraphicsOutput 0 2048 14 GraphicsOutput 14 GraphicsOutput 0 0 0 0 0 0 0 0 0 0 0 0 727
/**
 * This is a base class for the various different classes that represent the
 * result of a frame of rendering.  The most common kind of GraphicsOutput is
 * a GraphicsWindow, which is a real-time window on the desktop, but another
 * example is GraphicsBuffer, which is an offscreen buffer.
 *
 * The actual rendering, and anything associated with the graphics context
 * itself, is managed by the associated GraphicsStateGuardian (which might
 * output to multiple GraphicsOutput objects).
 *
 * GraphicsOutputs are not actually writable to bam files, of course, but they
 * may be passed as event parameters, so they inherit from
 * TypedWritableReferenceCount instead of TypedReferenceCount for that
 * convenience.
 */

447 10 NodePath * 0 8576 10 NodePath * 10 NodePath * 0 0 391 0 0 0 0 0 0 0 0 0 0

448 8 Camera * 0 8576 8 Camera * 8 Camera * 0 0 449 0 0 0 0 0 0 0 0 0 0

449 6 Camera 0 2048 6 Camera 6 Camera 0 0 0 0 0 0 0 0 0 0 0 0 121
/**
 * A node that can be positioned around in the scene graph to represent a
 * point of view for rendering a scene.
 */

450 15 DisplayRegion * 0 8576 15 DisplayRegion * 15 DisplayRegion * 0 0 451 0 0 0 0 0 0 0 0 0 0

451 13 DisplayRegion 0 2048 13 DisplayRegion 13 DisplayRegion 0 0 0 0 0 0 0 0 0 0 0 0 399
/**
 * A rectangular subregion within a window for rendering into.  Typically,
 * there is one DisplayRegion that covers the whole window, but you may also
 * create smaller DisplayRegions for having different regions within the
 * window that represent different scenes.  You may also stack up
 * DisplayRegions like panes of glass, usually for layering 2-d interfaces on
 * top of a 3-d scene.
 */

452 16 NodePath const * 0 8576 16 NodePath const * 16 NodePath const * 0 0 453 0 0 0 0 0 0 0 0 0 0

453 14 NodePath const 0 8832 14 NodePath const 14 NodePath const 0 0 391 0 0 0 0 0 0 0 0 0 0

454 27 pvector< Filename > const * 0 8576 27 pvector< Filename > const * 27 pvector< Filename > const * 0 0 455 0 0 0 0 0 0 0 0 0 0

455 25 pvector< Filename > const 0 8832 25 pvector< Filename > const 25 pvector< Filename > const 0 0 456 0 0 0 0 0 0 0 0 0 0

456 19 pvector< Filename > 0 2048 19 pvector< Filename > 19 pvector< Filename > 0 0 0 0 0 0 0 0 0 0 0 0 0

457 10 TextFont * 0 8576 10 TextFont * 10 TextFont * 0 0 458 0 0 0 0 0 0 0 0 0 0

458 8 TextFont 0 2048 8 TextFont 8 TextFont 0 0 0 0 0 0 0 0 0 0 0 0 252
/**
 * An encapsulation of a font; i.e.  a set of glyphs that may be assembled
 * together by a TextNode to represent a string of text.
 *
 * This is just an abstract interface; see StaticTextFont or DynamicTextFont
 * for an actual implementation.
 */

459 4 NP * 0 8576 4 NP * 4 NP * 0 0 390 0 0 0 0 0 0 0 0 0 0

460 10 NP const * 0 8576 10 NP const * 10 NP const * 0 0 461 0 0 0 0 0 0 0 0 0 0

461 8 NP const 0 8832 8 NP const 8 NP const 0 0 390 0 0 0 0 0 0 0 0 0 0

462 8 Engine * 0 8576 8 Engine * 8 Engine * 0 0 392 0 0 0 0 0 0 0 0 0 0

463 14 Engine const * 0 8576 14 Engine const * 14 Engine const * 0 0 464 0 0 0 0 0 0 0 0 0 0

464 12 Engine const 0 8832 12 Engine const 12 Engine const 0 0 392 0 0 0 0 0 0 0 0 0 0

465 36 PointerTo< WindowFramework > const * 0 8576 36 PointerTo< WindowFramework > const * 36 PointerTo< WindowFramework > const * 0 0 466 0 0 0 0 0 0 0 0 0 0

466 34 PointerTo< WindowFramework > const 0 8832 34 PointerTo< WindowFramework > const 34 PointerTo< WindowFramework > const 0 0 395 0 0 0 0 0 0 0 0 0 0

3
467 4 EM_H 0 0 0 0 0 0 
468 9 FRAMEWORK 0 0 0 0 0 14 PandaFramework 
469 7 MVIEW_H 0 0 0 0 0 0 
3
470 14 version_string 0 2 393 373 0 0 0 0 0 0 0 22 Engine::version_string 0

471 6 wframe 0 2 395 375 0 0 0 0 0 0 0 14 Engine::wframe 0

472 9 framework 0 6 396 376 377 0 0 0 0 0 0 17 Engine::framework 0

0
