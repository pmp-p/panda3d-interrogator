
#ifdef EMSCRIPTEN
    extern void emscripten_force_exit(int status);
#else
    static int emscripten_loop_run = 1;
    int check_timer(){ return 1;}
    void emscripten_cancel_main_loop(){
        emscripten_loop_run = 0;
    };

    typedef void (*funcptr)();

    void  main_loop_or_step(void);

    void emscripten_set_main_loop(funcptr emfunc, int a, int b){
        while(emscripten_loop_run){
            emfunc();
        }
    }
    void emscripten_force_exit(int status){ emscripten_cancel_main_loop(); }
#endif


#include <dlfcn.h>

#include "pandaFramework.h"
#include "pandaSystem.h"

#include <iostream>
using namespace std;

#define MAX_STEPS 160


static int step=0;
static int g_argc=0;
static void *g_argv=NULL;
static PandaFramework pf;


//-------------------------------- include "world.h" ---------------------------
class World
    {

    public:
        World();


        ~World();

        void build(WindowFramework* WindowFramework);


        static void call_exit(const Event* event, void* data);

        PT(WindowFramework) m_windowFramework;


        PandaFramework* pframework;
    };



//-----------------------------------------------------------------------------



World::World(){
    cout << "->Constructor\n";

    this->pframework = &pf; //new PandaFramework();
};


void
World::build(WindowFramework* windowFramework)     //   : m_windowFramework(windowFramework)
{
    cout << "->build()\n";
   // Escape quits
    m_windowFramework=    windowFramework;
    m_windowFramework->enable_keyboard();
    m_windowFramework->get_panda_framework()->define_key("escape",
                                                        "escapeQuits",
                                                        call_exit,
                                                        NULL);

}


void World::call_exit(const Event* event, void* data)
{
    nout << "Goodbye." << endl;
    step = MAX_STEPS ;
}


World::~World()
{
    cout << "->Destructor\n";
    for(int i = 0; i < 64; ++i)
    {
    //delete m_pieces[i];
    }
}


//-----------------------------------------------------------------------------



#define PF w->pframework

void
main_loop_or_step(){
	#if 1

    #else
    void *pf_alloc;
    pf_alloc = malloc( sizeof(PandaFramework) );
    PandaFramework pf = reinterpret_cast<PandaFramework>(*pf_alloc);
    #endif
        static World *w = new World();


	if (!step++) {
		cout << "You are likely to be eaten by a grue. step " << step << "/2" << endl;
    }


	if (step==1) {
		// setup Panda3d
		PF->open_framework(g_argc, (char **&)g_argv);

		WindowFramework *window = PF->open_window();

		PT(WindowFramework) windowFrameworkPtr = window;

		if(windowFrameworkPtr == NULL) {
			nout << "ERROR: could not open the WindowFramework." << endl;
			return ; // error
		}


		// We now have everything we need. Make an instance of the class and start
		// 3D rendering

		nout << "You are likely to be eaten by a grue." << endl;


        w->build(windowFrameworkPtr);
		//World world(windowFrameworkPtr);


		NodePath environ = window->load_model(PF->get_models(), "boris.bam");
		environ.reparent_to(window->get_render());
		environ.set_scale(3,3,3);
		environ.set_pos(0, 42, 0);


		return;
	}

	if (step>1) {
		Thread *current_thread = Thread::get_current_thread();

		if (!PF->do_frame(current_thread) or (step>MAX_STEPS) ) {
		    // quit Panda3d
            delete w;
		    PF->close_framework();
			emscripten_force_exit(0);
		}
	}
}


int main(int argc, char *argv[]) {

	cout << "dlhandle=" << dlopen("/lib/libpanda3d.js", RTLD_NOW | RTLD_GLOBAL) << endl;
	g_argc = argc;
	g_argv = (void*)argv;


    emscripten_set_main_loop(main_loop_or_step, 0, 1);     // <= this will exit to js now.

    return 0; // success
}




